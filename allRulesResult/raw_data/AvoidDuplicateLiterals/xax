23000,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,130,,"                ""    - type: "" + TestEntity.class.getName());"
23001,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,254,,"            more.invoke(Effectors.effector(String.class, ""sayHI"").buildAbstract(), MutableMap.of(""name"", ""Bob"")).get(),"
23002,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,254,,"            more.invoke(Effectors.effector(String.class, ""sayHI"").buildAbstract(), MutableMap.of(""name"", ""Bob"")).get(),"
23003,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,97,,"        TestResourceUnavailableException.throwIfResourceUnavailable(getClass(), ""/brooklyn/osgi/brooklyn-test-osgi-more-entities_0.1.0.jar"");"
23004,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,106,,"        Entity app = createAndStartApplication(""services: [ { type: 'more-entity:1.0' } ]"");"
23005,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,109,,"        Assert.assertEquals(moreEntity.getCatalogItemId(), ""more-entity:1.0"");"
23006,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,119,,"        TestResourceUnavailableException.throwIfResourceUnavailable(getClass(), ""/brooklyn/osgi/brooklyn-test-osgi-entities.jar"");"
23007,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,136,,"        TestResourceUnavailableException.throwIfResourceUnavailable(getClass(), ""/brooklyn/osgi/brooklyn-test-osgi-more-entities_0.2.0.jar"");"
23008,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,139,,"        addCatalogItems(getLocalResource(""more-entity-v2-osgi-catalog.yaml""));"
23009,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,108,,"                ""services:"","
23010,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,109,,"                ""- type: "" + ver(referrerSymbolicName));"
23011,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,220,,"            ""  brooklyn.children:"","
23012,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,221,,"            ""  - type: "" + ver(referrerSymbolicName));"
23013,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,285,,"            ""brooklyn.catalog:"","
23014,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,286,,"            ""  id: "" + firstItemId,"
23015,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,287,,"            ""  version: "" + TEST_VERSION,"
23016,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,288,,"            ""  itemType: entity"","
23017,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,289,,"            ""  libraries:"","
23018,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,290,,"            ""  - url: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_URL,"
23019,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,291,,"            ""  item:"","
23020,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,292,,"            ""    type: "" + SIMPLE_ENTITY_TYPE);"
23021,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,301,,"            ""  - name: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_NAME,"
23022,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,302,,"            ""    version: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_VERSION,"
23023,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,466,,"                ""services: \n"" +"
23024,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,467,,"                ""  - serviceType: ""+ver(id);"
23025,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,477,,"        String symbolicName = ""my.catalog.app.id.basic"";"
23026,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,484,,"            ""    type: org.apache.brooklyn.entity.stock.BasicEntity"");"
23027,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,496,,"            assertTrue(e.toString().contains(""recursive""), ""Unexpected error message: ""+e);"
23028,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,496,,"            assertTrue(e.toString().contains(""recursive""), ""Unexpected error message: ""+e);"
23029,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,533,,"                ""  id: "" + symbolicName + "".caller"","
23030,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,541,,"                ""  id: "" + symbolicName + "".callee"","
23031,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,591,,"                    ""    services:"","
23032,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,594,,"                    ""      - type: "" + symbolicName + "".callee"");"
23033,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,641,,"        addCatalogOSGiEntity(""test"", TestEntity.class.getName());"
23034,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,642,,"        String testName = ""test-applies-config-on-catalog-item"";"
23035,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,728,,"            ""  items:"","
23036,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,765,,"                ""    - type: ""+BasicEntity.class.getName(),"
23037,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,782,,"        assertEquals(app.config().get(configKey), ""myval"");"
23038,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,827,,"            ""  - id: "" + symbolicNameInner,"
23039,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,832,,"            ""    - url: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_URL,"
23040,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiYamlEntityTest.java,833,,"            ""    item: "" + SIMPLE_ENTITY_TYPE,"
23041,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogScanOsgiTest.java,97,,"                ""brooklyn.catalog:"","
23042,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogScanOsgiTest.java,169,,"        installBom(bom(""aaa"", ""2-SNAPSHOT"", 1), ResultCode.INSTALLED_NEW_BUNDLE);"
23043,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogScanOsgiTest.java,169,,"        installBom(bom(""aaa"", ""2-SNAPSHOT"", 1), ResultCode.INSTALLED_NEW_BUNDLE);"
23044,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogScanOsgiTest.java,186,,"        installBom(bomSnapshot(""bbb""));"
23045,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,48,,"                ""brooklyn.catalog:"","
23046,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,50,,"                ""  version: ""+TEST_VERSION,"
23047,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,51,,"                ""  itemType: entity"","
23048,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,52,,"                ""  item:"","
23049,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlCombiTest.java,51,,"            ""    item:"","
23050,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlCombiTest.java,64,,"        Assert.assertTrue(BasicEntity.class.isInstance(a), ""Wrong type: ""+a);"
23051,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,38,,"            ""brooklyn.catalog:"","
23052,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,40,,"            ""  version: "" + TEST_VERSION,"
23053,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,41,,"            ""  itemType: entity"","
23054,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,47,,"                ""services:"","
23055,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,48,,"                ""- type: ""+symbolicName);"
23056,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,70,,"            ""  - id: "" + parentSymbolicName,"
23057,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,72,,"            ""    item:"","
23058,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityNameTest.java,73,,"            ""      type: ""+ BasicEntity.class.getName(),"
23059,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityOsgiTypeRegistryTest.java,108,,"        String symbolicName = ""my.catalog.app.id.load"";"
23060,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityOsgiTypeRegistryTest.java,140,,"            ""brooklyn.catalog:"","
23061,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityOsgiTypeRegistryTest.java,141,,"            ""  id: "" + symbolicName,"
23062,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityOsgiTypeRegistryTest.java,142,,"            ""  version: "" + TEST_VERSION,"
23063,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityOsgiTypeRegistryTest.java,143,,"            ""  itemType: entity"","
23064,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,72,,"        String symbolicName = ""my.catalog.app.id.load"";"
23065,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,83,,"        assertTrue(planYaml.contains(""services:""), ""expected 'services:' block: ""+item+""\n""+planYaml);"
23066,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,105,,"            ""brooklyn.catalog:"","
23067,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,106,,"            ""  id: "" + symbolicName,"
23068,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,107,,"            ""  version: "" + TEST_VERSION,"
23069,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,131,,"                ""  item:"","
23070,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,132,,"                ""    type: "" + BasicEntity.class.getName());"
23071,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,149,,"            ""  itemType: entity"","
23072,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,167,,"            ""- type: "" + BasicEntity.class.getName());"
23073,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,247,,"                ""  items:"","
23074,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,248,,"                ""  - id: "" + referencedSymbolicName,"
23075,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,249,,"                ""    item:"","
23076,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,250,,"                ""      type: "" + TestEntity.class.getName(),"
23077,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,304,,"        String referrerSymbolicName = ""my.catalog.app.id.child.referring"";"
23078,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,314,,"                ""    services:"","
23079,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,315,,"                ""    - type: "" + BasicEntity.class.getName(),"
23080,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,316,,"                ""      brooklyn.children:"","
23081,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,317,,"                ""      - type: "" + ver(referencedSymbolicName, TEST_VERSION));"
23082,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,322,,"                ""  brooklyn.children:"","
23083,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,323,,"                ""  - type: "" + ver(referrerSymbolicName));"
23084,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,477,,"            Asserts.expectedFailureContains(e, ""recursive"", symbolicName);"
23085,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,565,,"        addCatalogEntity(""test"", TestEntity.class.getName());"
23086,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,566,,"        String val = ""test-applies-config-on-catalog-item"";"
23087,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,727,,"        assertEquals(app.config().get(configKey), ""myval"");"
23088,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,748,,"            ""    item: "" + TestEntity.class.getName(),"
23089,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,114,,"        String symbolicName = ""my.catalog.location.id.launch"";"
23090,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,152,,"                ""brooklyn.catalog:"","
23091,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,153,,"                ""  version: 0.1.2"","
23092,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,154,,"                ""  itemType: location"","
23093,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,155,,"                ""  items:"","
23094,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,156,,"                ""  - id: loc1"","
23095,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,158,,"                ""    item:"","
23096,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,159,,"                ""      type: localhost"","
23097,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,160,,"                ""      brooklyn.config:"","
23098,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,236,,"        LocationDefinition def1 = mgmt().getLocationRegistry().getDefinedLocationByName(""loc1"");"
23099,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,339,,"                ""  version: "" + TEST_VERSION,"
23100,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,104,,"        assertEquals(policy.getConfig(new BasicConfigKey<String>(String.class, ""config1"")), ""config1"");"
23101,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,106,,"        assertEquals(policy.getConfig(new BasicConfigKey<String>(String.class, ""config3"")), ""config3"");"
23102,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,141,,"            ""brooklyn.catalog:"","
23103,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,142,,"            ""  id: "" + referrerSymbolicName,"
23104,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,143,,"            ""  version: "" + TEST_VERSION,"
23105,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlRebindTest.java,251,,"            ""brooklyn.catalog:"","
23106,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,84,,"                ""brooklyn.catalog:"","
23107,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,86,,"                ""  itemType: template"","
23108,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,88,,"                ""  item:"","
23109,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,89,,"                ""    services:"","
23110,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,90,,"                ""    - type: "" + TestEntity.class.getName());"
23111,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,102,,"                ""services:"","
23112,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,57,,"        String symbolicName = ""sampleId"";"
23113,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,58,,"        String version = ""0.1.0"";"
23114,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,254,,"            ""    item:"","
23115,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,255,,"            ""      type: ""+BasicEntity.class.getName(),"
23116,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,100,,"    @DataProvider(name=""brooklynTypes"")"
23117,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,111,,"                ""brooklyn.catalog:"","
23118,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,112,,"                ""  id: "" + SYMBOLIC_NAME,"
23119,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,113,,"                ""  version: "" + TEST_VERSION,"
23120,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,114,,"                ""  itemType: "" + inferItemType(testClass),"
23121,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,115,,"                ""  item:"","
23122,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,116,,"                ""    type: "" + testClass.getName(),"
23123,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,117,,"                ""    brooklyn.parameters:"","
23124,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,118,,"                ""    - simple"");"
23125,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,120,,"        ConfigKey<String> SIMPLE_CONFIG = ConfigKeys.newStringConfigKey(""simple"");"
23126,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,146,,"                ""  itemType: entity"","
23127,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,149,,"                ""    - type: "" + ConfigEntityForTest.class.getName(),"
23128,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,161,,"            ""params=""+params);"
23129,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,170,,"                ""  items:"","
23130,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,171,,"                ""  - id: paramItem"","
23131,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,172,,"                ""    item:"","
23132,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,173,,"                ""      type: "" + type.getName(),"
23133,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,174,,"                ""      brooklyn.parameters:"","
23134,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,176,,"                ""  - id: "" + SYMBOLIC_NAME,"
23135,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,178,,"                ""      type: paramItem"");"
23136,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,242,,"                ""      - name: simple"","
23137,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,274,,"                ""      brooklyn.config:"","
23138,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,390,,"                ""services:"","
23139,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,391,,"                ""- type: "" + ver(SYMBOLIC_NAME));"
23140,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,522,,"                ""    - id: "" + ConfigEntityForTest.class.getSimpleName() + ""WithParams"","
23141,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,531,,"                ""          - type: "" + BasicStartable.class.getName(),"
23142,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,568,,"        assertEquals(as.get().config().get(ConfigKeys.newIntegerConfigKey(""test"")).intValue(), 1234);"
23143,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/qa/performance/CatalogPerformanceTest.java,64,,"                ""    description: My description"","
23144,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/qa/performance/CatalogPerformanceTest.java,66,,"                ""    item:"","
23145,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/rebind/RebindDslTest.java,90,,"        assertEquals(val, ""myval"");"
23146,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/rebind/RebindDslTest.java,108,,"                ""services:"","
23147,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/rebind/RebindDslTest.java,109,,"                ""- type: "" + BasicApplication.class.getName(),"
23148,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/rebind/RebindDslTest.java,110,,"                ""  brooklyn.config:"","
23149,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/rebind/RebindDslTest.java,111,,"                ""    "" + sensorSupplier1.getName() + "": $brooklyn:sensor(\""mySensorName\"")"");"
23150,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslParseComponentsTest.java,94,,"        Assert.assertEquals(find(""two"").getConfig(DEST), 1);"
23151,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslParseComponentsTest.java,132,,"        String y3 = Tasks.resolveValue(y1, String.class, ((EntityInternal) find(""one"")).getExecutionContext());"
23152,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslParseComponentsTest.java,153,,"        Object y1 = parseDslExpression(""$brooklyn:formatString(\""%s-%s\"", """
23153,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslSerializationTest.java,47,,"        BrooklynDslDeferredSupplier<?> awr = new DslComponent(Scope.GLOBAL, ""entity_id"").attributeWhenReady(""my_sensor"");"
23154,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslSerializationTest.java,51,,"        Assert.assertFalse(out.toLowerCase().contains(""literal""), ""serialization had wrong text: ""+out);"
23155,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslSerializationTest.java,51,,"        Assert.assertFalse(out.toLowerCase().contains(""literal""), ""serialization had wrong text: ""+out);"
23156,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslSerializationTest.java,52,,"        Assert.assertFalse(out.toLowerCase().contains(""absent""), ""serialization had wrong text: ""+out);"
23157,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslSerializationTest.java,61,,"        Map<String,Object> stuff = MutableMap.<String,Object>of(""stuff"", awr);"
23158,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslTest.java,137,,"        ConfigKey<String> configKey = ConfigKeys.newStringConfigKey(""testConfig"");"
23159,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslTest.java,264,,"        assertEquals(BrooklynDslCommon.formatString(""myval""), ""myval"");"
23160,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,71,,"                ""services:"","
23161,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,72,,"                ""- type: "" + BasicApplication.class.getName(),"
23162,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,73,,"                ""  brooklyn.config:"","
23163,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,85,,"                ""  brooklyn.children:"","
23164,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,86,,"                ""  - type: "" + BasicEntity.class.getName(),"
23165,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,87,,"                ""    id: child"");"
23166,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,98,,"                ""    brooklyn.config:"","
23167,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,152,,"                ""    - type: "" + BasicEntity.class.getName(),"
23168,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,184,,"                ""      brooklyn.config:"","
23169,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,285,,"        assertEquals(getConfigEventually(app, DEST), ""myvalue"");"
23170,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,309,,"                ""    id: sourceEntity"","
23171,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,322,,"                ""    configName: source"","
23172,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,505,,"        assertEquals(getConfigEventually(app, DEST), ""Brooklyn"");"
23173,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,575,,"        app.config().set(ConfigKeys.newConfigKey(InaccessibleType.class, ""targetValue""), new InaccessibleType());"
23174,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,690,,"        AttributeSensor<Entity> targetEntitySensor = Sensors.newSensor(Entity.class, ""targetEntity"");"
23175,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,807,,"                ""    test.sourceName: hello world"","
23176,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/DslYamlTest.java,809,,"        assertEquals(getConfigEventually(app, DEST), ""hello world"");"
23177,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/TagsYamlTest.java,36,,"                ""services:"","
23178,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/TagsYamlTest.java,37,,"                ""- type: "" + BasicApplication.class.getName(),"
23179,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/TagsYamlTest.java,38,,"                ""  brooklyn.tags:"","
23180,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/TagsYamlTest.java,49,,"                ""  - tag1"","
23181,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/test/lite/CampYamlLiteTest.java,132,,"            .configure(AddChildrenEffector.EFFECTOR_PARAMETER_DEFS, MutableMap.of(""war"", (Object)MutableMap.of("
23182,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/test/policy/failover/ElectPrimaryTest.java,167,,"        b.sensors().set(SENSOR1, ""hi2"");"
23183,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/test/policy/failover/ElectPrimaryTest.java,174,,"        a.sensors().set(SENSOR1, ""hi-a-1"");"
23184,./TargetProjects/brooklyn-server/camp/camp-server/src/main/java/org/apache/brooklyn/camp/server/dto/ApiErrorDto.java,60,,"            this.message = checkNotNull(message, ""message"");"
23185,./TargetProjects/brooklyn-server/camp/camp-server/src/test/java/org/apache/brooklyn/camp/server/dto/BasicDtoTest.java,52,,"        DtoCustomAttributes l = new DtoCustomAttributes(MutableMap.of(""bar"", ""bee""));"
23186,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/BrooklynFeatureEnablement.java,219,,"                        LOG.debug(""Enablement of ""+property+"" set to ""+val+"" from brooklyn properties (no-op as continues to resolve to ""+oldVal+"")"");"
23187,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/BrooklynFeatureEnablement.java,219,,"                        LOG.debug(""Enablement of ""+property+"" set to ""+val+"" from brooklyn properties (no-op as continues to resolve to ""+oldVal+"")"");"
23188,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,316,,"        checkNotNull(version, ""version"");"
23189,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,344,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
23190,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,344,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
23191,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,498,,"        return getFirstAsMap(itemDef, ""brooklyn.catalog"").orNull();        "
23192,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,570,,"        catalogMetadata.remove(""item"");"
23193,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,571,,"        catalogMetadata.remove(""items"");"
23194,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,572,,"        catalogMetadata.remove(""tags"");"
23195,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,669,,"        List<?> librariesAddedHereNames = MutableList.copyOf(getFirstAs(itemMetadataWithoutItemDef, List.class, ""brooklyn.libraries"", ""libraries"").orNull());"
23196,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,669,,"        List<?> librariesAddedHereNames = MutableList.copyOf(getFirstAs(itemMetadataWithoutItemDef, List.class, ""brooklyn.libraries"", ""libraries"").orNull());"
23197,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,774,,"                    log.warn(""Discouraged version syntax in id '""+id+""'; version should comply with brooklyn recommendation (#.#.#-qualifier or portion) or specify symbolic name and version explicitly, not OSGi version syntax"");"
23198,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,1101,,"        log.debug(""Catalog load, loading referenced BOM at ""+url+"" as part of ""+(containingBundle==null ? ""non-bundled load"" : containingBundle.getVersionedName())+"" (""+(resultNewFormat!=null ? resultNewFormat.size() : resultLegacyFormat!=null ? resultLegacyFormat.size() : ""(unknown)"")+"" items before load)"");"
23199,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,1101,,"        log.debug(""Catalog load, loading referenced BOM at ""+url+"" as part of ""+(containingBundle==null ? ""non-bundled load"" : containingBundle.getVersionedName())+"" (""+(resultNewFormat!=null ? resultNewFormat.size() : resultLegacyFormat!=null ? resultLegacyFormat.size() : ""(unknown)"")+"" items before load)"");"
23200,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,1270,,"                        this.item = MutableMap.of(""type"", itemDefinitionParsedToStringOrMap);"
23201,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,2227,,"                        dto.setPlanYaml(""services: [{ type: ""+dto.getJavaType()+"" }]"");"
23202,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/CatalogUtils.java,247,,"                        ""Catalog item addition: ""+entity+"" from ""+entity.getCatalogItemId()+"" applying its catalog item ID to ""+itemBeingAdded);"
23203,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/JavaCatalogToSpecTransformer.java,97,,"                @SuppressWarnings(""unchecked"")"
23204,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/ConfigPredicates.java,37,,"    @SuppressWarnings(""unused"") @Deprecated "
23205,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/MapConfigKey.java,184,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
23206,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplier.java,106,,"                .put(""X-Vault-Token"", token)"
23207,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplier.java,116,,"                : Urls.mergePaths(""v1"", mountPoint, ""data"", path);"
23208,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/internal/AbstractCollectionConfigKey.java,98,,"                    log.debug(""Trace for: ""+warning, new Throwable(""Trace for: ""+warning));"
23209,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/internal/AbstractConfigMapImpl.java,202,,"    @SuppressWarnings(""unchecked"")"
23210,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/effector/AddChildrenEffector.java,117,,"                if ( m.containsKey(""brooklyn.config"") ) {"
23211,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/effector/MethodEffector.java,86,,"        @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
23212,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,168,,"    @SuppressWarnings(""rawtypes"")"
23213,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,338,,"        if (flags.get(""parent"") != null && parent != null && flags.get(""parent"") != parent) {"
23214,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,339,,"            throw new IllegalArgumentException(""Multiple parents supplied, ""+flags.get(""parent"")+"" and ""+parent);"
23215,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,341,,"        if (flags.get(""owner"") != null && parent != null && flags.get(""owner"") != parent) {"
23216,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,574,,"                throw new UnsupportedOperationException(""Cannot change parent of ""+this+"" from ""+parent+"" to ""+entity+"" (parent change not supported)"");"
23217,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/BrooklynConfigKeys.java,153,,"            ""config['""+ONBOX_BASE_DIR.getName()+""']!"" +"
23218,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/BrooklynConfigKeys.java,153,,"            ""config['""+ONBOX_BASE_DIR.getName()+""']!"" +"
23219,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/Dumper.java,118,,"                out.append("" = "");"
23220,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/Dumper.java,119,,"                if (isSecret(it.getName())) out.append(""xxxxxxxx"");"
23221,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/Entities.java,184,,"    @SuppressWarnings(""unchecked"")"
23222,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityFunctions.java,51,,"    @SuppressWarnings(""unused"") @Deprecated "
23223,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityPredicates.java,71,,"    @SuppressWarnings(""unused"") @Deprecated "
23224,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityRelations.java,143,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
23225,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityRelations.java,143,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
23226,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/drivers/ReflectiveEntityDriverFactory.java,167,,"            if (!driverInterfaceName.endsWith(""Driver"")) {"
23227,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/internal/ConfigMapViewWithStringKeys.java,74,,"        throw new UnsupportedOperationException(""This view is read-only"");"
23228,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/feed/AttributePollHandler.java,126,,"            if (log.isTraceEnabled()) log.trace(""Read of ""+this+"" in ""+getBriefDescription()+"" gave exception (while not connected or not yet connected): ""+ exception);"
23229,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/feed/AttributePollHandler.java,162,,"                        log.warn(""Read of "" + getBriefDescription() + "" gave "" + type + "": "" + val);"
23230,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/internal/BrooklynPropertiesImpl.java,374,,"        if (flags.get(""warnIfNone"")!=null && !Boolean.FALSE.equals(flags.get(""warnIfNone""))) {"
23231,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/LocationConfigUtils.java,239,,"                                    log.debug(""Loaded private key data from ""+file+"" (public key data explicitly set)"");"
23232,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/LocationPredicates.java,36,,"    @SuppressWarnings(""unused"") @Deprecated "
23233,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,59,,"            shortener.append(""user"", user);"
23234,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,64,,"                shortener.append(""app"", shortName(app))"
23235,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,65,,"                        .append(""appId"", app.getId());"
23236,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,67,,"            shortener.append(""entity"", shortName(entity))"
23237,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/geo/UtraceHostGeoLookup.java,143,,"            log.debug(""Geo info lookup for ""+address+"" timed out after ""+timeout);"
23238,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/BrooklynBomOsgiArchiveInstaller.java,501,,"                log.debug(""Request to install ""+inferredMetadata.getVersionedName()+"" (checksum ""+inferredMetadata.getChecksum()+"", OSGi URL ""+inferredMetadata.getOsgiUniqueUrl()+"") in the presence of ""+result.getMetadata().getVersionedName()+"" (checksum ""+result.getMetadata().getChecksum()+"", OSGi URL ""+result.getMetadata().getOsgiUniqueUrl()+"")"");"
23239,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/BrooklynBomOsgiArchiveInstaller.java,508,,"                    log.trace(""Bundle ""+inferredMetadata+"" matches already installed managed bundle ""+result.getMetadata()"
23240,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/BrooklynBomOsgiArchiveInstaller.java,993,,"                    log.warn(""Installing bundle '"" + inferredMetadata + ""' from "" + source + "", even though 'id' in its catalog BOM is different ('"" + name + ""', v '""+version+""'); strongly recommended that the BOM 'id' match the bundle symbolic name"");"
23241,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerImpl.java,356,,"                LOG.info(""Management node ""+ownNodeId+"" in ""+managementContext.getManagementPlaneIdMaybe().or(""<new-plane>"")+"" running as HA "" + getInternalNodeState() + "" autodetected"""
23242,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerImpl.java,356,,"                LOG.info(""Management node ""+ownNodeId+"" in ""+managementContext.getManagementPlaneIdMaybe().or(""<new-plane>"")+"" running as HA "" + getInternalNodeState() + "" autodetected"""
23243,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerImpl.java,356,,"                LOG.info(""Management node ""+ownNodeId+"" in ""+managementContext.getManagementPlaneIdMaybe().or(""<new-plane>"")+"" running as HA "" + getInternalNodeState() + "" autodetected"""
23244,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerImpl.java,750,,"                new Object[] {result, nodeId, (masterMemento == null ? ""<none>"" : masterMemento.toVerboseString()), (ourMemento == null ? ""<none>"" : ourMemento.toVerboseString())});"
23245,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/BasicSubscriptionContext.java,73,,"    @SuppressWarnings(""rawtypes"")"
23246,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/BrooklynShutdownHooks.java,80,,"                    log.warn(""Call to invokeStopOnShutdown for ""+entity+"" while system already shutting down; invoking stop now and throwing exception"");"
23247,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/DeferredBrooklynProperties.java,201,,"    @SuppressWarnings(""rawtypes"")"
23248,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/EffectorUtils.java,135,,"                throw new IllegalArgumentException(""Invalid arguments (count mismatch) for effector ""+eff+"": ""+args.length+"" args"");"
23249,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/EffectorUtils.java,141,,"            throw new IllegalArgumentException(""Invalid arguments (missing ""+newArgsNeeded+"") for effector ""+eff+"": ""+args.length+"" args"");"
23250,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/LocalManagementContext.java,249,,"        if (!isRunning()) throw new IllegalStateException(""Management context no longer running"");"
23251,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/LocalSubscriptionManager.java,90,,"    @SuppressWarnings(""rawtypes"")"
23252,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/LocalSubscriptionManager.java,117,,"    @SuppressWarnings(""unchecked"")"
23253,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/LocalSubscriptionManager.java,123,,"        if (flags.containsKey(""tags"") || flags.containsKey(""tag"")) {"
23254,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentAccessManager.java,41,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
23255,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentAccessManager.java,41,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
23256,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentEntityManager.java,51,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" (with no initial management context supplied) is not valid for this operation."");"
23257,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentEntityManager.java,51,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" (with no initial management context supplied) is not valid for this operation."");"
23258,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentLocationManager.java,42,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation: cannot create ""+spec);"
23259,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,231,,"            return Maybe.absent(""Entity "" + entity + "" is no longer managed; OSGi context no longer available"");"
23260,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,253,,"        if (!this.entity.equals(entity)) throw new IllegalStateException(""Non-deployment context ""+this+"" can only use a single Entity: has ""+this.entity+"", but passed ""+entity);"
23261,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,253,,"        if (!this.entity.equals(entity)) throw new IllegalStateException(""Non-deployment context ""+this+"" can only use a single Entity: has ""+this.entity+"", but passed ""+entity);"
23262,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,253,,"        if (!this.entity.equals(entity)) throw new IllegalStateException(""Non-deployment context ""+this+"" can only use a single Entity: has ""+this.entity+"", but passed ""+entity);"
23263,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,473,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation."");"
23264,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentUsageManager.java,55,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
23265,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentUsageManager.java,55,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
23266,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/BrooklynMementoPersisterToObjectStore.java,327,,"                if (type == BrooklynObjectType.MANAGED_BUNDLE && id.endsWith("".jar"")) {"
23267,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/FileBasedObjectStore.java,102,,"                log.info(""Persistence deferred backup, directory ""+basedir+"" backed up to ""+backup.getAbsolutePath());"
23268,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/FileBasedObjectStore.java,297,,"            FatalConfigurationRuntimeException problem = new FatalConfigurationRuntimeException(""Invalid persistence directory "" + dir + "": "" +"
23269,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializer.java,290,,"        public String serializedClass(@SuppressWarnings(""rawtypes"") Class type) {"
23270,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,177,,"                        throw new IllegalStateException(""Rebind: aborting due to ""+errmsg, e);"
23271,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,185,,"                        throw new IllegalStateException(""Unexpected state '""+loadPolicyFailureMode+""' for loadPolicyFailureMode"");"
23272,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,200,,"            warn(""No entity found with id ""+id+""; dangling reference on rebind"");"
23273,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,312,,"                warn(errmsg+""; continuing"", e);"
23274,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,316,,"                throw new IllegalStateException(""Unexpected state '""+addPolicyFailureMode+""' for addPolicyFailureMode"");"
23275,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,460,,"                allExceptions.add(new IllegalStateException(""Dangling references (""+totalDangling+"" of ""+totalItems+"") present without rebind context""));"
23276,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindIteration.java,879,,"                    LOG.debug(""Inferred catalog item ID ""+t.getId()+"" for ""+entityManifest+"" from ancestor ""+ptr);"
23277,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindIteration.java,953,,"                    ""this may not be supported in future versions: id="" + entityId+""; type="" + entityType);"
23278,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindIteration.java,953,,"                    ""this may not be supported in future versions: id="" + entityId+""; type="" + entityType);"
23279,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindManagerImpl.java,284,,"        LOG.debug(""Starting persistence (""+this+""), mgmt ""+managementContext.getManagementNodeId());"
23280,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformer.java,281,,"                    LOG.warn(""Unable to delete "" + type + "" id""+Strings.s(missing.size())+"" (""+missing+""), """
23281,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformer.java,281,,"                    LOG.warn(""Unable to delete "" + type + "" id""+Strings.s(missing.size())+"" (""+missing+""), """
23282,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformer.java,281,,"                    LOG.warn(""Unable to delete "" + type + "" id""+Strings.s(missing.size())+"" (""+missing+""), """
23283,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformer.java,282,,"                            + ""because not found in persisted state (continuing)"");"
23284,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerLoader.java,80,,"            String oldVal = (String) args.get(""old_val"");"
23285,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerLoader.java,81,,"            String newVal = (String) args.get(""new_val"");"
23286,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/network/AbstractOnNetworkEnricher.java,95,,"                return input + "".mapped."" + network;"
23287,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/objs/BasicEntityTypeRegistry.java,59,,"                throw new IllegalArgumentException(""Implementation ""+implClazz+"" already registered against type ""+existingType+""; cannot also register against ""+type);"
23288,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/objs/BasicSpecParameter.java,190,,"                @SuppressWarnings(""unchecked"")"
23289,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/objs/BasicSpecParameter.java,210,,"        @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
23290,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/DependentConfiguration.java,186,,"    @SuppressWarnings(""unchecked"")"
23291,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/DependentConfiguration.java,276,,"        @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
23292,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/DependentConfiguration.java,407,,"        return new BasicTask<T>(MutableMap.of(""tag"", ""whenDone"", ""displayName"", ""waiting for job""), job);"
23293,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/StaticSensor.java,80,,"                    log.debug(this+"" not setting sensor ""+sensor+"" on ""+entity+""; cannot resolve ""+initParam(STATIC_VALUE)+"" after timeout "" + initParam(TIMEOUT));"
23294,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistry.java,131,,"    @SuppressWarnings(""deprecation"")"
23295,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistry.java,262,,"                throw new TypePlanException(""Cannot create spec from type ""+type+"" (kind ""+type.getKind()+""), recursive reference following ""+constraint.getAlreadyEncounteredTypes());"
23296,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistry.java,564,,"            throw new IllegalStateException(""Cannot add ""+type+"" to catalog; different ""+oldType+"" is already present (""+reasonForDetailedCheck+"")"");"
23297,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/typereg/RegisteredTypes.java,177,,"        if (symbolicName==null || version==null) log.warn(""Deprecated use of RegisteredTypes API passing null name/version"", new Exception(""Location of deprecated use, wrt ""+plan));"
23298,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,67,,"        @SuppressWarnings(""unchecked"")"
23299,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,214,,"        @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
23300,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,333,,"                    .add(""publishing"", publishing)"
23301,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,334,,"                    .add(""fromEntity"", fromEntity)"
23302,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,335,,"                    .add(""computing"", computingSupplier.get())"
23303,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Propagator.java,113,,"            throw new IllegalStateException(""Propagator enricher ""+this+"" must have 'propagating' and/or 'sensorMapping', or 'propagatingAll' or 'propagatingAllBut' set"");"
23304,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/entity/stock/AsyncApplicationImpl.java,177,,"        @SuppressWarnings(""serial"")"
23305,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/http/JsonFunctions.java,50,,"    @SuppressWarnings(""unused"") @Deprecated "
23306,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/http/JsonFunctions.java,87,,"                        throw new NoSuchElementException(""No element '""+element+"" in JSON, when walking ""+elements);"
23307,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/http/JsonFunctions.java,87,,"                        throw new NoSuchElementException(""No element '""+element+"" in JSON, when walking ""+elements);"
23308,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/ssh/SshValueFunctions.java,32,,"    @SuppressWarnings(""unused"") @Deprecated "
23309,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/byon/ByonLocationResolver.java,104,,"        String user = (String) config.getStringKey(""user"");"
23310,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/byon/ByonLocationResolver.java,105,,"        Integer port = TypeCoercions.coerce(config.getStringKey(""port""), Integer.class);"
23311,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocation.java,165,,"                @SuppressWarnings(""unchecked"")"
23312,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolver.java,45,,"    private static String BROOKLYN_LOCATION_LOCALHOST_PREFIX = LocationConfigUtils.BROOKLYN_LOCATION_PREFIX + ""."" + ""localhost"";"
23313,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/multi/MultiLocation.java,114,,"    @SuppressWarnings(""unchecked"")"
23314,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/LoaderDispatcher.java,46,,"                return Maybe.absent(""Failed to load class "" + className + "" from bundle "" + bundle, e);"
23315,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/config/ConfigBag.java,319,,"            throw new IllegalStateException(""Cannot insert ""+key+""=""+value+"": this config bag has been sealed and is now immutable."");"
23316,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/config/ConfigBag.java,570,,"                        log.warn(""Conflicting value for key ""+key+"" from deprecated name '""+deprecatedName+""'; """
23317,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/config/ConfigBag.java,570,,"                        log.warn(""Conflicting value for key ""+key+"" from deprecated name '""+deprecatedName+""'; """
23318,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/BrooklynTypeNameResolution.java,347,,"                            return Maybe.absent(() -> new IllegalArgumentException(""Invalid type '""+s+""': unexpected character preceeding position ""+index));"
23319,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/FlagUtils.java,467,,"                        f+"" in ""+objectOfField+"": attempting to change to ""+value+"" when was already ""+oldValue);"
23320,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/TypeCoercions.java,113,,"    @SuppressWarnings(""rawtypes"")"
23321,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,265,,"                    scriptInvocationCmd = BashCommands.sudo(scriptPath) + "" < /dev/null"";"
23322,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,273,,"                    .add(""RESULT=$?"");"
23323,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,281,,"            cmds.add(""exit $RESULT"");"
23324,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,370,,"            String catStdoutCmd = ""tail -c +""+(stdoutPosition+1)+"" ""+stdoutPath+"" 2> /dev/null"";"
23325,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjTool.java,363,,"                boolean uploadSuccess = Repeater.create(""async script upload on ""+SshjTool.this.toString()+"" (for ""+getSummary()+"")"")"
23326,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/osgi/BundleMaker.java,92,,"        File f = Os.newTempFile(path, ""zip"");"
23327,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/task/BasicTask.java,560,,"                rv += ""\n\n""+getExtraStatusText();"
23328,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/task/DynamicSequentialTask.java,314,,"                                            log.debug(""Secondary job queue for ""+DynamicSequentialTask.this+"" ignoring error in inessential task ""+secondaryJob+"": ""+e);"
23329,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/text/TemplateProcessor.java,174,,"                throw new IllegalStateException(""Error accessing config '""+key+""'""+"": ""+e, e);"
23330,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/text/TemplateProcessor.java,291,,"            this.location = checkNotNull(location, ""location"");"
23331,./TargetProjects/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/text/TemplateProcessor.java,404,,"            if (""config"".equals(key)) {"
23332,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/CatalogPredicatesTest.java,57,,"        CatalogItem<Entity, EntitySpec<?>> item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
23333,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/CatalogPredicatesTest.java,57,,"        CatalogItem<Entity, EntitySpec<?>> item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
23334,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/CatalogPredicatesTest.java,58,,"                .plan(""services:\n- type: org.apache.brooklyn.entity.stock.BasicEntity"")"
23335,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogItemComparatorTest.java,34,,"        compare(""0.0.1"", ""0.0.2"", 1);"
23336,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogItemComparatorTest.java,34,,"        compare(""0.0.1"", ""0.0.2"", 1);"
23337,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,56,,"            ""brooklyn.catalog:\n"" + "
23338,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,57,,"            ""  version: 1\n"" + "
23339,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,58,,"            ""  items:\n"" + "
23340,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,59,,"            ""    - id: test\n"" + "
23341,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,60,,"            ""      itemType: template\n"" + "
23342,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,64,,"        CatalogItem<Object, Object> item = assertSingleCatalogItem(""test"", ""1"");"
23343,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogTemplateTest.java,65,,"        Asserts.assertTrue(item.getPlanYaml().startsWith(""# comment""), ""Wrong format: ""+item.getPlanYaml());"
23344,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogUpgradeScannerTest.java,114,,"        final String upgradeFrom = bundleName(""managed"", ""1.0.0"");"
23345,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogUpgradeScannerTest.java,114,,"        final String upgradeFrom = bundleName(""managed"", ""1.0.0"");"
23346,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogUpgradeScannerTest.java,115,,"        final String upgradeTo = bundleName(""managed"", ""2.0.0"");"
23347,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogUpgradeScannerTest.java,136,,"        final String unmanagedBundle = bundleName(""unmanaged"", ""1.1.0"");"
23348,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogUpgradeScannerTest.java,136,,"        final String unmanagedBundle = bundleName(""unmanaged"", ""1.1.0"");"
23349,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogVersioningTest.java,62,,"        assertLegacyVersionParsesAs(""foo:1"", ""foo"", ""1"");"
23350,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogVersioningTest.java,85,,"        String symbolicName = ""sampleId"";"
23351,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogVersioningTest.java,86,,"        String version = ""0.1.0"";"
23352,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
23353,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
23354,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
23355,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
23356,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,43,,"        assertEquals(props.getFirst(""akey"", ""notThere""), ""aval"");"
23357,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,150,,"                ""a.key"", ""aval"", ""a.key2"", ""aval2"", ""akey"", ""noval"", ""b.key"", ""bval""));"
23358,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,150,,"                ""a.key"", ""aval"", ""a.key2"", ""aval2"", ""akey"", ""noval"", ""b.key"", ""bval""));"
23359,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyConstraintTest.java,80,,"                .description(""Configuration key that must not be null"")"
23360,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyConstraintTest.java,433,,"        assertKeyBehaviour(""only other key set"", clazz, MutableMap.of(""y"", ""myval""), true);"
23361,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyConstraintTest.java,434,,"        assertKeyBehaviour(""both set"", clazz, MutableMap.of(""y"", ""myval"", key, ""myval""), true);"
23362,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationRebindTest.java,54,,"                .configure(""oldKey1"", ""myval""));"
23363,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationRebindTest.java,54,,"                .configure(""oldKey1"", ""myval""));"
23364,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationRebindTest.java,65,,"        assertTrue(allLines.contains(""key1""), ""contains 'key1', allLines=""+allLines);"
23365,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationRebindTest.java,92,,"        assertTrue(allLines.contains(""<key1>""), ""should contain '<key1>', allLines=""+allLines);"
23366,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,59,,"    public static final ConfigKey<String> KEY_1 = ConfigKeys.builder(String.class, ""key1"")"
23367,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,60,,"            .deprecatedNames(""oldKey1"", ""oldKey1b"")"
23368,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,60,,"            .deprecatedNames(""oldKey1"", ""oldKey1b"")"
23369,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,66,,"                .configure(""oldSuperKey1"", ""myval""));"
23370,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,66,,"                .configure(""oldSuperKey1"", ""myval""));"
23371,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,84,,"                .configure(""oldSuperKey1b"", ""myval2"")"
23372,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,102,,"                .configure(""oldSubKey2"", ""myval3"")"
23373,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyDeprecationTest.java,103,,"                .configure(""oldInterfaceKey1"", ""myval4""));"
23374,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeysTest.java,35,,"        ConfigKey<String> key = ConfigKeys.newStringConfigKey(""privateKeyFile"", ""my descr"", ""my default val"");"
23375,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeysTest.java,35,,"        ConfigKey<String> key = ConfigKeys.newStringConfigKey(""privateKeyFile"", ""my descr"", ""my default val"");"
23376,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeysTest.java,54,,"        ConfigKey<String> key = ConfigKeys.newStringConfigKey(""mykey"", ""my descr"", ""my default val"");"
23377,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsDeprecationTest.java,38,,"                .configure(""oldConfMapDeepMerge"", ImmutableMap.of(""mykey"", ""myval"")));"
23378,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsDeprecationTest.java,38,,"                .configure(""oldConfMapDeepMerge"", ImmutableMap.of(""mykey"", ""myval"")));"
23379,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsDeprecationTest.java,38,,"                .configure(""oldConfMapDeepMerge"", ImmutableMap.of(""mykey"", ""myval"")));"
23380,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsDeprecationTest.java,52,,"                .configure(""confMapDeepMerge"", ImmutableMap.of(""mykey"", ""myval""))"
23381,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsDeprecationTest.java,72,,"                .configure(""oldConfMapDeepMerge"", ImmutableMap.of(""mykey2"", ""myval2"")));"
23382,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsDeprecationTest.java,72,,"                .configure(""oldConfMapDeepMerge"", ImmutableMap.of(""mykey2"", ""myval2"")));"
23383,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsMoreTest.java,76,,"        MapConfigKey<String> key = new MapConfigKey.Builder<>(String.class, ""myname"")"
23384,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsMoreTest.java,77,,"                .description(""my description"")"
23385,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsMoreTest.java,166,,"        entity.config().set(ConfigKeys.newConfigKey(Object.class, TestEntity.CONF_MAP_OBJ_THING.getName()+"".dotext""), 1);"
23386,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapListAndOtherStructuredConfigKeyTest.java,87,,"        entity.config().set(TestEntity.CONF_MAP_THING.subKey(""akey""), ""aval"");"
23387,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapListAndOtherStructuredConfigKeyTest.java,87,,"        entity.config().set(TestEntity.CONF_MAP_THING.subKey(""akey""), ""aval"");"
23388,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapListAndOtherStructuredConfigKeyTest.java,88,,"        entity.config().set(TestEntity.CONF_MAP_THING.subKey(""bkey""), ""bval"");"
23389,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapListAndOtherStructuredConfigKeyTest.java,88,,"        entity.config().set(TestEntity.CONF_MAP_THING.subKey(""bkey""), ""bval"");"
23390,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapListAndOtherStructuredConfigKeyTest.java,96,,"        final AtomicReference<String> bval = new AtomicReference<String>(""bval-too-early"");"
23391,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapListAndOtherStructuredConfigKeyTest.java,274,,"        entity.config().set(TestEntity.CONF_SET_THING, SetModifications.add(""bval"", ""cval""));"
23392,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/SanitizerTest.java,38,,"                .put(""PREFIX_password_SUFFIX"", ""pa55w0rd"")"
23393,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/SanitizerTest.java,44,,"                .put(""PREFIX_access.cert_SUFFIX"", ""myval"")"
23394,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,61,,"        endpoint = getTestProperty(""endpoint"");"
23395,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,62,,"        path = getTestProperty(""path"");"
23396,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,87,,"    @Test(groups = ""Live"")"
23397,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,90,,"        ExternalConfigSupplier ecs = new VaultTokenExternalConfigSupplier(null, ""test"","
23398,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,139,,"        String appId = getTestProperty(""appId"");"
23399,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,113,,"      server.enqueue(jsonResponse(""test.json""));"
23400,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,117,,"              .configure(HttpCommandEffector.EFFECTOR_URI, url(""/get?login=myLogin""))"
23401,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,118,,"              .configure(HttpCommandEffector.EFFECTOR_HTTP_VERB, ""GET"")"
23402,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,119,,"              .configure(HttpCommandEffector.JSON_PATH, ""$.args.login"")"
23403,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,132,,"      Asserts.assertEquals(results.get(0), ""myLogin"");"
23404,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,147,,"              .configure(CompositeEffector.EFFECTOR_NAME, ""start"")"
23405,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/CompositeEffectorTest.java,195,,"              .configure(CompositeEffector.EFFECTOR_NAME, ""stop"")"
23406,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorBasicTest.java,73,,"        app.invoke(Startable.START, MutableMap.of(""locations"", locs)).getUnchecked();"
23407,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorBasicTest.java,198,,"        Assert.assertFalse(Strings.containsLiteral(collapsed, ""Propagated""), ""Error too verbose: ""+collapsed);"
23408,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorBasicTest.java,199,,"        Assert.assertTrue(Strings.containsLiteral(collapsed, ""invoking""), ""Error not verbose enough: ""+collapsed);"
23409,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,69,,"        assertEquals(effector.getDescription(), ""my effector description"");"
23410,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,74,,"                        new BasicParameterType<String>(""param1"", String.class, ""my param description"", ""my default val"")));"
23411,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,74,,"                        new BasicParameterType<String>(""param1"", String.class, ""my param description"", ""my default val"")));"
23412,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,74,,"                        new BasicParameterType<String>(""param1"", String.class, ""my param description"", ""my default val"")));"
23413,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,104,,"        assertEquals(actuals.size(), expecteds.size(), ""actual=""+actuals);"
23414,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,78,,"        assertEquals(""sayHi1"", MyEntity.SAY_HI_1.getName());"
23415,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,81,,"        assertEquals(ImmutableList.of(""name"", ""greeting""), getParameterNames(MyEntity.SAY_HI_1));"
23416,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,81,,"        assertEquals(ImmutableList.of(""name"", ""greeting""), getParameterNames(MyEntity.SAY_HI_1));"
23417,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,92,,"        assertEquals(""hi Bob"", e.sayHi1(""Bob"", ""hi""));"
23418,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,92,,"        assertEquals(""hi Bob"", e.sayHi1(""Bob"", ""hi""));"
23419,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,59,,"    public static final Effector<Integer> DOUBLE_1 = Effectors.effector(Integer.class, ""double"")"
23420,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,60,,"            .description(""doubles the given number"")"
23421,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,61,,"            .parameter(Integer.class, ""numberToDouble"")"
23422,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,250,,"            .parameter(Integer.class, ""numberToStartWith"")"
23423,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,399,,"            .parameter(AtomicBoolean.class, ""lock"")"
23424,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/MethodEffectorTest.java,72,,"                @EffectorParam(name=""first"", description=""first argument"") String first,"
23425,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/MethodEffectorTest.java,73,,"                @EffectorParam(name=""second"", description=""2nd arg"") String second) throws Exception;"
23426,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/MethodEffectorTest.java,252,,"        String result2 = entity.invoke(MyEntity.EFFECTOR_WITH_DEFAULTS, ImmutableMap.of(""first"", ""myfirst"")).get();"
23427,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/MethodEffectorTest.java,353,,"                    log.warn(""Failure: ""+t, t);"
23428,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ProxyEffectorTest.java,45,,"                AddEffector.EFFECTOR_NAME, ""proxy-effector"","
23429,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorHttpBinTest.java,60,,"    final static Effector<String> EFFECTOR_HTTPBIN = Effectors.effector(String.class, ""Httpbin"").buildAbstract();"
23430,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorHttpBinTest.java,79,,"                    !expectsPost && !method.equals(""GET"")) {"
23431,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorHttpBinTest.java,114,,"                .handler(""/get"", handler)"
23432,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorHttpBinTest.java,151,,"                .configure(HttpCommandEffector.JSON_PATHS_AND_SENSORS, ImmutableMap.of(""$.url"", ""result""))"
23433,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorHttpBinTest.java,165,,"                .configure(HttpCommandEffector.JSON_PATH, ""$.args.id"")"
23434,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorHttpBinTest.java,169,,"        Assert.assertEquals(val, ""myId"");"
23435,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorTest.java,114,,"              .configure(HttpCommandEffector.EFFECTOR_HTTP_VERB, ""GET"")"
23436,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorTest.java,154,,"              .configure(HttpCommandEffector.EFFECTOR_URI, url(""/post""))"
23437,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorTest.java,155,,"              .configure(HttpCommandEffector.EFFECTOR_HTTP_VERB, ""POST"")"
23438,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorTest.java,156,,"              .configure(HttpCommandEffector.EFFECTOR_HTTP_PAYLOAD, ImmutableMap.of(""key"", ""value""))"
23439,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorTest.java,158,,"              .configure(HttpCommandEffector.JSON_PATH, ""$.data"")"
23440,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/http/HttpCommandEffectorTest.java,280,,"              .configure(HttpCommandEffector.EFFECTOR_URI, url(""/get?login=myLogin""))"
23441,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,102,,"    @Test(groups=""Integration"")"
23442,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,154,,"            log.info(""The error if required PID is not found is: ""+e);"
23443,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,156,,"            Assert.assertTrue(e.toString().contains(""Process with PID""), ""Expected nice clue in error but got: ""+e);"
23444,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,156,,"            Assert.assertTrue(e.toString().contains(""Process with PID""), ""Expected nice clue in error but got: ""+e);"
23445,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,189,,"        File f = File.createTempFile(""testBrooklynPid"", "".pid"");"
23446,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,189,,"        File f = File.createTempFile(""testBrooklynPid"", "".pid"");"
23447,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/enricher/BasicEnricherTest.java,79,,"        enricher.setDisplayName(""Bob"");"
23448,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/enricher/BasicEnricherTest.java,80,,"        enricher.config().set(MyEnricher.STR_KEY, ""aval"");"
23449,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/enricher/EnricherConfigTest.java,44,,"                .put(""strKey"", ""aval"")"
23450,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AbstractApplicationLegacyTest.java,96,,"        assertEquals(child.getCallHistory(), ImmutableList.of(""start""));"
23451,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/ApplicationLifecycleStateTest.java,160,,"        ServiceStateLogic.ServiceNotUpLogic.updateNotUpIndicator(child, ""myIndicator"", ""Simulate not-up of child"");"
23452,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/ApplicationLifecycleStateTest.java,160,,"        ServiceStateLogic.ServiceNotUpLogic.updateNotUpIndicator(child, ""myIndicator"", ""Simulate not-up of child"");"
23453,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/ApplicationLifecycleStateTest.java,253,,"                app.sensors().set(TEST_SENSOR, ""first"");"
23454,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/ApplicationLifecycleStateTest.java,257,,"                app.sensors().set(TEST_SENSOR, ""second"");"
23455,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,83,,"            final AttributeSensor<String> nextSensor = Sensors.newStringSensor(""attributeMapTest.exampleSensor""+i, """");"
23456,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,135,,"        map.update(sensor1, ""1val"");"
23457,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,136,,"        map.update(sensor2, ""2val"");"
23458,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,168,,"        map.update(sensor, ""parentValue"");"
23459,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,169,,"        map.update(childSensor, ""childValue"");"
23460,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,113,,"        Task<Function<String, String>> task = DependentConfiguration.regexReplacement(""foo"", ""bar"");"
23461,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,113,,"        Task<Function<String, String>> task = DependentConfiguration.regexReplacement(""foo"", ""bar"");"
23462,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,116,,"        Assert.assertEquals(regexReplacer.apply(""somefootext""), ""somebartext"");"
23463,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,116,,"        Assert.assertEquals(regexReplacer.apply(""somefootext""), ""somebartext"");"
23464,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,161,,"        entity.sensors().set(TestEntity.NAME, ""myval"");"
23465,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,167,,"        final Task<String> t = submit(DependentConfiguration.attributeWhenReady(entity, TestEntity.NAME, Predicates.equalTo(""myval2"")));"
23466,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,244,,"            if (!e.toString().contains(""Aborted waiting for ready"")) throw e;"
23467,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitiesTest.java,106,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
23468,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitiesTest.java,145,,"            .addInitializer(EntityInitializers.addingTags(""foo"")));"
23469,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,59,,"        final String myName = ""myname"";"
23470,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,83,,"        entity.sensors().set(TestEntity.NAME, ""before"");"
23471,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,84,,"        final String after = ""after"";"
23472,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,96,,"        EntityAsserts.assertAttributeEqualsEventually(ImmutableMap.of(""timeout"", ""100ms""), entity, TestEntity.NAME, after);"
23473,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,123,,"                .configure(""myentity.myconfig"", ""myval1"")"
23474,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,123,,"                .configure(""myentity.myconfig"", ""myval1"")"
23475,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,124,,"                .configure(""myentity.myconfigwithflagname"", ""myval2""));"
23476,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,124,,"                .configure(""myentity.myconfigwithflagname"", ""myval2""));"
23477,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,135,,"                .configure(""myconfigflagname"", ""myval""));"
23478,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,155,,"                .configure(""notThere"", ""notThereVal""));"
23479,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,155,,"                .configure(""notThere"", ""notThereVal""));"
23480,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,166,,"                .configure(""mychildconfigflagname"", ""myval2"")"
23481,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,195,,"                .configure(""mychildentity.myconfigwithflagname"", ""myval"")"
23482,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,200,,"                .configure(""mychildentity.myconfigwithflagname"", ""overrideMyval"")"
23483,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,201,,"                .configure(""notThere"", ""overrideNotThereVal""));"
23484,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,227,,"                .configure(TestEntity.CONF_MAP_THING.subKey(""mysub""), ""myval""));"
23485,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,261,,"        assertEquals(entity.config().getLocalRaw(TestEntity.CONF_MAP_THING).get(), ImmutableMap.of(""mysub"", ImmutableMap.of(""sub2"", 4)));"
23486,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,491,,"            @SuppressWarnings(""unchecked"")"
23487,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,631,,"                .configure(MyBaseEntity.SUPER_KEY_1, ""changed""));"
23488,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,695,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
23489,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,729,,"        LatchingCallable<String> work = new LatchingCallable<String>(""abc"");"
23490,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,914,,"                e -> Asserts.expectedFailureContainsIgnoreCase(e, ""-42m"", ""positive""));"
23491,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,914,,"                e -> Asserts.expectedFailureContainsIgnoreCase(e, ""-42m"", ""positive""));"
23492,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigUsageTest.java,68,,"                .configure(strKey, ""aval"")"
23493,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigUsageTest.java,112,,"                .configure(strKeyWithDefault, ""customval""));"
23494,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigUsageTest.java,148,,"                .configure(strKey, ""diffval""));"
23495,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityFunctionsTest.java,50,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
23496,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityFunctionsTest.java,53,,"        assertEquals(EntityFunctions.attribute(TestEntity.NAME, ""%s - suffix"").apply(entity), ""myname - suffix"");"
23497,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityFunctionsTest.java,53,,"        assertEquals(EntityFunctions.attribute(TestEntity.NAME, ""%s - suffix"").apply(entity), ""myname - suffix"");"
23498,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityInitializersTest.java,41,,"    private ConfigKey<String> keyWithDefault = ConfigKeys.newStringConfigKey(""mykey"", ""mydescription"", ""mydefault"");"
23499,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityInitializersTest.java,46,,"        assertEquals(resolve(ImmutableMap.of(""mykey"", ""myval""), keyWithDefault), ""myval"");"
23500,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityNameTest.java,46,,"                .displayName(""myDisplayName""));"
23501,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityNameTest.java,53,,"                .configure(AbstractEntity.DEFAULT_DISPLAY_NAME, ""myDefaultName""));"
23502,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityPredicatesTest.java,67,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
23503,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityPredicatesTest.java,79,,"        assertFalse(EntityPredicates.attributeEqualTo(TestEntity.NAME, ""wrongname"").apply(entity));"
23504,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySpecTest.java,89,,"                        .configure(MyPolicy.CONF1, ""myconf1val"")"
23505,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySubscriptionTest.java,109,,"        observedEntity.sensors().set(TestEntity.NAME, ""myname"");"
23506,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySubscriptionTest.java,271,,"        entity.subscriptions().subscribe(ImmutableMap.of(""notifyOfInitialValue"", true), observedEntity, TestEntity.SEQUENCE, listener);"
23507,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityTypeTest.java,127,,"        assertNotNull(Iterables.find(effectors, new MatchesNamePredicate(""myEffector"")), null);"
23508,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityTypeTest.java,128,,"        assertNotNull(Iterables.find(effectors, new MatchesNamePredicate(""identityEffector"")), null);"
23509,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/LocationSetFromFlagTest.java,42,,"        MyLocation loc = newLocation(MutableMap.of(""str1"", ""myval""));"
23510,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/PolicySetFromFlagTest.java,42,,"        MyPolicy policy = newPolicy(MutableMap.of(""str1"", ""myval""));"
23511,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/BasicDownloadsRegistryTest.java,55,,"        entity.config().set(BrooklynConfigKeys.SUGGESTED_VERSION, ""myversion"");"
23512,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/BasicDownloadsRegistryTest.java,57,,"        String expectedFilename = String.format(""version=%s,type=%s,simpletype=%s"", ""myversion"", TestEntity.class.getName(), ""TestEntity"");"
23513,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/BasicDownloadsRegistryTest.java,68,,"        entity.sensors().set(Attributes.DOWNLOAD_ADDON_URLS, ImmutableMap.of(""myaddon"", ""acme.com/addon=${addon},version=${addonversion},type=${type},simpletype=${simpletype}""));"
23514,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,74,,"        brooklynProperties.put(""brooklyn.downloads.all.url"", ""myurl"");"
23515,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,74,,"        brooklynProperties.put(""brooklyn.downloads.all.url"", ""myurl"");"
23516,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,92,,"        brooklynProperties.put(""brooklyn.downloads.all.fallbackurl"", ""version=${version}"");"
23517,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,93,,"        entity.config().set(BrooklynConfigKeys.SUGGESTED_VERSION, ""myversion"");"
23518,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,94,,"        assertResolves(ImmutableList.<String>of(), ImmutableList.of(""version=myversion""));"
23519,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadSubstitutersTest.java,59,,"        entity.config().set(BrooklynConfigKeys.SUGGESTED_VERSION, ""myversion"");"
23520,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/hello/LocalEntitiesTest.java,173,,"        app.config().set(HelloEntity.MY_NAME, ""Bob"");"
23521,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/hello/LocalEntitiesTest.java,227,,"            dad.sensors().set(HelloEntity.FAVOURITE_NAME, ""Dan"");"
23522,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/ConfigUtilsInternalTest.java,41,,"        Map<?,?> remaining = ConfigUtilsInternal.setAllConfigKeys(ImmutableMap.of(""key1"", ""myval""), ImmutableList.of(key1), app);"
23523,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/EntityManagerTest.java,78,,"        TestEntity child = entity.addChild(EntitySpec.create(TestEntity.class).displayName(""mychildname""));"
23524,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/EntityManagerTest.java,80,,"        assertTrue(entity instanceof EntityProxy, ""entity=""+entity);"
23525,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/EntityManagerTest.java,83,,"        assertTrue(child instanceof EntityProxy, ""child=""+child);"
23526,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/InternalEntityFactoryTest.java,69,,"        assertTrue(proxy instanceof Application, ""proxy=""+app);"
23527,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/internal/storage/impl/BrooklynStorageImplTest.java,55,,"        Reference<Object> ref = storage.getReference(""mykey"");"
23528,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/internal/storage/impl/ConcurrentMapAcceptingNullValsTest.java,61,,"        assertFalse(map.containsKey(""notthere""));"
23529,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/AbstractLocationTest.java,94,,"                .configure(""myfield"", ""bob""));"
23530,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/AbstractLocationTest.java,108,,"        Location location = createConcrete(MutableMap.of(""name"", null, ""parentLocation"", null));"
23531,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LegacyAbstractLocationTest.java,59,,"        AbstractLocation l1 = new ConcreteLocation(MutableMap.of(""id"", ""1"", ""name"", ""bob""));"
23532,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,61,,"                .configure(""mylocation.myconfig"", ""myval1"")"
23533,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,61,,"                .configure(""mylocation.myconfig"", ""myval1"")"
23534,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,62,,"                .configure(""mylocation.myconfigwithflagname"", ""myval2""));"
23535,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,73,,"                .configure(""myconfigflagname"", ""myval""));"
23536,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,73,,"                .configure(""myconfigflagname"", ""myval""));"
23537,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,82,,"                .configure(""notThere"", ""notThereVal""));"
23538,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,82,,"                .configure(""notThere"", ""notThereVal""));"
23539,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,107,,"                .configure(""mychildconfigflagname"", ""myval""));"
23540,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,112,,"        assertEquals(child.config().getBag().getAllConfig(), ImmutableMap.of(""mychildlocation.myconfigwithflagname"", ""myval""));"
23541,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,136,,"                .configure(""mychildlocation.myconfigwithflagname"", ""overrideMyval"")"
23542,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigUtilsTest.java,45,,"        config.put(LocationConfigKeys.PRIVATE_KEY_DATA, ""mydata"");"
23543,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,42,,"        String provider = ""myprovider"";"
23544,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,69,,"        properties.put(""brooklyn.location.named.mynamed.privateKeyFile"", ""privateKeyFile-inNamed"");"
23545,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,74,,"        properties.put(""brooklyn.location.myprovider.publicKeyFile"", ""publicKeyFile-inProviderSpecific"");"
23546,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,78,,"        properties.put(""brooklyn.location.privateKeyData"", ""privateKeyData-inGeneric"");"
23547,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,53,,"        properties.put(""brooklyn.location.named.foo"", ""byon:(hosts=\""root@192.168.1.{1,2,3,4}\"")"");"
23548,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,53,,"        properties.put(""brooklyn.location.named.foo"", ""byon:(hosts=\""root@192.168.1.{1,2,3,4}\"")"");"
23549,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,54,,"        properties.put(""brooklyn.location.named.foo.privateKeyFile"", ""~/.ssh/foo.id_rsa"");"
23550,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,57,,"        locdef = mgmt.getLocationRegistry().getDefinedLocationByName(""foo"");"
23551,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,122,,"        Assert.assertNotNull(mgmt.getLocationRegistry().getDefinedLocationByName(""localhost""));"
23552,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationSubscriptionTest.java,84,,"        observedEntity.sensors().set(TestEntity.NAME, ""myname"");"
23553,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/MachinesTest.java,114,,"        entity.sensors().set(Attributes.SUBNET_HOSTNAME, ""myval"");"
23554,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/access/PortForwardManagerRebindTest.java,77,,"        String publicIpId = ""5.6.7.8"";"
23555,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/access/PortForwardManagerTest.java,70,,"        String publicIpId = ""myipid"";"
23556,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/access/PortForwardManagerTest.java,71,,"        String publicAddress = ""5.6.7.8"";"
23557,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/cloud/CloudMachineNamerTest.java,51,,"        TestApplication app = mgmt.getEntityManager().createEntity(EntitySpec.create(TestApplication.class).displayName(""TistApp""));"
23558,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/cloud/CloudMachineNamerTest.java,52,,"        TestEntity child = app.createAndManageChild(EntitySpec.create(TestEntity.class).displayName(""TestEnt""));"
23559,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/geo/HostGeoLookupIntegrationTest.java,42,,"    @Test(groups = ""Integration"")"
23560,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntitlementsTest.java,93,,"        assertFalse(seeNonSecretSensors.isEntitled(null, Entitlements.SEE_SENSOR, Entitlements.EntityAndItem.of(app, ""password"")));"
23561,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntitlementsTest.java,94,,"        assertTrue(seeNonSecretSensors.isEntitled(null, Entitlements.SEE_SENSOR, Entitlements.EntityAndItem.of(app, ""any-sensor"")));"
23562,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntityEntitlementTest.java,68,,"        Assert.assertTrue(mgmt.getEntitlementManager().isEntitled(null, Entitlements.INVOKE_EFFECTOR, EntityAndItem.of(app, StringAndArgument.of(""any-eff"", null))));"
23563,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntityEntitlementTest.java,69,,"        Assert.assertTrue(mgmt.getEntitlementManager().isEntitled(null, Entitlements.SEE_SENSOR, EntityAndItem.of(app, ""any-sensor"")));"
23564,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntityEntitlementTest.java,70,,"        Assert.assertTrue(mgmt.getEntitlementManager().isEntitled(null, Entitlements.SEE_CONFIG, EntityAndItem.of(app, ""any-config"")));"
23565,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/BrooklynBomOsgiArchiveInstallerTest.java,45,,"        assertTrue(installer.isBlacklistedForPersistence(newMockManagedBundle(""org.apache.brooklyn.core"", ""1.0.0"")));"
23566,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerInMemoryIntegrationTest.java,31,,"@Test(groups=""Integration"")"
23567,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerInMemoryTest.java,64,,"        l.config().set(TestEntity.CONF_NAME, ""sample1"");"
23568,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerTestFixture.java,157,,"                .node(newManagerMemento(""node1"", ManagementNodeState.MASTER))"
23569,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerTestFixture.java,200,,"                .node(newManagerMemento(""zzzzzzz_node1"", ManagementNodeState.STANDBY))"
23570,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,183,,"        app.setDisplayName(""First App"");"
23571,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,282,,"    @Test(groups=""Integration"") // due to time (it waits for background persistence)"
23572,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,299,,"        TestEntity child = app.addChild(EntitySpec.create(TestEntity.class).configure(TestEntity.CONF_NAME, ""first-child""));"
23573,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,301,,"        app2.config().set(TestEntity.CONF_NAME, ""second-app"");"
23574,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,55,,"        memento.addNode(newManagerMemento(""node1"",  ManagementNodeState.STANDBY, now));"
23575,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,56,,"        memento.addNode(newManagerMemento(""node2"",  ManagementNodeState.STANDBY, now));"
23576,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,57,,"        memento.addNode(newManagerMemento(""node3"",  ManagementNodeState.STANDBY, now));"
23577,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,85,,"        assertEquals(doTestFiltersOutByStatus(false, false), ImmutableList.of(""node4"", ""node5""));"
23578,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,85,,"        assertEquals(doTestFiltersOutByStatus(false, false), ImmutableList.of(""node4"", ""node5""));"
23579,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,94,,"        assertEquals(doTestFiltersOutByStatus(false, true), ImmutableList.of(""node4"", ""node5"", ""node6""));"
23580,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EffectorUtilsTest.java,49,,"            .parameter(String.class, ""stringParam"")"
23581,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,93,,"                if (result != null && result.equals(""foo"")) {"
23582,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,192,,"        scheduleRecursiveTemporaryTask(stopCondition, e, ""boring-tag"");"
23583,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,247,,"        runEmptyTaskWithNameAndTags(app, ""task-""+(count++), ManagementContextInternal.NON_TRANSIENT_TASK_TAG, ""boring-tag"");"
23584,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,258,,"        runEmptyTaskWithNameAndTags(e, ""task-""+(count++), ManagementContextInternal.NON_TRANSIENT_TASK_TAG, ""another-tag"");"
23585,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,331,,"    @Test(groups=""Integration"")"
23586,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/ExternalConfigSupplierRegistryTest.java,37,,"        MyExternalConfigSupplier supplier1 = new MyExternalConfigSupplier(ImmutableMap.of(""mykey"", ""myval1""));"
23587,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/LocalManagementContextTest.java,67,,"            .useAdditionalProperties(MutableMap.of(""brooklyn.location.localhost.displayName"", ""myname""))"
23588,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/LocalManagementContextTest.java,75,,"        Location location = context.getLocationRegistry().getLocationManaged(""localhost"");"
23589,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/LocalSubscriptionManagerTest.java,78,,"            fail(""Timeout waiting for Event on TestEntity listener"");"
23590,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/LocalSubscriptionManagerTest.java,195,,"        entity.subscriptions().subscribe(ImmutableMap.of(""notifyOfInitialValue"", true), entity, TestEntity.SEQUENCE, listener);"
23591,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/ObservableSetTest.java,48,,"        boolean result1 = set.add(""val1"");"
23592,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/TestEntityWithEffectors.java,87,,"    void resetPassword(@EffectorParam(name = ""newPassword"") String newPassword, @EffectorParam(name = ""secretPin"") Integer secretPin);"
23593,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/osgi/OsgiVersionMoreEntityTest.java,114,,"            @SuppressWarnings(""unchecked"")"
23594,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/osgi/OsgiVersionMoreEntityTest.java,263,,"        Assert.assertEquals(me.policies().size(), 1, ""Wrong number of policies: ""+MutableList.copyOf(me.policies()));"
23595,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/FileBasedStoreObjectAccessorWriterTest.java,68,,"    @Test(groups=""Integration"")"
23596,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/FileBasedStoreObjectAccessorWriterTest.java,75,,"        accessor.put(""abc"");"
23597,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/PersistenceStoreObjectAccessorWriterTestFixture.java,67,,"        accessor.put(""abc"");"
23598,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,152,,"                withDeserializingClassRenames(ImmutableMap.of(""old.package.name.XmlMementoSerializerTest"", XmlMementoSerializerTest.class.getName())).build();"
23599,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,199,,"        assertEquals(serializer.fromString(serializedForm), obj, ""serializedForm=""+serializedForm);"
23600,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,216,,"        Set<?> obj = MutableSet.of(""123"");"
23601,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,267,,"        Map<?,?> obj = MutableMap.of(""mykey"", ""myval"");"
23602,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,431,,"                ""  <val>myval</val>"","
23603,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,741,,"                throw new NoSuchElementException(""no entity with id ""+id+""; contenders are ""+entities.keySet());"
23604,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/ActivePartialRebindTest.java,54,,"        Assert.assertTrue(c2 == c1, ""Proxy instance should be the same: ""+c1+"" / ""+c2);"
23605,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/Dumpers.java,142,,"                msg.append(""\t\t""+""type="").append(chainElement.getClass()).append(""; val="").append(chainElementStr).append(""\n"");"
23606,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/MiscClassesRebindTest.java,59,,"        origApp.config().set(TEST_KEY,  new VersionedName(""foo"", Version.parseVersion(""1.0.0.foo"")));"
23607,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/MiscClassesRebindTest.java,59,,"        origApp.config().set(TEST_KEY,  new VersionedName(""foo"", Version.parseVersion(""1.0.0.foo"")));"
23608,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,122,,"        String symbolicName = ""rebind-yaml-catalog-item-test"";"
23609,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,124,,"                ""brooklyn.catalog:"","
23610,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,125,,"                ""  items:"","
23611,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,126,,"                ""  - id: "" + symbolicName,"
23612,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,127,,"                ""    version: "" + TEST_VERSION,"
23613,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,128,,"                ""    itemType: entity"","
23614,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,129,,"                ""    item:"","
23615,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,130,,"                ""      type: io.camp.mock:AppServer"");"
23616,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,137,,"        LOG.info(""Added item to catalog: {}, id={}"", item, item.getId());"
23617,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEnricherTest.java,96,,"        newEntity.sensors().set(METRIC1, ""myval"");"
23618,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityDynamicTypeInfoTest.java,49,,"        public static final Effector<String> EFFECTOR = Effectors.effector(String.class, ""say_hi"").description(""says hello"")"
23619,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,152,,"        origApp.createAndManageChild(EntitySpec.create(MyEntity.class).configure(""myconfig"", ""myval""));"
23620,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,152,,"        origApp.createAndManageChild(EntitySpec.create(MyEntity.class).configure(""myconfig"", ""myval""));"
23621,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,248,,"        MyEntity2 origE = origApp.createAndManageChild(EntitySpec.create(MyEntity2.class).configure(""subscribe"", true));"
23622,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,485,,"                .configure(TestEntity.CONF_LIST_PLAIN, ImmutableList.of(""val1"", ""val2""))"
23623,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,485,,"                .configure(TestEntity.CONF_LIST_PLAIN, ImmutableList.of(""val1"", ""val2""))"
23624,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,486,,"                .configure(TestEntity.CONF_MAP_PLAIN, ImmutableMap.of(""akey"", ""aval"")));"
23625,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,486,,"                .configure(TestEntity.CONF_MAP_PLAIN, ImmutableMap.of(""akey"", ""aval"")));"
23626,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,535,,"        origApp.config().set(MyEntity.MY_CONFIG, ""myValInSuper"");"
23627,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,557,,"        assertEquals(((EntityInternal)origE).config().getRaw(MyEntity.MY_CONFIG).or(""mydefault""), ""mydefault"");"
23628,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,569,,"                .configure(""myunmatchedkey"", ""myunmatchedval""));"
23629,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,569,,"                .configure(""myunmatchedkey"", ""myunmatchedval""));"
23630,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,846,,"        @SuppressWarnings(""unused"")"
23631,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,894,,"                        Entity.class, ""test.config.entityref"", ""Ref to other entity"");"
23632,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,898,,"                Location.class, ""test.config.locationref"", ""Ref to other location"");"
23633,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindFailuresTest.java,226,,"        @SetFromFlag(""failOnRebind"")"
23634,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindFailuresTest.java,232,,"                throw new RuntimeException(""Simulating failure in ""+this+"", which will cause rebind to fail"");"
23635,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,56,,"    @SuppressWarnings(""unused"")"
23636,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,95,,"        MyLocationCustomProps origLoc = new MyLocationCustomProps(MutableMap.of(""name"", ""mylocname"", ""myfield"", ""myval""));"
23637,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,95,,"        MyLocationCustomProps origLoc = new MyLocationCustomProps(MutableMap.of(""name"", ""mylocname"", ""myfield"", ""myval""));"
23638,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,181,,"        MyLocation.myStaticFieldNotSetFromFlag = ""mynewval"";"
23639,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindPolicyTest.java,70,,"        MyPolicy origPolicy = new MyPolicy(MutableMap.of(""myfield"", ""myFieldVal"", ""myconfigkey"", ""myConfigVal""));"
23640,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindPolicyTest.java,70,,"        MyPolicy origPolicy = new MyPolicy(MutableMap.of(""myfield"", ""myFieldVal"", ""myconfigkey"", ""myConfigVal""));"
23641,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,82,,"            .xmlReplaceItem(""Tag1/text()[.='foo']"", ""bar"")"
23642,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,84,,"        assertSingleXmlTransformation(transformer, ""<Tag1>foo</Tag1>"", ""<Tag1>bar</Tag1>"");"
23643,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,84,,"        assertSingleXmlTransformation(transformer, ""<Tag1>foo</Tag1>"", ""<Tag1>bar</Tag1>"");"
23644,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,85,,"        assertSingleXmlTransformation(transformer, ""<Tag1>baz</Tag1>"", ""<Tag1>baz</Tag1>"");"
23645,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,86,,"        assertSingleXmlTransformation(transformer, ""<Tag2>foo</Tag2>"", ""<Tag2>foo</Tag2>"");"
23646,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,88,,"        assertSingleXmlTransformation(transformer, ""<Tag0><Tag1>foo</Tag1><Tag2/></Tag0>"", ""<Tag0><Tag1>bar</Tag1><Tag2/></Tag0>"");"
23647,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,90,,"        assertSingleXmlTransformation(transformer, ""<Tag1 attr=\""value\"">foo</Tag1>"", ""<Tag1 attr=\""value\"">bar</Tag1>"");"
23648,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,91,,"        assertSingleXmlTransformation(transformer, ""<Tag1>foo<Tag2/></Tag1>"", ""<Tag1>bar<Tag2/></Tag1>"");"
23649,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,215,,"                ""<entity myattrib=\""myval\"">""+NEWLINE+"
23650,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,216,,"                ""  <type myattrib2=\""myval2\"">mytype.Before</type>""+NEWLINE+"
23651,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,223,,"                ""</entity>"";"
23652,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,247,,"                ""  <config>""+NEWLINE+"
23653,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,248,,"                ""    <test.conf1>""+NEWLINE+"
23654,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,252,,"                ""    </test.conf1>""+NEWLINE+"
23655,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,258,,"                ""  </config>""+NEWLINE+"
23656,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,343,,"            .changeCatalogItemId(""foo"", ""1.0"", ""bar"", ""2.0"")"
23657,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,349,,"                ""  <config>ignore</config>""+NEWLINE+"
23658,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,49,,"                ""<entity myattrib=\""myval\"">""+NEWLINE+"
23659,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,55,,"                ""  <id>myid</id>""+NEWLINE+"
23660,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,56,,"                ""</entity>"";"
23661,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,75,,"                ""  <type myattrib2=\""myval2\"">mytype.Before</type>""+NEWLINE+"
23662,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,106,,"                ""  <config>""+NEWLINE+"
23663,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,107,,"                ""    <test.conf1>""+NEWLINE+"
23664,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,111,,"                ""    </test.conf1>""+NEWLINE+"
23665,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,117,,"                ""  </config>""+NEWLINE+"
23666,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,66,,"                .configure(""address"", ""127.0.0.1""));"
23667,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,78,,"                            URI.create(""http://127.0.0.1:1234/my/path""), ""main.uri.mapped.public"", ""http://mypublichost:5678/my/path""});"
23668,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,78,,"                            URI.create(""http://127.0.0.1:1234/my/path""), ""main.uri.mapped.public"", ""http://mypublichost:5678/my/path""});"
23669,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,82,,"                            1234, ""http.endpoint.mapped.public"", ""mypublichost:5678""});"
23670,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,86,,"                            ""127.0.0.1:1234"", ""test.name.mapped.public"", ""mypublichost:5678""});"
23671,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,127,,"            portForwardManager.associate(""myPublicIp"", HostAndPort.fromParts(""mypublichost"", 5678), machine, 1234);"
23672,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,127,,"            portForwardManager.associate(""myPublicIp"", HostAndPort.fromParts(""mypublichost"", 5678), machine, 1234);"
23673,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnPublicNetworkEnricherTest.java,161,,"        EntityAsserts.assertAttributeEquals(entity, Sensors.newStringSensor(sensor.getName()+"".mapped.public""), null);"
23674,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnSubnetNetworkEnricherTest.java,77,,"                        URI.create(""http://""+publicIp+"":1234/my/path""), ""main.uri.mapped.subnet"", ""http://""+privateIp+"":1234/my/path""});"
23675,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnSubnetNetworkEnricherTest.java,77,,"                        URI.create(""http://""+publicIp+"":1234/my/path""), ""main.uri.mapped.subnet"", ""http://""+privateIp+"":1234/my/path""});"
23676,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnSubnetNetworkEnricherTest.java,81,,"                        1234, ""http.endpoint.mapped.subnet"", privateIp+"":1234""});"
23677,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/network/OnSubnetNetworkEnricherTest.java,205,,"        entity.sensors().set(stringUriWithHttpNoPort, ""http://""+publicIp+""/my/path"");"
23678,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/BasicSpecParameterFromListTest.java,48,,"        String name = ""minRam"";"
23679,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/BasicSpecParameterFromListTest.java,64,,"        SpecParameter<?> input = parseSpecParameterDefinition(ImmutableMap.of(""name"", name));"
23680,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/BasicSpecParameterFromListTest.java,88,,"                .put(""type"", inputType)"
23681,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,41,,"        assertPredJsonBidi(ConfigConstraints.required(), MutableList.of(""required""));"
23682,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,46,,"        assertPredJsonBidi(StringPredicates.matchesRegex(""a.*b""), MutableList.of(MutableMap.of(""regex"", ""a.*b"")));"
23683,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,48,,"        assertPredJsonBidi(ConfigConstraints.forbiddenIf(""myother""), MutableList.of(MutableMap.of(""forbiddenIf"", ""myother"")));"
23684,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,52,,"        assertPredJsonBidi(ConfigConstraints.requiredUnlessAnyOf(ImmutableList.of(""myother1"", ""myother2"")), MutableList.of(MutableMap.of(""requiredUnlessAnyOf"", ImmutableList.of(""myother1"", (""myother2"")))));"
23685,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,52,,"        assertPredJsonBidi(ConfigConstraints.requiredUnlessAnyOf(ImmutableList.of(""myother1"", ""myother2"")), MutableList.of(MutableMap.of(""requiredUnlessAnyOf"", ImmutableList.of(""myother1"", (""myother2"")))));"
23686,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,87,,"                StringPredicates.matchesRegex(""my.*first""), "
23687,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,88,,"                StringPredicates.matchesRegex(""my.*second""));"
23688,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/ConstraintSerializationTest.java,122,,"        Predicate<String> p = StringPredicates.matchesGlob(""???*"");"
23689,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/BasicPolicyTest.java,94,,"        policy.setDisplayName(""Bob"");"
23690,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/BasicPolicyTest.java,95,,"        policy.config().set(MyPolicy.STR_KEY, ""aval"");"
23691,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/BasicPolicyTest.java,165,,"                e -> Asserts.expectedFailureContainsIgnoreCase(e, ""-42m"", ""positive""));"
23692,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/BasicPolicyTest.java,165,,"                e -> Asserts.expectedFailureContainsIgnoreCase(e, ""-42m"", ""positive""));"
23693,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/PolicyConfigTest.java,46,,"    private BasicConfigKey<String> differentKey = new BasicConfigKey<String>(String.class, ""differentkey"", ""diffval"");"
23694,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/PolicyConfigTest.java,51,,"                .put(""strKey"", ""aval"")"
23695,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/PolicySubscriptionTest.java,74,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
23696,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/PolicySubscriptionTest.java,135,,"        policy.subscriptions().subscribe(ImmutableMap.of(""notifyOfInitialValue"", true), entity, TestEntity.SEQUENCE, listener);"
23697,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/resolve/jackson/BrooklynRegisteredTypeJacksonSerializationTest.java,50,,"        a.x = ""hello"";"
23698,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/resolve/jackson/WrappedValuesSerializationTest.java,48,,"        Object impl = deser(""{\""type\"":\""""+ ObjectWithWrappedValueString.class.getName()+""\"",\""x\"":\""hello\""}"");"
23699,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/resolve/jackson/WrappedValuesSerializationTest.java,49,,"        Asserts.assertEquals(((ObjectWithWrappedValueString)impl).x.get(), ""hello"");"
23700,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/sensor/SensorEventPredicatesTest.java,41,,"        assertTrue(predicate.apply(new BasicSensorEvent<String>(sensor1, app, ""myval"")));"
23701,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/sensor/StaticSensorTest.java,36,,"                        StaticSensor.SENSOR_NAME, ""myname"","
23702,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/sensor/http/HttpRequestSensorTest.java,71,,"            .handler(""/myKey/myValue"", recordingHandler)"
23703,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/sensor/http/HttpRequestSensorTest.java,88,,"    @SuppressWarnings(""deprecation"")"
23704,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/sensor/http/HttpRequestSensorTest.java,99,,"        EntityAsserts.assertAttributeEqualsEventually(entity, SENSOR_STRING, ""myValue"");"
23705,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/EntityPerformanceTest.java,71,,"     @Test(groups={""Integration"", ""Acceptance""})"
23706,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/EntityPerformanceTest.java,71,,"     @Test(groups={""Integration"", ""Acceptance""})"
23707,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/FilePersistencePerformanceTest.java,52,,"        file = File.createTempFile(""fileBasedStoreObject"", "".txt"");"
23708,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/FilePersistencePerformanceTest.java,70,,"     @Test(groups={""Integration"", ""Acceptance""})"
23709,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/FilePersistencePerformanceTest.java,70,,"     @Test(groups={""Integration"", ""Acceptance""})"
23710,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/SubscriptionPerformanceTest.java,74,,"            subscriptionManager.subscribe(MutableMap.<String, Object>of(""subscriber"", i), entity, TestEntity.SEQUENCE, new SensorEventListener<Integer>() {"
23711,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,52,,"    private final static RegisteredType SAMPLE_TYPE = beanWithSuper(""item.A"", ""1"", new BasicTypeImplementationPlan(""ignore"", null), String.class);"
23712,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,52,,"    private final static RegisteredType SAMPLE_TYPE = beanWithSuper(""item.A"", ""1"", new BasicTypeImplementationPlan(""ignore"", null), String.class);"
23713,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,143,,"            MutableList.of(""my_a"", ""the_a""));"
23714,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,143,,"            MutableList.of(""my_a"", ""the_a""));"
23715,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,58,,"    private VersionRange from0lessThan1 = new VersionRange('[', Version.valueOf(""0""), Version.valueOf(""1.0.0""), ')');"
23716,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,60,,"    private VersionRange exactly0dot1 = new VersionRange('[', Version.valueOf(""0.1.0""), Version.valueOf(""0.1.0""), ']');"
23717,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,61,,"    private VersionRangedName fooFrom0lessThan1 = new VersionRangedName(""foo"", from0lessThan1);"
23718,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,62,,"    private VersionRangedName barFrom0lessThan1 = new VersionRangedName(""bar"", from0lessThan1);"
23719,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,68,,"        assertEquals(VersionRangedName.fromString(""foo:[0,1)"", false).toOsgiString(), ""foo:[0.0.0,1.0.0)"");"
23720,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,83,,"        assertFalse(from0lessThan1.includes(Version.valueOf(""1.0.0.SNAPSHOT"")));"
23721,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,119,,"        String input = ""\""foo:[0,1)=foo:1\"""";"
23722,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,156,,"        Bundle bundle = newMockBundle(new VersionedName(""foo.bar"", ""1.2.3""));"
23723,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,196,,"        assertFalse(upgrades.isBundleRemoved(new VersionedName(""org.example.brooklyn.mybundle"", ""0.1.0"")));"
23724,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,276,,"        Bundle bundle = newMockBundle(new VersionedName(""bun"", ""2""), "
23725,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,288,,"            new BasicRegisteredType(null, ""bub"", ""2"", null)));"
23726,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,293,,"        assertBundleUpgrade(upgrades, ""foo"", ""0.1"", ""bun"", ""2.0.0"");"
23727,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BundleUpgradeParserTest.java,325,,"        Bundle bundle = newMockBundle(new VersionedName(""bundle"", ""2.0""), "
23728,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/JavaClassNameTypePlanTransformerTest.java,30,,"        public String name() { return ""no-arg""; }"
23729,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/RegisteredTypePredicatesTest.java,37,,"        RegisteredType item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
23730,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/RegisteredTypePredicatesTest.java,37,,"        RegisteredType item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
23731,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/RegisteredTypePredicatesTest.java,38,,"                .plan(""services:\n- type: org.apache.brooklyn.entity.stock.BasicEntity"")"
23732,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/CustomAggregatingEnricherTest.java,78,,"        EntityAsserts.assertAttributeEqualsContinually(MutableMap.of(""timeout"", 50), entity, target, null);"
23733,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/EnrichersTest.java,170,,"        entity.sensors().set(STR1, ""myval"");"
23734,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/EnrichersTest.java,227,,"        entity.sensors().set(STR1, ""myval2"");"
23735,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/PercentageEnricherTest.java,50,,"        currentSensor = new BasicAttributeSensor<Double>(Double.class, ""current"");"
23736,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/PercentageEnricherTest.java,51,,"        totalSensor = new BasicAttributeSensor<Double>(Double.class, ""total"");"
23737,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,69,,"        entity.sensors().set(TestEntity.NAME, ""foo"");"
23738,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,74,,"        EntityAsserts.assertAttributeEqualsContinually(MutableMap.of(""timeout"", 100), app, TestEntity.SEQUENCE, null);"
23739,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,232,,"        entity.sensors().set(origSensor, ""myval"");"
23740,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,277,,"        AttributeSensor<String> sourceSensor = Sensors.newSensor(String.class, ""mySensor"");"
23741,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,295,,"        assertAddEnricherThrowsIllegalStateException(spec, ""when publishing to own entity"");"
23742,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/UpdatingMapTest.java,54,,"    protected AttributeSensor<Object> mySensor = Sensors.newSensor(Object.class, ""mySensor"");"
23743,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/UpdatingMapTest.java,63,,"        AttributeSensor<Object> extraIsUpSensor = Sensors.newSensor(Object.class, ""extraIsUp"");"
23744,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/UpdatingMapTest.java,69,,"                        .configure(UpdatingMap.COMPUTING, Functions.forMap(MutableMap.of(true, null, false, ""valIsFalse""), ""myDefault""))));"
23745,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/UpdatingMapTest.java,99,,"                        .configure(UpdatingMap.KEY_IN_TARGET_SENSOR, ""myKey"")"
23746,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/UpdatingMapTest.java,100,,"                        .configure(UpdatingMap.COMPUTING, Functions.forMap(MutableMap.of(""v1"", ""valIsV1"", ""v2"", ""valIsV2""), ""myDefault""))));"
23747,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,69,,"        policyHighlight.put(""text"", ""TEST TEXT"");"
23748,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,70,,"        policyHighlight.put(""category"", ""lastAction"");"
23749,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,70,,"        policyHighlight.put(""category"", ""lastAction"");"
23750,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,129,,"        costPerMonth.put(""VM1"", ""200 USD"");"
23751,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,129,,"        costPerMonth.put(""VM1"", ""200 USD"");"
23752,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,148,,"        costPerMonthOne.put(""VM2"", ""300 USD"");"
23753,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,188,,"        haPrimary.put(""parent"", ""Regions"");"
23754,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,188,,"        haPrimary.put(""parent"", ""Regions"");"
23755,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,189,,"        haPrimary.put(""primary"", ""US East"");"
23756,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,189,,"        haPrimary.put(""primary"", ""US East"");"
23757,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,248,,"        licencesHighlight.put(""RHEL"", ""1234"");"
23758,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,248,,"        licencesHighlight.put(""RHEL"", ""1234"");"
23759,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,302,,"        location.put(""name"", ""AWS US East 2"");"
23760,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,302,,"        location.put(""name"", ""AWS US East 2"");"
23761,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,303,,"        location.put(""icon"", ""aws-ec2"");"
23762,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,303,,"        location.put(""icon"", ""aws-ec2"");"
23763,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,304,,"        location.put(""count"", 3);"
23764,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/aggregator/AggregationJobTest.java,310,,"        locations.put(""servers"", serverLocations);"
23765,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/reducer/ReducerTest.java,72,,"        entity.sensors().set(STR1, ""foo"");"
23766,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/reducer/ReducerTest.java,75,,"        entity.sensors().set(STR2, ""bar"");"
23767,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,129,,"                    .configure(""memberSpec"", ""error""));"
23768,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,379,,"                .configure(""initialSize"", 2));"
23769,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,595,,"        ServiceStateLogic.updateMapSensorEntry(cluster, ServiceStateLogic.SERVICE_NOT_UP_INDICATORS, ""simulateNotUpKey"", ""myVal"");"
23770,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,712,,"                .configure(""quarantineFailedEntities"", true)"
23771,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterWithAvailabilityZonesRebindTest.java,68,,"                .configure(SimulatedLocationWithZoneExtension.ZONE_NAMES, ImmutableList.of(""zone1"", ""zone2""))"
23772,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterWithAvailabilityZonesTest.java,78,,"        loc.addExtension(AvailabilityZoneExtension.class, new SimulatedAvailabilityZoneExtension(mgmt, loc, ImmutableList.of(""zone1"", ""zone2"", ""zone3"", ""zone4"")));"
23773,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterWithAvailabilityZonesTest.java,78,,"        loc.addExtension(AvailabilityZoneExtension.class, new SimulatedAvailabilityZoneExtension(mgmt, loc, ImmutableList.of(""zone1"", ""zone2"", ""zone3"", ""zone4"")));"
23774,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicFabricTest.java,95,,"            .configure(""memberSpec"", EntitySpec.create(TestEntity.class)));"
23775,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicFabricTest.java,98,,"        assertEquals(fabric.getChildren().size(), locs.size(), ""children=""+fabric.getChildren());"
23776,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicFabricTest.java,105,,"            assertEquals(child.getLocations().size(), 1, ""childLocs=""+child.getLocations());"
23777,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,119,,"        group.setEntityFilter(EntityPredicates.displayNameEqualTo(""myname""));"
23778,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,142,,"        group.setEntityFilter(EntityPredicates.attributeEqualTo(MY_ATTRIBUTE, ""yes""));"
23779,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,224,,"        Asserts.succeedsContinually(MutableMap.of(""timeout"", VERY_SHORT_WAIT_MS), new Runnable() {"
23780,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,279,,"                    LOG.error(""Error on event $event"", t);"
23781,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicMultiGroupTest.java,104,,"        child1.sensors().set(SENSOR, ""bucketA"");"
23782,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicMultiGroupTest.java,105,,"        child2.sensors().set(SENSOR, ""bucketB"");"
23783,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicMultiGroupTest.java,166,,"        child3.sensors().set(SENSOR, ""bucketC"");"
23784,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/GroupTest.java,122,,"                String msg = ""events=""+groupAddedListener.getEvents();"
23785,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/MembershipTrackingPolicyTest.java,145,,"        e1.sensors().set(TestEntity.NAME, ""myname"");"
23786,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/zoneaware/ProportionalZoneFailureDetectorTest.java,58,,"        detector.onStartupFailure(loc1, entity1, new Throwable(""simulated failure""));"
23787,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/stock/AsyncApplicationTest.java,131,,"        child.addNotUpIndicator(""simulatedFailure"", ""my failure"");"
23788,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/stock/AsyncApplicationTest.java,131,,"        child.addNotUpIndicator(""simulatedFailure"", ""my failure"");"
23789,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/stock/LocationEntityTest.java,60,,"                        .put(""OtherLocation"", EntitySpec.create(TestEntity.class).configure(TestEntity.CONF_NAME, ""Other""))"
23790,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/stock/LocationEntityTest.java,61,,"                        .put(""SimulatedLocation"", EntitySpec.create(TestEntity.class).configure(TestEntity.CONF_NAME, ""Simulated""))"
23791,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/stock/LocationEntityTest.java,62,,"                        .put(""default"", EntitySpec.create(TestEntity.class).configure(TestEntity.CONF_NAME, ""Default""))"
23792,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/stock/LocationEntityTest.java,62,,"                        .put(""default"", EntitySpec.create(TestEntity.class).configure(TestEntity.CONF_NAME, ""Default""))"
23793,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/HttpFeedIntegrationTest.java,73,,"    @Test(groups = {""Integration""})"
23794,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/HttpFeedTest.java,90,,"            server.enqueue(new MockResponse().setResponseCode(200).addHeader(""content-type: application/json"").setBody(""{\""foo\"":\""myfoo\""}""));"
23795,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/HttpFeedTest.java,390,,"        runPreemptiveBasicAuth(""brooklyn"", ""hunter2"");"
23796,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,38,,"        Navigator<MutableMap<Object, Object>> europe = Jsonya.newInstance().at(""europe"", ""uk"", ""edinburgh"")"
23797,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,39,,"                .put(""population"", 500*1000)"
23798,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,41,,"                .root().at(""europe"").at(""france"").put(""population"", 80*1000*1000)"
23799,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,76,,"            JsonFunctions.walk(""europe"", ""spain"", ""barcelona""),"
23800,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,76,,"            JsonFunctions.walk(""europe"", ""spain"", ""barcelona""),"
23801,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/shell/ShellFeedIntegrationTest.java,81,,"    @Test(groups=""Integration"")"
23802,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/shell/ShellFeedIntegrationTest.java,123,,"                assertTrue(val != null && val.contains(""timed out after 1ms""), ""val="" + val);"
23803,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedIntegrationTest.java,86,,"    @Test(groups=""Integration"")"
23804,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedIntegrationTest.java,102,,"        Assert.assertTrue(val.contains(""hello""), ""val=""+val);"
23805,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedTest.java,90,,"                        .env(ImmutableMap.of(""mykey"", ""myval""))"
23806,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedTest.java,92,,"                        .onSuccess(Functions.constant(""success"")))"
23807,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,99,,"        Map<String, Object> conf = resolve(""byon(hosts=\""1.1.1.1\"")"").config().getBag().getAllConfig();"
23808,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,113,,"        assertEquals(loc.obtain().getAddress(), InetAddress.getByName(""1.1.1.1""));"
23809,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,170,,"        assertByonClusterEquals(resolve(""byon(hosts=\""1.1.1.1,1.1.1.2\"")""), ImmutableSet.of(""1.1.1.1"",""1.1.1.2""));"
23810,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,221,,"                ImmutableSet.of(UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"", 22)));"
23811,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,231,,"                ImmutableSet.of(UserAndHostAndPort.fromParts(""bob"", ""1.1.1.1"", 22)));"
23812,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,244,,"    @SuppressWarnings(""unchecked"")"
23813,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,275,,"                ""brooklyn.location.named.foo.privateKeyFile"", ""/tmp/x""));"
23814,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,67,,"    @SuppressWarnings(""unchecked"")"
23815,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,73,,"                .configure(""address"", Inet4Address.getByName(""192.168.144.200"")));"
23816,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,73,,"                .configure(""address"", Inet4Address.getByName(""192.168.144.200"")));"
23817,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,75,,"                .configure(""machines"", MutableList.of(machine)));"
23818,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,115,,"                addAddress(""192.168.0.1"")."
23819,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,124,,"        for (int i=3; i<=4; i++) assertUserAndHost(provisioner2.obtain(), ""u1"", ""192.168.0.""+i);"
23820,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,168,,"        provisioner.release(new SshMachineLocation(MutableMap.of(""address"", Inet4Address.getByName(""192.168.144.201""))));"
23821,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,189,,"            fail(""obtained=""+obtained2);"
23822,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,311,,"                mgmt.getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class).configure(""address"", Networking.getInetAddressWithFixedName(""1.1.1.1""))),"
23823,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,500,,"        boolean origContains = machine.config().getBag().getAllConfig().containsKey(""mykey"");"
23824,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,501,,"        SshMachineLocation obtained = provisioner.obtain(ImmutableMap.of(""mykey"", ""myNewVal""));"
23825,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,66,,"        brooklynProperties.put(""brooklyn.location.localhost.privateKeyFile"", ""myprivatekeyfile"");"
23826,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,67,,"        brooklynProperties.put(""brooklyn.location.localhost.publicKeyFile"", ""mypublickeyfile"");"
23827,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,68,,"        brooklynProperties.put(""brooklyn.location.localhost.privateKeyData"", ""myprivateKeyData"");"
23828,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,69,,"        brooklynProperties.put(""brooklyn.location.localhost.publicKeyData"", ""myPublicKeyData"");"
23829,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,70,,"        brooklynProperties.put(""brooklyn.location.localhost.privateKeyPassphrase"", ""myprivateKeyPassphrase"");"
23830,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,72,,"        Map<String, Object> conf = resolve(""localhost"").config().getBag().getAllConfig();"
23831,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,74,,"        assertEquals(conf.get(""privateKeyFile""), ""myprivatekeyfile"");"
23832,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,75,,"        assertEquals(conf.get(""publicKeyFile""), ""mypublickeyfile"");"
23833,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,76,,"        assertEquals(conf.get(""privateKeyData""), ""myprivateKeyData"");"
23834,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/multi/MultiLocationResolverTest.java,112,,"                    @SuppressWarnings(""unchecked"")"
23835,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/multi/MultiLocationTest.java,64,,"                .configure(""address"", Networking.getInetAddressWithFixedName(""1.1.1.1"")));"
23836,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationIntegrationTest.java,90,,"                .configure(""address"", Networking.getReachableLocalHost()));"
23837,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationIntegrationTest.java,94,,"    @Test(groups=""Integration"")"
23838,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationIntegrationTest.java,146,,"            Files.write(""abc"", src, Charsets.UTF_8);"
23839,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationPerformanceTest.java,76,,"    @Test(groups = {""Integration""})"
23840,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationPerformanceTest.java,78,,"        runExecManyCommands(ImmutableList.of(""true""), ""small-cmd"", 10);"
23841,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,62,,"            if (forbidden.get()) throw new IllegalStateException(""forbidden at this time"");"
23842,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,116,,"    @Test(groups = ""Integration"")"
23843,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,118,,"        host.execScript(""mysummary"", ImmutableList.of(""exit""));"
23844,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,118,,"        host.execScript(""mysummary"", ImmutableList.of(""exit""));"
23845,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationSshToolTest.java,71,,"                .configure(""address"", ""localhost"")"
23846,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationTest.java,117,,"                .configure(""address"", ""1.2.3.4"")"
23847,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationTest.java,117,,"                .configure(""address"", ""1.2.3.4"")"
23848,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationTest.java,138,,"            assertEquals(details.getOsDetails().getName(), ""Test OS Y"", ""details=""+details);"
23849,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/BrooklynMavenArtifactsTest.java,39,,"    @Test(groups=""Integration"")"
23850,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ClassLoaderUtilsTest.java,240,,"        Bundle bundle = getBundle(mgmt, ""org.apache.brooklyn.api"");"
23851,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ResourceUtilsHttpTest.java,64,,"            .handler(""/auth"", new AuthHandler(""test"", ""test"", ""OK""))"
23852,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ResourceUtilsHttpTest.java,64,,"            .handler(""/auth"", new AuthHandler(""test"", ""test"", ""OK""))"
23853,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ResourceUtilsHttpTest.java,91,,"        String url = baseUrl.replace(""http://"", ""http://test:test@"") + ""/auth"";"
23854,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ResourceUtilsTest.java,171,,"        assertEquals(utils.getResourceAsString(""data:,hello%20world""), ""hello world"");"
23855,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/config/ConfigBagTest.java,69,,"        bag.put(K2, ""v2a"");"
23856,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/config/ConfigBagTest.java,96,,"        ConfigBag bag2 = ConfigBag.newInstanceCopying(bag1).putAll(MutableMap.of(K2, ""v2b""));"
23857,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/config/ConfigBagTest.java,180,,"                .deprecatedNames(""kOld"", ""kOld2"")"
23858,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveBuilderTest.java,71,,"        Files.write(""abcdef"", new File(tmpDir, ""data01.txt""), Charsets.US_ASCII);"
23859,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveBuilderTest.java,72,,"        Files.write(""123456"", new File(tmpDir, ""data02.txt""), Charsets.US_ASCII);"
23860,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveBuilderTest.java,73,,"        Files.write(""qqqqqq"", new File(tmpDir, ""data03.txt""), Charsets.US_ASCII);"
23861,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveUtilsTest.java,85,,"    @Test(groups=""Integration"")"
23862,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/flags/MethodCoercionsTest.java,46,,"            singleParameterMethod = TestClass.class.getMethod(""singleParameterMethod"", int.class);"
23863,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/flags/MethodCoercionsTest.java,47,,"            multiParameterMethod = TestClass.class.getMethod(""multiParameterMethod"", boolean.class, int.class);"
23864,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/flags/MethodCoercionsTest.java,48,,"            singleCollectionParameterMethod = TestClass.class.getMethod(""singleCollectionParameterMethod"", List.class);"
23865,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/flags/MethodCoercionsTest.java,80,,"        Predicate<Method> predicate = MethodCoercions.matchMultiParameterMethod(""multiParameterMethod"", ImmutableList.of(""true"", ""42""));"
23866,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,63,,"        new HttpTool.HttpRequestBuilder<>(HttpGet.class).body(""test"").build();"
23867,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,86,,"    @Test(groups = {""Integration""})"
23868,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,92,,"        assertTrue(new String(result.getContent()).contains(""Hello, World""), ""val=""+new String(result.getContent()));"
23869,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,92,,"        assertTrue(new String(result.getContent()).contains(""Hello, World""), ""val=""+new String(result.getContent()));"
23870,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,202,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
23871,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,202,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
23872,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,202,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
23873,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,202,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
23874,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,208,,"        Assert.assertTrue(Arrays.equals(s, new String[] {""a"", ""b""}), ""result=""+Arrays.toString(s));"
23875,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,222,,"        @SuppressWarnings(""serial"")"
23876,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,223,,"        List<?> s = TypeCoercions.coerce(ImmutableList.of(""java.lang.Integer"", ""java.lang.Double""), new TypeToken<List<Class<?>>>() { });"
23877,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,223,,"        List<?> s = TypeCoercions.coerce(ImmutableList.of(""java.lang.Integer"", ""java.lang.Double""), new TypeToken<List<Class<?>>>() { });"
23878,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,244,,"        Map<?,?> s = TypeCoercions.coerce(ImmutableMap.of(""int"", ""java.lang.Integer"", ""double"", ""java.lang.Double""), new TypeToken<Map<String, Class<?>>>() { });"
23879,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,244,,"        Map<?,?> s = TypeCoercions.coerce(ImmutableMap.of(""int"", ""java.lang.Integer"", ""double"", ""java.lang.Double""), new TypeToken<Map<String, Class<?>>>() { });"
23880,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,341,,"        String s = TypeCoercions.coerce(URI.create(""http://localhost:1234/""), String.class);"
23881,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/RecordingSshTool.java,190,,"        customResponses.put(cmdRegex, checkNotNull(response, ""response""));"
23882,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,103,,"    @Test(groups = {""Integration""})"
23883,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,108,,"        assertTrue(out.contains(""run1""), ""out=""+out);"
23884,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,114,,"        String out = execScript(""export MYPROP=abc"", ""echo val is $MYPROP"");"
23885,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,163,,"        String bigstring = Strings.repeat(""abcdefghij"", 100); // 1KB"
23886,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,179,,"        int exitcode = tool.execScript(ImmutableMap.of(""out"", out), ImmutableList.of(""export MYPROP=myval"", ""acmdthatdoesnotexist"", ""echo val is $MYPROP""));"
23887,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,322,,"        tool.execScript(ImmutableMap.of(""out"", out, ""err"", err), ImmutableList.of(nonExistantCmd));"
23888,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,97,,"        return newTool(ImmutableMap.of(""host"", ""localhost"", ""privateKeyFile"", SSH_DEFAULT_KEYFILE));"
23889,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,124,,"        String lsout = execCommands(""ls -l ""+remotePath);"
23890,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,153,,"    @Test(groups = {""Integration""})"
23891,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,155,,"        String contents = ""echo hello world!\n"";"
23892,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,260,,"        assertEquals(tool.execScript(MutableMap.<String,Object>of(), ImmutableList.of(""date"")), 0);"
23893,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractPerformanceTest.java,65,,"    @Test(groups = {""Integration""})"
23894,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/cli/SshCliToolIntegrationTest.java,56,,"    @Test(groups = {""Integration""})"
23895,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,121,,"                new InjectedResult(containsCmd(""# Long poll""), returning(0, ""mystringToStdout"", ""mystringToStderr"")));"
23896,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,121,,"                new InjectedResult(containsCmd(""# Long poll""), returning(0, ""mystringToStdout"", ""mystringToStderr"")));"
23897,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,121,,"                new InjectedResult(containsCmd(""# Long poll""), returning(0, ""mystringToStdout"", ""mystringToStderr"")));"
23898,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,132,,"                new InjectedResult(containsCmd(""# Retrieve status""), returning(0, ""123"", """")));"
23899,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,67,,"    @Test(enabled = false, groups = {""Integration""})"
23900,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,80,,"        final SshTool localtool = new SshjTool(ImmutableMap.of(""sshTries"", 3, ""host"", ""localhost"", ""privateKeyFile"", ""~/.ssh/id_rsa"")) {"
23901,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,80,,"        final SshTool localtool = new SshjTool(ImmutableMap.of(""sshTries"", 3, ""host"", ""localhost"", ""privateKeyFile"", ""~/.ssh/id_rsa"")) {"
23902,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,185,,"        props.put(""out"", out);"
23903,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/logbook/file/FileLogStoreTest.java,73,,"        assertEquals(""DEBUG"", brooklynLogEntry.getLevel());"
23904,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/logbook/file/FileLogStoreTest.java,74,,"        assertEquals(""146"", brooklynLogEntry.getBundleId());"
23905,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/logbook/file/FileLogStoreTest.java,89,,"        assertEquals(""INFO"", brooklynLogEntry.getLevel());"
23906,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/logbook/file/FileLogStoreTest.java,121,,"        assertEquals(""ERROR"", brooklynLogEntry.getLevel());"
23907,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/mutex/WithMutexesTest.java,40,,"            m.acquireMutex(""foo"", ""something foo"");"
23908,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/mutex/WithMutexesTest.java,40,,"            m.acquireMutex(""foo"", ""something foo"");"
23909,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,83,,"        generatedJar = bundleMaker.copyAdding(emptyJar, ImmutableMap.of(new ZipEntry(""myfile.txt""), new ByteArrayInputStream(""mytext"".getBytes())));"
23910,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,83,,"        generatedJar = bundleMaker.copyAdding(emptyJar, ImmutableMap.of(new ZipEntry(""myfile.txt""), new ByteArrayInputStream(""mytext"".getBytes())));"
23911,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,104,,"        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, ""1.2.3""); // needs version, or nothing added to manifest!"
23912,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,105,,"        manifest.getMainAttributes().putValue(""mykey"", ""myval"");"
23913,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,105,,"        manifest.getMainAttributes().putValue(""mykey"", ""myval"");"
23914,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,109,,"                ""Manifest-Version: 1.2.3\r\n"" + "
23915,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,110,,"                ""mykey: myval\r\n"" +"
23916,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,111,,"                ""\r\n"";"
23917,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,129,,"        Map<String, String> origManifest = ImmutableMap.of(Attributes.Name.MANIFEST_VERSION.toString(), ""4.5.6"", ""preExistingKey"", ""preExistingVal"");"
23918,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,148,,"                new ZipEntry(""myfile2.txt""), new ByteArrayInputStream(""mytext2"".getBytes())));"
23919,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/BundleMakerTest.java,193,,"        Map<String, String> manifest = ImmutableMap.of(Attributes.Name.MANIFEST_VERSION.toString(), ""1.2.3"", Constants.BUNDLE_SYMBOLICNAME, ""myname"");"
23920,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/OsgisTest.java,49,,"        Mockito.when(myBundle1_0_0.getSymbolicName()).thenReturn(""mybundle"");"
23921,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/osgi/OsgisTest.java,50,,"        Mockito.when(myBundle1_0_0.getVersion()).thenReturn(Version.parseVersion(""1.0.0""));"
23922,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,136,,"    @Test(groups=""Integration"")"
23923,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,137,,"    @DisableOnWindows(reason = ""Needs a bash shell available on localhost"")"
23924,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,154,,"        assertTrue(outstr.contains(""parsed OK""), ""out=""+outstr+""; err=""+errstr);"
23925,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,154,,"        assertTrue(outstr.contains(""parsed OK""), ""out=""+outstr+""; err=""+errstr);"
23926,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,164,,"        int exitcode = loc.execCommands(ImmutableMap.of(""out"", outStream, ""err"", errStream), ""test"", ImmutableList.of(cmd));"
23927,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,195,,"    @DisableOnWindows(reason = ""Needs an ssh server listening on port 22 on localhost"")"
23928,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,242,,"        assertTrue(t.getStderr().contains(""The requested file""), ""Expected message in: ""+t.getStderr());"
23929,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,242,,"        assertTrue(t.getStderr().contains(""The requested file""), ""Expected message in: ""+t.getStderr());"
23930,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,328,,"        assertTrue(output.contains(""Couldn't find""), ""output=""+output);"
23931,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,328,,"        assertTrue(output.contains(""Couldn't find""), ""output=""+output);"
23932,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,449,,"        runSetHostname(""br-""+Identifiers.makeRandomId(8).toLowerCase(), null, false);"
23933,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTaskExecutionTest.java,84,,"        Task<Object> t2 = em.submit(MutableMap.of(""tag"", ""A""), t);"
23934,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTaskExecutionTest.java,167,,"        tasks.add(em.submit(MutableMap.of(""tags"", ImmutableList.of(""A"",""B"")), new BasicTask<Integer>(newIncrementCallable(1))));"
23935,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTasksFutureTest.java,92,,"        addFutureListener(t, ""before"");"
23936,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTasksFutureTest.java,106,,"        addFutureListener(t, ""during"");"
23937,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTasksFutureTest.java,125,,"            addFutureListener(t, ""after"");"
23938,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/DynamicSequentialTaskTest.java,102,,"                messages.add(""main"");"
23939,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/DynamicSequentialTaskTest.java,386,,"        Assert.assertTrue(stopwatch.elapsed(TimeUnit.MILLISECONDS) < TIMEOUT.toMilliseconds(), ""took too long: ""+stopwatch);"
23940,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/InterruptingImmediateSupplierTest.java,41,,"        InterruptingImmediateSupplier.of(""myval"");"
23941,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,56,,"        BasicExecutionManager m = new BasicExecutionManager(""mycontextid"");"
23942,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,70,,"        log.info(""submitted {} {}"", t, t.getStatusDetail(false));"
23943,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,72,,"        log.info(""done one ({}) {} {}"", new Object[] {interimResult, t, t.getStatusDetail(false)});"
23944,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,85,,"        ScheduledTask t = new ScheduledTask(MutableMap.of(""period"", Duration.ONE_MILLISECOND, ""maxIterations"", 5), new Callable<Task<?>>() {"
23945,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,135,,"        ScheduledTask t = new ScheduledTask(MutableMap.of(""delay"", 2*PERIOD, ""period"", PERIOD), new Callable<Task<?>>() {"
23946,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,143,,"                        log.info(""task running (""+i+""): ""+Tasks.current()+"" ""+Tasks.current().getStatusDetail(false));"
23947,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,143,,"                        log.info(""task running (""+i+""): ""+Tasks.current()+"" ""+Tasks.current().getStatusDetail(false));"
23948,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/SingleThreadedSchedulerTest.java,58,,"        em.setTaskSchedulerForTag(""category1"", SingleThreadedScheduler.class);"
23949,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/SingleThreadedSchedulerTest.java,72,,"            em.submit(MutableMap.of(""tag"", ""category1""), new Runnable() {"
23950,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TaskPredicatesTest.java,55,,"                .body(Callables.<Object>returning(""val""))"
23951,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TaskPredicatesTest.java,56,,"                .displayName(""myname"")"
23952,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TasksTest.java,79,,"        app.sensors().set(TestApplication.MY_ATTRIBUTE, ""myval"");"
23953,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TasksTest.java,86,,"        Map<?,?> orig = ImmutableMap.of(""mykey"", attributeWhenReady(app, TestApplication.MY_ATTRIBUTE));"
23954,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ValueResolverIteratorTest.java,60,,"    @Test(dataProvider=""resolveTypes"")"
23955,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ValueResolverTest.java,65,,"        Maybe<String> result = Tasks.resolving(newSleepTask(Duration.TEN_SECONDS, ""foo"")).as(String.class).context(app).timeout(Duration.ZERO).getMaybe();"
23956,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ValueResolverTest.java,91,,"        Assert.assertTrue(result.isAbsent(), ""result=""+result);"
23957,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ValueResolverTest.java,363,,"                return new BasicTask<>(Callables.returning(""myval""));"
23958,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ssh/SshTasksTest.java,112,,"    @Test(groups=""Integration"")"
23959,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ssh/SshTasksTest.java,118,,"        Assert.assertEquals(t.getStdout().trim(), ""hello world"");"
23960,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/system/SystemTasksTest.java,84,,"    @Test(groups=""Integration"")"
23961,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/DataUriSchemeParserTest.java,33,,"        Assert.assertEquals(new DataUriSchemeParser(""data:,hello"").parse().getDataAsString(), ""hello"");"
23962,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/TemplateProcessorTest.java,66,,"        String result = TemplateProcessor.processTemplateContents(templateContents, app, ImmutableMap.of(""mykey"", ""myval""));"
23963,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/TemplateProcessorTest.java,74,,"        String templateContents = ""${config['""+TestEntity.CONF_NAME.getName()+""']}"";"
23964,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/TemplateProcessorTest.java,74,,"        String templateContents = ""${config['""+TestEntity.CONF_NAME.getName()+""']}"";"
23965,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/HashMultimapConverterTest.java,45,,"    @Test(groups=""WIP"", enabled = false)"
23966,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/HashMultimapConverterTest.java,55,,"                ""</com.google.common.collect.HashMultimap>"");"
23967,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/HashMultimapConverterTest.java,85,,"        ""    <int>2</int>"","
23968,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/HashMultimapConverterTest.java,88,,"        ""    <int>1</int>"","
23969,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/OsgiClassPrefixerTest.java,83,,"        assertAbsent(prefixer.stripMatchingPrefix(bundle, ""my.package.MyClass""));"
23970,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/XmlSerializerTest.java,131,,"        serializeExpectingNull( () -> ""hello"" );"
23971,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/XmlUtilTest.java,60,,"            assertEquals(XmlUtil.xpath(xml, ""/a/b[text()]""), ""myb"");"
23972,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/XmlUtilTest.java,60,,"            assertEquals(XmlUtil.xpath(xml, ""/a/b[text()]""), ""myb"");"
23973,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/XmlUtilTest.java,92,,"        for (int i = 0; i < Integer.valueOf(""FFFF"", 16); i++) {"
23974,./TargetProjects/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/xstream/XmlUtilTest.java,192,,"                assertTrue(isValidUnicodeInXml1_1(i), ""i=""+i+""; unicode=""+unicode);"
23975,./TargetProjects/brooklyn-server/launcher-common/src/test/java/org/apache/brooklyn/launcher/common/BrooklynPropertiesFactoryHelperTest.java,48,,"        File propsFile = File.createTempFile(""testChecksGlobalBrooklynPropertiesPermissionsX00"", "".properties"");"
23976,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynEntityMirrorIntegrationTest.java,110,,"        serverApp.sensors().set(TestApplication.MY_ATTRIBUTE, ""austria"");"
23977,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynEntityMirrorIntegrationTest.java,126,,"        serverApp.sensors().set(TestApplication.MY_ATTRIBUTE, ""bermuda"");"
23978,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeRestTest.java,107,,"            ((EntityInternal)newApp).sensors().set(TestEntity.NAME, ""foo"");"
23979,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,234,,"            Set<VersionedName> bundleItems = ImmutableSet.of(VersionedName.fromString(""one:1.0.0-SNAPSHOT""));"
23980,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,235,,"            VersionedName bundleName = new VersionedName(""org.example.brooklynLauncherRebindCatalogOsgiTest.""+Identifiers.makeRandomId(4), ""1.0.0.SNAPSHOT"");"
23981,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,342,,"            Set<VersionedName> bundleItems = ImmutableSet.of(VersionedName.fromString(""one:1.0.0""));"
23982,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,343,,"            VersionedName systemBundleName = new VersionedName(""org.example.brooklynLauncherRebindCatalogOsgiTest.system""+Identifiers.makeRandomId(4), ""1.0.0"");"
23983,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,439,,"        VersionedName bundleName = new VersionedName(""org.example.testRebindGetsInitialOsgiCatalog"", ""1.0.0"");"
23984,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,461,,"        VersionedName bundleNameV2 = new VersionedName(""org.example.testRebindGetsInitialOsgiCatalog"", ""2.0.0"");"
23985,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,530,,"                ""brooklyn.catalog:"","
23986,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,748,,"        Assert.assertEquals(entity.getCatalogItemId(), ""simple-entity:2.0.0"");"
23987,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindCatalogOsgiTest.java,753,,"            Assert.assertEquals(Entities.deproxy(entity).getClass().getName(), ""com.example.brooklyn.test.osgi.entities.SimpleEntityImpl"");"
23988,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindTestFixture.java,56,,"        assertNotNull(Iterables.find(lastMgmt().getApplications(), EntityPredicates.displayNameEqualTo(""myorig""), null), ""apps=""+lastMgmt().getApplications());"
23989,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindToCloudObjectStoreTest.java,42,,"@Test(groups=""Live"")"
23990,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,77,,"    @Test(groups = ""Integration"")"
23991,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,216,,"        props.put(""mykey"", ""myval"");"
23992,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,216,,"        props.put(""mykey"", ""myval"");"
23993,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,94,,"                .name(""org.example.testRemoveLegacyItems"", ""1.0.0"")"
23994,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,112,,"        VersionedName one_1_0_0 = VersionedName.fromString(""one:1.0.0"");"
23995,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,113,,"        VersionedName one_2_0_0 = VersionedName.fromString(""one:2.0.0"");"
23996,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,125,,"                .name(bundleV1.getVersionedName().getSymbolicName(), ""2.0.0"")"
23997,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,128,,"                        .put(MANIFEST_HEADER_FORCE_REMOVE_BUNDLES, ""\""*\"""")"
23998,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,276,,"            assertTrue(resultWithoutForceMessage.contains(""Bundle ""+bundleV1.getVersionedName()+"" forcibly removed, upgraded to 2.0.0""), ""msg=""+resultWithoutForceMessage);"
23999,./TargetProjects/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherUpgradeCatalogOsgiTest.java,276,,"            assertTrue(resultWithoutForceMessage.contains(""Bundle ""+bundleV1.getVersionedName()+"" forcibly removed, upgraded to 2.0.0""), ""msg=""+resultWithoutForceMessage);"
