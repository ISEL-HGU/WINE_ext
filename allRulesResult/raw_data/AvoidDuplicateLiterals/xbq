42000,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AggregationTest.java,1634,,"        execute(""INSERT INTO %s (a, b) VALUES (?, {f : ?})"", 0, 1);"
42001,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AggregationTest.java,1694,,"                                     ""text"","
42002,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AggregationTest.java,2017,,"            execute(""insert into %s (bucket, v1, v2, v3, v4, v5) values (?, ?, ?, ?, ?, ?)"", i,"
42003,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AggregationTest.java,2061,,"            execute(""insert into %s (bucket, v1, v2, v3) values (?, ?, ?, ?)"", i,"
42004,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AggregationTest.java,2082,,"                execute(""insert into %s (bucket, v1, v2) values (?, ?, ?)"", i, (float) i, (double) i);"
42005,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,61,,"        assertRowsNet(executeNet(""SELECT * FROM %s""), row(1, 1));"
42006,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,75,,"        execute(""INSERT INTO %s (id, content , myCollection) VALUES ('test', 'first test', ['first element']);"");"
42007,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,77,,"        assertRows(execute(""SELECT * FROM %s;""), row(""test"", ""first test"", list(""first element"")));"
42008,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,77,,"        assertRows(execute(""SELECT * FROM %s;""), row(""test"", ""first test"", list(""first element"")));"
42009,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,77,,"        assertRows(execute(""SELECT * FROM %s;""), row(""test"", ""first test"", list(""first element"")));"
42010,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,85,,"        alterTable(""ALTER TABLE %s DROP myCollection;"");"
42011,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,137,,"            execute(""INSERT INTO %s (id, c1, v1, todrop) VALUES (?, ?, ?, ?) USING TIMESTAMP ?"", 1, i, i, i, 10000L * i);"
42012,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,260,,"        schemaChange(""ALTER KEYSPACE "" + ks1 + "" WITH replication = { 'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 1 } AND durable_writes=False"");"
42013,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,263,,"        assertRowsIgnoringOrderAndExtra(execute(""SELECT keyspace_name, durable_writes, replication FROM system_schema.keyspaces""),"
42014,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,264,,"                   row(KEYSPACE, true, map(""class"", ""org.apache.cassandra.locator.SimpleStrategy"", ""replication_factor"", ""1"")),"
42015,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,264,,"                   row(KEYSPACE, true, map(""class"", ""org.apache.cassandra.locator.SimpleStrategy"", ""replication_factor"", ""1"")),"
42016,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,264,,"                   row(KEYSPACE, true, map(""class"", ""org.apache.cassandra.locator.SimpleStrategy"", ""replication_factor"", ""1"")),"
42017,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,266,,"                   row(ks1, false, map(""class"", ""org.apache.cassandra.locator.NetworkTopologyStrategy"", DATA_CENTER, ""1"")),"
42018,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,287,,"        String ks = createKeyspace(""CREATE KEYSPACE %s WITH replication = {'class' : 'NetworkTopologyStrategy', '"" + DATA_CENTER + ""' : 3 }"");"
42019,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,528,,"        assertRows(execute(format(""SELECT compression FROM %s.%s WHERE keyspace_name = ? and table_name = ?;"","
42020,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,533,,"                   row(map(""chunk_length_in_kb"", ""16"", ""class"", ""org.apache.cassandra.io.compress.LZ4Compressor"")));"
42021,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/AlterTest.java,533,,"                   row(map(""chunk_length_in_kb"", ""16"", ""class"", ""org.apache.cassandra.io.compress.LZ4Compressor"")));"
42022,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,41,,"                ""APPLY BATCH;"");"
42023,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,57,,"        execute(""BEGIN BATCH "" +"
42024,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,61,,"                ""APPLY BATCH"");"
42025,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,70,,"                ""APPLY BATCH "");"
42026,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,116,,"        assertRows(execute(""SELECT * FROM %s""),"
42027,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,234,,"                                 ""UPDATE %1$s SET c = 100 WHERE a = 1 AND b = 1 IF c = 1;"" +"
42028,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,275,,"        execute(""DELETE FROM "" + KEYSPACE +"".clustering WHERE id=1"");"
42029,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,275,,"        execute(""DELETE FROM "" + KEYSPACE +"".clustering WHERE id=1"");"
42030,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,277,,"        String clusteringInsert = ""INSERT INTO "" + KEYSPACE + "".clustering(id, clustering1, clustering2, clustering3, val) VALUES(%s, %s, %s, %s, %s); "";"
42031,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,281,,"        String clusteringUpdate = ""UPDATE "" + KEYSPACE + "".clustering SET val=%s WHERE id=%s AND clustering1=%s AND clustering2=%s AND clustering3=%s ;"";"
42032,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,292,,"        assertRows(execute(""SELECT * FROM "" + KEYSPACE+"".clustering WHERE id=1""), row(1, 1, 1, 1, 1));"
42033,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/BatchTest.java,468,,"        execute(""DELETE FROM "" + KEYSPACE +"".clustering_static WHERE id=1"");"
42034,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,57,,"    private static final String compactOption = "" WITH COMPACT STORAGE"";"
42035,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,99,,"        execute(""INSERT INTO %s (k, v1, v2) values (?, ?, ?)"", ""first"", 1, ""value1"");"
42036,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,100,,"        execute(""INSERT INTO %s (k, v1, v2) values (?, ?, ?)"", ""second"", 2, ""value2"");"
42037,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,112,,"        assertRows(execute(""SELECT * FROM %s""),"
42038,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,122,,"        createTable(""CREATE TABLE %s (partitionKey int,"" +"
42039,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,123,,"                    ""clustering_1 int,"" +"
42040,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,124,,"                    ""value int,"" +"
42041,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,134,,"        assertRows(execute(""SELECT * FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?))"", 0, 0, 1),"
42042,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,159,,"        assertRows(execute(""SELECT total FROM %s WHERE userid = 1 AND url = 'http://foo.com'""),"
42043,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,273,,"        execute(""BEGIN UNLOGGED BATCH "" +"
42044,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,277,,"                ""APPLY BATCH; "");"
42045,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,289,,"                   row(""http://bar.com"", 1L),"
42046,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,370,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", 0, v1, 1);"
42047,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,386,,"        assertRows(execute(""SELECT b FROM %s""),"
42048,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,398,,"        assertRows(execute(""SELECT * FROM %s WHERE a=? AND b=?"", 0, v3),"
42049,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,448,,"        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 0, map(), set(), 0);"
42050,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,503,,"        assertRows(execute(""SELECT * FROM %s WHERE a=? AND b=? AND c=?"", 0, map(set(), list(1, 2, 3)), set()),"
42051,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,539,,"        execute(""DELETE FROM %s WHERE a=? AND b=? AND c=?"", 0, map(), set());"
42052,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,704,,"        assertRowsIgnoringOrder(execute(""SELECT * FROM %s WHERE a=?"", 3),"
42053,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,792,,"        assertInvalidMessage(""Secondary indexes are not supported on PRIMARY KEY columns in COMPACT STORAGE tables"","
42054,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,798,,"        execute(""INSERT INTO %s (pk, v) VALUES (?, ?)"", bytes(""foo123""), bytes(""1""));"
42055,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,798,,"        execute(""INSERT INTO %s (pk, v) VALUES (?, ?)"", bytes(""foo123""), bytes(""1""));"
42056,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,976,,"        execute(""INSERT INTO %s (userid, firstname, lastname, age) VALUES (?, ?, ?, ?)"", id1, ""Frodo"", ""Baggins"", 32);"
42057,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,976,,"        execute(""INSERT INTO %s (userid, firstname, lastname, age) VALUES (?, ?, ?, ?)"", id1, ""Frodo"", ""Baggins"", 32);"
42058,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,982,,"        assertRows(execute(""SELECT * FROM %s WHERE userid = ?"", id1),"
42059,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1069,,"                   row(""192.168.0.2"", 80, 24L),"
42060,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1178,,"        assertInvalidMessage(""Undefined column name partitionkey1"","
42061,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1182,,"        assertInvalidMessage(""Only EQ and IN relation are supported on the partition key (unless you use the token() function)"","
42062,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1185,,"        assertInvalidMessage(""Cannot use CONTAINS on non-collection column partitionkey"","
42063,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1189,,"        assertInvalidMessage(""Non PRIMARY KEY columns found in where clause: value"","
42064,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1230,,"        assertRows(execute(""SELECT * FROM %s WHERE partitionKey IN (?, ?)"", 0, 1),"
42065,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1245,,"        assertInvalidMessage(""Some partition key parts are missing: partitionkey"","
42066,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1257,,"        assertInvalidMessage(""Undefined column name value1"","
42067,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1263,,"        assertInvalidMessage(""Undefined column name clustering_3"","
42068,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1289,,"                    ""clustering_2 int,"" +"
42069,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1344,,"        assertInvalidMessage(""PRIMARY KEY column \""clustering_2\"" cannot be restricted as preceding column \""clustering_1\"" is not restricted"","
42070,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1414,,"        assertInvalidMessage(""The column names contains duplicates"","
42071,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1671,,"        assertInvalidMessage(""Grouping on clustering columns is not allowed for SELECT DISTINCT queries"","
42072,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,1945,,"        assertInvalidMessage(""Group by currently only support groups of columns following their declared order in the PRIMARY KEY"","
42073,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2101,,"        execute(""insert into %s (a, b, c, d) values (?, ?, ?, ?)"", ""first"", 1, 5, 1);"
42074,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2444,,"                                 ""SELECT * FROM %s WHERE a = 1 AND b = 4 AND c = 4"");"
42075,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2449,,"            assertInvalidMessage(""IN predicates on non-primary-key columns (c) is not yet supported"","
42076,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2479,,"                             ""SELECT * FROM %s WHERE c = null"");"
42077,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2480,,"        assertInvalidMessage(""Unsupported null value for column c"","
42078,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2481,,"                             ""SELECT * FROM %s WHERE c = null ALLOW FILTERING"");"
42079,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2483,,"                             ""SELECT * FROM %s WHERE c > null"");"
42080,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2485,,"                             ""SELECT * FROM %s WHERE c > null ALLOW FILTERING"");"
42081,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2488,,"        assertInvalidMessage(""Unsupported unset value for column c"","
42082,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2489,,"                             ""SELECT * FROM %s WHERE c = ? ALLOW FILTERING"","
42083,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2492,,"                             ""SELECT * FROM %s WHERE c > ? ALLOW FILTERING"","
42084,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2498,,"        createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int, c int) WITH COMPACT STORAGE"");"
42085,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2576,,"        execute(""INSERT INTO %s (a, b, c) VALUES (1, 2, [4, 2])"");"
42086,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2611,,"                                 ""SELECT * FROM %s WHERE c CONTAINS 2"");"
42087,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2613,,"            assertRows(execute(""SELECT * FROM %s WHERE c CONTAINS 2 ALLOW FILTERING""),"
42088,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2617,,"            assertInvalidMessage(""Cannot use CONTAINS KEY on non-map column c"","
42089,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2618,,"                                 ""SELECT * FROM %s WHERE c CONTAINS KEY 2 ALLOW FILTERING"");"
42090,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2620,,"            assertRows(execute(""SELECT * FROM %s WHERE c CONTAINS 2 AND c CONTAINS 6 ALLOW FILTERING""),"
42091,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2634,,"                             ""SELECT * FROM %s WHERE c CONTAINS null"");"
42092,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2636,,"                             ""SELECT * FROM %s WHERE c CONTAINS null ALLOW FILTERING"");"
42093,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2646,,"                             ""SELECT * FROM %s WHERE c CONTAINS ? ALLOW FILTERING"","
42094,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2736,,"        execute(""INSERT INTO %s (a, b, c) VALUES (1, 2, {4, 2})"");"
42095,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,2934,,"            execute(""UPDATE %s SET cnt = cnt + ? WHERE a = ? AND b = ? AND c = ?"", 14L, 11, 12, 13);"
42096,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3134,,"        execute(""INSERT INTO %s (a, b, c) VALUES (1, 2, {4 : 2})"");"
42097,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3183,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c = null"");"
42098,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3185,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c = null ALLOW FILTERING"");"
42099,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3187,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c > null"");"
42100,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3189,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c > null ALLOW FILTERING"");"
42101,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3191,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c CONTAINS null"");"
42102,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3193,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c CONTAINS null ALLOW FILTERING"");"
42103,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3199,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c = ? ALLOW FILTERING"","
42104,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3202,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c > ? ALLOW FILTERING"","
42105,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3205,,"                             ""SELECT * FROM %s WHERE a >= 1 AND c CONTAINS ? ALLOW FILTERING"","
42106,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,3939,,"        assertRows(execute(""SELECT * FROM %s WHERE a = 'a' AND b > 0""),"
42107,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4002,,"            execute(""INSERT INTO %s (pk, c, v) VALUES (?, ?, ?)"","
42108,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4129,,"        execute(""INSERT INTO %s (pk, c1, c2, v) VALUES (?, ?, ?, ?)"", bytes(""foo123""), bytes(""1""), bytes(""1""), bytes(""1""));"
42109,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4641,,"                          ""    pk1 varint,\n"" +"
42110,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4647,,"                          "") WITH COMPACT STORAGE\n"" +"
42111,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4648,,"                          ""    AND ID = "" + cfs.metadata.id + ""\n"" +"
42112,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4650,,"        assertTrue(String.format(""Expected\n%s\nto contain\n%s"", actual, expected),"
42113,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4693,,"        String tableName = createTable(""CREATE TABLE IF NOT EXISTS %s ("" +"
42114,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4701,,"        String expected = ""CREATE TABLE IF NOT EXISTS "" + keyspace() + ""."" + tableName + "" (\n"" +"
42115,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4701,,"        String expected = ""CREATE TABLE IF NOT EXISTS "" + keyspace() + ""."" + tableName + "" (\n"" +"
42116,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4833,,"        assertInvalidMessage(""Undefined column name column1 in table"","
42117,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4843,,"        createTable(""CREATE TABLE %s (a int, b int, PRIMARY KEY (a, b)) WITH COMPACT STORAGE"");"
42118,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4847,,"        createTable(""CREATE TABLE %s (a int, b int, v int, PRIMARY KEY (a, b)) WITH COMPACT STORAGE"");"
42119,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4866,,"        assertInvalidMessage(""Undefined column name value in table"","
42120,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4884,,"        createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int, c int, column1 int) WITH COMPACT STORAGE"");"
42121,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4893,,"        createTable(""CREATE TABLE %s (a int PRIMARY KEY, b int, c int, value int) WITH COMPACT STORAGE"");"
42122,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4933,,"        assertInvalidMessage(""Undefined column name value"","
42123,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactStorageTest.java,4935,,"        assertInvalidMessage(""Undefined column name column1"","
42124,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CompactTableTest.java,41,,"        alterTable(""ALTER TABLE %s DROP COMPACT STORAGE"");"
42125,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,66,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", ""2"", Short.MAX_VALUE, Short.MIN_VALUE);"
42126,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,68,,"        assertRows(execute(""SELECT * FROM %s""),"
42127,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,191,,"                   row(1, map(""one month"", Duration.from(""1mo""), ""60 days"", Duration.from(""60d""))));"
42128,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,263,,"        execute(""INSERT INTO %s (userid, firstname, lastname, age) VALUES (?, ?, ?, ?)"", id1, ""Frodo"", ""Baggins"", 32);"
42129,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,263,,"        execute(""INSERT INTO %s (userid, firstname, lastname, age) VALUES (?, ?, ?, ?)"", id1, ""Frodo"", ""Baggins"", 32);"
42130,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,309,,"                   row(""Something something"", ""Frodo Baggins""));"
42131,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,457,,"        execute(""CREATE TRIGGER trigger_1 ON %s USING '"" + TestTrigger.class.getName() + ""'"");"
42132,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,458,,"        assertTriggerExists(""trigger_1"");"
42133,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,561,,"        createTable(""CREATE TABLE %s (a text, b int, c int, primary key (a, b))"");"
42134,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,563,,"        assertRows(execute(format(""SELECT compression FROM %s.%s WHERE keyspace_name = ? and table_name = ?;"","
42135,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,568,,"                   row(map(""chunk_length_in_kb"", ""16"", ""class"", ""org.apache.cassandra.io.compress.LZ4Compressor"")));"
42136,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,568,,"                   row(map(""chunk_length_in_kb"", ""16"", ""class"", ""org.apache.cassandra.io.compress.LZ4Compressor"")));"
42137,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java,578,,"                   row(map(""chunk_length_in_kb"", ""32"", ""class"", ""org.apache.cassandra.io.compress.SnappyCompressor"")));"
42138,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,72,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", 1, 1, 1);"
42139,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,81,,"        assertRowsIgnoringOrder(execute(""SELECT * FROM %s""),"
42140,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,85,,"        assertRows(execute(""SELECT * FROM %s WHERE a = ? AND b = ?"", 2, 1),"
42141,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,135,,"        execute(""INSERT INTO %s (username, id, name, stuff) VALUES (?, ?, ?, ?)"", ""abc"", 2, ""rst"", ""some value"");"
42142,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,168,,"                    execute(""INSERT INTO %s (k, c1, c2, v1, v2) VALUES (?, ?, ?, ?, ?)"", i, j, k, n, n);"
42143,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,436,,"        assertRows(execute(""SELECT * FROM %s WHERE partitionKey = ?"", 0),"
42144,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,470,,"        assertInvalidMessage(""Non PRIMARY KEY columns found in where clause: value"","
42145,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,483,,"        createTable(""CREATE TABLE %s (partitionKey int,"" +"
42146,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,485,,"                    ""value int,"" +"
42147,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,508,,"        assertRows(execute(""SELECT * FROM %s WHERE partitionKey IN (?, ?)"", 0, 1),"
42148,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,523,,"        assertInvalidMessage(""Some partition key parts are missing: partitionkey"","
42149,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,566,,"                    ""clustering_1 int,"" +"
42150,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,781,,"        assertInvalidMessage(""Range deletions are not supported for specific columns"","
42151,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,843,,"        assertRows(execute(""SELECT * FROM %s WHERE partitionKey = ? AND  clustering_1 = ?"", 0, 2),"
42152,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,1078,,"        execute(""INSERT INTO %s(k, v) VALUES (?, ?)"", 1, 2);"
42153,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,1152,,"        execute(""INSERT INTO %s (pk, c, v) VALUES (?, ?, ?)"", bytes(""foo123""), EMPTY_BYTE_BUFFER, bytes(""1""));"
42154,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,1152,,"        execute(""INSERT INTO %s (pk, c, v) VALUES (?, ?, ?)"", bytes(""foo123""), EMPTY_BYTE_BUFFER, bytes(""1""));"
42155,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,1198,,"        execute(""INSERT INTO %s (pk, c1, c2, v) VALUES (?, ?, ?, ?)"", bytes(""foo123""), EMPTY_BYTE_BUFFER, bytes(""1""), bytes(""1""));"
42156,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,1264,,"        execute(""DELETE FROM %s WHERE a = 1 AND b = 1 AND c IN ();"");"
42157,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java,1275,,"        execute(""INSERT INTO %s (a,b,c,d,e) VALUES (?,?,?,?,?)"", 1, 1, 1, 1, 1);"
42158,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DropRecreateAndRestoreTest.java,41,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", 0, 0, 0);"
42159,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/DropRecreateAndRestoreTest.java,47,,"        assertRows(execute(""SELECT * FROM %s""), row(0, 0, 0), row(0, 1, 1));"
42160,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java,94,,"        assertRows(execute(""SELECT * FROM %s""),"
42161,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java,105,,"        assertInvalidMessage(""The column names contains duplicates"","
42162,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,101,,"            Object v = userType(""a"", 0, ""b"", ""abc"");"
42163,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,102,,"            execute(""INSERT INTO %s (k, v) VALUES (0, ?)"", v);"
42164,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,105,,"            checkAppliesUDT(""v != null"", v);"
42165,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,125,,"            checkDoesNotApplyUDT(""v = {a: 0, b: 'def'}"", v);"
42166,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,127,,"            checkDoesNotApplyUDT(""v = null"", v);"
42167,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,129,,"            checkDoesNotApplyUDT(""v > {a: 1, b: 'abc'}"", v);"
42168,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,138,,"            checkDoesNotApplyUDT(""v IN ()"", v);"
42169,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,313,,"            checkAppliesUDT(""v.a = 0"", v);"
42170,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,322,,"            checkAppliesUDT(""v.a != null"", v);"
42171,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,323,,"            checkAppliesUDT(""v.b != null"", v);"
42172,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,324,,"            checkAppliesUDT(""v.a IN (null, 0, 1)"", v);"
42173,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,325,,"            checkAppliesUDT(""v.b IN (null, 'xxx', 'abc')"", v);"
42174,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,332,,"            checkDoesNotApplyUDT(""v.a < -1"", v);"
42175,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,336,,"            checkDoesNotApplyUDT(""v.b >= 'zzz'"", v);"
42176,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,337,,"            checkDoesNotApplyUDT(""v.a != 0"", v);"
42177,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,341,,"            checkDoesNotApplyUDT(""v.a IN ()"", v);"
42178,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,342,,"            checkDoesNotApplyUDT(""v.b IN ()"", v);"
42179,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,343,,"            checkDoesNotApplyUDT(""v.b != null AND v.b IN ()"", v);"
42180,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,437,,"        assertRows(execute(""SELECT * FROM %s""), row(0, value));"
42181,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,463,,"                                      ? ""frozen<list<text>>"""
42182,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,511,,"        assertRows(execute(""SELECT * FROM %s""), row(0, list(""foo"", ""bar"", ""foobar"")));"
42183,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,511,,"        assertRows(execute(""SELECT * FROM %s""), row(0, list(""foo"", ""bar"", ""foobar"")));"
42184,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,511,,"        assertRows(execute(""SELECT * FROM %s""), row(0, list(""foo"", ""bar"", ""foobar"")));"
42185,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,543,,"                                 ""DELETE FROM %s WHERE k=0 IF l[?] = ?"", null, ""foobar"");"
42186,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,693,,"            createTable(String.format(""CREATE TABLE %%s (k int PRIMARY KEY, m %s)"","
42187,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,752,,"                                 ""DELETE FROM %s WHERE k=0 IF m[?] = ?"", null, ""foo"");"
42188,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,874,,"            assertRows(execute(""UPDATE %s SET v = {a: 0, b: 'bc'} WHERE k = 0 IF v IN (?, ?)"", userType(""a"", 1, ""b"", ""abc""), userType(""a"", 0, ""b"", ""ac"")),"
42189,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionCollectionsTest.java,886,,"            assertRows(execute(""UPDATE %s SET v = {a: 0, b: 'bc'} WHERE k = 0 IF v.a IN (?, ?)"", 1, 2),"
42190,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,82,,"        assertRows(execute(""INSERT INTO %s (id, k, version) VALUES (1, 'foo', 1) IF NOT EXISTS""), row(false, 1, ""foo"", null, ""foo""));"
42191,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,84,,"        assertRows(execute(""SELECT * FROM %s""), row(1, ""foo"", 1, ""foo""));"
42192,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,103,,"        assertRows(execute(""BEGIN BATCH "" +"
42193,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,107,,"                           ""APPLY BATCH ""),"
42194,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,154,,"                   row(1, ""k2"", null, ""val2""));"
42195,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,161,,"                           ""APPLY BATCH""),"
42196,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,199,,"        execute(""INSERT INTO %s (pk, ck, value) VALUES (?, ?, ?)"", 1, 1, 2);"
42197,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,209,,"        assertRows(execute(""SELECT pk, ck, static_col, value FROM %s WHERE pk = 1""),"
42198,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionStaticsTest.java,395,,"        assertRows(execute(""SELECT * FROM %s WHERE pk = ?"", 1), row(1, null, 2, 1, null));"
42199,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,124,,"        assertInvalidMessage(""Invalid 'unset' value in condition"","
42200,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,138,,"        assertRows(execute(""INSERT INTO %s (k, v1, v2) VALUES (0, 5, 'bar') IF NOT EXISTS""), row(false, 0, 2, ""foo"", null));"
42201,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,139,,"        assertRows(execute(""SELECT * FROM %s""), row(0, 2, ""foo"", null));"
42202,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,151,,"        assertRows(execute(""SELECT * FROM %s""), row(0, 3, ""bar"", null));"
42203,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,160,,"        assertRows(execute(""SELECT * FROM %s""), row(0, 5, ""foobar"", null));"
42204,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,189,,"        assertEmpty(execute(""SELECT * FROM %s WHERE k = 0""));"
42205,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,241,,"        assertRows(execute(""DELETE FROM %s WHERE k=1 IF EXISTS""), row(false));"
42206,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,285,,"        assertInvalidMessage(""DELETE statements must restrict all PRIMARY KEY columns with equality relations in order to delete non static columns"","
42207,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,300,,"        assertInvalidMessage(""IN on the clustering key columns is not supported with conditional deletions"","
42208,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,321,,"        assertRows(execute(""SELECT * FROM %s WHERE k = 1""), row(1, null, 1, null));"
42209,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,536,,"            assertEmpty(execute(""SELECT * FROM %s WHERE a = 5""));"
42210,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,567,,"        assertRows(execute(""SELECT * FROM %s WHERE a = 3""),"
42211,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,573,,"        assertRows(execute(""SELECT * FROM %s WHERE a = 4""),"
42212,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,622,,"        assertRows(execute(""BEGIN BATCH\n"""
42213,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,625,,"                           + ""APPLY BATCH""),"
42214,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,627,,"        assertRows(execute(""SELECT * FROM %s WHERE a = 2""),"
42215,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/InsertUpdateIfConditionTest.java,835,,"        assertRows(execute(""BEGIN BATCH """
42216,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,32,,"        execute(""INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)"");"
42217,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,43,,"        execute(""DELETE FROM %s WHERE a = 3"");"
42218,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,89,,"        assertRows(execute(""SELECT * FROM %s GROUP BY a, b""),"
42219,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,165,,"        assertRows(execute(""SELECT * FROM %s GROUP BY a, b PER PARTITION LIMIT 1""),"
42220,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,188,,"        assertInvalidMessage(""Grouping on clustering columns is not allowed for SELECT DISTINCT queries"","
42221,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,252,,"        assertRows(execute(""SELECT * FROM %s WHERE a = 1 GROUP BY a, b""),"
42222,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,462,,"        assertInvalidMessage(""Group by currently only support groups of columns following their declared order in the PRIMARY KEY"","
42223,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,620,,"        assertRows(execute(""SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a""),"
42224,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,625,,"        assertRows(execute(""SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b""),"
42225,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,631,,"        assertRows(execute(""SELECT a, b, s FROM %s GROUP BY a, b""),"
42226,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,665,,"        assertRows(execute(""SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a""),"
42227,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,692,,"        assertRows(execute(""SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a""),"
42228,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,697,,"        assertRows(execute(""SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b""),"
42229,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectGroupByTest.java,703,,"        assertRows(execute(""SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b""),"
42230,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,75,,"        assertInvalidMessage(""LIMIT must be strictly positive"","
42231,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,76,,"                             ""SELECT * FROM %s PER PARTITION LIMIT ?"", 0);"
42232,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,150,,"        assertInvalidMessage(""PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries"","
42233,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,325,,"        assertRows(execute(""SELECT * FROM %s""),"
42234,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,380,,"            assertRows(execute(""SELECT * FROM %s WHERE b = 1 LIMIT 2 ALLOW FILTERING""),"
42235,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,384,,"            assertRows(execute(""SELECT * FROM %s WHERE b >= 1 AND b <= 1 LIMIT 2 ALLOW FILTERING""),"
42236,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,485,,"            assertRows(execute(""SELECT * FROM %s WHERE b IN (1, 2, 3, 4) AND c >= 1 AND c <= 1 LIMIT 2 ALLOW FILTERING""),"
42237,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectLimitTest.java,547,,"        execute(""INSERT INTO %s (pk, c, s, v) VALUES (?, ?, ?, ?)"", 1, 1, 9, 1);"
42238,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,44,,"        assertInvalidMessage(""Multi-column relations can only be applied to clustering columns but was applied to: a"","
42239,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,51,,"        createTable(""CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c, d))"");"
42240,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,90,,"        assertInvalidMessage(""Column \""c\"" cannot be restricted by two inequalities not starting with the same column"","
42241,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,100,,"        assertInvalidMessage(""Clustering column \""c\"" cannot be restricted (preceding column \""b\"" is restricted by a non-EQ relation)"","
42242,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,126,,"        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 0, 0, 0, 0);"
42243,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,791,,"        execute(""INSERT INTO %s (a, b, c, d, e) VALUES (?, ?, ?, ?, ?)"", 0, 0, 0, 0, 0);"
42244,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,884,,"            execute(""INSERT INTO %s (a,b,c,d,e,v) VALUES (?,?,?,?,?,?)"", 0, i, 0, 0, 0, 0);"
42245,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,911,,"        execute(""INSERT INTO %s (a, b, c, d, e, f) VALUES (?, ?, ?, ?, ?, ?)"", 0, 0, 0, 0, 0, 0);"
42246,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1052,,"        ""SELECT * FROM %s"" +"
42247,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1053,,"        "" WHERE a = ? "" +"
42248,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1054,,"        ""AND (b,c,d,e)<=(?,?,?,?) "" +"
42249,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1108,,"        ""AND (b,c,d,e)<(?,?,?,?) "", 0, 1, 1, 0, 1, 1, 0, 1),"
42250,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1117,,"        ""AND (b,c,d,e)>(?,?,?,?)"" +"
42251,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1534,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?,?,?);"", 0, 2, 3);"
42252,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectMultiColumnRelationTest.java,1926,,"        assertInvalidMessage(""Undefined column name e"", ""SELECT * FROM %s WHERE (b, e) = (0, 0)"");"
42253,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java,33,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", 0, 0, 0);"
42254,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java,122,,"        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 0, 0, 0, 0);"
42255,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java,286,,"        execute(""INSERT INTO %s (pk1, pk2, c, v) VALUES (?, ?, ?, ?)"", 1, 1, 2, ""A"");"
42256,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java,323,,"        execute(""INSERT INTO %s (pk1, pk2, c1, c2, v) VALUES (?, ?, ?, ?, ?)"", 1, 1, 4, 4, ""A"");"
42257,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderByTest.java,604,,"            execute(""INSERT INTO %s (col_1, col_2, col_3) VALUES(?, ?, ?)"", 1, 1, 1);"
42258,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,55,,"            execute(""INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)"", i, i, i, i);"
42259,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,199,,"        assertInvalidMessage(""The token() function must be applied to all partition key components or none of them"","
42260,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,392,,"        assertRows(execute(""SELECT * FROM %s""),"
42261,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,409,,"        execute(""INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)"", 1, 0, 0, ""foo"", ""bar1"");"
42262,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,409,,"        execute(""INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)"", 1, 0, 0, ""foo"", ""bar1"");"
42263,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,410,,"        execute(""INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)"", 1, 0, 1, ""foo"", ""bar2"");"
42264,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,411,,"        execute(""INSERT INTO %s (blog_id, time1, time2, author, content) VALUES (?, ?, ?, ?, ?)"", 2, 1, 0, ""foo"", ""baz"");"
42265,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectOrderedPartitionerTest.java,596,,"        assertInvalidMessage(""Undefined column name e"", ""SELECT * FROM %s WHERE token(a, e) = token(0, 0)"");"
42266,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,75,,"        execute(""insert into %s (a, b, c, d) values (?, ?, ?, ?)"", ""first"", 1, 5, 1);"
42267,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,75,,"        execute(""insert into %s (a, b, c, d) values (?, ?, ?, ?)"", ""first"", 1, 5, 1);"
42268,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,78,,"        execute(""insert into %s (a, b, c, d) values (?, ?, ?, ?)"", ""second"", 4, 8, 4);"
42269,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,271,,"        execute(""INSERT INTO %s(k, a, b) VALUES(?, ?, ?)"", 1, 10, 100);"
42270,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,315,,"        execute(""INSERT INTO %s (pk0, pk1, ck0, ck1, ck2, value) VALUES (?, ?, ?, ?, ?, ?)"", 0, 1, 2, 3, 4, 5);"
42271,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,372,,"        execute(req, 2, 1, 0, ""foo"", ""baz"");"
42272,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,455,,"        execute(""INSERT INTO %s (a, b, c, d, e, f) VALUES (?, ?, ?, ?, ?, ?)"", 0, 0, 0, 0, 0, 0);"
42273,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,558,,"        assertInvalidMessage(""Invalid unset value for column k"", ""SELECT * from %s WHERE k = ?"", unset());"
42274,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,563,,"        assertInvalidMessage(""Invalid unset value for column i"", ""SELECT * from %s WHERE k = 1 AND i = ?"", unset());"
42275,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,580,,"        assertInvalidMessage(""Multi-column relations can only be applied to clustering columns but was applied to: a"","
42276,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java,606,,"        assertInvalidMessage(""Undefined column name d"", ""SELECT * FROM %s WHERE d = 0"");"
42277,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,49,,"        execute(""INSERT INTO %s(p, c, v, s) values (?, ?, ?, ?)"", ""p1"", ""k1"", ""v1"", ""sv1"");"
42278,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,51,,"        execute(""INSERT INTO %s(p, s) values (?, ?)"", ""p2"", ""sv2"");"
42279,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,53,,"        assertRows(execute(""SELECT * FROM %s WHERE p=?"", ""p1""),"
42280,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,63,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? ORDER BY c ASC"", ""p1""),"
42281,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,74,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? ORDER BY c DESC"", ""p1""),"
42282,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,85,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? AND c>=?"", ""p1"", ""k1""),"
42283,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,100,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? AND c<=?"", ""p1"", ""k1""),"
42284,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,108,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? AND c>=? ORDER BY c ASC"", ""p1"", ""k1""),"
42285,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,123,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? AND c<=? ORDER BY c ASC"", ""p1"", ""k1""),"
42286,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,131,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? AND c>=? ORDER BY c DESC"", ""p1"", ""k1""),"
42287,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,146,,"        assertRows(execute(""SELECT * FROM %s WHERE p=? AND c<=? ORDER BY c DESC"", ""p1"", ""k1""),"
42288,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,319,,"        createIndex(""CREATE INDEX ON %s(categories)"");"
42289,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,321,,"        execute(""INSERT INTO %s (account, id , categories) VALUES (?, ?, ?)"", ""test"", 5, set(""lmn""));"
42290,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,321,,"        execute(""INSERT INTO %s (account, id , categories) VALUES (?, ?, ?)"", ""test"", 5, set(""lmn""));"
42291,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,321,,"        execute(""INSERT INTO %s (account, id , categories) VALUES (?, ?, ?)"", ""test"", 5, set(""lmn""));"
42292,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,324,,"            assertEmpty(execute(""SELECT * FROM %s WHERE account = ? AND categories CONTAINS ?"", ""xyz"", ""lmn""));"
42293,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,324,,"            assertEmpty(execute(""SELECT * FROM %s WHERE account = ? AND categories CONTAINS ?"", ""xyz"", ""lmn""));"
42294,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,334,,"            assertRows(execute(""SELECT * FROM %s WHERE account = ? AND id = ? AND categories CONTAINS ?"", ""test"", 5, ""lmn""),"
42295,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,338,,"            assertInvalidMessage(""Unsupported null value for column categories"","
42296,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,341,,"            assertInvalidMessage(""Unsupported unset value for column categories"","
42297,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,345,,"                                 ""SELECT * FROM %s WHERE account = ? AND categories CONTAINS ? AND categories CONTAINS ?"", ""xyz"", ""lmn"", ""notPresent"");"
42298,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,393,,"            execute(""INSERT INTO %s (e, f, s) VALUES (?, ?, ?)"", i, list(""Dubai""), 4);"
42299,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,410,,"        createTable(""CREATE TABLE %s (account text, id int, categories map<text,text>, PRIMARY KEY (account, id))"");"
42300,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,413,,"        execute(""INSERT INTO %s (account, id , categories) VALUES (?, ?, ?)"", ""test"", 5, map(""lmn"", ""foo""));"
42301,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,416,,"            assertEmpty(execute(""SELECT * FROM %s WHERE account = ? AND categories CONTAINS KEY ?"", ""xyz"", ""lmn""));"
42302,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,514,,"        execute(""INSERT INTO %s (k1, k2, v) VALUES (?, ?, ?)"", 0, 0, set(1, 2, 3));"
42303,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,540,,"        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 0, 0, 0, set(1, 2, 3));"
42304,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,782,,"            execute(q + "" ALLOW FILTERING"");"
42305,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,858,,"        execute(str, ""test"", ""06902"", ""CT"", 9, ""Stamford"");"
42306,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,865,,"        execute(str, ""test2"", ""06029"", ""CT"", 9, ""Ellington"");"
42307,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,957,,"        assertEquals(""name_ttl"", rs.metadata().get(0).name.toString());"
42308,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1321,,"        assertInvalidMessage(""Unsupported null value for column c"","
42309,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1333,,"        assertInvalidMessage(""Unsupported unset value for column c"","
42310,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1403,,"        assertInvalidMessage(""Unsupported null value for column d"","
42311,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1405,,"        assertInvalidMessage(""Unsupported null value for column e"","
42312,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1418,,"        assertInvalidMessage(""Unsupported unset value for column d"","
42313,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1421,,"        assertInvalidMessage(""Unsupported unset value for column e"","
42314,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1531,,"            assertInvalidMessage(""Map-entry equality predicates on frozen map column e are not supported"","
42315,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1665,,"        execute(""INSERT INTO %s (a,b,c,d) VALUES (11, 12, 13, 14)"");"
42316,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1666,,"        execute(""INSERT INTO %s (a,b,c,d) VALUES (11, 15, 16, 17)"");"
42317,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1667,,"        execute(""INSERT INTO %s (a,b,c,d) VALUES (21, 22, 23, 24)"");"
42318,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1668,,"        execute(""INSERT INTO %s (a,b,c,d) VALUES (31, 32, 33, 34)"");"
42319,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,1979,,"        execute(""UPDATE %s SET cnt = cnt + ? WHERE a = ? AND b = ? AND c = ?"", 14L, 11, 12, 13);"
42320,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2027,,"            assertInvalidMessage(""Clustering column \""c\"" cannot be restricted (preceding column \""b\"" is restricted by a non-EQ relation)"","
42321,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2153,,"        execute(""INSERT INTO %s (a,b,c,d) VALUES (?, ?, ?, ?)"", 11, 12, list(1, 3), 14);"
42322,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2205,,"        execute(""INSERT INTO %s (pk, ck, v) VALUES (?, ?, ?)"", map(1, 2), 1, 1);"
42323,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2396,,"        assertRows(execute(""SELECT * FROM %s WHERE a = 'a' AND b > 0""),"
42324,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2457,,"            execute(""INSERT INTO %s (pk, c1, c2, c3, v) VALUES (?, ?, ?, ?, ?)"", 1, 1, 1, 1, i);"
42325,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2508,,"        execute(""INSERT INTO %s (pk, c, v) VALUES (?, ?, ?)"","
42326,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2509,,"                bytes(""foo123""), bytes(""1""), bytes(""1""));"
42327,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2626,,"        execute(""INSERT INTO %s (pk, c1, c2, v) VALUES (?, ?, ?, ?)"", bytes(""foo123""), bytes(""1""), bytes(""1""), bytes(""1""));"
42328,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2844,,"        assertInvalidMessage(""Slice restrictions are not supported on duration columns"","
42329,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2876,,"            assertInvalidMessage(""Slice restrictions are not supported on collections containing durations"","
42330,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2945,,"        assertInvalidMessage(""Slice restrictions are not supported on tuples containing durations"","
42331,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,2979,,"            assertInvalidMessage(""Slice restrictions are not supported on UDTs containing durations"","
42332,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,3094,,"        createTable(""CREATE TABLE %s (k1 uuid, k2 text, PRIMARY KEY ((k1, k2)))"");"
42333,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,3095,,"        execute(""INSERT INTO %s (k1, k2) VALUES (uuid(), 'k2')"");"
42334,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,3129,,"        createFunctionOverload(KEYSPACE + "".token"", ""double"","
42335,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,3129,,"        createFunctionOverload(KEYSPACE + "".token"", ""double"","
42336,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/SelectTest.java,3130,,"                               ""CREATE FUNCTION %s (val double) RETURNS null ON null INPUT RETURNS double LANGUAGE java AS 'return 10.0d;'"");"
42337,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,87,,"            fail(""Expect InvalidRequestException"");"
42338,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,145,,"            createTable(""CREATE TABLE %s (k int PRIMARY KEY, i int) WITH default_time_to_live="""
42339,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,272,,"            execute(""INSERT INTO %s (k, a, b) VALUES (?, ?, ?) USING TTL "" + MAX_TTL, 2, 2, set(""v21"", ""v22"", ""v23"", ""v24""));"
42340,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,272,,"            execute(""INSERT INTO %s (k, a, b) VALUES (?, ?, ?) USING TTL "" + MAX_TTL, 2, 2, set(""v21"", ""v22"", ""v23"", ""v24""));"
42341,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,272,,"            execute(""INSERT INTO %s (k, a, b) VALUES (?, ?, ?) USING TTL "" + MAX_TTL, 2, 2, set(""v21"", ""v22"", ""v23"", ""v24""));"
42342,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,272,,"            execute(""INSERT INTO %s (k, a, b) VALUES (?, ?, ?) USING TTL "" + MAX_TTL, 2, 2, set(""v21"", ""v22"", ""v23"", ""v24""));"
42343,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,274,,"                execute(""UPDATE  %s USING TTL "" + MAX_TTL + "" SET b = ? WHERE k = 1 AND a = 1;"", set(""v11"", ""v12"", ""v13"", ""v14""));"
42344,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,274,,"                execute(""UPDATE  %s USING TTL "" + MAX_TTL + "" SET b = ? WHERE k = 1 AND a = 1;"", set(""v11"", ""v12"", ""v13"", ""v14""));"
42345,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,274,,"                execute(""UPDATE  %s USING TTL "" + MAX_TTL + "" SET b = ? WHERE k = 1 AND a = 1;"", set(""v11"", ""v12"", ""v13"", ""v14""));"
42346,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,274,,"                execute(""UPDATE  %s USING TTL "" + MAX_TTL + "" SET b = ? WHERE k = 1 AND a = 1;"", set(""v11"", ""v12"", ""v13"", ""v14""));"
42347,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TTLTest.java,332,,"            assertRows(execute(""SELECT * from %s""), row(1, 1, 1), row(2, 2, null));"
42348,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TruncateTest.java,33,,"            execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", 0, 0, 0);"
42349,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/TuplesWithNullsComparisonTest.java,33,,"        execute(""ALTER TYPE "" + KEYSPACE + '.' + typename + "" ADD bar text;"");"
42350,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,73,,"        createTable(""CREATE TABLE %s (partitionKey int,"" +"
42351,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,74,,"                    ""clustering_1 int,"" +"
42352,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,75,,"                    ""value int,"" +"
42353,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,137,,"        assertInvalidMessage(""Some partition key parts are missing: partitionkey"","
42354,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,140,,"        assertInvalidMessage(""Some clustering keys are missing: clustering_1"","
42355,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,395,,"        assertRows(execute(""SELECT * FROM %s""),"
42356,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,508,,"        execute(""UPDATE %s USING TTL ? SET v = ? WHERE k = ?"", unset(), 1, 1); // treat as 'unlimited'"
42357,./TargetProjects/cassandra/test/unit/org/apache/cassandra/cql3/validation/operations/UpdateTest.java,574,,"        execute(""INSERT INTO %s (a,b,c,d,e) VALUES (?,?,?,?,?)"",1,1,1,1,1);"
42358,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,58,,"        test(""SELECT * FROM %s"");"
42359,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,61,,"        test(""SELECT v1 FROM %s"");"
42360,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,62,,"        test(""SELECT v2 FROM %s"");"
42361,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,67,,"        test(""SELECT * FROM %s WHERE k = 0"");"
42362,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,84,,"        test(""SELECT * FROM %s WHERE v1 = 1 ALLOW FILTERING"");"
42363,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,89,,"        test(""SELECT * FROM %s WHERE v1 = 1 AND v2 = 2 ALLOW FILTERING"");"
42364,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,96,,"        createIndex(""CREATE INDEX ON %s (v1)"");"
42365,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,97,,"        test(""SELECT * FROM %s WHERE v1 = 1"");"
42366,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,102,,"        test(""SELECT * FROM %s WHERE v2 = 2 ALLOW FILTERING"");"
42367,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,133,,"        test(""SELECT * FROM %s WHERE k1 = 1 AND k2 = 2"");"
42368,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,201,,"             ""SELECT * FROM %s WHERE k1 = 0 AND k2 = 2"","
42369,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,224,,"        test(""SELECT s FROM %s"");"
42370,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,474,,"             ""SELECT * FROM %s WHERE k1 = 0 AND k2 = 2 AND c1 = 1"");"
42371,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,562,,"             ""SELECT * FROM %s WHERE k = 0 ORDER BY c1 ASC, c2 DESC, c3 ASC"");"
42372,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,604,,"        test(""SELECT u FROM %s"");"
42373,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,702,,"        test(""SELECT * FROM vk.vt WHERE k = 1"");"
42374,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/AbstractReadQueryToCQLStringTest.java,740,,"             ""SELECT * FROM vk.vt WHERE k = 0"");"
42375,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CellTest.java,94,,"                Cell<?> a = expiring(cfm, ""val"", ""a"", 1, 1);"
42376,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CellTest.java,182,,"        assertValid(BufferCell.live(c, 0, bb(""foo""), CellPath.create(bbs(1))));"
42377,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CleanupTest.java,76,,"    public static final ByteBuffer COLUMN = ByteBufferUtil.bytes(""birthdate"");"
42378,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CleanupTest.java,105,,"                return ""DC1"";"
42379,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CleanupTest.java,128,,"        fillCF(cfs, ""val"", LOOPS);"
42380,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CleanupTest.java,172,,"        tmd.updateNormalToken(new BytesToken(tk1), InetAddressAndPort.getByName(""127.0.0.1""));"
42381,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CleanupTest.java,173,,"        tmd.updateNormalToken(new BytesToken(tk2), InetAddressAndPort.getByName(""127.0.0.2""));"
42382,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyMetricTest.java,52,,"        SchemaLoader.createKeyspace(""Keyspace1"","
42383,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyMetricTest.java,54,,"                                    SchemaLoader.standardCFMD(""Keyspace1"", ""Standard2""));"
42384,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java,100,,"        new RowUpdateBuilder(cfs.metadata(), 0, ""key1"")"
42385,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java,101,,"                .clustering(""Column1"")"
42386,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java,102,,"                .add(""val"", ""asdf"")"
42387,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java,102,,"                .add(""val"", ""asdf"")"
42388,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java,170,,"        ByteBuffer val = ByteBufferUtil.bytes(""val1"");"
42389,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CounterCellTest.java,90,,"        Cell<?> cell = createLegacyCounterCell(cfs, ByteBufferUtil.bytes(""val""), delta, 1);"
42390,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CounterMutationTest.java,56,,"        ColumnMetadata cDef = cfs.metadata().getColumn(ByteBufferUtil.bytes(""val""));"
42391,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CounterMutationTest.java,71,,"        Mutation m = new RowUpdateBuilder(cfs.metadata(), 5, ""key1"").clustering(""cc"").add(""val"", toAdd).build();"
42392,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/CounterMutationTest.java,97,,"        ColumnMetadata cDefTwo = cfs.metadata().getColumn(ByteBufferUtil.bytes(""val2""));"
42393,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/DirectoriesTest.java,213,,"        File parentSnapshotDirectory = Directories.getSnapshotDirectory(parentDesc, ""test"");"
42394,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/DirectoriesTest.java,276,,"                assertFalse(f + "" should not be listed"", listed.contains(f));"
42395,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ImportTest.java,80,,"        createTable(""create table %s (id int primary key, d int)"");"
42396,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ImportTest.java,85,,"            execute(""insert into %s (id, d) values (?, ?)"", i, i);"
42397,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ImportTest.java,95,,"        assertEquals(0, execute(""select * from %s"").size());"
42398,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/KeyspaceTest.java,71,,"        createTable(""CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))"");"
42399,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/KeyspaceTest.java,73,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?)"", ""0"", 0, 0);"
42400,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/MmapFileTest.java,45,,"        Long mmapCount = (Long) mbs.getAttribute(bpmName, ""Count"");"
42401,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/MmapFileTest.java,46,,"        Long mmapMemoryUsed = (Long) mbs.getAttribute(bpmName, ""MemoryUsed"");"
42402,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/MmapFileTest.java,48,,"        Assert.assertEquals(""# of mapped buffers should be 0"", Long.valueOf(0L), mmapCount);"
42403,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/MmapFileTest.java,49,,"        Assert.assertEquals(""amount of mapped memory should be 0"", Long.valueOf(0L), mmapMemoryUsed);"
42404,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/MmapFileTest.java,80,,"                Assert.assertEquals(""mapped buffers don't work?"", Long.valueOf(1L), mmapCount);"
42405,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/PartitionRangeReadTest.java,66,,"                                                 .addStaticColumn(""val"", AsciiType.instance));"
42406,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/PartitionTest.java,71,,"        PartitionUpdate update = new RowUpdateBuilder(cfs.metadata(), 5, ""key1"")"
42407,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/PartitionTest.java,73,,"                                 .add(""val"", ""val1"")"
42408,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/PartitionTest.java,73,,"                                 .add(""val"", ""val1"")"
42409,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/PartitionTest.java,134,,"            new RowUpdateBuilder(cfs.metadata(), 5, ""key2"").clustering(""c"").add(""val"", ""val2"").build().applyUnsafe();"
42410,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RangeTombstoneTest.java,86,,"            builder.newRow(i).add(""val"", i);"
42411,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RangeTombstoneTest.java,114,,"            assertTrue(""Row "" + i + "" should be live"","
42412,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RangeTombstoneTest.java,114,,"            assertTrue(""Row "" + i + "" should be live"","
42413,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RangeTombstoneTest.java,117,,"            assertFalse(""Row "" + i + "" shouldn't be live"","
42414,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RangeTombstoneTest.java,234,,"        String key = ""rt_times"";"
42415,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RangeTombstoneTest.java,479,,"                                           ""test_index"","
42416,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,126,,"                         .addPartitionKeyColumn(""key"", BytesType.instance)"
42417,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,127,,"                         .addClusteringColumn(""col"", AsciiType.instance)"
42418,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,215,,"        new RowUpdateBuilder(cfs.metadata(), 0, ByteBufferUtil.bytes(""key1""))"
42419,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,217,,"                .add(""val"", ByteBufferUtil.bytes(""abcd""))"
42420,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,223,,"        new RowUpdateBuilder(cfs.metadata(), 0, ByteBufferUtil.bytes(""key2""))"
42421,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,307,,"                new String[] { ""1"", ""key3"", ""cc"", ""c"" }"
42422,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadCommandTest.java,315,,"                new String[] { ""1"", ""key6"", ""aa"", ""a"" },"
42423,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadMessageTest.java,65,,"                         .addClusteringColumn(""col1"", AsciiType.instance)"
42424,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadMessageTest.java,66,,"                         .addClusteringColumn(""col2"", AsciiType.instance)"
42425,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadMessageTest.java,102,,"        rm = Util.cmd(cfs, Util.dk(""key1""))"
42426,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ReadMessageTest.java,168,,"                .add(""val"", ByteBufferUtil.bytes(""abcd""))"
42427,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RecoveryManagerTest.java,73,,"    private static final String CF_STANDARD1 = ""Standard1"";"
42428,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RecoveryManagerTest.java,147,,"            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata(), 1L, 0, ""keymulti"")"
42429,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RecoveryManagerTest.java,148,,"                .clustering(""col1"").add(""val"", ""1"")"
42430,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RepairedDataTombstonesTest.java,48,,"            execute(""delete from %s where id=? and id2=?"", 1, i);"
42431,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RepairedDataTombstonesTest.java,97,,"        createTable(""create table %s (id int, id2 int, t text, t2 text, primary key (id, id2)) with gc_grace_seconds=0 and compaction = {'class':'SizeTieredCompactionStrategy', 'only_purge_repaired_tombstones':true}"");"
42432,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RowCacheTest.java,106,,"        rub.add(""val"", ByteBufferUtil.bytes(""val"" + 0));"
42433,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/RowCacheTest.java,151,,"            DecoratedKey key = Util.dk(""key"" + i);"
42434,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,99,,"                     .addPartitionKeyColumn(""pk1"", IntegerType.instance)"
42435,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,100,,"                     .addClusteringColumn(""ck1"", IntegerType.instance)"
42436,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,101,,"                     .addRegularColumn(""reg1"", typeC.freeze())"
42437,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,102,,"                     .addRegularColumn(""reg2"", ListType.getInstance(IntegerType.instance, false))"
42438,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,103,,"                     .addRegularColumn(""reg3"", MapType.getInstance(AsciiType.instance, IntegerType.instance, true))"
42439,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,138,,"                     .addStaticColumn(""st1"", IntegerType.instance)"
42440,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,163,,"                          ""    pk1 varint,\n"" +"
42441,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,164,,"                          ""    ck1 varint,\n"" +"
42442,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SchemaCQLHelperTest.java,407,,"                   allOf(containsString(String.format(""CREATE TYPE IF NOT EXISTS %s.%s (\n"" +"
42443,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ScrubTest.java,216,,"        boolean compression = Boolean.parseBoolean(System.getProperty(""cassandra.test.compression"", ""false""));"
42444,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ScrubTest.java,216,,"        boolean compression = Boolean.parseBoolean(System.getProperty(""cassandra.test.compression"", ""false""));"
42445,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ScrubTest.java,374,,"                                                          .newRow(""someName"").add(""val"", ""someValue"")"
42446,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ScrubTest.java,758,,"        Assertions.assertThat(tool.getStdout()).contains(""Pre-scrub sstables snapshotted into"");"
42447,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/ScrubTest.java,759,,"        Assertions.assertThat(tool.getStdout()).contains(""1 rows in new sstable and 0 empty"");"
42448,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SecondaryIndexTest.java,89,,"        new RowUpdateBuilder(cfs.metadata(), 0, ""k1"").clustering(""c"").add(""birthdate"", 1L).add(""notbirthdate"", 1L).build().applyUnsafe();"
42449,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SecondaryIndexTest.java,89,,"        new RowUpdateBuilder(cfs.metadata(), 0, ""k1"").clustering(""c"").add(""birthdate"", 1L).add(""notbirthdate"", 1L).build().applyUnsafe();"
42450,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SecondaryIndexTest.java,101,,"        partitions = Util.getAll(Util.cmd(cfs).fromKeyExcl(""k1"").toKeyIncl(""k4aaa"").build());"
42451,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SinglePartitionSliceCommandTest.java,392,,"        String errorMessage = String.format(""Expected %s but got %s"", toString(memtableUnfiltereds, metadata), toString(singleSSTableUnfiltereds, metadata));"
42452,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SystemKeyspaceMigrator40Test.java,48,,"        String insert = String.format(""INSERT INTO %s ("""
42453,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SystemKeyspaceMigrator40Test.java,63,,"                InetAddress.getByName(""127.0.0.1""),"
42454,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SystemKeyspaceMigrator40Test.java,74,,"        for (UntypedResultSet.Row row : execute(String.format(""SELECT * FROM %s"", SystemKeyspaceMigrator40.peersName)))"
42455,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SystemKeyspaceMigrator40Test.java,93,,"        execute(String.format(""TRUNCATE %s"", SystemKeyspaceMigrator40.legacyPeersName));"
42456,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/SystemKeyspaceMigrator40Test.java,159,,"                ""foo"","
42457,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/TimeSortTest.java,38,,"        execute(""INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TIMESTAMP ?"", 0, 100, 0, 100L);"
42458,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/VerifyTest.java,139,,"            fail(""Unexpected CorruptSSTableException"");"
42459,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/VerifyTest.java,313,,"            fail(""Expected a CorruptSSTableException to be thrown"");"
42460,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogReaderTest.java,91,,"        Assert.assertEquals(""Expected "" + readCount + "" seen mutations, got: "" + testHandler.seenMutations.size(),"
42461,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogReaderTest.java,91,,"        Assert.assertEquals(""Expected "" + readCount + "" seen mutations, got: "" + testHandler.seenMutations.size(),"
42462,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDCTest.java,66,,"        createTable(""CREATE TABLE %s (idx int, data text, primary key(idx)) WITH cdc=true;"");"
42463,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDCTest.java,82,,"                        .add(""data"", randomizeBuffer(DatabaseDescriptor.getCommitLogSegmentSize() / 3))"
42464,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDCTest.java,239,,"        Assert.assertTrue(""File does not exist: "" + linked, Files.exists(linked));"
42465,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogTest.java,322,,"                     .clustering(""bytes"")"
42466,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogTest.java,323,,"                     .add(""val"", ByteBuffer.allocate(DatabaseDescriptor.getCommitLogSegmentSize() / 4))"
42467,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/commitlog/CommitLogTest.java,886,,"        System.setProperty(""cassandra.replayList"", KEYSPACE1 + ""."" + STANDARD1);"
42468,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/ActiveCompactionsTest.java,64,,"        createTable(""CREATE TABLE %s (pk int, ck int, a int, b int, PRIMARY KEY (pk, ck))"");"
42469,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/ActiveCompactionsTest.java,69,,"            execute(""INSERT INTO %s (pk, ck, a, b) VALUES ("" + i + "", 2, 3, 4)"");"
42470,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/ActiveCompactionsTest.java,69,,"            execute(""INSERT INTO %s (pk, ck, a, b) VALUES ("" + i + "", 2, 3, 4)"");"
42471,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/AntiCompactionTest.java,280,,"                    builder.newRow(""c"" + j).add(""val"", ""value1"");"
42472,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/AntiCompactionTest.java,504,,"        ColumnFamilyStore cfs = MockSchema.newCFS(""anticomp"");"
42473,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java,89,,"        execute(""insert into %s (id) values ('1')"");"
42474,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java,211,,"        createTable(""CREATE TABLE %s (id text PRIMARY KEY)"");"
42475,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java,213,,"        localOptions.put(""class"", ""DateTieredCompactionStrategy"");"
42476,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java,213,,"        localOptions.put(""class"", ""DateTieredCompactionStrategy"");"
42477,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsPurgeTest.java,50,,"    private static final String CF_STANDARD1 = ""Standard1"";"
42478,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsPurgeTest.java,94,,"        String key = ""key1"";"
42479,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsPurgeTest.java,101,,"                   .add(""val"", ByteBufferUtil.EMPTY_BYTE_BUFFER)"
42480,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsPurgeTest.java,509,,"        UntypedResultSet result = QueryProcessor.executeInternal(String.format(""SELECT * FROM %s.%s WHERE k = %d"", keyspace, table, 1));"
42481,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java,128,,"                    .add(""val"", ByteBufferUtil.EMPTY_BYTE_BUFFER)"
42482,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/DateTieredCompactionStrategyTest.java,231,,"                .clustering(""column"")"
42483,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/DateTieredCompactionStrategyTest.java,232,,"                .add(""val"", value).build().applyUnsafe();"
42484,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java,135,,"                update.newRow(""column"" + c).add(""val"", value);"
42485,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/LeveledCompactionStrategyTest.java,135,,"                update.newRow(""column"" + c).add(""val"", value);"
42486,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategyTest.java,116,,"        String[] strings2 = { ""aaa"", ""bbbbbbbb"", ""aaa"", ""bbbbbbbb"", ""bbbbbbbb"", ""aaa"" };"
42487,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategyTest.java,116,,"        String[] strings2 = { ""aaa"", ""bbbbbbbb"", ""aaa"", ""bbbbbbbb"", ""bbbbbbbb"", ""aaa"" };"
42488,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/TTLExpiryTest.java,56,,"    private static final String CF_STANDARD1 = ""Standard1"";"
42489,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/TTLExpiryTest.java,70,,"                                                 .addRegularColumn(""col1"", AsciiType.instance)"
42490,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/TTLExpiryTest.java,73,,"                                                 .addRegularColumn(""col2"", AsciiType.instance)"
42491,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java,67,,"        System.setProperty(TimeWindowCompactionStrategyOptions.UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_PROPERTY, ""true"");"
42492,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java,181,,"                .clustering(""column"")"
42493,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/compaction/TimeWindowCompactionStrategyTest.java,182,,"                .add(""val"", value).build().applyUnsafe();"
42494,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/composites/CTypeTest.java,36,,"                UUIDType.instance.fromString(""00000000-0000-0000-0000-000000000000""),"
42495,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/composites/CTypeTest.java,46,,"                UUIDType.instance.fromString(""ffffffff-ffff-ffff-ffff-ffffffffffff""),"
42496,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java,89,,"        return Arrays.asList(new Object[]{ ""3.0"" }, new Object[]{ ""3.11"" }, new Object[]{ ""4.0-rc1"" }, new Object[]{ ""4.0"" });"
42497,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java,89,,"        return Arrays.asList(new Object[]{ ""3.0"" }, new Object[]{ ""3.11"" }, new Object[]{ ""4.0-rc1"" }, new Object[]{ ""4.0"" });"
42498,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java,89,,"        return Arrays.asList(new Object[]{ ""3.0"" }, new Object[]{ ""3.11"" }, new Object[]{ ""4.0-rc1"" }, new Object[]{ ""4.0"" });"
42499,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java,113,,"            assertEquals(""*/*"", filter.toString());"
42500,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/AbstractCompositeTypeTest.java,33,,"        assertEquals(""Ab!CdXy \\Z123-345"", AbstractCompositeType.escape(""Ab!CdXy \\Z123-345""));"
42501,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/CollectionTypeTest.java,98,,"            mt.decompose(ImmutableMap.of(""aa"", ""val1"")),"
42502,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/CompositeTypeTest.java,85,,"            createCompositeKey(""test1"", uuids[0], -1, false),"
42503,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/CompositeTypeTest.java,198,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname5).add(""val"", ""cname5"").build().applyUnsafe();"
42504,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/CompositeTypeTest.java,243,,"        assert TypeParser.parse(""CompositeType(IntegerType, BytesType)"").isCompatibleWith(TypeParser.parse(""CompositeType(IntegerType)""));"
42505,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/CompositeTypeTest.java,261,,"            new String[]{ ""foo"", ""bar"" },"
42506,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,86,,"            createDynamicCompositeKey(""test1"", uuids[0], -1, false),"
42507,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,119,,"        assert comparator.getString(key).equals(""b@"" + test1Hex + "":t@"" + uuids[1] + "":IntegerType@42"");"
42508,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,195,,"        ByteBuffer cname4 = createDynamicCompositeKey(""test2"", uuids[0], -1, false);"
42509,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,200,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname5).add(""val"", ""cname5"").build().applyUnsafe();"
42510,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,200,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname5).add(""val"", ""cname5"").build().applyUnsafe();"
42511,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,201,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname1).add(""val"", ""cname1"").build().applyUnsafe();"
42512,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,202,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname4).add(""val"", ""cname4"").build().applyUnsafe();"
42513,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,203,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname2).add(""val"", ""cname2"").build().applyUnsafe();"
42514,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/DynamicCompositeTypeTest.java,204,,"        new RowUpdateBuilder(cfs.metadata(), ts, key).clustering(cname3).add(""val"", ""cname3"").build().applyUnsafe();"
42515,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java,72,,"        byte[] abc = ""abc"".getBytes(StandardCharsets.US_ASCII);"
42516,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/SimpleDateTypeTest.java,106,,"        d2 = SimpleDateType.instance.fromString(""1970-01-01"");"
42517,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java,39,,"        assert comparator.compare(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.bytes(""asdf"")) < 0;"
42518,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/partition/PartitionUpdateTest.java,38,,"        UpdateBuilder builder = UpdateBuilder.create(cfm, ""key0"");"
42519,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/view/ViewUtilsTest.java,63,,"        metadata.updateNormalToken(new StringToken(""A""), InetAddressAndPort.getByName(""127.0.0.1""));"
42520,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/view/ViewUtilsTest.java,64,,"        metadata.updateNormalToken(new StringToken(""C""), InetAddressAndPort.getByName(""127.0.0.2""));"
42521,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/view/ViewUtilsTest.java,76,,"        Keyspace.clear(""Keyspace1"");"
42522,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,124,,"        assertRowsNet(executeNet(q), new Object[] {""server_encryption_options_enabled"", ""false""});"
42523,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,139,,"        check(pre + ""enabled"", ""false"");"
42524,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,153,,"        check(pre + ""protocol"", null);"
42525,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,170,,"        check(pre + ""optional"", ""true"");"
42526,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,202,,"        check(pre + ""logger"", ""BinAuditLogger"");"
42527,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,209,,"        check(pre + ""included_keyspaces"", """");"
42528,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,213,,"        check(pre + ""excluded_keyspaces"", ""system,system_schema,system_virtual_schema"");"
42529,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,217,,"        check(pre + ""included_categories"", """");"
42530,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,221,,"        check(pre + ""excluded_categories"", """");"
42531,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,225,,"        check(pre + ""included_users"", """");"
42532,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,229,,"        check(pre + ""excluded_users"", """");"
42533,./TargetProjects/cassandra/test/unit/org/apache/cassandra/db/virtual/SettingsTableTest.java,247,,"        check(pre + ""cipher"", ""AES/CBC/PKCS5Padding"");"
42534,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/OrderPreservingPartitionerTest.java,50,,"        assert tok("""").compareTo(tok(""asdf"")) < 0;"
42535,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,84,,"        addNonTrivialRangeAndSources(rangesWithSources, 1, 10, ""127.0.0.1"");"
42536,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,85,,"        addNonTrivialRangeAndSources(rangesWithSources, 11, 20, ""127.0.0.2"");"
42537,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,86,,"        addNonTrivialRangeAndSources(rangesWithSources, 21, 30, ""127.0.0.3"");"
42538,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,88,,"        addNonTrivialRangeAndSources(rangesWithSources, 41, 50, ""127.0.0.5"");"
42539,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,90,,"        RangeFetchMapCalculator calculator = new RangeFetchMapCalculator(rangesWithSources.build(), Collections.emptyList(), ""Test"");"
42540,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,263,,"        addNonTrivialRangeAndSources(rangesWithSources, 21, 30, ""127.0.0.2"", ""127.0.0.59"", ""127.0.0.61"");"
42541,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,279,,"        addNonTrivialRangeAndSources(rangesWithSources, 1, 10, ""127.0.0.3"", ""127.0.0.51"");"
42542,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeFetchMapCalculatorTest.java,280,,"        addNonTrivialRangeAndSources(rangesWithSources, 11, 20, ""127.0.0.3"", ""127.0.0.55"");"
42543,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeTest.java,57,,"        Range<Token> left = new Range<Token>(new BigIntegerToken(""0""), new BigIntegerToken(""100""));"
42544,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeTest.java,77,,"        assert range.contains(new BigIntegerToken(""200""));"
42545,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeTest.java,225,,"        Range<Token> all1000 = new Range<Token>(new BigIntegerToken(""1000""), new BigIntegerToken(""1000""));"
42546,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeTest.java,295,,"        Range<Token> wraps2 = new Range<Token>(new BigIntegerToken(""120""), new BigIntegerToken(""90""));"
42547,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/RangeTest.java,488,,"        Range<Token> oldRange = makeRange(""1010"", ""40"");"
42548,./TargetProjects/cassandra/test/unit/org/apache/cassandra/dht/StreamStateStoreTest.java,59,,"        session.addStreamRequest(""keyspace1"", RangesAtEndpoint.toDummyList(Collections.singleton(range)), RangesAtEndpoint.toDummyList(Collections.emptyList()), Collections.singleton(""cf""));"
42549,./TargetProjects/cassandra/test/unit/org/apache/cassandra/fql/FullQueryLoggerTest.java,128,,"        File f = FileUtils.createTempFile(""foo"", ""bar"");"
42550,./TargetProjects/cassandra/test/unit/org/apache/cassandra/fql/FullQueryLoggerTest.java,128,,"        File f = FileUtils.createTempFile(""foo"", ""bar"");"
42551,./TargetProjects/cassandra/test/unit/org/apache/cassandra/fql/FullQueryLoggerTest.java,266,,"            FullQueryLogger.instance.binLog.put(new Query(""foo1"", QueryOptions.DEFAULT, queryState(), 1)"
42552,./TargetProjects/cassandra/test/unit/org/apache/cassandra/fql/FullQueryLoggerTest.java,295,,"            logQuery(""foo2"");"
42553,./TargetProjects/cassandra/test/unit/org/apache/cassandra/fql/FullQueryLoggerTest.java,302,,"                                      logQuery(""foo4"");"
42554,./TargetProjects/cassandra/test/unit/org/apache/cassandra/gms/GossiperTest.java,129,,"        Gossiper.instance.endpointStateMap.put(InetAddressAndPort.getByName(""127.0.0.2""), es);"
42555,./TargetProjects/cassandra/test/unit/org/apache/cassandra/gms/GossiperTest.java,134,,"        Gossiper.instance.endpointStateMap.put(InetAddressAndPort.getByName(""127.0.0.3""), es);"
42556,./TargetProjects/cassandra/test/unit/org/apache/cassandra/gms/ShadowRoundTest.java,174,,"        System.setProperty(Config.PROPERTY_PREFIX + ""auto_bootstrap"", ""false"");"
42557,./TargetProjects/cassandra/test/unit/org/apache/cassandra/hints/HintMessageTest.java,63,,"            new RowUpdateBuilder(table, now, bytes(""key"")).clustering(""column"").add(""val"", ""val"" + 1234).build();"
42558,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,71,,"        createTable(""CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b))"");"
42559,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,74,,"        execute(""INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)"", 0, 0, 0, 2);"
42560,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,189,,"                             ""Frozen collections are immutable and must be fully indexed"","
42561,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,232,,"        createTable(""CREATE TABLE %s(k int, c int, v1 int, v2 int, PRIMARY KEY(k,c))"");"
42562,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,274,,"        testCreateIndex(""idx_1"", ""pk1"", ""pk2"");"
42563,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,274,,"        testCreateIndex(""idx_1"", ""pk1"", ""pk2"");"
42564,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,355,,"        String indexName = currentTable() + ""_custom_index"";"
42565,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,360,,"                             String.format(""SELECT * FROM %%s WHERE expr(%s, 'foo bar baz')"", indexName));"
42566,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,362,,"        createIndex(String.format(""CREATE CUSTOM INDEX %s ON %%s(c) USING '%s'"", indexName, StubIndex.class.getName()));"
42567,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,562,,"        execute(""INSERT INTO %s (k, c, v) VALUES (?, ?, ?)"", 0, 0, 0);"
42568,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,592,,"        execute(""INSERT INTO %s (k, c) VALUES (?, ?)"", 0, 1);"
42569,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/CustomIndexTest.java,668,,"        createIndex(String.format(""CREATE CUSTOM INDEX %s ON %%s(v) USING '%s'"","
42570,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,63,,"        String tableName = createTable(""CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))"");"
42571,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,64,,"        String indexName = createIndex(""CREATE INDEX ON %s(c)"");"
42572,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,128,,"        String defaultIndexName = createIndex(String.format(""CREATE CUSTOM INDEX ON %%s(c) USING '%s'"", TestingIndex.class.getName()));"
42573,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,129,,"        String readOnlyIndexName = createIndex(String.format(""CREATE CUSTOM INDEX ON %%s(b) USING '%s'"", ReadOnlyOnFailureIndex.class.getName()));"
42574,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,346,,"            fail(""Should have failed!"");"
42575,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,542,,"        handleJVMStablityOnFailedCreate(new SocketException(""Should not fail""), false);"
42576,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java,544,,"        handleJVMStablityOnFailedCreate(new SocketException(""Too many open files""), true);"
42577,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,82,,"        execute(""INSERT INTO %s (pk1, pk2, c, s, v) VALUES (?, ?, ?, ?, ?)"", 1, 1, 1, 9, 1);"
42578,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,224,,"        new TestScript().tableDefinition(""CREATE TABLE %s (k int, c int, m map<text,int>, PRIMARY KEY (k, c));"")"
42579,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,231,,"                        .updateExpression(""SET m = {'x':40, 'y':50, 'z':60}"")"
42580,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,382,,"        execute(""INSERT INTO %s (k, c, s) VALUES (?, ?, ?)"", row1);"
42581,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,432,,"        execute(""INSERT INTO %s (k, c) VALUES (?, ?)"", row1);"
42582,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,437,,"        assertRowsIgnoringOrder(execute(""SELECT * FROM %s WHERE c = ?"", ""c0""), row1, row3);"
42583,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,518,,"        assertRows(execute(""SELECT * FROM %s WHERE c = 1""), row(1, 1, 1));"
42584,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java,717,,"            String selectFirstRowCql = String.format(""SELECT * FROM %%s WHERE %s"", queryExpression1);"
42585,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASICQLTest.java,49,,"                execute(""INSERT INTO %s (pk, v) VALUES (?, ?);"", i, 1);"
42586,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASICQLTest.java,54,,"            SimpleStatement stmt = new SimpleStatement(""SELECT * FROM "" + KEYSPACE + '.' + currentTable() + "" WHERE v = 1"");"
42587,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASICQLTest.java,138,,"        for (String mode : new String[]{ ""PREFIX"", ""CONTAINS"", ""SPARSE""})"
42588,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASICQLTest.java,138,,"        for (String mode : new String[]{ ""PREFIX"", ""CONTAINS"", ""SPARSE""})"
42589,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASICQLTest.java,177,,"                    throw new AssertionError(String.format(""Failure with mode:%s and flush:%s "", mode, forceFlush), th);"
42590,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASICQLTest.java,197,,"                    createIndex(String.format(""CREATE CUSTOM INDEX ON %%s (v) USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = {'mode': '%s'};"", mode));"
42591,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,145,,"            put(""key1"", Pair.create(""Pavel"", 14));"
42592,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,145,,"            put(""key1"", Pair.create(""Pavel"", 14));"
42593,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,146,,"            put(""key2"", Pair.create(""Pavel"", 26));"
42594,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,147,,"            put(""key3"", Pair.create(""Pavel"", 27));"
42595,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,148,,"            put(""key4"", Pair.create(""Jason"", 27));"
42596,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,148,,"            put(""key4"", Pair.create(""Jason"", 27));"
42597,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,153,,"        final ByteBuffer firstName = UTF8Type.instance.decompose(""first_name"");"
42598,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,154,,"        final ByteBuffer age = UTF8Type.instance.decompose(""age"");"
42599,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,301,,"                put(""key0"", Pair.create(""Maxie"", 43));"
42600,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,312,,"                put(""key5"", Pair.create(""Americo"", 20));"
42601,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,313,,"                put(""key6"", Pair.create(""Fiona"", 39));"
42602,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,313,,"                put(""key6"", Pair.create(""Fiona"", 39));"
42603,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,314,,"                put(""key7"", Pair.create(""Francis"", 41));"
42604,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,315,,"                put(""key8"", Pair.create(""Charley"", 21));"
42605,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,316,,"                put(""key9"", Pair.create(""Amely"", 40));"
42606,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,323,,"                put(""key10"", Pair.create(""Eddie"", 42));"
42607,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,324,,"                put(""key11"", Pair.create(""Oswaldo"", 35));"
42608,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,325,,"                put(""key12"", Pair.create(""Susana"", 35));"
42609,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,326,,"                put(""key13"", Pair.create(""Alivia"", 42));"
42610,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,327,,"                put(""key14"", Pair.create(""Demario"", 28));"
42611,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,327,,"                put(""key14"", Pair.create(""Demario"", 28));"
42612,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,452,,"        executeCQL(FTS_CF_NAME, ""INSERT INTO %s.%s (song_id, title, artist) VALUES(?, ?, ?)"", UUID.fromString(""1a4abbcd-b5de-4c69-a578-31231e01ff09""), ""Poker Face"", ""Lady Gaga"");"
42613,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,609,,"                put(""key03"", Pair.create(""Elvera"", 22));"
42614,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,610,,"                put(""key04"", Pair.create(""Bailey"", 45));"
42615,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,612,,"                put(""key06"", Pair.create(""Kadin"", 38));"
42616,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,613,,"                put(""key07"", Pair.create(""Maggie"", 36));"
42617,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,614,,"                put(""key08"", Pair.create(""Kailey"", 36));"
42618,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,615,,"                put(""key09"", Pair.create(""Armand"", 21));"
42619,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,625,,"                put(""key15"", Pair.create(""Trycia"", 43));"
42620,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,626,,"                put(""key16"", Pair.create(""Aida"", 21));"
42621,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,634,,"                put(""key20"", Pair.create(""Fannie"", 22));"
42622,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,635,,"                put(""key21"", Pair.create(""Keegan"", 29));"
42623,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,636,,"                put(""key22"", Pair.create(""Ignatius"", 36));"
42624,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,638,,"                put(""key24"", Pair.create(""Annamarie"", 29));"
42625,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,639,,"                put(""key25"", Pair.create(""Tianna"", 31));"
42626,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,786,,"                                                                   UTF8Type.instance.decompose(""/data/output/id""),"
42627,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1201,,"        update(rm, comment, UTF8Type.instance.decompose(""龍馭鬱""), 2000);"
42628,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1559,,"        update(rm, name, UTF8Type.instance.decompose(""Jordan""), 2000);"
42629,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1586,,"        update(rm, name, UTF8Type.instance.decompose(""Jean-Claude""), 8000);"
42630,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1749,,"        executeCQL(CLUSTERING_CF_NAME_1, ""INSERT INTO %s.%s (name, nickname, location, age, height, score) VALUES (?, ?, ?, ?, ?, ?)"", ""Pavel"", ""xedin"", ""US"", 27, 183, 1.0);"
42631,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1749,,"        executeCQL(CLUSTERING_CF_NAME_1, ""INSERT INTO %s.%s (name, nickname, location, age, height, score) VALUES (?, ?, ?, ?, ?, ?)"", ""Pavel"", ""xedin"", ""US"", 27, 183, 1.0);"
42632,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1861,,"        executeCQL(STATIC_CF_NAME, ""INSERT INTO %s.%s (sensor_id,sensor_type) VALUES(?, ?)"", 1, ""TEMPERATURE"");"
42633,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1862,,"        executeCQL(STATIC_CF_NAME, ""INSERT INTO %s.%s (sensor_id,date,value,variance) VALUES(?, ?, ?, ?)"", 1, 20160401L, 24.46, 2);"
42634,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1887,,"        Assert.assertEquals(20160401L, row1.getLong(""date""));"
42635,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1888,,"        Assert.assertEquals(24.46, row1.getDouble(""value""), 0.0);"
42636,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1889,,"        Assert.assertEquals(2, row1.getInt(""variance""));"
42637,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1922,,"        Assert.assertEquals(""TEMPERATURE"", row1.getString(""sensor_type""));"
42638,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,1993,,"        executeCQL(CLUSTERING_CF_NAME_1, ""INSERT INTO %s.%s (name, nickname) VALUES (?, ?)"", ""Alex"", ""ifesdjeen"");"
42639,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,2012,,"            SASIIndex.validateOptions(Collections.singletonMap(""target"", ""id""), store.metadata());"
42640,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,2024,,"                                      {{ put(""target"", ""address""); put(""mode"", ""NORMAL""); }},"
42641,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,2081,,"        QueryProcessor.executeOnceInternal(String.format(""CREATE TABLE IF NOT EXISTS %s.%s (k int primary key, v text);"", KS_NAME, containsTable));"
42642,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,2086,,"        QueryProcessor.executeOnceInternal(String.format(""CREATE CUSTOM INDEX IF NOT EXISTS ON %s.%s(v) "" +"
42643,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,2112,,"        QueryProcessor.executeOnceInternal(String.format(""INSERT INTO %s.%s (k, v) VALUES (?, ?);"", KS_NAME, containsTable), 0, ""Pavel"");"
42644,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java,2296,,"                                          CQLTester.row(""Tom"", 1, 1),"
42645,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/conf/IndexModeTest.java,68,,"        ColumnMetadata cd = ColumnMetadata.regularColumn(cfm, ByteBufferUtil.bytes(""TestColumnMetadata""), AsciiType.instance);"
42646,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/conf/IndexModeTest.java,83,,"        IndexMode result = IndexMode.getMode(cd, Collections.singletonMap(""is_literal"", ""false""));"
42647,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/disk/OnDiskIndexTest.java,230,,"        File iterIndex = FileUtils.createTempFile(""sa-iter"", "".db"");"
42648,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/disk/OnDiskIndexTest.java,279,,"                addAll(this, UTF8Type.instance.decompose(""Pavel""), keyBuilder(9L, 10L));"
42649,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/disk/OnDiskIndexTest.java,349,,"                Assert.assertTrue(""key"" + key + "" wasn't found"", actual.contains(keyAt(key)));"
42650,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/disk/OnDiskIndexTest.java,370,,"                put(UTF8Type.instance.decompose(""Vijay""),   keyBuilder(7L));"
42651,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/disk/OnDiskIndexTest.java,372,,"                put(UTF8Type.instance.decompose(""Aleksey""), keyBuilder(9L, 10L));"
42652,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/plan/OperationTest.java,92,,"        final ColumnMetadata firstName = getColumn(UTF8Type.instance.decompose(""first_name""));"
42653,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/plan/OperationTest.java,93,,"        final ColumnMetadata age = getColumn(UTF8Type.instance.decompose(""age""));"
42654,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/plan/OperationTest.java,94,,"        final ColumnMetadata comment = getColumn(UTF8Type.instance.decompose(""comment""));"
42655,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/plan/OperationTest.java,440,,"        final ColumnMetadata height = getColumn(UTF8Type.instance.decompose(""height""));"
42656,./TargetProjects/cassandra/test/unit/org/apache/cassandra/index/sasi/plan/OperationTest.java,590,,"                         buildCell(sensorType, UTF8Type.instance.decompose(""TEMPERATURE""), System.currentTimeMillis()));"
42657,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/compress/CompressedRandomAccessReaderTest.java,102,,"        try(CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + "".metadata"","
42658,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/compress/CompressedSequentialWriterTest.java,121,,"        try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + "".metadata"","
42659,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java,98,,"            String schema = ""CREATE TABLE "" + qualifiedTable + "" ("""
42660,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java,103,,"            String insert = ""INSERT INTO "" + qualifiedTable + "" (k, v1, v2) VALUES (?, ?, ?)"";"
42661,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java,118,,"            UntypedResultSet rs = QueryProcessor.executeInternal(""SELECT * FROM "" + qualifiedTable + "";"");"
42662,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java,212,,"                        + ""  PRIMARY KEY (k)"""
42663,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java,250,,"                    + ""  k int,"""
42664,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/CQLSSTableWriterTest.java,315,,"                                                  .withType(""CREATE TYPE "" + keyspace + "".tuple2 (a int, b int)"")"
42665,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java,162,,"            Row row = Util.getOnlyRowUnfiltered(Util.cmd(cfs, String.format(""%3d"", i)).build());"
42666,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java,163,,"            Cell<?> cell = row.getCell(cfs.metadata().getColumn(ByteBufferUtil.bytes(""val"")));"
42667,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/IndexSummaryTest.java,223,,"        dos.writeUTF(""JUNK"");"
42668,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,108,,"    static final String longString = ""0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"" +"
42669,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,157,,"                              ""legacy_tables"","
42670,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,185,,"            logger.info(""Loading legacy version: {}"", legacyVersion);"
42671,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,342,,"            ColumnFamilyStore cfs = Keyspace.open(""legacy_tables"").getColumnFamilyStore(String.format(""legacy_%s_simple"", legacyVersion));"
42672,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,427,,"            streamLegacyTable(""legacy_%s_simple_counter"", legacyVersion);"
42673,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,428,,"            streamLegacyTable(""legacy_%s_clust"", legacyVersion);"
42674,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,429,,"            streamLegacyTable(""legacy_%s_clust_counter"", legacyVersion);"
42675,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java,518,,"        Assert.assertEquals(1L, rs.one().getLong(""val""));"
42676,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,109,,"                                                                  ByteBufferUtil.bytes(""udt_nested""),"
42677,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,241,,"        cols.addRegularColumn(""solr_query"", UTF8Type.instance);"
42678,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,313,,"            .addRegularColumn(""udt_in_composite"", udtInComposite)"
42679,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,314,,"            .addRegularColumn(""udt_in_list"", udtInList)"
42680,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,315,,"            .addRegularColumn(""udt_in_set"", udtInSet)"
42681,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,316,,"            .addRegularColumn(""udt_in_map"", udtInMap)"
42682,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,331,,"        assertEquals(Sets.newHashSet(""pk"", ""ck"", ""regular_b"", ""static_b"","
42683,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,331,,"        assertEquals(Sets.newHashSet(""pk"", ""ck"", ""regular_b"", ""static_b"","
42684,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,416,,"                        new ColSpec(""frozen_udt_as_frozen_udt_dropped"","
42685,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableHeaderFixTest.java,423,,"                        new ColSpec(""frozen_udt_as_unfrozen_udt_dropped"","
42686,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableLoaderTest.java,139,,"            writer.addRow(""key1"", ""col1"", ""100"");"
42687,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableLoaderTest.java,139,,"            writer.addRow(""key1"", ""col1"", ""100"");"
42688,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableLoaderTest.java,139,,"            writer.addRow(""key1"", ""col1"", ""100"");"
42689,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java,71,,"                                                 .addRegularColumn(""val"", AsciiType.instance),"
42690,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java,93,,"            .clustering(""col"")"
42691,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java,120,,"                .add(""val"", ByteBufferUtil.EMPTY_BYTE_BUFFER)"
42692,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java,302,,"            .add(""birthdate"", 1L)"
42693,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java,631,,"            new RowUpdateBuilder(store.metadata(), j, String.format(""%3d"", j))"
42694,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/SSTableWriterTest.java,62,,"                    builder.newRow("""" + j).add(""val"", ByteBuffer.allocate(1000));"
42695,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/format/SSTableFlushObserverTest.java,79,,"                         .addRegularColumn(""first_name"", UTF8Type.instance)"
42696,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/format/SSTableFlushObserverTest.java,80,,"                         .addRegularColumn(""age"", Int32Type.instance)"
42697,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/format/SSTableFlushObserverTest.java,81,,"                         .addRegularColumn(""height"", LongType.instance)"
42698,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/sstable/format/VersionAndTypeTest.java,37,,"                                                                .hasMessageContaining(""should be of the form 'big-bc'"");"
42699,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java,146,,"        File tmpFile = FileUtils.createTempFile(""readtest"", ""bin"");"
42700,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/DataOutputTest.java,327,,"        File file = FileUtils.createTempFile(""dataoutput"", ""test"");"
42701,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/DataOutputTest.java,327,,"        File file = FileUtils.createTempFile(""dataoutput"", ""test"");"
42702,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/FileUtilsTest.java,126,,"        assertTrue(FileUtils.isContained(new File(""/tmp/abc""), new File(""/tmp/abc"")));"
42703,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/FileUtilsTest.java,139,,"        subDir_1.resolve(""file_1.txt"").toFile().createNewFile();"
42704,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/FileUtilsTest.java,157,,"        assertThat(targetDir.resolve(""a/ab/file_1.txt"")).exists();"
42705,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/FileUtilsTest.java,158,,"        assertThat(targetDir.resolve(""a/ab/file_2.txt"")).exists();"
42706,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/NIODataInputStreamTest.java,201,,"    @SuppressWarnings(""resource"")"
42707,./TargetProjects/cassandra/test/unit/org/apache/cassandra/io/util/RewindableDataInputStreamPlusTest.java,74,,"            out.writeUTF(""abc"");"
42708,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/InetAddressAndPortTest.java,49,,"        InetAddressAndPort address = InetAddressAndPort.getByName(""127.0.0.1"");"
42709,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/InetAddressAndPortTest.java,54,,"        address = InetAddressAndPort.getByName(""127.0.0.1:42"");"
42710,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/NetworkTopologyStrategyTest.java,80,,"        configOptions.put(""DC1"", ""3"");"
42711,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/NetworkTopologyStrategyTest.java,81,,"        configOptions.put(""DC2"", ""2"");"
42712,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/NetworkTopologyStrategyTest.java,82,,"        configOptions.put(""DC3"", ""1"");"
42713,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/PendingRangeMapsTest.java,57,,"        addPendingRange(pendingRangeMaps, genRange(""5"", ""15""), ""127.0.0.1"");"
42714,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/PropertyFileSnitchTest.java,192,,"        checkEndpoint(snitch, host.getHostAddressAndPort(), ""DC1"", ""RAC1"");"
42715,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/PropertyFileSnitchTest.java,192,,"        checkEndpoint(snitch, host.getHostAddressAndPort(), ""DC1"", ""RAC1"");"
42716,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/PropertyFileSnitchTest.java,208,,"            checkEndpoint(snitch, host.getHostAddressAndPort(), ""DC1"", ""RAC2"");"
42717,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/SimpleStrategyTest.java,127,,"        dc1.put(InetAddressAndPort.getByName(""127.0.0.1""), new Murmur3Partitioner.LongToken(-6639341390736545756L));"
42718,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/SimpleStrategyTest.java,129,,"        dc1.put(InetAddressAndPort.getByName(""127.0.0.2""), new Murmur3Partitioner.LongToken(-2506475074448728501L));"
42719,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/TokenMetadataTest.java,62,,"        tmd.updateNormalToken(token(ONE), InetAddressAndPort.getByName(""127.0.0.1""));"
42720,./TargetProjects/cassandra/test/unit/org/apache/cassandra/locator/TokenMetadataTest.java,63,,"        tmd.updateNormalToken(token(SIX), InetAddressAndPort.getByName(""127.0.0.6""));"
42721,./TargetProjects/cassandra/test/unit/org/apache/cassandra/metrics/CQLMetricsTest.java,81,,"            session.execute(String.format(""INSERT INTO junit.metricstest (id, val) VALUES (%d, '%s')"", i, ""val"" + i));"
42722,./TargetProjects/cassandra/test/unit/org/apache/cassandra/metrics/MaxSamplerTest.java,50,,"            final String key = ""test"" + i;"
42723,./TargetProjects/cassandra/test/unit/org/apache/cassandra/metrics/TableMetricsTest.java,129,,"            session.execute(String.format(""INSERT INTO %s.%s (id, val1, val2) VALUES (%d, '%s', '%s')"", KEYSPACE, TABLE, i, ""val"" + i, ""val"" + i));"
42724,./TargetProjects/cassandra/test/unit/org/apache/cassandra/metrics/TableMetricsTest.java,176,,"        ColumnFamilyStore second = recreateTable(TABLE + ""_second"");"
42725,./TargetProjects/cassandra/test/unit/org/apache/cassandra/net/MessagingServiceTest.java,155,,"        assertNull(dcLatency.get(""datacenter1""));"
42726,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/LocalSyncTaskTest.java,63,,"    public static final String CF_STANDARD = ""Standard1"";"
42727,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,340,,"        List<TreeResponse> treeResponses = Arrays.asList(treeResponse(addr1, RANGE_1, ""same"", RANGE_2, ""same"", RANGE_3, ""same""),"
42728,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,341,,"                                                         treeResponse(addr2, RANGE_1, ""different"", RANGE_2, ""same"", RANGE_3, ""different""),"
42729,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,484,,"        List<TreeResponse> treeResponses = Arrays.asList(treeResponse(addr1, RANGE_1, ""one"", RANGE_2, ""one"", RANGE_3, ""one""),"
42730,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,485,,"                                                         treeResponse(addr2, RANGE_1, ""two"", RANGE_2, ""two"", RANGE_3, ""two""),"
42731,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,486,,"                                                         treeResponse(addr3, RANGE_1, ""three"", RANGE_2, ""three"", RANGE_3, ""three""));"
42732,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,515,,"                                                         treeResponse(addr4, RANGE_1, ""four"", RANGE_2, ""four"", RANGE_3, ""four""),"
42733,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/RepairJobTest.java,516,,"                                                         treeResponse(addr5, RANGE_1, ""five"", RANGE_2, ""five"", RANGE_3, ""five""));"
42734,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/ValidatorTest.java,109,,"        InetAddressAndPort remote = InetAddressAndPort.getByName(""127.0.0.2"");"
42735,./TargetProjects/cassandra/test/unit/org/apache/cassandra/repair/messages/RepairOptionTest.java,69,,"        options.put(RepairOption.PRIMARY_RANGE_KEY, ""false"");"
42736,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,104,,"                         .addClusteringColumn(""col"", BytesType.instance)"
42737,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,180,,"                                       ""key0"", ""col0"", ""val0"");"
42738,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,180,,"                                       ""key0"", ""col0"", ""val0"");"
42739,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,180,,"                                       ""key0"", ""col0"", ""val0"");"
42740,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,203,,"            QueryProcessor.executeInternal(String.format(""INSERT INTO %s.%s (key, name, val) VALUES (?, ?, ?)"","
42741,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,205,,"                                           ""dropCf"", ""col"" + i, ""anyvalue"");"
42742,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,538,,"        TableMetadata.Builder builder = TableMetadata.builder(null, TABLE1).addPartitionKeyColumn(""partitionKey"", BytesType.instance);"
42743,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/MigrationManagerTest.java,600,,"        TableMetadata table0 = addTestTable(""ks2"", ""t"", """");"
42744,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/SchemaTest.java,58,,"            MigrationManager.announceNewKeyspace(KeyspaceMetadata.create(""ks0"", KeyspaceParams.simple(3)));"
42745,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/SchemaTest.java,59,,"            MigrationManager.announceNewKeyspace(KeyspaceMetadata.create(""ks1"", KeyspaceParams.simple(3)));"
42746,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,51,,"        new HashSet<>(Arrays.asList(new String[] { ""ascii"", ""bigint"", ""blob"", ""boolean"", ""date"","
42747,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,51,,"        new HashSet<>(Arrays.asList(new String[] { ""ascii"", ""bigint"", ""blob"", ""boolean"", ""date"","
42748,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,53,,"                                                   ""inet"", ""int"", ""smallint"", ""text"", ""time"","
42749,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,53,,"                                                   ""inet"", ""int"", ""smallint"", ""text"", ""time"","
42750,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,54,,"                                                   ""timestamp"", ""timeuuid"", ""tinyint"", ""uuid"","
42751,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,55,,"                                                   ""varchar"", ""varint"" }));"
42752,./TargetProjects/cassandra/test/unit/org/apache/cassandra/schema/ValidationTest.java,75,,"            AbstractType sourceType = CQLTypeParser.parse(""KEYSPACE"", sourceTypeString, Types.none());"
42753,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,187,,"        InetAddressAndPort boot1 = InetAddressAndPort.getByName(""127.0.1.1"");"
42754,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,193,,"        InetAddressAndPort boot2 = InetAddressAndPort.getByName(""127.0.1.2"");"
42755,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,210,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""5""), makeAddrs(""127.0.0.2""));"
42756,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,211,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""15""), makeAddrs(""127.0.0.3""));"
42757,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,212,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""25""), makeAddrs(""127.0.0.4""));"
42758,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,213,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""35""), makeAddrs(""127.0.0.5""));"
42759,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,214,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""45""), makeAddrs(""127.0.0.6""));"
42760,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,215,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""55""), makeAddrs(""127.0.0.7"", ""127.0.0.8"", ""127.0.1.1""));"
42761,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,215,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""55""), makeAddrs(""127.0.0.7"", ""127.0.0.8"", ""127.0.1.1""));"
42762,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,217,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""75""), makeAddrs(""127.0.0.9"", ""127.0.1.2"", ""127.0.0.1""));"
42763,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,217,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""75""), makeAddrs(""127.0.0.9"", ""127.0.1.2"", ""127.0.0.1""));"
42764,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/LeaveAndBootstrapTest.java,218,,"        expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken(""85""), makeAddrs(""127.0.0.10"", ""127.0.0.1""));"
42765,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,188,,"        tmd.updateHostId(UUID.randomUUID(), InetAddressAndPort.getByName(""127.0.0.1""));"
42766,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,189,,"        tmd.updateHostId(UUID.randomUUID(), InetAddressAndPort.getByName(""127.0.0.2""));"
42767,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,240,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(150, 151, ""127.0.0.43""),"
42768,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,291,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(0, 1, ""127.0.0.3""),"
42769,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,293,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(0, 1, ""127.0.0.5""),"
42770,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,295,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(0, 1, ""127.0.0.7""),"
42771,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,311,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(1, 5, ""127.0.0.4"")), Network_11_KeyspaceName);"
42772,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,312,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(1, 5, ""127.0.0.6"")), Network_22_KeyspaceName);"
42773,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,313,,"        assertPendingRanges(tmd, generatePendingRanges(generatePendingMapEntry(1, 5, ""127.0.0.8"")), Network_33_KeyspaceName);"
42774,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,337,,"                generatePendingMapEntry(20, 21, ""127.0.0.8""), generatePendingMapEntry(21, 25, ""127.0.0.10"")), Network_22_KeyspaceName);"
42775,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,706,,"        InetAddressAndPort boot1 = InetAddressAndPort.getByName(""127.0.1.1"");"
42776,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,714,,"        InetAddressAndPort boot2 = InetAddressAndPort.getByName(""127.0.1.2"");"
42777,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTest.java,755,,"        assertRanges(keyspace1ranges, ""127.0.0.9"", 70, 87);"
42778,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/MoveTransientTest.java,431,,"            assertTrue(""Didn't throw for "" + downNode, threw);"
42779,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/PaxosStateTest.java,66,,"        builder.clustering(""a"").add(""val"", value);"
42780,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/SerializationsTest.java,173,,"        InetAddressAndPort src = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.2"", PORT);"
42781,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/SerializationsTest.java,174,,"        InetAddressAndPort dest = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.3"", PORT);"
42782,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,202,,"        metadata.updateNormalToken(new StringToken(""A""), InetAddressAndPort.getByName(""127.0.0.1""));"
42783,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,203,,"        metadata.updateNormalToken(new StringToken(""C""), InetAddressAndPort.getByName(""127.0.0.2""));"
42784,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,206,,"        metadata.updateNormalToken(new StringToken(""B""), InetAddressAndPort.getByName(""127.0.0.4""));"
42785,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,207,,"        metadata.updateNormalToken(new StringToken(""D""), InetAddressAndPort.getByName(""127.0.0.5""));"
42786,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,210,,"        configOptions.put(""DC1"", ""2"");"
42787,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,211,,"        configOptions.put(""DC2"", ""2"");"
42788,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,212,,"        configOptions.put(ReplicationParams.CLASS, ""NetworkTopologyStrategy"");"
42789,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,214,,"        Keyspace.clear(""Keyspace1"");"
42790,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/StorageServiceServerTest.java,549,,"        metadata.updateNormalToken(new StringToken(""C""), InetAddressAndPort.getByName(""127.0.0.3""));"
42791,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/reads/DataResolverTest.java,279,,"                                                                                            .add(""one"", ""A"")"
42792,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/reads/DataResolverTest.java,413,,"                                                                                                     .add(""two"", ""A"")"
42793,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/reads/DataResolverTest.java,994,,"        ByteBuffer digest1 = ByteBufferUtil.bytes(""digest1"");"
42794,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/reads/DataResolverTest.java,1077,,"        ByteBuffer digest2 = ByteBufferUtil.bytes(""digest2"");"
42795,./TargetProjects/cassandra/test/unit/org/apache/cassandra/service/reads/repair/RepairedDataVerifierTest.java,84,,"        tracker.recordDigest(peer1, ByteBufferUtil.bytes(""digest1""), false);"
42796,./TargetProjects/cassandra/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java,98,,"                                    .addPartitionKeyColumn(""key"", BytesType.instance),"
42797,./TargetProjects/cassandra/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java,146,,"        ranges.add(new Range<>(p.getMinimumToken(), p.getToken(ByteBufferUtil.bytes(""key1""))));"
42798,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/BulkLoaderTest.java,57,,"                                                 OfflineToolUtils.sstableDirName(""legacy_sstables"", ""legacy_ma_simple""));"
42799,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/BulkLoaderTest.java,57,,"                                                 OfflineToolUtils.sstableDirName(""legacy_sstables"", ""legacy_ma_simple""));"
42800,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/GenerateTokensTest.java,39,,"                GenerateTokens.main(new String[]{""-n"", ""15"", ""-t"", String.valueOf(numTokens), ""--rf"", String.valueOf(rf)});"
42801,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/GenerateTokensTest.java,42,,"                GenerateTokens.main(new String[]{""-n"", ""15"", ""-t"", String.valueOf(numTokens), ""--rf"", String.valueOf(rf), ""--racks"", ""15""});"
42802,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableExportTest.java,82,,"        ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, ""--debugwrong"", findOneSSTable(""legacy_sstables"", ""legacy_ma_simple""));"
42803,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableExportTest.java,82,,"        ToolResult tool = ToolRunner.invokeClass(SSTableExport.class, ""--debugwrong"", findOneSSTable(""legacy_sstables"", ""legacy_ma_simple""));"
42804,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableMetadataViewerTest.java,99,,"        ToolResult tool = ToolRunner.invokeClass(SSTableMetadataViewer.class, ""mockFile"");"
42805,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableMetadataViewerTest.java,113,,"        Assertions.assertThat(tool.getStdout()).contains(sstable.replaceAll(""-Data\\.db$"", """"));"
42806,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableMetadataViewerTest.java,129,,"                  assertTrue(""Arg: ["" + arg + ""]\n"" + tool.getStderr(), tool.getStderr().isEmpty());"
42807,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableRepairedAtSetterTest.java,72,,"                                                       findOneSSTable(""legacy_sstables"", ""legacy_ma_simple""));"
42808,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/SSTableRepairedAtSetterTest.java,72,,"                                                       findOneSSTable(""legacy_sstables"", ""legacy_ma_simple""));"
42809,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSSTableUtilTest.java,43,,"        assertThat(tool.getStdout(), CoreMatchers.containsStringIgnoringCase(""usage:""));"
42810,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSSTableUtilTest.java,57,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneSSTableUtil.class, ""--debugwrong"", ""system_schema"", ""tables"");"
42811,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSSTableUtilTest.java,57,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneSSTableUtil.class, ""--debugwrong"", ""system_schema"", ""tables"");"
42812,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSSTableUtilTest.java,101,,"            Assertions.assertThat(tool.getStdout()).as(""Arg: [%s]"", arg).isEqualTo(""Listing files...\n"");"
42813,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSSTableUtilTest.java,116,,"            assertThat(""Arg: ["" + arg + ""]"", tool.getStdout(), CoreMatchers.containsStringIgnoringCase(""Cleaning up...""));"
42814,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSSTableUtilTest.java,138,,"        Arrays.asList(""-t"", ""--type"").forEach(arg -> {"
42815,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneScrubberTest.java,50,,"        assertThat(tool.getStdout(), CoreMatchers.containsStringIgnoringCase(""usage:""));"
42816,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneScrubberTest.java,98,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneScrubber.class, ""--debugwrong"", ""system_schema"", ""tables"");"
42817,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneScrubberTest.java,98,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneScrubber.class, ""--debugwrong"", ""system_schema"", ""tables"");"
42818,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneScrubberTest.java,133,,"                  assertThat(""Arg: ["" + arg + ""]"", tool.getStdout(), CoreMatchers.containsStringIgnoringCase(""Pre-scrub sstables snapshotted into snapshot""));"
42819,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneScrubberTest.java,157,,"                      Pair.of(""--header-fix"", """"),"
42820,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSplitterTest.java,88,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneSplitter.class, ""--debugwrong"", ""mockFile"");"
42821,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSplitterTest.java,109,,"            assertThat(""Arg: ["" + arg + ""]"", tool.getStdout(), CoreMatchers.containsStringIgnoringCase(""Skipping inexisting file mockFile""));"
42822,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneSplitterTest.java,119,,"        Arrays.asList(Pair.of(""-s"", """"), Pair.of(""-s"", ""w""), Pair.of(""--size"", """"), Pair.of(""--size"", ""w""))"
42823,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneUpgraderOnSStablesTest.java,77,,"        List<String> origFiles = getSStableFiles(""legacy_tables"", ""legacy_"" + legacyId + ""_simple"");"
42824,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneUpgraderOnSStablesTest.java,77,,"        List<String> origFiles = getSStableFiles(""legacy_tables"", ""legacy_"" + legacyId + ""_simple"");"
42825,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneUpgraderOnSStablesTest.java,77,,"        List<String> origFiles = getSStableFiles(""legacy_tables"", ""legacy_"" + legacyId + ""_simple"");"
42826,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneUpgraderTest.java,102,,"            Assertions.assertThat(tool.getStdout()).as(""Arg: [%s]"", arg).isEqualTo(""Found 0 sstables that need upgrading.\n"");"
42827,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneVerifierTest.java,78,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneVerifier.class, ""--debugwrong"", ""system_schema"", ""tables"");"
42828,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/StandaloneVerifierTest.java,78,,"        ToolResult tool = ToolRunner.invokeClass(StandaloneVerifier.class, ""--debugwrong"", ""system_schema"", ""tables"");"
42829,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/cassandrastress/CassandrastressTest.java,64,,"        invokeAndAssertCleanExit(baseArgs, ""-node"", ip);"
42830,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/ClearSnapshotTest.java,58,,"        ToolRunner.ToolResult tool = ToolRunner.invokeNodetool(""clearsnapshot"");"
42831,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/ClearSnapshotTest.java,69,,"        ToolRunner.ToolResult tool = ToolRunner.invokeNodetool(""clearsnapshot"", ""-t"", ""some-name"", ""--all"");"
42832,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/RingTest.java,57,,"        validateRingOutput(host.ipOrDns(false), ""ring"");"
42833,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/StatusTest.java,61,,"                            ""status"");"
42834,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/TableStatsTest.java,53,,"        ToolRunner.ToolResult tool = ToolRunner.invokeNodetool(""help"", ""tablestats"");"
42835,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/TableStatsTest.java,141,,"        assertThat(StringUtils.countMatches(tool.getStdout(), ""Table:"")).isGreaterThan(1);"
42836,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/TpStatsTest.java,62,,"        ToolRunner.ToolResult tool = ToolRunner.invokeNodetool(""help"", ""tpstats"");"
42837,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/StatsTableComparatorTest.java,108,,"                       ""table1 > table2 > table3 > table4 > table5 > table6"","
42838,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,35,,"        ""\tTable: %s\n"" +"
42839,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,37,,"        ""\tOld SSTable count: 0\n"" +"
42840,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,52,,"        ""\tBytes repaired: 0.000KiB\n"" +"
42841,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,53,,"        ""\tBytes unrepaired: 0.000KiB\n"" +"
42842,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,54,,"        ""\tBytes pending repair: 0.000KiB\n"" +"
42843,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,260,,"        ""----------------\n"" +"
42844,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsPrinterTest.java,350,,"        StatsHolder holder = new TestTableStatsHolder(testKeyspaces, ""reads"", 0);"
42845,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsTestBase.java,109,,"        StatsTable table1 = createStatsTableTemplate(""keyspace1"", ""table1"");"
42846,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsTestBase.java,112,,"        StatsTable table4 = createStatsTableTemplate(""keyspace2"", ""table4"");"
42847,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tools/nodetool/stats/TableStatsTestBase.java,114,,"        StatsTable table6 = createStatsTableTemplate(""keyspace3"", ""table6"");"
42848,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tracing/TracingTest.java,52,,"        TraceState state = tracing.begin(""test-request"", Collections.<String,String>emptyMap());"
42849,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tracing/TracingTest.java,53,,"        state.trace(""test-1"");"
42850,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tracing/TracingTest.java,54,,"        state.trace(""test-2"");"
42851,./TargetProjects/cassandra/test/unit/org/apache/cassandra/tracing/TracingTest.java,55,,"        state.trace(""test-3"");"
42852,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,107,,"        executeAs(Collections.emptyList(), ""testuser"", ""wrongpassword"", AuditLogEntryType.LOGIN_ERROR);"
42853,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,113,,"        executeAs(Collections.emptyList(), ""wronguser"", ""foo"", AuditLogEntryType.LOGIN_ERROR);"
42854,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,136,,"        assertEquals(""testuser"", m.get(""user""));"
42855,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,137,,"        assertEquals(""SELECT * FROM testks.table1"", m.get(""operation""));"
42856,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,138,,"        assertEquals(""testks"", m.get(""keyspace""));"
42857,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,138,,"        assertEquals(""testks"", m.get(""keyspace""));"
42858,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,139,,"        assertEquals(""table1"", m.get(""scope""));"
42859,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/CQLUserAuditTest.java,139,,"        assertEquals(""table1"", m.get(""scope""));"
42860,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/MessagePayloadTest.java,150,,"                reqMap = Collections.singletonMap(""foo"", bytes(42));"
42861,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/MessagePayloadTest.java,151,,"                responsePayload = respMap = Collections.singletonMap(""bar"", bytes(42));"
42862,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/ProtocolErrorTest.java,73,,"            Assert.fail(""Expected protocol error"");"
42863,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/SerDeserTest.java,85,,"        s.addAll(Arrays.asList(""bar"", ""foo"", ""zee""));"
42864,./TargetProjects/cassandra/test/unit/org/apache/cassandra/transport/SerDeserTest.java,85,,"        s.addAll(Arrays.asList(""bar"", ""foo"", ""zee""));"
42865,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggerExecutorTest.java,56,,"        TableMetadata metadata = makeTableMetadata(""ks1"", ""cf1"", TriggerMetadata.create(""test"", SameKeySameCfTrigger.class.getName()));"
42866,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggerExecutorTest.java,56,,"        TableMetadata metadata = makeTableMetadata(""ks1"", ""cf1"", TriggerMetadata.create(""test"", SameKeySameCfTrigger.class.getName()));"
42867,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggerExecutorTest.java,56,,"        TableMetadata metadata = makeTableMetadata(""ks1"", ""cf1"", TriggerMetadata.create(""test"", SameKeySameCfTrigger.class.getName()));"
42868,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggerExecutorTest.java,79,,"        assertEquals(bytes(""trigger""), cells.get(1).value());"
42869,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggerExecutorTest.java,108,,"        PartitionUpdate cf1 = makeCf(metadata, ""k1"", ""k1v1"", null);"
42870,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggerExecutorTest.java,109,,"        PartitionUpdate cf2 = makeCf(metadata, ""k2"", ""k2v1"", null);"
42871,./TargetProjects/cassandra/test/unit/org/apache/cassandra/triggers/TriggersSchemaTest.java,55,,"            CreateTableStatement.parse(String.format(""CREATE TABLE %s (k int PRIMARY KEY, v int)"", cfName), ksName)"
42872,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/AbstractIteratorTest.java,237,,"            Assert.fail(""No exception thrown"");"
42873,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/AbstractTypeGenerators.java,261,,"        @SuppressWarnings(""unchecked"")"
42874,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/ByteArrayUtilTest.java,48,,"                          .as(""get(put(b)) == b"")"
42875,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/CassandraVersionTest.java,138,,"        version = new CassandraVersion(""1.2.3"");"
42876,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/CassandraVersionTest.java,197,,"        v1 = new CassandraVersion(""4.0.0"");"
42877,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/CassandraVersionTest.java,202,,"        v1 = new CassandraVersion(""1.2.3-SNAPSHOT"");"
42878,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/CassandraVersionTest.java,242,,"        v1 = new CassandraVersion(""4.0"");"
42879,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/CassandraVersionTest.java,269,,"        assertEquals(new CassandraVersion(""3.0""), new CassandraVersion(""3.0.0""));"
42880,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/CassandraVersionTest.java,269,,"        assertEquals(new CassandraVersion(""3.0""), new CassandraVersion(""3.0.0""));"
42881,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/JVMStabilityInspectorTest.java,64,,"            JVMStabilityInspector.inspectThrowable(new FSReadError(new IOException(), ""blah""));"
42882,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/MergeIteratorComparisonTest.java,184,,"                return ""longish_prefix_"" + r.nextInt(5 * LIST_LENGTH);"
42883,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/MerkleTreeTest.java,701,,"        trees.tree1.get(longToken(1)).addHash(digest(""diff_1""), 1);"
42884,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/MerkleTreeTest.java,720,,"        trees.tree2.get(longToken(16)).addHash(digest(""diff_16""), 1);"
42885,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/binlog/BinLogTest.java,135,,"                return ""test"";"
42886,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/binlog/ExternalArchiverTest.java,51,,"        File logfileToArchive = Files.createTempFile(logdirectory, ""logfile"", ""xyz"").toFile();"
42887,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/binlog/ExternalArchiverTest.java,52,,"        Files.write(logfileToArchive.toPath(), ""content"".getBytes());"
42888,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/binlog/ExternalArchiverTest.java,54,,"        ExternalArchiver ea = new ExternalArchiver(script+"" %path"", null, 10);"
42889,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/binlog/ExternalArchiverTest.java,75,,"        Path dir = Files.createTempDirectory(""archive"");"
42890,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/btree/BTreeRemovalTest.java,195,,"                assertTrue(""size "" + size, BTree.isWellFormed(result, CMP));"
42891,./TargetProjects/cassandra/test/unit/org/apache/cassandra/utils/concurrent/RefCountedTest.java,155,,"        System.out.println(""LinkedList visited "" + visitor.lastVisitedCount + "" iterations "" + visitor.iterations);"
42892,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,170,,"        File queryDir = Files.createTempDirectory(""queries"").toFile();"
42893,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,174,,"        FQLQuery query = new FQLQuery.Single(""abc"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 12345, 11111, 22, ""select * from abc"", Collections.emptyList());"
42894,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,258,,"            assertTrue(rc.compareRows(Lists.newArrayList(""eq1"", ""eq2""), null, rows));"
42895,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,258,,"            assertTrue(rc.compareRows(Lists.newArrayList(""eq1"", ""eq2""), null, rows));"
42896,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,323,,"        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");"
42897,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,323,,"        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");"
42898,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,323,,"        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");"
42899,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,324,,"        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();"
42900,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,463,,"        FQLQuery q1 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.emptyList());"
42901,./TargetProjects/cassandra/tools/fqltool/test/unit/org/apache/cassandra/fqltool/FQLReplayTest.java,555,,"        pth = fromString(""127.0.0.1"");"
42902,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/StressProfile.java,108,,"            columnConfigs.forEach((k, v) -> out.printf(""    %s: %s%n"", k, v.getConfigAsString()));"
42903,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/StressProfile.java,496,,"        selectchance = select(settings.insert.selectRatio, ""select"", ""fixed(1)/1"", insert, OptionRatioDistribution.BUILDER);"
42904,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/report/TimingInterval.java,154,,"            case OPRATE:         return String.format(""%,.0f"", opRate());"
42905,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/report/TimingInterval.java,158,,"            case MEANLATENCY:    return String.format(""%,.1f"", meanLatencyMs());"
42906,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/Legacy.java,110,,"                r.add(""command"", ""tries="" + cmd.getOptionValue(""K""));"
42907,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/Legacy.java,141,,"                    r.add(""-key"", ""populate=1.."" + uniqueKeys);"
42908,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/Legacy.java,168,,"            r.add(""-col"", ""n=fixed("" + colCount + "")"");"
42909,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/Legacy.java,197,,"                r.add(""-log"", ""file="" + cmd.getOptionValue(""f""));"
42910,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/Legacy.java,208,,"                r.add(""-schema"", ""index="" + cmd.getOptionValue(""x""));"
42911,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/Legacy.java,252,,"                r.add(""-transport"", ""truststore="" + cmd.getOptionValue(SSL_TRUSTSTORE));"
42912,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/OptionDistribution.java,164,,"        lookup.put(""gaussian"", new GaussianImpl());"
42913,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/OptionDistribution.java,208,,"                String[] bounds = params.get(0).split(""\\.\\.+"");"
42914,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/OptionDistribution.java,228,,"                throw new IllegalArgumentException(""Invalid parameter list for uniform distribution: "" + params);"
42915,./TargetProjects/cassandra/tools/stress/src/org/apache/cassandra/stress/settings/SettingsMode.java,139,,"        final OptionSimple port = new OptionSimple(""port="", ""[0-9]+"", ""9046"", """", false);"
42916,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/resources/DiffJobsResource.java,97,,"    public Response getJob(@PathParam(""jobid"") final String jobId) {"
42917,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,79,,"            "" SELECT "" +"
42918,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,80,,"            ""   job_id,"" +"
42919,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,109,,"            ""   qualified_table_name,""   +"
42920,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,112,,"            "" WHERE job_id = ? AND bucket = ?"", diffKeyspace));"
42921,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,146,,"            ""   job_id"" +"
42922,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,169,,"        rs.forEach(row -> jobs.add(row.getUUID(""job_id"")));"
42923,./TargetProjects/cassandra-diff/api-server/src/main/java/org/apache/cassandra/diff/api/services/DBService.java,209,,"        processFutures(futures, row -> completedByTable.merge(row.getString(""qualified_table_name""),"
42924,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,106,,"                updateStmt = session.prepare(String.format(""INSERT INTO %s.%s ("" +"
42925,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,107,,"                                                           "" job_id,"" +"
42926,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,108,,"                                                           "" bucket,"" +"
42927,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,109,,"                                                           "" qualified_table_name,"" +"
42928,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,496,,"        private static final String TASK_STATUS_SCHEMA = ""CREATE TABLE IF NOT EXISTS %s.%s ("" +"
42929,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,497,,"                                                         "" job_id uuid,"" +"
42930,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,498,,"                                                         "" bucket int,"" +"
42931,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,499,,"                                                         "" qualified_table_name text,"" +"
42932,./TargetProjects/cassandra-diff/spark-job/src/main/java/org/apache/cassandra/diff/JobMetadataDb.java,512,,"                                                         "" WITH default_time_to_live = %s"";"
42933,./TargetProjects/cassandra-diff/spark-job/src/test/java/org/apache/cassandra/diff/ComparisonExecutorTest.java,103,,"        Gauge availableSlots = metrics.getGauges().get(""AvailableSlots"");"
42934,./TargetProjects/cassandra-diff/spark-job/src/test/java/org/apache/cassandra/diff/PartitionComparatorTest.java,43,,"        TableSpec t = spec(""table1"", names(""c1"", ""c2""), names(""v1"", ""v2""));"
42935,./TargetProjects/cassandra-diff/spark-job/src/test/java/org/apache/cassandra/diff/RangeComparatorTest.java,198,,"        RuntimeException toThrow = new RuntimeException(""Test"");"
42936,./TargetProjects/cassandra-in-jvm-dtest-api/src/main/java/org/apache/cassandra/distributed/api/ICluster.java,84,,"        System.setProperty(""cassandra.disable_tcactive_openssl"", ""true"");"
42937,./TargetProjects/cassandra-in-jvm-dtest-api/src/main/java/org/apache/cassandra/distributed/api/NodeToolResult.java,124,,"            AssertUtils.assertNotNull(""notifications not defined"", notifications);"
42938,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/BuilderTest.java,63,,"               .withRack(""dc1"", ""rack1"", 5)"
42939,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/BuilderTest.java,63,,"               .withRack(""dc1"", ""rack1"", 5)"
42940,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/LogActionTest.java,41,,"        Assertions.assertThatThrownBy(() -> logs.watchFor(duration, ""^ERROR""))"
42941,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/LogActionTest.java,50,,"        LogAction logs = mockLogAction(fn -> lineIterator(fn, ""a"", ""b"", ""ERROR match"", ""d""));"
42942,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/LogActionTest.java,102,,"        LogAction logs = mockLogAction(fn -> lineIterator(fn, ""INFO a"", ""INFO b"", ""ERROR match"", ""INFO d""));"
42943,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/LogActionTest.java,102,,"        LogAction logs = mockLogAction(fn -> lineIterator(fn, ""INFO a"", ""INFO b"", ""ERROR match"", ""INFO d""));"
42944,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/LogActionTest.java,113,,"                ""\t\tat class.method(42)"","
42945,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,61,,"        String[] names = { ""fname"", ""lname""};"
42946,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,61,,"        String[] names = { ""fname"", ""lname""};"
42947,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,62,,"        Object[][] rows = { new Object[] { ""david"", ""capwell""} };"
42948,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,62,,"        Object[][] rows = { new Object[] { ""david"", ""capwell""} };"
42949,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,63,,"        SimpleQueryResult result = new SimpleQueryResult(names, rows, Collections.singletonList(""test warning""));"
42950,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,101,,"                new Object[] { ""alex"", ""petrov""},"
42951,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,101,,"                new Object[] { ""alex"", ""petrov""},"
42952,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,102,,"                new Object[] { ""dinesh"", ""joshi""},"
42953,./TargetProjects/cassandra-in-jvm-dtest-api/src/test/java/org/apache/cassandra/distributed/api/QueryResultTest.java,102,,"                new Object[] { ""dinesh"", ""joshi""},"
42954,./TargetProjects/cayenne/build-tools/cayenne-test-utilities/src/main/java/org/apache/cayenne/test/jdbc/DBHelper.java,62,,"		StringBuilder sql = new StringBuilder(""select "");"
42955,./TargetProjects/cayenne/build-tools/cayenne-test-utilities/src/main/java/org/apache/cayenne/test/jdbc/DBHelper.java,67,,"		sql.append("" from "").append(quote(table));"
42956,./TargetProjects/cayenne/cayenne-ant/src/test/java/org/apache/cayenne/tools/CayenneGeneratorTaskTest.java,92,,"		File a = new File(mapDir, convertPath(""org/apache/cayenne/testdo/testmap/Artist.java""));"
42957,./TargetProjects/cayenne/cayenne-ant/src/test/java/org/apache/cayenne/tools/CayenneGeneratorTaskTest.java,94,,"		assertContents(a, ""Artist"", ""org.apache.cayenne.testdo.testmap"", ""CayenneDataObject"");"
42958,./TargetProjects/cayenne/cayenne-ant/src/test/java/org/apache/cayenne/tools/CayenneGeneratorTaskTest.java,94,,"		assertContents(a, ""Artist"", ""org.apache.cayenne.testdo.testmap"", ""CayenneDataObject"");"
42959,./TargetProjects/cayenne/cayenne-ant/src/test/java/org/apache/cayenne/tools/CayenneGeneratorTaskTest.java,119,,"		assertContents(a, ""Artist"", ""org.apache.cayenne.testdo.testmap"", ""BaseDataObject"");"
42960,./TargetProjects/cayenne/cayenne-ant/src/test/java/org/apache/cayenne/tools/CayenneGeneratorTaskTest.java,175,,"		assertContents(a, ""Artist"", ""org.apache.cayenne.testdo.testmap"", ""_Artist"");"
42961,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/CgenConfigurationTest.java,55,,"            configuration.setRootPath(Paths.get(""C:\\test1\\test2\\test3""));"
42962,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/CgenConfigurationTest.java,106,,"            Path relPath = Paths.get(""E:\\"");"
42963,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/CgenConfigurationTest.java,170,,"            configuration.setRootPath(Paths.get(""/test1/test2/test3""));"
42964,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ClassGenerationActionTest.java,71,,"		ObjEntity testEntity1 = new ObjEntity(""TE1"");"
42965,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ClassGenerationActionTest.java,72,,"		testEntity1.setClassName(""org.example.TestClass1"");"
42966,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ClassGenerationActionTest.java,296,,"		testEntity1.setClassName(""TestClass1"");"
42967,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ClientSuperClassGenerationTest.java,39,,"        ObjEntity objEntity = new ObjEntity(""TEST1"");"
42968,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/DataMapUtilsTest.java,63,,"        selectQueryDescriptor.setName(""name"");"
42969,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ImportUtilsTest.java,88,,"                ""<"" + generatedStatements + ""> contains <"" + type + "">"","
42970,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ImportUtilsTest.java,95,,"        final String baseType = ""myType"";"
42971,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ImportUtilsTest.java,96,,"        final String reservedType = ""org.myPackage."" + baseType;"
42972,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ImportUtilsTest.java,97,,"        final String nonReservedType = ""org.myPackage2."" + baseType;"
42973,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/ImportUtilsTest.java,212,,"        assertEquals(""a.b.C"", importUtils.formatJavaType(""a.b.C"", true));"
42974,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/PropertyUtilsTest.java,81,,"        attribute.setName(""test"");"
42975,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/PropertyUtilsTest.java,97,,"        String typeName = ""org.example.model.TargetEntity"";"
42976,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/PropertyUtilsTest.java,100,,"        when(entity.getName()).thenReturn(""target"");"
42977,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/PropertyUtilsTest.java,194,,"        embeddedAttribute.addAttributeOverride(""testEmbAttr"", ""testPath"");"
42978,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/SingleClassGenerationTest.java,39,,"        ObjEntity objEntity = new ObjEntity(""TEST1"");"
42979,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/SingleClassGenerationTest.java,51,,"        assertFalse(res.contains(""org.apache.cayenne.exp.property.NumericProperty""));"
42980,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/SingleClassGenerationTest.java,52,,"        assertFalse(res.contains(""org.apache.cayenne.exp.property.EntityProperty""));"
42981,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/StringUtilsTest.java,103,,"        assertEquals(""List"", stringUtils.stripGeneric(""List""));"
42982,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/StringUtilsTest.java,115,,"        assertEquals(null, stringUtils.replaceWildcardInStringWithString(""*"", null, ""Entity""));"
42983,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/SuperClassGenerationTest.java,41,,"        ObjEntity objEntity = new ObjEntity(""TEST1"");"
42984,./TargetProjects/cayenne/cayenne-cgen/src/test/java/org/apache/cayenne/gen/xml/CgenSaverDelegateTest.java,40,,"        URL baseURL = Paths.get(""/tmp/src/main/resources"").toUri().toURL();"
42985,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextClientChannelEventsIT.java,65,,"        tMtTable1.setColumns(""TABLE1_ID"", ""GLOBAL_ATTRIBUTE1"", ""SERVER_ATTRIBUTE1"");"
42986,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextClientChannelEventsIT.java,171,,"                new ObjectIdQuery(ObjectId.of(""MtTable1"", ""TABLE1_ID"", 1)));"
42987,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextIT.java,134,,"		final Object newObjectId = ObjectId.of(""test"", ""key"", ""generated"");"
42988,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextIT.java,134,,"		final Object newObjectId = ObjectId.of(""test"", ""key"", ""generated"");"
42989,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextIT.java,157,,"		ObjEntity entity = new ObjEntity(""test_entity"");"
42990,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextInheritanceIT.java,67,,"        object.setGlobalAttribute1(""sub1"");"
42991,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextInheritanceIT.java,68,,"        object.setServerAttribute1(""sa1"");"
42992,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextMergeHandlerIT.java,85,,"        handler.nodePropertyChanged(o1.getObjectId(), ClientMtTable1.GLOBAL_ATTRIBUTE1.getName(), ""abc"", ""xyz"");"
42993,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextPrimitiveIT.java,61,,"        tTablePrimitives.setColumns(""ID"", ""BOOLEAN_COLUMN"", ""INT_COLUMN"").setColumnTypes("
42994,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/CayenneContextPrimitiveIT.java,61,,"        tTablePrimitives.setColumns(""ID"", ""BOOLEAN_COLUMN"", ""INT_COLUMN"").setColumnTypes("
42995,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/NestedCayenneContextIT.java,308,,"		childNew.setGlobalAttribute1(""NNN"");"
42996,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/NestedCayenneContextIT.java,311,,"		childModified.setGlobalAttribute1(""MMM"");"
42997,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/NestedCayenneContextIT.java,562,,"		childMt.setGlobalAttribute1(""1183"");"
42998,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/cay_2641/Cay2641IT.java,49,,"        artistLazy.setName(""Test"");"
42999,./TargetProjects/cayenne/cayenne-client/src/test/java/org/apache/cayenne/cay_2641/Cay2641IT.java,66,,"        assertTrue(artists.get(0).readPropertyDirectly(""name"") instanceof Fault);"
