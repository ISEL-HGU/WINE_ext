Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"LOG.warn(""Error finding subscription for: "" + consumerInfo + "": "" + e.getMessage(), false, e);","LOG.warn(""Error finding subscription for: "" + consumerInfo + "": ""+ e.getMessage(),false,e);
",0,1798,9,3244,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
2,"LOG.debug(""Received {} message : {} from {}"", new Object[] {j++, message, queue.getQueueName()});","LOG.debug(""Received {} message : {} from {}"",new Object[]{j++,message,queue.getQueueName()});
",0,433,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
3,"LOG.info(""Cannot find file "" + Constants.AVRO_FULL_PATH, e.getMessage(), e);","LOG.info(""Cannot find file "" + Constants.AVRO_FULL_PATH,e.getMessage(),e);
",0,2,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
4,"logger.debug(""Registering subscriber: id={} upstreamId={} streamLogicalName={} windowId={} mask={} partitions={} server={}"", new Object[] {context.getSinkId(), context.getSourceId(), context.getId(), Codec.getStringWindowId(context.getFinishedWindowId()), context.getPartitionMask(), context.getPartitions(), context.getBufferServerAddress()});","logger.debug(""Registering subscriber: id={} upstreamId={} streamLogicalName={} windowId={} mask={} partitions={} server={}"",new Object[]{context.getSinkId(),context.getSourceId(),context.getId(),Codec.getStringWindowId(context.getFinishedWindowId()),context.getPartitionMask(),context.getPartitions(),context.getBufferServerAddress()});
",0,147,21,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
5,"LOG.debug(""reconnect XAResource with: "" + this.getInfo(), existingConnection == null ? """" : existingConnection.getFirstFailureError());","LOG.debug(""reconnect XAResource with: "" + this.getInfo(),existingConnection == null ? """" : existingConnection.getFirstFailureError());
",0,22,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
6,"LOG.error(""got event: "" + event + "", ex:"" + event.getThrowableInformation().getThrowable(), event.getThrowableInformation().getThrowable());","LOG.error(""got event: "" + event + "", ex:""+ event.getThrowableInformation().getThrowable(),event.getThrowableInformation().getThrowable());
",0,5,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
7,"LOGGER.error(""Original error "" + request.getAttribute(SlingConstants.ERROR_EXCEPTION_TYPE),","LOGGER.error(""Original error "" + request.getAttribute(SlingConstants.ERROR_EXCEPTION_TYPE),(Throwable)request.getAttribute(SlingConstants.ERROR_EXCEPTION));
",0,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
8,"LOG.info(""Getting schema for {}. Gap: {} HighWaterMark: {}"", this.topicName, this.lowWatermark.getGap(this.highWatermark));","LOG.info(""Getting schema for {}. Gap: {} HighWaterMark: {}"",this.topicName,this.lowWatermark.getGap(this.highWatermark));
",0,4,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
9,"LOG.debug(""{}: Resolving arguments for {}: {}"", new Object[] { this, effector.getName(), Iterables.toString(args.keySet()) });","LOG.debug(""{}: Resolving arguments for {}: {}"",new Object[]{this,effector.getName(),Iterables.toString(args.keySet())});
",0,2,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
10,"LOG.debug(""Going to execute query <"" + s.replaceAll(""\\?"", ""{}"") + "">"", quoteString(names[0]),","LOG.debug(""Going to execute query <"" + s.replaceAll(""\\?"",""{}"") + "">"",quoteString(names[0]),quoteString(names[1]));
",0,22,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
11,"logger.info(""\treading file split {}"", split.getPath().getName() + "" ({}"", split.getStart() + ""..."" + (split.getStart() + split.getLength()), ""{} {} bytes)"");","logger.info(""\treading file split {}"",split.getPath().getName() + "" ({}"",split.getStart() + ""..."" + (split.getStart() + split.getLength()),""{} {} bytes)"");
",0,6,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
12,"logBookieUnavailable(() -> LOG.error(""Could not connect to bookie: {}/{}, current state {} : "",","logBookieUnavailable(() -> LOG.error(""Could not connect to bookie: {}/{}, current state {} : "",future.channel(),bookieId,state,future.cause()));
",0,0,4,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
13,"LOG.trace(""Schedule count dropping to zero"", lastExceptionUpdater.get(this));","LOG.trace(""Schedule count dropping to zero"",lastExceptionUpdater.get(this));
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
14,"LOG.error(""Invalid state transition from {} to {} "", this.state, toState, getStack());","LOG.error(""Invalid state transition from {} to {} "",this.state,toState,getStack());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
15,"log.debug(""Management plane ID at {} {} changed from {} to {} (can happen on concurrent startup of multiple nodes)"", new Object[] {getManagementNodeId(), getHighAvailabilityManager().getNodeState(), managementPlaneId, newPlaneId, new RuntimeException(""Stack trace for setManagementPlaneId"")});","log.debug(""Management plane ID at {} {} changed from {} to {} (can happen on concurrent startup of multiple nodes)"",new Object[]{getManagementNodeId(),getHighAvailabilityManager().getNodeState(),managementPlaneId,newPlaneId,new RuntimeException(""Stack trace for setManagementPlaneId"")});
",0,2,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
16,"LOG.info(""Deleting {} orphaned polic{} (of {}): {}"", new Object[] {policiesToDelete.size(), (policiesToDelete.size() == 1 ? ""y"" : ""ies""), input.getPolicies().size(), policiesToDelete});","LOG.info(""Deleting {} orphaned polic{} (of {}): {}"",new Object[]{policiesToDelete.size(),(policiesToDelete.size() == 1 ? ""y"" : ""ies""),input.getPolicies().size(),policiesToDelete});
",0,3,16,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
17,"LOG.debug(""{} attempting transformations, triggered by location-added {}, to {}"", new Object[] {AbstractOnNetworkEnricher.this, event.getValue(), entity});","LOG.debug(""{} attempting transformations, triggered by location-added {}, to {}"",new Object[]{AbstractOnNetworkEnricher.this,event.getValue(),entity});
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ThisExpression-qualifier, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
18,"LOG.debug(""{} starting (members={})"", new Object[]{this, getParent().sensors().get(AbstractGroup.GROUP_MEMBERS)});","LOG.debug(""{} starting (members={})"",new Object[]{this,getParent().sensors().get(AbstractGroup.GROUP_MEMBERS)});
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
19,"if (LOG.isTraceEnabled()) LOG.trace(""{} when resizing back pool {} from {}, tweaking from {} to prevent thrashing"", new Object[] {this, poolEntity, data.currentSize, desiredSize });","if (LOG.isTraceEnabled()) LOG.trace(""{} when resizing back pool {} from {}, tweaking from {} to prevent thrashing"",new Object[]{this,poolEntity,data.currentSize,desiredSize});
",0,0,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
20,"if (LOG.isTraceEnabled()) LOG.trace(""Unable to install manifest from ""+url+"": ""+installResult.getError(), installResult.getError());","if (LOG.isTraceEnabled()) LOG.trace(""Unable to install manifest from "" + url + "": ""+ installResult.getError(),installResult.getError());
",0,0,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
21,"LOGGER.warn(requireNonNull(message, ""message""), args);","LOGGER.warn(requireNonNull(message,""message""),args);
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
22,"LOG.error(String.format(""Service %s has failed."", service.getClass().getSimpleName()), service.failureCause());","LOG.error(String.format(""Service %s has failed."",service.getClass().getSimpleName()),service.failureCause());
",0,5,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
23,"LOG.error(format(""Error creating node '%s'"", node), result.getException());","LOG.error(format(""Error creating node '%s'"",node),result.getException());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
24,"logger.trace(""Node {} phi {} > {}; intervals: {} mean: {}ns"", new Object[]{ep, PHI_FACTOR * phi, getPhiConvictThreshold(), hbWnd, hbWnd.mean()});","logger.trace(""Node {} phi {} > {}; intervals: {} mean: {}ns"",new Object[]{ep,PHI_FACTOR * phi,getPhiConvictThreshold(),hbWnd,hbWnd.mean()});
",0,0,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
25,"logger.warn(message + sql, new CayenneRuntimeException(message + ""%s"", sql));","logger.warn(message + sql,new CayenneRuntimeException(message + ""%s"",sql));
",0,11,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
26,"logger.error(""Name resolution failed"", ((Addr.Failed) addr).cause());","logger.error(""Name resolution failed"",((Addr.Failed)addr).cause());
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
27,"logger.warn(""Ignoring column that is unsupported."", UserException","logger.warn(""Ignoring column that is unsupported."",UserException.unsupportedError().message(""A column you queried has a data type that is not currently supported by the JDBC storage plugin. "" + ""The column's name was %s and its JDBC data type was %s. "",name,nameFromType(jdbcType)).addContext(""Sql"",sql).addContext(""Column Name"",name).addContext(errorContext).build(logger));
",0,0,4,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
28,"logger.warn(""Ignoring column that is unsupported."", UserException","logger.warn(""Ignoring column that is unsupported."",UserException.unsupportedError().message(""A column you queried has a data type that is not currently supported by the Kudu storage plugin. "" + ""The column's name was %s and its Kudu data type was %s. "",name,kuduType.toString()).addContext(""column Name"",name).addContext(""plugin"",""kudu"").build(logger));
",0,0,4,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
29,"LOG.warn(getName() + "" : "" + e.getMessage(), e);","LOG.warn(getName() + "" : "" + e.getMessage(),e);
",0,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
30,"LOG.error(""{} Persistent bean isn't extended by {} ."", new Object[]{this.persistentClass, PersistentBase.class});","LOG.error(""{} Persistent bean isn't extended by {} ."",new Object[]{this.persistentClass,PersistentBase.class});
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
31,"LOG.info(""Provisioned node {} of {} with name {}"", new Object[]{i + 1, numServers, serverName + i});","LOG.info(""Provisioned node {} of {} with name {}"",new Object[]{i + 1,numServers,serverName + i});
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
32,"LOGGER.info(""Framework message received: "", new String(data, Charset.defaultCharset()));","LOGGER.info(""Framework message received: "",new String(data,Charset.defaultCharset()));
",0,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
33,"_log.error(""Callback error: "" + callbacks.get(i) + "" on "" + listener + "":"" + cr.getError(), cr.getError());","_log.error(""Callback error: "" + callbacks.get(i) + "" on ""+ listener+ "":""+ cr.getError(),cr.getError());
",0,1,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
34,"LOG.info(""Going to execute insert <"" + s.replaceAll(""\\?"", ""{}"") + "">"", nextNLId","LOG.info(""Going to execute insert <"" + s.replaceAll(""\\?"",""{}"") + "">"",nextNLId,acidWriteEvent.getTxnId(),acidWriteEvent.getWriteId(),quoteString(dbName),quoteString(tblName),quoteString(partition),quoteString(tableObj),quoteString(partitionObj),quoteString(files),currentTime);
",0,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
35,"LOG.debug(""==> setupSampleData: "", AtlasEntity.dumpObjects(hrDept.getEntities(), null).toString());","LOG.debug(""==> setupSampleData: "",AtlasEntity.dumpObjects(hrDept.getEntities(),null).toString());
",0,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
36,"LOG.trace(""removeToken: tokenIdentifier = {}, removed = "", tokenIdentifier, (tokenInfo != null));","LOG.trace(""removeToken: tokenIdentifier = {}, removed = "",tokenIdentifier,(tokenInfo != null));
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
37,"if (val != null) log.debug(""{} finished waiting for start-latch; continuing..."", entity(), val);","if (val != null) log.debug(""{} finished waiting for start-latch; continuing..."",entity(),val);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
38,"LOG.debug(""After conversion: {}"" + constructorParams[i]);","LOG.debug(""After conversion: {}"" + constructorParams[i]);
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
39,"logger.warn(sBuilder.append(""Thread {} has been interrupted 3."")","logger.warn(sBuilder.append(""Thread {} has been interrupted 3."").append(Thread.currentThread().getName()).toString());
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
40,"logger.debug(message + "" - "" + duration + ""ms"", data);","logger.debug(message + "" - "" + duration+ ""ms"",data);
",0,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
41,"LOG.error(""finalizing unclosed "" + this + ""; check caller"", this.callstack);","LOG.error(""finalizing unclosed "" + this + ""; check caller"",this.callstack);
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
42,"log.warn(""Can't resolve '"" + token.toString(false) + ""'"", ns) ;","log.warn(""Can't resolve '"" + token.toString(false) + ""'"",ns);
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
43,"LOG.info(""WEIGHT: %s = %.3f"", weight, Decoder.weights.getWeight(weight));","LOG.info(""WEIGHT: %s = %.3f"",weight,Decoder.weights.getWeight(weight));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
44,"LOGGER.warn(""Error while downloading artifact: {}"", ((Throwable) value).getMessage(), value);","LOGGER.warn(""Error while downloading artifact: {}"",((Throwable)value).getMessage(),value);
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
45,"logger.debug(""compareData(expectedTable={}, actualTable={}, "" + ""comparisonCols={}, failureHandler={}) - start"", new Object[] { expectedTable, actualTable, comparisonCols, failureHandler });","logger.debug(""compareData(expectedTable={}, actualTable={}, "" + ""comparisonCols={}, failureHandler={}) - start"",new Object[]{expectedTable,actualTable,comparisonCols,failureHandler});
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
46,"LOGGER.info(""Expected value for {}  is {} but actual is {}"",  new Object[]{e.getKey(), e.getValue().getClass(), actual.get(e.getKey()).getClass()});","LOGGER.info(""Expected value for {}  is {} but actual is {}"",new Object[]{e.getKey(),e.getValue().getClass(),actual.get(e.getKey()).getClass()});
",0,7,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
47,"LOGGER.warn(""SID = "" + getSessionId() + "" - JID = "" + getInitiatingEntity() + "" - RID = "" + rid + "" - async error on event "", event.getClass(), throwable);","LOGGER.warn(""SID = "" + getSessionId() + "" - JID = ""+ getInitiatingEntity()+ "" - RID = ""+ rid+ "" - async error on event "",event.getClass(),throwable);
",0,0,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
48,"LOG.error(logErrorMessage + "" due to: {}"", this, vci.getVersion(), vci.getFlowIdentifier(), vci.getBucketIdentifier(), e.getLocalizedMessage());","LOG.error(logErrorMessage + "" due to: {}"",this,vci.getVersion(),vci.getFlowIdentifier(),vci.getBucketIdentifier(),e.getLocalizedMessage());
",0,0,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
49,"logger.debug(""Frame is compressed, will iterate to decode"", new Object[]{});","logger.debug(""Frame is compressed, will iterate to decode"",new Object[]{});
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ArrayInitializer(ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
50,"logger.debug(""Persisting job {} into queue {}, target={}"", new Object[] {Utility.toString(jobTopic, jobProperties), info.queueName, info.targetId});","logger.debug(""Persisting job {} into queue {}, target={}"",new Object[]{Utility.toString(jobTopic,jobProperties),info.queueName,info.targetId});
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
51,"log.info(""Startup progress: {}% (bundles {}/{})"", new Object[] {(int) (ratio * 100), started, total});","log.info(""Startup progress: {}% (bundles {}/{})"",new Object[]{(int)(ratio * 100),started,total});
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
PrimitiveType(CastExpression-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
52,"log.info(""Rule Store activated. It contains "" + recipes.size() + "" recipes."", this);","log.info(""Rule Store activated. It contains "" + recipes.size() + "" recipes."",this);
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
53,"LOG.debug(srcNameTrimmed + "": "" + ""NumCompletedInputs: {}"" + (numInputs - remainingMaps.get()));","LOG.debug(srcNameTrimmed + "": "" + ""NumCompletedInputs: {}""+ (numInputs - remainingMaps.get()));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
54,"logger.info(""Testing: {}"", testFile + "" (splits {}"", numberOfSplits + "")"");","logger.info(""Testing: {}"",testFile + "" (splits {}"",numberOfSplits + "")"");
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
55,"} ).doOnError( t -> logger.error( ""Failed on delete application"", t.getMessage() ) );","return Observable.from(indexes).flatMap(index -> {
  final ListenableActionFuture<DeleteByQueryResponse> response=esProvider.getClient().prepareDeleteByQuery(alias.getWriteAlias()).setQuery(tqb).execute();
  response.addListener(new ActionListener<DeleteByQueryResponse>(){
    @Override public void onResponse(    DeleteByQueryResponse response){
      checkDeleteByQueryResponse(tqb,response);
    }
    @Override public void onFailure(    Throwable e){
      logger.error(""Failed on delete index"",e.getMessage());
    }
  }
);
  return Observable.from(response);
}
).doOnError(t -> logger.error(""Failed on delete application"",t.getMessage()));
",0,0,7,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
"
56,"logger.info(""Created"", entity.get(""created"").toString());","logger.info(""Created"",entity.get(""created"").toString());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
57,"log.debug(""{} adding queue {} to broker {}"", new Object[] {this, getName(), jmxHelper.getAttribute(brokerMBeanName, ""BrokerName"")});","log.debug(""{} adding queue {} to broker {}"",new Object[]{this,getName(),jmxHelper.getAttribute(brokerMBeanName,""BrokerName"")});
",1,110,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
58,"LOG.error("">>>> "" + exceptions.size() + "" exceptions like"", exceptions.values().iterator().next());","LOG.error("">>>> "" + exceptions.size() + "" exceptions like"",exceptions.values().iterator().next());
",1,61,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
59,"log.info(""taskId={}"" + stage.getExecutionCommands(hostName).get(0).","log.info(""taskId={}"" + stage.getExecutionCommands(hostName).get(0).getExecutionCommand().getTaskId());
",1,16,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
60,"if (LOG.isTraceEnabled()) LOG.trace(""sending {}, {} to {}"", new Object[] {event.getSensor().getName(), event, join(subs, "","")});","if (LOG.isTraceEnabled()) LOG.trace(""sending {}, {} to {}"",new Object[]{event.getSensor().getName(),event,join(subs,"","")});
",1,89,14,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
61,"LOG.error(""Error starting ""+app+"": ""+Exceptions.collapseText(e), Exceptions.getFirstInteresting(e));","LOG.error(""Error starting "" + app + "": ""+ Exceptions.collapseText(e),Exceptions.getFirstInteresting(e));
",1,2,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
62,"LOG.debug(""Old PID: {}, New PID: {} read from PID file: {}"", new String[] {initialPid[0], newPid, pidFileLocation});","LOG.debug(""Old PID: {}, New PID: {} read from PID file: {}"",new String[]{initialPid[0],newPid,pidFileLocation});
",1,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
63,"if (LOG.isDebugEnabled()) LOG.debug(""Checkpointed ""+(previouslyQueued ? ""previously queued "" : """")+""delta of memento in {}: ""","if (LOG.isDebugEnabled()) LOG.debug(""Checkpointed "" + (previouslyQueued ? ""previously queued "" : """") + ""delta of memento in {}: ""+ ""updated {} entities, {} locations, {} policies, {} enrichers, {} catalog items, {} bundles; ""+ ""removed {} entities, {} locations, {} policies, {} enrichers, {} catalog items, {} bundles""+ (theseLastErrors.isEmpty() ? """" : ""; "" + theseLastErrors.size() + "" errors: ""+ theseLastErrors),new Object[]{Time.makeTimeStringRounded(stopwatch),delta.entities().size(),delta.locations().size(),delta.policies().size(),delta.enrichers().size(),delta.catalogItems().size(),delta.bundles().size(),delta.removedEntityIds().size(),delta.removedLocationIds().size(),delta.removedPolicyIds().size(),delta.removedEnricherIds().size(),delta.removedCatalogItemIds().size(),delta.removedBundleIds().size()});
",1,8,9,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
64,"if (log.isDebugEnabled()) log.debug(""Attempt {} failed connecting to {} ({})"", new Object[] {attempt + 1, nimbus.getConfig(Storm.NIMBUS_HOSTNAME), e.getMessage()});","if (log.isDebugEnabled()) log.debug(""Attempt {} failed connecting to {} ({})"",new Object[]{attempt + 1,nimbus.getConfig(Storm.NIMBUS_HOSTNAME),e.getMessage()});
",1,25,14,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
65,"if (log.isDebugEnabled()) log.debug(""Not refreshed seeds of cluster {}, because still waiting for quorum (need {}; have {} potentials)"", new Object[] {CassandraDatacenterImpl.class, quorumSize, potentialSeeds.size()});","if (log.isDebugEnabled()) log.debug(""Not refreshed seeds of cluster {}, because still waiting for quorum (need {}; have {} potentials)"",new Object[]{CassandraDatacenterImpl.class,quorumSize,potentialSeeds.size()});
",1,2,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
66,"if (log.isDebugEnabled()) log.debug(""Not setting seeds of fabric {} yet, because still waiting for quorum (need {}; have {} potentials from {} members)"", new Object[] {CassandraFabricImpl.this, quorumSize, potentialSeedCount, getMembers()});","if (log.isDebugEnabled()) log.debug(""Not setting seeds of fabric {} yet, because still waiting for quorum (need {}; have {} potentials from {} members)"",new Object[]{CassandraFabricImpl.this,quorumSize,potentialSeedCount,getMembers()});
",1,28,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ThisExpression-qualifier, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
67,"if (log.isTraceEnabled()) log.trace(""Node {} in Cluster {}: viableSeed={}; hostname={}; serviceUp={}; serviceState={}; hasFailed={}"", new Object[] {member, this, result, hostname, serviceUp, serviceState, hasFailed});","if (log.isTraceEnabled()) log.trace(""Node {} in Cluster {}: viableSeed={}; hostname={}; serviceUp={}; serviceState={}; hasFailed={}"",new Object[]{member,this,result,hostname,serviceUp,serviceState,hasFailed});
",1,114,14,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
68,"if (log.isTraceEnabled()) log.trace(""Node {} in Fabric {}: viableSeed={}; hostname={}; serviceUp={}; serviceState={}; hasFailed={}"", new Object[] {member, CassandraFabricImpl.this, result, hostname, serviceUp, serviceState, hasFailed});","if (log.isTraceEnabled()) log.trace(""Node {} in Fabric {}: viableSeed={}; hostname={}; serviceUp={}; serviceState={}; hasFailed={}"",new Object[]{member,CassandraFabricImpl.this,result,hostname,serviceUp,serviceState,hasFailed});
",1,1,14,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ThisExpression-qualifier, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
69,"if (LOG.isDebugEnabled()) LOG.debug(""Creating subscription {} for {} on {} {} in {}"", new Object[] {s.id, s.subscriber, producer, sensor, this});","if (LOG.isDebugEnabled()) LOG.debug(""Creating subscription {} for {} on {} {} in {}"",new Object[]{s.id,s.subscriber,producer,sensor,this});
",1,3,12,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
70,"if (LOG.isTraceEnabled()) LOG.trace(""From {}, for jmx operation {}.{}({}), got value {}"", new Object[] {url, realObjectName.getCanonicalName(), method, Arrays.asList(arguments),","if (LOG.isTraceEnabled()) LOG.trace(""From {}, for jmx operation {}.{}({}), got value {}"",new Object[]{url,realObjectName.getCanonicalName(),method,Arrays.asList(arguments),result});
",1,2,14,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
71,"if (LOG.isDebugEnabled() && shouldLogCheckpoint()) LOG.debug(""Checkpointing delta of memento: ""","if (LOG.isDebugEnabled() && shouldLogCheckpoint()) LOG.debug(""Checkpointing delta of memento: "" + ""updating entities={}, locations={}, policies={}, enrichers={}, catalog items={}, bundles={}; "" + ""removing entities={}, locations={}, policies={}, enrichers={}, catalog items={}, bundles={}"",new Object[]{limitedCountString(prevDeltaCollector.entities),limitedCountString(prevDeltaCollector.locations),limitedCountString(prevDeltaCollector.policies),limitedCountString(prevDeltaCollector.enrichers),limitedCountString(prevDeltaCollector.catalogItems),limitedCountString(prevDeltaCollector.bundles),limitedCountString(prevDeltaCollector.removedEntityIds),limitedCountString(prevDeltaCollector.removedLocationIds),limitedCountString(prevDeltaCollector.removedPolicyIds),limitedCountString(prevDeltaCollector.removedEnricherIds),limitedCountString(prevDeltaCollector.removedCatalogItemIds),limitedCountString(prevDeltaCollector.removedBundleIds)});
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
72,"if (log.isTraceEnabled()) log.trace(""modified attribute {} unchanged; not emitting on {}"", new Object[] {attribute.getName(), newValue, this});","if (log.isTraceEnabled()) log.trace(""modified attribute {} unchanged; not emitting on {}"",new Object[]{attribute.getName(),newValue,this});
",1,3,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
73,"LOG.info(""Executing {}; completed {}; took {}; fraction cpu {}"", new Object[] {context, (i+1), Time.makeTimeStringRounded(elapsedTime), fractionCpu});","LOG.info(""Executing {}; completed {}; took {}; fraction cpu {}"",new Object[]{context,(i + 1),Time.makeTimeStringRounded(elapsedTime),fractionCpu});
",1,1,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
74,"if (LOG.isTraceEnabled()) LOG.trace(""{} not resizing {} {} from {} to {}, {} out of healthy range {}..{} but unconstrained size {} blocked by bounds/check"", new Object[] {this, description, poolEntity, data.currentSize, desiredSize, data.currentMetricValue, data.metricLowerBound, data.metricUpperBound, desiredSizeUnconstrained});","if (LOG.isTraceEnabled()) LOG.trace(""{} not resizing {} {} from {} to {}, {} out of healthy range {}..{} but unconstrained size {} blocked by bounds/check"",new Object[]{this,description,poolEntity,data.currentSize,desiredSize,data.currentMetricValue,data.metricLowerBound,data.metricUpperBound,desiredSizeUnconstrained});
",1,6,16,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
75,"logger.debug(""Repository initializer '"" + ri.getClass().getName() + ""' completed"", config.getHomeDir());","logger.debug(""Repository initializer '"" + ri.getClass().getName() + ""' completed"",config.getHomeDir());
",1,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
76,"if (rawValue != null) log.debug(""{} finished waiting for {} (value {}); continuing..."", new Object[] {entity, configKey, val});","if (rawValue != null) log.debug(""{} finished waiting for {} (value {}); continuing..."",new Object[]{entity,configKey,val});
",1,1,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
77,"if (log.isTraceEnabled()) log.trace(""Attempt {} after {} ms: {}"", new Object[] {attempt, System.currentTimeMillis() - startTime, e.getMessage()});","if (log.isTraceEnabled()) log.trace(""Attempt {} after {} ms: {}"",new Object[]{attempt,System.currentTimeMillis() - startTime,e.getMessage()});
",1,3,13,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
78,"logger.debug(""Not able to generate index plan in "", this.getClass().toString());","logger.debug(""Not able to generate index plan in "",this.getClass().toString());
",1,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
79,"LOG.info(this + "": could not get "" + key + "" due to InvalidToken "" +","LOG.info(this + "": could not get "" + key+ "" due to InvalidToken ""+ ""exception."",info.getInvalidTokenException());
",1,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
80,"log.trace(msg, new Object[]{id, this.cache.size(), upperLimit}, new Exception());","log.trace(msg,new Object[]{id,this.cache.size(),upperLimit},new Exception());
",1,1,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
81,"logger.warn(""Some keystore properties are populated ({}, {}, {}, {}) but not valid"", (Object[]) tlsConfiguration.getKeystorePropertiesForLogging());","logger.warn(""Some keystore properties are populated ({}, {}, {}, {}) but not valid"",(Object[])tlsConfiguration.getKeystorePropertiesForLogging());
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
82,"log.info("" ... start to ACTIVATE Index {} on ManagedSolrServer"",entry.getKey(),info.metadata.getServerName());","log.info("" ... start to ACTIVATE Index {} on ManagedSolrServer"",entry.getKey(),info.metadata.getServerName());
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
83,"LOG.debug(""MxN unifier for {} {} {}"", new Object[] {doperEntry.first, doperEntry.second.getPortName(), pks});","LOG.debug(""MxN unifier for {} {} {}"",new Object[]{doperEntry.first,doperEntry.second.getPortName(),pks});
",2,20,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
84,"LOG.info(""Deleting {} orphaned location{} (of {}): {}"", new Object[] {locsToDelete.size(), Strings.s(locsToDelete.size()), input.getLocations().size(), locsToDelete});","LOG.info(""Deleting {} orphaned location{} (of {}): {}"",new Object[]{locsToDelete.size(),Strings.s(locsToDelete.size()),input.getLocations().size(),locsToDelete});
",2,6,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
85,"log.debug(""Recurring {} reading {} in {} (still in grace period): {}"", new Object[] {type, this, getBriefDescription(), val});","log.debug(""Recurring {} reading {} in {} (still in grace period): {}"",new Object[]{type,this,getBriefDescription(),val});
",2,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
86,"LOG.info(""Auto Deletion Policy monitor: {}"" + this.","LOG.info(""Auto Deletion Policy monitor: {}"" + this.getClass().getCanonicalName());
",2,2,4,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
87,"logger.trace(""Invoked PostConstruct annotated method {} for class {}"", new Object[]{m, (Class<T>)object.getClass()});","logger.trace(""Invoked PostConstruct annotated method {} for class {}"",new Object[]{m,(Class<T>)object.getClass()});
",3,3,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
88,"log.debug(""Trace for ""+type+"" reading ""+getBriefDescription()+"": ""+val, (Throwable)val);","log.debug(""Trace for "" + type + "" reading ""+ getBriefDescription()+ "": ""+ val,(Throwable)val);
",3,4,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
89,"LOG.debug(""connection to {} ({}ms) gives {}"", new Object[] { url, (System.currentTimeMillis()-startTime), status });","LOG.debug(""connection to {} ({}ms) gives {}"",new Object[]{url,(System.currentTimeMillis() - startTime),status});
",3,5,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
90,"LOG.debug(""read of err {} ({}ms) complete; http code {}"", new Object[] { url, Time.makeTimeStringRounded(System.currentTimeMillis()-startTime), status});","LOG.debug(""read of err {} ({}ms) complete; http code {}"",new Object[]{url,Time.makeTimeStringRounded(System.currentTimeMillis() - startTime),status});
",3,7,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
91,"if (LOG.isTraceEnabled()) LOG.trace(""{} executing {} with leasee {}"", new Object[] {this, receiver, lease.leasedObject()});","if (LOG.isTraceEnabled()) LOG.trace(""{} executing {} with leasee {}"",new Object[]{this,receiver,lease.leasedObject()});
",3,3,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
92,"log.debug(""Topic Collected Data in memory = {}"" + JsonUtil.obj2String(dashboardCollectService.getTopicMap().asMap()));","log.debug(""Topic Collected Data in memory = {}"" + JsonUtil.obj2String(dashboardCollectService.getTopicMap().asMap()));
",3,3,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
93,"log.debug(""Registered service {} with {} : {} and {} : {}"", new Object[] { Adaption.class.getName(),","log.debug(""Registered service {} with {} : {} and {} : {}"",new Object[]{Adaption.class.getName(),SlingConstants.PROPERTY_ADAPTABLE_CLASSES,Arrays.toString(adaptables),SlingConstants.PROPERTY_ADAPTER_CLASSES,Arrays.toString(adapters)});
",3,3,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
94,"log.info(""Testing Cassandra on {}{} using {} ({})"", new Object[] { provider, Strings.isNonEmpty(region) ? "":"" + region : """", description, imageId });","log.info(""Testing Cassandra on {}{} using {} ({})"",new Object[]{provider,Strings.isNonEmpty(region) ? "":"" + region : """",description,imageId});
",5,9,14,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-thenExpression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-thenExpression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
95,"log.info(""blocked until ended ({}) {} {}, in {}"", new Object[] {i, t, t.getStatusDetail(false), Duration.of(timer)});","log.info(""blocked until ended ({}) {} {}, in {}"",new Object[]{i,t,t.getStatusDetail(false),Duration.of(timer)});
",7,17,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
96,"if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, continuing recovering: {}"", new Object[] {this, entity, getDescription(status)});","if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, continuing recovering: {}"",new Object[]{this,entity,getDescription(status)});
",25,49,11,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
