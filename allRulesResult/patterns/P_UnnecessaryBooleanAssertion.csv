Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"assertTrue(""Error registering namespace "" + prefix + uri + "" "" + e.getMessage(), !successExpected);","assertTrue(""Error registering namespace "" + prefix + uri+ "" ""+ e.getMessage(),!successExpected);
",0,113,8,2666,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
2,"assertTrue(false, String.format(""%s not found in time"", context));","assertTrue(false,String.format(""%s not found in time"",context));
",0,21,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
3,"String view = controller.deleteCategory(category, validToken, invalidToken, ""true"",REFERRER_ID, model, sessionStatus);assertTrue(""Test should catch exception and never hit this test"", false);","String view=controller.deleteCategory(category,validToken,invalidToken,""true"",REFERRER_ID,model,sessionStatus);
",0,1,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
4,"assertTrue(""URI should be invalid: "" + invalidURIs[i] + ""  "" + e.getCause().getCause().getMessage(), true);","assertTrue(""URI should be invalid: "" + invalidURIs[i] + ""  ""+ e.getCause().getCause().getMessage(),true);
",0,1,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
5,"assertTrue(msg + String.format(""; actual collection doesn't contain the object [%s]"", o), false);","assertTrue(msg + String.format(""; actual collection doesn't contain the object [%s]"",o),false);
",0,1,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
6,"assertTrue(""Should not be able to create this table because of "" + ""duplicate split keys"",","assertTrue(""Should not be able to create this table because of "" + ""duplicate split keys"",false);
",0,0,3,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
7,"assertTrue(""Error adding "" + nodeName + "" to "" + node + e.getMessage(), !successExpected);","assertTrue(""Error adding "" + nodeName + "" to ""+ node+ e.getMessage(),!successExpected);
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
8,"assertTrue(""Failed sample test "" + getCT() + """", false);","assertTrue(""Failed sample test "" + getCT() + """",false);
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
9,"assertTrue(""File '"" + file.getName() + ""' is valid, but was expecting invalid."",","assertTrue(""File '"" + file.getName() + ""' is valid, but was expecting invalid."",!isValid);
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
10,"assertTrue(message + "" (Position = "" + fsdis.getPos() + "")"", false);","assertTrue(message + "" (Position = "" + fsdis.getPos()+ "")"",false);
",1,5,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
11,"assertTrue(""Delta "" + delta + "" for family "" + index + "" should be at least "" +","assertTrue(""Delta "" + delta + "" for family ""+ index+ "" should be at least ""+ ""deltaForLargestFamily ""+ deltaForLargestFamily,false);
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
12,"assertTrue(""got exception: "" + StringUtils.stringifyException(e), false);","assertTrue(""got exception: "" + StringUtils.stringifyException(e),false);
",2,57,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
13,"assertTrue(!added, ""Duplicated entry was not added"");","assertTrue(!added,""Duplicated entry was not added"");
",2,2,3,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
14,"assertTrue(false, ""Object expired early ( ""","assertTrue(false,""Object expired early ( "" + (System.currentTimeMillis() - addTime) + "" millis)"");
",3,3,3,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
15,"assertTrue(""Expect property change event on ""+propertyName+"" with ""+old+"" and ""+now, false);","assertTrue(""Expect property change event on "" + propertyName + "" with ""+ old+ "" and ""+ now,false);
",4,2326,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
16,assertTrue(!InitTest.initted);,"assertTrue(!InitTest.initted);
",14,14,2,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
