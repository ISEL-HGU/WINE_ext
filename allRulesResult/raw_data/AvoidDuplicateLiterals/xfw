152000,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/DefaultRecordBatchTest.java,161,,"            new RecordHeader(""foo"", ""value"".getBytes()),"
152001,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java,50,,"            new RecordHeader(""foo"", ""value"".getBytes()),"
152002,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java,56,,"            new SimpleRecord(""hi"".getBytes(), ""there"".getBytes()),"
152003,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java,88,,"            fileRecords.append(MemoryRecords.withRecords(magic, compression, new SimpleRecord(""foo"".getBytes())));"
152004,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/FileRecordsTest.java,212,,"        assertEquals(items.subList(1, items.size()), batches(read), ""Read starting from the second message"");"
152005,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsTest.java,214,,"        builder.append(logAppendTime, ""key"".getBytes(), ""value"".getBytes());"
152006,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsTest.java,214,,"        builder.append(logAppendTime, ""key"".getBytes(), ""value"".getBytes());"
152007,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsTest.java,238,,"            new SimpleRecord(283843L, ""key1"".getBytes(), ""value1"".getBytes()),"
152008,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsTest.java,277,,"        builder.build().filterTo(new TopicPartition(""foo"", 0), new RetainNonNullKeysFilter(), filtered,"
152009,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/replica/ReplicaSelectorTest.java,46,,"        Optional<ReplicaView> selected = selector.select(tp, metadata(""rack-b""), partitionView);"
152010,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/replica/ReplicaSelectorTest.java,57,,"        selected = selector.select(tp, metadata(""rack-a""), partitionView);"
152011,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/AlterReplicaLogDirsRequestTest.java,44,,"                                .setPath(""/data0"")"
152012,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/AlterReplicaLogDirsRequestTest.java,47,,"                                                .setName(""topic"")"
152013,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/ApiVersionsResponseTest.java,57,,"                    ""Request version "" + i + "" for API "" + version.apiKey() + "" must be null"");"
152014,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/ByteBufferChannelTest.java,32,,"        byte[] data = Utils.utf8(""hello"");"
152015,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/CreateAclsRequestTest.java,44,,"        new AccessControlEntry(""User:ANONYMOUS"", ""127.0.0.1"", AclOperation.READ, AclPermissionType.DENY));"
152016,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/DeleteAclsRequestTest.java,43,,"        new AccessControlEntryFilter(""User:ANONYMOUS"", ""127.0.0.1"", AclOperation.READ, AclPermissionType.DENY));"
152017,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/DeleteAclsResponseTest.java,46,,"        .setHost(""127.0.0.1"")"
152018,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/DescribeAclsRequestTest.java,38,,"        new AccessControlEntryFilter(""User:ANONYMOUS"", ""127.0.0.1"", AclOperation.READ, AclPermissionType.DENY));"
152019,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/LeaderAndIsrRequestTest.java,113,,"                    .setTopicName(""topic0"")"
152020,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/LeaderAndIsrResponseTest.java,45,,"            .setTopicName(""foo"")"
152021,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/ListOffsetsRequestTest.java,47,,"                    .setName(""topic"")"
152022,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/MetadataRequestTest.java,58,,"        MetadataRequest.Builder builder = new MetadataRequest.Builder(Collections.singletonList(""topic""), false);"
152023,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java,105,,"                    new ProduceRequestData.TopicProduceData().setName(""test"").setPartitionData(Collections.singletonList("
152024,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java,250,,"                new SimpleRecord(""foo"".getBytes()));"
152025,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,262,,"        toForgetTopics.add(new TopicPartition(""foo"", 0));"
152026,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,264,,"        toForgetTopics.add(new TopicPartition(""bar"", 0));"
152027,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,307,,"        checkRequest(createMetadataRequest(1, Collections.singletonList(""topic1"")), true);"
152028,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,426,,"        checkRequest(createUpdateMetadataRequest(1, ""rack1""), false);"
152029,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,609,,"            checkRequest(createBatchedFindCoordinatorRequest(Collections.singletonList(""group1""), version), true);"
152030,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,674,,"                    ""Non-matching values for "" + actualEntry.name() + "" in version "" + version);"
152031,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,759,,"        TopicPartition tp0 = new TopicPartition(""test"", 0);"
152032,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,762,,"            CompressionType.NONE, new SimpleRecord(""woot"".getBytes()));"
152033,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,775,,"                        .setTransactionalId(""transactionalId""))"
152034,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,786,,"        assertFalse(request.toString(false).contains(""partitionSizes""));"
152035,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,806,,"    @SuppressWarnings(""deprecation"")"
152036,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1015,,"        Map<String, Uuid> topicIds = Collections.singletonMap(""test1"", Uuid.randomUuid());"
152037,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1034,,"                               .setName(""topic"")"
152038,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1099,,"                    new TopicPartition(""test11"", 1)),"
152039,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1265,,"                    .setKey(""test-group""))"
152040,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1278,,"        Node node = new Node(10, ""host1"", 2014);"
152041,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1289,,"        fetchData.put(new TopicPartition(""test2"", 0), new FetchRequest.PartitionData(200, -1L,"
152042,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1333,,"        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(""blah"".getBytes()));"
152043,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1377,,"                .setMemberId(""consumer1"")).build();"
152044,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1397,,"            .setProtocolType(""consumer"")"
152045,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1444,,"                .setMemberId(""member"")"
152046,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1634,,"        allTopicMetadata.add(new MetadataResponse.TopicMetadata(Errors.LEADER_NOT_AVAILABLE, ""topic2"", false,"
152047,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1636,,"        allTopicMetadata.add(new MetadataResponse.TopicMetadata(Errors.NONE, ""topic3"", false,"
152048,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1869,,"            .setTopicName(""topic5"")"
152049,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,1889,,"            .setTopicName(""topic20"")"
152050,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,2337,,"                                .setPrincipal(""User:ANONYMOUS"")))));"
152051,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java,2523,,"                .setName(""my_topic"")"
152052,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/RequestTestUtils.java,103,,"        return metadataUpdateWith(""kafka-cluster"", numNodes, topicPartitionCounts);"
152053,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/requests/StopReplicaResponseTest.java,42,,"            .setTopicName(""foo"")"
152054,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/JaasContextTest.java,80,,"        options.put(""propName"", ""propValue"");"
152055,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/JaasContextTest.java,80,,"        options.put(""propName"", ""propValue"");"
152056,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/SaslExtensionsTest.java,42,,"        assertThrows(UnsupportedOperationException.class, () -> extensions.map().put(""hello"", ""test""));"
152057,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/auth/DefaultKafkaPrincipalBuilderTest.java,53,,"        when(session.getPeerPrincipal()).thenReturn(new DummyPrincipal(""foo""));"
152058,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/ClientAuthenticationFailureTest.java,69,,"        saslServerConfigs.put(BrokerSecurityConfigs.SASL_ENABLED_MECHANISMS_CONFIG, Arrays.asList(""PLAIN""));"
152059,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/ClientAuthenticationFailureTest.java,89,,"        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, ""localhost:"" + server.port());"
152060,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/LoginManagerTest.java,46,,"        TestJaasConfig.createConfiguration(""SCRAM-SHA-256"","
152061,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/LoginManagerTest.java,61,,"        LoginManager dynamicLogin = LoginManager.acquireLoginManager(dynamicContext, ""PLAIN"","
152062,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorFailureDelayTest.java,98,,"        TestJaasConfig jaasConfig = configureMechanisms(""PLAIN"", Arrays.asList(""PLAIN""));"
152063,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorFailureDelayTest.java,99,,"        jaasConfig.setClientOptions(""PLAIN"", TestJaasConfig.USERNAME, ""invalidpassword"");"
152064,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorFailureDelayTest.java,115,,"        TestJaasConfig jaasConfig = configureMechanisms(""SCRAM-SHA-256"", Collections.singletonList(""SCRAM-SHA-256""));"
152065,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,171,,"        serverCertStores = new CertStores(true, ""localhost"");"
152066,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,195,,"        configureMechanisms(""PLAIN"", Arrays.asList(""PLAIN""));"
152067,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,223,,"        jaasConfig.setClientOptions(""PLAIN"", TestJaasConfig.USERNAME, ""invalidpassword"");"
152068,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,303,,"        TestJaasConfig jaasConfig = configureMechanisms(""SCRAM-SHA-256"", Collections.singletonList(""SCRAM-SHA-256""));"
152069,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,370,,"        configureMechanisms(""DIGEST-MD5"", Arrays.asList(""DIGEST-MD5""));"
152070,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,476,,"        options.put(""username"", TestJaasConfig.USERNAME);"
152071,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,477,,"        options.put(""password"", ""invalidpassword"");"
152072,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,525,,"        saslClientConfigs.put(SaslConfigs.SASL_MECHANISM, ""SCRAM-SHA-512"");"
152073,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,714,,"                setClientId(""someclient"")."
152074,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,841,,"        String node1 = ""invalid1"";"
152075,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,853,,"        createAndCheckClientConnection(securityProtocol, ""good1"");"
152076,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,1038,,"        createAndCheckClientConnectionFailure(securityProtocol, ""invalid"");"
152077,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,1075,,"        saslServerConfigs.put(""plain."" + BrokerSecurityConfigs.SASL_SERVER_CALLBACK_HANDLER_CLASS,"
152078,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,1272,,"        serverOptions.put(""user_user1"", ""user1-secret"");"
152079,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,1273,,"        serverOptions.put(""user_user2"", ""user2-secret"");"
152080,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,1277,,"        staticJaasConfig.setClientOptions(""PLAIN"", ""user1"", ""invalidpassword"");"
152081,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java,1531,,"        configureMechanisms(""OAUTHBEARER"", Arrays.asList(""OAUTHBEARER""));"
152082,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/kerberos/KerberosNameTest.java,39,,"        KerberosShortNamer shortNamer = KerberosShortNamer.fromUnparsedRules(""REALM.COM"", rules);"
152083,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/kerberos/KerberosNameTest.java,54,,"        assertEquals(""user"", name.serviceName());"
152084,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/kerberos/KerberosRuleTest.java,30,,"        assertEquals(KerberosRule.replaceParameters(""hello"", new String[0]), ""hello"");"
152085,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerExtensionsValidatorCallbackTest.java,36,,"        extensions.put(""hello"", ""bye"");"
152086,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerExtensionsValidatorCallbackTest.java,36,,"        extensions.put(""hello"", ""bye"");"
152087,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerExtensionsValidatorCallbackTest.java,57,,"        callback.error(""hello"", ""error"");"
152088,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerExtensionsValidatorCallbackTest.java,71,,"        extensions.put(""nothing"", ""nothing"");"
152089,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslServerTest.java,86,,"                        extensionsCallback.valid(""firstKey"");"
152090,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslServerTest.java,87,,"                        extensionsCallback.valid(""secondKey"");"
152091,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslServerTest.java,106,,"        assertTrue(nextChallenge.length == 0, ""Next challenge is not empty"");"
152092,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/OAuthBearerSaslServerTest.java,124,,"        customExtensions.put(""firstKey"", ""value1"");"
152093,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerUnsecuredJwsTest.java,42,,"        appendJsonText(sb, ""sub"", ""SUBJECT"");"
152094,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerUnsecuredJwsTest.java,49,,"        OAuthBearerUnsecuredJws testJwt = new OAuthBearerUnsecuredJws(compactSerialization, ""sub"", ""scope"");"
152095,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerUnsecuredLoginCallbackHandlerTest.java,104,,"            options.put(""unsecuredLoginListClaim_"" + ""list"", "",1,2,"");"
152096,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerValidationUtilsTest.java,43,,"                appendJsonText(sb, ""exp"", 100);"
152097,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerValidationUtilsTest.java,44,,"                appendCommaJsonText(sb, ""sub"", ""principalName"");"
152098,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerValidationUtilsTest.java,44,,"                appendCommaJsonText(sb, ""sub"", ""principalName"");"
152099,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerValidationUtilsTest.java,52,,"                OAuthBearerUnsecuredJws testJwt = new OAuthBearerUnsecuredJws(compactSerialization, ""sub"", ""scope"");"
152100,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/plain/internals/PlainSaslServerTest.java,77,,"        assertEquals(""Authentication failed: username not specified"", e.getMessage());"
152101,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/scram/internals/ScramCredentialUtilsTest.java,48,,"        ScramCredential credential = formatter.generateCredential(""password"", 1024);"
152102,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/scram/internals/ScramMessagesTest.java,80,,"        checkClientFirstMessage(m, ""testuser"", nonce, """");"
152103,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java,49,,"    private static final String CA1 = ""-----BEGIN CERTIFICATE-----\n"""
152104,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java,216,,"        assertEquals(Collections.singletonList(""kafka0""), aliases);"
152105,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java,217,,"        assertNotNull(trustStore.getCertificate(""kafka0""), ""Certificate not loaded"");"
152106,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java,218,,"        assertNull(trustStore.getKey(""kafka0"", null), ""Unexpected private key"");"
152107,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java,270,,"        assertEquals(Collections.singletonList(""kafka""), aliases);"
152108,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java,69,,"        File trustStoreFile = File.createTempFile(""truststore"", "".jks"");"
152109,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java,69,,"        File trustStoreFile = File.createTempFile(""truststore"", "".jks"");"
152110,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java,76,,"        SSLEngine engine = sslFactory.createSslEngine(""localhost"", 0);"
152111,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java,93,,"        assertNotNull(sslFactory.sslEngineFactory(), ""SslEngineFactory not created"");"
152112,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java,201,,"        assertNotSame(sslEngineFactory, sslFactory.sslEngineFactory(), ""SslEngineFactory not recreated"");"
152113,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListDeserializerTest.java,47,,"        assertNotNull(inner, ""Inner deserializer should be not null"");"
152114,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListDeserializerTest.java,89,,"            + ""it was neither passed via the constructor nor set in the config."", exception.getMessage());"
152115,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListDeserializerTest.java,134,,"            + ""\"""" + CommonClientConfigs.DEFAULT_LIST_KEY_SERDE_TYPE_CLASS + ""\"" property."", exception.getMessage());"
152116,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListDeserializerTest.java,181,,"        assertEquals(""Invalid value "" + nonExistingClass + "" for configuration """
152117,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListDeserializerTest.java,181,,"        assertEquals(""Invalid value "" + nonExistingClass + "" for configuration """
152118,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListDeserializerTest.java,183,,"            + ""\"""" + nonExistingClass + ""\"" could not be found."", exception.getMessage());"
152119,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListSerializerTest.java,45,,"        assertNotNull(inner, ""Inner serializer should be not null"");"
152120,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/ListSerializerTest.java,46,,"        assertTrue(inner instanceof StringSerializer, ""Inner serializer type should be StringSerializer"");"
152121,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/SerializationTest.java,44,,"            put(String.class, Arrays.asList(""my string""));"
152122,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/serialization/SerializationTest.java,60,,"    @SuppressWarnings(""unchecked"")"
152123,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/AppInfoParserTest.java,68,,"        assertNull(metrics.metric(metrics.metricName(""commit-id"", ""app-info"")));"
152124,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ByteBufferOutputStreamTest.java,41,,"        output.write(""hello"".getBytes());"
152125,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/CollectionUtilsTest.java,34,,"        mainMap.put(""one"", ""1"");"
152126,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/CollectionUtilsTest.java,35,,"        mainMap.put(""two"", ""2"");"
152127,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/CollectionUtilsTest.java,36,,"        mainMap.put(""three"", ""3"");"
152128,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,38,,"        config.put(""foo.bar"", ""baz"");"
152129,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,38,,"        config.put(""foo.bar"", ""baz"");"
152130,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,39,,"        config.put(""foo.bar.deprecated"", ""quux"");"
152131,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,40,,"        config.put(""chicken"", ""1"");"
152132,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,41,,"        config.put(""rooster"", ""2"");"
152133,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,42,,"        config.put(""hen"", ""3"");"
152134,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,43,,"        config.put(""heifer"", ""moo"");"
152135,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,44,,"        config.put(""blah"", ""blah"");"
152136,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,49,,"            {""cow"", ""beef"", ""heifer"", ""steer""}"
152137,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ConfigUtilsTest.java,123,,"        config.put(""foo.bar.deprecated"", ""derp"");"
152138,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ImplicitLinkedHashCollectionTest.java,140,,"            assertTrue(i < sequence.length, ""Iterator yieled "" + (i + 1) + "" elements, but only "" +"
152139,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ImplicitLinkedHashCollectionTest.java,141,,"                sequence.length + "" were expected."");"
152140,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ImplicitLinkedHashMultiCollectionTest.java,93,,"            assertTrue(i < sequence.length, ""Iterator yieled "" + (i + 1) + "" elements, but only "" +"
152141,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/ImplicitLinkedHashMultiCollectionTest.java,94,,"                sequence.length + "" were expected."");"
152142,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/common/utils/JavaTest.java,33,,"        javaVendor = System.getProperty(""java.vendor"");"
152143,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/test/MetricsBench.java,39,,"                sensor.add(metrics.metricName(sensor.name() + "".avg"", ""grp1""), new Avg());"
152144,./TargetProjects/kafka/clients/src/test/java/org/apache/kafka/test/TestSslUtils.java,122,,"        KeyStore ks = KeyStore.getInstance(""JKS"");"
152145,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ConnectSchemaTest.java,39,,"            .field(""field"", Schema.INT32_SCHEMA)"
152146,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ConnectSchemaTest.java,46,,"            .field(""nested"", FLAT_STRUCT_SCHEMA)"
152147,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ConnectSchemaTest.java,55,,"                .field(""foo"", Schema.BOOLEAN_SCHEMA)"
152148,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ConnectSchemaTest.java,91,,"                Collections.singletonMap(1, ""value"")"
152149,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ConnectSchemaTest.java,253,,"        ConnectSchema s1 = new ConnectSchema(Schema.Type.INT8, false, null, ""name"", 2, ""doc"");"
152150,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ConnectSchemaTest.java,253,,"        ConnectSchema s1 = new ConnectSchema(Schema.Type.INT8, false, null, ""name"", 2, ""doc"");"
152151,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/FieldTest.java,28,,"        Field field1 = new Field(""name"", 0, Schema.INT8_SCHEMA);"
152152,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java,53,,"        assertThrows(SchemaBuilderException.class, () -> SchemaBuilder.int8().defaultValue(""invalid""));"
152153,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java,301,,"            .name(""testing"")"
152154,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,50,,"        projected = SchemaProjector.project(Schema.STRING_SCHEMA, ""abc"", Schema.STRING_SCHEMA);"
152155,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,146,,"        verifyOptionalProjection(Schema.OPTIONAL_STRING_SCHEMA, Type.STRING, ""abc"", ""def"", ""abc"", true);"
152156,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,201,,"                .field(""field"", Schema.INT32_SCHEMA)"
152157,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,208,,"                .field(""field2"", SchemaBuilder.int32().defaultValue(123).build())"
152158,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,280,,"                .field(""first"", Schema.INT32_SCHEMA)"
152159,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,281,,"                .field(""second"", Schema.STRING_SCHEMA)"
152160,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,282,,"                .field(""array"", SchemaBuilder.array(Schema.INT32_SCHEMA).build())"
152161,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,283,,"                .field(""map"", SchemaBuilder.map(Schema.INT32_SCHEMA, Schema.STRING_SCHEMA).build())"
152162,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/SchemaProjectorTest.java,284,,"                .field(""nested"", sourceFlatSchema)"
152163,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,38,,"            .field(""int8"", Schema.INT8_SCHEMA)"
152164,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,39,,"            .field(""int16"", Schema.INT16_SCHEMA)"
152165,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,40,,"            .field(""int32"", Schema.INT32_SCHEMA)"
152166,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,41,,"            .field(""int64"", Schema.INT64_SCHEMA)"
152167,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,42,,"            .field(""float32"", Schema.FLOAT32_SCHEMA)"
152168,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,43,,"            .field(""float64"", Schema.FLOAT64_SCHEMA)"
152169,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,44,,"            .field(""boolean"", Schema.BOOLEAN_SCHEMA)"
152170,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,45,,"            .field(""string"", Schema.STRING_SCHEMA)"
152171,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,46,,"            .field(""bytes"", Schema.BYTES_SCHEMA)"
152172,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,58,,"            .field(""array"", ARRAY_SCHEMA)"
152173,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,59,,"            .field(""map"", MAP_SCHEMA)"
152174,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,60,,"            .field(""nested"", NESTED_CHILD_SCHEMA)"
152175,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,77,,"                .put(""string"", ""foobar"")"
152176,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java,152,,"        Schema schema = SchemaBuilder.struct().field(""field"", REQUIRED_FIELD_SCHEMA).build();"
152177,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ValuesTest.java,68,,"        STRING_MAP.put(""foo"", ""123"");"
152178,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ValuesTest.java,69,,"        STRING_MAP.put(""bar"", ""baz"");"
152179,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ValuesTest.java,408,,"        String str = ""2019-08-23T14:34:54.346Z"";"
152180,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/data/ValuesTest.java,428,,"        String str = ""14:34:54.346Z"";"
152181,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/header/ConnectHeadersTest.java,85,,"            () -> headers.add(null, ""value"", Schema.STRING_SCHEMA));"
152182,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/header/ConnectHeadersTest.java,91,,"        headers.addString(other, ""other value"");"
152183,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/header/ConnectHeadersTest.java,93,,"        headers.addString(key, ""third"");"
152184,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/header/ConnectHeadersTest.java,233,,"        headers.apply(appendToKey(""-suffix""));"
152185,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/sink/SinkRecordTest.java,48,,"        record = new SinkRecord(TOPIC_NAME, PARTITION_NUMBER, Schema.STRING_SCHEMA, ""key"", Schema.BOOLEAN_SCHEMA, false, KAFKA_OFFSET,"
152186,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/source/SourceRecordTest.java,50,,"        record = new SourceRecord(SOURCE_PARTITION, SOURCE_OFFSET, TOPIC_NAME, PARTITION_NUMBER, Schema.STRING_SCHEMA, ""key"","
152187,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/storage/SimpleHeaderConverterTest.java,56,,"        STRING_MAP.put(""foo"", ""123"");"
152188,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/storage/SimpleHeaderConverterTest.java,57,,"        STRING_MAP.put(""bar"", ""baz"");"
152189,./TargetProjects/kafka/connect/api/src/test/java/org/apache/kafka/connect/storage/SimpleHeaderConverterTest.java,57,,"        STRING_MAP.put(""bar"", ""baz"");"
152190,./TargetProjects/kafka/connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java,55,,"        JaasBasicAuthFilter jaasBasicAuthFilter = setupJaasFilter(""KafkaConnect"", credentialFile.getPath());"
152191,./TargetProjects/kafka/connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java,56,,"        ContainerRequestContext requestContext = setMock(""Basic"", ""user"", ""password"", false);"
152192,./TargetProjects/kafka/connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java,56,,"        ContainerRequestContext requestContext = setMock(""Basic"", ""user"", ""password"", false);"
152193,./TargetProjects/kafka/connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java,56,,"        ContainerRequestContext requestContext = setMock(""Basic"", ""user"", ""password"", false);"
152194,./TargetProjects/kafka/connect/file/src/test/java/org/apache/kafka/connect/file/FileStreamSinkTaskTest.java,65,,"                new SinkRecord(""topic1"", 0, null, null, Schema.STRING_SCHEMA, ""line1"", 1)"
152195,./TargetProjects/kafka/connect/file/src/test/java/org/apache/kafka/connect/file/FileStreamSinkTaskTest.java,65,,"                new SinkRecord(""topic1"", 0, null, null, Schema.STRING_SCHEMA, ""line1"", 1)"
152196,./TargetProjects/kafka/connect/file/src/test/java/org/apache/kafka/connect/file/FileStreamSinkTaskTest.java,73,,"                new SinkRecord(""topic2"", 0, null, null, Schema.STRING_SCHEMA, ""line3"", 1)"
152197,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,81,,"        assertEquals(new SchemaAndValue(Schema.BOOLEAN_SCHEMA, true), converter.toConnectData(TOPIC, ""{ \""schema\"": { \""type\"": \""boolean\"" }, \""payload\"": true }"".getBytes()));"
152198,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,131,,"        ByteBuffer reference = ByteBuffer.wrap(Utils.utf8(""test-string""));"
152199,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,153,,"        expected.put(""key1"", 12);"
152200,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,154,,"        expected.put(""key2"", 15);"
152201,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,170,,"        Schema expectedSchema = SchemaBuilder.struct().field(""field1"", Schema.BOOLEAN_SCHEMA).field(""field2"", Schema.STRING_SCHEMA).build();"
152202,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,170,,"        Schema expectedSchema = SchemaBuilder.struct().field(""field1"", Schema.BOOLEAN_SCHEMA).field(""field2"", Schema.STRING_SCHEMA).build();"
152203,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,171,,"        Struct expected = new Struct(expectedSchema).put(""field1"", true).put(""field2"", ""string"");"
152204,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,202,,"        Map<String, Boolean> props = Collections.singletonMap(""schemas.enable"", false);"
152205,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,257,,"        BigDecimal reference = new BigDecimal(new BigInteger(""156""), 2);"
152206,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,330,,"        calendar.setTimeZone(TimeZone.getTimeZone(""UTC""));"
152207,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,625,,"        Schema schema = SchemaBuilder.struct().field(""field1"", Schema.BOOLEAN_SCHEMA).field(""field2"", Schema.STRING_SCHEMA).field(""field3"", Schema.STRING_SCHEMA).field(""field4"", Schema.BOOLEAN_SCHEMA).build();"
152208,./TargetProjects/kafka/connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java,625,,"        Schema schema = SchemaBuilder.struct().field(""field1"", Schema.BOOLEAN_SCHEMA).field(""field2"", Schema.STRING_SCHEMA).field(""field3"", Schema.STRING_SCHEMA).field(""field4"", Schema.BOOLEAN_SCHEMA).build();"
152209,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,61,,"        assertTrue(client.isHeartbeatTopic(""heartbeats""));"
152210,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,62,,"        assertTrue(client.isHeartbeatTopic(""source1.heartbeats""));"
152211,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,84,,"        assertEquals(-1, client.countHopsForTopic(""topic"", ""source""));"
152212,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,87,,"        assertEquals(-1, client.countHopsForTopic(""source1.topic"", ""source2""));"
152213,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,88,,"        assertEquals(1, client.countHopsForTopic(""source1.topic"", ""source1""));"
152214,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,92,,"        assertEquals(-1, client.countHopsForTopic(""source3.source2.source1.topic"", ""source4""));"
152215,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,97,,"        MirrorClient client = new FakeMirrorClient(Arrays.asList(""topic1"", ""topic2"", ""heartbeats"","
152216,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,97,,"        MirrorClient client = new FakeMirrorClient(Arrays.asList(""topic1"", ""topic2"", ""heartbeats"","
152217,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,157,,"        MirrorClient client = new FakeMirrorClient(Arrays.asList(""topic1"", ""topic2"", ""topic3"","
152218,./TargetProjects/kafka/connect/mirror-client/src/test/java/org/apache/kafka/connect/mirror/MirrorClientTest.java,172,,"            ""topic1"", ""topic2"", ""topic3"", ""heartbeats"", ""backup.heartbeats""));"
152219,./TargetProjects/kafka/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMetrics.java,44,,"    private static final Set<String> PARTITION_TAGS = new HashSet<>(Arrays.asList(""target"", ""topic"", ""partition""));"
152220,./TargetProjects/kafka/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMetrics.java,44,,"    private static final Set<String> PARTITION_TAGS = new HashSet<>(Arrays.asList(""target"", ""topic"", ""partition""));"
152221,./TargetProjects/kafka/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMetrics.java,44,,"    private static final Set<String> PARTITION_TAGS = new HashSet<>(Arrays.asList(""target"", ""topic"", ""partition""));"
152222,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,62,,"        MirrorConnectorConfig config = new MirrorConnectorConfig(makeProps(""topics"", ""topic1""));"
152223,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,62,,"        MirrorConnectorConfig config = new MirrorConnectorConfig(makeProps(""topics"", ""topic1""));"
152224,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,65,,"        assertFalse(config.topicFilter().shouldReplicateTopic(""topic2""),"
152225,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,153,,"                MirrorConnectorConfig.CONSUMER_CLIENT_PREFIX + ""max.poll.interval.ms"", ""120000"""
152226,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,159,,"        expectedConsumerProps.put(""auto.offset.reset"", ""earliest"");"
152227,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,165,,"                MirrorConnectorConfig.CONSUMER_CLIENT_PREFIX + ""auto.offset.reset"", ""latest"""
152228,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,195,,"                MirrorConnectorConfig.PRODUCER_CLIENT_PREFIX + ""acks"", ""1"""
152229,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,221,,"                        ""connections.max.idle.ms"", ""10000"""
152230,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,221,,"                        ""connections.max.idle.ms"", ""10000"""
152231,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,270,,"        Map<String, String> connectorProps = makeProps(""offset-syncs.topic.location"", ""something"");"
152232,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorConfigTest.java,276,,"        connectorProps.put(""offset-syncs.topic.location"", ""target"");"
152233,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,49,,"            ""clusters"", ""a, b"","
152234,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,49,,"            ""clusters"", ""a, b"","
152235,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,52,,"            ""security.protocol"", ""SASL"","
152236,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,52,,"            ""security.protocol"", ""SASL"","
152237,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,68,,"            ""a->b.tasks.max"", ""123""));"
152238,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,80,,"            ""replication.policy.separator"", ""__"","
152239,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,81,,"            ""ssl.truststore.password"", ""secret1"","
152240,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,81,,"            ""ssl.truststore.password"", ""secret1"","
152241,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,82,,"            ""ssl.key.password"", ""${fake:secret:password}"",  // resolves to ""secret2"""
152242,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,84,,"            ""a.security.protocol"", ""PLAINTEXT"", "
152243,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,91,,"            ""xxx"", ""zzz""));"
152244,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,112,,"        assertEquals(""secret2"", aClientConfig.getPassword(""ssl.key.password"").value(),"
152245,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,130,,"            ""config.properties.exclude"", ""property-3"","
152246,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,132,,"            ""topic.filter.class"", DefaultTopicFilter.class.getName(),"
152247,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,134,,"        SourceAndTarget sourceAndTarget = new SourceAndTarget(""source"", ""target"");"
152248,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,134,,"        SourceAndTarget sourceAndTarget = new SourceAndTarget(""source"", ""target"");"
152249,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,160,,"            ""groups.blacklist"", ""group-7"","
152250,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,161,,"            ""topics.blacklist"", ""topic3"","
152251,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,284,,"                ""emit.heartbeats.enabled"", ""false""));"
152252,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorMakerConfigTest.java,304,,"                ""a->b.enabled"", ""true"","
152253,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,59,,"        MirrorSourceConnector connector = new MirrorSourceConnector(new SourceAndTarget(""source"", ""target""), "
152254,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,59,,"        MirrorSourceConnector connector = new MirrorSourceConnector(new SourceAndTarget(""source"", ""target""), "
152255,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,77,,"        assertFalse(connector.shouldReplicateTopic(""target.topic1""), ""should not allow cycles"");"
152256,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,90,,"        assertTrue(connector.shouldReplicateTopic(""target.topic1""), ""should allow cycles"");"
152257,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,97,,"        assertFalse(connector.shouldReplicateTopic(""target.heartbeats""), ""should not allow heartbeat cycles"");"
152258,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,111,,"            new AclBinding(new ResourcePattern(ResourceType.TOPIC, ""test_topic"", PatternType.LITERAL),"
152259,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,112,,"            new AccessControlEntry(""kafka"", """", AclOperation.WRITE, AclPermissionType.ALLOW))), ""should not replicate ALLOW WRITE"");"
152260,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,211,,"        Map<String, Config> configs = Collections.singletonMap(""topic"", topicConfig);"
152261,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceConnectorTest.java,224,,"        expectedPartitionCounts.put(""source.topic"", 1L);"
152262,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorSourceTaskTest.java,81,,"        assertFalse(partitionState.update(3, 152), ""no sync"");"
152263,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/IdentityReplicationIntegrationTest.java,60,,"                put(BACKUP_CLUSTER_ALIAS + ""->"" + PRIMARY_CLUSTER_ALIAS + "".enabled"", ""false"");"
152264,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/IdentityReplicationIntegrationTest.java,67,,"        produceMessages(primary, ""test-topic-1"");"
152265,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/IdentityReplicationIntegrationTest.java,70,,"                put(""group.id"", consumerGroupName);"
152266,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/IdentityReplicationIntegrationTest.java,131,,"        primary.kafka().createTopic(""test-topic-2"", NUM_PARTITIONS);"
152267,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,118,,"                put(PRIMARY_CLUSTER_ALIAS + ""->"" + BACKUP_CLUSTER_ALIAS + "".enabled"", ""true"");"
152268,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,152,,"        primaryBrokerProps.put(""auto.create.topics.enable"", ""false"");"
152269,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,198,,"        warmUpConsumer(Collections.singletonMap(""group.id"", ""consumer-group-dummy""));"
152270,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,238,,"        produceMessages(primary, ""test-topic-1"");"
152271,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,257,,"        waitForTopicCreated(primary, ""backup.test-topic-1"");"
152272,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,258,,"        waitForTopicCreated(backup, ""primary.test-topic-1"");"
152273,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,277,,"        assertTrue(primary.kafka().consume(1, RECORD_TRANSFER_DURATION_MS, ""heartbeats"").count() > 0,"
152274,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,341,,"        primary.kafka().createTopic(""test-topic-2"", NUM_PARTITIONS);"
152275,./TargetProjects/kafka/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java,345,,"        waitForTopicCreated(backup, ""primary.test-topic-2"");"
152276,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/ConnectorConfig.java,205,,"            @SuppressWarnings(""unchecked"")"
152277,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java,780,,"                        new NotFoundException(""Connector "" + connName + "" not found""), null);"
152278,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java,780,,"                        new NotFoundException(""Connector "" + connName + "" not found""), null);"
152279,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java,364,,"    @SuppressWarnings({""unchecked""})"
152280,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java,74,,"@Path(""/connectors"")"
152281,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java,153,,"    public Response createConnector(final @QueryParam(""forward"") Boolean forward,"
152282,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java,166,,"        Herder.Created<ConnectorInfo> info = completeOrForwardRequest(cb, ""/connectors"", ""POST"", headers, createRequest,"
152283,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java,175,,"    public ConnectorInfo getConnector(final @PathParam(""connector"") String connector,"
152284,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java,180,,"        return completeOrForwardRequest(cb, ""/connectors/"" + connector, ""GET"", headers, null, forward);"
152285,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java,180,,"        return completeOrForwardRequest(cb, ""/connectors/"" + connector, ""GET"", headers, null, forward);"
152286,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerder.java,141,,"            callback.onCompletion(new NotFoundException(""Connector "" + connName + "" not found""), null);"
152287,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerder.java,141,,"            callback.onCompletion(new NotFoundException(""Connector "" + connName + "" not found""), null);"
152288,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaConfigBackingStore.java,195,,"            .field(""properties"", SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.OPTIONAL_STRING_SCHEMA).build())"
152289,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java,437,,"            @SuppressWarnings(""unchecked"")"
152290,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,46,,"    private static final String SEQNO_FIELD = ""seqno"";"
152291,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,61,,"        .field(""boolean"", Schema.BOOLEAN_SCHEMA)"
152292,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,62,,"        .field(""int"", Schema.INT32_SCHEMA)"
152293,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,63,,"        .field(""long"", Schema.INT64_SCHEMA)"
152294,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,64,,"        .field(""float"", Schema.FLOAT32_SCHEMA)"
152295,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,65,,"        .field(""double"", Schema.FLOAT64_SCHEMA)"
152296,./TargetProjects/kafka/connect/runtime/src/main/java/org/apache/kafka/connect/tools/SchemaSourceTask.java,66,,"        .field(""partitioning"", Schema.INT32_SCHEMA)"
152297,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java,484,,"            return ""0.0.0"";"
152298,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectWorkerIntegrationTest.java,123,,"                ""Initial group of workers did not start in time."");"
152299,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectorRestartApiIntegrationTest.java,253,,"                ""Connector tasks are not all in running state."");"
152300,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectorTopicsIntegrationTest.java,127,,"                ""Connector tasks did not start in time."");"
152301,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectorTopicsIntegrationTest.java,130,,"                ""Active topic set is not: "" + Collections.singletonList(FOO_TOPIC) + "" for connector: "" + FOO_CONNECTOR);"
152302,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectorTopicsIntegrationTest.java,130,,"                ""Active topic set is not: "" + Collections.singletonList(FOO_TOPIC) + "" for connector: "" + FOO_CONNECTOR);"
152303,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ErrorHandlingIntegrationTest.java,108,,"        connect.kafka().createTopic(""test-topic"");"
152304,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ErrorHandlingIntegrationTest.java,121,,"        props.put(ERRORS_LOG_ENABLE_CONFIG, ""true"");"
152305,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ErrorHandlingIntegrationTest.java,148,,"            connect.kafka().produce(""test-topic"", ""key-"" + i, ""value-"" + i);"
152306,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ErrorHandlingIntegrationTest.java,148,,"            connect.kafka().produce(""test-topic"", ""key-"" + i, ""value-"" + i);"
152307,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ErrorHandlingIntegrationTest.java,152,,"        log.info(""Consuming records from test topic"");"
152308,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ExampleConnectIntegrationTest.java,119,,"        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);"
152309,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ExampleConnectIntegrationTest.java,137,,"            ""Validating connector configuration produced an unexpected number or errors."");"
152310,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/InternalTopicsIntegrationTest.java,66,,"        connect = new EmbeddedConnectCluster.Builder().name(""connect-cluster-1"")"
152311,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/InternalTopicsIntegrationTest.java,76,,"        connect.assertions().assertExactlyNumWorkersAreUp(numWorkers, ""Worker did not start in time."");"
152312,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/InternalTopicsIntegrationTest.java,80,,"        log.info(""Verifying the internal topics for Connect"");"
152313,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/InternalTopicsIntegrationTest.java,114,,"        connect.assertions().assertExactlyNumBrokersAreUp(numBrokers, ""Broker did not start in time."");"
152314,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/MonitorableSourceConnector.java,77,,"            config.put(""task.id"", connectorName + ""-"" + i);"
152315,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java,121,,"                ""Connect workers did not start in time."");"
152316,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java,127,,"                ""Connector tasks did not start in time."");"
152317,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java,214,,"                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");"
152318,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/SourceConnectorsIntegrationTest.java,106,,"        connect.assertions().assertAtLeastNumWorkersAreUp(NUM_WORKERS, ""Initial group of workers did not start in time."");"
152319,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/SourceConnectorsIntegrationTest.java,115,,"                ""Validating connector configuration produced an unexpected number or errors."");"
152320,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/SourceConnectorsIntegrationTest.java,118,,"                ""Connector tasks did not start in time."");"
152321,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/SourceConnectorsIntegrationTest.java,122,,"                DEFAULT_PARTITIONS, ""Topic "" + FOO_TOPIC + "" does not have the expected settings"");"
152322,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/SourceConnectorsIntegrationTest.java,122,,"                DEFAULT_PARTITIONS, ""Topic "" + FOO_TOPIC + "" does not have the expected settings"");"
152323,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/integration/TransformationIntegrationTest.java,140,,"        props.put(TRANSFORMS_CONFIG + "".filter.predicate"", ""barPredicate"");"
152324,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,158,,"            .addMockedMethod(""generation"")"
152325,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,407,,"        assertEquals(""required"", infos.get(""required"").configValue().name());"
152326,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,474,,"        config.put(ConnectorConfig.NAME_CONFIG, ""connector-name"");"
152327,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,477,,"        config.put(""required"", ""value""); // connector required config"
152328,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,500,,"        assertEquals(""transforms.xformA.type"","
152329,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,503,,"        assertEquals(""transforms.xformA.subconfig"","
152330,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,723,,"        String name = ""com.acme.connector.MyConnector"";"
152331,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,725,,"        addConfigKey(keys, ""config.a1"", null);"
152332,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,726,,"        addConfigKey(keys, ""config.b1"", ""group B"");"
152333,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,726,,"        addConfigKey(keys, ""config.b1"", ""group B"");"
152334,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,727,,"        addConfigKey(keys, ""config.b2"", ""group B"");"
152335,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,728,,"        addConfigKey(keys, ""config.c1"", ""group C"");"
152336,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,728,,"        addConfigKey(keys, ""config.c1"", ""group C"");"
152337,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,732,,"        addValue(values, ""config.a1"", ""value.a1"");"
152338,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,733,,"        addValue(values, ""config.b1"", ""value.b1"");"
152339,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,734,,"        addValue(values, ""config.b2"", ""value.b2"");"
152340,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,735,,"        addValue(values, ""config.c1"", ""value.c1"");"
152341,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,766,,"        addValue(values, ""config.c1"", ""value.c1"", ""error c1"");"
152342,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,798,,"        addValue(values, ""config.extra1"", ""value.extra1"");"
152343,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,798,,"        addValue(values, ""config.extra1"", ""value.extra1"");"
152344,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,799,,"        addValue(values, ""config.extra2"", ""value.extra2"", ""error extra2"");"
152345,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,799,,"        addValue(values, ""config.extra2"", ""value.extra2"", ""error extra2"");"
152346,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java,799,,"        addValue(values, ""config.extra2"", ""value.extra2"", ""error extra2"");"
152347,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectMetricsTest.java,72,,"            () -> metrics.group(""name"", ""k1"", ""v1"", ""k2"", ""v2"", ""extra""));"
152348,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,83,,"        props.put(""name"", ""test"");"
152349,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,83,,"        props.put(""name"", ""test"");"
152350,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,84,,"        props.put(""connector.class"", TestConnector.class.getName());"
152351,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,93,,"        props.put(""transforms"", ""dangler"");"
152352,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,113,,"        props.put(""transforms.a.type"", ""uninstantiable"");"
152353,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,136,,"        props.put(""transforms.a.magic.number"", ""40"");"
152354,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,229,,"        props.put(""transforms.a.predicate"", ""my-pred"");"
152355,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,229,,"        props.put(""transforms.a.predicate"", ""my-pred"");"
152356,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,230,,"        props.put(""predicates"", ""my-pred"");"
152357,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,231,,"        props.put(""predicates.my-pred.type"", TestConnector.class.getName());"
152358,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java,248,,"        props.put(""predicates.my-pred.int"", ""84"");"
152359,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java,134,,"    @SuppressWarnings(""unused"")"
152360,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java,307,,"        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, ""true"");"
152361,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java,369,,"        Schema valSchema = SchemaBuilder.struct().field(""val"", Schema.INT32_SCHEMA).build();"
152362,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/RestartPlanTest.java,32,,"    private static final String CONNECTOR_NAME = ""foo"";"
152363,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/RestartPlanTest.java,42,,"        tasks.add(new TaskState(1, AbstractStatus.State.RUNNING.name(), ""worker1"", null));"
152364,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,50,,"        connProps.put(""name"", ""foo"");"
152365,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,50,,"        connProps.put(""name"", ""foo"");"
152366,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,51,,"        connProps.put(""connector.class"", MockConnector.class.getName());"
152367,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,52,,"        connProps.put(""transforms"", ""example"");"
152368,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,52,,"        connProps.put(""transforms"", ""example"");"
152369,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,53,,"        connProps.put(""transforms.example.type"", Cast.Value.class.getName());"
152370,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/TransformationConfigTest.java,68,,"        connProps.put(""transforms.example.field"", ""field"");"
152371,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConfigTest.java,68,,"        props.put(WorkerConfig.LISTENERS_CONFIG, ""http://a.b:9999"");"
152372,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConfigTest.java,86,,"        assertTrue(ce.getMessage().contains("" listeners""));"
152373,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,210,,"        assertSinkMetricValue(""partition-count"", 2);"
152374,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,211,,"        assertTaskMetricValue(""status"", ""paused"");"
152375,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,212,,"        assertTaskMetricValue(""running-ratio"", 0.0);"
152376,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,213,,"        assertTaskMetricValue(""pause-ratio"", 1.0);"
152377,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,214,,"        assertTaskMetricValue(""offset-commit-max-time-ms"", Double.NaN);"
152378,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,274,,"        assertSinkMetricValue(""sink-record-read-total"", 1.0);"
152379,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,275,,"        assertSinkMetricValue(""sink-record-send-total"", 1.0);"
152380,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,276,,"        assertSinkMetricValue(""sink-record-active-count"", 1.0);"
152381,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,277,,"        assertSinkMetricValue(""sink-record-active-count-max"", 1.0);"
152382,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,278,,"        assertSinkMetricValue(""sink-record-active-count-avg"", 0.333333);"
152383,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,279,,"        assertSinkMetricValue(""offset-commit-seq-no"", 0.0);"
152384,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,280,,"        assertSinkMetricValue(""offset-commit-completion-rate"", 0.0);"
152385,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,281,,"        assertSinkMetricValue(""offset-commit-completion-total"", 0.0);"
152386,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,282,,"        assertSinkMetricValue(""offset-commit-skip-rate"", 0.0);"
152387,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,283,,"        assertSinkMetricValue(""offset-commit-skip-total"", 0.0);"
152388,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,284,,"        assertTaskMetricValue(""status"", ""running"");"
152389,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,287,,"        assertTaskMetricValue(""batch-size-max"", 1.0);"
152390,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,288,,"        assertTaskMetricValue(""batch-size-avg"", 0.5);"
152391,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,290,,"        assertTaskMetricValue(""offset-commit-failure-percentage"", 0.0);"
152392,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,291,,"        assertTaskMetricValue(""offset-commit-success-percentage"", 0.0);"
152393,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,572,,"        assertTaskMetricValue(""offset-commit-avg-time-ms"", 0.0);"
152394,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,696,,"        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, ""lastCommittedOffsets""));"
152395,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,787,,"        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, ""currentOffsets""));"
152396,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,1422,,"        assertEquals(0.333, metrics.currentMetricValueAsDouble(group.metricGroup(), ""sink-record-read-rate""), 0.001d);"
152397,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java,1423,,"        assertEquals(0.667, metrics.currentMetricValueAsDouble(group.metricGroup(), ""sink-record-send-rate""), 0.001d);"
152398,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java,261,,"        assertEquals(false, Whitebox.getInternalState(workerTask, ""committing""));"
152399,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,118,,"    private static final String TOPIC = ""topic"";"
152400,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,207,,"        props.put(TOPIC_CREATION_GROUPS_CONFIG, String.join("","", ""foo"", ""bar""));"
152401,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,634,,"        Whitebox.setInternalState(workerTask, ""toSend"", records);"
152402,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,635,,"        Whitebox.invokeMethod(workerTask, ""sendRecords"");"
152403,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,732,,"        assertEquals(true, Whitebox.getInternalState(workerTask, ""lastSendFailed""));"
152404,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,958,,"        headersA.addString(""encoding"", encodingA);"
152405,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java,1035,,"            .andThrow(new RetriableException(new TimeoutException(""timeout"")));"
152406,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java,79,,"        ConnectorTaskId taskId = new ConnectorTaskId(""foo"", 0);"
152407,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,232,,"        EasyMock.expect(sourceConnector.version()).andReturn(""1.0"");"
152408,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,762,,"            .andReturn(new ConnectorStateInfo.TaskState(0, ""RUNNING"", ""worker"", ""msg""));"
152409,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,762,,"            .andReturn(new ConnectorStateInfo.TaskState(0, ""RUNNING"", ""worker"", ""msg""));"
152410,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1089,,"        expectedConfigs.put(""client.id"", ""connector-producer-job-0"");"
152411,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1090,,"        expectedConfigs.put(""metrics.context.connect.kafka.cluster.id"", CLUSTER_ID);"
152412,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1099,,"        props.put(""producer.linger.ms"", ""1000"");"
152413,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1100,,"        props.put(""producer.client.id"", ""producer-test-id"");"
152414,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1126,,"        expectedConfigs.put(""linger.ms"", ""5000"");"
152415,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1150,,"        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(""test"", 1), config, connectorConfig,"
152416,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1157,,"        props.put(""consumer.auto.offset.reset"", ""latest"");"
152417,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java,1165,,"        expectedConfigs.put(""max.poll.records"", ""1000"");"
152418,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTestUtils.java,53,,"                .mapToObj(i -> ""connector"" + i)"
152419,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/ConnectProtocolCompatibilityTest.java,147,,"                ConnectProtocol.Assignment.NO_ERROR, ""leader"", LEADER_URL, 1L,"
152420,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/ConnectProtocolCompatibilityTest.java,159,,"                ConnectProtocol.Assignment.NO_ERROR, ""member"", LEADER_URL, 1L,"
152421,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java,213,,"        topicSettings.put(""foo"", ""foo value"");"
152422,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java,213,,"        topicSettings.put(""foo"", ""foo value"");"
152423,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java,214,,"        topicSettings.put(""bar"", ""bar value"");"
152424,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java,214,,"        topicSettings.put(""bar"", ""bar value"");"
152425,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java,215,,"        topicSettings.put(""baz.bim"", ""100"");"
152426,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java,215,,"        topicSettings.put(""baz.bim"", ""100"");"
152427,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java,132,,"    private static final String FOO_TOPIC = ""foo"";"
152428,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java,251,,"        EasyMock.expect(member.memberId()).andStubReturn(""member"");"
152429,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java,685,,"        EasyMock.expect(member.memberId()).andStubReturn(""leader"");"
152430,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java,910,,"        assertStatistics(""leaderUrl"", false, 3, 1, 100, 1000L);"
152431,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java,1038,,"            fail(""Expected NotLeaderException to be raised"");"
152432,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,100,,"        leader = ""worker1"";"
152433,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,142,,"        memberConfigs.put(""worker2"", new ExtendedWorkerState(leaderUrl, offset, null));"
152434,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,353,,"        memberConfigs.put(""worker3"", new ExtendedWorkerState(leaderUrl, offset, null));"
152435,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,719,,"        expectedAssignment.get(0).tasks().addAll(Arrays.asList(new ConnectorTaskId(""task"", 6), new ConnectorTaskId(""task"", 9)));"
152436,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,733,,"        existingAssignment.add(workerLoad(""worker0"", 0, 2, 0, 2));"
152437,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,772,,"        assertThat(""Wrong set of workers for reassignments"","
152438,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,819,,"        assertTrue(""Wrong assignment of lost connectors"","
152439,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,823,,"        assertTrue(""Wrong assignment of lost tasks"","
152440,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java,1253,,"                .mapToObj(i -> ""connector"" + i)"
152441,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/WorkerCoordinatorTest.java,245,,"        final String consumerId = ""leader"";"
152442,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/WorkerCoordinatorTest.java,253,,"        memberConfigOffsets.put(""member"", 1L);"
152443,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java,194,,"        LogReporter logReporter = new LogReporter(TASK_ID, config(singletonMap(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, ""true"")), errorHandlingMetrics);"
152444,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java,267,,"        context.consumerRecord(new ConsumerRecord<>(""source-topic"", 7, 10, ""source-key"".getBytes(), ""source-value"".getBytes()));"
152445,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java,267,,"        context.consumerRecord(new ConsumerRecord<>(""source-topic"", 7, 10, ""source-key"".getBytes(), ""source-value"".getBytes()));"
152446,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java,267,,"        context.consumerRecord(new ConsumerRecord<>(""source-topic"", 7, 10, ""source-key"".getBytes(), ""source-value"".getBytes()));"
152447,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperatorTest.java,152,,"        testHandleExceptionInStage(Stage.TASK_PUT, new org.apache.kafka.connect.errors.RetriableException(""Test""));"
152448,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginDescTest.java,51,,"    @SuppressWarnings(""rawtypes"")"
152449,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginsTest.java,76,,"        props.put(""key.converter."" + JsonConverterConfig.SCHEMAS_ENABLE_CONFIG, ""true"");"
152450,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginsTest.java,95,,"        assertEquals(""foo1"", converter.configs.get(""extra.config""));"
152451,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginsTest.java,197,,"        assertInstanceOf(SamplingTestPlugin.class, firstPlugin, ""Cannot collect samples"");"
152452,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/PluginsTest.java,267,,"        assertTrue(samples.containsKey(""configure""));"
152453,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/SynchronizationTest.java,236,,"                new ConfigDef().define(""a.class"", Type.CLASS, Importance.HIGH, """"),"
152454,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java,172,,"        HttpOptions request = new HttpOptions(""/connectors"");"
152455,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java,299,,"        String responseStr = executeGet(host, port, ""/admin/loggers"");"
152456,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java,94,,"        partialProps.put(""test.string.config"", ""testString"");"
152457,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java,95,,"        partialProps.put(""test.int.config"", ""1"");"
152458,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java,96,,"        partialProps.put(""test.list.config"", ""a,b"");"
152459,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java,127,,"        configKeyInfo = new ConfigKeyInfo(""test.int.config"", ""INT"", true, null, ""MEDIUM"", ""Test configuration for integer type."", ""Test"", 1, ""MEDIUM"", ""test.int.config"", Collections.emptyList());"
152460,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java,133,,"        configKeyInfo = new ConfigKeyInfo(""test.string.config.default"", ""STRING"", false, """", ""LOW"", ""Test configuration with default value."", null, -1, ""NONE"", ""test.string.config.default"", Collections.emptyList());"
152461,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,103,,"        CONNECTOR_CONFIG_SPECIAL_CHARS.put(""sample_config"", ""test_config"");"
152462,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,103,,"        CONNECTOR_CONFIG_SPECIAL_CHARS.put(""sample_config"", ""test_config"");"
152463,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,200,,"        queryParams.putSingle(""expand"", ""status"");"
152464,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,200,,"        queryParams.putSingle(""expand"", ""status"");"
152465,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,224,,"        queryParams.putSingle(""expand"", ""info"");"
152466,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,316,,"        EasyMock.expect(RestClient.httpRequest(EasyMock.eq(""http://leader:8083/connectors?forward=false""), EasyMock.eq(""POST""), EasyMock.isNull(), EasyMock.eq(body), EasyMock.anyObject(), EasyMock.anyObject(WorkerConfig.class)))"
152467,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,458,,"        EasyMock.expect(RestClient.httpRequest(""http://leader:8083/connectors/"" + CONNECTOR_NAME + ""?forward=false"", ""DELETE"", NULL_HEADERS, null, null, workerConfig))"
152468,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,473,,"        expectAndCallbackException(cb, new NotFoundException(""not found""));"
152469,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java,601,,"        Assert.assertEquals(""/connectors/"" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);"
152470,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java,46,,"        Logger root = new Logger(""root"") {"
152471,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java,59,,"        assertEquals(""INFO"", loggers.get(""b"").get(""level""));"
152472,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java,105,,"        Logger p = hierarchy.getLogger(""a.b.c.p"");"
152473,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java,106,,"        Logger x = hierarchy.getLogger(""a.b.c.p.X"");"
152474,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java,107,,"        Logger y = hierarchy.getLogger(""a.b.c.p.Y"");"
152475,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java,108,,"        Logger z = hierarchy.getLogger(""a.b.c.p.Z"");"
152476,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,41,,"        DEFAULT_CONFIG.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, ""org.apache.kafka.connect.json.JsonConverter"");"
152477,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,62,,"        configMap.put(""ssl.keystore.location"", ""/path/to/keystore"");"
152478,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,62,,"        configMap.put(""ssl.keystore.location"", ""/path/to/keystore"");"
152479,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,63,,"        configMap.put(""ssl.keystore.password"", ""123456"");"
152480,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,63,,"        configMap.put(""ssl.keystore.password"", ""123456"");"
152481,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,64,,"        configMap.put(""ssl.key.password"", ""123456"");"
152482,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,65,,"        configMap.put(""ssl.truststore.location"", ""/path/to/truststore"");"
152483,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,65,,"        configMap.put(""ssl.truststore.location"", ""/path/to/truststore"");"
152484,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,66,,"        configMap.put(""ssl.truststore.password"", ""123456"");"
152485,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,67,,"        configMap.put(""ssl.provider"", ""SunJSSE"");"
152486,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,67,,"        configMap.put(""ssl.provider"", ""SunJSSE"");"
152487,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,68,,"        configMap.put(""ssl.cipher.suites"", ""SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_RC4_128_MD5"");"
152488,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,68,,"        configMap.put(""ssl.cipher.suites"", ""SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_RC4_128_MD5"");"
152489,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,69,,"        configMap.put(""ssl.secure.random.implementation"", ""SHA1PRNG"");"
152490,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,69,,"        configMap.put(""ssl.secure.random.implementation"", ""SHA1PRNG"");"
152491,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,72,,"        configMap.put(""ssl.keystore.type"", ""JKS"");"
152492,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,73,,"        configMap.put(""ssl.protocol"", ""TLS"");"
152493,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,76,,"        configMap.put(""ssl.keymanager.algorithm"", ""SunX509"");"
152494,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/util/SSLUtilsTest.java,77,,"        configMap.put(""ssl.trustmanager.algorithm"", ""PKIX"");"
152495,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java,54,,"        firstSet.put(buffer(""key""), buffer(""value""));"
152496,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java,95,,"    private static final List<String> CONNECTOR_IDS = Arrays.asList(""connector1"", ""connector2"");"
152497,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java,95,,"    private static final List<String> CONNECTOR_IDS = Arrays.asList(""connector1"", ""connector2"");"
152498,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java,119,,"            new Struct(KafkaConfigBackingStore.CONNECTOR_CONFIGURATION_V0).put(""properties"", SAMPLE_CONFIGS.get(0)),"
152499,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java,130,,"            = new Struct(KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0).put(""tasks"", 2);"
152500,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreFormatTest.java,170,,"        TopicStatus topicStatus = new TopicStatus(""foo"", new ConnectorTaskId(""bar"", 0), Time.SYSTEM.milliseconds());"
152501,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreFormatTest.java,170,,"        TopicStatus topicStatus = new TopicStatus(""foo"", new ConnectorTaskId(""bar"", 0), Time.SYSTEM.milliseconds());"
152502,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java,104,,"        kafkaBasedLog.send(eq(""status-connector-conn""), eq(value), capture(callbackCapture));"
152503,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java,181,,"        statusMap.put(""worker_id"", otherWorkerId);"
152504,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java,182,,"        statusMap.put(""state"", ""RUNNING"");"
152505,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java,182,,"        statusMap.put(""state"", ""RUNNING"");"
152506,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java,183,,"        statusMap.put(""generation"", 1L);"
152507,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java,337,,"        kafkaBasedLog.send(eq(""status-task-conn-0""), eq(value), capture(callbackCapture));"
152508,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/MemoryStatusBackingStoreTest.java,34,,"        ConnectorStatus status = new ConnectorStatus(""connector"", ConnectorStatus.State.RUNNING, ""localhost:8083"", 0);"
152509,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/MemoryStatusBackingStoreTest.java,34,,"        ConnectorStatus status = new ConnectorStatus(""connector"", ConnectorStatus.State.RUNNING, ""localhost:8083"", 0);"
152510,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/storage/OffsetStorageWriterTest.java,79,,"        @SuppressWarnings(""unchecked"")"
152511,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/ConnectUtilsTest.java,79,,"        props.put(DistributedConfig.KEY_CONVERTER_CLASS_CONFIG, ""org.apache.kafka.connect.json.JsonConverter"");"
152512,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/ConnectUtilsTest.java,84,,"        ConnectUtils.addMetricsContextProperties(prop, config, ""cluster-1"");"
152513,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/KafkaBasedLogTest.java,168,,"        assertFalse(Whitebox.<Thread>getInternalState(store, ""thread"").isAlive());"
152514,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TableTest.java,32,,"        table.put(""foo"", 5, ""bar"");"
152515,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TableTest.java,32,,"        table.put(""foo"", 5, ""bar"");"
152516,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TableTest.java,33,,"        table.put(""foo"", 6, ""baz"");"
152517,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java,86,,"        final NewTopic newTopic = TopicAdmin.defineTopic(""myTopic"").partitions(1).compacted().build();"
152518,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java,382,,"            boolean result = admin.verifyTopicCleanupPolicyOnlyCompact(""myTopic"", ""worker.topic"", ""purpose"");"
152519,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java,382,,"            boolean result = admin.verifyTopicCleanupPolicyOnlyCompact(""myTopic"", ""worker.topic"", ""purpose"");"
152520,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java,414,,"        Map<String, String> topicConfigs = Collections.singletonMap(""cleanup.policy"", ""compact"");"
152521,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java,684,,"                new ApiError(Errors.UNSUPPORTED_VERSION, ""This version of the API is not supported""),"
152522,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java,691,,"                new ApiError(Errors.CLUSTER_AUTHORIZATION_FAILED, ""Not authorized to create topic(s)""),"
152523,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicCreationTest.java,502,,"        sourceProps.put(""transforms."" + xformName + "".type"", Cast.Value.class.getName());"
152524,./TargetProjects/kafka/connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedKafkaCluster.java,161,,"            producerProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, ""SSL"");"
152525,./TargetProjects/kafka/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/Cast.java,235,,"                throw new DataException(""Unexpected type in Cast transformation: "" + type);"
152526,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,94,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""foo:int64""));"
152527,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,95,,"        SourceRecord original = new SourceRecord(null, null, ""topic"", 0,"
152528,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,130,,"        xformKey.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""int8""));"
152529,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,150,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""int16""));"
152530,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,160,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""int32""));"
152531,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,170,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""int64""));"
152532,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,180,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""float32""));"
152533,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,190,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""float64""));"
152534,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,200,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""boolean""));"
152535,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,220,,"        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, ""string""));"
152536,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,386,,"        builder.field(""date_to_int32"", org.apache.kafka.connect.data.Date.SCHEMA);"
152537,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,387,,"        builder.field(""timestamp_to_int64"", Timestamp.SCHEMA);"
152538,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,388,,"        builder.field(""time_to_int64"", Time.SCHEMA);"
152539,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,389,,"        builder.field(""decimal_to_int32"", Decimal.schema(new BigDecimal((long) Integer.MAX_VALUE + 1).scale()));"
152540,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,390,,"        builder.field(""timestamp_to_float64"", Timestamp.SCHEMA);"
152541,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,391,,"        builder.field(""null_timestamp_to_int32"", Timestamp.builder().optional().build());"
152542,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,433,,"        builder.field(""date"", org.apache.kafka.connect.data.Date.SCHEMA);"
152543,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,434,,"        builder.field(""decimal"", Decimal.schema(new BigDecimal(1982).scale()));"
152544,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,435,,"        builder.field(""time"", Time.SCHEMA);"
152545,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,436,,"        builder.field(""timestamp"", Timestamp.SCHEMA);"
152546,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,482,,"        builder.field(""bigdecimal"", Decimal.schema(new BigDecimal(42).scale()));"
152547,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,486,,"        builder.field(""bytes"", Schema.BYTES_SCHEMA);"
152548,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java,487,,"        builder.field(""byteArray"", Schema.BYTES_SCHEMA);"
152549,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/DropHeadersTest.java,45,,"        xform.configure(config(""to-drop""));"
152550,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/DropHeadersTest.java,47,,"        expected.addString(""existing"", ""existing-value"");"
152551,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ExtractFieldTest.java,43,,"        xform.configure(Collections.singletonMap(""field"", ""magic""));"
152552,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ExtractFieldTest.java,43,,"        xform.configure(Collections.singletonMap(""field"", ""magic""));"
152553,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ExtractFieldTest.java,45,,"        final SinkRecord record = new SinkRecord(""test"", 0, null, Collections.singletonMap(""magic"", 42), null, null, 0);"
152554,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java,55,,"                ""topic"", 0, Schema.INT32_SCHEMA, 42)));"
152555,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java,78,,"        builder.field(""bytes"", Schema.BYTES_SCHEMA);"
152556,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java,97,,"        supportedTypes.put(""string"", ""stringy"");"
152557,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java,167,,"        builder.field(""opt_int32"", Schema.OPTIONAL_INT32_SCHEMA);"
152558,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java,310,,"        final SourceRecord record = new SourceRecord(null, null, ""test"", 0,"
152559,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,105,,"            Map<String, ?> sourcePartition = singletonMap(""foo"", ""bar"");"
152560,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,148,,"                        .withField(""field1"", STRING_SCHEMA, ""field1-value"")"
152561,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,148,,"                        .withField(""field1"", STRING_SCHEMA, ""field1-value"")"
152562,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,149,,"                        .withField(""field2"", STRING_SCHEMA, ""field2-value"")"
152563,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,149,,"                        .withField(""field2"", STRING_SCHEMA, ""field2-value"")"
152564,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,150,,"                        .addHeader(""header1"", STRING_SCHEMA, ""existing-value""),"
152565,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,150,,"                        .addHeader(""header1"", STRING_SCHEMA, ""existing-value""),"
152566,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HeaderFromTest.java,151,,"                    singletonList(""field1""), singletonList(""inserted1""), HeaderFrom.Operation.COPY,"
152567,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/HoistFieldTest.java,40,,"        xform.configure(Collections.singletonMap(""field"", ""magic""));"
152568,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,49,,"        xformValue.configure(Collections.singletonMap(""topic.field"", ""topic_field""));"
152569,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,49,,"        xformValue.configure(Collections.singletonMap(""topic.field"", ""topic_field""));"
152570,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,57,,"        props.put(""topic.field"", ""topic_field!"");"
152571,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,58,,"        props.put(""partition.field"", ""partition_field"");"
152572,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,58,,"        props.put(""partition.field"", ""partition_field"");"
152573,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,59,,"        props.put(""timestamp.field"", ""timestamp_field?"");"
152574,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,59,,"        props.put(""timestamp.field"", ""timestamp_field?"");"
152575,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,60,,"        props.put(""static.field"", ""instance_id"");"
152576,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,60,,"        props.put(""static.field"", ""instance_id"");"
152577,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,61,,"        props.put(""static.value"", ""my-instance-id"");"
152578,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,61,,"        props.put(""static.value"", ""my-instance-id"");"
152579,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,65,,"        final Schema simpleStructSchema = SchemaBuilder.struct().name(""name"").version(1).doc(""doc"").field(""magic"", Schema.OPTIONAL_INT64_SCHEMA).build();"
152580,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,68,,"        final SourceRecord record = new SourceRecord(null, null, ""test"", 0, null, null, simpleStructSchema, simpleStruct, 789L);"
152581,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java,84,,"        assertEquals(Timestamp.builder().optional().build(), transformedRecord.valueSchema().field(""timestamp_field"").schema());"
152582,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertHeaderTest.java,46,,"        xform.configure(config(""inserted"", ""inserted-value""));"
152583,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertHeaderTest.java,46,,"        xform.configure(config(""inserted"", ""inserted-value""));"
152584,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertHeaderTest.java,48,,"        headers.addString(""existing"", ""existing-value"");"
152585,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,48,,"            .field(""magic"", Schema.INT32_SCHEMA)"
152586,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,49,,"            .field(""bool"", Schema.BOOLEAN_SCHEMA)"
152587,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,50,,"            .field(""byte"", Schema.INT8_SCHEMA)"
152588,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,51,,"            .field(""short"", Schema.INT16_SCHEMA)"
152589,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,52,,"            .field(""int"", Schema.INT32_SCHEMA)"
152590,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,53,,"            .field(""long"", Schema.INT64_SCHEMA)"
152591,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,54,,"            .field(""float"", Schema.FLOAT32_SCHEMA)"
152592,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,55,,"            .field(""double"", Schema.FLOAT64_SCHEMA)"
152593,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,56,,"            .field(""string"", Schema.STRING_SCHEMA)"
152594,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,57,,"            .field(""date"", org.apache.kafka.connect.data.Date.SCHEMA)"
152595,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,58,,"            .field(""time"", Time.SCHEMA)"
152596,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,59,,"            .field(""timestamp"", Timestamp.SCHEMA)"
152597,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,60,,"            .field(""decimal"", Decimal.schema(0))"
152598,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,61,,"            .field(""array"", SchemaBuilder.array(Schema.INT32_SCHEMA))"
152599,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,62,,"            .field(""map"", SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.STRING_SCHEMA))"
152600,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,78,,"        VALUES.put(""bigint"", new BigInteger(""42""));"
152601,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,79,,"        VALUES.put(""bigdec"", new BigDecimal(""42.0""));"
152602,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,192,,"        checkReplacementSchemaless(""string"", ""123"");"
152603,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/MaskFieldTest.java,236,,"        assertThrows(exClass, () -> checkReplacementSchemaless(""byte"", ""foo""), exMessage);"
152604,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/RegexRouterTest.java,47,,"        assertEquals(""orig"", apply(""foo"", ""bar"", ""orig""));"
152605,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,43,,"        props.put(""include"", ""abc,foo"");"
152606,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,44,,"        props.put(""renames"", ""abc:xyz,foo:bar"");"
152607,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,44,,"        props.put(""renames"", ""abc:xyz,foo:bar"");"
152608,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,48,,"        final SinkRecord record = new SinkRecord(""test"", 0, null, null, null, null, 0);"
152609,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,64,,"            .field(""dont"", Schema.STRING_SCHEMA)"
152610,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,65,,"            .field(""abc"", Schema.INT32_SCHEMA)"
152611,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,66,,"            .field(""foo"", Schema.BOOLEAN_SCHEMA)"
152612,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/ReplaceFieldTest.java,67,,"            .field(""etc"", Schema.STRING_SCHEMA)"
152613,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java,45,,"        xform.configure(Collections.singletonMap(""schema.name"", ""foo""));"
152614,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/TimestampConverterTest.java,101,,"            () -> xformValue.configure(Collections.singletonMap(TimestampConverter.TARGET_TYPE_CONFIG, ""string"")));"
152615,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/TimestampConverterTest.java,116,,"        xformValue.configure(Collections.singletonMap(TimestampConverter.TARGET_TYPE_CONFIG, ""Timestamp""));"
152616,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/TimestampConverterTest.java,125,,"        xformValue.configure(Collections.singletonMap(TimestampConverter.TARGET_TYPE_CONFIG, ""Date""));"
152617,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/TimestampConverterTest.java,134,,"        xformValue.configure(Collections.singletonMap(TimestampConverter.TARGET_TYPE_CONFIG, ""Time""));"
152618,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/TimestampConverterTest.java,143,,"        xformValue.configure(Collections.singletonMap(TimestampConverter.TARGET_TYPE_CONFIG, ""unix""));"
152619,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/TimestampConverterTest.java,463,,"                .field(""other"", Schema.STRING_SCHEMA);"
152620,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/predicates/HasHeaderKeyTest.java,52,,"        props.put(""name"", """");"
152621,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/predicates/HasHeaderKeyTest.java,60,,"        predicate.config().validate(Collections.singletonMap(""name"", ""foo""));"
152622,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/predicates/HasHeaderKeyTest.java,72,,"        assertTrue(predicate.test(recordWithHeaders(""foo"", ""bar"")));"
152623,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/predicates/TopicNameMatchesTest.java,47,,"        props.put(""pattern"", """");"
152624,./TargetProjects/kafka/connect/transforms/src/test/java/org/apache/kafka/connect/transforms/util/NonEmptyListValidatorTest.java,30,,"        assertThrows(ConfigException.class, () -> new NonEmptyListValidator().ensureValid(""foo"", null));"
152625,./TargetProjects/kafka/core/src/test/java/kafka/test/ClusterTestExtensionsTest.java,54,,"        Assertions.assertSame(this.config, config, ""Injected objects should be the same"");"
152626,./TargetProjects/kafka/core/src/test/java/kafka/test/ClusterTestExtensionsTest.java,86,,"            @ClusterConfigProperty(key = ""foo"", value = ""bar""),"
152627,./TargetProjects/kafka/core/src/test/java/kafka/test/ClusterTestExtensionsTest.java,87,,"            @ClusterConfigProperty(key = ""spam"", value = ""eggs"")"
152628,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java,151,,"        generateNewApiMessageMethod(""request"");"
152629,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java,153,,"        generateNewApiMessageMethod(""response"");"
152630,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java,176,,"        buffer.printf(""}%n"");"
152631,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/FieldSpec.java,141,,"                throw new RuntimeException(""Field "" + name + "" specifies a tag of "" + this.tag.get() +"
152632,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/FieldSpec.java,407,,"            if (fieldDefault.equals(""null"")) {"
152633,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/JsonConverterGenerator.java,66,,"            buffer.printf(""}%n"");"
152634,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/JsonConverterGenerator.java,150,,"            buffer.printf(""%s;%n"", target.assignmentStatement("
152635,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,126,,"            buffer.printf(""}%n"");"
152636,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,324,,"            buffer.printf(""@Override%n"");"
152637,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,325,,"            generateAccessor(""int"", ""next"", ""next"");"
152638,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,382,,"            buffer.printf(""this.%s = %s;%n"","
152639,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,555,,"            throw new RuntimeException(""Unsupported field type "" + type);"
152640,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,710,,"                                buffer.printf(""%s;%n"","
152641,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,716,,"                                structRegistry, buffer, ""this."", field.nullableVersions());"
152642,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,718,,"                            buffer.printf(""_numTaggedFields++;%n"");"
152643,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,759,,"                                    if (!field.defaultString().equals(""null"")) {"
152644,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,1057,,"                    buffer.printf(""_size.addBytes(4);%n"");"
152645,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java,1092,,"            buffer.printf(""_size.addBytes(%d);%n"","
152646,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MetadataJsonConvertersGenerator.java,63,,"        buffer.printf(""}%n"");"
152647,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/MetadataRecordTypeGenerator.java,82,,"        buffer.printf(""}%n"");"
152648,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/SchemaGenerator.java,232,,"                throw new RuntimeException(""Type "" + type + "" cannot be nullable."");"
152649,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/SchemaGenerator.java,232,,"                throw new RuntimeException(""Type "" + type + "" cannot be nullable."");"
152650,./TargetProjects/kafka/generator/src/main/java/org/apache/kafka/message/VersionConditional.java,99,,"            buffer.printf(""}%n"");"
152651,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/IsNullConditionalTest.java,34,,"                buffer.printf(""System.out.println(\""null\"");%n"");"
152652,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/IsNullConditionalTest.java,40,,"            ""}%n"");"
152653,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/IsNullConditionalTest.java,54,,"                buffer.printf(""System.out.println(\""not null\"");%n"");"
152654,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,36,,"                ""  \""type\"": \""request\"","","
152655,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,37,,"                ""  \""name\"": \""FooBar\"","","
152656,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,38,,"                ""  \""validVersions\"": \""0-2\"","","
152657,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,40,,"                ""  \""fields\"": ["","
152658,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,48,,"                ""  ]"","
152659,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,109,,"                    ""  \""flexibleVersions\"": \""0+\"","","
152660,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageDataGeneratorTest.java,181,,"                    ""    { \""name\"": \""field1\"", \""type\"": \""string\"", \""versions\"": \""0+\"", "","
152661,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/MessageGeneratorTest.java,61,,"        assertEquals(""FooBa"", MessageGenerator.stripSuffix(""FooBar"", ""r""));"
152662,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,38,,"                ""  \""type\"": \""request\"","","
152663,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,39,,"                ""  \""name\"": \""LeaderAndIsrRequest\"","","
152664,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,40,,"                ""  \""validVersions\"": \""0-2\"","","
152665,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,41,,"                ""  \""flexibleVersions\"": \""0+\"","","
152666,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,42,,"                ""  \""fields\"": ["","
152667,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,48,,"                ""    ]}"","
152668,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,51,,"                ""    { \""name\"": \""TestCommonStruct\"", \""versions\"": \""0+\"", \""fields\"": ["","
152669,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,52,,"                ""      { \""name\"": \""commonField1\"", \""type\"": \""int64\"", \""versions\"": \""0+\"" }"","
152670,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/StructRegistryTest.java,54,,"                ""  ]"","
152671,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/VersionConditionalTest.java,47,,"                buffer.printf(""System.out.println(\""hello world\"");%n"");"
152672,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/VersionConditionalTest.java,50,,"                buffer.printf(""System.out.println(\""foobar\"");%n"");"
152673,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/VersionConditionalTest.java,124,,"            ""    System.out.println(\""hello world\"");%n"","
152674,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/VersionConditionalTest.java,125,,"            ""}%n"");"
152675,./TargetProjects/kafka/generator/src/test/java/org/apache/kafka/message/VersionConditionalTest.java,132,,"            forVersions(Versions.parse(""1+"", null), Versions.parse(""0-100"", null))."
152676,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,56,,"        hostMissingProps.put(""log4j.rootLogger"", ""INFO"");"
152677,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,57,,"        hostMissingProps.put(""log4j.appender.KAFKA"", ""org.apache.kafka.log4jappender.KafkaLog4jAppender"");"
152678,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,58,,"        hostMissingProps.put(""log4j.appender.KAFKA.layout"", ""org.apache.log4j.PatternLayout"");"
152679,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,58,,"        hostMissingProps.put(""log4j.appender.KAFKA.layout"", ""org.apache.log4j.PatternLayout"");"
152680,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,59,,"        hostMissingProps.put(""log4j.appender.KAFKA.layout.ConversionPattern"", ""%-5p: %c - %m%n"");"
152681,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,59,,"        hostMissingProps.put(""log4j.appender.KAFKA.layout.ConversionPattern"", ""%-5p: %c - %m%n"");"
152682,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,61,,"        hostMissingProps.put(""log4j.logger.kafka.log4j"", ""INFO, KAFKA"");"
152683,./TargetProjects/kafka/log4j-appender/src/test/java/org/apache/kafka/log4jappender/KafkaLog4jAppenderTest.java,61,,"        hostMissingProps.put(""log4j.logger.kafka.log4j"", ""INFO, KAFKA"");"
152684,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/controller/BrokersToIsrs.java,262,,"            throw new RuntimeException(""Broker "" + brokerId + "" has no isrMembers "" +"
152685,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/controller/ClusterControlManager.java,260,,"            throw new RuntimeException(String.format(""Unable to replay %s: no broker "" +"
152686,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/controller/QuorumControllerMetrics.java,28,,"        ""kafka.controller"", ""KafkaController"", ""ActiveControllerCount"", null);"
152687,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/controller/QuorumControllerMetrics.java,28,,"        ""kafka.controller"", ""KafkaController"", ""ActiveControllerCount"", null);"
152688,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/controller/ReplicationControlManager.java,628,,"                    log.debug(""Rejecting alterIsr request from node {} for {}-{} because "" +"
152689,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/controller/ReplicationControlManager.java,1047,,"            throw new InvalidReplicaAssignmentException(""The manual partition "" +"
152690,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/metadata/PartitionRegistration.java,103,,"                append("" -> "").append(Arrays.toString(replicas));"
152691,./TargetProjects/kafka/metadata/src/main/java/org/apache/kafka/timeline/TimelineHashMap.java,198,,"                throw new RuntimeException(""can't modify snapshot"");"
152692,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/BrokerHeartbeatManagerTest.java,178,,"            id -> id % 2 == 0 ? Optional.of(""rack1"") : Optional.of(""rack2""));"
152693,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,63,,"        assertInvalidEntity(manager, entity(ClientQuotaEntity.USER, ""user-1"", ""foo"", ""bar""));"
152694,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,183,,"        quotasToTest.put(userClientEntity(""user-1"", ""client-id-1""),"
152695,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,185,,"        quotasToTest.put(userClientEntity(""user-2"", ""client-id-1""),"
152696,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,187,,"        quotasToTest.put(userClientEntity(""user-3"", ""client-id-2""),"
152697,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,187,,"        quotasToTest.put(userClientEntity(""user-3"", ""client-id-2""),"
152698,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,212,,"                new EntityData().setEntityType(""user"").setEntityName(""user-1""),"
152699,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,213,,"                new EntityData().setEntityType(""client-id"").setEntityName(""client-id-1"")))."
152700,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClientQuotaControlManagerTest.java,214,,"                    setKey(""request_percentage"").setValue(50.5).setRemove(false), (short) 0)),"
152701,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClusterControlManagerTest.java,69,,"            setName(""PLAINTEXT"")."
152702,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ClusterControlManagerTest.java,70,,"            setHost(""example.com""));"
152703,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ConfigurationControlManagerTest.java,59,,"            define(""foo.bar"", ConfigDef.Type.LIST, ""1"", ConfigDef.Importance.HIGH, ""foo bar"")."
152704,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ConfigurationControlManagerTest.java,60,,"            define(""baz"", ConfigDef.Type.STRING, ConfigDef.Importance.HIGH, ""baz"")."
152705,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ConfigurationControlManagerTest.java,63,,"            define(""abc"", ConfigDef.Type.LIST, ConfigDef.Importance.HIGH, ""abc"")."
152706,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ConfigurationControlManagerTest.java,64,,"            define(""def"", ConfigDef.Type.STRING, ConfigDef.Importance.HIGH, ""def"")."
152707,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ConfigurationControlManagerTest.java,69,,"    static final ConfigResource MYTOPIC = new ConfigResource(TOPIC, ""mytopic"");"
152708,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/FeatureControlManagerTest.java,61,,"            rangeMap(""foo"", 1, 2), snapshotRegistry);"
152709,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/FeatureControlManagerTest.java,71,,"            rangeMap(""foo"", 1, 2, ""bar"", 1, 1), Collections.emptySet(),"
152710,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/QuorumControllerTest.java,123,,"                BROKER0, Collections.singletonMap(""baz"", entry(SET, ""123""))), true).get());"
152711,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/QuorumControllerTest.java,123,,"                BROKER0, Collections.singletonMap(""baz"", entry(SET, ""123""))), true).get());"
152712,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/QuorumControllerTest.java,173,,"                listeners.add(new Listener().setName(""PLAINTEXT"")."
152713,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/QuorumControllerTest.java,174,,"                    setHost(""localhost"").setPort(9092));"
152714,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/QuorumControllerTest.java,179,,"                        setClusterId(""06B-K3N1TBCNYFgruEVP0Q"")."
152715,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/QuorumControllerTest.java,186,,"                            new CreatableTopic().setName(""foo"").setNumPartitions(1)."
152716,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ReplicationControlManagerTest.java,230,,"        request.topics().add(new CreatableTopic().setName(""foo"")."
152717,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ReplicationControlManagerTest.java,296,,"        request.topics().add(new CreatableTopic().setName(""bar"")."
152718,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ReplicationControlManagerTest.java,298,,"        request.topics().add(new CreatableTopic().setName(""baz"")."
152719,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/controller/ReplicationControlManagerTest.java,675,,"        request.topics().add(new CreatableTopic().setName(""quux"")."
152720,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/image/ClusterImageTest.java,62,,"            Arrays.asList(new Endpoint(""PLAINTEXT"", SecurityProtocol.PLAINTEXT, ""localhost"", 9092)),"
152721,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/image/ClusterImageTest.java,62,,"            Arrays.asList(new Endpoint(""PLAINTEXT"", SecurityProtocol.PLAINTEXT, ""localhost"", 9092)),"
152722,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/image/ClusterImageTest.java,63,,"            Collections.singletonMap(""foo"", new VersionRange((short) 1, (short) 3)),"
152723,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/metadata/BrokerRegistrationTest.java,42,,"            Arrays.asList(new Endpoint(""INTERNAL"", SecurityProtocol.PLAINTEXT, ""localhost"", 9090)),"
152724,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/metadata/BrokerRegistrationTest.java,42,,"            Arrays.asList(new Endpoint(""INTERNAL"", SecurityProtocol.PLAINTEXT, ""localhost"", 9090)),"
152725,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashMapTest.java,55,,"        assertThrows(NullPointerException.class, () -> map.put(""abc"", null));"
152726,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashMapTest.java,94,,"        assertEquals(null, map.putIfAbsent(1, ""xyz""));"
152727,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashSetTest.java,92,,"        assertTrue(set.add(""xyz""));"
152728,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashSetTest.java,96,,"        assertTrue(set.addAll(Arrays.asList(""abc"", ""def"", ""ghi"")));"
152729,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashSetTest.java,96,,"        assertTrue(set.addAll(Arrays.asList(""abc"", ""def"", ""ghi"")));"
152730,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashSetTest.java,96,,"        assertTrue(set.addAll(Arrays.asList(""abc"", ""def"", ""ghi"")));"
152731,./TargetProjects/kafka/metadata/src/test/java/org/apache/kafka/timeline/TimelineHashSetTest.java,98,,"        assertTrue(set.addAll(Arrays.asList(""abc"", ""def"", ""ghi"", ""jkl"")));"
152732,./TargetProjects/kafka/raft/src/main/java/org/apache/kafka/raft/QuorumState.java,337,,"            throw new IllegalStateException(""Cannot transition to Voted with votedId="" + candidateId +"
152733,./TargetProjects/kafka/raft/src/main/java/org/apache/kafka/raft/QuorumState.java,338,,"                "" and epoch="" + epoch + "" since it matches the local broker.id"");"
152734,./TargetProjects/kafka/raft/src/main/java/org/apache/kafka/raft/QuorumState.java,378,,"            throw new IllegalStateException(""Cannot transition to Follower with leaderId="" + leaderId +"
152735,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java,553,,"        List<String> records = Arrays.asList(""foo"", ""bar"");"
152736,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java,553,,"        List<String> records = Arrays.asList(""foo"", ""bar"");"
152737,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java,1670,,"                throw new RuntimeException(""Snapshot is already frozen "" + snapshotId);"
152738,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java,1222,,"            .appendToLog(lastEpoch, singletonList(""foo""))"
152739,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java,1402,,"            epoch, ""invalid-uuid"", otherNodeId, -5L, 0, 0));"
152740,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,82,,"        raftMetrics = new KafkaRaftMetrics(metrics, ""raft"", state);"
152741,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,84,,"        assertEquals(""unattached"", getMetric(metrics, ""current-state"").metricValue());"
152742,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,84,,"        assertEquals(""unattached"", getMetric(metrics, ""current-state"").metricValue());"
152743,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,85,,"        assertEquals((double) -1L, getMetric(metrics, ""current-leader"").metricValue());"
152744,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,86,,"        assertEquals((double) -1L, getMetric(metrics, ""current-vote"").metricValue());"
152745,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,87,,"        assertEquals((double) 0, getMetric(metrics, ""current-epoch"").metricValue());"
152746,./TargetProjects/kafka/raft/src/test/java/org/apache/kafka/raft/internals/KafkaRaftMetricsTest.java,88,,"        assertEquals((double) -1L, getMetric(metrics, ""high-watermark"").metricValue());"
152747,./TargetProjects/kafka/shell/src/main/java/org/apache/kafka/shell/MetadataNode.java,32,,"                throw new RuntimeException(""Invalid zero-length path"");"
152748,./TargetProjects/kafka/shell/src/main/java/org/apache/kafka/shell/MetadataNodeManager.java,198,,"                DirectoryNode brokersNode = data.root.mkdirs(""brokers"");"
152749,./TargetProjects/kafka/shell/src/main/java/org/apache/kafka/shell/MetadataNodeManager.java,218,,"                DirectoryNode topicIdsDirectory = data.root.mkdirs(""topicIds"");"
152750,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/CommandTest.java,34,,"        assertEquals(new CatCommandHandler(Arrays.asList(""foo"")),"
152751,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/GlobVisitorTest.java,39,,"        DATA.root().mkdirs(""alpha"", ""beta"", ""gamma"");"
152752,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/GlobVisitorTest.java,39,,"        DATA.root().mkdirs(""alpha"", ""beta"", ""gamma"");"
152753,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/GlobVisitorTest.java,41,,"        DATA.root().mkdirs(""foo"", ""a"");"
152754,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/GlobVisitorTest.java,43,,"        DATA.root().mkdirs(""zeta"").create(""c"");"
152755,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/MetadataNodeTest.java,39,,"        DirectoryNode defNode = root.mkdirs(""abc"", ""def"");"
152756,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/MetadataNodeTest.java,39,,"        DirectoryNode defNode = root.mkdirs(""abc"", ""def"");"
152757,./TargetProjects/kafka/shell/src/test/java/org/apache/kafka/shell/MetadataNodeTest.java,53,,"        DirectoryNode foo = root.mkdirs(""foo"");"
152758,./TargetProjects/kafka/storage/src/main/java/org/apache/kafka/server/log/remote/metadata/storage/RemotePartitionMetadataStore.java,96,,"        Objects.requireNonNull(topicIdPartition, ""topicIdPartition can not be null"");"
152759,./TargetProjects/kafka/storage/src/test/java/org/apache/kafka/server/log/remote/metadata/storage/RemoteLogSegmentLifecycleTest.java,62,,"    @ParameterizedTest(name = ""remoteLogSegmentLifecycleManager = {0}"")"
152760,./TargetProjects/kafka/storage/src/test/java/org/apache/kafka/server/log/remote/metadata/storage/RemoteLogSegmentLifecycleTest.java,63,,"    @MethodSource(""remoteLogSegmentLifecycleManagers"")"
152761,./TargetProjects/kafka/storage/src/test/java/org/apache/kafka/server/log/remote/metadata/storage/RemoteLogSegmentLifecycleTest.java,206,,"            Utils.closeQuietly(remoteLogSegmentLifecycleManager, ""RemoteLogSegmentLifecycleManager"");"
152762,./TargetProjects/kafka/storage/src/test/java/org/apache/kafka/server/log/remote/storage/InmemoryRemoteLogMetadataManager.java,83,,"        Objects.requireNonNull(topicIdPartition, ""topicIdPartition can not be null"");"
152763,./TargetProjects/kafka/storage/src/test/java/org/apache/kafka/server/log/remote/storage/InmemoryRemoteStorageManager.java,59,,"        Objects.requireNonNull(remoteLogSegmentMetadata, ""remoteLogSegmentMetadata can not be null"");"
152764,./TargetProjects/kafka/streams/examples/src/main/java/org/apache/kafka/streams/examples/pageview/PageViewUntypedDemo.java,79,,"        final KTable<String, String> userRegions = users.mapValues(record -> record.get(""region"").textValue());"
152765,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java,159,,"        Objects.requireNonNull(consumed, ""consumed can't be null"");"
152766,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java,250,,"        Objects.requireNonNull(topic, ""topic can't be null"");"
152767,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java,252,,"        Objects.requireNonNull(materialized, ""materialized can't be null"");"
152768,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java,158,,"    @SuppressWarnings(""WeakerAccess"")"
152769,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java,581,,"        ""Accepted values are \"""" + UPGRADE_FROM_0100 + ""\"", \"""" + UPGRADE_FROM_0101 + ""\"", \"""" +"
152770,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java,68,,"                    ""-cogroup-agg-"" + counter++,"
152771,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java,81,,"    @SuppressWarnings(""unchecked"")"
152772,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImpl.java,70,,"    @SuppressWarnings(""deprecation"") // Old PAPI. Needs to be migrated."
152773,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,160,,"        Objects.requireNonNull(named, ""named can't be null"");"
152774,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,450,,"    @SuppressWarnings(""unchecked"")"
152775,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,939,,"        Objects.requireNonNull(joiner, ""joiner can't be null"");"
152776,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,1073,,"        Objects.requireNonNull(table, ""table can't be null"");"
152777,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,1075,,"        Objects.requireNonNull(joined, ""joined can't be null"");"
152778,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,1287,,"        Objects.requireNonNull(transformerSupplier, ""transformerSupplier can't be null"");"
152779,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,1314,,"        Objects.requireNonNull(stateStoreNames, ""stateStoreNames can't be a null array"");"
152780,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java,1343,,"        Objects.requireNonNull(valueTransformerSupplier, ""valueTransformerSupplier can't be null"");"
152781,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java,226,,"        Objects.requireNonNull(predicate, ""predicate can't be null"");"
152782,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java,241,,"        Objects.requireNonNull(materialized, ""materialized can't be null"");"
152783,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java,343,,"        Objects.requireNonNull(mapper, ""mapper can't be null"");"
152784,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java,589,,"    @SuppressWarnings(""unchecked"")"
152785,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.java,31,,"    @SuppressWarnings(""unchecked"")"
152786,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java,297,,"                ""Cleanup policy ("" + TopicConfig.CLEANUP_POLICY_CONFIG + "") of existing internal topic """
152787,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java,448,,"                                    ""Error message was: {}"", topicName, retryBackOffMs,"
152788,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java,405,,"        Objects.requireNonNull(name, ""name must not be null"");"
152789,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java,407,,"            throw new TopologyException(""Processor "" + name + "" is already added."");"
152790,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java,407,,"            throw new TopologyException(""Processor "" + name + "" is already added."");"
152791,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java,902,,"        Objects.requireNonNull(applicationId, ""topology has not completed optimization"");"
152792,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java,924,,"    @SuppressWarnings(""unchecked"")"
152793,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/PartitionGroup.java,213,,"            throw new IllegalStateException(""Partition "" + partition + "" not found."");"
152794,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/PartitionGroup.java,213,,"            throw new IllegalStateException(""Partition "" + partition + "" not found."");"
152795,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java,109,,"            throw new IllegalStateException(""Illegal state "" + state() + "" while initializing standby task "" + id);"
152796,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java,794,,"            throw new IllegalStateException(""The current assignment "" + restoreConsumer.assignment() + "" "" +"
152797,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java,272,,"                throw new IllegalStateException(""Illegal state "" + state() + "" while completing restoration for active task "" + id);"
152798,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java,275,,"                throw new IllegalStateException(""Unknown state "" + state() + "" while completing restoration for active task "" + id);"
152799,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java,318,,"    @SuppressWarnings(""unchecked"")"
152800,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/ReadOnlySessionStore.java,52,,"            ""This API is not supported by this implementation of ReadOnlySessionStore."");"
152801,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/SessionStore.java,49,,"                prepareMillisCheckFailMsgPrefix(earliestSessionEndTime, ""earliestSessionEndTime"")),"
152802,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/SessionStore.java,51,,"                prepareMillisCheckFailMsgPrefix(latestSessionStartTime, ""latestSessionStartTime"")));"
152803,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/Stores.java,92,,"        Objects.requireNonNull(name, ""name cannot be null"");"
152804,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/Stores.java,237,,"        final String rpMsgPrefix = prepareMillisCheckFailMsgPrefix(retentionPeriod, ""retentionPeriod"");"
152805,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/Stores.java,255,,"            throw new IllegalArgumentException(""retentionPeriod cannot be negative"");"
152806,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/Stores.java,380,,"        Objects.requireNonNull(supplier, ""supplier cannot be null"");"
152807,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/WindowStore.java,94,,"            ApiUtils.validateMillisecondInstant(timeFrom, prepareMillisCheckFailMsgPrefix(timeFrom, ""timeFrom"")),"
152808,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/WindowStore.java,95,,"            ApiUtils.validateMillisecondInstant(timeTo, prepareMillisCheckFailMsgPrefix(timeTo, ""timeTo"")));"
152809,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingKeyValueStore.java,133,,"        Objects.requireNonNull(key, ""key cannot be null"");"
152810,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyKeyValueStore.java,61,,"                throw new InvalidStateStoreException(""State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata."");"
152811,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlySessionStore.java,49,,"        Objects.requireNonNull(key, ""key can't be null"");"
152812,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlySessionStore.java,63,,"                    ""State store  ["" + storeName + ""] is not available anymore"" +"
152813,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlySessionStore.java,63,,"                    ""State store  ["" + storeName + ""] is not available anymore"" +"
152814,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlySessionStore.java,64,,"                        "" and may have been migrated to another instance; "" +"
152815,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlySessionStore.java,65,,"                        ""please re-discover its location from the state metadata."","
152816,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java,156,,"        Objects.requireNonNull(key, ""key cannot be null"");"
152817,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java,208,,"        Objects.requireNonNull(keyFrom, ""from key cannot be null"");"
152818,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java,209,,"        Objects.requireNonNull(keyTo, ""to key cannot be null"");"
152819,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java,208,,"        Objects.requireNonNull(key, ""key cannot be null"");"
152820,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java,221,,"        Objects.requireNonNull(key, ""key cannot be null"");"
152821,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java,266,,"        Objects.requireNonNull(keyFrom, ""keyFrom cannot be null"");"
152822,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java,267,,"        Objects.requireNonNull(keyTo, ""keyTo cannot be null"");"
152823,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java,185,,"        Objects.requireNonNull(key, ""key cannot be null"");"
152824,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java,281,,"        Objects.requireNonNull(key, ""key cannot be null"");"
152825,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBTimestampedStore.java,126,,"                    throw new ProcessorStateException(""Error while removing key from store "" + name, e);"
152826,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java,139,,"                ""Please open a bug report under https://issues.apache.org/jira/projects/KAFKA/issues"");"
152827,./TargetProjects/kafka/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java,161,,"            throw new IllegalStateException(""Value providers for store "" + segmentName + "" of task "" + taskId +"
152828,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,331,,"                ""processId-StreamThread-"" + threadId,"
152829,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,397,,"                ""Streams never started."");"
152830,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,461,,"        builder.globalTable(""anyTopic"");"
152831,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,497,,"                    ""Thread never stopped."");"
152832,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,769,,"            assertThrows(StreamsNotStartedException.class, () -> streams.streamsMetadataForStore(""store""));"
152833,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,781,,"            assertThrows(StreamsNotStartedException.class, () -> streams.queryMetadataForKey(""store"", ""key"", Serdes.String().serializer()));"
152834,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,974,,"        topology.addSource(""source"", Serdes.String().deserializer(), Serdes.String().deserializer(), inputTopic)"
152835,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java,975,,"                .addProcessor(""process"", () -> new Processor<String, String, String, String>() {"
152836,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,99,,"                Stores.inMemoryKeyValueStore(""store""),"
152837,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,103,,"            ""topic"","
152838,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,154,,"            topology.processorConnectedStateStores(""KSTREAM-JOIN-0000000005""),"
152839,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,291,,"            topology.processorConnectedStateStores(""KTABLE-SOURCE-0000000002""),"
152840,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,300,,"        final KStream<String, String> source = builder.stream(""topic-source"");"
152841,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,403,,"            inputTopic.pipeInput(1L, ""value1"");"
152842,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,404,,"            inputTopic.pipeInput(2L, ""value2"");"
152843,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,482,,"            equalTo(Collections.singletonMap(""store"", ""appId-store-changelog""))"
152844,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,539,,"        assertNamesForOperation(topology, expected, ""KSTREAM-SOURCE-0000000001"");"
152845,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,582,,"        assertNamesForOperation(topology, ""KSTREAM-SOURCE-0000000000"", expected, ""KSTREAM-SINK-0000000002"");"
152846,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,653,,"               .branch(Named.as(""branch-processor""), (k, v) -> true, (k, v) -> false);"
152847,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,733,,"                STREAM_OPERATION_NAME + ""-this-windowed"","
152848,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,734,,"                STREAM_OPERATION_NAME + ""-other-windowed"","
152849,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,735,,"                STREAM_OPERATION_NAME + ""-this-join"","
152850,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,736,,"                STREAM_OPERATION_NAME + ""-outer-other-join"","
152851,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,737,,"                STREAM_OPERATION_NAME + ""-merge"");"
152852,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,957,,"               .toStream(Named.as(""to-stream""));"
152853,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java,1010,,"        builder.stream(Pattern.compile(""some-regex""));"
152854,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,251,,"        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), ""earliest"");"
152855,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,269,,"        props.put(consumerPrefix(""interceptor.statsd.host""), ""host"");"
152856,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,269,,"        props.put(consumerPrefix(""interceptor.statsd.host""), ""host"");"
152857,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,331,,"        props.put(""custom.property.host"", ""host"");"
152858,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,402,,"    @SuppressWarnings(""deprecation"")"
152859,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,519,,"        assertThat(consumerConfigs.get(""internal.throw.on.fetch.stable.offset.unsupported""), is(nullValue()));"
152860,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java,551,,"        assertThat(producerConfigs.get(""internal.auto.downgrade.txn.commit""), is(nullValue()));"
152861,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,76,,"        assertThrows(NullPointerException.class, () -> topology.addSource((String) null, ""topic""));"
152862,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,86,,"        assertThrows(NullPointerException.class, () -> topology.addSource(""source"", (String[]) null));"
152863,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,127,,"        assertThrows(NullPointerException.class, () -> topology.connectProcessorAndStateStores(null, ""store""));"
152864,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,132,,"        assertThrows(NullPointerException.class, () -> topology.connectProcessorAndStateStores(""processor"", (String[]) null));"
152865,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,147,,"        topology.addSource(""source"", ""topic-1"");"
152866,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,149,,"            topology.addSource(""source"", ""topic-2"");"
152867,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,165,,"        topology.addSource(""source-1"", ""foo"");"
152868,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,222,,"        topology.addSink(""sink"", ""topic-2"", ""source"");"
152869,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,262,,"        topology.addSink(""sink-1"", ""topic-2"", ""source"");"
152870,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,445,,"        final TopologyDescription.Source expectedSourceNode = addSource(""source"", ""topic1"", ""topic2"", ""topic3"");"
152871,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,445,,"        final TopologyDescription.Source expectedSourceNode = addSource(""source"", ""topic1"", ""topic2"", ""topic3"");"
152872,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,445,,"        final TopologyDescription.Source expectedSourceNode = addSource(""source"", ""topic1"", ""topic2"", ""topic3"");"
152873,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,469,,"        final TopologyDescription.Source expectedSourceNode1 = addSource(""source1"", ""topic1"");"
152874,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,474,,"        final TopologyDescription.Source expectedSourceNode2 = addSource(""source2"", ""topic2"");"
152875,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,479,,"        final TopologyDescription.Source expectedSourceNode3 = addSource(""source3"", ""topic3"");"
152876,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,538,,"        final TopologyDescription.Processor expectedProcessorNode1 = addProcessor(""processor1"", expectedSourceNode);"
152877,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,539,,"        final TopologyDescription.Processor expectedProcessorNode2 = addProcessor(""processor2"", expectedSourceNode);"
152878,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,711,,"        stream1 = builder.stream(""input-topic1"");"
152879,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,712,,"        stream2 = builder.stream(""input-topic2"");"
152880,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,723,,"            ""Topologies:\n"" +"
152881,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,724,,"                ""   Sub-topology: 0\n"" +"
152882,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,725,,"                ""    Source: KSTREAM-SOURCE-0000000000 (topics: [input-topic1])\n"" +"
152883,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,726,,"                ""      --> KSTREAM-WINDOWED-0000000002\n"" +"
152884,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,727,,"                ""    Source: KSTREAM-SOURCE-0000000001 (topics: [input-topic2])\n"" +"
152885,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,728,,"                ""      --> KSTREAM-WINDOWED-0000000003\n"" +"
152886,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,730,,"                ""      --> KSTREAM-JOINTHIS-0000000004\n"" +"
152887,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,731,,"                ""      <-- KSTREAM-SOURCE-0000000000\n"" +"
152888,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,734,,"                ""      <-- KSTREAM-SOURCE-0000000001\n"" +"
152889,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,736,,"                ""      --> KSTREAM-MERGE-0000000006\n"" +"
152890,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,737,,"                ""      <-- KSTREAM-WINDOWED-0000000003\n"" +"
152891,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,740,,"                ""      <-- KSTREAM-WINDOWED-0000000002\n"" +"
152892,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,741,,"                ""    Processor: KSTREAM-MERGE-0000000006 (stores: [])\n"" +"
152893,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,742,,"                ""      --> none\n"" +"
152894,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,872,,"                ""      --> KSTREAM-OUTEROTHER-0000000005\n"" +"
152895,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1137,,"        builder.stream(""input-topic"").to(topicNameExtractor);"
152896,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1143,,"                ""    Source: KSTREAM-SOURCE-0000000000 (topics: [input-topic])\n"" +"
152897,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1146,,"                ""      <-- KSTREAM-SOURCE-0000000000\n\n"","
152898,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1174,,"            .count(Materialized.as(""count-store""));"
152899,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1338,,"                ""    Source: KSTREAM-SOURCE-0000000001 (topics: [input-topic])\n"" +"
152900,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1339,,"                ""      --> KTABLE-SOURCE-0000000002\n"" +"
152901,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1345,,"                ""      <-- KTABLE-SOURCE-0000000002\n"" +"
152902,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/TopologyTest.java,1435,,"                ""    Processor: KTABLE-SOURCE-0000000002 (stores: [])\n"" +"
152903,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java,168,,"            assertThat(kafkaStreams.metadataForLocalThreads().stream().map(t -> t.threadName().split(""-StreamThread-"")[1]).sorted().toArray(), equalTo(new String[] {""1"", ""2""}));"
152904,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java,181,,"                ""\n  expected: "" + expected +"
152905,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java,182,,"                ""\n  received: "" + results"
152906,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java,248,,"            () -> ""waiting for initial values"" +"
152907,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java,203,,"        produceData(Arrays.asList(""hello"", ""world"", ""world"", ""hello world""));"
152908,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,101,,"@SuppressWarnings({""unchecked"", ""deprecation""})"
152909,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,188,,"            new KeyValueTimestamp(""A"", ""A:A"", mockTime.milliseconds()),"
152910,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,190,,"            new KeyValueTimestamp(""B"", ""B:B"", mockTime.milliseconds()),"
152911,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,192,,"            new KeyValueTimestamp(""C"", ""C:C"", mockTime.milliseconds()),"
152912,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,194,,"            new KeyValueTimestamp(""D"", ""D:D"", mockTime.milliseconds()),"
152913,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,196,,"            new KeyValueTimestamp(""E"", ""E:E"", mockTime.milliseconds()))));"
152914,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,277,,"            expectResultString.add(""CreateTime:"" + eachRecord.timestamp() + "", """
152915,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,706,,"        final List<KeyValue<String, String>> t1Messages = Arrays.asList(new KeyValue<>(""bob"", ""start""),"
152916,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,706,,"        final List<KeyValue<String, String>> t1Messages = Arrays.asList(new KeyValue<>(""bob"", ""start""),"
152917,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,707,,"                                                                        new KeyValue<>(""penny"", ""start""),"
152918,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,708,,"                                                                        new KeyValue<>(""jo"", ""pause""),"
152919,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,709,,"                                                                        new KeyValue<>(""emily"", ""pause""));"
152920,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,725,,"                        new KeyValue<>(""emily"", ""resume"")"
152921,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,738,,"                        new KeyValue<>(""penny"", ""stop"")"
152922,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java,1123,,"                ""--property"", ""print.key=true"","
152923,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,129,,"        final Topology topology = getTopology(streamsConfig, materialized ? ""store"" : null, leftJoin, rejoin);"
152924,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,138,,"            right.pipeInput(""rhs1"", ""rhsValue1"");"
152925,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,138,,"            right.pipeInput(""rhs1"", ""rhsValue1"");"
152926,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,159,,"            left.pipeInput(""lhs1"", ""lhsValue1|rhs1"");"
152927,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,159,,"            left.pipeInput(""lhs1"", ""lhsValue1|rhs1"");"
152928,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,160,,"            left.pipeInput(""lhs2"", ""lhsValue2|rhs2"");"
152929,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,164,,"                    mkEntry(""lhs1"", ""(lhsValue1|rhs1,rhsValue1)""),"
152930,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,165,,"                    mkEntry(""lhs2"", ""(lhsValue2|rhs2,rhsValue2)"")"
152931,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,189,,"            left.pipeInput(""lhs3"", ""lhsValue3|rhs1"");"
152932,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,194,,"                        mkEntry(""lhs3"", ""(lhsValue3|rhs1,rhsValue1)"")"
152933,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,262,,"                       ? mkMap(mkEntry(""lhs1"", ""(lhsValue1|rhs1,null)""),"
152934,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,264,,"                               mkEntry(""lhs3"", ""(lhsValue3|rhs1,null)""))"
152935,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinIntegrationTest.java,471,,"                is(mkMap(mkEntry(""lhs1"", leftJoin ? ""(lhsValue1|rhs2,null)"" : null)))"
152936,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinMaterializationIntegrationTest.java,104,,"            left.pipeInput(""lhs1"", ""lhsValue1|rhs1"");"
152937,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java,743,,"        final String[] keys = {""hello"", ""goodbye"", ""welcome"", ""go"", ""kafka""};"
152938,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java,743,,"        final String[] keys = {""hello"", ""goodbye"", ""welcome"", ""go"", ""kafka""};"
152939,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java,743,,"        final String[] keys = {""hello"", ""goodbye"", ""welcome"", ""go"", ""kafka""};"
152940,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java,743,,"        final String[] keys = {""hello"", ""goodbye"", ""welcome"", ""go"", ""kafka""};"
152941,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java,833,,"                Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(""queryMapValues"").withValueSerde(Serdes.Long()))"
152942,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java,162,,"            final List<String> expectedFirstAssignment = Collections.singletonList(""TEST-TOPIC-1"");"
152943,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java,166,,"            final List<String> expectedSecondAssignment = Arrays.asList(""TEST-TOPIC-1"", ""TEST-TOPIC-2"");"
152944,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationTest.java,102,,"            ""--application-id"", appID,"
152945,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationTest.java,103,,"            ""--bootstrap-servers"", cluster.bootstrapServers(),"
152946,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java,156,,"        new OffsetCheckpoint(new File(stateDirectory.getOrCreateDirectoryForTask(new TaskId(0, 0)), "".checkpoint""))"
152947,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java,157,,"                LOG.info(""Streams wasn't running. Will try again."");"
152948,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StoreUpgradeIntegrationTest.java,62,,"@SuppressWarnings(""deprecation"") // Old PAPI. Needs to be migrated."
152949,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StoreUpgradeIntegrationTest.java,372,,"            ""Could not get expected result in time."");"
152950,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StoreUpgradeIntegrationTest.java,960,,"        @SuppressWarnings(""unchecked"")"
152951,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,72,,"            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, ""A-a"", null, 4L)),"
152952,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,73,,"            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, ""B-a"", null, 5L)),"
152953,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,75,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""A-b"", null, 6L),"
152954,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,76,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""B-b"", null, 6L)),"
152955,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,80,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""C-a"", null, 9L),"
152956,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,81,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""C-b"", null, 9L)),"
152957,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,83,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""A-c"", null, 10L),"
152958,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,84,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""B-c"", null, 10L),"
152959,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,85,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""C-c"", null, 10L)),"
152960,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,90,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""A-d"", null, 14L),"
152961,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,91,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""B-d"", null, 14L),"
152962,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,92,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""C-d"", null, 14L)),"
152963,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,94,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""D-a"", null, 15L),"
152964,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,95,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""D-b"", null, 15L),"
152965,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,96,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""D-c"", null, 15L),"
152966,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java,97,,"                new TestRecord<>(ANY_UNIQUE_KEY, ""D-d"", null, 15L))"
152967,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java,153,,"            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(""should not hit old handler""));"
152968,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java,121,,"        final String input = ""input"" + testId;"
152969,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java,122,,"        final String outputSuppressed = ""output-suppressed"" + testId;"
152970,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java,123,,"        final String outputRaw = ""output-raw"" + testId;"
152971,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,62,,"    private final TestRecord<Long, String> expectedFinalJoinResult = new TestRecord<>(ANY_UNIQUE_KEY, ""D-d"", null, 15L);"
152972,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,63,,"    private final TestRecord<Long, String> expectedFinalMultiJoinResult = new TestRecord<>(ANY_UNIQUE_KEY, ""D-d-d"", null,  15L);"
152973,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,121,,"                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, ""C-null"", null,  9L)),"
152974,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,184,,"                    new TestRecord<>(ANY_UNIQUE_KEY, ""A-a-a"", null,  4L),"
152975,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,186,,"                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, ""B-a-a"", null,  5L)),"
152976,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,188,,"                    new TestRecord<>(ANY_UNIQUE_KEY, ""B-b-b"", null,  6L),"
152977,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,194,,"                    new TestRecord<>(ANY_UNIQUE_KEY, ""C-c-c"", null,  10L),"
152978,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,350,,"                    new TestRecord<>(ANY_UNIQUE_KEY, ""A-null-null"", null,  3L),"
152979,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,361,,"                    new TestRecord<>(ANY_UNIQUE_KEY, ""C-null-null"", null,  9L),"
152980,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java,456,,"                    new TestRecord<>(ANY_UNIQUE_KEY, ""null-d-d"", null, 14L),"
152981,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/TaskMetadataIntegrationTest.java,124,,"            TestUtils.waitForCondition(() -> !process.get(), ""The record was not processed"");"
152982,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java,427,,"    @SuppressWarnings(""WeakerAccess"")"
152983,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java,550,,"            ""Did not receive all %d records from topic %s within %d ms"","
152984,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/integration/utils/KafkaEmbedded.java,66,,"    @SuppressWarnings(""WeakerAccess"")"
152985,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/PrintedTest.java,65,,"                .build(""processor"");"
152986,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,68,,"        assertTrue(optimizedTopology.contains(firstRepartitionTopicName + ""-repartition""));"
152987,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,86,,"            builder.<String, String>stream(""topic"").selectKey((k, v) -> k)"
152988,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,87,,"                                            .groupByKey(Grouped.as(""grouping""))"
152989,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,107,,"        kGroupedStream.windowedBy(TimeWindows.of(Duration.ofMillis(10L))).count().toStream().to(""output-one"");"
152990,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,108,,"        kGroupedStream.windowedBy(TimeWindows.of(Duration.ofMillis(30L))).count().toStream().to(""output-two"");"
152991,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,112,,"        assertTrue(topologyString.contains(""grouping-repartition""));"
152992,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,534,,"        ""      <-- KSTREAM-MAP-0000000001\n"" +"
152993,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,552,,"        ""      <-- count-stream-repartition-source\n"" +"
152994,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,567,,"        ""      <-- KTABLE-TOSTREAM-0000000011\n"" +"
152995,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/RepartitionTopicNamingTest.java,578,,"        ""      --> joined-stream-merge\n"" +"
152996,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/SuppressedTest.java,62,,"            maxRecords(2L).withMaxBytes(4L).withLoggingEnabled(Collections.singletonMap(""myConfigKey"", ""myConfigValue"")),"
152997,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/SuppressedTest.java,62,,"            maxRecords(2L).withMaxBytes(4L).withLoggingEnabled(Collections.singletonMap(""myConfigKey"", ""myConfigValue"")),"
152998,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/SuppressedTest.java,133,,"            untilWindowCloses(unbounded()).withName(""name""),"
152999,./TargetProjects/kafka/streams/src/test/java/org/apache/kafka/streams/kstream/WindowedSerdesTest.java,77,,"            () -> serializer.serialize(""topic"", new Windowed<>(new byte[0], new TimeWindow(0, 1))));"
