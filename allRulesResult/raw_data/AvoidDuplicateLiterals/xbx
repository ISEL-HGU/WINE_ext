49000,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,258,,"        {""Cutter"", ""KTR"", ""KTR""},"
49001,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,260,,"        {""DAVIS"", ""TFS"", ""TFS""},"
49002,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,262,,"        {""Dacre"", ""TKR"", ""TKR""},"
49003,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,263,,"        {""Daggett"", ""TKT"", ""TKT""},"
49004,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,265,,"        {""Darcy"", ""TRS"", ""TRS""},"
49005,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,271,,"        {""DeGrenier"", ""TKRN"", ""TKRN""},"
49006,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,273,,"        {""Deekindaugh"", ""TKNT"", ""TKNT""},"
49007,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,276,,"        {""Denton"", ""TNTN"", ""TNTN""},"
49008,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,295,,"        {""Dudley"", ""TTL"", ""TTL""},"
49009,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,299,,"        {""Durrant"", ""TRNT"", ""TRNT""},"
49010,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,300,,"        {""Durrin"", ""TRN"", ""TRN""},"
49011,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,301,,"        {""Dustin"", ""TSTN"", ""TSTN""},"
49012,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,305,,"        {""Easty"", ""AST"", ""AST""},"
49013,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,310,,"        {""Edenden"", ""ATNT"", ""ATNT""},"
49014,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,313,,"        {""Eliot"", ""ALT"", ""ALT""},"
49015,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,316,,"        {""Ellison"", ""ALSN"", ""ALSN""},"
49016,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,326,,"        {""Evans"", ""AFNS"", ""AFNS""},"
49017,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,328,,"        {""Farnsworth"", ""FRNS"", ""FRNS""},"
49018,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,336,,"        {""Fisk"", ""FSK"", ""FSK""},"
49019,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,340,,"        {""Foliot"", ""FLT"", ""FLT""},"
49020,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,344,,"        {""Forstner"", ""FRST"", ""FRST""},"
49021,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,355,,"        {""Fredd"", ""FRT"", ""FRT""},"
49022,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,356,,"        {""Freeman"", ""FRMN"", ""FRMN""},"
49023,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,369,,"        {""Gallion"", ""KLN"", ""KLN""},"
49024,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,371,,"        {""Gamble"", ""KMPL"", ""KMPL""},"
49025,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,372,,"        {""garage"", ""KRJ"", ""KRK""},"
49026,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,374,,"        {""Gardner"", ""KRTN"", ""KRTN""},"
49027,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,394,,"        {""Gorham"", ""KRM"", ""KRM""},"
49028,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,397,,"        {""Gould"", ""KLT"", ""KLT""},"
49029,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,406,,"        {""Gross"", ""KRS"", ""KRS""},"
49030,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,411,,"        {""Haddon?"", ""HTN"", ""HTN""},"
49031,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,412,,"        {""Haines"", ""HNS"", ""HNS""},"
49032,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,415,,"        {""Hallet"", ""HLT"", ""HLT""},"
49033,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,417,,"        {""Halstead"", ""HLST"", ""HLST""},"
49034,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,420,,"        {""Handy"", ""HNT"", ""HNT""},"
49035,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,424,,"        {""Hardy"", ""HRT"", ""HRT""},"
49036,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,426,,"        {""Harris"", ""HRS"", ""HRS""},"
49037,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,428,,"        {""Harvey"", ""HRF"", ""HRF""},"
49038,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,432,,"        {""Haukeness"", ""HKNS"", ""HKNS""},"
49039,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,433,,"        {""Hawkes"", ""HKS"", ""HKS""},"
49040,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,439,,"        {""Hemenway"", ""HMN"", ""HMN""},"
49041,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,442,,"        {""Henderson"", ""HNTR"", ""HNTR""},"
49042,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,454,,"        {""Hobart"", ""HPRT"", ""HPRT""},"
49043,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,462,,"        {""Hopkins"", ""HPKN"", ""HPKN""},"
49044,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,479,,"        {""Hungerford"", ""HNKR"", ""HNJR""},"
49045,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,485,,"        {""Hutchins"", ""HXNS"", ""HXNS""},"
49046,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,495,,"        {""Jenkins"", ""JNKN"", ""ANKN""},"
49047,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,507,,"        {""Keymber"", ""KMPR"", ""KMPR""},"
49048,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,508,,"        {""Keynes"", ""KNS"", ""KNS""},"
49049,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,529,,"        {""Laimbeer"", ""LMPR"", ""LMPR""},"
49050,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,533,,"        {""Landry"", ""LNTR"", ""LNTR""},"
49051,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,551,,"        {""Leggett"", ""LKT"", ""LKT""},"
49052,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,554,,"        {""Lester"", ""LSTR"", ""LSTR""},"
49053,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,557,,"        {""Levine"", ""LFN"", ""LFN""},"
49054,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,571,,"        {""Lounsberry"", ""LNSP"", ""LNSP""},"
49055,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,593,,"        {""Mahien"", ""MHN"", ""MHN""},"
49056,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,595,,"        {""Malory"", ""MLR"", ""MLR""},"
49057,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,596,,"        {""Mancinelli"", ""MNSN"", ""MNSN""},"
49058,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,602,,"        {""Marley"", ""MRL"", ""MRL""},"
49059,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,606,,"        {""Marshal"", ""MRXL"", ""MRXL""},"
49060,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,610,,"        {""Martin"", ""MRTN"", ""MRTN""},"
49061,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,617,,"        {""McAllaster"", ""MKLS"", ""MKLS""},"
49062,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,620,,"        {""McFarland"", ""MKFR"", ""MKFR""},"
49063,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,622,,"        {""McNair"", ""MKNR"", ""MKNR""},"
49064,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,628,,"        {""Melton"", ""MLTN"", ""MLTN""},"
49065,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,631,,"        {""Merrick"", ""MRK"", ""MRK""},"
49066,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,642,,"        {""Morris"", ""MRS"", ""MRS""},"
49067,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,659,,"        {""Newcomb"", ""NKMP"", ""NKMP""},"
49068,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,675,,"        {""PRUST?"", ""PRST"", ""PRST""},"
49069,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,684,,"        {""Parrat"", ""PRT"", ""PRT""},"
49070,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,685,,"        {""Parsons"", ""PRSN"", ""PRSN""},"
49071,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,698,,"        {""Pedersen"", ""PTRS"", ""PTRS""},"
49072,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,718,,"        {""Pleis"", ""PLS"", ""PLS""},"
49073,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,720,,"        {""Plisko"", ""PLSK"", ""PLSK""},"
49074,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,722,,"        {""Plum"", ""PLM"", ""PLM""},"
49075,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,746,,"        {""Reakirt"", ""RKRT"", ""RKRT""},"
49076,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,747,,"        {""Reaves"", ""RFS"", ""RFS""},"
49077,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,756,,"        {""Roberts"", ""RPRT"", ""RPRT""},"
49078,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,774,,"        {""Sanders"", ""SNTR"", ""SNTR""},"
49079,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,788,,"        {""Sharp"", ""XRP"", ""XRP""},"
49080,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,792,,"        {""Shattack"", ""XTK"", ""XTK""},"
49081,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,817,,"        {""Smith"", ""SM0"", ""XMT""},"
49082,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,822,,"        {""Southworth"", ""S0R0"", ""STRT""},"
49083,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,825,,"        {""Spark"", ""SPRK"", ""SPRK""},"
49084,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,832,,"        {""St. Clair"", ""STKL"", ""STKL""},"
49085,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,836,,"        {""Stafferton"", ""STFR"", ""STFR""},"
49086,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,841,,"        {""Star"", ""STR"", ""STR""},"
49087,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,843,,"        {""Starkey"", ""STRK"", ""STRK""},"
49088,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,845,,"        {""Stearns"", ""STRN"", ""STRN""},"
49089,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,848,,"        {""Stephenson"", ""STFN"", ""STFN""},"
49090,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,850,,"        {""Stoddard"", ""STTR"", ""STTR""},"
49091,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,852,,"        {""Stone"", ""STN"", ""STN""},"
49092,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,877,,"        {""Taverner"", ""TFRN"", ""TFRN""},"
49093,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,878,,"        {""Taylor"", ""TLR"", ""TLR""},"
49094,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,882,,"        {""Thomas"", ""TMS"", ""TMS""},"
49095,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,895,,"        {""Tisdale"", ""TSTL"", ""TSTL""},"
49096,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,902,,"        {""Treadway"", ""TRT"", ""TRT""},"
49097,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,905,,"        {""Tripp"", ""TRP"", ""TRP""},"
49098,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,922,,"        {""Valentine"", ""FLNT"", ""FLNT""},"
49099,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,924,,"        {""Van der Beek"", ""FNTR"", ""FNTR""},"
49100,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,944,,"        {""Watson"", ""ATSN"", ""FTSN""},"
49101,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1007,,"        {""de Braiose"", ""TPRS"", ""TPRS""},"
49102,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1013,,"        {""de Clare"", ""TKLR"", ""TKLR""},"
49103,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1015,,"        {""de Clifford"", ""TKLF"", ""TKLF""},"
49104,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1031,,"        {""de Keynes"", ""TKNS"", ""TKNS""},"
49105,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1036,,"        {""de Montagu"", ""TMNT"", ""TMNT""},"
49106,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1040,,"        {""de Morville"", ""TMRF"", ""TMRF""},"
49107,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1043,,"        {""de Odingsells"", ""TTNK"", ""TTNK""},"
49108,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1059,,"        {""de Toeni"", ""TTN"", ""TTN""},"
49109,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1073,,"        {""fitz Alan"", ""FTSL"", ""FTSL""},"
49110,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1075,,"        {""fitz Herbert"", ""FTSR"", ""FTSR""},"
49111,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1077,,"        {""fitz Patrick"", ""FTSP"", ""FTSP""},"
49112,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1090,,"        {""le Despenser"", ""LTSP"", ""LTSP""},"
49113,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1092,,"        {""of Allendale"", ""AFLN"", ""AFLN""},"
49114,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1093,,"        {""of Angouleme"", ""AFNK"", ""AFNK""},"
49115,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1096,,"        {""of Aumale"", ""AFML"", ""AFML""},"
49116,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1098,,"        {""of Boulogne"", ""AFPL"", ""AFPL""},"
49117,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1099,,"        {""of Brittany"", ""AFPR"", ""AFPR""},"
49118,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1103,,"        {""of Clermont"", ""AFKL"", ""AFKL""},"
49119,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1105,,"        {""of Dinan"", ""AFTN"", ""AFTN""},"
49120,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1108,,"        {""of Essex"", ""AFSK"", ""AFSK""},"
49121,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1109,,"        {""of Falaise"", ""AFFL"", ""AFFL""},"
49122,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1147,,"        {""ARCHITure"", ""ARKT"", ""ARKT""},"
49123,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1166,,"        {""accede"", ""AKST"", ""AKST""},"
49124,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,1194,,"        {""carlisle"", ""KRLL"", ""KRLL""},"
49125,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,47,,"    private static final String[][] FIXTURE = { { ""Accosinly"", ""Occasionally"" }, {"
49126,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,53,,"            ""Thw"", ""The"" }, {"
49127,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,54,,"            ""Unformanlly"", ""Unfortunately"" }, {"
49128,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,60,,"            ""accomodate"", ""accommodate"" }, {"
49129,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,80,,"            ""antidesestablishmentarianism"", ""antidisestablishmentarianism"" }, {"
49130,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,102,,"            ""beaurocracy"", ""bureaucracy"" }, {"
49131,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,103,,"            ""beggining"", ""beginning"" }, {"
49132,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,106,,"            ""beleive"", ""believe"" }, {"
49133,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,115,,"            ""buder"", ""butter"" }, {"
49134,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,137,,"            ""comitmment"", ""commitment"" }, {"
49135,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,138,,"            ""comitte"", ""committee"" }, {"
49136,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,170,,"            ""dag"", ""dog"" }, {"
49137,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,179,,"            ""descrption"", ""description"" }, {"
49138,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,185,,"            ""developement"", ""development"" }, {"
49139,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,190,,"            ""dinasaur"", ""dinosaur"" }, {"
49140,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,217,,"            ""egsistence"", ""existence"" }, {"
49141,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,221,,"            ""embarass"", ""embarrass"" }, {"
49142,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,225,,"            ""encyclapidia"", ""encyclopedia"" }, {"
49143,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,233,,"            ""envireminakl"", ""environmental"" }, {"
49144,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,248,,"            ""expleyly"", ""explicitly"" }, {"
49145,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,281,,"            ""hallo"", ""hello"" }, {"
49146,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,285,,"            ""heellp"", ""help"" }, {"
49147,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,290,,"            ""hifin"", ""hyphen"" }, {"
49148,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,299,,"            ""howaver"", ""however"" }, {"
49149,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,316,,"            ""incompleet"", ""incomplete"" }, {"
49150,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,320,,"            ""independant"", ""independent"" }, {"
49151,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,333,,"            ""insistant"", ""insistent"" }, {"
49152,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,336,,"            ""intealignt"", ""intelligent"" }, {"
49153,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,352,,"            ""intertes"", ""interested"" }, {"
49154,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,391,,"            ""minkay"", ""monkey"" }, {"
49155,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,401,,"            ""neccessary"", ""necessary"" }, {"
49156,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,422,,"            ""organise"", ""organize"" }, {"
49157,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,437,,"            ""persue"", ""pursue"" }, {"
49158,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,461,,"            ""privielage"", ""privilege"" }, {"
49159,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,464,,"            ""pronensiation"", ""pronunciation"" }, {"
49160,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,470,,"            ""pscolgst"", ""psychologist"" }, {"
49161,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,541,,"            ""teh"", ""the"" }, {"
49162,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,544,,"            ""teridical"", ""theoretical"" }, {"
49163,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,545,,"            ""tesst"", ""test"" }, {"
49164,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,555,,"            ""tommorrow"", ""tomorrow"" }, {"
49165,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,563,,"            ""unatourral"", ""unnatural"" }, {"
49166,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,1048,,"        assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(""Brain"", ""Band"", alternate));"
49167,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,1048,,"        assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(""Brain"", ""Band"", alternate));"
49168,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,1076,,"        assertDoubleMetaphone(""KK"", ""quick"");"
49169,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java,212,,"        assertFalse(this.getStringEncoder().isEncodeEquals(""test"", """"));"
49170,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/NysiisTest.java,140,,"                new String[] { ""CARRAWAY"", ""CARY"" },       // Original: CARAY"
49171,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/NysiisTest.java,204,,"                new String[] { ""XAX"", ""XAX"" },"
49172,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java,71,,"        assertEquals(""D6043"", this.getStringEncoder().encode(""dogs""));"
49173,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java,71,,"        assertEquals(""D6043"", this.getStringEncoder().encode(""dogs""));"
49174,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/SoundexTest.java,122,,"        Assert.assertEquals(""D200"", this.getStringEncoder().encode(""dogs""));"
49175,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/SoundexTest.java,227,,"        Assert.assertEquals(""A261"", this.getStringEncoder().encode(""Ashcraft""));"
49176,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/SoundexTest.java,314,,"        Assert.assertEquals(""W452"", new Soundex().soundex(""Williams""));"
49177,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/SoundexTest.java,314,,"        Assert.assertEquals(""W452"", new Soundex().soundex(""Williams""));"
49178,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java,28,,"        test(""Angelo"", times);"
49179,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,42,,"        args.put(""nameType"", ""GENERIC"");"
49180,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,43,,"        assertEquals(encode(args, true, ""Angelo""), ""YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo"");"
49181,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,43,,"        assertEquals(encode(args, true, ""Angelo""), ""YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo"");"
49182,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,44,,"        args.put(""ruleType"", ""EXACT"");"
49183,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,44,,"        args.put(""ruleType"", ""EXACT"");"
49184,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,46,,"        assertEquals(encode(args, true, ""D'Angelo""), ""(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)"");"
49185,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,47,,"        args.put(""languageSet"", ""italian,greek,spanish"");"
49186,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,47,,"        args.put(""languageSet"", ""italian,greek,spanish"");"
49187,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,49,,"        assertEquals(encode(args, true, ""1234""), """");"
49188,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,64,,"        args.put(""ruleType"", ""APPROX"");"
49189,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,88,,"        args.put(""nameType"", ""ASHKENAZI"");"
49190,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,89,,"        assertEquals(encode(args, true, ""Angelo""), ""YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo"");"
49191,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,137,,"        args.put(""nameType"", ""SEPHARDIC"");"
49192,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,138,,"        assertEquals(encode(args, true, ""Angelo""), ""anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"");"
49193,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,,"                .asList(new Object[] { ""Renault"", ""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"", NameType.GENERIC, RuleType.APPROX, Boolean.TRUE, TEN },"
49194,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/PercentCodecTest.java,42,,"        final String encodedS = new String(encoded, ""UTF-8"");"
49195,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,78,,"        assertEquals(""Basic quoted-printable encoding test"","
49196,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,80,,"        assertEquals(""Basic quoted-printable decoding test"","
49197,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,152,,"        final String plain = ""1+1 = 2"";"
49198,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,156,,"            ""1+1 =3D 2"", encoded);"
49199,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/URLCodecTest.java,84,,"        final String plain = ""Hello there!"";"
49200,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/URLCodecTest.java,86,,"        assertEquals(""Basic URL encoding test"","
49201,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/URLCodecTest.java,87,,"            ""Hello+there%21"", encoded);"
49202,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/URLCodecTest.java,88,,"        assertEquals(""Basic URL decoding test"","
49203,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/net/URLCodecTest.java,136,,"            fail(""DecoderException should have been thrown"");"
49204,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/CollectionUtils.java,234,,"    @SuppressWarnings(""unchecked"") // OK, empty collection is compatible with any type"
49205,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/CollectionUtils.java,668,,"        Objects.requireNonNull(equator, ""equator"");"
49206,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/CollectionUtils.java,759,,"        return IterableUtils.frequency(Objects.requireNonNull(collection, ""collection""), obj);"
49207,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/ComparatorUtils.java,56,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" }) // explicit type needed for Java 1.5 compilation"
49208,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/IterableUtils.java,75,,"    @SuppressWarnings(""unchecked"") // OK, empty collection is compatible with any type"
49209,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/IterableUtils.java,262,,"        Objects.requireNonNull(predicate, ""predicate"");"
49210,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/IteratorUtils.java,82,,"    @SuppressWarnings(""rawtypes"")"
49211,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/IteratorUtils.java,556,,"        @SuppressWarnings(""unchecked"")"
49212,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/IteratorUtils.java,688,,"        Objects.requireNonNull(iterator, ""iterator"");"
49213,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/IteratorUtils.java,709,,"        Objects.requireNonNull(predicate, ""predicate"");"
49214,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/MapUtils.java,1195,,"        Objects.requireNonNull(map, ""map"");"
49215,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/SetUtils.java,125,,"        Objects.requireNonNull(setA, ""setA"");"
49216,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/SetUtils.java,126,,"        Objects.requireNonNull(setB, ""setB"");"
49217,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java,376,,"                @SuppressWarnings(""unchecked"")"
49218,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java,507,,"                throw new IllegalStateException(""Iterator remove() can only be called once after next()"");"
49219,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java,122,,"    @SuppressWarnings(""unchecked"")"
49220,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java,328,,"            throw new NoSuchElementException(""Map is empty"");"
49221,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Shape.java,109,,"        this.hashFunctionIdentity = Objects.requireNonNull(hashFunctionIdentity, ""hashFunctionIdentity"");"
49222,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/collection/IndexedCollection.java,151,,"    @SuppressWarnings(""unchecked"")"
49223,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java,47,,"    @SuppressWarnings(""unchecked"")"
49224,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyIterator.java,39,,"        throw new NoSuchElementException(""Iterator contains no elements"");"
49225,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java,88,,"                ""There are no elements for this iterator to loop on"");"
49226,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java,55,,"    @SuppressWarnings(""unchecked"")"
49227,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java,111,,"    @SuppressWarnings(""unchecked"")"
49228,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java,458,,"    @SuppressWarnings(""unchecked"")"
49229,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/CompositeMap.java,64,,"    @SuppressWarnings(""unchecked"")"
49230,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/Flat3Map.java,419,,"            throw new IllegalStateException(""Invalid map index: "" + size);"
49231,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/Flat3Map.java,1028,,"        @SuppressWarnings(""unchecked"")"
49232,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/Flat3Map.java,1257,,"            buf.append(key3 == this ? ""(this Map)"" : key3);"
49233,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/LRUMap.java,272,,"                    "" This should not occur if your keys are immutable, and you have used synchronization properly."");"
49234,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/LRUMap.java,333,,"                        "" key="" + key + "" value="" + value + "" size="" + size + "" maxSize="" + maxSize +"
49235,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/LRUMap.java,333,,"                        "" key="" + key + "" value="" + value + "" size="" + size + "" maxSize="" + maxSize +"
49236,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/LRUMap.java,333,,"                        "" key="" + key + "" value="" + value + "" size="" + size + "" maxSize="" + maxSize +"
49237,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/LRUMap.java,333,,"                        "" key="" + key + "" value="" + value + "" size="" + size + "" maxSize="" + maxSize +"
49238,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java,151,,"    @SuppressWarnings(""unchecked"") // (1) should only fail if input stream is incorrect"
49239,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java,92,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
49240,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java,89,,"    @SuppressWarnings(""unchecked"")"
49241,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java,922,,"        throw new IllegalStateException(""invalid lookup: "" + key);"
49242,./TargetProjects/commons-collections/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java,1337,,"                    buffer.append(""parent="").append(""ROOT"");"
49243,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ArrayStackTest.java,68,,"        stack.push((E) ""First Item"");"
49244,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ArrayStackTest.java,75,,"        stack.push((E) ""Second Item"");"
49245,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/BagUtilsTest.java,51,,"            fail(""Expecting NullPointerException for null bag."");"
49246,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java,41,,"    private static final Object cString = ""Hello"";"
49247,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java,263,,"            new Predicate[] { EqualPredicate.equalPredicate(""HELLO""), EqualPredicate.equalPredicate(""THERE"") },"
49248,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java,263,,"            new Predicate[] { EqualPredicate.equalPredicate(""HELLO""), EqualPredicate.equalPredicate(""THERE"") },"
49249,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java,264,,"            new Closure[] { a, b }).execute(""WELL"");"
49250,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,593,,"        final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(""clear"");"
49251,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,733,,"        vector.addElement(""zero"");"
49252,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,734,,"        vector.addElement(""one"");"
49253,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,743,,"            fail(""Expecting IndexOutOfBoundsException."");"
49254,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,754,,"        expected.put(""zeroKey"", ""zero"");"
49255,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,755,,"        expected.put(""oneKey"", ""one"");"
49256,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java,1803,,"            fail(""expecting NullPointerException"");"
49257,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java,68,,"            fail(""expecting NullPointerException"");"
49258,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java,46,,"        vector.addElement(""zero"");"
49259,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java,47,,"        vector.addElement(""one"");"
49260,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/FluentIterableTest.java,126,,"            fail(""expecting NullPointerException"");"
49261,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java,116,,"            fail(""expecting NullPointerException"");"
49262,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java,309,,"            fail(""predicate must not be null"");"
49263,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java,380,,"        bag.add(""element"", 1);"
49264,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java,493,,"            fail(""not supposed to reach here"");"
49265,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,168,,"            fail(""Expecting IllegalArgumentException"");"
49266,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,175,,"            fail(""Expecting NullPointerException"");"
49267,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,185,,"            fail(""Expecting IndexOutOfBoundsException"");"
49268,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,482,,"        assertTrue(IteratorUtils.asIterator(en) instanceof Iterator, ""create instance fail"");"
49269,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,489,,"        coll.add(""test"");"
49270,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,561,,"            fail(""expecting NullPointerException"");"
49271,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java,1255,,"            fail(""remove() should throw an UnsupportedOperationException"");"
49272,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ListUtilsTest.java,94,,"        @SuppressWarnings(""boxing"")"
49273,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/ListUtilsTest.java,341,,"            fail(""failed to check for null argument"");"
49274,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapPerformance.java,65,,"        test(flatMap,       ""         Flat3 "");"
49275,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapPerformance.java,66,,"        test(hashMap,       ""       HashMap "");"
49276,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,193,,"                {""RED"", ""#FF0000""},"
49277,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,193,,"                {""RED"", ""#FF0000""},"
49278,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,194,,"                {""GREEN"", ""#00FF00""},"
49279,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,194,,"                {""GREEN"", ""#00FF00""},"
49280,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,195,,"                {""BLUE"", ""#0000FF""}"
49281,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,195,,"                {""BLUE"", ""#0000FF""}"
49282,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,337,,"            MapUtils.debugPrint(outPrint, ""Print Map"", outer);"
49283,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,349,,"        outPrint.println(LABEL + "" = "" + String.valueOf((Object) null));"
49284,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,368,,"        final String INDENT = ""    "";"
49285,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,376,,"        outPrint.println(INDENT + ""2 = B"");"
49286,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,400,,"        outPrint.println(INDENT + ""2 = B "" + String.class.getName());"
49287,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,596,,"        outPrint.println(INDENT + ""1 = "");"
49288,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,969,,"        in.put(""key1"", ""A"");"
49289,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,970,,"        in.put(""key2"", ""B"");"
49290,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,1047,,"        map.put(""key"", ""one"");"
49291,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,1059,,"        assertEquals(1.0, MapUtils.getDoubleValue(in, ""noKey"", 1.0), 0);"
49292,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,1070,,"        inStr.put(""str1"", ""2"" + decimalSeparator + ""0"");"
49293,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,1206,,"        in.put(""key"", ""str"");"
49294,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,1208,,"        assertEquals(""str"", MapUtils.getString(in, ""key"", ""default""));"
49295,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java,1279,,"        valMap.put(""key1"", ""value1"");"
49296,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java,47,,"            map.put(""key"", ""value"");"
49297,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java,92,,"        assertNull(MultiMapUtils.getCollection(null, ""key1""));"
49298,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java,157,,"    @SuppressWarnings(""unchecked"")"
49299,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java,50,,"            fail(""Expecting NullPointerException for null queue."");"
49300,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/SetUtilsTest.java,61,,"            fail(""Expecting NullPointerException"");"
49301,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/SetUtilsTest.java,197,,"        assertEquals(3, set2.size(), ""set has 3 elements"");"
49302,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/SetUtilsTest.java,198,,"        assertTrue(set2.contains(1), ""set contains 1"");"
49303,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/SetUtilsTest.java,199,,"        assertTrue(set2.contains(2), ""set contains 2"");"
49304,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/SetUtilsTest.java,200,,"        assertTrue(set2.contains(3), ""set contains 3"");"
49305,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java,86,,"        attemptPutOperation(() -> map.put(""foo"", 100));"
49306,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java,293,,"                new Predicate[]{EqualPredicate.equalPredicate(""HELLO""), EqualPredicate.equalPredicate(""THERE"")},"
49307,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java,293,,"                new Predicate[]{EqualPredicate.equalPredicate(""HELLO""), EqualPredicate.equalPredicate(""THERE"")},"
49308,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java,294,,"                new Transformer[]{a, b}).transform(""WELL""));"
49309,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,134,,"    @SuppressWarnings(""unchecked"")"
49310,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,143,,"        assertEquals(""Should have count of 1"", 1, bag.getCount(""A""));"
49311,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,146,,"        assertEquals(""Should have count of 2"", 2, bag.getCount(""A""));"
49312,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,258,,"        assertTrue(""Bag containsAll of empty"", bag.containsAll(known));"
49313,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,261,,"        assertFalse(""Bag does not containsAll of 1 'B'"", bag.containsAll(known1B));"
49314,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,262,,"        assertFalse(""Bag does not containsAll of 1 'A' 1 'B'"", bag.containsAll(known1A1B));"
49315,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java,266,,"        assertTrue(""Bag containsAll of 1 'A'"", bag.containsAll(known1A));"
49316,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java,255,,"        assertFalse(""Key was not removed."", map.containsKey(key));"
49317,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java,256,,"        assertNull(""Value was not removed."", map.getKey(value));"
49318,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java,266,,"            fail(""Should throw IllegalArgumentException"");"
49319,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunctionIdentityImplTest.java,39,,"                return ""NAME"";"
49320,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunctionIdentityImplTest.java,49,,"                return ""Provider"";"
49321,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunctionValidatorTest.java,37,,"        final HashFunctionIdentityImpl impl1 = new HashFunctionIdentityImpl(""Testing Suite"", ""impl1"", Signedness.SIGNED,"
49322,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunctionValidatorTest.java,37,,"        final HashFunctionIdentityImpl impl1 = new HashFunctionIdentityImpl(""Testing Suite"", ""impl1"", Signedness.SIGNED,"
49323,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/ShapeTest.java,84,,"            fail(""Should have thrown IllegalArgumentException"");"
49324,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/ShapeTest.java,271,,"            fail(""Should throw NullPointerException"");"
49325,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/ShapeTest.java,467,,"        list.add(new HashFunctionIdentityImpl(""Provider"", ""Name"", Signedness.SIGNED, ProcessType.ITERATIVE, 0L));"
49326,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/ShapeTest.java,467,,"        list.add(new HashFunctionIdentityImpl(""Provider"", ""Name"", Signedness.SIGNED, ProcessType.ITERATIVE, 0L));"
49327,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/hasher/StaticHasherTest.java,164,,"            fail(""Should have thrown IllegalArgumentException"");"
49328,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java,387,,"    @SuppressWarnings(""unchecked"")"
49329,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java,53,,"    @SuppressWarnings(""unchecked"")"
49330,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java,177,,"        two.add((E) ""foo"");"
49331,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java,91,,"        assertFalse(""Collection shouldn't contain illegal element"", c.contains(i));"
49332,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java,135,,"            fail(""Expected NullPointerException"");"
49333,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java,41,,"        ""New York"","
49334,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java,131,,"        comparator.addAsEqual(""New York"", ""Minneapolis"");"
49335,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java,123,,"                ""false predicate evaluated to true"");"
49336,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java,86,,"            fail(""Expected NoSuchElementException."");"
49337,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java,70,,"            assertEquals(""Iteration value is correct"", testValue, iterValue);"
49338,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java,71,,"            assertEquals(""Iteration value is correct"", testValue, iterValue);"
49339,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java,72,,"        assertTrue(loop.hasNext(), ""1st hasNext should return true"");"
49340,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java,75,,"        assertTrue(loop.hasNext(), ""2nd hasNext should return true"");"
49341,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java,78,,"        assertTrue(loop.hasNext(), ""3rd hasNext should return true"");"
49342,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java,35,,"    @SuppressWarnings(""unchecked"")"
49343,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java,44,,"    @SuppressWarnings(""unchecked"")"
49344,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java,33,,"    protected String[] testArray = { ""One"", ""Two"", ""Three"", ""Four"" };"
49345,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java,74,,"        assertEquals( ""Iteration next index"", 0, iter.nextIndex() );"
49346,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java,75,,"        assertEquals( ""Iteration previous index"", -1, iter.previousIndex() );"
49347,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java,88,,"            fail(""Expected NoSuchElementException."");"
49348,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java,31,,"        ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"""
49349,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java,72,,"    @SuppressWarnings(""unchecked"")"
49350,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java,54,,"    @SuppressWarnings(""unchecked"")"
49351,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,31,,"    @SuppressWarnings(""unchecked"")"
49352,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,41,,"        list.addAll(Arrays.asList((E[]) new String[] { ""value1"", ""value2"" }));"
49353,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,41,,"        list.addAll(Arrays.asList((E[]) new String[] { ""value1"", ""value2"" }));"
49354,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,44,,"        list.addLast((E) ""value3"");"
49355,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,49,,"        list.addLast((E) ""value4"");"
49356,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,123,,"        list.addFirst((E) ""value0"");"
49357,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java,143,,"            fail(""Expecting IndexOutOfBoundsException."");"
49358,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/AbstractListTest.java,77,,"    @SuppressWarnings(""unchecked"")"
49359,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,57,,"    @SuppressWarnings(""unchecked"")"
49360,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,96,,"        list.add((E) ""element"");"
49361,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,257,,"        assertEquals(""[1, 2, 3, 4, 5]"", list.toString());"
49362,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,259,,"        assertEquals(""[1, 3, 4, 5]"", list.toString());"
49363,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,478,,"        assertEquals(""[A, C]"", list.toString());"
49364,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,637,,"        assertEquals(""[A, Z, B, C]"", list.toString());"
49365,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,639,,"        assertEquals(""[A, Z, C]"", list.toString());"
49366,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java,1284,,"        assertEquals(""[A, B, C, D, E]"", list.toString());"
49367,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java,51,,"    @SuppressWarnings(""unchecked"")"
49368,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java,82,,"        elements.add((E) ""one"");"
49369,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java,83,,"        elements.add((E) ""two"");"
49370,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java,92,,"        assertTrue(""List shouldn't contain illegal element"", !list.contains(""one""));"
49371,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java,118,,"        assertTrue(""List should contain legal element"", list.contains(""zero""));"
49372,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java,58,,"    @SuppressWarnings(""unchecked"")"
49373,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java,179,,"        final String world = ""World"";"
49374,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/TreeListTest.java,111,,"    @SuppressWarnings(""unchecked"")"
49375,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/TreeListTest.java,114,,"        l.add((E) ""hugo"");"
49376,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/TreeListTest.java,115,,"        l.add((E) ""erna"");"
49377,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/TreeListTest.java,116,,"        l.add((E) ""daniel"");"
49378,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/TreeListTest.java,117,,"        l.add((E) ""andres"");"
49379,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/TreeListTest.java,118,,"        l.add((E) ""harald"");"
49380,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java,95,,"            fail(""Expecting UnsupportedOperationException."");"
49381,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java,300,,"    @SuppressWarnings(""unchecked"")"
49382,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java,1966,,"                     ""\nTest: "" + entrySet + ""\nReal: "" + getConfirmed().entrySet(),"
49383,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java,1966,,"                     ""\nTest: "" + entrySet + ""\nReal: "" + getConfirmed().entrySet(),"
49384,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java,55,,"        map.put((K) ""One"", (V) ""One"");"
49385,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java,56,,"        map.put((K) ""Two"", (V) ""Two"");"
49386,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java,57,,"        assertEquals(""One"", map.get(""one""));"
49387,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java,59,,"        map.put((K) ""two"", (V) ""Three"");"
49388,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java,122,,"        map.put(null, (V) ""Four"");"
49389,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java,51,,"    @SuppressWarnings(""unchecked"")"
49390,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java,77,,"        three.put((K) ""5"", (V) ""five"");"
49391,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java,50,,"    @SuppressWarnings(""unchecked"")"
49392,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java,52,,"        final Map<K, V> map = new DefaultedMap<>((V) ""NULL"");"
49393,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java,55,,"        assertEquals(false, map.containsKey(""NotInMap""));"
49394,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java,58,,"        map.put((K) ""Key"", (V) ""Value"");"
49395,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java,58,,"        map.put((K) ""Key"", (V) ""Value"");"
49396,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java,135,,"            fail(""Expecting NullPointerException"");"
49397,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java,61,,"    @SuppressWarnings(""unchecked"")"
49398,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java,64,,"        map1.put((K) ""a"", (V) ""testA"");"
49399,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java,65,,"        map1.put((K) ""b"", (V) ""testB"");"
49400,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java,226,,"        entry.setValue((V) ""NewValue"");"
49401,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java,180,,"    @SuppressWarnings(""unchecked"")"
49402,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java,603,,"            threads[i] = new Thread(tg, ""JUnit Thread "" + i) {"
49403,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java,628,,"                        fail(""Unexpected InterruptedException"");"
49404,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java,664,,"        assertEquals(""Exceptions have been thrown: "" + exceptions, 0, exceptions.size());"
49405,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java,665,,"        assertTrue(""Each thread should have put at least 1 element into the map, but only """
49406,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java,666,,"                + counter[0] + "" did succeed"", counter[0] >= threads.length);"
49407,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java,127,,"    @SuppressWarnings(""unchecked"")"
49408,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java,193,,"            lom.put(1, (K) ""testInsert1"", (V) ""testInsert1v"");"
49409,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java,205,,"        lom.put((K) ""testInsertPut"", (V) ""testInsertPutv"");"
49410,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java,209,,"        lom.put(0, (K) ""testInsert0"", (V) ""testInsert0v"");"
49411,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java,243,,"        lom.put(0, (K) i1, (V) ""One"");"
49412,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java,392,,"        assertEquals(""Should have two elements"", 2, hmap.size());"
49413,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java,60,,"    @SuppressWarnings(""unchecked"")"
49414,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java,185,,"                fail(""Invalid key size"");"
49415,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,54,,"    @SuppressWarnings(""unchecked"")"
49416,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,57,,"        assertTrue(map.get(""one"") instanceof LinkedList);"
49417,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,64,,"        expected.add((V) ""uno"");"
49418,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,74,,"        assertTrue(map.containsValue(""dos""));"
49419,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,75,,"        assertTrue(map.containsValue(""deux""));"
49420,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,76,,"        assertTrue(map.containsValue(""tres""));"
49421,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,77,,"        assertTrue(map.containsValue(""trois""));"
49422,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,86,,"        assertTrue(map.containsValue(""two"", ""dos""));"
49423,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,88,,"        assertTrue(map.containsValue(""three"", ""tres""));"
49424,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,306,,"        original.put((K) ""key"", ""object1"");"
49425,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,306,,"        original.put((K) ""key"", ""object1"");"
49426,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,307,,"        original.put((K) ""key"", ""object2"");"
49427,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,310,,"        test.put((K) ""keyA"", ""objectA"");"
49428,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,310,,"        test.put((K) ""keyA"", ""objectA"");"
49429,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,311,,"        test.put((K) ""key"", ""object0"");"
49430,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java,78,,"        m.put(Integer.valueOf(1), ""one"");"
49431,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java,79,,"        m.put(Integer.valueOf(2), ""two"");"
49432,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java,81,,"        m.put(Integer.valueOf(4), ""four"");"
49433,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java,83,,"        m.put(Integer.valueOf(6), ""six"");"
49434,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java,85,,"    @SuppressWarnings(""unchecked"")"
49435,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java,63,,"    @SuppressWarnings(""unchecked"")"
49436,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java,83,,"    @SuppressWarnings(""unchecked"")"
49437,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java,63,,"    @SuppressWarnings(""unchecked"")"
49438,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java,53,,"    @SuppressWarnings(""unchecked"")"
49439,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java,86,,"        assertSame(m.isEmpty(), map.headMap((K) ""again"").isEmpty());"
49440,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java,89,,"        assertSame(17, map.headMap((K) ""you"").size());"
49441,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,130,,"    @SuppressWarnings(""unchecked"")"
49442,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,133,,"            ""one"", ""one"", ""two"", ""two"","
49443,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,133,,"            ""one"", ""one"", ""two"", ""two"","
49444,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,134,,"            ""three"", ""three"""
49445,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,148,,"            ""uno"", ""un"", ""dos"", ""deux"","
49446,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,148,,"            ""uno"", ""un"", ""dos"", ""deux"","
49447,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,148,,"            ""uno"", ""un"", ""dos"", ""deux"","
49448,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,149,,"            ""tres"", ""trois"""
49449,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,149,,"            ""tres"", ""trois"""
49450,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,550,,"        original.put((K) ""key"", (V) ""object1"");"
49451,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,550,,"        original.put((K) ""key"", (V) ""object1"");"
49452,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,551,,"        original.put((K) ""key"", (V) ""object2"");"
49453,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,554,,"        test.put((K) ""keyA"", (V) ""objectA"");"
49454,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,554,,"        test.put((K) ""keyA"", (V) ""objectA"");"
49455,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,555,,"        test.put((K) ""key"", (V) ""object0"");"
49456,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java,561,,"            fail(""expecting NullPointerException"");"
49457,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java,54,,"    @SuppressWarnings(""unchecked"")"
49458,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java,62,,"    @SuppressWarnings(""unchecked"")"
49459,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java,65,,"        assertTrue(setMap.get((K) ""whatever"") instanceof Set);"
49460,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java,52,,"    @SuppressWarnings(""unchecked"")"
49461,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java,56,,"        assertEquals(""[uno, un]"", map.get((K) ""one"").toString());"
49462,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java,104,,"    @SuppressWarnings(""unchecked"")"
49463,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java,233,,"            keySet.add((K) ""four"");"
49464,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java,129,,"    @SuppressWarnings(""unchecked"")"
49465,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java,138,,"        assertEquals(""Should have count of 1"", 1, multiset.getCount(""A""));"
49466,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java,253,,"        assertEquals(""MultiSet containsAll of empty"", true, multiset.containsAll(known));"
49467,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java,256,,"        assertEquals(""MultiSet does not containsAll of 1 'B'"", false, multiset.containsAll(known1B));"
49468,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java,257,,"        assertEquals(""MultiSet does not containsAll of 1 'A' 1 'B'"", false, multiset.containsAll(known1A1B));"
49469,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java,261,,"        assertEquals(""MultiSet containsAll of 1 'A'"", true, multiset.containsAll(known1A));"
49470,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java,58,,"        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.compute(""key"", (k, v) -> ""foo""));"
49471,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java,58,,"        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.compute(""key"", (k, v) -> ""foo""));"
49472,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java,103,,"        p.put(""Key"", ""Value"");"
49473,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java,103,,"        p.put(""Key"", ""Value"");"
49474,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java,119,,"        assertEquals(""bar"", PropertiesFactory.EMPTY_PROPERTIES.getOrDefault(""foo"", ""bar""));"
49475,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java,258,,"        final String comments = ""Hello world!"";"
49476,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java,300,,"    @SuppressWarnings(""unchecked"")"
49477,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java,111,,"    @SuppressWarnings(""unchecked"")"
49478,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java,268,,"        assertEquals(""[3, 4, 5, 6, 7]"", fifo.toString());"
49479,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java,85,,"        queue.add((E) ""one"");"
49480,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/AbstractNavigableSetTest.java,106,,"    @SuppressWarnings(""unchecked"")"
49481,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/AbstractSortedSetTest.java,114,,"    @SuppressWarnings(""unchecked"")"
49482,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java,45,,"    @SuppressWarnings(""unchecked"")"
49483,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java,45,,"    @SuppressWarnings(""unchecked"")"
49484,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java,54,,"    @SuppressWarnings(""unchecked"")"
49485,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java,102,,"        assertTrue(""Set shouldn't contain illegal element"", !set.contains(""Aone""));"
49486,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java,97,,"        assertTrue(""Set shouldn't contain illegal element"", !set.contains(""one""));"
49487,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java,99,,"        assertTrue(""Set shouldn't contain illegal element"", !set.contains(""Aone""));"
49488,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java,112,,"            fail(""Expecting UnsupportedOperationException."");"
49489,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java,107,,"            fail(""Expecting UnsupportedOperationException."");"
49490,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,67,,"            ""Albert"", ""Xavier"", ""XyZ"", ""Anna"", ""Alien"", ""Alberto"","
49491,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,67,,"            ""Albert"", ""Xavier"", ""XyZ"", ""Anna"", ""Alien"", ""Alberto"","
49492,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,67,,"            ""Albert"", ""Xavier"", ""XyZ"", ""Anna"", ""Alien"", ""Alberto"","
49493,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,67,,"            ""Albert"", ""Xavier"", ""XyZ"", ""Anna"", ""Alien"", ""Alberto"","
49494,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,67,,"            ""Albert"", ""Xavier"", ""XyZ"", ""Anna"", ""Alien"", ""Alberto"","
49495,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,68,,"            ""Alberts"", ""Allie"", ""Alliese"", ""Alabama"", ""Banane"","
49496,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,68,,"            ""Alberts"", ""Allie"", ""Alliese"", ""Alabama"", ""Banane"","
49497,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,68,,"            ""Alberts"", ""Allie"", ""Alliese"", ""Alabama"", ""Banane"","
49498,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,68,,"            ""Alberts"", ""Allie"", ""Alliese"", ""Alabama"", ""Banane"","
49499,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,68,,"            ""Alberts"", ""Allie"", ""Alliese"", ""Alabama"", ""Banane"","
49500,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,69,,"            ""Blabla"", ""Amber"", ""Ammun"", ""Akka"", ""Akko"", ""Albertoo"","
49501,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,69,,"            ""Blabla"", ""Amber"", ""Ammun"", ""Akka"", ""Akko"", ""Albertoo"","
49502,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,69,,"            ""Blabla"", ""Amber"", ""Ammun"", ""Akka"", ""Akko"", ""Albertoo"","
49503,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,69,,"            ""Blabla"", ""Amber"", ""Ammun"", ""Akka"", ""Akko"", ""Albertoo"","
49504,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,69,,"            ""Blabla"", ""Amber"", ""Ammun"", ""Akka"", ""Akko"", ""Albertoo"","
49505,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,112,,"        Assert.assertNull(trie.get(""Albertz""));"
49506,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,138,,"        trie.put(""Albertoad"", ""Albertoad"");"
49507,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,374,,"        trie.put(""Anael"", 2);"
49508,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,375,,"        trie.put(""Analu"", 3);"
49509,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,376,,"        trie.put(""Andreas"", 4);"
49510,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,377,,"        trie.put(""Andrea"", 5);"
49511,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,378,,"        trie.put(""Andres"", 6);"
49512,./TargetProjects/commons-collections/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,379,,"        trie.put(""Anatole"", 7);"
49513,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/Lister.java,70,,"            System.out.println(""Created "" + ais.toString());"
49514,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,78,,"            throw new IOException(""Stream has already been finished"");"
49515,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,225,,"            throw new IOException(""Stream has already been finished"");"
49516,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1274,,"                        throw new IOException(""Not implemented"");"
49517,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1769,,"        if (headers.containsKey(""GNU.sparse.name"")) {"
49518,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,351,,"            throw new IOException(""Stream has already been finished"");"
49519,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,769,,"                                    throw new IOException(""Failed to read Paxheader."""
49520,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,883,,"                throw new IOException(""Corrupted TAR archive."""
49521,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,452,,"                    throw new ZipException(""broken archive, entry with negative compressed size"");"
49522,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,457,,"                    throw new ZipException(""broken archive, entry with negative size"");"
49523,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,603,,"                throw new IOException(""Truncated ZIP file"");"
49524,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,643,,"            throw new IOException(""Stream has already been finished"");"
49525,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,796,,"            checkBounds(this.su_tPos, this.data.tt.length, ""su_tPos"");"
49526,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/BandSet.java,202,,"        if (effort > 3 && !name.equals(""POPULATION"")) {"
49527,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/BcBands.java,104,,"        PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from bcCodes["" + bcCodes.size() + ""]"");"
49528,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/ClassBands.java,477,,"        PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from class_this["" + class_this.length + ""]"");"
49529,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/ClassBands.java,1017,,"        throw new RuntimeException(""No suitable definition for "" + attributeName);"
49530,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/CpBands.java,104,,"        PackingUtils.log(""Writing "" + cp_Utf8.size() + "" UTF8 entries..."");"
49531,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/CpBands.java,155,,"        PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from cpUtf8Prefix["" + cpUtf8Prefix.length + ""]"");"
49532,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/FileBands.java,133,,"        PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from file_name["" + file_name.length + ""]"");"
49533,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/IcBands.java,75,,"        PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from ic_this_class["" + ic_this_class.length + ""]"");"
49534,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/MetadataBandGroup.java,99,,"                    PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from "" + contextStr + ""_"" + type"
49535,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/MetadataBandGroup.java,99,,"                    PackingUtils.log(""Wrote "" + encodedBand.length + "" bytes from "" + contextStr + ""_"" + type"
49536,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/PopulationCodec.java,51,,"        throw new Pack200Exception(""Population encoding does not work unless the number of elements are known"");"
49537,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/pack200/Segment.java,211,,"                throw new Error(""Unknown attribute encountered"");"
49538,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode.java,152,,"            throw new Error(""Trying to rewrite "" + this + "" that has no rewrite"");"
49539,./TargetProjects/commons-compress/src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/forms/VariableInstructionForm.java,66,,"            throw new Error(""Trying to rewrite "" + this + "" but there is no room for 4 bytes"");"
49540,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,77,,"        final String input = ""012345678901234567890123456789012345678901234567890123456789"""
49541,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/IOMethodsTest.java,59,,"        final ArchiveEntry entry = new ArArchiveEntry(""dummy"", bytesToTest);"
49542,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,47,,"        final File file1 = getFile(""test1.xml"");"
49543,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,48,,"        final File file2 = getFile(""test2.xml"");"
49544,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,199,,"            archive = File.createTempFile(""test."", "".ar"", tmp[0]);"
49545,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,199,,"            archive = File.createTempFile(""test."", "".ar"", tmp[0]);"
49546,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,203,,"            final ArArchiveEntry in = new ArArchiveEntry(tmp[0], ""foo"");"
49547,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,46,,"        aos1.putArchiveEntry(new ZipArchiveEntry(""dummy""));"
49548,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,49,,"            fail(""After putArchive should follow closeArchive"");"
49549,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,144,,"        fac = new ArchiveStreamFactory(""UTF-8"");"
49550,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,200,,"    private static final ArchiveStreamFactory FACTORY_ASCII = new ArchiveStreamFactory(""ASCII"");"
49551,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,209,,"    private static final String ZIP_DEFAULT = getField(new ZipArchiveInputStream(null),""encoding"");"
49552,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,218,,"            dflt = getField(new ArjArchiveInputStream(Files.newInputStream(getFile(""bla.arj"").toPath())), ""charsetName"");"
49553,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,218,,"            dflt = getField(new ArjArchiveInputStream(Files.newInputStream(getFile(""bla.arj"").toPath())), ""charsetName"");"
49554,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,225,,"            dflt = getField(new DumpArchiveInputStream(Files.newInputStream(getFile(""bla.dump"").toPath())), ""encoding"");"
49555,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,283,,"        new TestData(""bla.cpio"", ArchiveStreamFactory.CPIO, true, CPIO_DEFAULT, FACTORY, ""encoding""),"
49556,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,295,,"        new TestData(""bla.tar"", ArchiveStreamFactory.TAR, true, TAR_DEFAULT, FACTORY, ""encoding""),"
49557,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,301,,"        new TestData(""bla.jar"", ArchiveStreamFactory.JAR, true, JAR_DEFAULT, FACTORY, ""encoding""),"
49558,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,307,,"        new TestData(""bla.zip"", ArchiveStreamFactory.ZIP, true, ZIP_DEFAULT, FACTORY, ""encoding""),"
49559,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,47,,"        final File file1 = getFile(""test1.xml"");"
49560,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,48,,"        final File file2 = getFile(""test2.xml"");"
49561,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,124,,"            archive = File.createTempFile(""test."", "".cpio"", tmp[0]);"
49562,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,124,,"            archive = File.createTempFile(""test."", "".cpio"", tmp[0]);"
49563,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,128,,"            final CpioArchiveEntry in = new CpioArchiveEntry(tmp[0], ""foo"");"
49564,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,39,,"            fail(""Should raise an IllegalArgumentException."");"
49565,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,43,,"            fail(""ArchiveException not expected"");"
49566,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,53,,"        final File output = new File(dir, ""bla.tar"");"
49567,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,56,,"        final ArchiveOutputStream os = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(""tar"", out);"
49568,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,178,,"            archive = File.createTempFile(""test."", "".tar"", tmp[0]);"
49569,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,178,,"            archive = File.createTempFile(""test."", "".tar"", tmp[0]);"
49570,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,182,,"            final TarArchiveEntry in = new TarArchiveEntry(tmp[0], ""foo"");"
49571,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,192,,"            assertEquals(""foo/"", out.getName());"
49572,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,472,,"        final File input = getFile(""COMPRESS-178.tar"");"
49573,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,74,,"        final File file1 = getFile(""test1.xml"");"
49574,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,75,,"        final File file2 = getFile(""test2.xml"");"
49575,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,78,,"            try (ArchiveOutputStream os = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(""zip"", out)) {"
49576,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,282,,"            archive = File.createTempFile(""test."", "".zip"", tmp[0]);"
49577,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,282,,"            archive = File.createTempFile(""test."", "".zip"", tmp[0]);"
49578,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,286,,"            final ZipArchiveEntry in = new ZipArchiveEntry(tmp[0], ""foo"");"
49579,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,292,,"            final ZipArchiveEntry out = zf.getEntry(""foo/"");"
49580,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,72,,"        try (InputStream in = Files.newInputStream(getFile(""bla.ar"").toPath());"
49581,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,45,,"        try (final ArjArchiveInputStream in = new ArjArchiveInputStream(Files.newInputStream(getFile(""bla.arj"").toPath()))) {"
49582,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,28,,"        final DumpArchiveEntry ent = new DumpArchiveEntry(""foo"", ""bar"", -1,"
49583,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java,170,,"            aos.putArchiveEntry(aos.createArchiveEntry(dir, ""a/b""));"
49584,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java,172,,"            aos.putArchiveEntry(aos.createArchiveEntry(dir, ""a/b/c""));"
49585,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java,174,,"            aos.putArchiveEntry(aos.createArchiveEntry(dummy, ""a/b/d.txt""));"
49586,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java,175,,"            aos.write(""Hello, world 1"".getBytes(UTF_8));"
49587,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java,177,,"            aos.putArchiveEntry(aos.createArchiveEntry(dummy, ""a/b/c/e.txt""));"
49588,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,146,,"        test7zUnarchive(getFile(""bla.7z""), SevenZMethod.LZMA);"
49589,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,156,,"        test7zUnarchive(getFile(""bla.deflate64.7z""), SevenZMethod.DEFLATE64);"
49590,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,162,,"            test7zUnarchive(getFile(""bla.encrypted.7z""), SevenZMethod.LZMA, // stack LZMA + AES"
49591,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,205,,"        try (SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-256.7z""))) {"
49592,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,276,,"            assertEquals(""test1.xml"", entry.getName());"
49593,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,278,,"            assertEquals(""test2.xml"", entry.getName());"
49594,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,434,,"            final String testTxtContents = ""111111111111111111111111111000101011\n"" +"
49595,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,443,,"                    ""111111111111111111111111111000101011"";"
49596,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,446,,"                if(entry.getName().equals(""commons-compress-1.7-src/src/test/resources/test.txt"")) {"
49597,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,76,,"            SevenZArchiveEntry entry = outArchive.createArchiveEntry(dir, ""foo/"");"
49598,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,49,,"        final File file = getFile(""oldgnu_sparse.tar"");"
49599,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,52,,"            assertEquals(""sparsefile"", ae.getName());"
49600,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,128,,"        final File file = getFile(""pax_gnu_sparse.tar"");"
49601,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,75,,"            t = new TarArchiveEntry(new File(new File(ROOT), ""foo.txt""));"
49602,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,143,,"        entry.addPaxHeader(""APACHE.mustelida"",""true"");"
49603,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,144,,"        entry.addPaxHeader(""SCHILY.xattr.user.org.apache.weasels"",""maximum weasels"");"
49604,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,179,,"        final TarArchiveEntry t = new TarArchiveEntry(""/foo"", LF_GNUTYPE_LONGNAME);"
49605,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,218,,"        final TarArchiveEntry entry = new TarArchiveEntry(getFile(""test1.xml""));"
49606,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,251,,"                ""\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"" +"
49607,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,274,,"        new TarArchiveEntry(""test"").setDataOffset(-1);"
49608,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,281,,"        te.fillStarSparseData(Collections.singletonMap(""SCHILY.realsize"", ""201""));"
49609,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,84,,"        final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
49610,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,180,,"                + ""01234567890123456789012345678901234567890123456789"""
49611,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,215,,"        final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
49612,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,419,,"            + ""01234567890123456789012345678901234567890123456789/"";"
49613,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,545,,"        final TarArchiveEntry entry = new TarArchiveEntry(""test"", TarConstants.LF_SYMLINK);"
49614,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarMemoryFileSystemTest.java,47,,"            Files.write(p, ""Test"".getBytes(UTF_8));"
49615,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,473,,"        thrown.expectMessage(startsWith(""Failed to read Paxheader""));"
49616,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,481,,"        final String header = ""23 GNU.sparse.offset=0\n"""
49617,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,577,,"        thrown.expectMessage(startsWith(""Corrupted TAR archive""));"
49618,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,677,,"        final byte[] header = (""1\n"""
49619,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,678,,"                + ""0\n"""
49620,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,679,,"                + ""20\n"")"
49621,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,708,,"        thrown.expectMessage(startsWith(""Corrupted TAR archive.""));"
49622,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,34,,"        assertEquals(""next bit"", -1, stream.nextBit());"
49623,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,69,,"        assertEquals(""next byte"", -1, stream.nextByte());"
49624,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,41,,"            assertEquals(""buffer["" + i + ""]"", i, buffer.get());"
49625,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,58,,"            zos.putArchiveEntry(new ZipArchiveEntry(""test1.txt""));"
49626,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,86,,"        assertEquals(""number of fields"", 2, ze.length);"
49627,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,87,,"        assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);"
49628,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,88,,"        assertEquals(""mode field 1"", 040755,"
49629,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,90,,"        assertTrue(""type field 2"", ze[1] instanceof UnrecognizedExtraField);"
49630,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,91,,"        assertEquals(""data length field 2"", 1,"
49631,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/NioZipEncodingTest.java,32,,"    private static final String UMLAUTS = ""\u00e4\u00f6\u00fc"";"
49632,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,95,,"        final ScatterGatherBackingStoreSupplier supp = () -> new FileBasedScatterGatherBackingStore(tmp = File.createTempFile(""parallelscatter"", ""n1""));"
49633,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,102,,"        final File archive = getFile(""utf8-7zip-test.zip"");"
49634,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,54,,"        read5GBOfZerosImpl(get5GBZerosFile(), ""5GB_of_Zeros"");"
49635,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,323,,"        fail(""expected a Zip64RequiredException"");"
49636,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,388,,"            assertArrayEquals(""CDH start"", new byte[] {"
49637,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,416,,"            assertArrayEquals(""CDH rest"", new byte[] {"
49638,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,437,,"                assertArrayEquals(""CDH extra"", new byte[] {"
49639,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,637,,"                assertArrayEquals(""offset"", new byte[] {"
49640,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,664,,"                assertArrayEquals(""extra offset"", new byte[] {"
49641,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,673,,"            assertArrayEquals(""LFH start"", new byte[] {"
49642,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,687,,"            assertArrayEquals(""LFH rest"", new byte[] {"
49643,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,703,,"            assertArrayEquals(""LFH extra"", new byte[] {"
49644,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,780,,"            assertTrue(ex.getMessage().startsWith(""0's size""));"
49645,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,189,,"        ZipArchiveEntry ze = new ZipArchiveEntry(""foo"");"
49646,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,145,,"        InputStream original = Files.newInputStream(getFile(""test1.xml"").toPath());"
49647,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,173,,"        try (ZipArchiveInputStream in = new ZipArchiveInputStream(Files.newInputStream(getFile(""COMPRESS-264.zip"").toPath()))) {"
49648,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,310,,"        nameSource(""bla.zip"", ""test1.xml"", ZipArchiveEntry.NameSource.NAME);"
49649,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,435,,"                fail(""expected exception"");"
49650,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,437,,"                assertEquals(""Truncated ZIP file"", ex.getMessage());"
49651,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,529,,"             ZipArchiveInputStream archive = new ZipArchiveInputStream(fs, ""UTF-8"", true, true)) {"
49652,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,430,,"            final ZipArchiveEntry inflatedEntry = zf.getEntry(""inflated.txt"");"
49653,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,434,,"            final ZipArchiveEntry storedEntry = zf.getEntry(""stored.txt"");"
49654,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,454,,"            final byte[] storedContent = ""Hello Stored\n"".getBytes();"
49655,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStreamTest.java,39,,"        new ZipSplitOutputStream(File.createTempFile(""temp"", ""zip""), (64 * 1024 - 1));"
49656,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStreamTest.java,39,,"        new ZipSplitOutputStream(File.createTempFile(""temp"", ""zip""), (64 * 1024 - 1));"
49657,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,72,,"            in = Files.newInputStream(getFile(""test.txt"").toPath());"
49658,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,73,,"            in2 = Files.newInputStream(getFile(""test2.xml"").toPath());"
49659,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,140,,"        final String archivename = ""cpio"";"
49660,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,145,,"        final File result = File.createTempFile(""test"", "".""+archivename);"
49661,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,156,,"            changes.deleteDir(""bla"");"
49662,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,353,,"        final String archivename = ""zip"";"
49663,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,370,,"            changes.delete(""test/test3.xml"");"
49664,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,445,,"            final ArchiveEntry entry = out.createArchiveEntry(file1, ""bla/test.txt"");"
49665,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,461,,"            assertTrue(results.getAddedFromStream().contains(""testdata/test1.xml""));"
49666,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,553,,"            final ArchiveEntry entry = new ZipArchiveEntry(""blub/test.txt"");"
49667,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,757,,"        expected.add(""test1.xml"");"
49668,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,776,,"            final File input = getFile(""bla.tar"");"
49669,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,778,,"            ais = factory.createArchiveInputStream(""tar"", is);"
49670,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,817,,"            final File input = getFile(""bla.jar"");"
49671,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,819,,"            ais = factory.createArchiveInputStream(""jar"", is);"
49672,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,853,,"                    ""testdata/test.txt"");"
49673,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,950,,"            final File input = getFile(""bla.ar"");"
49674,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,42,,"            final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""bzip2"", out);"
49675,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java,57,,"        assertEquals(""x.tar"", BZip2Utils.getUncompressedFilename(""x.tbz2""));"
49676,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,77,,"        new TestData(""multiple.bz2"", new char[]{'a','b'}, factoryTrue, true),"
49677,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,83,,"        new TestData(""multiple.gz"", new char[]{'a','b'}, factoryTrue, true),"
49678,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,89,,"        new TestData(""multiple.xz"", new char[]{'a','b'}, factoryTrue, true),"
49679,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,110,,"        final CompressorInputStream xz = getStreamFor(""bla.tar.xz"");"
49680,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,98,,"                 .createCompressorOutputStream(""snappy-framed"", os)) {"
49681,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,58,,"        final File input = getFile(""bla.tgz"");"
49682,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,138,,"        try (InputStream fis = Files.newInputStream(getFile(""test3.xml"").toPath())) {"
49683,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,192,,"            fail(""IllegalArgumentException not thrown"");"
49684,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java,33,,"        assertFalse(GzipUtils.isCompressedFilename("".gz""));"
49685,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java,37,,"        assertTrue(GzipUtils.isCompressedFilename(""x.svgz""));"
49686,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,60,,"        final File input = getFile(""bla.tar.lzma"");"
49687,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,70,,"        final File input = getFile(""bla.pack"");"
49688,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java,45,,"        final File input = getFile(""brotli.testdata.compressed"");"
49689,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,35,,"        final File input = AbstractTestCase.getFile(""bla.tar.deflatez"");"
49690,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java,101,,"            assertEquals(""Hello World"", br.readLine());"
49691,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,54,,"        IOUtils.read(getFile(""bla.tar.lz4""), b);"
49692,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,63,,"            InputStream e = Files.newInputStream(getFile(""bla.tar"").toPath())) {"
49693,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,162,,"             fail(""expected exception"");"
49694,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,430,,"            assertThat(ex.getMessage(), containsString(""garbage""));"
49695,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,124,,"        assertLiteralBlock(""Blah b"", blocks.get(0));"
49696,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,32,,"        assertFalse(LZMAUtils.isCompressedFilename("".lzma""));"
49697,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,32,,"        assertFalse(XZUtils.isCompressedFilename("".xz""));"
49698,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java,48,,"        final File input = getFile(""zstandard.testdata.zst"");"
49699,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java,49,,"        final File expected = getFile(""zstandard.testdata"");"
49700,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/ArchiveTest.java,60,,"        File file2 = File.createTempFile(""helloworld"", "".jar"");"
49701,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/ArchiveTest.java,102,,"        file = File.createTempFile(""sql"", "".pack"");"
49702,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/NewAttributeBandsTest.java,49,,"        CPUTF8 name = new CPUTF8(""TestAttribute"");"
49703,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,58,,"                ""/pack200/sqlUnpacked.jar"").toURI()));"
49704,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,59,,"        file = File.createTempFile(""sql"", "".pack"");"
49705,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,59,,"        file = File.createTempFile(""sql"", "".pack"");"
49706,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,70,,"        File file2 = File.createTempFile(""sql"", "".jar"");"
49707,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,283,,"                ""/pack200/hw.jar"").toURI()));"
49708,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,284,,"        file = File.createTempFile(""helloworld"", "".pack.gz"");"
49709,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,284,,"        file = File.createTempFile(""helloworld"", "".pack.gz"");"
49710,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,475,,"                                        ""/pack200/jndiWithUnknownAttributes.jar"")"
49711,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,477,,"        file = File.createTempFile(""unknown"", "".pack"");"
49712,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java,481,,"        options.addClassAttributeAction(""Pack200"", ""I"");"
49713,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/ArchiveTest.java,62,,"        file = File.createTempFile(""sql-e1"", "".jar"");"
49714,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/ArchiveTest.java,71,,"                .getResourceAsStream(""/pack200/sql.pack.gz"");"
49715,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/ArchiveTest.java,72,,"        file = File.createTempFile(""sql"", "".jar"");"
49716,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/ArchiveTest.java,272,,"        file = File.createTempFile(""logtest"", "".jar"");"
49717,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/AttributeLayoutMapTest.java,30,,"        AttributeLayout layout = a.getAttributeLayout(""SourceFile"","
49718,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/AttributeLayoutTest.java,69,,"        assertTrue(!throwsException(""name"", AttributeLayout.CONTEXT_CLASS, """"));"
49719,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/NewAttributeBandsTest.java,41,,"                new MockSegment(), new AttributeLayout(""test"","
49720,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolArrayCacheTest.java,30,,"        String array[] = {""Zero"", ""One"", ""Two"", ""Three"", ""Four""};"
49721,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolArrayCacheTest.java,38,,"        String array[] = {""Zero"", ""OneThreeFour"", ""Two"", ""OneThreeFour"", ""OneThreeFour""};"
49722,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolArrayCacheTest.java,48,,"        String arrayOne[] = {""Zero"", ""Shared"", ""Two"", ""Shared"", ""Shared""};"
49723,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolTest.java,56,,"    String[] testClassArray = { ""Object"", ""Object"", ""java/lang/String"","
49724,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolTest.java,56,,"    String[] testClassArray = { ""Object"", ""Object"", ""java/lang/String"","
49725,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolTest.java,57,,"            ""java/lang/String"", ""Object"", ""Other"" };"
49726,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolTest.java,91,,"                testClassArray, testMethodArray, ""Object"", ""^<init>.*"", 0));"
49727,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/harmony/unpack200/tests/bytecode/ClassFileEntryTest.java,96,,"        CPMember cp1 = new CPMember(new CPUTF8(""Name"", 3), new CPUTF8(""I"", 4),"
49728,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/utils/FileNameUtilsTest.java,30,,"        assertEquals(""foo"", FileNameUtils.getExtension(""a/b/c/bar.foo""));"
49729,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,48,,"        testWriteAndPad(10240, ""hello world!\n"", false);"
49730,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java,206,,"        Assert.assertTrue(""readBufferSize "" + readBufferSize, channel.isOpen());"
49731,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.java,80,,"        final File file1 = getFile(""COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01"");"
49732,./TargetProjects/commons-compress/src/test/java/org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.java,83,,"        final File file2 = getFile(""COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02"");"
49733,./TargetProjects/commons-configuration/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java,136,,"            throw new IllegalArgumentException(""Property '"" + name + ""' does not exist."");"
49734,./TargetProjects/commons-configuration/src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java,136,,"            throw new IllegalArgumentException(""Property '"" + name + ""' does not exist."");"
49735,./TargetProjects/commons-configuration/src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java,200,,"                + "" can't be converted to a "" + cls.getName() + "" object"");"
49736,./TargetProjects/commons-configuration/src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java,223,,"            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");"
49737,./TargetProjects/commons-configuration/src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java,420,,"                        + "" to "" + targetClass.getName()"
49738,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java,66,,"        config.setProperty(""inttest.interpol"", ""${unknown.property}"");"
49739,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java,150,,"            config.addProperty(""prop"" + e.getKey(), ""${env:"" + e.getKey() + ""}"");"
49740,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java,90,,"        mockBaseCtx.matchAndReturn(METHOD_LOOKUP, C.eq(""test""), mockPrfxCtx"
49741,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java,64,,"        assertEquals(""key1"", ""value1"", config.getProperty(""key1""));"
49742,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java,65,,"        assertEquals(""key2"", ""value2"", config.getProperty(""key2""));"
49743,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java,66,,"        assertNull(""key3"", config.getProperty(""key3""));"
49744,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java,86,,"            config.addProperty(""key"" + i, ""value"" + i);"
49745,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java,141,,"        config.addProperty(""test"", ""value1"");"
49746,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java,608,,"        config.addProperty(""animal"", ""quick brown fox"");"
49747,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java,735,,"        assertEquals(""Wrong result"", value, config.get(Integer.class, KEY_PREFIX));"
49748,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,122,,"        Object prop = testConfig.getProperty(""tables.table(0).fields.field.name"");"
49749,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,127,,"        prop = testConfig.getProperty(""tables.table.fields.field.name"");"
49750,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,152,,"        config.setProperty(""tables.table(0).name"", ""resources"");"
49751,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,154,,"        config.setProperty(""tables.table.name"", ""tab1,tab2"");"
49752,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,158,,"        config.setProperty(""test.items.item"", new int[] { 2, 4, 8, 16 });"
49753,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,160,,"        assertEquals(8, config.getInt(""test.items.item(2)""));"
49754,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,166,,"        config.setProperty(""test"", Boolean.TRUE);"
49755,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,180,,"        config.setProperty(null, ""value"");"
49756,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,216,,"        config.clearTree(""tables.table(0).fields"");"
49757,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,248,,"            final String name = config.getString(""indexList.index("" + idx"
49758,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,334,,"        config.addProperty(""order.key1"", ""value1"");"
49759,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,335,,"        config.addProperty(""order.key2"", ""value2"");"
49760,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,350,,"        config.addProperty(""tables.table(0)[@type]"", ""system"");"
49761,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,350,,"        config.addProperty(""tables.table(0)[@type]"", ""system"");"
49762,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,385,,"        checkKeys(""tables.table(1)"", new String[] { ""name"", ""fields.field.name"" });"
49763,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,467,,"        config.addProperty(""connection.passwd"", ""tiger"");"
49764,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java,1097,,"            throw new UnsupportedOperationException(""Unexpected method call!"");"
49765,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,60,,"    static final String KEY_NUMBER = ""number"";"
49766,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,82,,"        config.addProperty(""complex.property"", props);"
49767,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,191,,"        config.setProperty(""prop.string"", prop);"
49768,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,212,,"        assertEquals(""Existing key"", number, config.getBigDecimal(""numberBigD""));"
49769,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,213,,"        assertEquals(""Existing key with default value"", number, config.getBigDecimal(""numberBigD"", defaultValue));"
49770,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,214,,"        assertEquals(""Missing key with default value"", defaultValue, config.getBigDecimal(""numberNotInConfig"", defaultValue));"
49771,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,214,,"        assertEquals(""Missing key with default value"", defaultValue, config.getBigDecimal(""numberNotInConfig"", defaultValue));"
49772,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,220,,"        config.setProperty(""test.empty"", """");"
49773,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,268,,"        assertEquals(""long value"", 0xFFFFFFFFFFFFFFFFL, config.getLong(""number""));"
49774,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,276,,"        config.setProperty(""boolA"", Boolean.TRUE);"
49775,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,325,,"        config.setProperty(""numberD"", ""1.0"");"
49776,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,377,,"        config.setProperty(""numberF"", ""1.0"");"
49777,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,435,,"        config.addProperty(""value"", ""${number}"");"
49778,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,486,,"        config.setProperty(""numberL"", ""1"");"
49779,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,523,,"        config.setProperty(""numberS"", ""1"");"
49780,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java,733,,"        config.clearProperty(""prop.properties"");"
49781,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java,146,,"        final HierarchicalConfiguration<ImmutableNode> sub = config.configurationAt(""element2"");"
49782,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java,204,,"        config.clearTree(""element2.subelement"");"
49783,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,68,,"        config.setProperty(""number"", ""1"");"
49784,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,81,,"        assertEquals(""This returns 2(default byte)"", twoB, config.getByte(""numberNotInConfig"", twoB));"
49785,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,94,,"        config.setProperty(""test.empty"", """");"
49786,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,101,,"        config.setProperty(""numberS"", ""1"");"
49787,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,126,,"        config.setProperty(""numberL"", ""1"");"
49788,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,151,,"        config.setProperty(""numberF"", ""1.0"");"
49789,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,176,,"        config.setProperty(""numberD"", ""1.0"");"
49790,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,270,,"        config.setProperty(""boolA"", Boolean.TRUE);"
49791,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,315,,"        config.setProperty(""prop.string"", prop);"
49792,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java,333,,"        config.clearProperty(""prop.properties"");"
49793,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java,132,,"        assertTrue(""Wrong property value"", config.getBoolean(TEST_KEY));"
49794,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java,557,,"        config.getConfiguration(CHILD1).addProperty(key, ""1,2,3"");"
49795,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java,714,,"        x1.addProperty(""key2"", ""value2"");"
49796,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java,715,,"        x1.addProperty(""key2[@override]"", ""USER2"");"
49797,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java,715,,"        x1.addProperty(""key2[@override]"", ""USER2"");"
49798,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,102,,"        assertEquals(""Number of configurations"", 2, cc.getNumberOfConfigurations());"
49799,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,195,,"        assertEquals(""Make sure we get the property from conf1 first"", 1, cc.getInt(""test.short""));"
49800,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,208,,"        assertEquals(""value"", cc.getString(""element""));"
49801,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,219,,"        assertEquals(""default"", cc.getString(""bogus"", ""default""));"
49802,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,290,,"        Configuration subset = cc.subset(""test"");"
49803,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,361,,"        conf1.addProperty(""array"", ""value1"");"
49804,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,464,,"        assertEquals(""test string"", c.getString(""string"", ""some default value""));"
49805,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,502,,"        config.addProperty(""list"", ""${base}.bar1"");"
49806,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,766,,"        p.addProperty(""bar"", ""${foo}"");"
49807,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,767,,"        p.addProperty(""prefix.foo"", ""override"");"
49808,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java,855,,"        conf1.setProperty(TEST_PROPERTY, ""conf1"");"
49809,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java,41,,"        props.setProperty(""string"", ""teststring"");"
49810,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java,41,,"        props.setProperty(""string"", ""teststring"");"
49811,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java,64,,"        config.addProperty(""array"", ""item 1"");"
49812,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,86,,"        assertEquals(""String representation of a configuration"", ""one=1"", ConfigurationUtils.toString(config));"
49813,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,103,,"        conf1.addProperty(""key1"", ""value1"");"
49814,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,103,,"        conf1.addProperty(""key1"", ""value1"");"
49815,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,104,,"        conf1.addProperty(""key2"", ""value2"");"
49816,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,104,,"        conf1.addProperty(""key2"", ""value2"");"
49817,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,154,,"            conf.addProperty(""test"" + i, ""value"" + i);"
49818,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,371,,"        assertSame(""Wrong result"", value,"
49819,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java,454,,"        assertEquals(""Wrong class"", CLS_NAME,"
49820,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,72,,"        conf.addProperty(""empty"", """");"
49821,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,75,,"        conf.addProperty(""boolean.list1"", ""true"");"
49822,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,78,,"        conf.addProperty(""boolean.list3"", Boolean.TRUE);"
49823,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,91,,"        conf.addProperty(""byte.list1"", ""1"");"
49824,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,93,,"        conf.addProperty(""byte.list2"", ""1, 2"");"
49825,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,94,,"        conf.addProperty(""byte.list3"", new Byte(""1""));"
49826,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,107,,"        conf.addProperty(""short.list1"", ""1"");"
49827,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,110,,"        conf.addProperty(""short.list3"", new Short(""1""));"
49828,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,123,,"        conf.addProperty(""integer.list1"", ""1"");"
49829,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,126,,"        conf.addProperty(""integer.list3"", new Integer(""1""));"
49830,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,139,,"        conf.addProperty(""long.list1"", ""1"");"
49831,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,142,,"        conf.addProperty(""long.list3"", new Long(""1""));"
49832,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,155,,"        conf.addProperty(""float.list1"", ""1"");"
49833,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,158,,"        conf.addProperty(""float.list3"", new Float(""1""));"
49834,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,171,,"        conf.addProperty(""double.list1"", ""1"");"
49835,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,174,,"        conf.addProperty(""double.list3"", new Double(""1""));"
49836,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,187,,"        conf.addProperty(""biginteger.list1"", ""1"");"
49837,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,190,,"        conf.addProperty(""biginteger.list3"", new BigInteger(""1""));"
49838,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,202,,"        conf.addProperty(""bigdecimal.list1"", ""1"");"
49839,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,205,,"        conf.addProperty(""bigdecimal.list3"", new BigDecimal(""1""));"
49840,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,217,,"        final String uri1 = ""http://jakarta.apache.org"";"
49841,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,218,,"        final String uri2 = ""http://www.apache.org"";"
49842,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,219,,"        conf.addProperty(""uri.string"", uri1);"
49843,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,221,,"        conf.addProperty(""uri.object"", new URI(uri1));"
49844,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,222,,"        conf.addProperty(""uri.list1"", uri1);"
49845,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,225,,"        conf.addProperty(""uri.list3"", new URI(uri1));"
49846,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,237,,"        conf.addProperty(""url.string"", url1);"
49847,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,239,,"        conf.addProperty(""url.object"", new URL(url1));"
49848,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,240,,"        conf.addProperty(""url.list1"", url1);"
49849,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,243,,"        conf.addProperty(""url.list3"", new URL(url1));"
49850,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,256,,"        conf.addProperty(""locale.list1"", ""fr"");"
49851,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,259,,"        conf.addProperty(""locale.list3"", Locale.FRENCH);"
49852,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,274,,"        conf.addProperty(""color.list1"", color1);"
49853,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,277,,"        conf.addProperty(""color.list3"", Color.red);"
49854,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,291,,"        final Date date1 = format.parse(""2004-01-01"");"
49855,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,292,,"        final Date date2 = format.parse(""2004-12-31"");"
49856,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,298,,"        conf.addProperty(""date.string"", ""2004-01-01"");"
49857,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,300,,"        conf.addProperty(""date.object"", date1);"
49858,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,301,,"        conf.addProperty(""date.list1"", ""2004-01-01"");"
49859,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,304,,"        conf.addProperty(""date.list3"", date1);"
49860,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,315,,"        conf.addProperty(""calendar.string"", ""2004-01-01"");"
49861,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,317,,"        conf.addProperty(""calendar.object"", calendar1);"
49862,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,318,,"        conf.addProperty(""calendar.list1"", ""2004-01-01"");"
49863,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,321,,"        conf.addProperty(""calendar.list3"", calendar1);"
49864,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,323,,"        conf.addPropertyDirect(""calendar.list4"", new Calendar[] { calendar1, calendar2 });"
49865,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,338,,"        conf.addProperty(""email.string"", ""ebourg@apache.org"");"
49866,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,360,,"        baseconf.setProperty(""foo"", ""bar"");"
49867,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,401,,"        assertNull(""non null object for a missing key"", conf.get(Object.class, ""unknownkey""));"
49868,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1311,,"        conf.setProperty(""locale"", ""fr"");"
49869,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1420,,"        conf.setProperty(""color"", ""FF0000"");"
49870,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1635,,"        final DateFormat format = new SimpleDateFormat(""MM/dd/yyyy"");"
49871,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1636,,"        final Date date1 = format.parse(""01/01/2004"");"
49872,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1637,,"        final Date date2 = format.parse(""12/31/2004"");"
49873,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1889,,"        conf.setProperty(""email.invalid"", ""ebourg@apache@org"");"
49874,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1923,,"        conf.addProperty(""key1"", new Object());"
49875,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java,1924,,"        conf.addProperty(""key2"", ""xxxxxx"");"
49876,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,149,,"        config.addPropertyDirect(""key"", ""value"");"
49877,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,149,,"        config.addPropertyDirect(""key"", ""value"");"
49878,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,151,,"        assertTrue(""missing property"", config.containsKey(""key""));"
49879,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,189,,"        assertEquals(""property1"", ""value1"", config.getProperty(""key1""));"
49880,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,190,,"        assertEquals(""property2"", ""value2"", config.getProperty(""key2""));"
49881,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,191,,"        assertEquals(""unknown property"", null, config.getProperty(""key3""));"
49882,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,210,,"        assertFalse(""property not cleared"", config.containsKey(""key1""));"
49883,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java,493,,"        config.addProperty(""keyList"", ""1;2;3"");"
49884,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java,145,,"        config.getConfiguration(1).setProperty(""rowsPerPage"", ""25"");"
49885,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestEqualBehavior.java,180,,"        final String value = ""new value"";"
49886,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java,73,,"        assertEquals(NodeStructureHelper.table(0), subset.getProperty(""name""));"
49887,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java,117,,"        config.setProperty(""tables.table(0).fields"", ""My fields"");"
49888,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java,165,,"                config.configurationAt(""tables.table(1)"");"
49889,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java,187,,"        subConfig.setProperty(""name"", ""testTable"");"
49890,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java,250,,"        assertTrue(config.getString(""mean"").startsWith(""This is\n A long story...""));"
49891,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,93,,"            + ""two"" + LINE_SEPARATOR"
49892,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,106,,"    private static final String INI_DATA_SEPARATORS = ""[section]"""
49893,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,215,,"        instance.addProperty(""section1.var1"", ""foo"");"
49894,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,218,,"        instance.addProperty(""section2.var2"", ""bar"");"
49895,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,401,,"        assertEquals(""var1"", ""foo"", instance.getString(""section1.var1""));"
49896,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,402,,"        assertEquals(""var2"", 451, instance.getInt(""section1.var2""));"
49897,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,414,,"                        Arrays.asList(""section1"", ""section2"", ""section3"")));"
49898,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,414,,"                        Arrays.asList(""section1"", ""section2"", ""section3"")));"
49899,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,414,,"                        Arrays.asList(""section1"", ""section2"", ""section3"")));"
49900,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,477,,"        assertEquals(""value"", ""quoted value"", config.getString(""section4.var1""));"
49901,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,594,,"                .getString(""globalVar""));"
49902,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,817,,"        assertEquals(""Wrong value"", ""one"" + LINE_SEPARATOR + ""two"""
49903,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,817,,"        assertEquals(""Wrong value"", ""one"" + LINE_SEPARATOR + ""two"""
49904,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,1001,,"        SubnodeConfiguration sub = config.getSection(""section"");"
49905,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java,1006,,"        sub.setProperty(""test"", ""success"");"
49906,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java,163,,"        final Object o = conf.getProperty(""test.boolean"");"
49907,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java,165,,"        assertEquals(""true"", o.toString());"
49908,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java,181,,"        assertEquals(""'test.boolean' property"", ""true"", conf.getString(""test.boolean""));"
49909,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java,293,,"                .containsKey(""key""));"
49910,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java,64,,"        assertEquals(1, conf.getShort(""test.short""));"
49911,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java,111,,"            found = ""test.boolean"".equals(it.next());"
49912,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,147,,"        assertEquals(""Make sure we get the property from conf1 first"", 1, cc.getInt(""test.short""));"
49913,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,171,,"        assertEquals(""default"", cc.getString(""bogus"", ""default""));"
49914,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,242,,"        Configuration subset = cc.subset(""test"");"
49915,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,312,,"        conf1.addProperty(""array"", ""value1"");"
49916,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,312,,"        conf1.addProperty(""array"", ""value1"");"
49917,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,313,,"        conf1.addProperty(""array"", ""value2"");"
49918,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,330,,"        cc.addProperty(""array"", ""value5"");"
49919,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java,430,,"            c.getString(""string"", ""some default value""));"
49920,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java,63,,"        assertEquals(1, conf.getShort(""test.short""));"
49921,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java,110,,"            found = ""test.boolean"".equals(it.next());"
49922,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,244,,"    private static final String PROP_VALUE = ""value"";"
49923,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,249,,"    private static final String testProperties = ConfigurationAssert.getTestFile(""test.properties"").getAbsolutePath();"
49924,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,401,,"        assertEquals(""true"", conf.getString(""configuration.loaded""));"
49925,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,401,,"        assertEquals(""true"", conf.getString(""configuration.loaded""));"
49926,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,569,,"        assertEquals(""value of the 'foo' property"", ""bar"", conf.getString(""foo""));"
49927,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,569,,"        assertEquals(""value of the 'foo' property"", ""bar"", conf.getString(""foo""));"
49928,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,731,,"        assertTrue(""The saved file doesn't exist"", testSavePropertiesFile.exists());"
49929,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,993,,"        final String loaded = conf.getString(""include.loaded"");"
49930,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,1117,,"        assertEquals(""valueA"", pc.getString(""keyA""));"
49931,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java,1117,,"        assertEquals(""valueA"", pc.getString(""keyA""));"
49932,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java,222,,"        assertEquals(""Wrong header comment"", TEST_COMMENT, layout"
49933,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java,224,,"        assertNull(""Wrong comment for property"", layout.getCanonicalComment("
49934,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java,311,,"        assertEquals(""Wrong separator"", "" = "", layout.getSeparator(TEST_KEY));"
49935,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java,473,,"        config.addProperty(""AnotherProperty"", ""AnotherValue"");"
49936,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java,54,,"        final Configuration a = simpleConfiguration.subset(""prefix"");"
49937,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java,178,,"                config.getString(""name""));"
49938,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java,216,,"        config.addProperty(""[@table-type]"", ""test"");"
49939,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java,348,,"        parent.addProperty(""tablespaces.tablespace.name"", ""default"");"
49940,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java,63,,"        conf.setProperty(""test.key1"", ""value1"");"
49941,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java,63,,"        conf.setProperty(""test.key1"", ""value1"");"
49942,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java,66,,"        final Configuration subset = new SubsetConfiguration(conf, ""test"", ""."");"
49943,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java,68,,"        assertTrue(""'key1' not found in the subset"", subset.containsKey(""key1""));"
49944,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java,94,,"        SubsetConfiguration subset = new SubsetConfiguration(conf, ""prefix"", ""."");"
49945,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java,95,,"        assertEquals(""parent key for \""key\"""", ""prefix.key"", subset.getParentKey(""key""));"
49946,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,210,,"        conf.addProperty(key, ""a,b,c"");"
49947,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,279,,"        conf.addProperty(""test.array"", ""value1"");"
49948,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,279,,"        conf.addProperty(""test.array"", ""value1"");"
49949,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,301,,"                Arrays.asList(bldrNode.name(""test"").create(), node2));"
49950,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,303,,"        conf.setProperty(""add.nodes.test"", ""true"");"
49951,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,304,,"        conf.setProperty(""add.nodes.test.child"", ""yes"");"
49952,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,343,,"                conf.configurationAt(""element2"", true);"
49953,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,369,,"        config.addProperty(""test.string"", ""hello"");"
49954,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,400,,"        assertEquals(""value"", conf.getString(""element""));"
49955,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,400,,"        assertEquals(""value"", conf.getString(""element""));"
49956,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,401,,"        assertEquals(""tasks"", conf.getString(""table.name""));"
49957,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,470,,"                conf.getString(""element2.subelement.subsubelement""));"
49958,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,638,,"        conf.setProperty(""element3[@name]"", ""originalFoo"");"
49959,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,639,,"        assertEquals(""foo"", copy.getString(""element3[@name]""));"
49960,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,765,,"        load(conf, ConfigurationAssert.getTestFile(""testValidateInvalid.xml"")"
49961,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,807,,"        assertEquals(""a,b,c"", conf2.getString(""split.list3[@values]""));"
49962,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,809,,"        assertEquals(""a\\,b\\,c"", conf2.getString(""split.list4[@values]""));"
49963,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,810,,"        assertEquals(""a,b,c"", conf2.getString(""split.list1""));"
49964,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,826,,"        assertEquals(""a,b,c"", conf2.getString(""split/list3/@values""));"
49965,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,829,,"        assertEquals(""a,b,c"", conf2.getString(""split/list1""));"
49966,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,870,,"        assertTrue(conf.containsKey(""empty""));"
49967,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,1060,,"                    conf.getString(nodeKey + ""[@test]""));"
49968,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,1093,,"        assertEquals(""http://example.com/"", conf.getString(""foo:bar.[@xmlns:foo]""));"
49969,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,1146,,"        assertEquals(""http://example.com/"", conf.getString(""[@xmlns:foo]""));"
49970,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,1168,,"        conf.addProperty(""element3[@name]"", ""bar"");"
49971,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,1407,,"        config.setProperty(""Employee[@attr1]"", ""3,2,1"");"
49972,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java,1527,,"        assertEquals(""Root attribute not set"", ""http://example.com/"", conf"
49973,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,74,,"        assertEquals(""header"", ""Description of the property list"", conf.getHeader());"
49974,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,76,,"        assertFalse(""The configuration is empty"", conf.isEmpty());"
49975,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,77,,"        assertEquals(""'key1' property"", ""value1"", conf.getProperty(""key1""));"
49976,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,77,,"        assertEquals(""'key1' property"", ""value1"", conf.getProperty(""key1""));"
49977,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,77,,"        assertEquals(""'key1' property"", ""value1"", conf.getProperty(""key1""));"
49978,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,78,,"        assertEquals(""'key2' property"", ""value2"", conf.getProperty(""key2""));"
49979,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,79,,"        assertEquals(""'key3' property"", ""value3"", conf.getProperty(""key3""));"
49980,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,79,,"        assertEquals(""'key3' property"", ""value3"", conf.getProperty(""key3""));"
49981,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,79,,"        assertEquals(""'key3' property"", ""value3"", conf.getProperty(""key3""));"
49982,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,109,,"        conf.addProperty(""key4"", ""value4"");"
49983,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,109,,"        conf.addProperty(""key4"", ""value4"");"
49984,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java,111,,"        conf.setHeader(""Description of the new property list"");"
49985,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java,228,,"        assertEquals(""Factory not called"", 1, factory.getCreateBeanCount());"
49986,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java,413,,"        properties.put(""stringValue"", TEST_STRING);"
49987,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java,414,,"        properties.put(""intValue"", String.valueOf(TEST_INT));"
49988,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java,216,,"        props1.put(""param1"", ""value1"");"
49989,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java,217,,"        props1.put(""param2"", ""value2"");"
49990,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,59,,"            ""booleanProperty"","
49991,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,61,,"            ""doubleProperty"","
49992,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,62,,"            ""floatProperty"","
49993,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,63,,"            ""intProperty"","
49994,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,64,,"            ""longProperty"","
49995,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,69,,"            ""shortProperty"","
49996,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,70,,"            ""stringProperty"","
49997,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,117,,"            configuration.addProperty(""intIndexed"", new Integer(element));"
49998,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,121,,"            configuration.addProperty(""stringIndexed"", element);"
49999,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,125,,"        configuration.addProperty(""listIndexed"", list);"
