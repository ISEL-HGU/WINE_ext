214000,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/ArrayPrependFunctionTest.java,289,,"        Object[] o = new Object[]{""1   "", ""2   "", ""3   "", ""4   ""};"
214001,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/ArrayPrependFunctionTest.java,289,,"        Object[] o = new Object[]{""1   "", ""2   "", ""3   "", ""4   ""};"
214002,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/ArrayPrependFunctionTest.java,289,,"        Object[] o = new Object[]{""1   "", ""2   "", ""3   "", ""4   ""};"
214003,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/ArrayToStringFunctionTest.java,191,,"        Object[] o1 = new Object[]{""hello"", null, ""hello"", null};"
214004,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/DeterminismTest.java,21,,"		assertEquals(""Unexpected result "", Determinism.PER_ROW,"
214005,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/ILikeExpressionTest.java,61,,"        assertEquals(Boolean.FALSE, testExpression (""149na7-app1-2-"", ""%-w""));"
214006,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/ILikeExpressionTest.java,69,,"        assertEquals(Boolean.TRUE, testExpression (""test"", ""test""));"
214007,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/LikeExpressionTest.java,61,,"        assertEquals(Boolean.FALSE, testExpression (""149na7-app1-2-"", ""%-w""));"
214008,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/LikeExpressionTest.java,69,,"        assertEquals(Boolean.TRUE, testExpression (""test"", ""test""));"
214009,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/LikeExpressionTest.java,93,,"        assertEquals(Boolean.TRUE, testExpression (""AA\nA"", ""AA%""));"
214010,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/OrExpressionTest.java,149,,"        KeyValueColumnExpression lhsExpr = kvExpr(""LHS"");"
214011,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/OrExpressionTest.java,150,,"        KeyValueColumnExpression rhsExpr = kvExpr(""RHS"");"
214012,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpReplaceFunctionTest.java,76,,"        testExpression(""aa11bb22cc33dd44ee"", ""[0-9]+"", ""*"", ""aa*bb*cc*dd*ee"");"
214013,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpSplitFunctionTest.java,84,,"        String[] res = new String[] { ""ONE"", ""TWO"", ""THREE"" };"
214014,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpSplitFunctionTest.java,84,,"        String[] res = new String[] { ""ONE"", ""TWO"", ""THREE"" };"
214015,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpSplitFunctionTest.java,84,,"        String[] res = new String[] { ""ONE"", ""TWO"", ""THREE"" };"
214016,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpSplitFunctionTest.java,87,,"        testExpression(""12ONE34TWO56THREE78"", ""[0-9]+"", new String[] { null, ""ONE"", ""TWO"", ""THREE"","
214017,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpSubstrFunctionTest.java,75,,"        testExpression(""Report1?1"", ""[^\\\\?]+"", 1, ""Report1"");"
214018,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RegexpSubstrFunctionTest.java,78,,"        testExpression(""Report3?2"", ""[^\\\\?]+"", 1, ""Report3"");"
214019,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RoundFloorCeilExpressionsTest.java,184,,"        assertEquals(expectedKeyRange, keyPart.getKeyRange(CompareOp.EQUAL, LiteralExpression.newConstant(new BigDecimal(""1.238""), PDecimal.INSTANCE)));"
214020,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/RoundFloorCeilExpressionsTest.java,558,,"        LiteralExpression dateLiteral = LiteralExpression.newConstant(DateUtil.parseDate(""2012-01-01 14:25:28""), PDate.INSTANCE);"
214021,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/SortOrderExpressionTest.java,78,,"        List<Expression> args = Lists.newArrayList(getInvertedLiteral(""blah"", PChar.INSTANCE), getLiteral(3), getLiteral(2));"
214022,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/StringToArrayFunctionTest.java,205,,"        String nullString = ""null"";"
214023,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/function/InstrFunctionTest.java,67,,"        inputExpression(""abcde fghijkl"",PVarchar.INSTANCE, "" fgh"", 6, SortOrder.ASC);"
214024,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/function/InstrFunctionTest.java,83,,"        inputExpression(""ABCDE FGHiJKL"",PVarchar.INSTANCE, "" "", 6, SortOrder.ASC);"
214025,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/expression/function/InstrFunctionTest.java,108,,"        inputExpression(""AɚɦFGH"",PVarchar.INSTANCE, ""ɚɦ"", 2, SortOrder.ASC);"
214026,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,124,,"        assertInclude(""00000aaaa"", f);"
214027,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,125,,"        assertInclude(""00001aaaa"", f);"
214028,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,127,,"        assertInclude(""00003aaaa"", f);"
214029,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,128,,"        assertInclude(""00004aaaa"", f);"
214030,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,129,,"        assertInclude(""00005aaaa"", f);"
214031,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,188,,"        assertInclude(""00000\00aaaa"", f);"
214032,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,189,,"        assertInclude(""00001\00aaaa"", f);"
214033,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,191,,"        assertInclude(""00003\00aaaa"", f);"
214034,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,192,,"        assertInclude(""00004\00aaaa"", f);"
214035,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/DistinctPrefixFilterTest.java,193,,"        assertInclude(""00005\00aaaa"", f);"
214036,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterIntersectTest.java,251,,"                Bytes.toBytes(""a0A""),"
214037,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,153,,"                                PVarchar.INSTANCE.getKeyRange(Bytes.toBytes(""channel""), true, Bytes.toBytes(""channel""), true),"
214038,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,165,,"                                PVarchar.INSTANCE.getKeyRange(Bytes.toBytes(""A004""), true, Bytes.toBytes(""A004""), true),"
214039,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,186,,"                    PVarchar.INSTANCE.getKeyRange(Bytes.toBytes(""2404787""), true, Bytes.toBytes(""2404787""), true),"
214040,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,208,,"                    PChar.INSTANCE.getKeyRange(Bytes.toBytes(""abc""), true, Bytes.toBytes(""def""), true),"
214041,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,208,,"                    PChar.INSTANCE.getKeyRange(Bytes.toBytes(""abc""), true, Bytes.toBytes(""def""), true),"
214042,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,209,,"                    PChar.INSTANCE.getKeyRange(Bytes.toBytes(""dzy""), false, Bytes.toBytes(""xyz""), false),"
214043,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,209,,"                    PChar.INSTANCE.getKeyRange(Bytes.toBytes(""dzy""), false, Bytes.toBytes(""xyz""), false),"
214044,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,241,,"                    PChar.INSTANCE.getKeyRange(Bytes.toBytes(""aaa""), true, Bytes.toBytes(""aaa""), true),"
214045,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/filter/SkipScanFilterTest.java,326,,"                new SeekNext(""POabd"",""POdef""),"
214046,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/hbase/index/parallel/TestThreadPoolBuilder.java,37,,"    assertTrue(""core threads not set, but failed return"", builder.getKeepAliveTime() > 0);"
214047,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/hbase/index/write/recovery/TestPerRegionIndexWriteCache.java,163,,"    assertEquals(""Got more than one table in the the edit map!"", 1, entries.size());"
214048,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,166,,"        testIndexRowKeyBuilding(""k1 VARCHAR, k2 DECIMAL"", ""k1,k2"", ""k2, k1"", new Object [] {""a"",1.1});"
214049,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,166,,"        testIndexRowKeyBuilding(""k1 VARCHAR, k2 DECIMAL"", ""k1,k2"", ""k2, k1"", new Object [] {""a"",1.1});"
214050,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,171,,"        testIndexRowKeyBuilding(""k1 VARCHAR, k2 INTEGER NOT NULL, v VARCHAR"", ""k1,k2"", ""k2, k1"", new Object [] {""a"",1.1});"
214051,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,196,,"        testIndexRowKeyBuilding(""k1 CHAR(1) NOT NULL, k2 INTEGER NOT NULL, v1 DECIMAL, v2 CHAR(2), v3 BIGINT"", ""k1, k2"", ""v2, k2, v1"", new Object [] {""a"",1,2.2,""bb""});"
214052,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,211,,"        testIndexRowKeyBuilding(""k1 VARCHAR, k2 INTEGER NOT NULL, v VARCHAR"", ""k1,k2"", ""k2 DESC, k1"", new Object [] {""a"",1});"
214053,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,234,,"        testIndexRowKeyBuilding(""k1 VARCHAR, k2 INTEGER NOT NULL, v VARCHAR"", ""k1, k2 DESC"", ""k2 DESC, k1"", new Object [] {""a"",1});"
214054,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexMaintainerTest.java,272,,"                ""k1 CHAR(1) NOT NULL, k2 INTEGER NOT NULL, v1 BOOLEAN, v2 CHAR(2), v3 BIGINT, v4 CHAR(10)"", ""k1, k2"","
214055,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexUpgradeToolTest.java,72,,"        String [] args = {""-o"", upgrade ? UPGRADE_OP : ROLLBACK_OP, ""-tb"","
214056,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexUpgradeToolTest.java,87,,"                INPUT_LIST, ""-rb""};"
214057,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/IndexUpgradeToolTest.java,97,,"                ""-tool"", indexToolOpts};"
214058,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/PrepareIndexMutationsForRebuildTest.java,118,,"                ""ROW_KEY VARCHAR, C1 VARCHAR, C2 VARCHAR"","
214059,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/PrepareIndexMutationsForRebuildTest.java,120,,"                ""ROW_KEY"","
214060,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/PrepareIndexMutationsForRebuildTest.java,439,,"                Bytes.toBytes(""CF2""),"
214061,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/index/PrepareIndexMutationsForRebuildTest.java,447,,"                Bytes.toBytes(""CF1""),"
214062,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,49,,"            ""localhost"","
214063,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,65,,"            ""v1,v2,v3"","
214064,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,83,,"            new ConnectionInfo(defaultQuorum, 2181, ""/hbase""),"
214065,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,94,,"            new ConnectionInfo(""localhost"",123,""/foo-bar""),"
214066,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,111,,"            new ConnectionInfo(""v1,v2,v3"",123,""/hbase"",""user/principal"", ""/user.keytab"" ),"
214067,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,111,,"            new ConnectionInfo(""v1,v2,v3"",123,""/hbase"",""user/principal"", ""/user.keytab"" ),"
214068,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,185,,"        assertTrue(ConnectionInfo.isSameName(""user@APACHE.ORG"", ""user"", null, ""APACHE.ORG""));"
214069,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,186,,"        assertTrue(ConnectionInfo.isSameName(""user/localhost@APACHE.ORG"", ""user/localhost"", null, ""APACHE.ORG""));"
214070,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixEmbeddedDriverTest.java,192,,"        assertTrue(ConnectionInfo.isSameName(""user/localhost@APACHE.ORG"", ""user/_HOST"", ""localhost"", ""APACHE.ORG""));"
214071,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/jdbc/PhoenixPreparedStatementTest.java,80,,"        PreparedStatement stmt = connection.prepareStatement(""SELECT * FROM "" + ATABLE);"
214072,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/BulkLoadToolTest.java,47,,"        CommandLine cmdLine = bulkLoadTool.parseOptions(new String[] { ""--input"", ""/input"","
214073,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/BulkLoadToolTest.java,48,,"                ""--table"", ""mytable"" });"
214074,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/CsvBulkImportUtilTest.java,77,,"        CsvBulkImportUtil.setChar(conf, ""conf.key"", '|');"
214075,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/PhoenixTTLToolTest.java,34,,"        assertEquals(""NORMAL"", tool.getJobPriority());"
214076,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/bulkload/TestTableRowkeyPair.java,36,,"        testsRowsKeys(""first"", ""aa"", ""first"", ""aa"", 0);"
214077,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtilTest.java,63,,"            String ddl = ""CREATE TABLE ""+ tableName + "
214078,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtilTest.java,64,,"                    ""  (a_string varchar not null, a_binary varbinary not null, col1 integer"" +"
214079,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtilTest.java,65,,"                    ""  CONSTRAINT pk PRIMARY KEY (a_string, a_binary))\n"";"
214080,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/mapreduce/util/PhoenixConfigurationUtilTest.java,120,,"        final String tableName = ""TEST_TABLE"";"
214081,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/CursorParserTest.java,69,,"        String expectedNameToken = ""testCursor"";"
214082,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/CursorParserTest.java,74,,"        String sql = ""DECLARE "" + expectedNameToken + "" CURSOR FOR "" + expectedSelectStatement;"
214083,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/CursorParserTest.java,74,,"        String sql = ""DECLARE "" + expectedNameToken + "" CURSOR FOR "" + expectedSelectStatement;"
214084,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,114,,"            ""select a from b\n"" +"
214085,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,127,,"            ""and (ind.organization_id = '000000000000000')\n"" +"
214086,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,128,,"            ""and (ind.key_prefix = '00T')\n"" +"
214087,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,259,,"            ""where (ind.name = 'X')\n"" +"
214088,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,260,,"            ""and rownum <= 2000\n"" +"
214089,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,263,,"            ""and (ind.name_type = 't')"""
214090,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,392,,"                    ""where e = d\n""));"
214091,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,394,,"            fail(""Should have caught exception."");"
214092,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,434,,"            String s = ""create table core.entity_history_archive (id char(15) primary key ${o})"".replace(""${o}"", order);"
214093,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/parse/QueryParserTest.java,523,,"            String sql = (""CREATE TABLE IF NOT EXISTS testBadVarcharDef"" + "
214094,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java,213,,"        builder.put(ENTITY_HISTORY_TABLE_NAME,""create table "" + ENTITY_HISTORY_TABLE_NAME +"
214095,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java,1043,,"                    ""upsert into "" + tableName +"
214096,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java,1733,,"        stmt.setString(7, ""varchar_a"");"
214097,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java,1734,,"        stmt.setString(8, ""chara"");"
214098,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java,1739,,"        stmt.setString(13, ""varchar_b"");"
214099,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java,1740,,"        stmt.setString(14, ""charb"");"
214100,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/PhoenixTestBuilder.java,1234,,"                    ""=true"");"
214101,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/QueryPlanTest.java,51,,"                ""    SERVER FILTER BY FIRST KEY ONLY"","
214102,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/QueryPlanTest.java,89,,"                ""CLIENT PARALLEL 1-WAY FULL SCAN OVER ATABLE\n"" + "
214103,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/QueryPlanTest.java,90,,"                ""    SERVER FILTER BY FIRST KEY ONLY\n"" + "
214104,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/QueryPlanTest.java,109,,"                ""CLIENT MERGE SORT\n"" + "
214105,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/QueryPlanTest.java,140,,"                ""CLIENT PARALLEL 1-WAY RANGE SCAN OVER ATABLE ['000000000000001']\n"" + "
214106,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/query/QueryPlanTest.java,183,,"                ResultSet rs = statement.executeQuery(""EXPLAIN "" + query);"
214107,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/PCharPadTest.java,59,,"        String str = ""phoenix"";"
214108,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/PMetaDataImplTest.java,85,,"        props.put(QueryServices.CLIENT_CACHE_ENCODING, ""object"");"
214109,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/RowKeySchemaTest.java,137,,"        assertExpectedRowKeyValue(""c1 INTEGER NOT NULL, c2 BIGINT NOT NULL, c3 VARCHAR"", ""c1, c2, c3"", new Object[] {1, 2, ""abc""});"
214110,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/RowKeySchemaTest.java,137,,"        assertExpectedRowKeyValue(""c1 INTEGER NOT NULL, c2 BIGINT NOT NULL, c3 VARCHAR"", ""c1, c2, c3"", new Object[] {1, 2, ""abc""});"
214111,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/SchemaUtilTest.java,37,,"        String tableDisplayName = SchemaUtil.getTableName(""schemaName"", ""tableName"");"
214112,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/SchemaUtilTest.java,46,,"        columnDisplayName = SchemaUtil.getMetaDataEntityName(""schemaName"", ""tableName"", ""familyName"", ""columnName"");"
214113,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/SequenceAllocationTest.java,40,,"        SequenceKey sequenceKey1 = new SequenceKey(null, ""seqalloc"", ""sequenceC"",QueryServicesOptions.DEFAULT_SEQUENCE_TABLE_SALT_BUCKETS);"
214114,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/stats/UpdateStatisticsToolTest.java,41,,"        tool.parseOptions(new String[] {""-t"", ""table1"", ""-ms""});"
214115,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/stats/UpdateStatisticsToolTest.java,41,,"        tool.parseOptions(new String[] {""-t"", ""table1"", ""-ms""});"
214116,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/stats/UpdateStatisticsToolTest.java,48,,"            tool.parseOptions(new String[] {""-t"", ""table1"", ""-ms"", ""-runfg""});"
214117,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,72,,"		strArr[0] = ""abc"";"
214118,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,87,,"        strArr[2] = ""bcd"";"
214119,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,106,,"        strArr[4] = ""cde"";"
214120,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,235,,"		strArr[0] = ""abx"";"
214121,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,236,,"		strArr[1] = ""ereref"";"
214122,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,237,,"		strArr[2] = ""random"";"
214123,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,281,,"		strArr[3] = ""random12"";"
214124,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,359,,"		strArr[4] = ""ran"";"
214125,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/schema/types/PDataTypeForArraysTest.java,968,,"        strArr[3] = ""random1"";"
214126,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/AbstractUpsertExecutorTest.java,92,,"            createRecord(123L, ""NameValue"", 42, Arrays.asList(1, 2, 3), true, encodedBinaryData,"
214127,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/ColumnInfoTest.java,34,,"        ColumnInfo columnInfo = new ColumnInfo(""a.myColumn"", Types.INTEGER);"
214128,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/DateUtilTest.java,74,,"        Date date = new Date(DateUtil.getDateTimeParser(""yyyy-MM-dd"", PDate.INSTANCE).parseDateTime(""1970-01-01""));"
214129,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/DateUtilTest.java,95,,"                .parseDateTime(""1970-01-01 00:00:00""));"
214130,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/DateUtilTest.java,116,,"        Time time = new Time(DateUtil.getDateTimeParser(""HH:mm:ss"", PTime.INSTANCE).parseDateTime(""00:00:00""));"
214131,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/JDBCUtilTest.java,53,,"        String url= ""localhost;"" + ANNOTATION_ATTRIB_PREFIX + annotKey1 + '=' + annotVal1;"
214132,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/JDBCUtilTest.java,69,,"        assertEquals(""localhost;foo=bar"", JDBCUtil.removeProperty(""localhost;TenantId=abc;foo=bar"", TENANT_ID_ATTRIB));"
214133,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/JDBCUtilTest.java,76,,"        assertTrue(JDBCUtil.getAutoCommit(""localhost"", new Properties(), true));"
214134,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/LogUtilTest.java,39,,"    	String logLine = LogUtil.addCustomAnnotations(""log line"", (PhoenixConnection)null);"
214135,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/PhoenixEncodeDecodeTest.java,65,,"        byte[] bytes = PhoenixRuntime.encodeColumnValues(conn, ""T"", values, Lists.newArrayList(new Pair<String, String>(null, ""pk1""), new Pair<String, String>(null, ""pk2""), new Pair<String, String>(""cf1"", ""v1""), new Pair<String, String>(""cf2"", ""v2""), new Pair<String, String>(""cf2"", ""v1"")));"
214136,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/PhoenixRuntimeTest.java,62,,"                new String[] { ""localhost"", ""test.csv"" });"
214137,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/PhoenixRuntimeTest.java,270,,"        String tableName = ""tableName"";"
214138,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/PrefixByteEncoderDecoderTest.java,40,,"            ByteUtil.concat(Bytes.toBytes(""aaaaaaaaaa""), QueryConstants.SEPARATOR_BYTE_ARRAY, Bytes.toBytes(1000L), Bytes.toBytes(""bbbbbbbbbb"")),"
214139,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/QueryUtilTest.java,45,,"                QueryUtil.constructUpsertStatement(""MYTAB"", ImmutableList.of(ID_COLUMN, NAME_COLUMN)));"
214140,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/StringUtilTest.java,36,,"        testLpad(""ABCD"", 8, ""12"", ""1212ABCD"");"
214141,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TenantIdByteConversionTest.java,114,,"                PNameFactory.newName(""2147483646""),"
214142,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TenantIdByteConversionTest.java,130,,"                PNameFactory.newName(""9223372036854775806""),"
214143,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TenantIdByteConversionTest.java,146,,"                PNameFactory.newName(""126""),"
214144,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TenantIdByteConversionTest.java,162,,"                PNameFactory.newName(""32766""),"
214145,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TenantIdByteConversionTest.java,178,,"                PNameFactory.newName(""3.402823466""),"
214146,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TenantIdByteConversionTest.java,194,,"                PNameFactory.newName(""1.7976931348623158""),"
214147,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TestDDLUtil.java,38,,"            conn.createStatement().execute(""CREATE SCHEMA IF NOT EXISTS "" + schemaName);"
214148,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TestUtil.java,286,,"    public static final String JOIN_ORDER_TABLE_FULL_NAME = '""' + JOIN_SCHEMA + ""\"".\"""" + JOIN_ORDER_TABLE + '""';"
214149,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TestUtil.java,605,,"                "" WHERE "" + ((lowerRange != null ? (pkCol + "" >= ? "" + (upperRange != null ? "" AND "" : """")) : """")"
214150,./TargetProjects/phoenix/phoenix-core/src/test/java/org/apache/phoenix/util/TestUtil.java,605,,"                "" WHERE "" + ((lowerRange != null ? (pkCol + "" >= ? "" + (upperRange != null ? "" AND "" : """")) : """")"
214151,./TargetProjects/phoenix/phoenix-pherf/src/it/java/org/apache/phoenix/pherf/DataIngestIT.java,128,,"            fail(""Failed to load data. An exception was thrown: "" + e.getMessage());"
214152,./TargetProjects/phoenix/phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java,57,,"                ""-schemaFile"", "".*create_prod_test_unsalted.sql"","
214153,./TargetProjects/phoenix/phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java,58,,"                ""-scenarioFile"", "".*prod_test_unsalted_scenario.xml""};"
214154,./TargetProjects/phoenix/phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/WriteParams.java,40,,"    @SuppressWarnings(""unused"")"
214155,./TargetProjects/phoenix/phoenix-pherf/src/main/java/org/apache/phoenix/pherf/result/RunTime.java,33,,"    @SuppressWarnings(""unused"") public RunTime() {"
214156,./TargetProjects/phoenix/phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/GoogleChartGenerator.java,188,,"								+ ""set threshold of "" + thresholdString + ""</font><br>"""
214157,./TargetProjects/phoenix/phoenix-pherf/src/test/java/org/apache/phoenix/pherf/PherfTest.java,35,,"        String[] args = {""-listFiles""};"
214158,./TargetProjects/phoenix/phoenix-pherf/src/test/java/org/apache/phoenix/pherf/PherfTest.java,58,,"        String[] args = {""-listFiles"", ""-log_per_nrows"", customizedPerNRows.toString()};"
214159,./TargetProjects/phoenix/phoenix-pherf/src/test/java/org/apache/phoenix/pherf/RuleGeneratorTest.java,306,,"            assertTrue(""Got a value not in the list for the rule. :"" + value.getValue(), value.getValue().equals(""Foo,Bar""));"
214160,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,62,,"        String createTableStmt = ""CREATE TABLE ""+ pTableFullName + ""(K VARCHAR NOT NULL PRIMARY KEY, """
214161,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,81,,"        String createIndexStatement = ""CREATE INDEX ""+indexName + "" ON ""+pTableFullName+""(v1 DESC) INCLUDE (v2)"";"
214162,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,81,,"        String createIndexStatement = ""CREATE INDEX ""+indexName + "" ON ""+pTableFullName+""(v1 DESC) INCLUDE (v2)"";"
214163,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,102,,"        String createTableStmt = ""CREATE TABLE ""+pTableFullName + ""(k BIGINT NOT NULL PRIMARY KEY, """
214164,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,103,,"                + ""v1 VARCHAR, v2 VARCHAR)"""
214165,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,106,,"        String createView = ""CREATE VIEW ""+viewFullName + ""(id1 BIGINT, id2 BIGINT NOT NULL, """
214166,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,106,,"        String createView = ""CREATE VIEW ""+viewFullName + ""(id1 BIGINT, id2 BIGINT NOT NULL, """
214167,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,107,,"                + ""id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) """
214168,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,108,,"                + ""AS SELECT * FROM ""+pTableFullName;"
214169,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,225,,"        String query = ""create table "" + pTableFullName +"
214170,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,239,,"                ""(a_char CHAR(15) NOT NULL, "" +"
214171,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,254,,"                ""b_char CHAR(10) NOT NULL, "" +"
214172,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,274,,"                ""\""av\"".\""_\"" CHAR(1), "" +"
214173,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolExtractionIT.java,275,,"                ""\""bv\"".\""_\"" CHAR(1), "" +"
214174,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,41,,"        String expected = ""CREATE TABLE IF NOT EXISTS TEST.SAMPLE_TABLE\n"""
214175,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,42,,"                + ""(ORG_ID CHAR(15) NOT NULL,\n"" + ""SOME_ANOTHER_ID BIGINT NOT NULL,\n"" + ""SECOND_ID BIGINT NOT NULL,\n"""
214176,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,42,,"                + ""(ORG_ID CHAR(15) NOT NULL,\n"" + ""SOME_ANOTHER_ID BIGINT NOT NULL,\n"" + ""SECOND_ID BIGINT NOT NULL,\n"""
214177,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,42,,"                + ""(ORG_ID CHAR(15) NOT NULL,\n"" + ""SOME_ANOTHER_ID BIGINT NOT NULL,\n"" + ""SECOND_ID BIGINT NOT NULL,\n"""
214178,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,43,,"                + ""TYPE VARCHAR,\n"" + ""STATUS VARCHAR,\n"" + ""START_TIMESTAMP BIGINT,\n"""
214179,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,43,,"                + ""TYPE VARCHAR,\n"" + ""STATUS VARCHAR,\n"" + ""START_TIMESTAMP BIGINT,\n"""
214180,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,43,,"                + ""TYPE VARCHAR,\n"" + ""STATUS VARCHAR,\n"" + ""START_TIMESTAMP BIGINT,\n"""
214181,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,44,,"                + ""END_TIMESTAMP BIGINT,\n"" + ""PARAMS VARCHAR,\n"" + ""RESULT VARCHAR,\n"""
214182,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,44,,"                + ""END_TIMESTAMP BIGINT,\n"" + ""PARAMS VARCHAR,\n"" + ""RESULT VARCHAR,\n"""
214183,./TargetProjects/phoenix/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaToolSynthesisIT.java,46,,"                + ""CONSTRAINT PK PRIMARY KEY (ORG_ID, SOME_ANOTHER_ID, SECOND_ID))\n"""
214184,./TargetProjects/phoenix/phoenix-tracing-webapp/src/main/java/org/apache/phoenix/tracingwebapp/http/TraceServlet.java,101,,"    String sqlQuery = ""SELECT * FROM "" + TRACING_TABLE + "" LIMIT ""+limit;"
214185,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/CsvEventSerializerIT.java,83,,"		final String fullTableName = ""FLUME_CSV_TEST"";"
214186,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/JsonEventSerializerIT.java,83,,"		final String fullTableName = ""FLUME_JSON_TEST"";"
214187,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/JsonEventSerializerIT.java,85,,"		String ddl = ""CREATE TABLE IF NOT EXISTS "" + fullTableName"
214188,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/JsonEventSerializerIT.java,86,,"				+ ""  (flume_time timestamp not null, col1 varchar , col2 double, col3 varchar[], col4 integer[]"""
214189,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/JsonEventSerializerIT.java,87,,"				+ ""  CONSTRAINT pk PRIMARY KEY (flume_time))\n"";"
214190,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/JsonEventSerializerIT.java,88,,"		String columns = ""col1,col2,col3,col4"";"
214191,./TargetProjects/phoenix-connectors/phoenix-flume-base/src/it/java/org/apache/phoenix/flume/PhoenixSinkIT.java,95,,"        sinkContext.put(FlumeConstants.CONFIG_SERIALIZER_PREFIX + FlumeConstants.CONFIG_COLUMN_NAMES,""col1,col2"");"
214192,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/hadoop/hive/ql/QTestUtil.java,144,,"  public static final String UTF_8 = ""UTF-8"";"
214193,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/hadoop/hive/ql/QTestUtil.java,1097,,"    String execEngine = conf.get(""hive.execution.engine"");"
214194,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,50,,"        utility.getTestFileSystem().createNewFile(new Path(hiveLogDir, testName + "".out""));"
214195,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,55,,"                "" STORED BY  \""org.apache.phoenix.hive.PhoenixStorageHandler\"""" + HiveTestUtil"
214196,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,56,,"                .CRLF + "" TBLPROPERTIES("" + HiveTestUtil.CRLF +"
214197,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,58,,"                ""   'phoenix.zookeeper.znode.parent'='/hbase',"" + HiveTestUtil.CRLF +"
214198,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,59,,"                ""   'phoenix.zookeeper.quorum'='localhost',"" + HiveTestUtil.CRLF +"
214199,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,60,,"                ""   'phoenix.zookeeper.client.port'='"" +"
214200,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,62,,"                ""   'phoenix.rowkeys'='id');"");"
214201,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,184,,"                ""db DOUBLE,fl FLOAT, us INT)"" + HiveTestUtil.CRLF +"
214202,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,193,,"                ""   'phoenix.rowkeys'='id,id2');"" + HiveTestUtil.CRLF);"
214203,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/it/java/org/apache/phoenix/hive/HivePhoenixStoreIT.java,194,,"        sb.append(""INSERT INTO TABLE phoenix_MultiKey"" + HiveTestUtil.CRLF +""VALUES (10, \'part2\',\'foodesc\',200,2.0,-1);"" +"
214204,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/query/PhoenixQueryBuilder.java,97,,"            sql.insert(0, queryTemplate.replace(""$HINT$"", hints).replace(""$COLUMN_LIST$"","
214205,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/query/PhoenixQueryBuilder.java,97,,"            sql.insert(0, queryTemplate.replace(""$HINT$"", hints).replace(""$COLUMN_LIST$"","
214206,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/query/PhoenixQueryBuilder.java,98,,"                    getSelectColumns(jobConf, tableName, readColumnList)).replace(""$TABLE_NAME$"","
214207,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/query/PhoenixQueryBuilder.java,408,,"                    whereCondition.append(""to_date("").append"
214208,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/query/PhoenixQueryBuilder.java,510,,"                    whereCondition.append(""to_timestamp("").append"
214209,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/util/TypeInfoUtils.java,370,,"        throw new IllegalArgumentException(""Error: "" + item"
214210,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/main/java/org/apache/phoenix/hive/util/TypeInfoUtils.java,383,,"              + "" expected at the position "" + t.position + "" of '"""
214211,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/test/java/org/apache/phoenix/hive/query/PhoenixQueryBuilderTest.java,38,,"    private static final String TABLE_NAME = ""TEST_TABLE"";"
214212,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/test/java/org/apache/phoenix/hive/query/PhoenixQueryBuilderTest.java,80,,"        final String expectedQueryPrefix = ""select /*+ NO_CACHE  */ \"""" + COLUMN_CHAR + ""\"",\"""" + COLUMN_VARCHAR +"
214213,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/test/java/org/apache/phoenix/hive/query/PhoenixQueryBuilderTest.java,86,,"                mockedIndexSearchCondition(""GenericUDFOPEqual"", ""CHAR_VALUE"", null, COLUMN_CHAR, ""char(10)"", false),"
214214,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/test/java/org/apache/phoenix/hive/query/PhoenixQueryBuilderTest.java,95,,"                        new Object[]{""CHAR1"", ""CHAR2"", ""CHAR3""}, COLUMN_CHAR, ""char(10)"", false))"
214215,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/test/java/org/apache/phoenix/hive/query/PhoenixQueryBuilderTest.java,95,,"                        new Object[]{""CHAR1"", ""CHAR2"", ""CHAR3""}, COLUMN_CHAR, ""char(10)"", false))"
214216,./TargetProjects/phoenix-connectors/phoenix-hive-base/src/test/java/org/apache/phoenix/hive/query/PhoenixQueryBuilderTest.java,110,,"                mockedIndexSearchCondition(""GenericUDFBetween"", null,"
214217,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,70,,"                ""A = load 'hbase://table/%s' using "" + PhoenixHBaseLoader.class.getName() + ""('%s');"", TABLE,"
214218,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,70,,"                ""A = load 'hbase://table/%s' using "" + PhoenixHBaseLoader.class.getName() + ""('%s');"", TABLE,"
214219,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,95,,"        final String ddl = ""CREATE TABLE "" + TABLE"
214220,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,132,,"                ""A = load 'hbase://query/%s' using "" + PhoenixHBaseLoader.class.getName() + ""('%s');"","
214221,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,156,,"        String ddl = ""CREATE TABLE  "" + TABLE"
214222,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,197,,"        final String dml = ""UPSERT INTO "" + CASE_SENSITIVE_TABLE_FULL_NAME + "" VALUES(?,?,?)"";"
214223,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,197,,"        final String dml = ""UPSERT INTO "" + CASE_SENSITIVE_TABLE_FULL_NAME + "" VALUES(?,?,?)"";"
214224,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,252,,"                ""A = load 'hbase://query/%s' using org.apache.phoenix.pig.PhoenixHBaseLoader('%s');"", sqlQuery,"
214225,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,371,,"        List<Tuple> actualList = data.get(""out"");"
214226,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,694,,"        Array doubleArray = conn.createArrayOf(""DOUBLE"", doubleArr);"
214227,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseLoaderIT.java,704,,"        strArr[0] = ""ABC"";"
214228,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,55,,"        stmt.execute(""CREATE TABLE "" + tableName +"
214229,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,72,,"        pigServer.registerQuery(""A = LOAD 'in' USING mock.Storage();"");"
214230,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,74,,"        pigServer.registerQuery(""Store A into 'hbase://"" + tableName"
214231,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,75,,"                               + ""' using "" + PhoenixHBaseStorage.class.getName() + ""('"""
214232,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,76,,"                                + zkQuorum + ""', '-batchSize 1000');"");"
214233,./TargetProjects/phoenix-connectors/phoenix-pig-base/src/it/java/org/apache/phoenix/pig/PhoenixHBaseStorerIT.java,80,,"            throw new RuntimeException(""Job failed"", pigServer.executeBatch()"
214234,./TargetProjects/phoenix-connectors/phoenix-spark-base/src/it/java/org/apache/phoenix/spark/AggregateIT.java,62,,"            conn.createStatement().execute(""UPSERT INTO ""+intTableName+"" VALUES (1,1)"");"
214235,./TargetProjects/phoenix-connectors/phoenix-spark-base/src/it/java/org/apache/phoenix/spark/OrderByIT.java,80,,"            String ddl = ""CREATE TABLE "" + tableName1 +"
214236,./TargetProjects/phoenix-connectors/phoenix-spark-base/src/it/java/org/apache/phoenix/spark/OrderByIT.java,82,,"                    ""  CONSTRAINT pk PRIMARY KEY (a_string))\n"";"
214237,./TargetProjects/phoenix-connectors/phoenix-spark-base/src/it/java/org/apache/phoenix/spark/OrderByIT.java,84,,"            String dml = ""UPSERT INTO "" + tableName1 + "" VALUES(?,?,?,?,?,?)"";"
214238,./TargetProjects/phoenix-connectors/phoenix-spark-base/src/it/java/org/apache/phoenix/spark/OrderByIT.java,132,,"            Dataset phoenixDataSet = SparkUtil.getSparkSession().read().format(""phoenix"")"
214239,./TargetProjects/phoenix-omid/benchmarks/src/main/java/org/apache/omid/benchmarks/tso/RawTxRunner.java,134,,"        this.timestampTimer = metrics.timer(name(""tx_runner"", Integer.toString(txRunnerId), hostName, ""timestamp""));"
214240,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/OmidTestBase.java,110,,"        clientConf.setConnectionString(""localhost:"" + port);"
214241,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestAsynchronousPostCommitter.java,116,,"            put1.addColumn(family, qualifier, Bytes.toBytes(""hey!""));"
214242,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestAsynchronousPostCommitter.java,119,,"            put2.addColumn(family, qualifier, Bytes.toBytes(""hou!""));"
214243,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestBaillisAnomaliesWithTXs.java,142,,"            LOG.info(""RESSS {}"", updateRes);"
214244,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestBaillisAnomaliesWithTXs.java,221,,"            LOG.info(""Row id {} with value {}"", Bytes.toString(res.getRow()),"
214245,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestBasicTransaction.java,51,,"        byte[] dataValue1 = Bytes.toBytes(""testWrite-1"");"
214246,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestBasicTransaction.java,52,,"        byte[] dataValue2 = Bytes.toBytes(""testWrite-2"");"
214247,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestBasicTransaction.java,294,,"        byte[] startRow = Bytes.toBytes(""row-to-scan"" + 0);"
214248,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCellUtils.java,50,,"    @DataProvider(name = ""shadow-cell-suffixes"")"
214249,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCellUtils.java,76,,"        assertTrue(CellUtils.isShadowCell(kv), ""Should include a valid shadowCell identifier"");"
214250,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCellUtils.java,112,,"        Cell cell1 = new KeyValue(row, family, qualifier, 1, Bytes.toBytes(""value"")); // Default type is Put"
214251,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCellUtils.java,119,,"        Cell shadowCell2 = new KeyValue(row, family, validShadowCellQualifier2, 1, Bytes.toBytes(""sc-value2""));"
214252,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCheckpoint.java,76,,"        byte[] rowName1 = Bytes.toBytes(""row1"");"
214253,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCheckpoint.java,78,,"        byte[] colName1 = Bytes.toBytes(""col1"");"
214254,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCheckpoint.java,79,,"        byte[] dataValue1 = Bytes.toBytes(""testWrite-1"");"
214255,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCheckpoint.java,80,,"        byte[] dataValue2 = Bytes.toBytes(""testWrite-2"");"
214256,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCheckpoint.java,95,,"                ""Unexpected value for SI read "" + tx1 + "": "" + Bytes.toString(r.getValue(famName1, colName1)));"
214257,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestCheckpoint.java,456,,"                ""Cell should be there"");"
214258,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestDeletion.java,73,,"        LOG.info(""Transaction created "" + t1);"
214259,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestDeletion.java,89,,"        assertEquals((int) count.get(famColA), rowsWritten, ""ColA count should be equal to rowsWritten"");"
214260,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestDeletion.java,191,,"        assertEquals((int) count.get(famColB), rowsWritten, ""ColB count should be equal to rowsWritten"");"
214261,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestDeletion.java,201,,"        assertEquals((int) count.get(famColA), (rowsWritten - 1), ""ColA count should be equal to rowsWritten - 1"");"
214262,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestEndToEndScenariosWithHA.java,127,,"        TestUtils.waitForSocketListening(""localhost"", TSO1_PORT, 100);"
214263,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestEndToEndScenariosWithHA.java,231,,"            LOG.info(""++++++++++++++++++++++++++++++++++++++++++++++++++++++"");"
214264,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestEndToEndScenariosWithHA.java,243,,"                         ""Unexpected value for SI read R1Q1"" + interleavedReadTx + "": """
214265,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestFilters.java,94,,"        assertEquals(r.getColumnCells(family, col1).size(), 1, ""should exist in result"");"
214266,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestFilters.java,95,,"        assertEquals(r.getColumnCells(family, col2).size(), 0 , ""shouldn't exist in result"");"
214267,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestMultiplePut.java,39,,"    private static final byte[] data = Bytes.toBytes(""testData"");"
214268,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestMultiplePut.java,62,,"            assertTrue(verifyValue(txTable.getHTable(), rowToAdd, family, col1, data), ""Invalid value in table"");"
214269,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestShadowCells.java,103,,"                ""Cell should be there"");"
214270,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestShadowCells.java,171,,"                ""Shadow cell should not be there"");"
214271,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestShadowCells.java,497,,"        assertTrue(result1.containsColumn(family, qualifier), ""Should have column family"");"
214272,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestSingleColumnFamily.java,47,,"            put.addColumn(Bytes.toBytes(TEST_FAMILY), Bytes.toBytes(""value2""), data);"
214273,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTTableBehaviour.java,56,,"            fail(""Should have thrown an IllegalArgumentException due to timestamp specification"");"
214274,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,56,,"        LOG.info(""Transaction created "" + t1);"
214275,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,59,,"        LOG.info(""Transaction created"" + t2);"
214276,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,61,,"        byte[] row = Bytes.toBytes(""test-simple"");"
214277,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,63,,"        byte[] col = Bytes.toBytes(""testdata"");"
214278,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,64,,"        byte[] data1 = Bytes.toBytes(""testWrite-1"");"
214279,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,65,,"        byte[] data2 = Bytes.toBytes(""testWrite-2"");"
214280,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,79,,"            fail(""Transaction should not commit successfully"");"
214281,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,141,,"            fail(""Transaction commited successfully"");"
214282,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,145,,"        assertTrue(aborted, ""Transaction didn't raise exception"");"
214283,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,181,,"        assertEquals(r.size(), 1, ""Unexpected size for read."");"
214284,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestTransactionConflict.java,183,,"                   ""Unexpected value for read: "" + Bytes.toString(r.getValue(fam, col)));"
214285,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestUpdateScan.java,69,,"                assertTrue(tmp == startKeyValue, ""Bad value, should be "" + startKeyValue + "" but is "" + tmp);"
214286,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestUpdateScan.java,93,,"                LOG.info(""Result: "" + iTmp);"
214287,./TargetProjects/phoenix-omid/hbase-client/src/test/java/org/apache/omid/transaction/TestUpdateScan.java,97,,"            LOG.info(""Rows found "" + count);"
214288,./TargetProjects/phoenix-omid/hbase-commit-table/src/test/java/org/apache/omid/committable/hbase/TestHBaseCommitTable.java,143,,"        assertEquals(rowCount(TABLE_NAME, commitTableFamily), 0, ""Rows should be 0!"");"
214289,./TargetProjects/phoenix-omid/hbase-commit-table/src/test/java/org/apache/omid/committable/hbase/TestHBaseCommitTable.java,159,,"            assertEquals(ct, expected, ""Commit timestamp should be "" + expected);"
214290,./TargetProjects/phoenix-omid/hbase-common/src/test/java/org/apache/omid/committable/hbase/TestHBaseCommitTableKey.java,43,,"        assertEquals(keyGen.keyToStartTimestamp(keyGen.startTimestampToKey(0)), 0, ""Should match"");"
214291,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,92,,"    private final byte[] data = Bytes.toBytes(""testWrite-1"");"
214292,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,137,,"        LOG.info(""--------------------------------------------------------------------------------------------------"");"
214293,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,237,,"        put3.addColumn(fam, qual, Bytes.toBytes(""testValue 3""));"
214294,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,252,,"                ""Put cell of Tx3 cell should be there"");"
214295,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,254,,"                ""Put shadow cell of Tx3 should be there"");"
214296,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,296,,"        LOG.info(""Flushing table {}"", TEST_TABLE);"
214297,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,300,,"        LOG.info(""Regions in table {}: {}"", TEST_TABLE, hbaseCluster.getRegions(Bytes.toBytes(TEST_TABLE)).size());"
214298,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,309,,"        LOG.info(""Compacting table {}"", TEST_TABLE);"
214299,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,312,,"        LOG.info(""Sleeping for 3 secs"");"
214300,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,314,,"        LOG.info(""Waking up after 3 secs"");"
214301,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,345,,"                   ""Cell should be there"");"
214302,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,348,,"                    ""Shadow cell should not be there"");"
214303,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,796,,"        put.addColumn(fam, qual, Bytes.toBytes(""testValue""));"
214304,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1002,,"        assertFalse(CellUtils.hasCell(rowId, fam, qual, tx0.getStartTimestamp(), getter), ""Put cell should be there"");"
214305,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1004,,"                    ""Put shadow cell should be there"");"
214306,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1009,,"                   ""Delete cell should be there"");"
214307,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1011,,"                   ""Delete shadow cell should be there"");"
214308,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1082,,"                    ""Put cell shouldn't be there"");"
214309,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1084,,"                    ""Put shadow cell shouldn't be there"");"
214310,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1086,,"                    ""Delete cell shouldn't be there"");"
214311,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompaction.java,1088,,"                    ""Delete shadow cell shouldn't be there"");"
214312,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompactionLL.java,130,,"        LOG.info(""--------------------------------------------------------------------------------------------------"");"
214313,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestCompactorScanner.java,88,,"            KeyValue regularKV = new KeyValue(Bytes.toBytes(""test-row""), TEST_TS, Type.Put);"
214314,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,138,,"        LOG.info(""--------------------------------------------------------------------------------------------------"");"
214315,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,222,,"        byte[] rowName1 = Bytes.toBytes(""row1"");"
214316,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,224,,"        byte[] colName1 = Bytes.toBytes(""col1"");"
214317,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,225,,"        byte[] dataValue1 = Bytes.toBytes(""testWrite-1"");"
214318,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,247,,"        assertEquals(tsRow, tx1.getTransactionId(), ""Reading differnt version"");"
214319,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,282,,"        byte[] dataValue2 = Bytes.toBytes(""testWrite-2"");"
214320,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,367,,"        byte[] famName2 = Bytes.toBytes(""test-fam2"");"
214321,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilter.java,369,,"        byte[] colName2 = Bytes.toBytes(""col2"");"
214322,./TargetProjects/phoenix-omid/hbase-coprocessor/src/test/java/org/apache/omid/transaction/TestSnapshotFilterLL.java,116,,"        LOG.info(""--------------------------------------------------------------------------------------------------"");"
214323,./TargetProjects/phoenix-omid/transaction-client/src/main/java/org/apache/omid/transaction/AbstractTransactionManager.java,108,,"        this.startTimestampTimer = metrics.timer(name(""omid"", ""tm"", ""hbase"", ""startTimestamp"", ""latency""));"
214324,./TargetProjects/phoenix-omid/transaction-client/src/main/java/org/apache/omid/transaction/AbstractTransactionManager.java,108,,"        this.startTimestampTimer = metrics.timer(name(""omid"", ""tm"", ""hbase"", ""startTimestamp"", ""latency""));"
214325,./TargetProjects/phoenix-omid/tso-server/src/main/java/org/apache/omid/tso/Batch.java,99,,"        Preconditions.checkState(!isFull(), ""batch is full"");"
214326,./TargetProjects/phoenix-omid/tso-server/src/main/java/org/apache/omid/tso/ReplyProcessorImpl.java,109,,"        this.abortMeter = metrics.meter(name(""tso"", ""aborts""));"
214327,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/TestBatch.java,62,,"        assertFalse(batch.isFull(), ""Batch shouldn't be full"");"
214328,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/TestBatch.java,63,,"        assertEquals(batch.getNumEvents(), 0, ""Num events should be 0"");"
214329,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/TestPersistenceProcessor.java,111,,"                                                          ""localhost:1234"","
214330,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/TestPersistenceProcessorHandler.java,116,,"                                                                 ""localhost:1234"","
214331,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/TestTSOChannelHandlerNetty.java,152,,"            ChannelFuture channelF = nettyClient.connect(new InetSocketAddress(""localhost"", port));"
214332,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/TestTSOLL.java,81,,"        LOG.info(""=================================================================================================="");"
214333,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/client/TestIntegrationOfTSOClientServerBasicFunctionality.java,86,,"        LOG.info(""=================================================================================================="");"
214334,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/client/TestIntegrationOfTSOClientServerBasicFunctionality.java,138,,"        assertTrue(startTsTx2 >= referenceTimestamp, ""Should grow monotonically"");"
214335,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/client/TestTSOClientRequestAndResponseBehaviours.java,83,,"        LOG.info(""=================================================================================================="");"
214336,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/client/TestTSOClientRowAndCellLevelConflict.java,65,,"        LOG.info(""=================================================================================================="");"
214337,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/client/TestTSOClientRowAndCellLevelConflict.java,114,,"            assertTrue(e.getCause() instanceof AbortException, ""Transaction should be aborted"");"
214338,./TargetProjects/phoenix-omid/tso-server/src/test/java/org/apache/omid/tso/client/TestTSOClientRowAndCellLevelConflict.java,142,,"            assertFalse(e.getCause() instanceof AbortException, ""Transaction should be committed"");"
214339,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/TransactionServiceThriftClient.java,118,,"        LOG.trace(""Expecting only {} as the original exception class but found {}"","
214340,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransaction.java,943,,"      sb.append(""null"");"
214341,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,174,,"      sendBase(""startLong"", args);"
214342,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,196,,"      sendBase(""startShort"", args);"
214343,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,219,,"      sendBase(""startLongClientId"", args);"
214344,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,245,,"      sendBase(""startShortTimeout"", args);"
214345,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,268,,"      sendBase(""startShortClientId"", args);"
214346,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,295,,"      sendBase(""startShortWithClientIdAndTimeOut"", args);"
214347,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,321,,"      sendBase(""startShortWithTimeout"", args);"
214348,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,348,,"      sendBase(""canCommitTx"", args);"
214349,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,375,,"      sendBase(""canCommitOrThrow"", args);"
214350,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,404,,"      sendBase(""commitTx"", args);"
214351,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,431,,"      sendBase(""commitOrThrow"", args);"
214352,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,460,,"      sendBase(""abortTx"", args);"
214353,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,480,,"      sendBase(""invalidateTx"", args);"
214354,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,502,,"      sendBase(""getSnapshot"", args);"
214355,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,527,,"      sendBase(""resetState"", args);"
214356,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,546,,"      sendBase(""status"", args);"
214357,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,569,,"      sendBase(""truncateInvalidTx"", args);"
214358,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,592,,"      sendBase(""truncateInvalidTxBefore"", args);"
214359,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,617,,"      sendBase(""invalidTxSize"", args);"
214360,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,640,,"      sendBase(""checkpoint"", args);"
214361,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,665,,"      sendBase(""pruneNow"", args);"
214362,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,714,,"          throw new IllegalStateException(""Method call not finished!"");"
214363,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,1908,,"        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
214364,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,1908,,"        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
214365,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,2118,,"    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(""success"", org.apache.thrift.protocol.TType.STRUCT, (short)0);"
214366,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,2351,,"      sb.append(""success:"");"
214367,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,2353,,"        sb.append(""null"");"
214368,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,3082,,"    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(""clientId"", org.apache.thrift.protocol.TType.STRING, (short)1);"
214369,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,3897,,"    private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField(""timeout"", org.apache.thrift.protocol.TType.I32, (short)1);"
214370,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,7150,,"    private static final org.apache.thrift.protocol.TField CHANGES_FIELD_DESC = new org.apache.thrift.protocol.TField(""changes"", org.apache.thrift.protocol.TType.SET, (short)2);"
214371,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/distributed/thrift/TTransactionServer.java,7473,,"      sb.append(""tx:"");"
214372,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/util/TimeMathParser.java,78,,"  @SuppressWarnings({""unused"", ""WeakerAccess""})"
214373,./TargetProjects/phoenix-tephra/tephra-core/src/main/java/org/apache/tephra/zookeeper/TephraZKClientService.java,526,,"      @SuppressWarnings(""unchecked"")"
214374,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/TransactionContextTest.java,152,,"      Assert.fail(""Persist should have failed - exception should be thrown"");"
214375,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/TransactionContextTest.java,154,,"      Assert.assertEquals(""persist failure"", e.getCause().getMessage());"
214376,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/TransactionContextTest.java,525,,"      Assert.assertEquals(""get name failure"", e.getSuppressed()[0].getMessage());"
214377,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/TransactionExecutorTest.java,158,,"      Assert.fail(""persist failed - exception should be thrown"");"
214378,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/TransactionTest.java,130,,"      Assert.assertTrue(""Assertion error for version = "" + t, tx.isVisible(t));"
214379,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/visibility/VisibilityFenceTest.java,111,,"    byte[] fenceId = ""test_table"".getBytes(Charsets.UTF_8);"
214380,./TargetProjects/phoenix-tephra/tephra-core/src/test/java/org/apache/tephra/visibility/VisibilityFenceTest.java,167,,"      Assert.fail(""Expected transaction to fail"");"
214381,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,200,,"      throw new IOException(""Transaction not started"");"
214382,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,326,,"      throw new UnsupportedOperationException(""Operation is not supported transactionally"");"
214383,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/main/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTool.java,78,,"  @SuppressWarnings(""WeakerAccess"")"
214384,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/main/java/org/apache/tephra/hbase/txprune/PruneUpperBoundWriter.java,54,,"  @SuppressWarnings(""WeakerAccess"")"
214385,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,121,,"    private static final byte[] row = Bytes.toBytes(""row"");"
214386,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,351,,"        Put p = new Put(Bytes.toBytes(""famrow"" + i));"
214387,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214388,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214389,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,123,,"    TableName compactedTable = TableName.valueOf(""default"", ""compacted_table"");"
214390,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,232,,"      Assert.assertTrue(pruningDebug.execute(new String[] {""time-region""}, out));"
214391,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,287,,"      pruningDebug.execute(new String[]{""idle-regions"", ""-1""}, out);"
214392,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.1-base/sources/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,332,,"      pruningDebug.execute(new String[]{""to-compact-regions"", ""-1""}, out);"
214393,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,197,,"      throw new IOException(""Transaction not started"");"
214394,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,311,,"      throw new UnsupportedOperationException(""Operation is not supported transactionally"");"
214395,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/main/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTool.java,78,,"  @SuppressWarnings(""WeakerAccess"")"
214396,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/main/java/org/apache/tephra/hbase/txprune/PruneUpperBoundWriter.java,54,,"  @SuppressWarnings(""WeakerAccess"")"
214397,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,119,,"    private static final byte[] row = Bytes.toBytes(""row"");"
214398,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,345,,"        Put p = new Put(Bytes.toBytes(""famrow"" + i));"
214399,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214400,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214401,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,122,,"    TableName compactedTable = TableName.valueOf(""default"", ""compacted_table"");"
214402,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,231,,"      Assert.assertTrue(pruningDebug.execute(new String[] {""time-region""}, out));"
214403,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,286,,"      pruningDebug.execute(new String[]{""idle-regions"", ""-1""}, out);"
214404,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,331,,"      pruningDebug.execute(new String[]{""to-compact-regions"", ""-1""}, out);"
214405,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,198,,"      throw new IOException(""Transaction not started"");"
214406,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,312,,"      throw new UnsupportedOperationException(""Operation is not supported transactionally"");"
214407,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/main/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTool.java,78,,"  @SuppressWarnings(""WeakerAccess"")"
214408,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/main/java/org/apache/tephra/hbase/txprune/PruneUpperBoundWriter.java,54,,"  @SuppressWarnings(""WeakerAccess"")"
214409,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,119,,"    private static final byte[] row = Bytes.toBytes(""row"");"
214410,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,345,,"        Put p = new Put(Bytes.toBytes(""famrow"" + i));"
214411,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214412,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214413,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,122,,"    TableName compactedTable = TableName.valueOf(""default"", ""compacted_table"");"
214414,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,231,,"      Assert.assertTrue(pruningDebug.execute(new String[] {""time-region""}, out));"
214415,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,286,,"      pruningDebug.execute(new String[]{""idle-regions"", ""-1""}, out);"
214416,./TargetProjects/phoenix-tephra/tephra-hbase-compat-1.4-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,331,,"      pruningDebug.execute(new String[]{""to-compact-regions"", ""-1""}, out);"
214417,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,199,,"      throw new IOException(""Transaction not started"");"
214418,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,319,,"      throw new UnsupportedOperationException(""Operation is not supported transactionally"");"
214419,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/main/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTool.java,78,,"  @SuppressWarnings(""WeakerAccess"")"
214420,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/main/java/org/apache/tephra/hbase/txprune/PruneUpperBoundWriter.java,54,,"  @SuppressWarnings(""WeakerAccess"")"
214421,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,122,,"    private static final byte[] row = Bytes.toBytes(""row"");"
214422,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,354,,"        Put p = new Put(Bytes.toBytes(""famrow"" + i));"
214423,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214424,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214425,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,123,,"    TableName compactedTable = TableName.valueOf(""default"", ""compacted_table"");"
214426,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,232,,"      Assert.assertTrue(pruningDebug.execute(new String[] {""time-region""}, out));"
214427,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,287,,"      pruningDebug.execute(new String[]{""idle-regions"", ""-1""}, out);"
214428,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.0-base/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,332,,"      pruningDebug.execute(new String[]{""to-compact-regions"", ""-1""}, out);"
214429,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,200,,"      throw new IOException(""Transaction not started"");"
214430,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,320,,"      throw new UnsupportedOperationException(""Operation is not supported transactionally"");"
214431,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/main/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTool.java,78,,"  @SuppressWarnings(""WeakerAccess"")"
214432,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/main/java/org/apache/tephra/hbase/txprune/PruneUpperBoundWriter.java,54,,"  @SuppressWarnings(""WeakerAccess"")"
214433,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,122,,"    private static final byte[] row = Bytes.toBytes(""row"");"
214434,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,354,,"        Put p = new Put(Bytes.toBytes(""famrow"" + i));"
214435,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214436,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214437,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,123,,"    TableName compactedTable = TableName.valueOf(""default"", ""compacted_table"");"
214438,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,232,,"      Assert.assertTrue(pruningDebug.execute(new String[] {""time-region""}, out));"
214439,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,287,,"      pruningDebug.execute(new String[]{""idle-regions"", ""-1""}, out);"
214440,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.3/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,332,,"      pruningDebug.execute(new String[]{""to-compact-regions"", ""-1""}, out);"
214441,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,200,,"      throw new IOException(""Transaction not started"");"
214442,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/main/java/org/apache/tephra/hbase/TransactionAwareHTable.java,320,,"      throw new UnsupportedOperationException(""Operation is not supported transactionally"");"
214443,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/main/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTool.java,78,,"  @SuppressWarnings(""WeakerAccess"")"
214444,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/main/java/org/apache/tephra/hbase/txprune/PruneUpperBoundWriter.java,54,,"  @SuppressWarnings(""WeakerAccess"")"
214445,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,122,,"    private static final byte[] row = Bytes.toBytes(""row"");"
214446,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/TransactionAwareHTableTest.java,354,,"        Put p = new Put(Bytes.toBytes(""famrow"" + i));"
214447,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214448,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/coprocessor/TransactionVisibilityFilterTest.java,273,,"                 filter.filterKeyValue(newKeyValue(""row1"", ""val1"", tx6.getTransactionId())));"
214449,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,123,,"    TableName compactedTable = TableName.valueOf(""default"", ""compacted_table"");"
214450,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,232,,"      Assert.assertTrue(pruningDebug.execute(new String[] {""time-region""}, out));"
214451,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,287,,"      pruningDebug.execute(new String[]{""idle-regions"", ""-1""}, out);"
214452,./TargetProjects/phoenix-tephra/tephra-hbase-compat-2.4/src/test/java/org/apache/tephra/hbase/txprune/InvalidListPruningDebugTest.java,332,,"      pruningDebug.execute(new String[]{""to-compact-regions"", ""-1""}, out);"
214453,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/evaluation/ExtremalTupleByNthField.java,143,,"		this(""1"", ""max"");"
214454,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/evaluation/stats/COR.java,106,,"                        temp.set(0, ""var""+i);"
214455,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/evaluation/stats/COR.java,120,,"                    System.err.println(""Failed to process input record; error - "" + e.getMessage());"
214456,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/evaluation/stats/COV.java,108,,"                        temp.set(0, ""var""+i);"
214457,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/evaluation/util/Top.java,139,,"            throw new RuntimeException(""General Exception executing function: "" + e);"
214458,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/MultiStorage.java,307,,"            String safeFieldValue = fieldValue.replaceAll(""\\/"",""-"");"
214459,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/SequenceFileLoader.java,79,,"      LOG.warn(""Unable to translate key ""+key.getClass()+"" to a Pig datatype"");"
214460,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/avro/AvroStorage.java,384,,"    @SuppressWarnings(""rawtypes"")"
214461,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/avro/AvroStorage.java,505,,"            if (key.equalsIgnoreCase(""debug"") || key.equalsIgnoreCase(""index"")) {"
214462,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/avro/AvroStorage.java,551,,"                } else if (name.equalsIgnoreCase(""data"")"
214463,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/avro/AvroStorage.java,554,,"                             || name.equalsIgnoreCase(""schema_file"")"
214464,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/avro/AvroStorageUtils.java,269,,"                   throw new IOException(""Cannot merge "" + xType + "" with "" + yType);"
214465,./TargetProjects/pig/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/avro/AvroStorageUtils.java,269,,"                   throw new IOException(""Cannot merge "" + xType + "" with "" + yType);"
214466,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/evaluation/TestOver.java,93,,"        t.append(""count"");"
214467,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/evaluation/TestOver.java,138,,"        t.append(""fred"");"
214468,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/evaluation/TestOver.java,1093,,"        t.set(1, ""rank"");"
214469,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/evaluation/TestOver.java,1444,,"        t.set(1, ""ntile"");"
214470,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestEvalString.java,46,,"        String in = ""Hello World!"";"
214471,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestExtremalTupleByNthField.java,35,,"		ExtremalTupleByNthField o = new ExtremalTupleByNthField(""3"", ""min"");"
214472,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestExtremalTupleByNthField.java,57,,"		ExtremalTupleByNthField o = new ExtremalTupleByNthField(""4"", ""max"");"
214473,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestExtremalTupleByNthField.java,179,,"				Arrays.asList(""This bag has four items"")));"
214474,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestExtremalTupleByNthField.java,214,,"		tpBigger.append(""This is a bigger tuple."");"
214475,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestMaxTupleBy1stField.java,42,,"        inputTuples.add(TUPLE_FACTORY.newTuple(Lists.newArrayList(0L, ""Fruit"", ""orange"", 21F)));"
214476,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/TestMaxTupleBy1stField.java,43,,"        inputTuples.add(TUPLE_FACTORY.newTuple(Lists.newArrayList(1L, ""Fruit"", ""apple"", 9.9F)));"
214477,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/datetime/diff/TestDiffDateTime.java,35,,"        t1.set(1, ""2002-01-01T00:00:00.000Z"");"
214478,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/datetime/diff/TestDiffDateTime.java,49,,"        t1.set(0, ""2009-01-07T00:00:00.000Z"");"
214479,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/datetime/truncate/TestTruncateDateTime.java,57,,"        t1.set(0, ""2010-04-15T08:11:33.020Z"");"
214480,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/datetime/truncate/TestTruncateDateTime.java,70,,"        t1.set(0, ""2010-04-15T08:11:33.020-08:00"");"
214481,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/decode/TestDecode.java,137,,"        t1.set(2, ""Sales"");"
214482,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/decode/TestDecode.java,139,,"        t1.set(4, ""Engineering"");"
214483,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/decode/TestDecode.java,140,,"        t1.set(5, ""Other"");"
214484,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/string/TestReplaceMulti.java,76,,"        String inputStr = ""Hello World!"";"
214485,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/string/TestStuff.java,89,,"		t.set(0, ""Replace me now!"");"
214486,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/util/apachelogparser/TestSearchTermExtractor.java,30,,"        tests.put(""http://www.google.com/search?hl=en&q=a+simple+test&btnG=Google+Search"", ""a simple test"");"
214487,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/util/apachelogparser/TestSearchTermExtractor.java,99,,"        tests.put(""http://www.google.com/search?hl=en&lr=&q=a+more%21+complex_+search%24&btnG=Search"", ""a more! complex_ search$"");"
214488,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,39,,"                		""<book id=\""bk101\"">"" "
214489,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,40,,"                				+ ""<author>Gambardella, Matthew</author>"""
214490,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,41,,"                				+ ""<title>XML Developer's Guide</title>"" "
214491,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,42,,"                				+ ""<genre>Computer</genre>"" "
214492,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,43,,"                				+ ""<price>44.95</price>"""
214493,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,44,,"                				+ ""<publish_date>2000-10-01</publish_date>"""
214494,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,45,,"                				+ ""<description>An in-depth look at creating applications with XML.</description>"" "
214495,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,46,,"                        + ""</book>"");"
214496,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,156,,"        when(tuple.get(1)).thenReturn(""book/author"");"
214497,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,157,,"        assertEquals(""Gambardella, Matthew"", xpath.exec(tuple).get(0));"
214498,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,160,,"        when(tuple.get(1)).thenReturn(""book/price"");"
214499,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathAllTest.java,161,,"        assertEquals(""44.95"", xpath.exec(tuple).get(0));"
214500,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,39,,"                                + ""<author>Gambardella, Matthew</author>"""
214501,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,40,,"                                + ""<title>XML Developer's Guide</title>"""
214502,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,41,,"                                + ""<genre>Computer</genre>"""
214503,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,42,,"                                + ""<price>44.95</price>"""
214504,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,43,,"                                + ""<publish_date>2000-10-01</publish_date>"""
214505,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,44,,"                                + ""<description>An in-depth look at creating applications with XML.</description>"""
214506,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,45,,"                                + ""</book>"");"
214507,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,49,,"        when(tuple.get(1)).thenReturn(""book/author"");"
214508,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,50,,"        assertEquals(""Gambardella, Matthew"", xpath.exec(tuple));"
214509,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,75,,"        assertNotEquals(""Someone else"", xpath.exec(tuple));"
214510,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,77,,"        when(tuple.get(1)).thenReturn(""book/price"");"
214511,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,78,,"        assertEquals(""44.95"", xpath.exec(tuple));"
214512,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,79,,"        assertNotEquals(""00.00"", xpath.exec(tuple));"
214513,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/evaluation/xml/XPathTest.java,243,,"                ""<Bb Cc=\""1\""/>"" +"
214514,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestAllLoader.java,165,,"        server.registerQuery(""a = LOAD '"" + Util.encodeEscape(filesByContentDir.getAbsolutePath())"
214515,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestAllLoader.java,166,,"                + ""' using "" + allLoaderFuncSpec + "" as (p:float, q:float);"");"
214516,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVExcelStorage.java,236,,"        script = ""STORE a INTO '"" + testOutFileName + ""' USING "" +"
214517,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVExcelStorage.java,333,,"            ""data = load '"" + dataDir + testFile + ""' "" +"
214518,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVExcelStorage.java,338,,"        Iterator<Tuple> data = pig.openIterator(""data"");"
214519,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVExcelStorage.java,343,,"            ""(1,10,,3.15159,,uiop)"",             // missing field in the middle"
214520,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVStorage.java,58,,"        String script = ""a = load '"" + inputFileName + ""' using org.apache.pig.piggybank.storage.CSVLoader() "" +"
214521,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestCSVStorage.java,58,,"        String script = ""a = load '"" + inputFileName + ""' using org.apache.pig.piggybank.storage.CSVLoader() "" +"
214522,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestFixedWidthLoader.java,75,,"            ""data = load '"" + dataDir + testFile + ""' "" +"
214523,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestFixedWidthLoader.java,79,,"        Iterator<Tuple> data = pig.openIterator(""data"");"
214524,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestFixedWidthLoader.java,96,,"            ""using org.apache.pig.piggybank.storage.FixedWidthLoader("" +"
214525,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarLoader.java,125,,"        String funcSpecString = ""org.apache.pig.piggybank.storage.HiveColumnarLoader('f1 string,f2 string,f3 string')"";"
214526,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarLoader.java,131,,"        server.registerFunction(""org.apache.pig.piggybank.storage.HiveColumnarLoader"","
214527,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarLoader.java,134,,"        server.registerQuery(""a = LOAD '"" + Util.encodeEscape(singlePartitionedFile) + ""' using "" + funcSpecString"
214528,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarLoader.java,134,,"        server.registerQuery(""a = LOAD '"" + Util.encodeEscape(singlePartitionedFile) + ""' using "" + funcSpecString"
214529,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarLoader.java,270,,"        String funcSpecString = ""org.apache.pig.piggybank.storage.HiveColumnarLoader('f1 string,f2 string,f3 string'"""
214530,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarLoader.java,271,,"                + "", '"" + startingDate + "":"" + startingDate + ""')"";"
214531,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,87,,"        Util.deleteDirectory(new File(""testhiveColumnarStore""));"
214532,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,93,,"        String loadString = ""org.apache.pig.piggybank.storage.HiveColumnarLoader('f1 string,f2 string,f3 string')"";"
214533,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,94,,"        String storeString = ""org.apache.pig.piggybank.storage.HiveColumnarStorage()"";"
214534,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,101,,"        server.registerQuery(""a = LOAD '"" + Util.encodeEscape(singlePartitionedFile) + ""' using "" + loadString"
214535,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,101,,"        server.registerQuery(""a = LOAD '"" + Util.encodeEscape(singlePartitionedFile) + ""' using "" + loadString"
214536,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,108,,"        Path outputPath = new Path(outputFile.getAbsolutePath()+""/part-m-00000.rc"");"
214537,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestHiveColumnarStorage.java,154,,"            assertEquals(""Sample value"", valueStr);"
214538,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestIndexedStorage.java,144,,"        assertTrue(""GetNext did not return the correct value"", (read == null));"
214539,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestXMLLoader.java,111,,"    filename = filename.replace(""\\"", ""\\\\"");"
214540,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestXMLLoader.java,112,,"    String query = ""A = LOAD '"" + filename + ""' USING org.apache.pig.piggybank.storage.XMLLoader('invalid') as (doc:chararray);"";"
214541,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/TestXMLLoader.java,325,,"      String query = ""A = LOAD '"" + filename + ""' USING org.apache.pig.piggybank.storage.XMLLoader('event') as (doc:chararray);"";"
214542,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,121,,"        ""   \""type\"" : \""record\"","" +"
214543,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,122,,"        ""   \""name\"" : \""recursive_record\"","" +"
214544,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,123,,"        ""   \""fields\"" : [ {"" +"
214545,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,125,,"        ""     \""type\"" : \""int\"""" +"
214546,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,126,,"        ""   }, {"" +"
214547,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,132,,"        ""   } ]"" +"
214548,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,214,,"          "" in = LOAD '"" + Util.encodeEscape(testRecursiveRecordInMap) +"
214549,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,215,,"              ""' USING org.apache.pig.piggybank.storage.avro.AvroStorage ();"","
214550,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,216,,"          "" STORE in INTO '"" + output +"
214551,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,217,,"              ""' USING org.apache.pig.piggybank.storage.avro.AvroStorage ("" +"
214552,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,218,,"              "" 'no_schema_check',"" +"
214553,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,219,,"              "" 'schema', '"" + recursiveRecordInMap + ""' );"""
214554,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,219,,"              "" 'schema', '"" + recursiveRecordInMap + ""' );"""
214555,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,421,,"            Assert.fail(""Negative test to test an exception. Should not be succeeding!"");"
214556,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,759,,"           "" in = LOAD '"" + Util.encodeEscape(testDir1) + "" ' USING org.apache.pig.piggybank.storage.avro.AvroStorage ();"","
214557,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,761,,"               ""   'schema', '{\""type\"":\""array\"",\""items\"":\""float\""}'  );"""
214558,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,916,,"                ""' USING org.apache.pig.piggybank.storage.avro.AvroStorage ( ""  +"
214559,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1002,,"           "" avro = LOAD '"" + Util.encodeEscape(testRecordFile) + "" ' USING org.apache.pig.piggybank.storage.avro.AvroStorage ();"","
214560,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1005,,"           "" STORE sc INTO '"" + output1 + ""' "" +"
214561,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1006,,"                 "" USING org.apache.pig.piggybank.storage.avro.AvroStorage ("" +"
214562,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1014,,"                "" }');"","
214563,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1033,,"           "" avro = LOAD '"" + Util.encodeEscape(testTextFile) + ""' AS (member_id:int, browser_id:chararray, tracking_time:long, act_content:bag{inner:tuple(key:chararray, value:chararray)});"","
214564,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1058,,"        String expected = basedir + ""expected_testRecordWithFieldSchema.avro"";"
214565,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1062,,"           "" avro1 = FILTER avro BY member_id > 1211;"","
214566,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1063,,"           "" avro2 = FOREACH avro1 GENERATE member_id, browser_id, tracking_time, act_content ;"","
214567,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1064,,"           "" STORE avro2 INTO '"" + output + ""' "" +"
214568,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1066,,"                 ""'{\""data\"":  \"""" + Util.encodeEscape(testRecordFile) + ""\"" ,"" +"
214569,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1067,,"                 ""  \""field0\"": \""int\"", "" +"
214570,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1068,,"                  "" \""field1\"":  \""def:browser_id\"", "" +"
214571,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1069,,"                 ""  \""field3\"": \""def:act_content\"" "" +"
214572,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorage.java,1258,,"                ""STORE A into '""+ output +""/A' USING "" + ""org.apache.pig.piggybank.storage.avro.AvroStorage();"","
214573,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorageUtils.java,234,,"                        Assert.fail(""exception is expected, but "" + z.getType() + "" is returned"");"
214574,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorageUtils.java,234,,"                        Assert.fail(""exception is expected, but "" + z.getType() + "" is returned"");"
214575,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorageUtils.java,236,,"                        assertEquals(""Cannot merge ""+ x +"" with "" +y, e.getMessage());"
214576,./TargetProjects/pig/contrib/piggybank/java/src/test/java/org/apache/pig/piggybank/test/storage/avro/TestAvroStorageUtils.java,236,,"                        assertEquals(""Cannot merge ""+ x +"" with "" +y, e.getMessage());"
214577,./TargetProjects/pig/src/org/apache/pig/AlgebraicEvalFunc.java,174,,"           pigCounterHelper.incrCounter(""AlgebraicEvalFunc"", ""InitialSizeEst"", initialSizeEstimate);"
214578,./TargetProjects/pig/src/org/apache/pig/Main.java,254,,"                    properties.setProperty(BRIEF, ""true"");"
214579,./TargetProjects/pig/src/org/apache/pig/Main.java,315,,"                    properties.setProperty(""pig.logfile"", (logFileName == null? """": logFileName));"
214580,./TargetProjects/pig/src/org/apache/pig/Main.java,467,,"                        log.info(""Dry run completed. Substituted pig script is at """
214581,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/HDataType.java,117,,"                String msg = ""Using Map as key not supported."";"
214582,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/accumulo/AbstractAccumuloStorage.java,353,,"    @SuppressWarnings(""rawtypes"")"
214583,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/accumulo/Utils.java,180,,"                if (toReturn.startsWith(""file:"")) {"
214584,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/JobControlCompiler.java,524,,"        String setScriptProp = conf.get(PigConfiguration.PIG_SCRIPT_INFO_ENABLED, ""true"");"
214585,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MRCompiler.java,517,,"                String msg = ""Both map and reduce phases have been done. This is unexpected while compiling."";"
214586,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MRCompiler.java,864,,"            String msg = ""Error compiling operator "" + op.getClass().getSimpleName();"
214587,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MRCompiler.java,1857,,"                String msg = ""Unable to set index on newly created POLocalRearrange."";"
214588,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MapReduceLauncher.java,454,,"        if (Boolean.valueOf(pc.getProperties().getProperty(PigConfiguration.PIG_DELETE_TEMP_FILE, ""true""))) {"
214589,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MultiQueryOptimizer.java,173,,"            log.info(""Merged "" + n + "" map-only splittees."");"
214590,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MultiQueryOptimizer.java,610,,"                    String msg = ""Internal Error. Unable to set multi-query index for optimization."";"
214591,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/MultiQueryOptimizer.java,713,,"            String msg = ""Internal Error. Inconsistency in key index found during optimization."";"
214592,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/PigGenericMapReduce.java,248,,"                        errMsg = ""Received Error while "" +"
214593,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/PigInputFormat.java,69,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
214594,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer/plans/MRPrinter.java,62,,"            mStream.println(""--------"");"
214595,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POCast.java,1362,,"                    throw new ExecException(""Cannot convert ""+ obj + "" to "" + fs);"
214596,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POCast.java,1362,,"                    throw new ExecException(""Cannot convert ""+ obj + "" to "" + fs);"
214597,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/expressionOperators/POProject.java,169,,"                    pigLogger.warn(this,""Attempt to access field "" +"
214598,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/plans/PhysicalPlan.java,244,,"                String msg = ""Unable to find clone for op "" + op.name();"
214599,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/plans/PlanPrinter.java,285,,"        stream.print(op.name() + ""   "");"
214600,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/physicalLayer/util/MonitoredUDFExecutor.java,56,,"    @SuppressWarnings(""unchecked"")"
214601,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/spark/SparkLauncher.java,313,,"        boolean isLocal = System.getenv(""SPARK_MASTER"") != null ? System"
214602,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/spark/SparkLauncher.java,546,,"            master = ""local"";"
214603,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/spark/plan/SparkCompiler.java,371,,"            String msg = ""Error compiling operator """
214604,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/tez/TezDagBuilder.java,1206,,"            String msg = ""Using Map as key not supported."";"
214605,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/tez/TezDagBuilder.java,1214,,"            msg = ""Using Bag as key not supported."";"
214606,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/tez/TezDagBuilder.java,1219,,"            msg = ""Unhandled key type "" + DataType.findTypeName(keyType);"
214607,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/tez/TezLauncher.java,117,,"            pc.getProperties().setProperty(TezConfiguration.TEZ_LOCAL_MODE, ""true"");"
214608,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/tez/plan/TezCompiler.java,626,,"            String msg = ""Error compiling operator "" + op.getClass().getSimpleName();"
214609,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/executionengine/tez/plan/TezPlanContainerPrinter.java,38,,"        mStream.println(""#--------------------------------------------------"");"
214610,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/hbase/HBaseStorage.java,199,,"        Option loadKey = OptionBuilder.hasOptionalArgs(1).withArgName(""loadKey"").withLongOpt(""loadKey"").withDescription(""Load Key"").create();"
214611,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/hbase/HBaseStorage.java,215,,"        Option noWal = OptionBuilder.hasOptionalArgs(1).withArgName(""noWAL"").withLongOpt(""noWAL"").withDescription(""Sets the write ahead to false for faster loading. To be used with extreme caution since this could result in data loss (see http://hbase.apache.org/book.html#perf.hbase.client.putwal)."").create();"
214612,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/hbase/HBaseStorage.java,217,,"        validOptions_.addOption(""minTimestamp"", true, ""Record must have timestamp greater or equal to this value"");"
214613,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/hbase/HBaseStorage.java,218,,"        validOptions_.addOption(""maxTimestamp"", true, ""Record must have timestamp less then this value"");"
214614,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/hbase/HBaseStorage.java,219,,"        validOptions_.addOption(""timestamp"", true, ""Record must have timestamp equal to this value"");"
214615,./TargetProjects/pig/src/org/apache/pig/backend/hadoop/hbase/HBaseStorage.java,289,,"			if (""true"".equalsIgnoreCase(value) || """".equalsIgnoreCase(value) || value == null ) {//the empty string and null check is for backward compat."
214616,./TargetProjects/pig/src/org/apache/pig/builtin/AVG.java,130,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214617,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicBigDecimalMathBase.java,120,,"            throw new ExecException(""Error executing function on BigDecimal"", errCode, PigException.BUG, e);"
214618,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicBigIntegerMathBase.java,120,,"            throw new ExecException(""Error executing function on BigInteger"", errCode, PigException.BUG, e);"
214619,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicByteArrayMathBase.java,110,,"            throw new ExecException(""Error executing function on Doubles"", errCode, PigException.BUG, e);"
214620,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicDoubleMathBase.java,96,,"            throw new ExecException(""Error executing function on Doubles"", errCode, PigException.BUG, e);"
214621,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicFloatMathBase.java,95,,"            throw new ExecException(""Error executing function on Floats"", errCode, PigException.BUG, e);"
214622,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicLongMathBase.java,98,,"            throw new ExecException(""Error executing function on Longs"", errCode, PigException.BUG, e);"
214623,./TargetProjects/pig/src/org/apache/pig/builtin/AlgebraicMathBase.java,89,,"        for (@SuppressWarnings(""rawtypes"")"
214624,./TargetProjects/pig/src/org/apache/pig/builtin/AvroStorage.java,267,,"  @SuppressWarnings(""rawtypes"")"
214625,./TargetProjects/pig/src/org/apache/pig/builtin/BigDecimalAvg.java,103,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214626,./TargetProjects/pig/src/org/apache/pig/builtin/BigIntegerAvg.java,104,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214627,./TargetProjects/pig/src/org/apache/pig/builtin/COR.java,81,,"                        temp.set(0, ""var""+i);"
214628,./TargetProjects/pig/src/org/apache/pig/builtin/COV.java,82,,"                        temp.set(0, ""var""+i);"
214629,./TargetProjects/pig/src/org/apache/pig/builtin/DateTimeMax.java,83,,"                String msg = ""Error while computing max in "" + this.getClass().getSimpleName();"
214630,./TargetProjects/pig/src/org/apache/pig/builtin/DateTimeMin.java,83,,"                String msg = ""Error while computing min in "" + this.getClass().getSimpleName();"
214631,./TargetProjects/pig/src/org/apache/pig/builtin/DoubleAvg.java,102,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214632,./TargetProjects/pig/src/org/apache/pig/builtin/FloatAvg.java,101,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214633,./TargetProjects/pig/src/org/apache/pig/builtin/IntAvg.java,102,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214634,./TargetProjects/pig/src/org/apache/pig/builtin/JsonMetadata.java,283,,"                log.warn(""Unable to write Resource Statistics for ""+location);"
214635,./TargetProjects/pig/src/org/apache/pig/builtin/LongAvg.java,101,,"                String msg = ""Error while computing average in "" + this.getClass().getSimpleName();"
214636,./TargetProjects/pig/src/org/apache/pig/builtin/OrcStorage.java,654,,"                throw new RuntimeException(""Unsupported binary expression type: "" + expr.getOpType() + "" in "" + expr);"
214637,./TargetProjects/pig/src/org/apache/pig/builtin/PigStorage.java,173,,"        Option overwrite = new Option(""overwrite"", ""Overwrites the destination."");"
214638,./TargetProjects/pig/src/org/apache/pig/builtin/StringMax.java,82,,"                String msg = ""Error while computing max in "" + this.getClass().getSimpleName();"
214639,./TargetProjects/pig/src/org/apache/pig/builtin/TOP.java,165,,"            throw new RuntimeException(""ExecException executing function: "", e);"
214640,./TargetProjects/pig/src/org/apache/pig/builtin/TOP.java,167,,"            throw new RuntimeException(""General Exception executing function: "", e);"
214641,./TargetProjects/pig/src/org/apache/pig/builtin/Utf8StorageConverter.java,116,,"                throw new IOException(""Unexpect end of tuple"");"
214642,./TargetProjects/pig/src/org/apache/pig/builtin/Utf8StorageConverter.java,344,,"            LogUtils.warn(this, ""Unable to interpret value "" + Arrays.toString(b) + "" in field being "" +"
214643,./TargetProjects/pig/src/org/apache/pig/builtin/Utf8StorageConverter.java,344,,"            LogUtils.warn(this, ""Unable to interpret value "" + Arrays.toString(b) + "" in field being "" +"
214644,./TargetProjects/pig/src/org/apache/pig/builtin/Utf8StorageConverter.java,346,,"                    e.getMessage() + ""> field discarded"","
214645,./TargetProjects/pig/src/org/apache/pig/data/BinInterSedes.java,433,,"            throw new RuntimeException(""Unexpected data type "" + type + "" found in stream."");"
214646,./TargetProjects/pig/src/org/apache/pig/data/BinInterSedes.java,433,,"            throw new RuntimeException(""Unexpected data type "" + type + "" found in stream."");"
214647,./TargetProjects/pig/src/org/apache/pig/data/BinInterSedes.java,466,,"    @SuppressWarnings(""unchecked"")"
214648,./TargetProjects/pig/src/org/apache/pig/data/DataType.java,627,,"            String msg = ""Cannot convert a "" + findTypeName(o) +"
214649,./TargetProjects/pig/src/org/apache/pig/data/DataType.java,704,,"            String msg = ""Problem with formatting. Could not convert "" + o + "" to Float."";"
214650,./TargetProjects/pig/src/org/apache/pig/data/DataType.java,704,,"            String msg = ""Problem with formatting. Could not convert "" + o + "" to Float."";"
214651,./TargetProjects/pig/src/org/apache/pig/data/DataType.java,708,,"            String msg = ""Internal error. Could not convert "" + o + "" to Float."";"
214652,./TargetProjects/pig/src/org/apache/pig/data/DistinctDataBag.java,308,,"                    String msg = ""Unable to find our spill file."";"
214653,./TargetProjects/pig/src/org/apache/pig/data/InternalDistinctBag.java,272,,"                        String msg = ""Unable to find our spill file."";"
214654,./TargetProjects/pig/src/org/apache/pig/data/InternalSortedBag.java,268,,"                        String msg = ""Unable to find our spill file.""; "
214655,./TargetProjects/pig/src/org/apache/pig/data/NonWritableTuple.java,49,,"        throw new RuntimeException(""Unimplemented"");"
214656,./TargetProjects/pig/src/org/apache/pig/data/SchemaTuple.java,110,,"    @SuppressWarnings(""unchecked"") //this is ok because we only cast to T after checking"
214657,./TargetProjects/pig/src/org/apache/pig/data/SchemaTuple.java,1001,,"            throw new RuntimeException(""Unable to retrieve int field "" + pos + "" in given Tuple: "" + t, e);"
214658,./TargetProjects/pig/src/org/apache/pig/data/SchemaTuple.java,1193,,"            throw new RuntimeException(""Unable to retrieve String field "" + pos + "" in given Tuple: "" + t, e);"
214659,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,247,,"            add(""@Override"");"
214660,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,256,,"                    + fieldNum + ""());"");"
214661,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,259,,"            add(""    }"");"
214662,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,402,,"                add(""public void setPos_""+fieldPos+""(""+typeName()+"" v) {"");"
214663,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,408,,"                    add(""    pos_""+fieldPos+"" = v;"");"
214664,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,427,,"                add(""        pos_""+fieldPos+"" = new SchemaTuple_""+nestedSchemaTupleId+""();"");"
214665,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,470,,"            add(""    switch (fieldNum) {"");"
214666,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,475,,"            add(""    case (""+fieldPos+""):"");"
214667,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,477,,"            add(""            setNull_"" + fieldPos + ""(true);"");"
214668,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,480,,"            add(""        setPos_""+fieldPos+""(unbox(val, getDummy_""+fieldPos+""()));"");"
214669,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,541,,"            add(""public boolean checkIfNull_"" + fieldPos + ""() {"");"
214670,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,592,,"            add(""        setNull_"" + fieldPos + ""(true);"");"
214671,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,593,,"            add(""    } else {"");"
214672,./TargetProjects/pig/src/org/apache/pig/data/SchemaTupleClassGenerator.java,776,,"                s += ""(pos_""+fieldPos+"" == null ? 0 : SizeUtil.roundToEight(12 + pos_""+fieldPos+"".length) * 8) + "";"
214673,./TargetProjects/pig/src/org/apache/pig/data/SortedDataBag.java,291,,"                    String msg = ""Unable to find our spill file."";"
214674,./TargetProjects/pig/src/org/apache/pig/data/UnlimitedNullTuple.java,41,,"        throw new RuntimeException(""Unimplemented"");"
214675,./TargetProjects/pig/src/org/apache/pig/impl/io/SequenceFileInterStorage.java,102,,"    @SuppressWarnings(""rawtypes"")"
214676,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,453,,"                        ""There are operators that are shared across the plans. Merge of """
214677,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,454,,"                            + ""mutually exclusive plans is the only supported merge."");"
214678,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,740,,"                String msg = ""Attempt to remove "" +"
214679,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,1100,,"                            + "" Found first operator with "" + firstNodePredecessors.size() + "" inputs."";"
214680,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,1100,,"                            + "" Found first operator with "" + firstNodePredecessors.size() + "" inputs."";"
214681,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,1109,,"                + "" Found first operator with "" + firstNodeSuccessors.size() + "" outputs."";"
214682,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,1118,,"                + "" Found second operator with "" + secondNodePredecessors.size() + "" inputs."";"
214683,./TargetProjects/pig/src/org/apache/pig/impl/plan/OperatorPlan.java,1304,,"                + "" Found "" + edgesFromFirstToSecond + "" edges."";"
214684,./TargetProjects/pig/src/org/apache/pig/impl/util/CastUtils.java,78,,"								""Unable to interpret value """
214685,./TargetProjects/pig/src/org/apache/pig/impl/util/CastUtils.java,80,,"										+ "" in field being """
214686,./TargetProjects/pig/src/org/apache/pig/impl/util/CastUtils.java,82,,"										+ e.getMessage() + ""> field discarded"","
214687,./TargetProjects/pig/src/org/apache/pig/impl/util/JarManager.java,168,,"            urls[0] = new URL(""file:"" + jarFile);"
214688,./TargetProjects/pig/src/org/apache/pig/impl/util/LogUtils.java,143,,"                fos.write((headerMessage + ""\n"").getBytes(""UTF-8""));"
214689,./TargetProjects/pig/src/org/apache/pig/newplan/logical/expression/ExpToPhyTranslationVisitor.java,138,,"                String msg = ""Invalid physical operators in the physical plan"" ;"
214690,./TargetProjects/pig/src/org/apache/pig/newplan/logical/expression/ProjectExpression.java,85,,"        super(""Project"", plan);"
214691,./TargetProjects/pig/src/org/apache/pig/newplan/logical/relational/LogToPhyTranslationVisitor.java,163,,"                String msg = ""Invalid physical operators in the physical plan"" ;"
214692,./TargetProjects/pig/src/org/apache/pig/newplan/logical/relational/LogToPhyTranslationVisitor.java,674,,"                String msg = ""Unable to set index on newly create POLocalRearrange."";"
214693,./TargetProjects/pig/src/org/apache/pig/newplan/logical/rules/ColumnPruneHelper.java,113,,"    @SuppressWarnings(""unchecked"")"
214694,./TargetProjects/pig/src/org/apache/pig/pen/AugmentBaseDataVisitor.java,286,,"                    .error(""Error visiting Cogroup during Augmentation phase of Example Generator! """
214695,./TargetProjects/pig/src/org/apache/pig/pen/AugmentBaseDataVisitor.java,518,,"                    .error(""Error visiting Load during Augmentation phase of Example Generator! """
214696,./TargetProjects/pig/src/org/apache/pig/pen/util/DisplayExamples.java,231,,"            output.append(""| Store : "" + alias + AddSpaces(4, true) + "" | "");"
214697,./TargetProjects/pig/src/org/apache/pig/scripting/groovy/GroovyScriptEngine.java,287,,"                throw new IOException(path + "": Accumulator UDF '"" + accumulator + ""' already has an """
214698,./TargetProjects/pig/src/org/apache/pig/scripting/groovy/GroovyScriptEngine.java,322,,"            FuncSpec spec = new FuncSpec(GroovyEvalFuncObject.class.getCanonicalName() + ""('"" + path + ""','"" + namespace"
214699,./TargetProjects/pig/src/org/apache/pig/scripting/jruby/RubyDataByteArray.java,52,,"@JRubyClass(name=""DataByteArray"")"
214700,./TargetProjects/pig/src/org/apache/pig/scripting/jruby/RubySchema.java,61,,"@JRubyClass(name = ""Schema"")"
214701,./TargetProjects/pig/src/org/apache/pig/scripting/jruby/RubySchema.java,324,,"    @JRubyMethod(meta = true, name = {""t"", ""tuple""})"
214702,./TargetProjects/pig/src/org/apache/pig/scripting/jruby/RubySchema.java,340,,"    @JRubyMethod(meta = true, name = {""b"", ""bag""})"
214703,./TargetProjects/pig/src/org/apache/pig/scripting/jruby/RubySchema.java,356,,"    @JRubyMethod(meta = true, name = {""m"", ""map""})"
214704,./TargetProjects/pig/src/org/apache/pig/tools/grunt/GruntParser.java,692,,"                    throw new IOException(""Directory "" + path + "" does not exist."");"
214705,./TargetProjects/pig/src/org/apache/pig/tools/parameters/PreprocessorContext.java,348,,"                        message = ""Undefined parameter : "" + key;"
214706,./TargetProjects/pig/src/org/apache/pig/tools/pigstats/tez/TezDAGStats.java,326,,"            sb.append(String.format(""%1$40s: %2$-100s%n"", ""Name"","
214707,./TargetProjects/pig/src/org/apache/pig/tools/pigstats/tez/TezPigScriptStats.java,129,,"        sb.append(String.format(""%1$20s: %2$-100s%n"", ""HadoopVersion"", getHadoopVersion()));"
214708,./TargetProjects/pig/src/org/apache/pig/tools/pigstats/tez/TezVertexStats.java,118,,"        sb.append(String.format(""%14s "", numInputRecords));"
214709,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloPigCluster.java,52,,"    @SuppressWarnings(""unchecked"")"
214710,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloPigCluster.java,55,,"                    ImmutableMap.of(""code"", ""SJC"", ""name"", ""San Jose""),"
214711,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloPigCluster.java,55,,"                    ImmutableMap.of(""code"", ""SJC"", ""name"", ""San Jose""),"
214712,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloPigCluster.java,55,,"                    ImmutableMap.of(""code"", ""SJC"", ""name"", ""San Jose""),"
214713,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloPigCluster.java,66,,"                    ImmutableMap.of(""origin"", ""BWI"", ""destination"", ""SFO""),"
214714,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloPigCluster.java,66,,"                    ImmutableMap.of(""origin"", ""BWI"", ""destination"", ""SFO""),"
214715,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,51,,"        t.set(0, ""row"");"
214716,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,64,,"        t.set(1, ""value"");"
214717,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,83,,"        AccumuloStorage storage = new AccumuloStorage(""col"");"
214718,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,95,,"        Assert.assertTrue(""Rows not equal"","
214719,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,102,,"        Assert.assertTrue(""CF not equal"","
214720,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,104,,"        Assert.assertTrue(""CQ not equal"","
214721,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,106,,"        Assert.assertTrue(""Values not equal"","
214722,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,148,,"        t.set(1, ""value1"");"
214723,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,149,,"        t.set(2, ""value2"");"
214724,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,150,,"        t.set(3, ""value3"");"
214725,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,167,,"                Arrays.equals(colUpdate.getColumnFamily(), ""col1"".getBytes()));"
214726,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,183,,"                Arrays.equals(colUpdate.getColumnFamily(), ""col2"".getBytes()));"
214727,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,235,,"        map.put(""mapcol1"", ""mapval1"");"
214728,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,235,,"        map.put(""mapcol1"", ""mapval1"");"
214729,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,236,,"        map.put(""mapcol2"", ""mapval2"");"
214730,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,236,,"        map.put(""mapcol2"", ""mapval2"");"
214731,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,237,,"        map.put(""mapcol3"", ""mapval3"");"
214732,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,237,,"        map.put(""mapcol3"", ""mapval3"");"
214733,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,238,,"        map.put(""mapcol4"", ""mapval4"");"
214734,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,238,,"        map.put(""mapcol4"", ""mapval4"");"
214735,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,357,,"        Assert.assertTrue(""Did not find all expectations"","
214736,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,542,,"        keys.add(new Key(""1"", ""col1"", ""cq1""));"
214737,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,543,,"        keys.add(new Key(""1"", ""col1"", ""cq2""));"
214738,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,544,,"        keys.add(new Key(""1"", ""col1"", ""cq3""));"
214739,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,560,,"        map.put(""col1:cq1"", new DataByteArray(""value1""));"
214740,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,561,,"        map.put(""col1:cq2"", new DataByteArray(""value2""));"
214741,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,562,,"        map.put(""col1:cq3"", new DataByteArray(""value3""));"
214742,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorage.java,579,,"        keys.add(new Key(""1"", ""col3"", ""cq1""));"
214743,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,43,,"        original.set(""string1"", ""value1"");"
214744,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,45,,"        original.set(""string3"", ""value3"");"
214745,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,46,,"        original.setBoolean(""boolean"", true);"
214746,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,47,,"        original.setLong(""long"", 10);"
214747,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,48,,"        original.setInt(""integer"", 20);"
214748,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,70,,"        entriesToUnset.put(""string1"", ""foo"");"
214749,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/accumulo/TestAccumuloStorageConfiguration.java,71,,"        entriesToUnset.put(""string3"", ""bar"");"
214750,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/hbase/TestHBaseStorageFiltering.java,106,,"        assertFamilyFilter(childFilters.get(0), CompareFilter.CompareOp.EQUAL, ""cf1"");"
214751,./TargetProjects/pig/test/org/apache/pig/backend/hadoop/hbase/TestHBaseStorageFiltering.java,139,,"            assertEquals(""cf2"", Bytes.toString(secondFamilyFilter.getComparator().getValue()));"
214752,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,98,,"        ""records"","
214753,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,166,,"            schema = basedir + ""schema/"" + fn + "".avsc"";"
214754,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,166,,"            schema = basedir + ""schema/"" + fn + "".avsc"";"
214755,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,167,,"            json = basedir + ""data/json/"" + fn + "".json"";"
214756,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,167,,"            json = basedir + ""data/json/"" + fn + "".json"";"
214757,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,168,,"            avro = basedir + ""data/avro/uncompressed/"" + fn + "".avro"";"
214758,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,169,,"            LOG.info(""creating "" + avro);"
214759,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,214,,"        avro = basedir + ""data/avro/uncompressed/testDirectoryCounts.avro"";"
214760,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,247,,"            LOG.info(""Deleting "" + basedir + fn);"
214761,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,337,,"              ""INFILE"",             input,"
214762,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,338,,"              ""AVROSTORAGE_OUT_2"", ""-f "" + basedir + ""schema/recordsOfStringArrays.avsc"","
214763,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,338,,"              ""AVROSTORAGE_OUT_2"", ""-f "" + basedir + ""schema/recordsOfStringArrays.avsc"","
214764,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,339,,"              ""OUTFILE"",            createOutputName())"
214765,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,346,,"      final String input = basedir + ""data/avro/uncompressed/records.avro"";"
214766,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,347,,"      final String check = basedir + ""data/avro/uncompressed/recordsAsOutputByPig.avro"";"
214767,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,348,,"      testAvroStorage(true, basedir + ""code/pig/identity_ao2.pig"","
214768,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,351,,"              ""AVROSTORAGE_OUT_1"", ""records"","
214769,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,352,,"              ""AVROSTORAGE_OUT_2"", ""-n org.apache.pig.test.builtin"","
214770,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,366,,"                 ""AVROSTORAGE_OUT_2"", ""-n org.apache.pig.test.builtin -f "" + basedir + ""schema/recordsSubSchema.avsc"","
214771,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,393,,"                        ""AVROSTORAGE_IN_2"",  ""-f "" + basedir + ""schema/records.avsc"","
214772,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,464,,"      final String check = basedir + ""data/avro/uncompressed/recordsSubSchema.avro"";"
214773,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,508,,"      testAvroStorage(true, basedir + ""code/pig/identity_just_ao2.pig"","
214774,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,700,,"      final String input = basedir + ""data/avro/uncompressed/recordWithRepeatedSubRecords.avro"";"
214775,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,728,,"      testAvroStorage(true, basedir + ""code/pig/directory_test.pig"","
214776,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,731,,"              ""AVROSTORAGE_OUT_1"", ""stats"","
214777,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,930,,"        tm.put(new Utf8(""foo""), ""foo"");"
214778,./TargetProjects/pig/test/org/apache/pig/builtin/TestAvroStorage.java,931,,"        tm.put(new Utf8(""bar""), ""bar"");"
214779,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStorage.java,135,,"        pigServer.registerQuery(""A = load '"" + basedir + ""*-file-11-format.orc'"" + "" using OrcStorage();"");"
214780,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStorage.java,135,,"        pigServer.registerQuery(""A = load '"" + basedir + ""*-file-11-format.orc'"" + "" using OrcStorage();"");"
214781,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStorage.java,227,,"        pigServer.registerQuery(""A = load '"" + OUTPUT1 + ""' using OrcStorage();"");"
214782,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStorage.java,270,,"        pigServer.registerQuery(""store A into '"" + OUTPUT1 + ""' using OrcStorage();"");"
214783,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,88,,"        Util.copyFromLocalToCluster(cluster, basedir + ""charvarchar.orc"", basedir + ""charvarchar.orc"");"
214784,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,221,,"        String q = query + ""b = filter a by srcid == 10;"" + ""store b into 'out';"";"
214785,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,222,,"        Expression expr = getExpressionForTest(q, Arrays.asList(""srcid""));"
214786,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,224,,"        assertEqualsSarg(sarg, ""leaf-0 = (EQUALS srcid 10)"","
214787,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,225,,"                ""expr = leaf-0"");"
214788,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,231,,"        Expression expr = getExpressionForTest(q, Arrays.asList(""srcid"", ""dstid"", ""name"", ""mrkt""));"
214789,./TargetProjects/pig/test/org/apache/pig/builtin/TestOrcStoragePushdown.java,362,,"        pigServer_disabledRule.registerQuery(""B = load '"" + INPUT + ""' using OrcStorage();"");"
214790,./TargetProjects/pig/test/org/apache/pig/builtin/TestPluckTuple.java,50,,"                       ""c = join a by x, b by x;"" +"
214791,./TargetProjects/pig/test/org/apache/pig/builtin/TestPluckTuple.java,52,,"                       ""d = foreach c generate flatten(pluck(*));"";"
214792,./TargetProjects/pig/test/org/apache/pig/builtin/TestPluckTuple.java,94,,"        Tuple exp1 = tuple(1, ""hey"", 2L);"
214793,./TargetProjects/pig/test/org/apache/pig/builtin/TestPluckTuple.java,95,,"        Tuple exp2 = tuple(2, ""woah"", 3L);"
214794,./TargetProjects/pig/test/org/apache/pig/builtin/TestPluckTuple.java,98,,"            Utils.getSchemaFromString(""x:int,y:chararray,z:long""),"
214795,./TargetProjects/pig/test/org/apache/pig/builtin/TestSUBTRACT.java,43,,"        input.set(0, bag(tuple(""item1""), tuple(""item2""), tuple(""item3"")));"
214796,./TargetProjects/pig/test/org/apache/pig/builtin/TestSUBTRACT.java,43,,"        input.set(0, bag(tuple(""item1""), tuple(""item2""), tuple(""item3"")));"
214797,./TargetProjects/pig/test/org/apache/pig/builtin/TestSUBTRACT.java,43,,"        input.set(0, bag(tuple(""item1""), tuple(""item2""), tuple(""item3"")));"
214798,./TargetProjects/pig/test/org/apache/pig/builtin/TestSUBTRACT.java,44,,"        input.set(1, bag(tuple(""item1""), tuple(""item4""), tuple(""item5"")));"
214799,./TargetProjects/pig/test/org/apache/pig/builtin/TestTOMAP.java,48,,"        data.set(""foo"","
214800,./TargetProjects/pig/test/org/apache/pig/builtin/TestTOMAP.java,57,,"        List<Tuple> out = data.get(""bar"");"
214801,./TargetProjects/pig/test/org/apache/pig/builtin/TestTOP.java,68,,"        TOP top = new TOP(""DESC"");"
214802,./TargetProjects/pig/test/org/apache/pig/builtin/TestTOP.java,73,,"        top = new TOP(""ASC"");"
214803,./TargetProjects/pig/test/org/apache/pig/data/TestSchemaTuple.java,119,,"                + ""boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean,"""
214804,./TargetProjects/pig/test/org/apache/pig/data/TestSchemaTuple.java,134,,"                ""int, long, chararray, boolean, bytearray, float, double, datetime, bigdecimal, biginteger,"""
214805,./TargetProjects/pig/test/org/apache/pig/data/TestSchemaTuple.java,135,,"                +""(int, long, chararray, boolean, bytearray, float, double, datetime, bigdecimal, biginteger,"""
214806,./TargetProjects/pig/test/org/apache/pig/data/TestSchemaTuple.java,136,,"                +""(int, long, chararray, boolean, bytearray, float, double, datetime, bigdecimal, biginteger)),"""
214807,./TargetProjects/pig/test/org/apache/pig/data/TestSchemaTuple.java,507,,"        File temp = File.createTempFile(""tmp"", ""tmp"");"
214808,./TargetProjects/pig/test/org/apache/pig/impl/builtin/TestStreamingUDF.java,85,,"                ""from pig_util import outputSchema"","
214809,./TargetProjects/pig/test/org/apache/pig/impl/streaming/TestPigStreamingUDF.java,114,,"        t.set(1, ""sam"");"
214810,./TargetProjects/pig/test/org/apache/pig/newplan/logical/optimizer/TestImplicitSplitOnTuple.java,41,,"                tuple(""1"", ""1001"", ""101""),"
214811,./TargetProjects/pig/test/org/apache/pig/newplan/logical/optimizer/TestSchemaResetter.java,50,,"                ""    group.uid AS src_id,"","
214812,./TargetProjects/pig/test/org/apache/pig/newplan/logical/optimizer/TestSchemaResetter.java,51,,"                ""    group.dst_id AS dst_id;"","
214813,./TargetProjects/pig/test/org/apache/pig/parser/TestColumnAliasConversion.java,44,,"                       ""C = store B into 'output';"";"
214814,./TargetProjects/pig/test/org/apache/pig/parser/TestColumnAliasConversion.java,50,,"        String query = ""A = load 'x' as ( u:bag{tuple(x, y)}, v:long, w:bytearray); "" + "
214815,./TargetProjects/pig/test/org/apache/pig/parser/TestColumnAliasConversion.java,107,,"        Assert.fail( ""Query should fail to validate."" );"
214816,./TargetProjects/pig/test/org/apache/pig/parser/TestErrorHandling.java,52,,"        Assert.fail( ""Testcase should fail"" );"
214817,./TargetProjects/pig/test/org/apache/pig/parser/TestErrorHandling.java,281,,"        String failMsg = ""Duplicated alias in schema"";"
214818,./TargetProjects/pig/test/org/apache/pig/parser/TestLogicalPlanGenerator.java,73,,"        String query = ""A = load 'x' as ( u:int, v:long, w:bytearray); "" +"
214819,./TargetProjects/pig/test/org/apache/pig/parser/TestLogicalPlanGenerator.java,137,,"                       ""store B into 'y';"";"
214820,./TargetProjects/pig/test/org/apache/pig/parser/TestLogicalPlanGenerator.java,160,,"        String query = ""A = load 'x' as ( a : bag{ T:tuple(u, v) }, c : int, d : long );"" +"
214821,./TargetProjects/pig/test/org/apache/pig/parser/TestLogicalPlanGenerator.java,319,,"      	String query = ""a = load 'input' as (x:chararray,y:chararray,z:long);"""
214822,./TargetProjects/pig/test/org/apache/pig/parser/TestQueryParser.java,181,,"    	String query = ""x = load 'cubedata' as (a, b, c, d); "" +"
214823,./TargetProjects/pig/test/org/apache/pig/parser/TestQueryParser.java,442,,"        String query = ""A = load 'data' as (x:int, y:chararray, z:int, rz:chararray);"";"
214824,./TargetProjects/pig/test/org/apache/pig/parser/TestQueryParserUtils.java,134,,"            throw new RuntimeException(""Should not be called"");"
214825,./TargetProjects/pig/test/org/apache/pig/parser/TestScalarVisitor.java,41,,"                       ""D = store C into 'output';"";"
214826,./TargetProjects/pig/test/org/apache/pig/parser/TestUnionOnSchemaSetter.java,36,,"                       ""C = union onschema A, B; "" +"
214827,./TargetProjects/pig/test/org/apache/pig/parser/TestUnionOnSchemaSetter.java,37,,"                       ""D = store C into 'output';"";"
214828,./TargetProjects/pig/test/org/apache/pig/parser/TestUnionOnSchemaSetter.java,43,,"            System.out.println( ""Plan after setter: "" + plan.toString() );"
214829,./TargetProjects/pig/test/org/apache/pig/spark/TestIndexedKey.java,44,,"        IndexedKey a0 = new IndexedKey(new Byte(""0""), ""foo"");"
214830,./TargetProjects/pig/test/org/apache/pig/test/MiniGenericCluster.java,61,,"            String execType = System.getProperty(""test.exec.type"");"
214831,./TargetProjects/pig/test/org/apache/pig/test/OptimizeLimitPlanPrinter.java,158,,"        sb.append("";\n"");"
214832,./TargetProjects/pig/test/org/apache/pig/test/TestAccumulator.java,152,,"        pigServer.registerQuery(""A = load '"" + INPUT_FILE1 + ""' as (id:int, fruit);"");"
214833,./TargetProjects/pig/test/org/apache/pig/test/TestAccumulator.java,152,,"        pigServer.registerQuery(""A = load '"" + INPUT_FILE1 + ""' as (id:int, fruit);"");"
214834,./TargetProjects/pig/test/org/apache/pig/test/TestAccumulator.java,153,,"        pigServer.registerQuery(""B = group A by id;"");"
214835,./TargetProjects/pig/test/org/apache/pig/test/TestAccumulator.java,170,,"        pigServer.registerQuery(""C = foreach B generate group,  "" +"
214836,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEval.java,64,,"        File tmpFile = File.createTempFile(""test"", ""txt"");"
214837,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEval.java,64,,"        File tmpFile = File.createTempFile(""test"", ""txt"");"
214838,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEval.java,66,,"            System.out.println(""Running testGroupCountWithMultipleFields with nullFlags set to "" + nullFlags[k]);"
214839,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEval.java,153,,"            Iterator<Tuple> it = pig.openIterator(""myid"");"
214840,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEval.java,157,,"            assertEquals(this.getClass().getName() + ""with nullFlags set to: """
214841,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEval.java,170,,"            String query = ""myid = foreach (group (load '"""
214842,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEvalLocal.java,51,,"        File tmpFile = File.createTempFile(""test"", ""txt"");"
214843,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEvalLocal.java,51,,"        File tmpFile = File.createTempFile(""test"", ""txt"");"
214844,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEvalLocal.java,53,,"            System.err.println(""Running testGroupCountWithMultipleFields with nullFlags set to "" + nullFlags[k]);"
214845,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEvalLocal.java,147,,"            Iterator<Tuple> it = pig.openIterator(""myid"");"
214846,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEvalLocal.java,151,,"            assertEquals(this.getClass().getName() + ""with nullFlags set to: """
214847,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicEvalLocal.java,164,,"            String query = ""myid = foreach (group (load '"""
214848,./TargetProjects/pig/test/org/apache/pig/test/TestAlgebraicInstantiation.java,69,,"        assertEquals(""no-args"", tupIter.next().toDelimitedString("",""));"
214849,./TargetProjects/pig/test/org/apache/pig/test/TestAssert.java,48,,"      data.set(""foo"","
214850,./TargetProjects/pig/test/org/apache/pig/test/TestAssert.java,55,,"      pigServer.registerQuery(""A = LOAD 'foo' USING mock.Storage() AS (i:int);"");"
214851,./TargetProjects/pig/test/org/apache/pig/test/TestAutoLocalMode.java,125,,"                        .getPigContext()) + ""' AS (num:int);"");"
214852,./TargetProjects/pig/test/org/apache/pig/test/TestBZip.java,101,,"        File in = folder.newFile(""junit-in.bz2"");"
214853,./TargetProjects/pig/test/org/apache/pig/test/TestBZip.java,210,,"                ""1\t2\r3\t4"", // '\r' case - this will be split into two tuples"
214854,./TargetProjects/pig/test/org/apache/pig/test/TestBZip.java,239,,"            String script =""a = load '"" + Util.encodeEscape(clusterCompressedFilePath) +""';"";"
214855,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,242,,"            pigServer.registerQuery(""A = LOAD '"" + inputFile + ""' as (x:float, y);"");"
214856,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,243,,"            pigServer.registerQuery(""B = FOREACH A generate x, "" + UDF3.class.getName() + ""(x,y);"");"
214857,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,243,,"            pigServer.registerQuery(""B = FOREACH A generate x, "" + UDF3.class.getName() + ""(x,y);"");"
214858,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,249,,"            assertTrue(msg.contains(""Multiple matching functions""));"
214859,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,261,,"        pigServer.registerQuery(""A = LOAD '"" + inputFile + ""' as (x, y:int);"");"
214860,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,264,,"        assertTrue(""No Output received"", iter.hasNext());"
214861,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,329,,"                    + ""(x,y, y);"");"
214862,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,390,,"        pigServer.registerQuery(""B = FOREACH A generate x, "" + UDF3.class.getName() + ""(x,y,z);"");"
214863,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,530,,"        pigServer.registerQuery(""B = group A all;"");"
214864,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,531,,"        pigServer.registerQuery(""C = FOREACH B generate SUM(A.y);"");"
214865,./TargetProjects/pig/test/org/apache/pig/test/TestBestFitCast.java,642,,"        pigServer.registerQuery(""A = LOAD '"" + inputFile + ""' as (x:long, y:int);"");"
214866,./TargetProjects/pig/test/org/apache/pig/test/TestBlackAndWhitelistValidator.java,80,,"            data.set(""foo"", tuple(""a"", 1, ""b""), tuple(""b"", 2, ""c""),"
214867,./TargetProjects/pig/test/org/apache/pig/test/TestBlackAndWhitelistValidator.java,84,,"            script.append(""set io.sort.mb 1000;"")"
214868,./TargetProjects/pig/test/org/apache/pig/test/TestBlackAndWhitelistValidator.java,85,,"                    .append(""A = LOAD 'foo' USING mock.Storage() AS (f1:chararray,f2:int,f3:chararray);"")"
214869,./TargetProjects/pig/test/org/apache/pig/test/TestBlackAndWhitelistValidator.java,86,,"                    .append(""B = order A by f1,f2,f3 DESC;"")"
214870,./TargetProjects/pig/test/org/apache/pig/test/TestBlackAndWhitelistValidator.java,87,,"                    .append(""STORE B INTO 'bar' USING mock.Storage();"");"
214871,./TargetProjects/pig/test/org/apache/pig/test/TestBlackAndWhitelistValidator.java,296,,"            LogicalPlan plan = generateLogicalPlan(""foo"", ""bar"", ctx.getDfs());"
214872,./TargetProjects/pig/test/org/apache/pig/test/TestBloom.java,67,,"        String size = ""100"";"
214873,./TargetProjects/pig/test/org/apache/pig/test/TestBloom.java,71,,"            BuildBloom bb = new BuildBloom(hashFunc, ""fixed"", size, numHash);"
214874,./TargetProjects/pig/test/org/apache/pig/test/TestBloom.java,110,,"        Bloom bloom = new Bloom(""bla"");"
214875,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,190,,"		assertEquals(""schema of BagToTuple input"", expectedSch.size(),"
214876,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,412,,"		data.set(""foo"", ""myBag:bag{t:(l:chararray)}"","
214877,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,412,,"		data.set(""foo"", ""myBag:bag{t:(l:chararray)}"","
214878,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,414,,"		pigServer.registerQuery(""A = LOAD 'foo' USING mock.Storage();"");"
214879,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,415,,"		pigServer.registerQuery(""B = FOREACH A GENERATE BagToTuple(myBag) as myBag;"");"
214880,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,416,,"	    pigServer.registerQuery(""STORE B INTO 'bar' USING mock.Storage();"");"
214881,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,418,,"	    assertEquals(schema(""myBag:()""), data.getSchema(""bar""));"
214882,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltInBagToTupleOrString.java,494,,"		pigServer.registerQuery(""B = FOREACH A GENERATE BagToString(myBag) as myBag;"");"
214883,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,207,,"    String[] stages = {""Initial"", ""Intermediate"", ""Final""};"
214884,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,207,,"    String[] stages = {""Initial"", ""Intermediate"", ""Final""};"
214885,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,207,,"    String[] stages = {""Initial"", ""Intermediate"", ""Final""};"
214886,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214887,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214888,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214889,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214890,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214891,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214892,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,210,,"            {""SUM"", ""IntSum"", ""LongSum"", ""FloatSum"", ""DoubleSum"", ""BigDecimalSum"", ""BigIntegerSum""},"
214893,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,211,,"            {""AVG"", ""IntAvg"", ""LongAvg"", ""FloatAvg"", ""DoubleAvg"", ""BigDecimalAvg"", ""BigIntegerAvg""},"
214894,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,211,,"            {""AVG"", ""IntAvg"", ""LongAvg"", ""FloatAvg"", ""DoubleAvg"", ""BigDecimalAvg"", ""BigIntegerAvg""},"
214895,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,211,,"            {""AVG"", ""IntAvg"", ""LongAvg"", ""FloatAvg"", ""DoubleAvg"", ""BigDecimalAvg"", ""BigIntegerAvg""},"
214896,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214897,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214898,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214899,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214900,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214901,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214902,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214903,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,212,,"            {""MIN"", ""IntMin"", ""LongMin"", ""FloatMin"", ""DoubleMin"", ""BigDecimalMin"", ""BigIntegerMin"",""StringMin"", ""DateTimeMin""},"
214904,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214905,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214906,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214907,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214908,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214909,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214910,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214911,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,213,,"            {""MAX"", ""IntMax"", ""LongMax"", ""FloatMax"", ""DoubleMax"", ""BigDecimalMax"", ""BigIntegerMax"",""StringMax"", ""DateTimeMax""},"
214912,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214913,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214914,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214915,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214916,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214917,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214918,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214919,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214920,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,217,,"    String[] inputTypeAsString = {""ByteArray"", ""Integer"", ""Long"", ""Float"", ""Double"", ""BigDecimal"", ""BigInteger"", ""String"", ""DateTime""};"
214921,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,312,,"                            allowedInput.put(agg + stage, ""IntegerAsLong"");"
214922,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,409,,"        t1.set(0, new DateTime(""2009-01-07T01:07:01.000Z""));"
214923,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,466,,"        t3.set(0, ""2009-01-07T01:07:01.000+08:00"");"
214924,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,468,,"        assertEquals(dt3.compareTo(new DateTime(""2009-01-07T01:07:01.000+08:00"", DateTimeZone.forID(""+08:00""))), 0);"
214925,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,606,,"                String msg = ""[Testing "" + aggGroup[k] + "" on input type: "" + getInputType(aggFinalTypes[k]);"
214926,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,606,,"                String msg = ""[Testing "" + aggGroup[k] + "" on input type: "" + getInputType(aggFinalTypes[k]);"
214927,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,609,,"                msg += "" ( (output) "" + output + "" == "" + getExpected(aggFinalTypes[k]) + "" (expected) )]"";"
214928,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,609,,"                msg += "" ( (output) "" + output + "" == "" + getExpected(aggFinalTypes[k]) + "" (expected) )]"";"
214929,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,609,,"                msg += "" ( (output) "" + output + "" == "" + getExpected(aggFinalTypes[k]) + "" (expected) )]"";"
214930,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1195,,"             pigServer.registerQuery(""=> load '"" + Util.encodeEscape(inputFile.getAbsolutePath()) + ""';"");"
214931,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1196,,"             pigServer.registerQuery(""=> group @ all;"");"
214932,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1200,,"             Assert.fail(""Query is in accordance with schema, still it failed to execute"");"
214933,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1230,,"        File inputFile = Util.createInputFile(""tmp"", inputFileName, inputData);"
214934,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1272,,"             pigServer.registerQuery(""=> load '"" + Util.encodeEscape(inputFile.getAbsolutePath()) + ""' as (data:chararray);"");"
214935,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1750,,"        tup.set(0,   3.25d);   tup.set(1, 1); expected =  ""3.2"";      dbl_out = rounder.exec(tup); assertEquals(expected, dbl_out.toString());"
214936,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1751,,"        tup.set(0,  -3.25d);   tup.set(1, 1); expected = ""-3.2"";      dbl_out = rounder.exec(tup); assertEquals(expected, dbl_out.toString());"
214937,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1885,,"        test2.set(0, ""foo"");"
214938,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,1951,,"        func = new REGEX_EXTRACT(""true"");"
214939,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,2627,,"        Util.createInputFile(cluster, ""input.txt"", new String[]"
214940,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,2717,,"        DataByteArray[] input = { new DataByteArray(""amy""),"
214941,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,2935,,"        m.put(""open"", ""apache"");"
214942,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,2935,,"        m.put(""open"", ""apache"");"
214943,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,2936,,"        m.put(""1"", ""hadoop"");"
214944,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,2937,,"        m.put(""source"", ""code"");"
214945,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,3250,,"        Util.createInputFile(cluster, TMP_DIR + ""/input1.txt"", new String[] {""1\n2\n3\n4\n5""});"
214946,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,3250,,"        Util.createInputFile(cluster, TMP_DIR + ""/input1.txt"", new String[] {""1\n2\n3\n4\n5""});"
214947,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltin.java,3251,,"        Util.createInputFile(cluster, TMP_DIR + ""/input2.txt"", new String[] {""1\n2\n3\n4\n5""});"
214948,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltinInvoker.java,72,,"        pigServer.registerQuery(""store b into 'res' using mock.Storage();"");"
214949,./TargetProjects/pig/test/org/apache/pig/test/TestBuiltinInvoker.java,73,,"        List<Tuple> results = data.get(""res"");"
214950,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,46,,"        data.set(""foo"","
214951,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,56,,"        pigServer.registerQuery(""A = LOAD 'foo' USING mock.Storage() AS (i:int);"");"
214952,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,57,,"        pigServer.registerQuery(""B = FOREACH A GENERATE i, ("" +"
214953,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,63,,"                ""  END"" +"
214954,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,68,,"        List<Tuple> out = data.get(""bar"");"
214955,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,70,,"        assertEquals(tuple(1,""5n+1""), out.get(0));"
214956,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,71,,"        assertEquals(tuple(2,""5n+2""), out.get(1));"
214957,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,106,,"        pigServer.registerQuery(""STORE B INTO 'bar' USING mock.Storage();"");"
214958,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,110,,"        assertEquals(tuple(1,""4n+1""), out.get(0));"
214959,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,111,,"        assertEquals(tuple(2,""4n+2""), out.get(1));"
214960,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,112,,"        assertEquals(tuple(3,""4n+3""), out.get(2));"
214961,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,140,,"                ""  CASE "" +"
214962,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,264,,"                ""    WHEN 1 THEN '3n+1'"" +"
214963,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,265,,"                ""    ELSE        '3n+2'"" +"
214964,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,301,,"        pigServer.registerQuery(""B = FOREACH A GENERATE ("" +"
214965,./TargetProjects/pig/test/org/apache/pig/test/TestCase.java,309,,"        fail(""FrontendException must be thrown for invalid case statement"");"
214966,./TargetProjects/pig/test/org/apache/pig/test/TestCmdLineParser.java,34,,"            p.registerOpt('-', ""alpha"", CmdLineParser.ValueExpected.NOT_ACCEPTED);"
214967,./TargetProjects/pig/test/org/apache/pig/test/TestCmdLineParser.java,48,,"            p.registerOpt('a', ""beta"", CmdLineParser.ValueExpected.NOT_ACCEPTED);"
214968,./TargetProjects/pig/test/org/apache/pig/test/TestCmdLineParser.java,100,,"        String[] args = { ""-a"", ""--beta"", ""beth"", ""--c"" };"
214969,./TargetProjects/pig/test/org/apache/pig/test/TestCmdLineParser.java,100,,"        String[] args = { ""-a"", ""--beta"", ""beth"", ""--c"" };"
214970,./TargetProjects/pig/test/org/apache/pig/test/TestCmdLineParser.java,116,,"        String[] args = { ""-a"", ""--beta"", ""beth"", ""--c"", ""gimel"", ""-"", ""hi"", ""i'm"", ""left"","
214971,./TargetProjects/pig/test/org/apache/pig/test/TestCmdLineParser.java,171,,"        String[] args = { ""-a"", ""aleph"" };"
214972,./TargetProjects/pig/test/org/apache/pig/test/TestCollectedGroup.java,91,,"        String query = ""A = LOAD '"" + INPUT_FILE + ""' as (id, name, grade);"" +"
214973,./TargetProjects/pig/test/org/apache/pig/test/TestCollectedGroup.java,91,,"        String query = ""A = LOAD '"" + INPUT_FILE + ""' as (id, name, grade);"" +"
214974,./TargetProjects/pig/test/org/apache/pig/test/TestCollectedGroup.java,192,,"        pigServer.registerQuery(""A = LOAD '"" + INPUT_FILE + ""' using ""+DummyCollectableLoader.class.getName() +""() as (id, name, grade);"");"
214975,./TargetProjects/pig/test/org/apache/pig/test/TestCollectedGroup.java,192,,"        pigServer.registerQuery(""A = LOAD '"" + INPUT_FILE + ""' using ""+DummyCollectableLoader.class.getName() +""() as (id, name, grade);"");"
214976,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,178,,"        String oldValue = properties.getProperty(""io.sort.mb"");"
214977,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,220,,"                        ""pig1\t18\t2.1"","
214978,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,221,,"                        ""pig2\t24\t3.3"","
214979,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,222,,"                        ""pig5\t45\t2.4"","
214980,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,224,,"                        ""pig1\t19\t2.1"","
214981,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,225,,"                        ""pig2\t24\t4.5"","
214982,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,226,,"                        ""pig1\t20\t3.1"" };"
214983,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,231,,"        pigServer.registerQuery(""b = group a by name;"");"
214984,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,232,,"        pigServer.registerQuery(""c = foreach b  {"" +"
214985,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,246,,"        results.put(""pig1"", new Object[] { ""pig1"", 3L, 57L, 5.2, 75L, 9.4, 3L, 3L, 57L });"
214986,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,247,,"        results.put(""pig2"", new Object[] { ""pig2"", 1L, 24L, 7.8, 48L, 7.8, 2L, 2L, 48L });"
214987,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,248,,"        results.put(""pig5"", new Object[] { ""pig5"", 1L, 45L, 2.4, 45L, 2.4, 1L, 1L, 45L });"
214988,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,422,,"            combinerFound = baos.toString().matches(""(?si).*combine plan.*"");"
214989,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,458,,"        results.put(""pig1"", new Object[] { ""pig1"", ""bag-place-holder"", 75L, 9.4 });"
214990,./TargetProjects/pig/test/org/apache/pig/test/TestCombiner.java,494,,"        Util.createInputFile(cluster, ""forEachNoCombinerInput.txt"", input);"
214991,./TargetProjects/pig/test/org/apache/pig/test/TestConstantCalculator.java,70,,"                       ""store b into 'empty';"","
214992,./TargetProjects/pig/test/org/apache/pig/test/TestConversions.java,444,,"        assertNull(""Invalid cast to int: "" + tuple.get(0) + "" -> "" + convertedTuple.get(0), convertedTuple.get(0));"
214993,./TargetProjects/pig/test/org/apache/pig/test/TestConversions.java,444,,"        assertNull(""Invalid cast to int: "" + tuple.get(0) + "" -> "" + convertedTuple.get(0), convertedTuple.get(0));"
214994,./TargetProjects/pig/test/org/apache/pig/test/TestCounters.java,74,,"        pigServer.registerQuery(""a = load '"" + file + ""';"");"
214995,./TargetProjects/pig/test/org/apache/pig/test/TestCounters.java,77,,"        ExecJob job = pigServer.store(""c"", ""output_map_only"");"
214996,./TargetProjects/pig/test/org/apache/pig/test/TestCounters.java,94,,"        System.out.println(""============================================"");"
214997,./TargetProjects/pig/test/org/apache/pig/test/TestCounters.java,103,,"            System.out.println(""Map input records : "" + js.getMapInputRecords());"
214998,./TargetProjects/pig/test/org/apache/pig/test/TestCounters.java,105,,"            System.out.println(""Map output records : "" + js.getMapOutputRecords());"
214999,./TargetProjects/pig/test/org/apache/pig/test/TestCounters.java,109,,"            System.out.println(""Hdfs bytes written : "" + js.getHdfsBytesWritten());"
