88000,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/ConnectionPoolImplJUnitTest.java,100,,"    PoolImpl pool = (PoolImpl) cpf.create(""myfriendlypool"");"
88001,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/QueueManagerJUnitTest.java,268,,"    ServerLocation sl = new ServerLocation(""localhost"", 1);"
88002,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java,115,,"    endpointManager = new EndpointManagerImpl(""pool"", ds, ds.getCancelCriterion(), poolStats);"
88003,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java,231,,"    ServerLocation server1 = new ServerLocation(""localhost"", 1);"
88004,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/mapInterface/ExceptionHandlingJUnitTest.java,83,,"      fail(""Nullpointer exception not thrown"");"
88005,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/mapInterface/MapFunctionalJUnitTest.java,75,,"    testRegion.put(""Test"", ""test"");"
88006,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/mapInterface/MapFunctionalJUnitTest.java,75,,"    testRegion.put(""Test"", ""test"");"
88007,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/mapInterface/MapFunctionalJUnitTest.java,83,,"    if (testRegion.containsValue(""test123"")) {"
88008,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/operations/PutOperationContextJUnitTest.java,42,,"          new PutOperationContext(""key"", byteArrayValue, false, PutOperationContext.CREATE, false);"
88009,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/operations/PutOperationContextJUnitTest.java,57,,"          new PutOperationContext(""key"", ""value"", true, PutOperationContext.CREATE, false);"
88010,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/operations/internal/GetOperationContextImplJUnitTest.java,39,,"      GetOperationContextImpl poc = new GetOperationContextImpl(""key"", true);"
88011,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/operations/internal/GetOperationContextImplJUnitTest.java,55,,"      poc.setObject(""value"", true);"
88012,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,47,,"  @SuppressWarnings(""unused"")"
88013,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,200,,"    queryService.createIndex(""pkidregion2"", ""p.pkid"", SEPARATOR + ""region2 p"");"
88014,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,218,,"      orderRegion.put(""orderId_"" + i, new Order(""orderId_"" + i, i));"
88015,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,220,,"          new ValidationIssue(""issueId_"" + i, Calendar.getInstance().getTime()));"
88016,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,221,,"      validationIssueXRefRegion.put(""validationIssueXRefID_"" + i, new OrderValidationIssueXRef("
88017,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,226,,"      orderRegion.put(""orderId#"" + i, new Order(""orderId#"" + i, i));"
88018,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,229,,"      validationIssueXRefRegion.put(""validationIssueXRefID#"" + i, new OrderValidationIssueXRef("
88019,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,252,,"          .writeString(""referenceIssueId"", ""issueId_"" + i)"
88020,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,301,,"        + ""AND """
88021,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/JoinQueriesIntegrationTest.java,312,,"        .setDataPolicy(DataPolicy.REPLICATE).create(""OrderValidationIssueXRef"");"
88022,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,66,,"  private String regName = ""exampleRegion"";"
88023,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,98,,"    Index index = queryService.createIndex(""index1"", ""secId"", SEPARATOR + ""exampleRegion"");"
88024,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,149,,"    PdxInstanceFactory pf = PdxInstanceFactoryImpl.newCreator(""Portfolio"", false, this.cache);"
88025,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,151,,"    pf.writeString(""secId"", ""IBM"");"
88026,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,152,,"    pf.writeString(""status"", ""active"");"
88027,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,152,,"    pf.writeString(""status"", ""active"");"
88028,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,154,,"    positions.put(""price"", ""50"");"
88029,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,156,,"    pf.writeObject(""positions"", positions);"
88030,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,164,,"    region.put(""YHOO"", new TestObject(222, ""YHOO"", positions, ""inactive""));"
88031,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,164,,"    region.put(""YHOO"", new TestObject(222, ""YHOO"", positions, ""inactive""));"
88032,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,168,,"    pf.writeString(""secId"", ""GOOGL"");"
88033,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,179,,"    region.put(""VMW"", new TestObject(111, ""VMW"", positions, ""inactive""));"
88034,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,261,,"        {""select secId from "" + SEPARATOR + ""exampleRegion where secId.toLowerCase()  = 'ibm'"","
88035,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,384,,"        ""select p.secId from "" + SEPARATOR"
88036,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,568,,"        ""select distinct secId from "" + SEPARATOR + ""exampleRegion where secId = 'VMW'""};"
88037,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/PdxStringQueryJUnitTest.java,580,,"        new String[] {""select distinct secId from "" + SEPARATOR + ""exampleRegion order by secId"","
88038,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryJUnitTest.java,77,,"    String queryStr = ""SELECT DISTINCT * FROM "" + SEPARATOR + ""root"";"
88039,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryJUnitTest.java,88,,"      Region region = CacheUtils.createRegion(""Portfolios"", Portfolio.class);"
88040,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryJUnitTest.java,178,,"            ""select distinct * from "" + SEPARATOR"
88041,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryJUnitTest.java,210,,"        {SEPARATOR + ""Portfolios""}, {SEPARATOR + ""Portfolios""}, {}, {SEPARATOR + ""Employees""},"
88042,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryJUnitTest.java,256,,"      fail(""Query execution failed "" + e);"
88043,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,47,,"    Region region = CacheUtils.createRegion(""Portfolios"", Portfolio.class);"
88044,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,79,,"        ""SELECT * FROM "" + SEPARATOR + ""Portfolios WHERE createDate >= to_date('"" + testDate"
88045,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,131,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""Portfolios"");"
88046,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,131,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""Portfolios"");"
88047,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,158,,"        {""status"", SEPARATOR + ""Portfolios p"", Boolean.TRUE},"
88048,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,167,,"        {""p.status"", SEPARATOR + ""Portfolios p"", Boolean.TRUE},"
88049,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceJUnitTest.java,253,,"    CacheUtils.createRegion(""Ptfs"", Portfolio.class);"
88050,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java,76,,"    region = cache.createRegion(""pos"", regionAttributes);"
88051,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java,127,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR + ""pos where NOT(SELECT DISTINCT * FROM "" + SEPARATOR"
88052,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java,417,,"            return ""blah"";"
88053,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java,466,,"    qs.createIndex(""valueIndex"", IndexType.FUNCTIONAL, ""e.value"", SEPARATOR + ""pr1 e"");"
88054,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java,466,,"    qs.createIndex(""valueIndex"", IndexType.FUNCTIONAL, ""e.value"", SEPARATOR + ""pr1 e"");"
88055,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/RegionJUnitTest.java,69,,"    results = region.query(""SELECT * FROM "" + SEPARATOR + ""pos"");"
88056,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/RegionJUnitTest.java,99,,"      Query q = qs.newQuery(""select distinct * from "" + SEPARATOR + ""pos where "" + queries[i]);"
88057,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/TypedIteratorJUnitTest.java,48,,"        this.qs.newQuery(""SELECT DISTINCT * "" + ""FROM "" + SEPARATOR + ""pos "" + ""WHERE ID = 3 "");"
88058,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/TypedIteratorJUnitTest.java,64,,"        ""IMPORT org.apache.geode.cache.\""query\"".data.Portfolio;\n"" + ""SELECT DISTINCT *\n"""
88059,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ComparisonOperatorsJUnitTest.java,75,,"          qs.newQuery(""SELECT DISTINCT * FROM "" + SEPARATOR + ""Portfolios where "" + var"
88060,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ComparisonOperatorsJUnitTest.java,75,,"          qs.newQuery(""SELECT DISTINCT * FROM "" + SEPARATOR + ""Portfolios where "" + var"
88061,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ComparisonOperatorsJUnitTest.java,107,,"            fail(this.getName() + "" failed for operator "" + operators[i]);"
88062,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java,60,,"            .newQuery(""SELECT DISTINCT * FROM "" + SEPARATOR + ""Portfolios where TRUE"");"
88063,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,54,,"    String[] queries = new String[] {""select  p.status from "" + SEPARATOR + ""pos p where p.ID > 0 "","
88064,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,57,,"        ""select  p.status as sts, p as pos from "" + SEPARATOR"
88065,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,72,,"    qs.createIndex(""PortFolioID"", IndexType.FUNCTIONAL, ""ID"", SEPARATOR + ""pos"");"
88066,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,72,,"    qs.createIndex(""PortFolioID"", IndexType.FUNCTIONAL, ""ID"", SEPARATOR + ""pos"");"
88067,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,77,,"        new StructTypeImpl(new String[] {""sts"", ""pos""},"
88068,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,133,,"    qs.createIndex(""CreateTime"", IndexType.FUNCTIONAL, ""createTime"", SEPARATOR + ""pos"");"
88069,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,133,,"    qs.createIndex(""CreateTime"", IndexType.FUNCTIONAL, ""createTime"", SEPARATOR + ""pos"");"
88070,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,587,,"        ""select  distinct p.status  from "" + SEPARATOR"
88071,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,600,,"    qs.createIndex(""Status"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""pos"");"
88072,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,600,,"    qs.createIndex(""Status"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""pos"");"
88073,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,601,,"    qs.createIndex(""Type"", IndexType.FUNCTIONAL, ""\""type\"""", SEPARATOR + ""pos"");"
88074,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/CustomerOptimizationsJUnitTest.java,601,,"    qs.createIndex(""Type"", IndexType.FUNCTIONAL, ""\""type\"""", SEPARATOR + ""pos"");"
88075,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/DistinctResultsWithDupValuesInRegionJUnitTest.java,63,,"      ""select DISTINCT * from "" + SEPARATOR"
88076,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/DistinctResultsWithDupValuesInRegionJUnitTest.java,104,,"      fail(""Query "" + query1 + "" Execution Failed!"");"
88077,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/DistinctResultsWithDupValuesInRegionJUnitTest.java,104,,"      fail(""Query "" + query1 + "" Execution Failed!"");"
88078,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java,98,,"    q = qs.newQuery(""SELECT e.value FROM "" + SEPARATOR + ""pos.entrySet e WHERE e.key IN $1"");"
88079,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java,98,,"    q = qs.newQuery(""SELECT e.value FROM "" + SEPARATOR + ""pos.entrySet e WHERE e.key IN $1"");"
88080,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java,318,,"      customersRegion.put(i, new Customer(i, i % 2 == 0 ? ""PremiumIndividual"" : ""AverageJoe""));"
88081,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java,318,,"      customersRegion.put(i, new Customer(i, i % 2 == 0 ? ""PremiumIndividual"" : ""AverageJoe""));"
88082,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRCompositeIteratorJUnitTest.java,123,,"    qs.createIndex(""nameIndex"", IndexType.FUNCTIONAL, ""e.name"", SEPARATOR + ""employees e"");"
88083,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,72,,"    Region r1 = CacheUtils.createRegion(""portfolio1"", Portfolio.class);"
88084,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,77,,"    Region r2 = CacheUtils.createRegion(""portfolio2"", Portfolio.class);"
88085,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,83,,"    add1.add(new Address(""411045"", ""Baner""));"
88086,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,83,,"    add1.add(new Address(""411045"", ""Baner""));"
88087,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,84,,"    add1.add(new Address(""411001"", ""DholePatilRd""));"
88088,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,84,,"    add1.add(new Address(""411001"", ""DholePatilRd""));"
88089,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,86,,"    Region r3 = CacheUtils.createRegion(""employees"", Employee.class);"
88090,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,88,,"      r3.put(i + """", new Employee(""empName"", (20 + i), i, ""Mr."", (5000 + i), add1));"
88091,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,88,,"      r3.put(i + """", new Employee(""empName"", (20 + i), i, ""Mr."", (5000 + i), add1));"
88092,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,92,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolio1 pf1, "" + SEPARATOR + ""portfolio2 pf2, """
88093,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,92,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolio1 pf1, "" + SEPARATOR + ""portfolio2 pf2, """
88094,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,92,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolio1 pf1, "" + SEPARATOR + ""portfolio2 pf2, """
88095,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,100,,"    qs.createIndex(""statusIndexPf1"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolio1"");"
88096,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,100,,"    qs.createIndex(""statusIndexPf1"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolio1"");"
88097,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,101,,"    qs.createIndex(""statusIndexPf2"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolio2"");"
88098,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,110,,"        fail(""Index is NOT uesd"");"
88099,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,164,,"    qs.createIndex(""empIdIndex"", IndexType.FUNCTIONAL, ""e.empId"", SEPARATOR + ""employees e"");"
88100,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,176,,"        fail(""Both the idexes are not getting used.Only "" + indxs + "" index is getting used"");"
88101,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,176,,"        fail(""Both the idexes are not getting used.Only "" + indxs + "" index is getting used"");"
88102,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,190,,"          fail(""indices used do not match with those which are expected to be used"""
88103,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,246,,"    qs.createIndex(""secIdIndexPf1"", IndexType.FUNCTIONAL, ""pos11.secId"","
88104,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,246,,"    qs.createIndex(""secIdIndexPf1"", IndexType.FUNCTIONAL, ""pos11.secId"","
88105,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,249,,"    qs.createIndex(""secIdIndexPf2"", IndexType.FUNCTIONAL, ""pos22.secId"","
88106,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,396,,"    qs.createIndex(""empIdIndex"", IndexType.FUNCTIONAL, ""empId"", SEPARATOR + ""employees"");"
88107,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,637,,"      Region r1 = CacheUtils.createRegion(""portfolio"", Portfolio.class);"
88108,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,645,,"      Region r2 = CacheUtils.createRegion(""employee"", Employee.class);"
88109,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,652,,"          {""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolio pf, "" + SEPARATOR"
88110,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,693,,"      qs.createIndex(""idIndexPf"", IndexType.FUNCTIONAL, ""ID"", SEPARATOR + ""portfolio"");"
88111,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,695,,"      qs.createIndex(""empIdIndexPf2"", IndexType.FUNCTIONAL, ""empId"", SEPARATOR + ""employee"");"
88112,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,714,,"            fail(""<idIndexPf> or <empIdIndexPf2>    was expected but found "" + temp.toString());"
88113,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,828,,"      qs.createIndex(""ageIndexemp"", IndexType.FUNCTIONAL, ""age"", SEPARATOR + ""employee emp "");"
88114,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,876,,"          SEPARATOR + ""Quotes1 q, q.restrict r"");"
88115,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java,904,,"          SEPARATOR + ""Quotes2 q, q.restrict r"");"
88116,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,89,,"        {""select distinct * from "" + SEPARATOR + ""portfolios p, "" + SEPARATOR + ""employees e"","
88117,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,89,,"        {""select distinct * from "" + SEPARATOR + ""portfolios p, "" + SEPARATOR + ""employees e"","
88118,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,89,,"        {""select distinct * from "" + SEPARATOR + ""portfolios p, "" + SEPARATOR + ""employees e"","
88119,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,90,,"            ""Select distinct * from "" + SEPARATOR + ""portfolios pf,"" + SEPARATOR"
88120,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,119,,"    qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolios"");"
88121,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,126,,"        fail(""Index is NOT used"");"
88122,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,151,,"    qs.createIndex(""nameIndex"", IndexType.FUNCTIONAL, ""e.name"", SEPARATOR + ""employees e"");"
88123,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,151,,"    qs.createIndex(""nameIndex"", IndexType.FUNCTIONAL, ""e.name"", SEPARATOR + ""employees e"");"
88124,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRShuffleIteratorsJUnitTest.java,245,,"    qs.createIndex(""streetIndex"", IndexType.FUNCTIONAL, ""s.street"","
88125,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,87,,"      ""SELECT DISTINCT * FROM "" + SEPARATOR + ""Countries c, c.states s, s.districts d,"""
88126,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,87,,"      ""SELECT DISTINCT * FROM "" + SEPARATOR + ""Countries c, c.states s, s.districts d,"""
88127,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,114,,"      ""SELECT DISTINCT c.name, s.name, ct.name FROM "" + SEPARATOR"
88128,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,185,,"        fail(""------------ INDEX IS NOT USED FOR THE QUERY:: "" + q.getQueryString());"
88129,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,188,,"      assertEquals(""villageName"", itr.next().toString());"
88130,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,232,,"        } else if (temp.equals(""cityName"")) {"
88131,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,235,,"          fail(""indices used do not match with those which are expected to be used"""
88132,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,282,,"        } else if (temp.equals(""stateName"")) {"
88133,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRSingleRegionJUnitTest.java,885,,"        SEPARATOR + ""Countries c, c.states s, s.districts d, d.cities ct, d.villages v"");"
88134,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndependentOperandsInWhereClause2JUnitTest.java,67,,"        /* 1 */ ""select distinct * from "" + SEPARATOR"
88135,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndependentOperandsInWhereClause2JUnitTest.java,73,,"            + ""from "" + SEPARATOR + ""portfolios pfos, pfos.positions.values outerPos, """
88136,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndependentOperandsInWhereClause2JUnitTest.java,119,,"        /* 14 */ ""SELECT DISTINCT * FROM "" + SEPARATOR"
88137,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndependentOperandsInWhereClause2JUnitTest.java,120,,"            + ""portfolios pf, pf.positions.values position """
88138,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationDeadLockJUnitTest.java,73,,"    region = CacheUtils.createRegion(""portfolios"", factory.create(), true);"
88139,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationDeadLockJUnitTest.java,112,,"    DiskStore ds1 = dsf.setDiskDirs(new File[] {dir}).create(""ds1"");"
88140,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,107,,"    Region region = CacheUtils.createRegion(""portfolios"", Portfolio.class);"
88141,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,124,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"","
88142,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,124,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"","
88143,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,127,,"    Index i2 = qs.createIndex(""secIdIndex"", IndexType.FUNCTIONAL, ""b.secId"","
88144,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,128,,"        SEPARATOR + ""portfolios pf, pf.positions.values b"");"
88145,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,258,,"        SEPARATOR + ""portfolios pf"");"
88146,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,261,,"        ""select distinct * from "" + SEPARATOR"
88147,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,454,,"    Index i1 = qs.createIndex(""r1Index"", IndexType.FUNCTIONAL, ""secId"","
88148,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,663,,"          ""The ObjectType obtained from index is not of the expected type. Type obtained from index="""
88149,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,734,,"        new String[] {""Select * from "" + SEPARATOR + ""portfolios_overflow pf where pf.ID = 2"","
88150,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,810,,"    File file = new File(""persistData0"");"
88151,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,815,,"      props.setProperty(NAME, ""test"");"
88152,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,824,,"      Region region = cache.getRegion(""mainReportRegion"");"
88153,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,834,,"              ""<trace>SELECT * FROM "" + SEPARATOR"
88154,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,835,,"                  + ""mainReportRegion.entrySet mr Where mr.value.createTime > 1L and mr.value.createTime < 3L"")"
88155,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,837,,"      assertEquals(""OQL index results did not match"", 1, results.size());"
88156,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,937,,"      props.setProperty(STATISTIC_SAMPLING_ENABLED, ""true"");"
88157,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,1020,,"    assertEquals(""Index should have been empty "", 0, i1.getStatistics().getNumberOfKeys());"
88158,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexCreationJUnitTest.java,1036,,"    assertEquals(""Index should not have been empty "", 2, i1.getStatistics().getNumberOfKeys());"
88159,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOnEntrySetJUnitTest.java,75,,"        ""SELECT DISTINCT entry.value, entry.key FROM "" + SEPARATOR + regionName"
88160,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOnEntrySetJUnitTest.java,76,,"            + "".entrySet entry WHERE entry.key.PartitionID > 0 AND """
88161,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOnEntrySetJUnitTest.java,77,,"            + ""entry.key.Index > 1 ORDER BY entry.key.Index ASC LIMIT 2"","
88162,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexPrimaryKeyUsageJUnitTest.java,56,,"    Region r = CacheUtils.createRegion(""portfolios"", Portfolio.class);"
88163,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexPrimaryKeyUsageJUnitTest.java,73,,"        ""select distinct * from "" + SEPARATOR + ""portfolios x, x.positions.values where x.pk = '1'"","
88164,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexPrimaryKeyUsageJUnitTest.java,95,,"          fail(""FAILED:Search result Size is zero"");"
88165,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexPrimaryKeyUsageJUnitTest.java,107,,"    qs.createIndex(""pkidIndex"", IndexType.PRIMARY_KEY, ""pkid"", SEPARATOR + ""portfolios"");"
88166,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexUsageInNestedQueryJUnitTest.java,68,,"        ""select distinct * from "" + SEPARATOR + ""portfolios p, (select distinct pos  as poos from """
88167,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,98,,"    Region region = CacheUtils.createRegion(""pos"", Portfolio.class);"
88168,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,105,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR"
88169,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,116,,"          CacheUtils.log(""NO INDEX USED"");"
88170,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,118,,"          fail(""How could index be present when not created!?"");"
88171,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,145,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""pf.status"", SEPARATOR + ""pos pf"");"
88172,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,145,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""pf.status"", SEPARATOR + ""pos pf"");"
88173,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,145,,"        qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""pf.status"", SEPARATOR + ""pos pf"");"
88174,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,148,,"    Index index3 = qs.createIndex(""IDIndex"", IndexType.FUNCTIONAL, ""pf.ID"", SEPARATOR + ""pos pf"");"
88175,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,148,,"    Index index3 = qs.createIndex(""IDIndex"", IndexType.FUNCTIONAL, ""pf.ID"", SEPARATOR + ""pos pf"");"
88176,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,158,,"          fail(""FAILED: Index NOT Used"");"
88177,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,180,,"      CacheUtils.log(""Both Search Results are of the same Type i.e.--> "" + resType1);"
88178,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,182,,"      fail(""FAILED:Search result Type is different in both the cases"");"
88179,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,186,,"          .log(""Search Results size is Non Zero and equal in both cases i.e.  Size= "" + resSize1);"
88180,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,188,,"      fail(""FAILED:Search result size is different in both the cases"");"
88181,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,197,,"            ""FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. "");"
88182,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,208,,"        fail(""FAILED: Status of the Portfolios found are different"");"
88183,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,211,,"        fail(""FAILED: IDs of the Portfolios found are different"");"
88184,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,267,,"    Index index2 = (Index) qs.createIndex(""secIdIndex"", IndexType.FUNCTIONAL, ""pos.secId"","
88185,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,267,,"    Index index2 = (Index) qs.createIndex(""secIdIndex"", IndexType.FUNCTIONAL, ""pos.secId"","
88186,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,268,,"        SEPARATOR + ""pos pf, pf.positions.values pos"");"
88187,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,826,,"    ((Portfolio) region.get(""2"")).description = ""XXXX"";"
88188,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,1250,,"        {""SELECT * FROM "" + SEPARATOR"
88189,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,1280,,"        assertTrue(""Checking Element type for Query: ["" + queries[i] + ""] results"","
88190,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java,1280,,"        assertTrue(""Checking Element type for Query: ["" + queries[i] + ""] results"","
88191,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IteratorTypeDefJUnitTest.java,58,,"        ""IMPORT org.apache.geode.cache.\""query\"".data.Position;"""
88192,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IteratorTypeDefaultTypesJUnitTest.java,332,,"        ""IMPORT org.apache.geode.cache.\""query\"".data.Student;"""
88193,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,87,,"    Region region = cache.createRegion(""pos"", regionAttributes);"
88194,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,90,,"    String base = ""abc"";"
88195,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,98,,"    base = ""abd"";"
88196,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,117,,"        ""SELECT distinct *  FROM "" + SEPARATOR + ""pos ps WHERE ps.status like "" + predicate);"
88197,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,117,,"        ""SELECT distinct *  FROM "" + SEPARATOR + ""pos ps WHERE ps.status like "" + predicate);"
88198,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,120,,"      results = (SelectResults) q.execute(new Object[] {""abc%""});"
88199,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,134,,"    qs.createIndex(""status"", IndexType.FUNCTIONAL, ""ps.status"", SEPARATOR + ""pos ps"");"
88200,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,134,,"    qs.createIndex(""status"", IndexType.FUNCTIONAL, ""ps.status"", SEPARATOR + ""pos ps"");"
88201,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,134,,"    qs.createIndex(""status"", IndexType.FUNCTIONAL, ""ps.status"", SEPARATOR + ""pos ps"");"
88202,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,345,,"    qs.createIndex(""id"", IndexType.FUNCTIONAL, ""ps.ID"", SEPARATOR + ""pos ps"");"
88203,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,842,,"    String[] values = new String[] {""active"", ""act**ve"", ""ac+t+ve"", ""?act?ve"", ""act)ve^"","
88204,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,844,,"        ""inactive"", ""acxtxve"", ""ac(tiv)e"", ""act()ive"", ""act{}ive"", ""act{ive""};"
88205,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,862,,"            ""select p from "" + SEPARATOR + ""pos.values p where p like '"" + values[i] + ""'"");"
88206,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,862,,"            ""select p from "" + SEPARATOR + ""pos.values p where p like '"" + values[i] + ""'"");"
88207,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,865,,"        q = qs.newQuery(""select p from "" + SEPARATOR + ""pos.values p where p like $1"");"
88208,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,870,,"        fail(""Unexpected result. expected :"" + values[i] + "" for the like predicate: "" + values[i]"
88209,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,870,,"        fail(""Unexpected result. expected :"" + values[i] + "" for the like predicate: "" + values[i]"
88210,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,871,,"            + "" found : "" + (r.size() == 1 ? r.get(0) : ""Result size not equal to 1""));"
88211,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,871,,"            + "" found : "" + (r.size() == 1 ? r.get(0) : ""Result size not equal to 1""));"
88212,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,876,,"    qs.createIndex(""p"", IndexType.FUNCTIONAL, ""p"", SEPARATOR + ""pos.values p"");"
88213,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,983,,"    String[] values = new String[] {""ac\\tive"", ""X\\\\X"", ""Y%Y"", ""Z\\%Z"", ""pass\\ive"","
88214,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,983,,"    String[] values = new String[] {""ac\\tive"", ""X\\\\X"", ""Y%Y"", ""Z\\%Z"", ""pass\\ive"","
88215,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,983,,"    String[] values = new String[] {""ac\\tive"", ""X\\\\X"", ""Y%Y"", ""Z\\%Z"", ""pass\\ive"","
88216,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,983,,"    String[] values = new String[] {""ac\\tive"", ""X\\\\X"", ""Y%Y"", ""Z\\%Z"", ""pass\\ive"","
88217,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,984,,"        ""inact\\%+ive"", ""1inact\\_+ive"",};"
88218,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,984,,"        ""inact\\%+ive"", ""1inact\\_+ive"",};"
88219,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,997,,"        ""X%X"", ""Z\\\\\\%Z"", ""inact\\\\%+ive"", ""1inact\\\\_+ive"",};"
88220,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1061,,"    Query q = qs.newQuery("" SELECT  *  FROM "" + SEPARATOR + ""pos ps WHERE ps.status like '%b%'"");"
88221,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1086,,"    qs.createIndex(""pkid"", IndexType.FUNCTIONAL, ""ps.pkid"", SEPARATOR + ""pos ps"");"
88222,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1086,,"    qs.createIndex(""pkid"", IndexType.FUNCTIONAL, ""ps.pkid"", SEPARATOR + ""pos ps"");"
88223,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1266,,"        "" SELECT  status, pkid FROM "" + SEPARATOR"
88224,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1285,,"            + ""pos  WHERE NOT (status like 'active' or pkid like '1%') "","
88225,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1527,,"            ""SELECT pkid FROM "" + SEPARATOR + ""pos ps WHERE ps.pkid like 'abc%'"","
88226,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1875,,"    Query query = qs.newQuery(""select * from "" + SEPARATOR + ""pos a where a like '%bc%'"");"
88227,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,1959,,"      r1.put(""key-"" + i, new Portfolio(i));"
88228,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,2163,,"      results[0][0] = (SelectResults) q[0].execute(new Object[] {""%nactive""});"
88229,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LikePredicateJUnitTest.java,2245,,"        assertEquals(""Query "" + queries[i] + "" should return 5 results and not "" + results.size(),"
88230,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,94,,"    Region region = CacheUtils.createRegion(""portfolios1"", Portfolio.class);"
88231,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,127,,"    String queryString = ""SELECT * from "" + SEPARATOR + ""portfolios1 LIMIT $1 "";"
88232,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,227,,"          ""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolios pf WHERE pf.ID > 0 limit 5"";"
88233,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,227,,"          ""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolios pf WHERE pf.ID > 0 limit 5"";"
88234,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,266,,"          ""SELECT DISTINCT pf.ID FROM "" + SEPARATOR + ""portfolios pf WHERE pf.ID > 0 limit 5"";"
88235,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,336,,"          ""SELECT DISTINCT * FROM "" + SEPARATOR + ""portfolios1  pf WHERE pf.ID > 10 limit 5"";"
88236,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,503,,"          ""SELECT * FROM "" + SEPARATOR"
88237,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,510,,"      Index index = qs.createIndex(""idIndex"", ""pf.ID"", SEPARATOR + ""portfolios pf"");"
88238,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,510,,"      Index index = qs.createIndex(""idIndex"", ""pf.ID"", SEPARATOR + ""portfolios pf"");"
88239,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,510,,"      Index index = qs.createIndex(""idIndex"", ""pf.ID"", SEPARATOR + ""portfolios pf"");"
88240,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,512,,"          qs.createIndex(""posIndex"", ""pos.secId"","
88241,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,997,,"          p.status = ""active"";"
88242,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1007,,"              + ""portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10"";"
88243,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1039,,"      index = qs.createIndex(""statusIndex"", ""status"", SEPARATOR + ""portfolios1"");"
88244,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1084,,"          ""select * from "" + SEPARATOR"
88245,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1225,,"      p.positions.put(""IBM"", new Position(""IBM"", i));"
88246,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1226,,"      region.put(""KEY"" + i, p);"
88247,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1230,,"        ""<trace>SELECT * FROM "" + SEPARATOR"
88248,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1240,,"        qs.createIndex(""idIndex"", IndexType.FUNCTIONAL, ""P.ID"", SEPARATOR + ""portfolios1 P"");"
88249,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1240,,"        qs.createIndex(""idIndex"", IndexType.FUNCTIONAL, ""P.ID"", SEPARATOR + ""portfolios1 P"");"
88250,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1335,,"      p.positions.put(""VMW"", new Position(""VMW"", i));"
88251,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1382,,"        SEPARATOR + ""portfolios1 P, P.positions.values POS"");"
88252,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1433,,"        qs.createIndex(""shortIdIndex"", IndexType.FUNCTIONAL, ""P.shortID"","
88253,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java,1433,,"        qs.createIndex(""shortIdIndex"", IndexType.FUNCTIONAL, ""P.shortID"","
88254,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LogicalOperatorsJUnitTest.java,72,,"          fail(validOperands[i] + "" AND "" + validOperands[j] + "" returns "" + result);"
88255,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,65,,"  @Ignore(""TODO: test is disabled"")"
88256,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,92,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR"
88257,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,164,,"    Region region = CacheUtils.createRegion(""portfolios"", Portfolio.class);"
88258,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,172,,"        ""Select distinct * from "" + SEPARATOR"
88259,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,174,,"    qs.createIndex(""index1"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolios pf"");"
88260,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,214,,"      assertEquals(j--, ((Integer) struct.get(""getID"")).intValue());"
88261,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,311,,"    final Region region = cache.createRegion(""new_pos"", ra);"
88262,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,312,,"    String queryStr = "" select distinct r.name, pVal, r.\""type\""  """
88263,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,313,,"        + "" from "" + SEPARATOR + ""new_pos r , r.positions.values pVal where """
88264,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,313,,"        + "" from "" + SEPARATOR + ""new_pos r , r.positions.values pVal where """
88265,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MiscJUnitTest.java,382,,"      NewPortfolio pf = new NewPortfolio(""name"" + i, i);"
88266,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,74,,"    qs.defineIndex(""statusIndex"", ""status"", r.getFullPath());"
88267,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,74,,"    qs.defineIndex(""statusIndex"", ""status"", r.getFullPath());"
88268,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,75,,"    qs.defineIndex(""IDIndex"", ""ID"", r.getFullPath());"
88269,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,103,,"    String[] queries = {""select * from "" + r.getFullPath() + "" where status = 'active'"","
88270,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,103,,"    String[] queries = {""select * from "" + r.getFullPath() + "" where status = 'active'"","
88271,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,104,,"        ""select * from "" + r.getFullPath() + "" where ID > 4""};"
88272,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,261,,"    qs.defineIndex(""secIDIndex"", ""pos.secId"", r.getFullPath() + "" p, p.positions.values pos "");"
88273,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiIndexCreationJUnitTest.java,302,,"        assertEquals(""Incorrect results for query: "" + queries[i], 20, sr.size());"
88274,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiRegionIndexUsageJUnitTest.java,91,,"      ""SELECT DISTINCT * FROM "" + SEPARATOR + ""Countries c, c.states s, s.districts d,"""
88275,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiRegionIndexUsageJUnitTest.java,199,,"        fail(""------------ INDEX IS NOT USED FOR THE QUERY:: "" + q.getQueryString());"
88276,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiRegionIndexUsageJUnitTest.java,206,,"        if (temp.equals(""villageName1"")) {"
88277,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiRegionIndexUsageJUnitTest.java,211,,"          fail(""indices used do not match with those which are expected to be used"""
88278,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultiRegionIndexUsageJUnitTest.java,462,,"        if (temp.equals(""cityName1"")) {"
88279,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultipleRegionsJUnitTest.java,49,,"    Region region3 = CacheUtils.createRegion(""Data"", Data.class);"
88280,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/MultipleRegionsJUnitTest.java,75,,"        ""Select distinct * from "" + SEPARATOR + ""Portfolios3 pf, pf.positions"","
88281,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NegativeNumberQueriesJUnitTest.java,113,,"    qs.createIndex(""id"", IndexType.FUNCTIONAL, ""num.id"", SEPARATOR + ""numbers num"");"
88282,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,99,,"        ""SELECT DISTINCT * FROM "" + SEPARATOR"
88283,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,107,,"            + ""Portfolios p where p.ID = 0).status"";"
88284,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,113,,"            + ""Portfolios x where status = ELEMENT(SELECT DISTINCT * FROM "" + SEPARATOR"
88285,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,251,,"        fail(""FAILED:Search result Type is different in both the cases"");"
88286,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,277,,"        ""SELECT DISTINCT * FROM"" + "" (SELECT DISTINCT * FROM "" + SEPARATOR"
88287,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,277,,"        ""SELECT DISTINCT * FROM"" + "" (SELECT DISTINCT * FROM "" + SEPARATOR"
88288,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,279,,"            + "" WHERE pos.value.secId = 'IBM'"","
88289,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,389,,"    Region region1 = CacheUtils.createRegion(""portfolios1"", Portfolio.class);"
88290,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NestedQueryJUnitTest.java,399,,"        qs.createIndex(""P1IDIndex"", IndexType.FUNCTIONAL, ""P.ID"", SEPARATOR + ""portfolios1 P"");"
88291,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByPartitionedJUnitTest.java,78,,"        ""select  * from "" + SEPARATOR + ""portfolio1 p order by status, ID desc"","
88292,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByPartitionedJUnitTest.java,99,,"        ""select  p.ID, pos.secId from "" + SEPARATOR"
88293,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByPartitionedJUnitTest.java,145,,"        CacheUtils.getLogger().info(""Executing query: "" + queries[i]);"
88294,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByPartitionedJUnitTest.java,155,,"    qs.createIndex(""i1"", IndexType.FUNCTIONAL, ""p.status"", SEPARATOR + ""portfolio1 p"");"
88295,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByReplicatedJUnitTest.java,97,,"    Region r1 = this.createRegion(""portfolio1"", Portfolio.class);"
88296,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByReplicatedJUnitTest.java,108,,"        CacheUtils.getLogger().info(""Executing query: "" + queries[i]);"
88297,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NonDistinctOrderByReplicatedJUnitTest.java,117,,"    qs.createIndex(""PKIDIndexPf1"", IndexType.PRIMARY_KEY, ""ID"", SEPARATOR + ""portfolio1"");"
88298,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NumericQueryJUnitTest.java,82,,"        ""select * from "" + SEPARATOR + regionName + "" r where "" + field + op + "" 50"","
88299,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NumericQueryJUnitTest.java,82,,"        ""select * from "" + SEPARATOR + regionName + "" r where "" + field + op + "" 50"","
88300,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NumericQueryJUnitTest.java,112,,"        ""tr['bigdecimal']"", SEPARATOR + ""testRegion tr"");"
88301,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NumericQueryJUnitTest.java,174,,"    executeQueryTest(getQueriesOnRegion(testRegionName, ""r.max1"", EQ), ""r.max1"", regionPath);"
88302,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/NumericQueryJUnitTest.java,229,,"    executeQueryTest(getQueriesOnRegion(testRegionName, ""r.id"", EQ), ""r.id"", regionPath);"
88303,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,98,,"    Region r1 = createRegion(""portfolio1"", Portfolio.class);"
88304,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,117,,"      CacheUtils.getLogger().info(""Executing query: "" + str);"
88305,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,126,,"          assertNotNull(""Expected not null value for pkid"", p.pkid);"
88306,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,128,,"            fail("" Value of pkid is not in expected order."");"
88307,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,142,,"          assertNull(""Expected null value for pkid"", p.pkid);"
88308,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,234,,"            fail("" Value of ID is not as expected "" + id);"
88309,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,252,,"          fail("" Value of ID is not as expected, "" + id);"
88310,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,265,,"        String pkid = (String) vals.get(""pkid"");"
88311,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,407,,"        ""SELECT  distinct ID, pkid FROM "" + SEPARATOR"
88312,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,425,,"        ""SELECT  distinct ID, description, createTime FROM "" + SEPARATOR"
88313,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,454,,"    this.createIndex(""PKIDIndexPf1"", IndexType.PRIMARY_KEY, ""ID"", SEPARATOR + ""portfolio1"");"
88314,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,720,,"        ""SELECT  distinct ID, description, createTime, pkid FROM "" + SEPARATOR"
88315,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,721,,"            + ""portfolio1 pf1 where pkid = '12' and ID > 10 order by ID desc, pkid asc "","
88316,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,723,,"            + ""portfolio1 pf1 where pkid > '1' and ID > 10 order by ID asc, pkid desc "","
88317,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,725,,"            + ""portfolio1 pf1 where pkid = '13'and  ID > 10 and ID < 20 order by ID asc, pkid asc "","
88318,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,727,,"            + ""portfolio1 pf1 where pkid <'9' and ID > 10 and ID < 20 order by ID desc , pkid desc"","
88319,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,729,,"            + ""portfolio1 pf1 where pkid = '15' and ID >= 10 and ID <= 20 order by ID desc, pkid desc "","
88320,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,731,,"            + ""portfolio1 pf1 where pkid > '1' and pkid <='9' and ID >= 10 and ID <= 20 order by ID asc, pkid asc"","
88321,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,733,,"            + ""portfolio1 pf1 where pkid > '1' and ID != 10 order by ID asc, pkid asc "","
88322,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,735,,"            + ""portfolio1 pf1 where pkid > '1' and ID != 10 order by ID desc, pkid desc "","
88323,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,737,,"            + ""portfolio1 pf1 where pkid = '17' and ID > 10 order by ID desc, pkid asc limit 5"","
88324,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,739,,"            + ""portfolio1 pf1 where pkid > '17' and ID > 10 order by ID asc, pkid desc limit 5"","
88325,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,741,,"            + ""portfolio1 pf1 where pkid < '7' and ID > 10 and ID < 20 order by ID asc, pkid asc limit 5 "","
88326,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,743,,"            + ""portfolio1 pf1 where pkid = '18' and ID > 10 and ID < 20 order by ID desc, pkid desc limit 5"","
88327,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,747,,"            + ""portfolio1 pf1 where pkid != '17' and ID >= 10 and ID <= 20 order by ID asc, pkid desc limit 5"","
88328,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java,749,,"            + ""portfolio1 pf1 where pkid > '0' and ID != 10 order by ID asc, pkid asc limit 10"","
88329,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ParameterBindingJUnitTest.java,96,,"    validateQueryWithBindParameter(""SELECT DISTINCT * FROM $1 "", params, numEntries);"
88330,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ParameterBindingJUnitTest.java,134,,"        .newQuery(""SELECT DISTINCT * FROM "" + SEPARATOR + ""Portfolios where status.equals($1)"");"
88331,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java,47,,"    Region region = CacheUtils.createRegion(""Portfolios"", Portfolio.class);"
88332,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java,62,,"        .newQuery(""select distinct * from "" + SEPARATOR + ""Portfolios.keys where toString = '1'"");"
88333,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,66,,"      ""select * from "" + SEPARATOR + regionName,"
88334,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,93,,"      ""select * from "" + SEPARATOR + regionName + "" p, "" + SEPARATOR + exampleRegionName"
88335,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,161,,"        results[i][0] = qs.newQuery(""<trace> "" + queries[i]).execute();"
88336,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,163,,"        throw new RuntimeException(""Query execution failed for query: "" + queries[i], e);"
88337,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,194,,"            + ""\n ResultSet 01: "" + results[i][0] + ""\n"" + ""ResultSet 02: "" + results[i][1] + ""\n"","
88338,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,194,,"            + ""\n ResultSet 01: "" + results[i][0] + ""\n"" + ""ResultSet 02: "" + results[i][1] + ""\n"","
88339,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,199,,"    GemFireCacheImpl.getInstance().getLogger().fine(""\n Result 01: """
88340,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,200,,"        + results[queries.length - 1][0] + ""\n\n Result 02: "" + results[queries.length - 1][1]);"
88341,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryREUpdateInProgressJUnitTest.java,225,,"        throw new RuntimeException(""Query executio failed for query: "" + queries[i], e);"
88342,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryUndefinedJUnitTest.java,43,,"  private static String regionName = ""test"";"
88343,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryUndefinedJUnitTest.java,57,,"      new String[] {""select * from "" + SEPARATOR + ""test WHERE age != 25"","
88344,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryUndefinedJUnitTest.java,111,,"    CacheUtils.getQueryService().createIndex(""ageIndex"", ""age"", SEPARATOR + ""test"");"
88345,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QueryUndefinedJUnitTest.java,111,,"    CacheUtils.getQueryService().createIndex(""ageIndex"", ""age"", SEPARATOR + ""test"");"
88346,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/SelectToDateJUnitTest.java,69,,"      ""select * from "" + SEPARATOR + ""test p where p.createDate = to_date('"" + mayDate + ""', '"""
88347,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/SelectToDateJUnitTest.java,69,,"      ""select * from "" + SEPARATOR + ""test p where p.createDate = to_date('"" + mayDate + ""', '"""
88348,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/SelectToDateJUnitTest.java,89,,"      ""select p.createDate from "" + SEPARATOR + ""test p where p.createDate = to_date('"" + mayDate"
88349,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/StructMemberAccessJUnitTest.java,70,,"        ""SELECT DISTINCT * FROM"" + "" (SELECT DISTINCT * FROM "" + SEPARATOR"
88350,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/StructMemberAccessJUnitTest.java,70,,"        ""SELECT DISTINCT * FROM"" + "" (SELECT DISTINCT * FROM "" + SEPARATOR"
88351,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/StructMemberAccessJUnitTest.java,74,,"            + ""Portfolios ptf, positions pos) p"""
88352,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/StructMemberAccessJUnitTest.java,98,,"            + "" WHERE pos.value.secId = 'IBM'"","
88353,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ArithmeticOperationsIntegrationTest.java,69,,"      queryService.newQuery(""select * from "" + SEPARATOR + ""portfolio p where p % 2 = 1"").execute();"
88354,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ArithmeticOperationsIntegrationTest.java,72,,"      assertEquals(""Arithmetic Operations can only be applied to numbers"", qite.getMessage());"
88355,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ArithmeticOperationsIntegrationTest.java,83,,"      assertEquals(""Cannot evaluate arithmetic operations on null values"", qite.getMessage());"
88356,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ArithmeticOperationsIntegrationTest.java,261,,"        (SelectResults) queryService.newQuery(""select 1 + 2 * 3 from "" + SEPARATOR + ""portfolio p"")"
88357,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,56,,"        ""SELECT MIN(pf.ID) FROM "" + SEPARATOR + ""portfolio pf WHERE pf.ID > 0"","
88358,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,58,,"            + ""portfolio pf WHERE pf.ID > 0 GROUP BY pf.status"","
88359,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,95,,"          .as(String.format(""Query parsing failed for %s"", queryStr))"
88360,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,105,,"        ""SELECT MIN("" + innerQuery + "") FROM "" + SEPARATOR + ""portfolio pf WHERE pf.ID > 0"","
88361,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,106,,"        ""SELECT pf.status, MIN("" + innerQuery"
88362,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,158,,"            + ""portfolio pf WHERE pf.ID > 0 GROUP BY st"","
88363,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledGroupBySelectIntegrationTest.java,223,,"        ""SELECT COUNT("" + innerQuery + "") AS ct FROM "" + SEPARATOR + ""portfolio pf WHERE pf.ID > 0"","
88364,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,64,,"    region = CacheUtils.createRegion(""portfolio"", Portfolio.class);"
88365,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,82,,"    List list = compiler.compileFromClause(SEPARATOR + ""portfolio p, p.positions"");"
88366,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,86,,"      qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolio"");"
88367,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,86,,"      qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""portfolio"");"
88368,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,87,,"      qs.createIndex(""idIndex"", IndexType.FUNCTIONAL, ""ID"", SEPARATOR + ""portfolio"");"
88369,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,91,,"        context.addDependencies(new CompiledID(""dummy""), iterDef.computeDependencies(context));"
88370,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,107,,"          new CompiledLiteral(""xyz""), OQLLexerTokenTypes.TOK_LT);"
88371,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,132,,"      fail(""Test failed sue to Exception = "" + e);"
88372,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,148,,"      qs.createIndex(""createTime"", IndexType.FUNCTIONAL, ""createTime"", SEPARATOR + ""portfolio"");"
88373,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,231,,"      Region r3 = CacheUtils.createRegion(""employees"", Employee.class);"
88374,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,233,,"      add1.add(new Address(""411045"", ""Baner""));"
88375,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,233,,"      add1.add(new Address(""411045"", ""Baner""));"
88376,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,234,,"      add1.add(new Address(""411001"", ""DholePatilRd""));"
88377,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,234,,"      add1.add(new Address(""411001"", ""DholePatilRd""));"
88378,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,236,,"        r3.put(i + """", new Employee(""empName"", (20 + i), i, ""Mr."", (5000 + i), add1));"
88379,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,236,,"        r3.put(i + """", new Employee(""empName"", (20 + i), i, ""Mr."", (5000 + i), add1));"
88380,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,241,,"          .compileFromClause(SEPARATOR + ""portfolio p, p.positions,"" + SEPARATOR + ""employees e"");"
88381,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,241,,"          .compileFromClause(SEPARATOR + ""portfolio p, p.positions,"" + SEPARATOR + ""employees e"");"
88382,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,248,,"      qs.createIndex(""empid"", IndexType.FUNCTIONAL, ""empId"", SEPARATOR + ""employees"");"
88383,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,248,,"      qs.createIndex(""empid"", IndexType.FUNCTIONAL, ""empId"", SEPARATOR + ""employees"");"
88384,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,259,,"          new CompiledLiteral(new String(""active"")), OQLLexerTokenTypes.TOK_EQ);"
88385,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,260,,"      cv[1] = new CompiledComparison(new CompiledPath(new CompiledID(""p""), ""type""),"
88386,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,261,,"          new CompiledLiteral(new String(""type1"")), OQLLexerTokenTypes.TOK_EQ);"
88387,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,262,,"      cv[2] = new CompiledComparison(new CompiledPath(new CompiledID(""e""), ""age""),"
88388,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,274,,"      assertNotNull(""OO is null"", oo);"
88389,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,540,,"      assertNotNull(""OrganizedOperand object is null"", oo);"
88390,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,842,,"      Region r4 = CacheUtils.createRegion(""portfolio1"", Portfolio.class);"
88391,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CompiledJunctionInternalsJUnitTest.java,1053,,"      assertTrue(""Filter Openad of OrganizedOperand is not of type RangeJunction"","
88392,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CopyOnReadQueryJUnitTest.java,143,,"    utils.createHashIndex(indexName, ""p.indexKey"", SEPARATOR + regionName + "" p"");"
88393,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CopyOnReadQueryJUnitTest.java,198,,"        SEPARATOR + regionName + "" p, p.positions.values pv"");"
88394,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CopyOnReadQueryJUnitTest.java,283,,"    assertEquals(""Unexpected number of Portfolio instances"", numInstances,"
88395,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/CopyOnReadQueryJUnitTest.java,295,,"        p.status = ""discardStatus"";"
88396,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/DefaultQuerySecurityIntegrationTest.java,126,,"  @Parameters({""LOCAL"", ""REPLICATE"", ""PARTITION""})"
88397,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/DefaultQuerySecurityIntegrationTest.java,126,,"  @Parameters({""LOCAL"", ""REPLICATE"", ""PARTITION""})"
88398,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/DefaultQuerySecurityIntegrationTest.java,126,,"  @Parameters({""LOCAL"", ""REPLICATE"", ""PARTITION""})"
88399,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/DefaultQuerySecurityIntegrationTest.java,127,,"  @TestCaseName(""[{index}] {method}(RegionType:{0}"")"
88400,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/DefaultQuerySecurityIntegrationTest.java,132,,"    String queryString = ""SELECT object.name FROM "" + SEPARATOR + regionName + "" object"";"
88401,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ExecutionContextIntegrationTest.java,123,,"    @SuppressWarnings(""unchecked"")"
88402,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/GroupJunctionIntegrationTest.java,77,,"        new Object[] {""REPLICATE"", ""SELECT * FROM "" + SEPARATOR + REGION_NAME"
88403,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/GroupJunctionIntegrationTest.java,77,,"        new Object[] {""REPLICATE"", ""SELECT * FROM "" + SEPARATOR + REGION_NAME"
88404,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/GroupJunctionIntegrationTest.java,86,,"        new Object[] {""PARTITION"", ""SELECT * FROM "" + SEPARATOR + REGION_NAME"
88405,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/IndexManagerJUnitTest.java,46,,"    Region region = CacheUtils.createRegion(""portfolios"", Portfolio.class);"
88406,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/OrderByComparatorJUnitTest.java,65,,"    Region r1 = CacheUtils.createRegion(""portfolio1"", Portfolio.class);"
88407,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/OrderByComparatorJUnitTest.java,75,,"        CacheUtils.getLogger().info(""Executing query: "" + queries[i]);"
88408,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ProjectionAttributeJUnitTest.java,54,,"  String queries[] = {""select distinct p from "" + SEPARATOR + ""pos p where p.ID > 0 "", // ResultSet"
88409,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ProjectionAttributeJUnitTest.java,56,,"      ""select distinct 'a' from "" + SEPARATOR + ""pos p "", // ResultSet"
88410,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ProjectionAttributeJUnitTest.java,164,,"          SEPARATOR + ""Quotes1 q, q.restrict r"");"
88411,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/ProjectionAttributeJUnitTest.java,194,,"          SEPARATOR + ""Quotes2 q, q.restrict r"");"
88412,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryFromClauseCanonicalizationJUnitTest.java,70,,"    region = CacheUtils.createRegion(""pos"", Portfolio.class);"
88413,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryFromClauseCanonicalizationJUnitTest.java,116,,"                ""QueryFromClauseCanonicalizationJUnitTest::testCanonicalizedFromClause.Failure in query number="""
88414,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,62,,"        createRegionWithValueConstraint(""portfolio"", Portfolio.class);"
88415,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,69,,"        createRegionWithValueConstraint(""portfolio1"", Portfolio.class);"
88416,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,75,,"    Region<String, Object> employees = createRegionWithValueConstraint(""employees"", Employee.class);"
88417,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,79,,"    employees.put(""0"", new Employee(""empName"", (20), 0, ""Mr."", (5000), add1));"
88418,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,79,,"    employees.put(""0"", new Employee(""empName"", (20), 0, ""Mr."", (5000), add1));"
88419,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,104,,"        ""select distinct * from "" + SEPARATOR + ""portfolio p, p.positions,"" + SEPARATOR"
88420,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,104,,"        ""select distinct * from "" + SEPARATOR + ""portfolio p, p.positions,"" + SEPARATOR"
88421,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,108,,"    queryService.createIndex(""idIndex"", ""ID"", SEPARATOR + ""portfolio"");"
88422,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,109,,"    queryService.createIndex(""idIndex1"", ""ID"", SEPARATOR + ""portfolio1"");"
88423,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,110,,"    queryService.createIndex(""empidIndex"", ""empId"", SEPARATOR + ""employees"");"
88424,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,110,,"    queryService.createIndex(""empidIndex"", ""empId"", SEPARATOR + ""employees"");"
88425,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,201,,"        ""SELECT MIN(pf.ID) FROM "" + SEPARATOR + ""portfolio pf WHERE pf.ID > 0"","
88426,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryObserverCallbacksTest.java,203,,"            + ""portfolio pf WHERE pf.ID > 0 GROUP BY pf.status"","
88427,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryTraceJUnitTest.java,77,,"    String slComment = ""-- single line comment with TRACE \n"";"
88428,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryTraceJUnitTest.java,79,,"        "" /* Multi-line comments here"" + ""* ends here "" + ""* with TRACE too"" + ""*/ <TRACE> "";"
88429,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryTraceJUnitTest.java,79,,"        "" /* Multi-line comments here"" + ""* ends here "" + ""* with TRACE too"" + ""*/ <TRACE> "";"
88430,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryTraceJUnitTest.java,79,,"        "" /* Multi-line comments here"" + ""* ends here "" + ""* with TRACE too"" + ""*/ <TRACE> "";"
88431,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryTraceJUnitTest.java,88,,"    region = CacheUtils.createRegion(""portfolio"", af.create(), false);"
88432,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryTraceJUnitTest.java,99,,"            SEPARATOR + ""portfolio "");"
88433,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,67,,"    queries.put(""SELECT AVG(p.ID) FROM "" + SEPARATOR + firstRegionName + "" p"","
88434,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,69,,"    queries.put(""SELECT AVG(p.ID) FROM "" + SEPARATOR + firstRegionName + "" p WHERE p.ID > 0"","
88435,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,106,,"        + "" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'"","
88436,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,107,,"        downCast(supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(""IBM""))"
88437,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,126,,"        + "" p WHERE p.ID IN (SELECT MIN(o.ID) FROM "" + SEPARATOR + firstRegionName + "" o)"","
88438,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,137,,"    equiJoinQueries.put(""SELECT AVG(p.ID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88439,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,137,,"    equiJoinQueries.put(""SELECT AVG(p.ID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88440,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,282,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88441,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,282,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88442,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,282,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88443,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,283,,"      ""REPLICATE, false"", ""PARTITION, true"", ""PARTITION, false"""
88444,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,285,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1})"")"
88445,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/AvgIntegrationTest.java,298,,"          .as(String.format(""Query %s didn't return expected results"", queryStr))"
88446,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,66,,"    queries.put(""SELECT COUNT(*) FROM "" + SEPARATOR + firstRegionName,"
88447,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,87,,"        ""SELECT COUNT(DISTINCT p.ID) FROM "" + SEPARATOR + firstRegionName + "" p WHERE p.ID > 0"","
88448,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,110,,"        (int) supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(""IBM""))"
88449,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,132,,"        + "" p WHERE p.ID IN (SELECT MIN(o.ID) FROM "" + SEPARATOR + firstRegionName + "" o)"","
88450,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,143,,"    equiJoinQueries.put(""SELECT COUNT(*) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88451,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,143,,"    equiJoinQueries.put(""SELECT COUNT(*) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88452,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,291,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88453,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,291,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88454,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,291,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88455,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,292,,"      ""REPLICATE, false"", ""PARTITION, true"", ""PARTITION, false"""
88456,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,294,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1})"")"
88457,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/CountIntegrationTest.java,307,,"          .as(String.format(""Query %s didn't return expected results"", queryStr))"
88458,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,67,,"    queries.put(""SELECT MAX(ID) FROM "" + SEPARATOR + firstRegionName,"
88459,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,73,,"    queries.put(""SELECT MAX(p.getType()) FROM "" + SEPARATOR + firstRegionName"
88460,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,82,,"        ""SELECT MAX(p.shortID) FROM "" + SEPARATOR + firstRegionName"
88461,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,93,,"        + "" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'"","
88462,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,94,,"        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(""IBM""))"
88463,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,118,,"        + "" p WHERE p.ID IN (SELECT MIN(o.ID) FROM "" + SEPARATOR + firstRegionName + "" o)"","
88464,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,130,,"        .put(""SELECT MAX(p.shortID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88465,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,130,,"        .put(""SELECT MAX(p.shortID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88466,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,275,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88467,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,275,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88468,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,275,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88469,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,276,,"      ""REPLICATE, false"", ""PARTITION, true"", ""PARTITION, false"""
88470,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,278,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1})"")"
88471,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MaxIntegrationTest.java,291,,"          .as(String.format(""Query %s didn't return expected results"", queryStr))"
88472,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,67,,"    queries.put(""SELECT MIN(ID) FROM "" + SEPARATOR + firstRegionName,"
88473,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,73,,"    queries.put(""SELECT MIN(p.getType()) FROM "" + SEPARATOR + firstRegionName"
88474,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,82,,"        ""SELECT MIN(p.shortID) FROM "" + SEPARATOR + firstRegionName"
88475,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,93,,"        + "" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'"","
88476,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,94,,"        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(""IBM""))"
88477,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,118,,"        + "" p WHERE p.ID IN (SELECT MIN(o.ID) FROM "" + SEPARATOR + firstRegionName + "" o)"","
88478,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,130,,"        .put(""SELECT MIN(p.shortID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88479,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,130,,"        .put(""SELECT MIN(p.shortID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88480,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,276,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88481,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,276,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88482,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,276,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88483,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,277,,"      ""REPLICATE, false"", ""PARTITION, true"", ""PARTITION, false"""
88484,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,279,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1})"")"
88485,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java,292,,"          .as(String.format(""Query %s didn't return expected results"", queryStr))"
88486,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,67,,"    queries.put(""SELECT SUM(p.ID) FROM "" + SEPARATOR + firstRegionName + "" p"","
88487,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,69,,"    queries.put(""SELECT SUM(p.ID) FROM "" + SEPARATOR + firstRegionName + "" p WHERE p.ID > 0"","
88488,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,104,,"        + "" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'"","
88489,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,105,,"        downCast(supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(""IBM""))"
88490,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,124,,"        + "" p WHERE p.ID IN (SELECT MIN(o.ID) FROM "" + SEPARATOR + firstRegionName + "" o)"","
88491,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,135,,"    equiJoinQueries.put(""SELECT SUM(p.ID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88492,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,135,,"    equiJoinQueries.put(""SELECT SUM(p.ID) from "" + SEPARATOR + firstRegionName + "" p, "" + SEPARATOR"
88493,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,275,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88494,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,275,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88495,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,275,,"      ""LOCAL, true"", ""LOCAL, false"", ""REPLICATE, true"","
88496,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,276,,"      ""REPLICATE, false"", ""PARTITION, true"", ""PARTITION, false"""
88497,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,278,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1})"")"
88498,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/SumIntegrationTest.java,291,,"          .as(String.format(""Query %s didn't return expected results"", queryStr))"
88499,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AbstractIndexMaintenanceIntegrationTest.java,54,,"        (LocalRegion) cache.createRegionFactory(RegionShortcut.REPLICATE).create(""portfolios"");"
88500,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AbstractIndexMaintenanceIntegrationTest.java,57,,"        createIndex(qs, ""statusIndex"", ""value.status"", SEPARATOR + ""portfolios.entrySet()"");"
88501,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AbstractIndexMaintenanceIntegrationTest.java,57,,"        createIndex(qs, ""statusIndex"", ""value.status"", SEPARATOR + ""portfolios.entrySet()"");"
88502,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AbstractIndexMaintenanceIntegrationTest.java,57,,"        createIndex(qs, ""statusIndex"", ""value.status"", SEPARATOR + ""portfolios.entrySet()"");"
88503,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AbstractIndexMaintenanceIntegrationTest.java,63,,"    statusIndex.setPdxStringFlag(new PdxString(""PdxString Key""));"
88504,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java,87,,"        .put(GEMFIRE_PREFIX + ""AsynchIndexMaintenanceThreshold"", ""50"");"
88505,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java,88,,"    getProperties().put(GEMFIRE_PREFIX + ""AsynchIndexMaintenanceInterval"","
88506,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java,91,,"        qs.createIndex(""statusIndex"", FUNCTIONAL, ""p.getID"", SEPARATOR + ""portfolio p"");"
88507,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java,91,,"        qs.createIndex(""statusIndex"", FUNCTIONAL, ""p.getID"", SEPARATOR + ""portfolio p"");"
88508,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java,91,,"        qs.createIndex(""statusIndex"", FUNCTIONAL, ""p.getID"", SEPARATOR + ""portfolio p"");"
88509,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexIndexMapJUnitTest.java,76,,"        queryService.createIndex(""IDIndex"", ""p.ID"", SEPARATOR + ""portfolios p, p.positions ps"");"
88510,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexIndexMapJUnitTest.java,83,,"        ""Select * from "" + SEPARATOR + ""portfolios p where p.ID = 1"");"
88511,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexIndexMapJUnitTest.java,94,,"    testIndexAndQuery(""p.ID"", SEPARATOR + ""portfolios p, p.positions.values ps"","
88512,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java,66,,"    utils.createReplicateRegion(""exampleRegion"");"
88513,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java,71,,"    index = utils.createIndex(""type"", ""\""type\"""", SEPARATOR + ""exampleRegion"");"
88514,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java,91,,"    index = utils.createIndex(""indexName"", ""status"", SEPARATOR + ""exampleRegion"");"
88515,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java,99,,"      region.put(""KEY-"" + i, p);"
88516,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java,104,,"        .newQuery(""Select * from "" + SEPARATOR + ""exampleRegion r where r.status = null"").execute();"
88517,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java,169,,"      p0.status = ""active"";"
88518,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexJUnitTest.java,101,,"    utils.createHashIndex(indexName, ""p.indexKey"", SEPARATOR + regionName + "" p"");"
88519,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexJUnitTest.java,150,,"        SEPARATOR + regionName + "" p, p.positions.values pv"");"
88520,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexJUnitTest.java,176,,"    utils.createIndex(indexName, ""pv.secId"", SEPARATOR + regionName + "" p, p.positions.values pv"");"
88521,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexJUnitTest.java,351,,"    assertEquals(""Unexpected number of Portfolio instances"", numInstances,"
88522,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexJUnitTest.java,363,,"        p.status = ""discardStatus"";"
88523,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/DeclarativeIndexCreationJUnitTest.java,75,,"    Region root = cache.getRegion(SEPARATOR + ""root"" + SEPARATOR + ""portfolios"");"
88524,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/EquiJoinIntegrationTest.java,90,,"        ""<trace>select * from "" + SEPARATOR + ""region1 c, "" + SEPARATOR"
88525,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/EquiJoinIntegrationTest.java,90,,"        ""<trace>select * from "" + SEPARATOR + ""region1 c, "" + SEPARATOR"
88526,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/EquiJoinIntegrationTest.java,115,,"          ""<trace>select * from "" + SEPARATOR + ""region1 c, "" + SEPARATOR + ""region2 s, """
88527,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/EquiJoinIntegrationTest.java,187,,"        new String[] {""select * from "" + SEPARATOR + ""region1 c, "" + SEPARATOR"
88528,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/EquiJoinIntegrationTest.java,206,,"        return new String[] {""Compact"", ""Hash""};"
88529,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/EquiJoinIntegrationTest.java,206,,"        return new String[] {""Compact"", ""Hash""};"
88530,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,92,,"    helpTestHashIndexForQuery(query, ""p.ID"", SEPARATOR + ""portfolios p"");"
88531,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,92,,"    helpTestHashIndexForQuery(query, ""p.ID"", SEPARATOR + ""portfolios p"");"
88532,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,100,,"    index = qs.createHashIndex(""idHash"", indexedExpression, regionPath);"
88533,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,137,,"    createLocalRegion(""portfolios"");"
88534,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,146,,"        ""SELECT * FROM "" + SEPARATOR + ""portfolios p WHERE p.ID = 1 OR p.ID = 2"", ""p.ID"","
88535,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,165,,"        ""SELECT * FROM "" + SEPARATOR + ""portfolios p WHERE p.status = 'inactive'"", ""p.status"","
88536,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,304,,"    helpTestHashIndexForQuery(""Select * FROM "" + SEPARATOR + ""portfolios p where p.ID = 1"");"
88537,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,304,,"    helpTestHashIndexForQuery(""Select * FROM "" + SEPARATOR + ""portfolios p where p.ID = 1"");"
88538,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,335,,"    Index index = qs.createHashIndex(""index2"", ""p2.ID"", SEPARATOR + ""portfolios2 p2"");"
88539,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,335,,"    Index index = qs.createHashIndex(""index2"", ""p2.ID"", SEPARATOR + ""portfolios2 p2"");"
88540,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,335,,"    Index index = qs.createHashIndex(""index2"", ""p2.ID"", SEPARATOR + ""portfolios2 p2"");"
88541,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,337,,"        ""Select * FROM "" + SEPARATOR + ""portfolios p, "" + SEPARATOR"
88542,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,338,,"            + ""portfolios2 p2 where (p.ID = 1 or p.ID = 2 )and p.ID = p2.ID"");"
88543,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,633,,"    helpTestHashIndexForQuery(""Select * FROM "" + SEPARATOR + ""portfolios p where p.ID != 1"");"
88544,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,1043,,"    params[0] = new Identifier(""Customer"" + 1);"
88545,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/HashIndexQueryIntegrationTest.java,1121,,"        (SelectResults) qs.newQuery(""Select * FROM "" + SEPARATOR + ""portfolios p where p.ID = 5"")"
88546,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexCreationInternalsJUnitTest.java,154,,"      Region rgn = CacheUtils.createRegion(""dummy"", null);"
88547,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,123,,"            ""<hint 'FirstIndex'> select * from "" + SEPARATOR + ""Portfolios p where p.ID > 10"");"
88548,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,128,,"    assertTrue(qec.isHinted(""FirstIndex""));"
88549,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,178,,"    createIndex(""IDIndex"", ""p.ID"", SEPARATOR + ""Portfolios p"");"
88550,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,178,,"    createIndex(""IDIndex"", ""p.ID"", SEPARATOR + ""Portfolios p"");"
88551,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,178,,"    createIndex(""IDIndex"", ""p.ID"", SEPARATOR + ""Portfolios p"");"
88552,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,185,,"        qs.newQuery(""<hint 'IDIndex'>select * from "" + SEPARATOR + ""Portfolios p where p.ID > 10"");"
88553,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,200,,"    createIndex(""SecIndex"", ""p.secId"", SEPARATOR + ""Portfolios p"");"
88554,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,207,,"        qs.newQuery(""<hint 'SecIndex'>select * from "" + SEPARATOR + ""Portfolios p where p.ID > 10"");"
88555,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,223,,"    createIndex(""SecIndex"", ""p.status"", SEPARATOR + ""Portfolios p"");"
88556,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,251,,"        new String[] {""<query with hints>""});"
88557,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,270,,"            + ""Portfolios p where p.ID > 10 and p.ID < 200 and p.status = 'inactive'"");"
88558,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,338,,"    createIndex(""DescriptionIndex"", ""p.description"", SEPARATOR + ""Portfolios p"");"
88559,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,338,,"    createIndex(""DescriptionIndex"", ""p.description"", SEPARATOR + ""Portfolios p"");"
88560,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,398,,"            + ""Portfolios p where p.ID > 10 and p.ID < 200 and p.status = 'inactive' and p.description IN (select p.description from """
88561,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,399,,"            + SEPARATOR + ""Portfolios p where p.ID > 10)"");"
88562,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexHintJUnitTest.java,451,,"        ""select * from "" + SEPARATOR"
88563,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintainceJUnitTest.java,78,,"      region = CacheUtils.createRegion(""portfolio"", Portfolio.class);"
88564,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintainceJUnitTest.java,99,,"        SEPARATOR + ""portfolio pf"");"
88565,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintainceJUnitTest.java,106,,"    Index i6 = qs.createIndex(""sIndex"", IndexType.FUNCTIONAL, ""pos.secId"","
88566,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintainceJUnitTest.java,115,,"      fail(""Mismatch found among fromClauses or IndexedExpressions"");"
88567,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintainceJUnitTest.java,117,,"    if (!i2.getCanonicalizedFromClause().equals(SEPARATOR + ""portfolio index_iter1"")"
88568,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintainceJUnitTest.java,358,,"              ""Select * from "" + SEPARATOR + ""portfolio pf where pf.position1.secId > '2'"",};"
88569,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,76,,"    region = CacheUtils.createRegion(""portfolio"", Portfolio.class);"
88570,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,103,,"    region = CacheUtils.createRegion(""portfolio1"", null);"
88571,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,113,,"        qs.createIndex(""indx1"", IndexType.FUNCTIONAL, ""pf.getID()"", SEPARATOR + ""portfolio1 pf"");"
88572,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,113,,"        qs.createIndex(""indx1"", IndexType.FUNCTIONAL, ""pf.getID()"", SEPARATOR + ""portfolio1 pf"");"
88573,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,285,,"    Index i1 = qs.createIndex(""indx1"", IndexType.FUNCTIONAL, ""pf.getID"","
88574,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,442,,"        mkid.maap.put(""key"" + j, ""val"" + j);"
88575,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,442,,"        mkid.maap.put(""key"" + j, ""val"" + j);"
88576,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,448,,"        qs.createIndex(""Index1"", IndexType.FUNCTIONAL, ""objs.maap[*]"", SEPARATOR + ""testRgn objs"");"
88577,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,505,,"    mkid.maap.put(""key7"", ""val7"");"
88578,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,505,,"    mkid.maap.put(""key7"", ""val7"");"
88579,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,562,,"    mkid.maap.put(""key1"", ""val2"");"
88580,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,562,,"    mkid.maap.put(""key1"", ""val2"");"
88581,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexMaintenanceJUnitTest.java,572,,"        assertTrue(rng.valueToEntriesMap.containsKey(""val1""));"
88582,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java,88,,"    keyIndex1 = (IndexProtocol) qs.createIndex(""multiKeyIndex1"", IndexType.FUNCTIONAL, ""pos.secId"","
88583,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java,109,,"    String queryStr = ""select * from "" + SEPARATOR"
88584,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,66,,"    region = CacheUtils.createRegion(""pos"", Portfolio.class);"
88585,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,73,,"    qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"", SEPARATOR + ""pos"");"
88586,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,100,,"            ""SELECT DISTINCT * FROM "" + SEPARATOR + ""pos where "" + testData[j][0] + "" "" + operator"
88587,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,223,,"    qs.createIndex(""pkIndex"", IndexType.PRIMARY_KEY, ""pk"", SEPARATOR + ""pos"");"
88588,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,253,,"    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(""testRgn"", null);"
88589,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,261,,"        mkid.maap.put(""key1"", j * 1);"
88590,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,262,,"        mkid.maap.put(""key2"", j * 2);"
88591,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,263,,"        mkid.maap.put(""key3"", j * 3);"
88592,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,280,,"      CacheUtils.getLogger().info(""Executing query: "" + queries[i]);"
88593,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,282,,"      CacheUtils.log(""Executed query: "" + queries[i]);"
88594,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,286,,"        qs.createIndex(""Index1"", IndexType.FUNCTIONAL, ""objs.maap[*]"", SEPARATOR + ""testRgn objs"");"
88595,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,286,,"        qs.createIndex(""Index1"", IndexType.FUNCTIONAL, ""objs.maap[*]"", SEPARATOR + ""testRgn objs"");"
88596,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,295,,"      CacheUtils.log(""Executing query: "" + queries[i] + "" with index created"");"
88597,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,355,,"        qs.createIndex(""Index2"", IndexType.FUNCTIONAL, ""objs.liist[0]"", SEPARATOR + ""testRgn objs"");"
88598,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,398,,"    evaluateMapTypeIndexUsage(""objs.maap['key2','key3']"", SEPARATOR + ""testRgn objs"", queries,"
88599,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,528,,"    Index i1 = qs.createIndex(""Index1"", IndexType.FUNCTIONAL, ""p.ID"", SEPARATOR + ""testRgn p"");"
88600,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,528,,"    Index i1 = qs.createIndex(""Index1"", IndexType.FUNCTIONAL, ""p.ID"", SEPARATOR + ""testRgn p"");"
88601,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,552,,"        fail(""Index is NOT uesd"");"
88602,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,887,,"        qs.createIndex(""Index1"", IndexType.FUNCTIONAL, ""p.status"","
88603,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,888,,"            SEPARATOR + ""testRgn p, p.positions"");"
88604,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,901,,"        ""<trace> SELECT * FROM "" + SEPARATOR"
88605,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1010,,"            + ""testRgn itr1  WHERE itr1.testFields['string'] = '1'"","
88606,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1012,,"                + ""testRgn itr1  WHERE itr1.testFields['double'] > 1D"","
88607,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1014,,"                + ""testRgn itr1  WHERE itr1.testFields['integer'] > 1"","
88608,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1016,,"                + ""testRgn itr1  WHERE itr1.testFields['long'] > 1L""};"
88609,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1019,,"            + ""testRgn itr1  WHERE itr1.testFields.get('string') = '1'"","
88610,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1021,,"                + ""testRgn itr1  WHERE itr1.testFields.get('double') > 1D"","
88611,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1023,,"                + ""testRgn itr1  WHERE itr1.testFields.get('integer') > 1"","
88612,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1025,,"                + ""testRgn itr1  WHERE itr1.testFields.get('long') > 1L""};"
88613,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1026,,"    evaluateMapTypeIndexUsage(""itr1.testFields[*]"", SEPARATOR + ""testRgn itr1"", queries,"
88614,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1254,,"    String[] queries = {""SELECT DISTINCT * FROM "" + SEPARATOR + ""pos p1, "" + SEPARATOR"
88615,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1264,,"        ""SELECT * FROM "" + SEPARATOR + ""pos p1, "" + SEPARATOR + ""pos p2 where p1.ID = p2.ID"","
88616,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1279,,"        fail(""Query "" + q.getQueryString() + "" should have returned results"");"
88617,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java,1279,,"        fail(""Query "" + q.getQueryString() + "" should have returned results"");"
88618,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,145,,"           */ ""select distinct * from "" + SEPARATOR + ""Portfolios1 pf1, pf1.positions.values pos1, """
88619,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,145,,"           */ ""select distinct * from "" + SEPARATOR + ""Portfolios1 pf1, pf1.positions.values pos1, """
88620,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,146,,"              + SEPARATOR + ""Portfolios2 pf2, "" + SEPARATOR + ""Countries1 c1, "" + SEPARATOR"
88621,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,146,,"              + SEPARATOR + ""Portfolios2 pf2, "" + SEPARATOR + ""Countries1 c1, "" + SEPARATOR"
88622,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,147,,"              + ""Countries2 c2 """
88623,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,149,,"          /* 3 */ ""select distinct * from "" + SEPARATOR + ""Portfolios1 pf1, "" + SEPARATOR"
88624,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,152,,"          /* 4 */ ""Select distinct * """
88625,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,153,,"              + ""from "" + SEPARATOR + ""Portfolios1 pfos, pfos.positions.values Pos1, "" + SEPARATOR"
88626,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,154,,"              + ""Countries1 c1, "" + SEPARATOR + ""Countries2 c2, "" + SEPARATOR + ""Countries3 c3, """
88627,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,154,,"              + ""Countries1 c1, "" + SEPARATOR + ""Countries2 c2, "" + SEPARATOR + ""Countries3 c3, """
88628,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,155,,"              + SEPARATOR + ""Portfolios3 pfo3 """
88629,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,162,,"          /* 6 */ ""Select distinct * "" + ""from "" + SEPARATOR + ""Portfolios1 pfos, """
88630,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,163,,"              + ""pfos.positions.values Pos1, """
88631,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,166,,"              + ""where Pos1.secId = 'YHOO' or "" + ""c1.name = c2.name or """
88632,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,167,,"              + ""pfo3.status != 'inactive' or "" + ""pfo3.status = pfos.status "","
88633,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,172,,"              + ""Portfolios3 pfo3 "" + ""where """
88634,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,173,,"              + ""c1.name = c2.name or "" + ""ct1.name != 'PUNE' or """
88635,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,179,,"              + ""c1.name = c2.name and """
88636,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,180,,"              + ""ct1.name != 'PUNE' and "" + ""villgs1.name = 'MAHARASHTRA_VILLAGE1'"","
88637,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,184,,"              + ""Countries1 c1, c1.states sts1, sts1.districts dists1, dists1.cities ct1, dists1.villages villgs1, """
88638,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,185,,"              + SEPARATOR + ""Countries2 c2, c2.states s2, """
88639,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,187,,"              + ""Countries3 c3, c3.states sts3, sts3.districts dists3, dists3.cities ct3, dists3.villages villgs3 """
88640,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,189,,"              + ""villgs1.name = 'MAHARASHTRA_VILLAGE1' or "" + ""villgs1.name = villgs3.name or """
88641,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,189,,"              + ""villgs1.name = 'MAHARASHTRA_VILLAGE1' or "" + ""villgs1.name = villgs3.name or """
88642,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,190,,"              + ""s2.name = 'PUNJAB' or "" + ""ct1.name = ct3.name and """
88643,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,190,,"              + ""s2.name = 'PUNJAB' or "" + ""ct1.name = ct3.name and """
88644,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,191,,"              + ""dists3.name = 'MUMBAIDIST'"","
88645,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,219,,"              + ""villgs1.name = 'MAHARASHTRA_VILLAGE1' and "" + ""villgs1.name = villgs3.name or """
88646,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,266,,"              + ""where Pos1.secId = 'YHOO' and """
88647,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,267,,"              + ""c1.name = c2.name or "" + ""pfo3.status != 'inactive' and """
88648,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,320,,"              + ""(c1.name = c2.name or "" + ""pfo3.status != 'inactive') and """
88649,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,518,,"    qs.createIndex(""Portfolio1IdIdx1"", IndexType.FUNCTIONAL, ""pf.ID"","
88650,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexedMergeEquiJoinScenariosJUnitTest.java,522,,"    qs.createIndex(""Portfolio1statusIdx1"", IndexType.FUNCTIONAL, ""pf.status"","
88651,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,69,,"        CacheUtils.getCache().createRegionFactory(RegionShortcut.REPLICATE).create(""portfolio"");"
88652,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,76,,"    keyIndex1 = qs.createIndex(INDEX_NAME, ""positions[*]"", SEPARATOR + ""portfolio "");"
88653,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,76,,"    keyIndex1 = qs.createIndex(INDEX_NAME, ""positions[*]"", SEPARATOR + ""portfolio "");"
88654,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,79,,"        .newQuery(""select * from "" + SEPARATOR + ""portfolio p where p.positions['SUN'] = null"")"
88655,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,79,,"        .newQuery(""select * from "" + SEPARATOR + ""portfolio p where p.positions['SUN'] = null"")"
88656,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,135,,"    keyIndex1 = qs.createIndex(INDEX_NAME, ""positions['SUN', 'IBM']"", SEPARATOR + ""portfolio p"");"
88657,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,194,,"    map1.put(""SUN"", new TestObject(""SUN"", 1));"
88658,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,195,,"    map1.put(""IBM"", new TestObject(""IBM"", 2));"
88659,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,209,,"    map2.put(""YHOO"", new TestObject(""YHOO"", 3));"
88660,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,653,,"                + ""portfolio p where p.positions['SUN'] = 1 OR p.positions['IBM'] = 2"")"
88661,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,771,,"        .newQuery(""select * from "" + SEPARATOR + ""portfolio p where p.positions['SUN'] = 1"")"
88662,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,804,,"        .newQuery(""select * from "" + SEPARATOR + ""portfolio p where p.positions['SUN'] = 3"")"
88663,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,828,,"    map2.put(""GOOG"", 1);"
88664,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,854,,"        .newQuery(""select * from "" + SEPARATOR + ""portfolio p where p.positions['GOOG'] = 1"")"
88665,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java,1013,,"        .newQuery(""select * from "" + SEPARATOR + ""portfolio p where p.positions['IBM'] = 2"")"
88666,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/NewDeclarativeIndexCreationJUnitTest.java,80,,"    Region root = this.cache.getRegion(SEPARATOR + ""root"" + SEPARATOR + ""portfolios"");"
88667,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/PartitionedIndexJUnitTest.java,118,,"        ""dummyString"", region, ""dummyString"", ""dummyString"", ""dummyString"");"
88668,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/PartitionedRegionEquiJoinIntegrationTest.java,43,,"    region1 = createPartitionRegion(""region1"");"
88669,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/QueryOnCompressedRegionWithIndexTest.java,132,,"    String indexName = this.region.getName() + ""_index"";"
88670,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/QueryOnCompressedRegionWithIndexTest.java,133,,"    createIndex(indexName, ""status"", this.region.getFullPath());"
88671,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,62,,"    region = CacheUtils.createRegion(""portfolios"", Portfolio.class);"
88672,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,86,,"        (AbstractIndex) qs.createIndex(""idIndex"", IndexType.FUNCTIONAL, ""ID"","
88673,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,88,,"    AbstractIndex i2 = (AbstractIndex) qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"","
88674,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,88,,"    AbstractIndex i2 = (AbstractIndex) qs.createIndex(""statusIndex"", IndexType.FUNCTIONAL, ""status"","
88675,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,90,,"    AbstractIndex i3 = (AbstractIndex) qs.createIndex(""status.toString()"", IndexType.FUNCTIONAL,"
88676,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,91,,"        ""status.toString"", SEPARATOR + ""portfolios"");"
88677,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java,95,,"        new DefaultQuery(""select * from "" + SEPARATOR + ""portfolios"", CacheUtils.getCache(), false);"
88678,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java,73,,"    region = CacheUtils.createRegion(""portfolio"", af.create(), false);"
88679,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java,126,,"    String queryStr = ""select * from "" + SEPARATOR"
88680,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java,245,,"        ""positions['DELL', 'YHOO']"", SEPARATOR + ""portfolio p"");"
88681,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java,269,,"            + ""portfolio where positions['DELL'] != NULL OR positions['YHOO'] != NULL"";"
88682,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRQueryJUnitTest.java,148,,"        .writeString(""domain"", ""domain1"").create());"
88683,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRQueryJUnitTest.java,148,,"        .writeString(""domain"", ""domain1"").create());"
88684,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRQueryJUnitTest.java,158,,"        .writeString(""domain"", ""domain2"").create());"
88685,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,76,,"    currRegion = cache.createRegion(""portfolios"", regionAttributes);"
88686,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,95,,"        currRegion.put(""key"" + i, new Portfolio(i));"
88687,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,99,,"      q = qs.newQuery(""select distinct * from "" + SEPARATOR + ""portfolios where ID != 53"");"
88688,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,102,,"        fail(""NO INDEX WAS USED, IT WAS EXPECTED TO BE USED"");"
88689,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,105,,"        fail(""Query result not of expected size"");"
88690,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,113,,"      ta = (UserTransaction) ctx.lookup(""java:/UserTransaction"");"
88691,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,134,,"      q = qs.newQuery(""select distinct * from "" + SEPARATOR + ""portfolios where status = 'active'"");"
88692,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,280,,"    Region region = cache.createRegion(""sample"", af.create());"
88693,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,281,,"    qs.createIndex(""foo"", IndexType.FUNCTIONAL, ""age"", SEPARATOR + ""sample"");"
88694,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,286,,"    region.create(x, new Person(""xyz"", 45));"
88695,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,288,,"    Query q = qs.newQuery(""select * from "" + SEPARATOR + ""sample where age < 50"");"
88696,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,338,,"        ""select status from "" + SEPARATOR + ""sample where status = 'active'"","
88697,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/query/transaction/QueryAndJtaJUnitTest.java,342,,"        ""select pos.secId from "" + SEPARATOR"
88698,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/CacheSnapshotJUnitTest.java,39,,"            rt, ""test-"" + rt.name() + ""-"" + st.name());"
88699,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/RegionSnapshotJUnitTest.java,56,,"        String name = ""test-"" + type.name() + ""-"" + st.name();"
88700,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/RegionSnapshotJUnitTest.java,70,,"          assertEquals(""Comparison failure for "" + type.name() + ""/"" + st.name(), expected, read);"
88701,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/cache30/DiskRegionIntegrationTest.java,119,,"    IntStream.range(0, MAX_ENTRIES + 1).forEach((i) -> region.put(i, ""value""));"
88702,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/LocatorIntegrationTest.java,115,,"    configProperties.setProperty(ENABLE_CLUSTER_CONFIGURATION, ""false"");"
88703,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/LocatorLauncherIntegrationTest.java,96,,"        .setMemberName(""memberOne"")"
88704,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/LocatorLauncherIntegrationTest.java,255,,"        ""Locator"", ""Locator"");"
88705,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/LocatorLauncherJmxManagerLocalRegressionTest.java,76,,"        .set(JMX_MANAGER, ""true"")"
88706,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/LocatorLauncherJmxManagerRemoteRegressionTest.java,50,,"        addJvmArgument(""-D"" + JMX_MANAGER + ""=true"")"
88707,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/ServerLauncherBuilderIntegrationTest.java,97,,"        .setMemberName(""memberOne"")"
88708,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/ServerLauncherBuilderIntegrationTest.java,271,,"        ""Server"", ""Server"");"
88709,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/ServerLauncherIntegrationTest.java,96,,"        .setMemberName(""memberOne"")"
88710,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/ServerLauncherIntegrationTest.java,257,,"        ""Server"", ""Server"");"
88711,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemJUnitTest.java,131,,"      fail(""Should have thrown an IllegalArgumentException"");"
88712,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemJUnitTest.java,351,,"    props.put(STATISTIC_SAMPLING_ENABLED, ""true"");"
88713,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemJUnitTest.java,409,,"    String fileName = ""blah"";"
88714,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemJUnitTest.java,745,,"    props.setProperty(SSL_ENABLED_COMPONENTS, ""all"");"
88715,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemJUnitTest.java,750,,"        ""When using ssl-enabled-components one cannot use any other SSL properties other than """
88716,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemJUnitTest.java,751,,"            + ""cluster-ssl-* or the corresponding aliases"");"
88717,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalDistributedSystemLockMemoryIntegrationTest.java,61,,"    System.setProperty(GeodeGlossary.GEMFIRE_PREFIX + ""Cache.ALLOW_MEMORY_OVERCOMMIT"", ""true"");"
88718,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotIntegrationTest.java,53,,"    final ServerLocation l1 = new ServerLocation(""localhost"", 1);"
88719,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/deadlock/DeadlockDetectorIntegrationTest.java,105,,"    detector.addDependencies(DeadlockDetector.collectAllDependencies(""here""));"
88720,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/deadlock/DeadlockDetectorIntegrationTest.java,108,,"    System.out.println(""deadlocks="" + DeadlockDetector.prettyFormat(deadlocks));"
88721,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/locks/DLockServiceDisconnectIntegrationTest.java,53,,"    assertThat(lockService.lock(""MyLock"", 0, -1)).isTrue();"
88722,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java,182,,"          assertTrue(""view = "" + mgr2.getView(), mgr2.getView().size() == 2);"
88723,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/api/CoreOnlyUsesMembershipAPIArchUnitTest.java,66,,"        ""org.apache.geode.distributed.internal.membership.."");"
88724,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/tcpserver/TCPClientSSLIntegrationTest.java,86,,"        .commonName(""tcp-server"")"
88725,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/tcpserver/TCPClientSSLIntegrationTest.java,165,,"        .commonName(""tcp-client"")"
88726,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java,81,,"  @Parameters({""true"", ""false""})"
88727,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java,81,,"  @Parameters({""true"", ""false""})"
88728,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java,82,,"  @TestCaseName(""{method}(useMembershipPortRange={0})"")"
88729,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/InlineKeyJUnitTest.java,78,,"      assertTrue(""expected string entry but was "" + lr.getRegionEntry(key).getClass(),"
88730,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/PdxDeleteFieldJUnitTest.java,87,,"            PdxValue.class.getName(), ""fieldToDelete"");"
88731,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/PdxDeleteFieldJUnitTest.java,138,,"          assertEquals(1, pi.getField(""value""));"
88732,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/PdxRenameJUnitTest.java,135,,"    assertEquals(null, DiskStoreImpl.replacePdxRenamePattern(pattern, """", ""FOOBAR""));"
88733,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/PdxRenameJUnitTest.java,139,,"    assertEquals(""bar"", DiskStoreImpl.replacePdxRenamePattern(pattern, ""foo"", ""bar""));"
88734,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,50,,"      r.put(""bytesValue"", bytesValue.clone());"
88735,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,52,,"        fail(""expected replace to fail"");"
88736,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,55,,"        fail(""expected replace to happen"");"
88737,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,59,,"        fail(""expected remove to fail"");"
88738,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,62,,"        fail(""expected remove to happen"");"
88739,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,67,,"      r.put(""booleanValue"", booleanValue.clone());"
88740,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,84,,"      r.put(""shortValue"", shortValue.clone());"
88741,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,101,,"      r.put(""charValue"", charValue.clone());"
88742,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,118,,"      r.put(""intValue"", intValue.clone());"
88743,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,135,,"      r.put(""longValue"", longValue.clone());"
88744,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,152,,"      r.put(""floatValue"", floatValue.clone());"
88745,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,169,,"      r.put(""doubleValue"", doubleValue.clone());"
88746,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/RegionOperationsEqualityShouldUseArrayEqualsIntegrationTest.java,187,,"      r.put(""oaValue"", oaValue);"
88747,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/SSLConfigJUnitTest.java,96,,"    SSL_PROPS_MAP.put(""javax.net.ssl.keyStoreType"", ""jks"");"
88748,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/SSLConfigJUnitTest.java,222,,"    String sslprotocols = ""any"";"
88749,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/SSLConfigJUnitTest.java,233,,"    sslciphers = ""RSA_WITH_GARBAGE"";"
88750,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/SSLConfigJUnitTest.java,242,,"    sslprotocols = ""SSLv7"";"
88751,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/SSLConfigJUnitTest.java,839,,"    String sslprotocols = ""overrriden"";"
88752,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/ScheduledThreadPoolExecutorWithKeepAliveJUnitTest.java,59,,"          fail(""interrupted"");"
88753,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ClusterConfigurationLoaderIntegrationTest.java,52,,"    locator.withProperty(""enable-cluster-configuration"", ""false"").startLocator();"
88754,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,91,,"    File crfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_1.crf"");"
88755,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,91,,"    File crfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_1.crf"");"
88756,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,92,,"    File drfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_1.drf"");"
88757,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,93,,"    File ifFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + "".if"");"
88758,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,100,,"    r.put(""key1"", ""value1"");"
88759,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,100,,"    r.put(""key1"", ""value1"");"
88760,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,101,,"    r.put(""key2"", ""value2"");"
88761,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,101,,"    r.put(""key2"", ""value2"");"
88762,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,154,,"    File krfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_1.krf"");"
88763,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,164,,"    r.put(""key1"", ""update1"");"
88764,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,165,,"    r.put(""key2"", ""update2"");"
88765,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,189,,"    crfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_2.crf"");"
88766,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,190,,"    drfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_2.drf"");"
88767,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,194,,"      krfFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + ""_2.krf"");"
88768,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,332,,"    r.create(""key3"", ""value3"");"
88769,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,332,,"    r.create(""key3"", ""value3"");"
88770,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,435,,"    r2.put(""r2key1"", ""rwvalue1"");"
88771,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,435,,"    r2.put(""r2key1"", ""rwvalue1"");"
88772,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,610,,"    r.put(""key0"", ""value0""); // extra key to keep oplog1 from being empty"
88773,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CompactOfflineDiskStoreJUnitTest.java,610,,"    r.put(""key0"", ""value0""); // extra key to keep oplog1 from being empty"
88774,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentFlushingAndRegionOperationsJUnitTest.java,52,,"          region.put(""Key"", ""Value2"");"
88775,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentFlushingAndRegionOperationsJUnitTest.java,52,,"          region.put(""Key"", ""Value2"");"
88776,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentFlushingAndRegionOperationsJUnitTest.java,58,,"    region.put(""Key"", ""Value1"");"
88777,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentFlushingAndRegionOperationsJUnitTest.java,64,,"      logWriter.error(""Exception occurred"", e);"
88778,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentFlushingAndRegionOperationsJUnitTest.java,65,,"      fail(""Entry not found although was supposed to be there"");"
88779,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentFlushingAndRegionOperationsJUnitTest.java,131,,"      fail(""EntryNotFoundException was expected but did not get it"");"
88780,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentMapLocalJUnitTest.java,48,,"    Object value = ""value"";"
88781,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentMapLocalJUnitTest.java,51,,"      fail(""expected UnsupportedOperationException"");"
88782,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentMapLocalJUnitTest.java,90,,"    assertEquals(""value"", r.replace(key, ""value2""));"
88783,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRegionOperationsJUnitTest.java,371,,"            fail(""interrupted"");"
88784,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRegionOperationsJUnitTest.java,761,,"  @SuppressWarnings(""synthetic-access"")"
88785,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,59,,"        region.put(""Key"", ""Value2"");"
88786,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,59,,"        region.put(""Key"", ""Value2"");"
88787,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,70,,"    region.put(""Key"", ""Value1"");"
88788,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,78,,"          throw new AssertionError(""exception not expected here"", e);"
88789,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,85,,"      logWriter.error(""Exception occurred"", e);"
88790,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,86,,"      throw new AssertionError(""Entry not found although was supposed to be there"", e);"
88791,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,163,,"      fail(""EntryNotFoundException was expected but did not get it"");"
88792,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConcurrentRollingAndRegionOperationsJUnitTest.java,395,,"  @Ignore(""TODO:DARREL_DISABLE: test is disabled"")"
88793,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ConflationJUnitTest.java,84,,"      logWriter.error(""Exception occurred"", e);"
88794,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/CreatePRWithLocalExpirationRegressionTest.java,66,,"    assertThatThrownBy(() -> cache.createRegion(""region1"", attributesFactory.create()))"
88795,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskIFJUnitTest.java,788,,"    store.addPersistentPR(""pr1"", config);"
88796,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskIFJUnitTest.java,789,,"    store.addPersistentPR(""pr2"", config);"
88797,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskInitFileJUnitTest.java,80,,"    int id1 = dif.getOrCreateCanonicalId(""object1"");"
88798,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskInitFileJUnitTest.java,81,,"    int id2 = dif.getOrCreateCanonicalId(""object2"");"
88799,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskLruRegRecoveryJUnitTest.java,172,,"    System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""true"");"
88800,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskOldAPIsJUnitTest.java,116,,"    r.put(""key"", ""value"");"
88801,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskOldAPIsJUnitTest.java,116,,"    r.put(""key"", ""value"");"
88802,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,70,,"    System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""false"");"
88803,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,83,,"        System.out.println(""Time taken to recover = "" + (t2 - t1) + "" for total number of entries= """
88804,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,83,,"        System.out.println(""Time taken to recover = "" + (t2 - t1) + "" for total number of entries= """
88805,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,84,,"            + region.size() + "" with recover values as false  and rolling disabled "");"
88806,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,87,,"              .println(""Recovery rate is= "" + region.size() / (t2 - t1) + "" per milliseconds"");"
88807,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,87,,"              .println(""Recovery rate is= "" + region.size() / (t2 - t1) + "" per milliseconds"");"
88808,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRandomOperationsAndRecoveryJUnitTest.java,112,,"    System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""true"");"
88809,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegOplogSwtchingAndRollerJUnitTest.java,138,,"      logWriter.error(""exception not expected"", e);"
88810,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegOplogSwtchingAndRollerJUnitTest.java,139,,"      fail(""FAILED::"" + e.toString());"
88811,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegOplogSwtchingAndRollerJUnitTest.java,197,,"      fail("" tests failed due to "" + e);"
88812,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegOplogSwtchingAndRollerJUnitTest.java,814,,"        region.put(""key"" + i, ""val"" + i);"
88813,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegOplogSwtchingAndRollerJUnitTest.java,895,,"    assertTrue(""diskSizes != 1048576 "", diskSizes1[0] == 1048576);"
88814,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,81,,"    diskProps.setRegionName(""RecoveryTestRegion"");"
88815,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,91,,"      region.put(""100"", new byte[1024]);"
88816,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,92,,"      region.put(""101"", ""101"");"
88817,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,93,,"      region.put(""102"", new Character('a'));"
88818,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,94,,"      region.put(""103"", new Byte(""103""));"
88819,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,95,,"      region.put(""104"", Boolean.TRUE);"
88820,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,96,,"      region.put(""105"", new Short(""105""));"
88821,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,97,,"      region.put(""106"", new Integer(106));"
88822,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,98,,"      region.put(""107"", new Long(107L));"
88823,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,99,,"      region.put(""108"", new Float(108F));"
88824,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,100,,"      region.put(""109"", new Double(109d));"
88825,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,131,,"        fail("" failure in creation of cache due to "" + e);"
88826,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,150,,"      region.put(""110"", new String(""110""));"
88827,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,151,,"      region.put(""111"", new Character('b'));"
88828,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,152,,"      region.put(""112"", new Byte(""112""));"
88829,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,153,,"      region.put(""113"", new Boolean(false));"
88830,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,154,,"      region.put(""114"", new Short(""114""));"
88831,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,155,,"      region.put(""115"", new Integer(115));"
88832,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,156,,"      region.put(""116"", new Long(116L));"
88833,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,157,,"      region.put(""117"", new Float(117F));"
88834,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,158,,"      region.put(""118"", new Double(118d));"
88835,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,159,,"      region.put(""119"", new byte[0]);"
88836,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,191,,"        logWriter.fine(""Cache closed"");"
88837,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,205,,"        logWriter.fine(""Cache created to test the recovery.."");"
88838,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,528,,"    System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""true"");"
88839,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,554,,"          fail(""Entry not found not expected but occurred "");"
88840,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,586,,"    System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""false"");"
88841,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,787,,"        ""<ExpectedException action=add>"" + ""KillCompactorException"" + ""</ExpectedException>"");"
88842,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegRecoveryJUnitTest.java,787,,"        ""<ExpectedException action=add>"" + ""KillCompactorException"" + ""</ExpectedException>"");"
88843,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionAsyncRecoveryJUnitTest.java,63,,"          fail(""interrupted"");"
88844,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionIllegalArguementsJUnitTest.java,75,,"      fail(""expected IllegalArgumentException"");"
88845,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionIllegalArguementsJUnitTest.java,79,,"    assertEquals(1, dsf.create(""test"").getMaxOplogSize());"
88846,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,293,,"    region.put(""invalid"", ""invalid"");"
88847,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,302,,"    region.put(""localinvalid"", ""localinvalid"");"
88848,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,311,,"    region.put(""byteArray"", new byte[0]);"
88849,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,317,,"    region.put(""modified"", ""originalValue"");"
88850,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,417,,"    assertThat(puts.putSuccessful(0)).as("" first put did not succeed"").isTrue();"
88851,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,883,,"    region.invalidate(""key1"");"
88852,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,1195,,"    region.create(""key1"", ""value1"");"
88853,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,1337,,"    Throwable thrown = catchThrowable(() -> region.put(""key1"", ""value2""));"
88854,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,1573,,"    region.create(""key2"", ""value2"");"
88855,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java,1610,,"    Throwable thrown = catchThrowable(() -> region.create(""key3"", ""value3""));"
88856,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskStoreFactoryIntegrationTest.java,241,,"    String name = ""testDestroy"";"
88857,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskStoreFactoryIntegrationTest.java,290,,"  @SuppressWarnings(""deprecation"")"
88858,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskStoreFactoryIntegrationTest.java,295,,"    File ifFile = new File(diskStore.getDiskDirs()[0], ""BACKUP"" + name + DiskInitFile.IF_FILE_EXT);"
88859,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskStoreImplIntegrationTest.java,113,,"    diskDirs[0] = temporaryDirectory.newFolder(""dir1"");"
88860,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskStoreImplIntegrationTest.java,114,,"    diskDirs[1] = temporaryDirectory.newFolder(""dir2"");"
88861,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/LIFOEvictionAlgoEnabledRegionJUnitTest.java,187,,"      fail(""Test failed"");"
88862,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/LIFOEvictionAlgoEnabledRegionJUnitTest.java,205,,"      assertTrue(""Entry count not 0 "", new Long(0).equals(new Long(lifoStats.getCounter())));"
88863,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/LIFOEvictionAlgoMemoryEnabledRegionJUnitTest.java,191,,"      fail(""Test failed"");"
88864,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/LIFOEvictionAlgoMemoryEnabledRegionJUnitTest.java,318,,"      assertTrue(""Value = "" + tailValue.getValue(), tailValue.value == 3);"
88865,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/LIFOEvictionAlgoMemoryEnabledRegionJUnitTest.java,319,,"      assertTrue(""LIFO Queue Size = "" + lifoClockHand.size(), lifoClockHand.size() == 2);"
88866,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/MapInterface2JUnitTest.java,51,,"    Region region = CacheUtils.createRegion(""Portfolios"", Portfolio.class);"
88867,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/MapInterface2JUnitTest.java,199,,"      region.put(""test"", ""test"");"
88868,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/MapInterfaceJUnitTest.java,60,,"      region = cache.createRegion(""testingRegion"", factory.create());"
88869,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/MapInterfaceJUnitTest.java,62,,"      throw new AssertionError("" failed due to "", e);"
88870,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogFlushTest.java,153,,"    assertNotNull(""Unexpected null Oplog[] for "" + dr.getName(), oplogs);"
88871,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogFlushTest.java,154,,"    assertNotNull(""Unexpected null Oplog"", oplogs[0]);"
88872,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,270,,"      logWriter.error(""Exception occurred"", e1);"
88873,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,619,,"    region.put(""key1"", val);"
88874,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,620,,"    region.put(""key2"", val);"
88875,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,807,,"      region.put(""key3"", val);"
88876,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,848,,"    DiskStore ds = dsf.create(""test"");"
88877,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,1443,,"    region.put(""key"", ""createValue"");"
88878,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,1653,,"      assertEquals(18000, getOplogFileSizeSum(dirs[0], "".crf""));"
88879,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,1654,,"      assertEquals(2000, getOplogFileSizeSum(dirs[0], "".drf""));"
88880,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,1674,,"        if (name.endsWith("".krf"") || name.endsWith("".crf"") || name.endsWith("".drf"")) {"
88881,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OplogJUnitTest.java,1735,,"    verifyOplogHeader(dirs[0], "".if"", "".crf"", "".drf"");"
88882,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/OverflowOplogFlushTest.java,154,,"    assertNotNull(""Unexpected null Oplog for "" + dr.getName(), oplog);"
88883,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PRConcurrentMapOpsJUnitTest.java,121,,"    assertEquals(""Size doesn't return expected value"", end, size);"
88884,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PRConcurrentMapOpsJUnitTest.java,122,,"    assertFalse(""isEmpty doesnt return proper state of the PartitionedRegion"", pr.isEmpty());"
88885,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PRConcurrentMapOpsJUnitTest.java,127,,"      assertEquals(""for i="" + i, Integer.toString(i), putResult);"
88886,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleNodeOperationsJUnitTest.java,109,,"    logger.info(""<ExpectedException action=add>"" + expectedExceptions + ""</ExpectedException>"");"
88887,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleNodeOperationsJUnitTest.java,109,,"    logger.info(""<ExpectedException action=add>"" + expectedExceptions + ""</ExpectedException>"");"
88888,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleNodeOperationsJUnitTest.java,120,,"    logger.info(""<ExpectedException action=remove>"" + expectedExceptions + ""</ExpectedException>"");"
88889,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleNodeOperationsJUnitTest.java,675,,"      fail(""Expected key set to be read only"");"
88890,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleNodeOperationsJUnitTest.java,684,,"      ks.addAll(Arrays.asList(new String[] {""one"", ""two"", ""three""}));"
88891,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleNodeOperationsJUnitTest.java,1147,,"    writer.setExpectedKeyAndValue(""key1"", ""value1"");"
88892,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionStatsJUnitTest.java,120,,"    String regionName = ""testStats"";"
88893,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionStatsJUnitTest.java,142,,"    int totalBucketSize = stats.get(""dataStoreEntryCount"").intValue();"
88894,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PartitionedRegionStatsJUnitTest.java,304,,"    assertEquals(0, stats.getLong(""dataStoreBytesInUse""));"
88895,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PersistentPartitionedRegionJUnitTest.java,74,,"    System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""false"");"
88896,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/PersistentPartitionedRegionJUnitTest.java,88,,"      System.setProperty(DiskStoreImpl.RECOVER_VALUE_PROPERTY_NAME, ""true"");"
88897,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ReplaceWithOverflowJUnitTest.java,85,,"    assertEquals(false, region.replace(""3"", ""foobar"", ""three""));"
88898,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/SimpleDiskRegionJUnitTest.java,62,,"        logWriter.error(""Exception occurred"", e);"
88899,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/SimpleDiskRegionJUnitTest.java,63,,"        fail("" Exception in createOverflowandPersist due to "" + e);"
88900,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/TXManagerImplJUnitTest.java,86,,"    region.put(""key"", ""value"");"
88901,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/TXManagerImplJUnitTest.java,86,,"    region.put(""key"", ""value"");"
88902,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/TXManagerImplJUnitTest.java,108,,"        assertEquals(""value1"", region.get(""key1""));"
88903,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/TXManagerImplJUnitTest.java,108,,"        assertEquals(""value1"", region.get(""key1""));"
88904,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/TXManagerImplJUnitTest.java,109,,"        region.put(""key2"", ""value2"");"
88905,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/TombstoneCreationJUnitTest.java,78,,"        ""expected entry to be found and be a tombstone but it is "" + entry);"
88906,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/UpdateVersionJUnitTest.java,72,,"      region.create(""key-1"", ""value-1"");"
88907,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/UpdateVersionJUnitTest.java,72,,"      region.create(""key-1"", ""value-1"");"
88908,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/UpdateVersionJUnitTest.java,105,,"      assertEquals(""Time stamp did NOT get updated by UPDATE_VERSION operation on LocalRegion"","
88909,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/backup/FileSystemBackupWriterTest.java,84,,"  @Parameters({""true"", ""false""})"
88910,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/backup/FileSystemBackupWriterTest.java,84,,"  @Parameters({""true"", ""false""})"
88911,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/backup/FileSystemBackupWriterTest.java,159,,"    assertThat(diskStoreDir.resolve(""dir1"").resolve(""crf"")).exists();"
88912,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/control/MemoryMonitorJUnitTest.java,81,,"      ""<ExpectedException action=add>"" + expectedEx + ""</ExpectedException>"";"
88913,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/control/MemoryMonitorJUnitTest.java,117,,"    heapMonitor.updateStateAndSendEvent(700, ""test"");"
88914,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/control/MemoryMonitorJUnitTest.java,209,,"    parent.createSubregion(""sub"", factory.create());"
88915,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/control/MemoryMonitorOffHeapJUnitTest.java,73,,"      ""<ExpectedException action=add>"" + expectedEx + ""</ExpectedException>"";"
88916,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/control/MemoryMonitorOffHeapJUnitTest.java,298,,"    assertFalse(""Off-heap monitor is not running"", monitor.started);"
88917,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,80,,"    region.put(""3000"", ""3000"");"
88918,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,81,,"    region.put(""7000"", ""7000"");"
88919,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,82,,"    region.put(""100"", ""100"");"
88920,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,83,,"    region.put(""9999"", ""9999"");"
88921,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,84,,"    region.put(""794"", ""794"");"
88922,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,85,,"    region.put(""123"", ""123"");"
88923,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,86,,"    region.put(""4768"", ""4768"");"
88924,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionPersistOnlySyncJUnitTest.java,87,,"    region.put(""987"", ""987"");"
88925,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/MultiThreadedOplogPerJUnitPerformanceTest.java,65,,"    File file1 = new File(""testingDirectory/"" + name.getMethodName() + ""1"");"
88926,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/eviction/EvictionIntegrationTest.java,73,,"    PartitionedRegion pr1 = (PartitionedRegion) server.createPartitionRegion(""PR1"","
88927,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/eviction/LRUListWithAsyncSortingIntegrationTest.java,72,,"    assertThat(evictionList.getEvictableEntry()).as(""check list is now empty"").isNull();"
88928,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/eviction/LRUListWithSyncSortingIntegrationTest.java,73,,"    assertThat(evictionList.getEvictableEntry()).as(""check list is now empty"").isNull();"
88929,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/eviction/RegionEntryEvictionIntegrationTest.java,66,,"    region.create(""one"", ""one"");"
88930,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/eviction/RegionEntryEvictionIntegrationTest.java,67,,"    region.create(""twoo"", ""twoo"");"
88931,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/BlockingHARegionJUnitTest.java,75,,"    HARegionQueue hrq = HARegionQueue.getHARegionQueueInstance(""BlockingHARegionJUnitTest_Region"","
88932,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/BlockingHARegionQueueJUnitTest.java,55,,"    hrq.put(new ConflatableObject(""key1"", ""val1"", id1, false, ""testing""));"
88933,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/BlockingHARegionQueueJUnitTest.java,55,,"    hrq.put(new ConflatableObject(""key1"", ""val1"", id1, false, ""testing""));"
88934,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java,141,,"    ConflatableObject c1 = new ConflatableObject(KEY1, VALUE1, id1, true, ""region1"");"
88935,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java,233,,"      HARegionQueue regionqueue = createHARegionQueue(""testing"", attrs);"
88936,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java,322,,"      regionqueue.put(new ConflatableObject(""KEY "" + i, ""VALUE"" + i, ids[i], true, ""region1""));"
88937,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java,391,,"      fail(""Test failed due to "" + message);"
88938,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java,510,,"              message.append(""put failed for the threadId "" + id.getThreadID());"
88939,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionJUnitTest.java,124,,"    region.put(""key1"", ""value1"");"
88940,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionJUnitTest.java,124,,"    region.put(""key1"", ""value1"");"
88941,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java,121,,"        (LocalRegion) dataRegion, ""key"", ""value"".getBytes(), (byte) 0x01, null,"
88942,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java,121,,"        (LocalRegion) dataRegion, ""key"", ""value"".getBytes(), (byte) 0x01, null,"
88943,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java,125,,"    wrapper.incrementPutInProgressCounter(""test"");"
88944,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java,231,,"    regionQueue.put(new ConflatableObject(""key"", ""value"", id, false, testName.getMethodName()));"
88945,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java,231,,"    regionQueue.put(new ConflatableObject(""key"", ""value"", id, false, testName.getMethodName()));"
88946,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java,616,,"    hrqForTestSafeConflationRemoval = new HARQTestClass(""testSafeConflationRemoval"", cache);"
88947,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java,617,,"    Conflatable cf1 = new ConflatableObject(""key1"", ""value"", new EventID(new byte[] {1}, 1, 1),"
88948,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueStatsJUnitTest.java,128,,"      cf = new ConflatableObject(""key"" + i, ""value"" + i, new EventID(new byte[] {1}, 1, i), false,"
88949,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueStatsJUnitTest.java,128,,"      cf = new ConflatableObject(""key"" + i, ""value"" + i, new EventID(new byte[] {1}, 1, i), false,"
88950,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueStatsJUnitTest.java,129,,"          ""testing"");"
88951,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueStatsJUnitTest.java,134,,"    assertNotNull(""stats for HARegionQueue found null"", stats);"
88952,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueStatsJUnitTest.java,137,,"        ""eventsEnqued by stats not equal to the actual number of events added to the queue"","
88953,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/CacheServerMaxConnectionsJUnitTest.java,141,,"    assertEquals(0, s.getInt(""currentClients""));"
88954,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/CacheServerMaxConnectionsJUnitTest.java,142,,"    assertEquals(0, s.getInt(""currentClientConnections""));"
88955,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ClientHealthMonitorIntegrationTest.java,184,,"    assertEquals(0, statistics.getInt(""currentClients""));"
88956,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ClientHealthMonitorIntegrationTest.java,185,,"    assertEquals(0, statistics.getInt(""currentClientConnections""));"
88957,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ConnectionProxyJUnitTest.java,93,,"        ""<ExpectedException action=add>"" + expectedPrimaryErrorMsg + ""</ExpectedException>"";"
88958,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ConnectionProxyJUnitTest.java,143,,"      pf.addServer(""localhost"", port3);"
88959,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ConnectionProxyJUnitTest.java,151,,"      proxy = (PoolImpl) pf.create(""clientPool"");"
88960,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ConnectionProxyJUnitTest.java,172,,"      fail(""Failed to initialize client"");"
88961,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ConnectionProxyJUnitTest.java,244,,"        fail(""Failed to create server"");"
88962,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/ConnectionProxyJUnitTest.java,369,,"          fail("" eid should not be duplicate as it is a new entry"");"
88963,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/tier/sockets/RedundancyLevelJUnitTest.java,70,,"          ""<ExpectedException action=remove>"" + expectedPrimaryErrorMsg + ""</ExpectedException>"";"
88964,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/cache/xmlcache/CacheXmlParserJUnitTest.java,111,,"      ClientCache cache = new ClientCacheFactory(nonDefault).set(""cache-xml-file"","
88965,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderDeployTest.java,126,,"    File jarVersion1 = createVersionOfJar(""Version1"", ""MyFunction"", ""MyJar.jar"");"
88966,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderIntegrationTest.java,479,,"    byte[] jarBytes = this.classBuilder.createJarFromClassContent(""JarClassLoaderJUnitTestClass"","
88967,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,53,,"    String classAName = testName + ""classA"";"
88968,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,54,,"    String classBName = testName + ""classB"";"
88969,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,56,,"    File jarA = createVersionOfJar(testName + ""JarAVersion11"", classAName, testName + ""JarA.jar"");"
88970,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,57,,"    File jarB = createVersionOfJar(testName + ""JarBVersion11"", classBName, testName + ""JarB.jar"");"
88971,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,62,,"        ClassPathLoader.getLatest().asClassLoader().loadClass(""jddunit.function."" + classAName);"
88972,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,85,,"        ""package jddunit.function;"""
88973,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,86,,"            + ""public class """
88974,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,87,,"            + classAName + "" extends "" + classBName"
88975,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,88,,"            + "" { public boolean hasResult() {return true;}}"";"
88976,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,92,,"            + classBName + "" { public boolean someMethod() {return true;}}"";"
88977,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,94,,"    File jarB = createJarFromClassContents(testName + ""JarBVersion1"", classBName,"
88978,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,96,,"    File jarA = createJarFromClassContents(testName + ""JarAVersion1"", classAName,"
88979,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/classloader/ClassPathLoaderJUnitTest.java,287,,"            + classBName + "" { public boolean someMethod() {return false;}}"";"
88980,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/BlockingTimeOutJUnitTest.java,85,,"    String config_prop = ""<config-property>"""
88981,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/BlockingTimeOutJUnitTest.java,87,,"        + ""<config-property-type>java.lang.String</config-property-type>"""
88982,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,92,,"          createTempFileFromResource(CacheUtils.class, ""cachejta.xml"")"
88983,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,96,,"      tableName = CacheUtils.init(ds, ""JTATest"");"
88984,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,102,,"        fail("" table name not created, Aborting test..."");"
88985,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,106,,"      fail("" Aborting test at set up...["" + e + ""]"", e);"
88986,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,114,,"    currRegion = cache.getRegion(SEPARATOR + ""root"");"
88987,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,129,,"      ta = (UserTransaction) ctx.lookup(""java:/UserTransaction"");"
88988,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,132,,"      fail("" fail in user txn lookup "", e);"
88989,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,144,,"      DataSource da = (DataSource) ctx.lookup(""java:/XAPooledDataSource"");"
88990,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,163,,"            ""insert into "" + tblName + "" values ("" + tblIDFld + "","" + ""'"" + tblNameFld + ""'"" + "")"";"
88991,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,163,,"            ""insert into "" + tblName + "" values ("" + tblIDFld + "","" + ""'"" + tblNameFld + ""'"" + "")"";"
88992,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,189,,"      fail("" failed "", e);"
88993,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,205,,"      System.out.println(""\nNumber of rows in Table under tests are: "" + num_rows);"
88994,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,223,,"          System.out.println(""Looks like that things are messed up...look into it"");"
88995,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,235,,"      System.out.println(""Destroying table: "" + tblName);"
88996,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,237,,"      System.out.println(""Closing cache..."");"
88997,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/DataSourceJTAJUnitTest.java,240,,"      fail("" failed during tear down of this test..."", e);"
88998,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/SetOperationJTAJUnitTest.java,78,,"    modifiedData.put(5L, ""newValue"");"
88999,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/SetOperationJTAJUnitTest.java,87,,"  @Parameters({""true"", ""false""})"
