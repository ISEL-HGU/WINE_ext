211000,./TargetProjects/opennlp-sandbox/corpus-server-tools/src/main/java/org/apache/opennlp/corpus_server/tools/CorpusBackup.java,74,,"        .header(""Content-Type"", MediaType.TEXT_XML)"
211001,./TargetProjects/opennlp-sandbox/corpus-server/src/main/java/org/apache/opennlp/corpus_server/CorpusResource.java,54,,"  @Path(""{casId}"")"
211002,./TargetProjects/opennlp-sandbox/corpus-server/src/main/java/org/apache/opennlp/corpus_server/CorpusResource.java,55,,"  public void addCAS(@PathParam(""casId"") String casId, byte[] cas)"
211003,./TargetProjects/opennlp-sandbox/nlp-utils/src/main/java/org/apache/opennlp/utils/cfg/CFGRunner.java,72,,"        nonTerminals.add(""Adv"");"
211004,./TargetProjects/opennlp-sandbox/nlp-utils/src/main/java/org/apache/opennlp/utils/cfg/CFGRunner.java,73,,"        nonTerminals.add(""Adj"");"
211005,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ContextFreeGrammarTest.java,50,,"    nonTerminals.add(""NNP"");"
211006,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ContextFreeGrammarTest.java,58,,"    terminals.add(""works"");"
211007,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ContextFreeGrammarTest.java,60,,"    terminals.add(""man"");"
211008,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ContextFreeGrammarTest.java,63,,"    terminals.add(""the"");"
211009,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ContextFreeGrammarTest.java,72,,"    terminals.add(""and"");"
211010,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ProbabilisticContextFreeGrammarTest.java,59,,"    nonTerminals.add(""NNP"");"
211011,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ProbabilisticContextFreeGrammarTest.java,60,,"    nonTerminals.add(""Adv"");"
211012,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ProbabilisticContextFreeGrammarTest.java,66,,"    terminals.add(""saw"");"
211013,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ProbabilisticContextFreeGrammarTest.java,67,,"    terminals.add(""man"");"
211014,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ProbabilisticContextFreeGrammarTest.java,69,,"    terminals.add(""dog"");"
211015,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/cfg/ProbabilisticContextFreeGrammarTest.java,70,,"    terminals.add(""the"");"
211016,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/ngram/NGramUtilsTest.java,36,,"    set.add(new String[]{""<s>"", ""I"", ""am"", ""Sam"", ""</s>""});"
211017,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/ngram/NGramUtilsTest.java,36,,"    set.add(new String[]{""<s>"", ""I"", ""am"", ""Sam"", ""</s>""});"
211018,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/ngram/NGramUtilsTest.java,36,,"    set.add(new String[]{""<s>"", ""I"", ""am"", ""Sam"", ""</s>""});"
211019,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/ngram/NGramUtilsTest.java,38,,"    set.add(new String[]{""<s>"", ""I"", ""do"", ""not"", ""like"", ""green"", ""eggs"", ""and"", ""ham"", ""</s>""});"
211020,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/ngram/NGramUtilsTest.java,65,,"    set.add(new String[]{""the"", ""green"", ""book"", ""STOP""});"
211021,./TargetProjects/opennlp-sandbox/nlp-utils/src/test/java/org/apache/opennlp/utils/ngram/NGramUtilsTest.java,65,,"    set.add(new String[]{""the"", ""green"", ""book"", ""STOP""});"
211022,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/coref/CorefTrainer.java,99,,"      simLinker = new TreebankLinker(modelDirectory + ""/coref/"", LinkerMode.SIM);"
211023,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/coref/resolver/MaxentResolver.java,177,,"      System.err.println(this + "".resolve: "" + ec.toText() + "" -> "" +  ""null "" + nonReferentialProbability);"
211024,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/coref/resolver/SpeechPronounResolver.java,55,,"      if (mention.getHeadTokenTag().startsWith(""PRP"") && cec.getHeadTokenTag().startsWith(""PRP"")) {"
211025,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/coref/resolver/SpeechPronounResolver.java,58,,"      else if (mention.getHeadTokenText().startsWith(""NNP"")) {"
211026,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/coref/sim/SimilarityModel.java,151,,"  @SuppressWarnings(""unchecked"")"
211027,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/coref/sim/SimilarityModel.java,400,,"    features.add(""nn="" + name.getNameType() + "","" + common.getNameType());"
211028,./TargetProjects/opennlp-sandbox/opennlp-coref/src/main/java/opennlp/tools/formats/muc/Muc6FullParseCorefSampleStreamFactory.java,57,,"    @ParameterDescription(valueName = ""modelFile"")"
211029,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/object_dedup/SimilarityAccessorBase.java,59,,"		""worship"", ""god"", ""training"", ""class"", ""development"", ""training"", ""class"", ""course"", ""our"", ""comedy"", "",fun"","
211030,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/object_dedup/SimilarityAccessorBase.java,410,,"		if (name1Tokens.contains(""men"") || name2Tokens.contains(""men"") || name1Tokens.contains(""women"")"
211031,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/object_dedup/SimilarityAccessorBase.java,411,,"			|| name2Tokens.contains(""women"") || name1Tokens.contains(""disney"") || name2Tokens.contains(""disney""))"
211032,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/object_dedup/SimilarityAccessorBase.java,490,,"		name1 = name1.replace("" man "", "" men "").replace("" mans "", "" men "").replace("" men's "", "" men "")"
211033,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/object_dedup/SimilarityAccessorBase.java,522,,"			LOG.info(""similar events but different attributes"");"
211034,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/review_builder/MinedSentenceProcessor.java,40,,"        System.out.println(""Rejection: too many delimiters"");"
211035,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/review_builder/MinedSentenceProcessor.java,129,,"    String sentWrongSym = sentTry.replace("">"", ""&&&"").replace(""�"", ""&&&"")"
211036,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/apps/review_builder/MinedSentenceProcessor.java,139,,"        .replace(""3."", "" "").replace(""4."", "" "").replace(""2009"", ""2011"")"
211037,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/fca/FcaWriter.java,77,,"		    writer.write(String.format(formatStrHeader, ""probability"", ""separation"", ""stability"", ""blCV"", ""blCFC"", ""blCU"", ""blP"", ""blS_SMCaa"", ""blS_SMCam"", ""blS_SMCma"", ""blS_SMCma"", ""blS_Jaa"",  ""blS_Jam"",  ""blS_Jma"", ""blS_Jmm"", ""extent""));			 "
211038,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/jsmlearning/FeatureSpaceCoverageProcessor.java,152,,"			String v1 = line1[attrIndex].toLowerCase().replace(""\"""", """").replace("",  "", "", "").replace("", "", "","");;"
211039,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/nl2code/NL2ObjCreateAssign.java,82,,"				if (verbChunk.getLemmas().get(1).toLowerCase().equals(""class"") ||"
211040,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/parse_thicket/apps/MinedSentenceProcessor.java,40,,"        System.out.println(""Rejection: too many delimiters"");"
211041,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/parse_thicket/apps/MinedSentenceProcessor.java,129,,"    String sentWrongSym = sentTry.replace("">"", ""&&&"").replace(""�"", ""&&&"")"
211042,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/parse_thicket/apps/MinedSentenceProcessor.java,139,,"        .replace(""3."", "" "").replace(""4."", "" "").replace(""2009"", ""2011"")"
211043,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/parse_thicket/apps/SnippetToParagraph.java,51,,"		String title = item.getTitle().replace(""<b>"", "" "").replace(""</b>"", "" "")"
211044,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/parse_thicket/apps/SnippetToParagraph.java,51,,"		String title = item.getTitle().replace(""<b>"", "" "").replace(""</b>"", "" "")"
211045,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/parse_thicket/matching/LemmaFormManager.java,43,,"    if (lemma1.endsWith(""_xyz"") || lemma2.endsWith(""_xyz"")) {"
211046,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/ContentGenerator.java,263,,"		if (fragment.indexOf(""_should_find_orig_"") > -1 && sents != null"
211047,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/ContentGeneratorRunner.java,70,,"				s.sendMail(""smtp.live.com"", ""bgalitsky@hotmail.com"", ""borgalor"", new InternetAddress(""bgalitsky@hotmail.com""), new InternetAddress[]{new InternetAddress(args[1])}, new InternetAddress[]{}, new InternetAddress[]{}, "
211048,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/GeneratedSentenceProcessor.java,121,,"		String sentWrongSym = sentTry.replace("">"", ""&&&"").replace(""�"", ""&&&"")"
211049,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/GoogleAutoCompleteQueryRunner.java,37,,"		rawExpr= rawExpr.replaceAll(""([a-z][a-z])([A-Z][a-z])"", ""$1 $2"");"
211050,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/GoogleAutoCompleteQueryRunner.java,93,,"		String[] tests = new String[]{""SharingInviteNotification"", ""SharedByMeSortingOptions"", ""SharedByMeCurrentSortingOption"", ""GroupedPrivatelySharedByMe"","
211051,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/RelatedSentenceFinder.java,392,,"		String title = item.getTitle().replace(""<b>"", "" "").replace(""</b>"", "" "")"
211052,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/RelatedSentenceFinder.java,392,,"		String title = item.getTitle().replace(""<b>"", "" "").replace(""</b>"", "" "")"
211053,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/RelatedSentenceFinder.java,443,,"			if (fragment.indexOf(""_should_find_orig_"") > -1 && sents != null"
211054,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/RelatedSentenceFinderML.java,146,,"			if (fragment.indexOf(""_should_find_orig_"") > -1 && sents != null"
211055,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/solr/ContentGeneratorRequestHandler.java,224,,"				s.sendMail(""smtp.rambler.ru"", ""bg7550@rambler.ru"", ""pill0693"", new InternetAddress(""bg7550@rambler.ru""), new InternetAddress[]{new InternetAddress(args[1])}, new InternetAddress[]{}, new InternetAddress[]{}, "
211056,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/similarity/apps/utils/Utils.java,378,,"    if (!url.startsWith(""http://"")) {"
211057,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/stemmer/PStemmer.java,245,,"	      if (ends(""at"")) setto(""ate"");"
211058,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/stemmer/PStemmer.java,247,,"	      else if (ends(""iz"")) setto(""ize"");"
211059,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/textsimilarity/LemmaFormManager.java,43,,"    if (lemma1.endsWith(""_xyz"") || lemma2.endsWith(""_xyz"")) {"
211060,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/textsimilarity/TextProcessor.java,312,,"          tokens.add(""<punc>"");"
211061,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/main/java/opennlp/tools/textsimilarity/chunker2matcher/ParserChunker2MatcherProcessor.java,386,,"          if (res[j].startsWith(""B-VP"")) {"
211062,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/LemmaFormManagerTest.java,35,,"    assertEquals(lemmaFormManager.matchLemmas(null, ""loud"", ""loudness"", ""NN""),"
211063,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/LemmaFormManagerTest.java,41,,"        lemmaFormManager.matchLemmas(null, ""!upgrade"", ""upgrade"", ""NN""),"
211064,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/ParseTreeChunkTest.java,46,,"    ch1 = new ParseTreeChunk(""NP"", new String[] { ""great"", ""unsecured"", ""loan"","
211065,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/ParseTreeChunkTest.java,63,,"    ch1 = new ParseTreeChunk(""NP"", new String[] { ""I"", ""love"", ""to"", ""run"","
211066,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/ParseTreeChunkTest.java,64,,"        ""around"", ""zoo"", ""with"", ""tigers"" }, new String[] { ""NP"", ""VBP"", ""TO"","
211067,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/ParseTreeChunkTest.java,64,,"        ""around"", ""zoo"", ""with"", ""tigers"" }, new String[] { ""NP"", ""VBP"", ""TO"","
211068,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/ParseTreeChunkTest.java,64,,"        ""around"", ""zoo"", ""with"", ""tigers"" }, new String[] { ""NP"", ""VBP"", ""TO"","
211069,./TargetProjects/opennlp-sandbox/opennlp-similarity/src/test/java/opennlp/tools/textsimilarity/ParseTreeChunkTest.java,64,,"        ""around"", ""zoo"", ""with"", ""tigers"" }, new String[] { ""NP"", ""VBP"", ""TO"","
211070,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,62,,"      ""JJR"", ""JJS"", ""LS"", ""MD"", ""NN"", ""NNS"", ""NNP"", ""NNPS"", ""PDT"", ""POS"","
211071,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,62,,"      ""JJR"", ""JJS"", ""LS"", ""MD"", ""NN"", ""NNS"", ""NNP"", ""NNPS"", ""PDT"", ""POS"","
211072,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,62,,"      ""JJR"", ""JJS"", ""LS"", ""MD"", ""NN"", ""NNS"", ""NNP"", ""NNPS"", ""PDT"", ""POS"","
211073,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,63,,"      ""PRP"", ""PRP$"", ""RB"", ""RBR"", ""RBS"", ""RP"", ""SYM"", ""TO"", ""UH"", ""VB"", ""VBD"","
211074,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,63,,"      ""PRP"", ""PRP$"", ""RB"", ""RBR"", ""RBS"", ""RP"", ""SYM"", ""TO"", ""UH"", ""VB"", ""VBD"","
211075,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,63,,"      ""PRP"", ""PRP$"", ""RB"", ""RBR"", ""RBS"", ""RP"", ""SYM"", ""TO"", ""UH"", ""VB"", ""VBD"","
211076,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,64,,"      ""VBG"", ""VBN"", ""VBP"", ""VBZ"", ""WDT"", ""WP"", ""WP$"", ""WRB"" };"
211077,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,64,,"      ""VBG"", ""VBN"", ""VBP"", ""VBZ"", ""WDT"", ""WP"", ""WP$"", ""WRB"" };"
211078,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,64,,"      ""VBG"", ""VBN"", ""VBP"", ""VBZ"", ""WDT"", ""WP"", ""WP$"", ""WRB"" };"
211079,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,64,,"      ""VBG"", ""VBN"", ""VBP"", ""VBZ"", ""WDT"", ""WP"", ""WP$"", ""WRB"" };"
211080,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/WSDHelper.java,347,,"                  + "" : """
211081,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/main/java/opennlp/tools/disambiguator/datareader/SensevalReader.java,95,,"        String[] temp = line.split(""\\s"");"
211082,./TargetProjects/opennlp-sandbox/opennlp-wsd/src/test/java/opennlp/tools/disambiguator/WSDEvaluatorTest.java,71,,"          WSDHelper.print(""------------------"" + word + ""------------------"");"
211083,./TargetProjects/opennlp-sandbox/summarizer/src/main/java/opennlp/summarization/preprocess/PorterStemmer.java,259,,"         if (ends(""at"")) setto(""ate""); else"
211084,./TargetProjects/opennlp-sandbox/summarizer/src/main/java/opennlp/summarization/preprocess/PorterStemmer.java,261,,"         if (ends(""iz"")) setto(""ize""); else"
211085,./TargetProjects/openwebbeans/samples/reservation/src/main/java/org/apache/webbeans/reservation/controller/InitializeDatabase.java,39,,"        registerController.registerUser(""administrator"", ""administrator"", ""administrator"", ""administrator"", 66, true);"
211086,./TargetProjects/openwebbeans/samples/reservation/src/main/java/org/apache/webbeans/reservation/controller/InitializeDatabase.java,40,,"        registerController.registerUser(""customer"", ""customer"", ""customer"", ""customer"", 27, false);"
211087,./TargetProjects/openwebbeans/samples/reservation/src/main/java/org/apache/webbeans/reservation/controller/admin/AdminController.java,74,,"    @SuppressWarnings(""unchecked"")"
211088,./TargetProjects/openwebbeans/webbeans-arquillian/owb-arquillian-standalone/src/test/java/org/apache/webbeans/arquillian/test/OwbArquillianGetResourcesTest.java,82,,"            ""injar"", ""true"");"
211089,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/component/creation/ObserverMethodsBuilder.java,115,,"                    throw new WebBeansConfigurationException(""Observer method : "" + annotatedMethod.getJavaMember().getName()"
211090,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/component/creation/ObserverMethodsBuilder.java,116,,"                            + "" in class : "" + annotatedMethod.getJavaMember().getDeclaringClass().getName()"
211091,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java,521,,"                    logger.info(""Skipping deployment of Class "" + beanClass + ""due to a NoClassDefFoundError: "" + ncdfe.getMessage());"
211092,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java,525,,"                    logger.info(""Skipping deployment of Class "" + beanClass + ""due to a UnsatisfiedLinkError: "" + ule.getMessage());"
211093,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java,1794,,"                throw new WebBeansDeploymentException(createConfigurationFailedMessage(bdaLocation) + ""Interceptor class : "" +"
211094,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java,164,,"            throw new WebBeansConfigurationException(""Injection point type : "" + injectionPoint + "" can not define Type Variable generic type"");"
211095,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/proxy/InterceptorDecoratorProxyFactory.java,315,,"        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, ""<init>"", descriptor, null, null);"
211096,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/proxy/Unsafe.java,109,,"                    ""defineClass"", new Class[] { String.class, byte[].class, int.class, int.class })"
211097,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/util/ClassUtil.java,504,,"        Asserts.assertNotNull(type, ""type"");"
211098,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java,143,,"        throw new IllegalArgumentException(""Unsupported type "" + requiredType.getClass());"
211099,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/util/SingleItemSet.java,87,,"        throw new IllegalArgumentException(""not supported operation"");"
211100,./TargetProjects/openwebbeans/webbeans-impl/src/main/java/org/apache/webbeans/xml/DefaultBeanArchiveService.java,464,,"                String name = getTrimmedAttribute(child, ""name"");"
211101,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/configurator/AnnotatedTypeConfiguratorImplTest.java,91,,"            pat -> pat.configureAnnotatedType().add(new TheQualifierLiteral(""one""))"
211102,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/disposes/StaticProducerTest.java,51,,"        Assert.assertEquals(""testval"", myBean.getVal());"
211103,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/events/observer/EventTest.java,59,,"        Assert.assertTrue(testEvent.getCalledObservers().iterator().next().equals(""BeanA""));"
211104,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/instance/CustomProviderTest.java,69,,"        Assert.assertEquals(""defaultString"", defaultString);"
211105,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/instance/InstanceDestroyalTest.java,124,,"        public SysInfo createTransientSysInfo(@TransientReference @System(""dummy"") SysInfo dummySysInfo) {"
211106,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/interceptors/factory/beans/InterceptionFactoryBeansProducer.java,56,,"		return factory.createInterceptedInstance(new UnproxyableClass(""dummy""));"
211107,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/portable/AnnotatedTypeImplTest.java,77,,"        assertTrue(""Not all threads reported ready."", startingLine.await(30, TimeUnit.SECONDS));"
211108,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/portable/AnnotatedTypeImplTest.java,81,,"        assertTrue(""Not all threads finished."", finishLine.await(1, TimeUnit.MINUTES));"
211109,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/decorator/DecoratorExceptionTest.java,50,,"            Assert.fail(""DefinitionException expected"");"
211110,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/event/component/BrokenComponentTest.java,59,,"            Assert.fail(""DefinitionException expected"");"
211111,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/event/component/ObserversComponentTest.java,54,,"        LoggedInEvent event = new LoggedInEvent(""Gurkan"");"
211112,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/event/component/ObserversComponentTest.java,61,,"        event = new LoggedInEvent(""Mark"");"
211113,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/event/component/ObserversComponentTest.java,156,,"                return ""ADMIN"";"
211114,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/event/exception/EventExceptionTest.java,54,,"            Assert.fail(""IllegalArgumentException expected"");"
211115,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/exception/ExceptionComponentTest.java,65,,"            System.out.println(""got expected exception: "" + e.getMessage());"
211116,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/exception/ExceptionComponentTest.java,68,,"        Assert.fail(""expecting an exception!"");"
211117,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/exception/initializer/BrokenInitializerTest.java,39,,"            Assert.fail(""DefinitionException expected"");"
211118,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/producer/broken/BrokenProducerTest.java,41,,"            Assert.fail(""DefinitionException expected"");"
211119,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/unittests/specializes/logger/LoggerSpecializationTest.java,45,,"        logger.printError(""Hello World"");"
211120,./TargetProjects/openwebbeans/webbeans-impl/src/test/java/org/apache/webbeans/test/util/AnnotationUtilTest.java,153,,"        q2.setValue(""default-value"");"
211121,./TargetProjects/openwebbeans/webbeans-jsf/src/main/java/org/apache/webbeans/jsf/JSFUtil.java,80,,"            result.append(""cid"");"
211122,./TargetProjects/openwebbeans/webbeans-web/src/it/webcdiapp/src/test/java/org/apache/openwebbeans/web/it/ConversationScopedIT.java,39,,"            ConversationInfo info = assertConversationInfo(content, ""null"", true, ""empty"", null, ""Mark"", null);"
211123,./TargetProjects/openwebbeans/webbeans-web/src/it/webcdiapp/src/test/java/org/apache/openwebbeans/web/it/ConversationScopedIT.java,39,,"            ConversationInfo info = assertConversationInfo(content, ""null"", true, ""empty"", null, ""Mark"", null);"
211124,./TargetProjects/openwebbeans/webbeans-web/src/it/webcdiapp/src/test/java/org/apache/openwebbeans/web/it/ConversationScopedIT.java,45,,"            String content = httpGet(client, ""conversation/info"", HttpServletResponse.SC_OK);"
211125,./TargetProjects/openwebbeans/webbeans-web/src/it/webcdiapp/src/test/java/org/apache/openwebbeans/web/it/ConversationScopedIT.java,99,,"            String content = httpGet(client, ""conversation/info?cid="" + previousInfo.cid, HttpServletResponse.SC_OK);"
211126,./TargetProjects/openwebbeans/webbeans-web/src/it/webcdiapp/src/test/java/org/apache/openwebbeans/web/it/ConversationScopedIT.java,107,,"            ConversationInfo info = assertConversationInfo(content, previousInfo.cid, false, ""full"", previousInfo.conversationHash, null, null);"
211127,./TargetProjects/openwebbeans/webbeans-web/src/test/java/org/apache/webbeans/web/tests/MockHttpSession.java,34,,"        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates."
211128,./TargetProjects/openwebbeans-meecrowave/integration-tests/ssl/src/test/java/org/apache/meecrowave/tests/ssl/SslDefaultConfigurationTest.java,51,,"        System.setProperty(""javax.net.ssl.trustStorePassword"", ""meecrowave"");"
211129,./TargetProjects/openwebbeans-meecrowave/integration-tests/ssl/src/test/java/org/apache/meecrowave/tests/ssl/SslHostConfigPropertiesTest.java,50,,"        System.setProperty(""javax.net.ssl.trustStorePassword"", ""meecrowave"");"
211130,./TargetProjects/openwebbeans-meecrowave/integration-tests/ssl/src/test/java/org/apache/meecrowave/tests/ssl/TlsVirtualHostPropertiesTest.java,65,,"        System.setProperty(""javax.net.ssl.trustStorePassword"", ""meecrowave"");"
211131,./TargetProjects/openwebbeans-meecrowave/integration-tests/ssl/src/test/java/org/apache/meecrowave/tests/ssl/TlsVirtualHostPropertiesTest.java,72,,"        setProperty(""connector.sslhostconfig.certificateKeystoreType"", ""JKS"");"
211132,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/Meecrowave.java,665,,"                    sslHostConf.setCertificateKeystoreFile(base.getAbsolutePath() + ""/conf/"" + sslHostConf.getCertificateKeystoreFile());"
211133,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/Meecrowave.java,900,,"                .map(key -> key.split(""\\.""))"
211134,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/Meecrowave.java,921,,"            if (key.startsWith(""connector.sslhostconfig."") && key.split(""\\."").length == 3) {"
211135,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/configuration/Configuration.java,197,,"    @CliOption(name = ""jsonb-prettify"", description = ""Should JSON-B provider prettify the output"")"
211136,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/openwebbeans/OWBTomcatWebScannerService.java,164,,"            final String base = ofNullable(docBase).orElse(""$$$"");"
211137,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/openwebbeans/OWBTomcatWebScannerService.java,173,,"                        .replace(""jar:"", """")"
211138,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/main/java/org/apache/meecrowave/openwebbeans/OWBTomcatWebScannerService.java,175,,"                        .replace(""!/META-INF/beans.xml"", """")"
211139,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/MeecrowaveTest.java,85,,"                new Meecrowave.Builder().loadFrom(""test.config.properties"");"
211140,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/MeecrowaveTest.java,166,,"        try (final Meecrowave meecrowave = new Meecrowave(new Meecrowave.Builder().randomHttpPort().includePackages(""org.superbiz.app"")).start()) {"
211141,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/MeecrowaveTest.java,168,,"            assertEquals(""hello"", slurp(new URL(""http://localhost:"" + meecrowave.getConfiguration().getHttpPort() + ""/index.html"")));"
211142,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/OctetStreamMediaTypeTest.java,45,,"                ""http://localhost:"" + meecrowave.getConfiguration().getHttpPort() + ""/OctetStreamMediaTypeTest/response"").openStream()) {"
211143,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/OctetStreamMediaTypeTest.java,46,,"                assertEquals(""resp"", Streams.asString(stream, ""UTF-8""));"
211144,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/OctetStreamMediaTypeTest.java,46,,"                assertEquals(""resp"", Streams.asString(stream, ""UTF-8""));"
211145,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/lang/SubstitutorTest.java,36,,"        assertEquals(""bar"", new Substitutor(singletonMap(""foo"", ""bar"")).replace(""${foo}""));"
211146,./TargetProjects/openwebbeans-meecrowave/meecrowave-core/src/test/java/org/apache/meecrowave/test/api/ListeningTest.java,65,,"    @Path(""ping"")"
211147,./TargetProjects/openwebbeans-meecrowave/meecrowave-doc/src/main/java/org/apache/meecrowave/doc/generator/ArquillianConfiguration.java,53,,"                    ""      "";"
211148,./TargetProjects/openwebbeans-meecrowave/meecrowave-letsencrypt/src/main/java/org/apache/meecrowave/letencrypt/LetsEncryptReloadLifecycle.java,287,,"                userKeyLocation = new File(System.getProperty(""catalina.base""), ""conf/letsencrypt/user.key"");"
211149,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/main/java/org/apache/meecrowave/maven/MeecrowaveBundleMojo.java,106,,"    @Parameter(property = ""meecrowave.skip"", defaultValue = ""false"")"
211150,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/main/java/org/apache/meecrowave/maven/MeecrowaveRunMojo.java,91,,"    @Parameter(property = ""meecrowave.jaxrsLogProviders"", defaultValue = ""false"")"
211151,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/main/java/org/apache/meecrowave/maven/MeecrowaveRunMojo.java,97,,"    @Parameter(property = ""meecrowave.useTomcatDefaults"", defaultValue = ""true"")"
211152,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/test/java/org/apache/meecrowave/maven/MeecrowaveRunMojoTest.java,131,,"            	assertEquals(""simple"", IOUtils.toString(new URL(""http://localhost:"" + port + ""/api/test"")));"
211153,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/test/java/org/apache/meecrowave/maven/MeecrowaveRunMojoTest.java,131,,"            	assertEquals(""simple"", IOUtils.toString(new URL(""http://localhost:"" + port + ""/api/test"")));"
211154,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/test/java/org/apache/meecrowave/maven/MeecrowaveRunMojoTest.java,131,,"            	assertEquals(""simple"", IOUtils.toString(new URL(""http://localhost:"" + port + ""/api/test"")));"
211155,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/test/java/org/apache/meecrowave/maven/MeecrowaveRunMojoTest.java,132,,"            	assertTrue(IOUtils.toString(new URL(""http://localhost:"" + port + ""/api/test/model"")).contains(""first_name""));"
211156,./TargetProjects/openwebbeans-meecrowave/meecrowave-maven-plugin/src/test/java/org/apache/meecrowave/maven/MeecrowaveRunMojoTest.java,137,,"            	assertNotAvailable(new URL(""http://localhost:"" + port + ""/api/additional""));"
211157,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/main/java/org/apache/meecrowave/oauth2/configuration/OAuth2Configurer.java,456,,"                .filter(it -> it.getKey().startsWith(""claim.""))"
211158,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,81,,"                    .user(""test"", ""pwd"").role(""test"", ""admin"")"
211159,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,81,,"                    .user(""test"", ""pwd"").role(""test"", ""admin"")"
211160,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,92,,"                    .property(""oauth2.cxf.rs.security.keystore.password"", ""password"")"
211161,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,112,,"            final ClientAccessToken token = client.target(""http://localhost:"" + MEECROWAVE.getConfiguration().getHttpPort())"
211162,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,113,,"                    .path(""oauth2/token"")"
211163,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,118,,"                                    .param(""username"", ""test"")"
211164,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,184,,"                    .queryParam(OAuthConstants.REDIRECT_URI, ""http://localhost:"" + httpPort + ""/redirected"")"
211165,./TargetProjects/openwebbeans-meecrowave/meecrowave-oauth2-minimal/src/test/java/org/apache/meecrowave/oauth2/OAuth2Test.java,283,,"        setField(kidMapper, ""config"", config);"
211166,./TargetProjects/openwebbeans-meecrowave/meecrowave-proxy/src/test/java/org/apache/meecrowave/proxy/servlet/ProxyServletTest.java,62,,"                exchange.getResponseHeaders().add(""Fake-Server"", ""true"");"
211167,./TargetProjects/parquet-mr/parquet-arrow/src/main/java/org/apache/parquet/arrow/schema/SchemaConverter.java,447,,"        }).orElseThrow(() -> new IllegalArgumentException(""illegal type "" + type));"
211168,./TargetProjects/parquet-mr/parquet-arrow/src/test/java/org/apache/parquet/arrow/schema/TestSchemaConverter.java,98,,"    field(""h"", new ArrowType.Timestamp(TimeUnit.MILLISECOND, ""UTC"")),"
211169,./TargetProjects/parquet-mr/parquet-arrow/src/test/java/org/apache/parquet/arrow/schema/TestSchemaConverter.java,112,,"      setElementType(Types.optional(INT32).as(DATE).named(""element""))"
211170,./TargetProjects/parquet-mr/parquet-arrow/src/test/java/org/apache/parquet/arrow/schema/TestSchemaConverter.java,124,,"    .named(""root"");"
211171,./TargetProjects/parquet-mr/parquet-avro/src/main/java/org/apache/parquet/avro/AvroIndexedRecordConverter.java,114,,"  @SuppressWarnings(""unchecked"")"
211172,./TargetProjects/parquet-mr/parquet-avro/src/main/java/org/apache/parquet/avro/AvroRecordConverter.java,96,,"      @SuppressWarnings(""unchecked"")"
211173,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,68,,"        rc.startField(""list_of_ints"", 0);"
211174,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,97,,"            ""  }"" +"
211175,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,101,,"        rc.startField(""list_of_points"", 0);"
211176,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,154,,"        rc.startField(""array"", 0);"
211177,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,183,,"            ""  optional group locations (LIST) {"" +"
211178,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,187,,"            ""    }"" +"
211179,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,192,,"        rc.startField(""locations"", 0);"
211180,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,195,,"        rc.startField(""element"", 0);"
211181,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,198,,"        rc.startField(""latitude"", 0);"
211182,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,201,,"        rc.startField(""longitude"", 1);"
211183,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,251,,"        rc.startField(""single_element_groups"", 0);"
211184,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,254,,"        rc.startField(""single_element_group"", 0); // start writing array contents"
211185,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,257,,"        rc.startField(""count"", 0);"
211186,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,365,,"            ""      optional group element {"" +"
211187,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,366,,"            ""        required double latitude;"" +"
211188,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,367,,"            ""        required double longitude;"" +"
211189,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,368,,"            ""      }"" +"
211190,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,377,,"        rc.startField(""list"", 0); // start writing array contents"
211191,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,756,,"        optionalField(""listOfLists"", listOfLists));"
211192,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,787,,"        rc.startField(""listOfLists_tuple_tuple"", 0); // start writing inner array contents"
211193,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,1015,,"        rc.startField(""list_of_structs"", 0);"
211194,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java,1061,,"    Schema oldSchema = record(""ListOfSingleElementStructsWithElementField"","
211195,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,83,,"      ""  required group mynestedrecord {\n"" +"
211196,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,85,,"      ""  }\n"" +"
211197,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,87,,"      ""  required group myarray (LIST) {\n"" +"
211198,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,88,,"      ""    repeated int32 array;\n"" +"
211199,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,94,,"      ""    repeated group list {\n"" +"
211200,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,96,,"      ""    }\n"" +"
211201,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,104,,"      ""  required group mymap (MAP) {\n"" +"
211202,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,106,,"      ""      required binary key (UTF8);\n"" +"
211203,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,107,,"      ""      required int32 value;\n"" +"
211204,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,111,,"      ""}\n"";"
211205,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,124,,"    assertEquals(""converting "" + schema + "" to "" + schemaString, expectedMT.toString(),"
211206,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,124,,"    assertEquals(""converting "" + schema + "" to "" + schemaString, expectedMT.toString(),"
211207,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,206,,"            ""    repeated group key_value (MAP_KEY_VALUE) {\n"" +"
211208,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,287,,"        ""message myrecord {\n"" +"
211209,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,385,,"    System.err.println(""Avro schema: "" + schema.toString(true));"
211210,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,393,,"        ""      }\n"" +"
211211,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,437,,"            ""  optional group listOfLists (LIST) {\n"" +"
211212,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,519,,"    Schema schema = Schema.createRecord(""myrecord"", null, null, false);"
211213,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,542,,"        new Schema.Field(""dec"", decimal, null, null)));"
211214,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java,630,,"        type = new PrimitiveType(REQUIRED, primitive, 12, ""test"", DATE);"
211215,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestCircularReferences.java,334,,"    Reference parentRef = new Reference(""parent"");"
211216,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestGenericLogicalTypes.java,83,,"        field(""uuid"", LogicalTypes.uuid().addToSchema(Schema.create(STRING))));"
211217,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestGenericLogicalTypes.java,129,,"    Assert.assertEquals(""Should read UUIDs as Strings"","
211218,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestGenericLogicalTypes.java,183,,"    Schema fixedSchema = Schema.createFixed(""aFixed"", null, null, 4);"
211219,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestGenericLogicalTypes.java,184,,"    Schema fixedRecord = record(""R"", field(""dec"", fixedSchema));"
211220,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,103,,"        .set(""myarray"", emptyArray).build();"
211221,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,131,,"        .set(""mymap"", emptyMap).build();"
211222,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,238,,"        new Schema.Field(""dec"", decimal, null, null)));"
211223,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,346,,"      schema.getField(""mynestedrecord"").schema())"
211224,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,347,,"      .set(""mynestedint"", 1).build();"
211225,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,370,,"        .set(""myboolean"", true)"
211226,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,371,,"        .set(""myint"", 1)"
211227,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,372,,"        .set(""mylong"", 2L)"
211228,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,373,,"        .set(""myfloat"", 3.1f)"
211229,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,374,,"        .set(""mydouble"", 4.1)"
211230,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,375,,"        .set(""mybytes"", ByteBuffer.wrap(""hello"".getBytes(StandardCharsets.UTF_8)))"
211231,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,375,,"        .set(""mybytes"", ByteBuffer.wrap(""hello"".getBytes(StandardCharsets.UTF_8)))"
211232,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,376,,"        .set(""mystring"", ""hello"")"
211233,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,378,,"        .set(""myenum"", ""a"")"
211234,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,381,,"        .set(""myoptionalarray"", genericIntegerArray)"
211235,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,382,,"        .set(""myarrayofoptional"", genericIntegerArrayWithNulls)"
211236,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,385,,"        .set(""myfixed"", genericFixed)"
211237,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,489,,"        recordConsumer.startField(""array"", 0);"
211238,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,552,,"        recordConsumer.startField(""value"", 1);"
211239,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,741,,"        new Schema.Field(""name"", Schema.create(Schema.Type.STRING), null, null),"
211240,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWrite.java,742,,"        new Schema.Field(""weight"", Schema.create(Schema.Type.INT), null,"
211241,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,84,,"    File tmp = File.createTempFile(getClass().getSimpleName(), "".tmp"");"
211242,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,93,,"        .set(""myarray"", emptyArray).build();"
211243,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,119,,"        .set(""mymap"", emptyMap).build();"
211244,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,222,,"        schema.getField(""mynestedrecord"").schema())"
211245,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,223,,"            .set(""mynestedint"", 1).build();"
211246,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,238,,"        .set(""myboolean"", true)"
211247,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,239,,"        .set(""myint"", 1)"
211248,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,240,,"        .set(""mylong"", 2L)"
211249,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,241,,"        .set(""myfloat"", 3.1f)"
211250,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,242,,"        .set(""mydouble"", 4.1)"
211251,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,243,,"        .set(""mybytes"", ByteBuffer.wrap(""hello"".getBytes(StandardCharsets.UTF_8)))"
211252,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,243,,"        .set(""mybytes"", ByteBuffer.wrap(""hello"".getBytes(StandardCharsets.UTF_8)))"
211253,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,244,,"        .set(""mystring"", ""hello"")"
211254,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,246,,"        .set(""myenum"", ""a"")"
211255,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,249,,"        .set(""myoptionalarray"", genericIntegerArray)"
211256,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,250,,"        .set(""myarrayofoptional"", genericIntegerArray)"
211257,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,253,,"        .set(""myfixed"", genericFixed)"
211258,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,418,,"        recordConsumer.startField(""array"", 0);"
211259,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReadWriteOldListBehavior.java,442,,"            recordConsumer.startField(""element"", 0);"
211260,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,75,,"        .name(""uuids"").type().array().items().stringType().noDefault()"
211261,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,125,,"    Assert.assertEquals(""Should have the correct record name"","
211262,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,276,,"        return ""pair"";"
211263,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,330,,"        .fields().requiredString(""uuid"").endRecord();"
211264,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,349,,"    Assert.assertEquals(""Should convert Strings to UUIDs"","
211265,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,358,,"    Assert.assertEquals(""Should not convert to UUID if accessor is String"","
211266,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,426,,"    Assert.assertEquals(""Should read uuid as String without UUID conversion"","
211267,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,710,,"    Schema stringArraySchema = SchemaBuilder.record(""RecordWithUUIDArray"")"
211268,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestReflectLogicalTypes.java,895,,"  @SuppressWarnings(""unchecked"")"
211269,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestSpecificReadWrite.java,97,,"    try(ParquetReader<Car> reader = new AvroParquetReader<>(testConf, path, column(""make"", equalTo(""Volkswagen"")))) {"
211270,./TargetProjects/parquet-mr/parquet-avro/src/test/java/org/apache/parquet/avro/TestSpecificReadWrite.java,97,,"    try(ParquetReader<Car> reader = new AvroParquetReader<>(testConf, path, column(""make"", equalTo(""Volkswagen"")))) {"
211271,./TargetProjects/parquet-mr/parquet-benchmarks/src/main/java/org/apache/parquet/benchmarks/PageChecksumDataGenerator.java,79,,"        .append(""int_field"", rand.nextInt() % 100)"
211272,./TargetProjects/parquet-mr/parquet-benchmarks/src/main/java/org/apache/parquet/benchmarks/PageChecksumReadBenchmarks.java,74,,"        blackhole.consume(subgroup.getInteger(""int_field"", 0));"
211273,./TargetProjects/parquet-mr/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ShowDictionaryCommand.java,85,,"                console.info(""{}: {}"", String.format(""%6d"", i),"
211274,./TargetProjects/parquet-mr/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ShowDictionaryCommand.java,85,,"                console.info(""{}: {}"", String.format(""%6d"", i),"
211275,./TargetProjects/parquet-mr/parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java,65,,"    assertTrue(columnSizeInBytes.get(""DocId"") > columnSizeInBytes.get(""Num""));"
211276,./TargetProjects/parquet-mr/parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java,65,,"    assertTrue(columnSizeInBytes.get(""DocId"") > columnSizeInBytes.get(""Num""));"
211277,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/PlainValuesDictionary.java,129,,"        sb.append(i).append("" => "").append(binaryDictionaryContent[i]).append(""\n"");"
211278,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/column/values/plain/PlainValuesReader.java,63,,"        throw new ParquetDecodingException(""could not skip "" + n + "" double values"", e);"
211279,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,38,,"          new PrimitiveType(REQUIRED, INT64, ""DocId""),"
211280,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,39,,"          new GroupType(OPTIONAL, ""Links"","
211281,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,40,,"              new PrimitiveType(REPEATED, INT64, ""Backward""),"
211282,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,41,,"              new PrimitiveType(REPEATED, INT64, ""Forward"")"
211283,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,43,,"          new GroupType(REPEATED, ""Name"","
211284,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,44,,"              new GroupType(REPEATED, ""Language"","
211285,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,45,,"                  new PrimitiveType(REQUIRED, BINARY, ""Code""),"
211286,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,46,,"                  new PrimitiveType(OPTIONAL, BINARY, ""Country"")),"
211287,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/example/Paper.java,47,,"              new PrimitiveType(OPTIONAL, BINARY, ""Url"")));"
211288,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/filter2/predicate/Operators.java,201,,"      super(column, Objects.requireNonNull(value, ""value cannot be null""));"
211289,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/schema/Types.java,835,,"        .required(PrimitiveTypeName.BINARY).as(OriginalType.UTF8).named(""key"");"
211290,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/schema/Types.java,929,,"        mapBuilder.setValueType(build(""value""));"
211291,./TargetProjects/parquet-mr/parquet-column/src/main/java/org/apache/parquet/schema/Types.java,1248,,"        listBuilder.setElementType(build(""element""));"
211292,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/CorruptStatisticsTest.java,31,,"    assertTrue(CorruptStatistics.shouldIgnoreStatistics(""parquet-mr version 1.6.0 (build abcd)"", PrimitiveTypeName.BINARY));"
211293,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java,72,,"    assertFalse(""Should not have dictionary-encoded pages"", stats.hasDictionaryEncodedPages());"
211294,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java,73,,"    assertFalse(""Should not have non-dictionary pages"", stats.hasNonDictionaryEncodedPages());"
211295,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java,86,,"    assertTrue(""Should have dictionary pages"", stats.hasDictionaryPages());"
211296,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java,98,,"    assertTrue(""Should have dictionary-encoded pages"", stats.hasDictionaryEncodedPages());"
211297,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java,111,,"    assertTrue(""Should have non-dictionary pages"", stats.hasNonDictionaryEncodedPages());"
211298,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java,185,,"    assertEquals(""Count should match"", 1, stats.getNumDictionaryPagesEncodedAs(Encoding.PLAIN));"
211299,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/impl/TestCorruptDeltaByteArrays.java,59,,"    assertTrue(CorruptDeltaByteArrays.requiresSequentialReads(""parquet-mr version 1.8.0-SNAPSHOT (build abcd)"", Encoding.DELTA_BYTE_ARRAY));"
211300,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/impl/TestCorruptDeltaByteArrays.java,72,,"    ParsedVersion impala = new ParsedVersion(""impala"", ""1.2.0"", ""abcd"");"
211301,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/mem/TestMemColumn.java,52,,"    ColumnDescriptor path = schema.getColumnDescription(new String[] {""foo"", ""bar""});"
211302,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/mem/TestMemColumn.java,52,,"    ColumnDescriptor path = schema.getColumnDescription(new String[] {""foo"", ""bar""});"
211303,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/statistics/TestStatistics.java,413,,"    stringArray = new String[] {""hello"", ""world"", ""this"", ""is"", ""a"", ""test"", ""of"", ""the"", ""stats"", ""class""};"
211304,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/benchmark/BenchmarkDeltaByteArray.java,65,,"    System.out.println(""size "" + data.position());"
211305,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,92,,"      throw new Error(""Shall never be invoked"");"
211306,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,270,,"      validateOperator(""Mismatching page indexes for value "" + i + "" with ASCENDING order"","
211307,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,270,,"      validateOperator(""Mismatching page indexes for value "" + i + "" with ASCENDING order"","
211308,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,274,,"      validateOperator(""Mismatching page indexes for value "" + i + "" with DESCENDING order"","
211309,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,278,,"      validateOperator(""Mismatching page indexes for all null pages and value "" + i + "" with ASCENDING order in "","
211310,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,278,,"      validateOperator(""Mismatching page indexes for all null pages and value "" + i + "" with ASCENDING order in "","
211311,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java,282,,"      validateOperator(""Mismatching page indexes for all null pages and value "" + i + "" with DESCENDING order in "","
211312,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,240,,"    BinaryColumn col = binaryColumn(""test_col"");"
211313,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,244,,"    builder.add(sb.stats(type, decimalBinary(""-0.17""), decimalBinary(""1234567890.12"")));"
211314,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,244,,"    builder.add(sb.stats(type, decimalBinary(""-0.17""), decimalBinary(""1234567890.12"")));"
211315,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,245,,"    builder.add(sb.stats(type, decimalBinary(""-234.23""), null, null, null));"
211316,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,247,,"    builder.add(sb.stats(type, decimalBinary(""-9999293.23""), decimalBinary(""2348978.45"")));"
211317,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,247,,"    builder.add(sb.stats(type, decimalBinary(""-9999293.23""), decimalBinary(""2348978.45"")));"
211318,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,250,,"    builder.add(sb.stats(type, decimalBinary(""87656273"")));"
211319,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,379,,"    PrimitiveType type = Types.required(BINARY).as(UTF8).named(""test_binary_utf8"");"
211320,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,387,,"    builder.add(sb.stats(type, stringBinary(""Jeltz""), stringBinary(""Slartibartfast""), null, null));"
211321,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,387,,"    builder.add(sb.stats(type, stringBinary(""Jeltz""), stringBinary(""Slartibartfast""), null, null));"
211322,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,390,,"    builder.add(sb.stats(type, stringBinary(""Beeblebrox""), stringBinary(""Prefect"")));"
211323,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,390,,"    builder.add(sb.stats(type, stringBinary(""Beeblebrox""), stringBinary(""Prefect"")));"
211324,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,391,,"    builder.add(sb.stats(type, stringBinary(""Dent""), stringBinary(""Trilian""), null));"
211325,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,418,,"    assertCorrectFiltering(columnIndex, eq(col, stringBinary(""Marvin"")), 1, 4, 5);"
211326,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,721,,"    PrimitiveType type = Types.required(DOUBLE).named(""test_double"");"
211327,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,1403,,"        assertFalse(""The byte buffer should be empty for null pages"", value.hasRemaining());"
211328,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestColumnIndexBuilder.java,1405,,"        assertArrayEquals(""Invalid value for page "" + i, expectedValue.getBytesUnsafe(), value.array());"
211329,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java,219,,"  private static final ColumnIndex COLUMN1_CI = new CIBuilder(optional(INT32).named(""column1""), ASCENDING)"
211330,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java,237,,"  private static final ColumnIndex COLUMN2_CI = new CIBuilder(optional(BINARY).as(stringType()).named(""column2""), DESCENDING)"
211331,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java,257,,"  private static final ColumnIndex COLUMN3_CI = new CIBuilder(optional(DOUBLE).named(""column3""), UNORDERED)"
211332,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java,287,,"  private static final ColumnIndex COLUMN5_CI = new CIBuilder(optional(INT64).named(""column5""), ASCENDING)"
211333,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java,305,,"        case ""column4"":"
211334,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java,437,,"        notEq(intColumn(""missing_column""), 0)),"
211335,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestColumnIO.java,170,,"    MessageType orginalSchema = new MessageType(""schema"","
211336,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestColumnIO.java,359,,"      assertEquals(""deserialization does not display the expected result"", pr1.toString(), records.get(0).toString());"
211337,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestColumnIO.java,392,,"    g1.addGroup(""foo"").append(""bar"", 2l);"
211338,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestFiltered.java,92,,"        columnIO.getRecordReader(memPageStore, recordConverter, FilterCompat.get(column(""DocId"", equalTo(10l))));"
211339,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestFiltered.java,94,,"    readOne(recordReader, ""r2 filtered out"", r1);"
211340,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestFiltered.java,101,,"    readOne(recordReader, ""r1 filtered out"", r2);"
211341,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/io/TestFiltered.java,135,,"            FilterCompat.get(column(""Name.Url"", equalTo(""http://A""))));"
211342,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/parser/TestParquetParser.java,113,,"    schema.append(""}\n"");"
211343,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/parser/TestParquetParser.java,132,,"        .required(BINARY).as(stringType()).named(""string"")"
211344,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestMessageType.java,65,,"    MessageType t1 = new MessageType(""root1"","
211345,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestMessageType.java,68,,"    MessageType t2 = new MessageType(""root2"","
211346,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestMessageType.java,200,,"        ).named(""root"");"
211347,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestPrimitiveComparator.java,297,,"        fail(""An UnsupportedOperationException should have been thrown"");"
211348,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestPrimitiveStringifier.java,86,,"    assertEquals(""null"", stringifier.stringify(null));"
211349,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestPrimitiveStringifier.java,125,,"    assertEquals(""<INVALID>"", stringifier.stringify(Binary.EMPTY));"
211350,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestPrimitiveStringifier.java,174,,"      String timezoneAmendment = (stringifier == TIMESTAMP_MILLIS_STRINGIFIER ? """" : ""+0000"");"
211351,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestPrimitiveStringifier.java,351,,"        fail(""An UnsupportedOperationException should have been thrown"");"
211352,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,162,,"    Assert.assertEquals(""Should not complain about an empty required group"","
211353,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,200,,"    MessageType expected = new MessageType(""DecimalMessage"","
211354,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,201,,"        new PrimitiveType(REQUIRED, INT32, 0, ""aDecimal"","
211355,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,284,,"    assertThrows(""Should reject decimal annotation without precision"","
211356,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,310,,"    assertThrows(""Should reject scale greater than precision"","
211357,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,375,,"      PrimitiveType expected = new PrimitiveType(REQUIRED, BINARY, ""col"", logicalType);"
211358,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,459,,"    PrimitiveType expected = new PrimitiveType(REQUIRED, FIXED_LEN_BYTE_ARRAY, 12, ""interval"", INTERVAL);"
211359,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,486,,"    typeList.add(new PrimitiveType(REQUIRED, INT64, ""key""));"
211360,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,487,,"    typeList.add(new PrimitiveType(REQUIRED, INT64, ""value""));"
211361,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,488,,"    GroupType expected = new GroupType(REQUIRED, ""myMap"", OriginalType.MAP, new GroupType(REPEATED,"
211362,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,489,,"        ""key_value"","
211363,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,520,,"    MessageType expected = new MessageType(""mapParent"", map);"
211364,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,548,,"    keyFields.add(new PrimitiveType(OPTIONAL, INT64, ""first""));"
211365,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,549,,"    keyFields.add(new PrimitiveType(OPTIONAL, DOUBLE, ""second""));"
211366,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,553,,"    valueFields.add(new PrimitiveType(OPTIONAL, DOUBLE, ""one""));"
211367,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,554,,"    valueFields.add(new PrimitiveType(OPTIONAL, INT32, ""two""));"
211368,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,761,,"                        ""list"","
211369,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,762,,"                        new PrimitiveType(OPTIONAL, INT64, ""element""))));"
211370,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,1043,,"    GroupType expected = new GroupType(REQUIRED, ""myList"", OriginalType.LIST,"
211371,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,1081,,"    fields.add(new PrimitiveType(OPTIONAL, BOOLEAN, ""field""));"
211372,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,1159,,"    GroupType expected = new GroupType(REQUIRED, ""topGroup"", fields);"
211373,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java,1318,,"    PrimitiveType utcMillisExpected = new PrimitiveType(REQUIRED, INT64, ""aTimestamp"","
211374,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuildersWithLogicalTypes.java,95,,"    MessageType expected = new MessageType(""DecimalMessage"","
211375,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuildersWithLogicalTypes.java,96,,"      new PrimitiveType(REQUIRED, INT32, 0, ""aDecimal"","
211376,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuildersWithLogicalTypes.java,137,,"    assertThrows(""Should reject scale greater than precision"","
211377,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuildersWithLogicalTypes.java,202,,"      PrimitiveType expected = new PrimitiveType(REQUIRED, BINARY, ""col"", logicalType);"
211378,./TargetProjects/parquet-mr/parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuildersWithLogicalTypes.java,356,,"    PrimitiveType utcMillisExpected = new PrimitiveType(REQUIRED, INT64, ""aTimestamp"","
211379,./TargetProjects/parquet-mr/parquet-common/src/main/java/org/apache/parquet/util/DynConstructors.java,69,,"    @SuppressWarnings(""unchecked"")"
211380,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/SemanticVersionTest.java,84,,"    assertEqualTo(""1.5.0-cdh5.5.0"", ""1.5.0-cdh5.5.0"");"
211381,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/TestPreconditions.java,28,,"      Preconditions.checkArgument(true, ""Test message: %s %s"", 12, null);"
211382,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/VersionTest.java,55,,"    assertEquals(""parquet-mr"", version.application);"
211383,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/VersionTest.java,60,,"    assertEquals(new ParsedVersion(""parquet-mr"", ""1.6.0"", ""abcd""),"
211384,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/VersionTest.java,60,,"    assertEquals(new ParsedVersion(""parquet-mr"", ""1.6.0"", ""abcd""),"
211385,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestByteBufferInputStreams.java,71,,"    Assert.assertEquals(""Should have no more remaining content"","
211386,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestByteBufferInputStreams.java,380,,"    Assert.assertEquals(""Position should return to the mark"","
211387,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestByteBufferInputStreams.java,389,,"    Assert.assertEquals(""Read should end at the same position"","
211388,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestByteBufferInputStreams.java,392,,"    Assert.assertArrayEquals(""Content should be equal"", expected, afterReset);"
211389,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestDeprecatedBufferInputStream.java,91,,"    Assert.assertSame(""Should use the same backing array"","
211390,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestDeprecatedBufferInputStream.java,97,,"      Assert.assertEquals(""Should produce correct values"", i, one.get());"
211391,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestMultiBufferInputStream.java,80,,"      Assert.assertEquals(""Should produce correct values"", i, one.get());"
211392,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestSingleBufferInputStream.java,64,,"    Assert.assertSame(""Should use the same backing array"","
211393,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/bytes/TestSingleBufferInputStream.java,71,,"      Assert.assertEquals(""Should produce correct values"", i, one.get());"
211394,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/glob/TestGlob.java,36,,"    assertEquals(Arrays.asList(""foo""), Strings.expandGlob(""foo""));"
211395,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/glob/TestGlob.java,53,,"    assertEquals(Arrays.asList(""foobar"", ""foobaz""), Strings.expandGlob(""foo{bar,baz}""));"
211396,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/glob/TestGlob.java,53,,"    assertEquals(Arrays.asList(""foobar"", ""foobaz""), Strings.expandGlob(""foo{bar,baz}""));"
211397,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/glob/TestWildcardPath.java,60,,"    WildcardPath wp = new WildcardPath("""", ""x.y.z"", '.');"
211398,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/glob/TestWildcardPath.java,86,,"    assertMatches(wp, ""a.b.c.x.y.z"", ""x.y.z"", ""zoopx.y.z"", ""zoopx.y.z.child"");"
211399,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/io/TestDelegatingSeekableInputStream.java,43,,"    Assert.assertArrayEquals(""Byte array contents should match"","
211400,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/io/TestDelegatingSeekableInputStream.java,45,,"    Assert.assertEquals(""Stream position should reflect bytes read"", 5, stream.getPos());"
211401,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/io/TestDelegatingSeekableInputStream.java,145,,"    Assert.assertEquals(""Buffer contents should match"","
211402,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/util/TestDynConstructors.java,43,,"        .impl(""not.a.RealClass"");"
211403,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/util/TestDynMethods.java,31,,"    final DynMethods.Builder builder = new DynMethods.Builder(""concat"");"
211404,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/util/TestDynMethods.java,43,,"        .impl(""not.a.RealClass"", String.class, String.class);"
211405,./TargetProjects/parquet-mr/parquet-common/src/test/java/org/apache/parquet/util/TestDynMethods.java,74,,"        ""a-b"", cat2.invoke(obj, ""a"", ""b""));"
211406,./TargetProjects/parquet-mr/parquet-encoding/src/test/java/org/apache/parquet/column/values/bitpacking/TestByteBitPacking.java,42,,"      LOG.debug(""Width: {}"", i);"
211407,./TargetProjects/parquet-mr/parquet-encoding/src/test/java/org/apache/parquet/column/values/bitpacking/TestByteBitPacking.java,47,,"      Assert.assertArrayEquals(""width ""+i, values, unpacked);"
211408,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/encoding/bitpacking/ByteBasedBitPackingGenerator.java,92,,"      fw.append(""    }\n"");"
211409,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/encoding/bitpacking/IntBasedBitPackingGenerator.java,86,,"      fw.append(""    }\n"");"
211410,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,174,,"    add(""    if (clazz.equals("" + info.className + "".class)) {\n"" +"
211411,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,174,,"    add(""    if (clazz.equals("" + info.className + "".class)) {\n"" +"
211412,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,177,,"        ""          @Override\n"" +"
211413,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,179,,"        ""            setResult("" + isEq + "");\n"" +"
211414,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,179,,"        ""            setResult("" + isEq + "");\n"" +"
211415,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,180,,"        ""          }\n"" +"
211416,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,183,,"        ""          public void update("" + info.primitiveName + "" value) {\n"" +"
211417,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,205,,"        ""    }\n\n"");"
211418,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,221,,"        ""        @Override\n"" +"
211419,./TargetProjects/parquet-mr/parquet-generator/src/main/java/org/apache/parquet/filter2/IncrementallyUpdatedFilterPredicateGenerator.java,224,,"        ""        }\n"" +"
211420,./TargetProjects/parquet-mr/parquet-hadoop/src/main/java/org/apache/parquet/crypto/AesCipher.java,83,,"      throw new ParquetCryptoRuntimeException(""Encrypted parquet files can't have """
211421,./TargetProjects/parquet-mr/parquet-hadoop/src/main/java/org/apache/parquet/crypto/AesCipher.java,84,,"          + ""more than "" + Short.MAX_VALUE + "" row groups: "" + rowGroupOrdinal);"
211422,./TargetProjects/parquet-mr/parquet-hadoop/src/main/java/org/apache/parquet/crypto/InternalFileDecryptor.java,91,,"      throw new ParquetCryptoRuntimeException(""Haven't parsed the file crypto metadata yet"");"
211423,./TargetProjects/parquet-mr/parquet-hadoop/src/main/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilter.java,151,,"      LOG.warn(""Failed to process dictionary for filter evaluation."", e);"
211424,./TargetProjects/parquet-mr/parquet-hadoop/src/main/java/org/apache/parquet/filter2/statisticslevel/StatisticsFilter.java,99,,"  @SuppressWarnings(""unchecked"")"
211425,./TargetProjects/parquet-mr/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/ContextUtil.java,149,,"            = taskAttemptContextClass.getMethod(""getCounter"", String.class, String.class);"
211426,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/crypto/propertiesfactory/SchemaControlEncryptionTest.java,84,,"    testData.put(""Name"", names);"
211427,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/crypto/propertiesfactory/SchemaControlEncryptionTest.java,85,,"    testData.put(""Age"", ages);"
211428,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/crypto/propertiesfactory/SchemaControlEncryptionTest.java,86,,"    testData.put(""LinkedIn"", linkedInWebs);"
211429,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/crypto/propertiesfactory/SchemaControlEncryptionTest.java,87,,"    testData.put(""Twitter"", twitterWebs);"
211430,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/crypto/propertiesfactory/SchemaControlEncryptionTest.java,128,,"    ageMetadata.put(""columnKeyMetaData"", ""age_key_id"");"
211431,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/encodings/FileEncodingsIT.java,188,,"      schema = Types.buildMessage().required(type).length(FIXED_LENGTH).named(""field"").named(""test"");"
211432,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/TestFiltersWithMissingColumns.java,100,,"    assertEquals(0, countFilteredRecords(path, lt(longColumn(""missing""), 500L)));"
211433,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/TestFiltersWithMissingColumns.java,112,,"        notEq(binaryColumn(""missing""), fromString(""any""))"
211434,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,153,,"          .append(""binary_field"", ALPHABET.substring(index, index+1))"
211435,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,154,,"          .append(""single_value_field"", ""sharp"")"
211436,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,154,,"          .append(""single_value_field"", ""sharp"")"
211437,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,155,,"          .append(""fixed_field"", DECIMAL_VALUES[i % DECIMAL_VALUES.length])"
211438,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,156,,"          .append(""int32_field"", intValues[i % intValues.length])"
211439,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,157,,"          .append(""int64_field"", longValues[i % longValues.length])"
211440,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,158,,"          .append(""double_field"", toDouble(intValues[i % intValues.length]))"
211441,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,159,,"          .append(""float_field"", toFloat(intValues[i % intValues.length]))"
211442,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,163,,"          .append(""int96_field"", INT96_VALUES[i % INT96_VALUES.length]);"
211443,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,167,,"        group.append(""optional_single_value_field"", ""sharp"");"
211444,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,321,,"    assertFalse(""Should not drop block for null"","
211445,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,398,,"    assertFalse(""Should not drop: contains matching values"","
211446,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,553,,"    assertFalse(""Should never drop block using plain encoding"","
211447,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,602,,"    BinaryColumn b = binaryColumn(""missing_column"");"
211448,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,605,,"        canDrop(eq(b, Binary.fromString(""any"")), ccmd, dictionaries));"
211449,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/dictionarylevel/DictionaryFilterTest.java,626,,"    assertTrue(""Should drop block for any non-null query"","
211450,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/recordlevel/TestRecordLevelFilters.java,141,,"    BinaryColumn name = binaryColumn(""name"");"
211451,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/filter2/statisticslevel/TestStatisticsFilter.java,126,,"    assertTrue(canDrop(eq(missingColumn, fromString(""any"")), columnMetas));"
211452,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,177,,"            .named(""Message"")"
211453,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,671,,"    Assert.assertEquals(""Num nulls should match"","
211454,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,729,,"      String minString = new String(min, Charset.forName(""UTF-8""));"
211455,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,771,,"    Assert.assertEquals(""Min should match"","
211456,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,773,,"    Assert.assertEquals(""Max should match"","
211457,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,1306,,"      .required(PrimitiveTypeName.BINARY).as(stringType()).named(""key"")"
211458,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,1307,,"      .required(PrimitiveTypeName.INT32).named(""value"")"
211459,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,1308,,"      .named(""key_value"")"
211460,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java,1309,,"      .named(""testMap"")"
211461,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/DeprecatedInputFormatTest.java,212,,"    File inputFile = File.createTempFile(""temp"", null);"
211462,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/DeprecatedInputFormatTest.java,282,,"    assertTrue(mapRedJob.getCounters().getGroup(""parquet"").getCounterForName(""bytesread"").getValue() > 0L);"
211463,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestBloomFiltering.java,122,,"    list.add(""miller"");"
211464,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestColumnIndexFiltering.java,163,,"    list.add(""miller"");"
211465,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestColumnIndexFiltering.java,166,,"    list.add(""thomas"");"
211466,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestColumnIndexFiltering.java,346,,"      .builder(""name"")"
211467,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestDataPageV1Checksums.java,193,,"              .append(""val"", rand.nextInt() % 10);"
211468,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestEncryptionOptions.java,387,,"          conf.set(""parquet.read.schema"", Types.buildMessage()"
211469,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestEncryptionOptions.java,557,,"          LOG.info(""Exception as expected: "" + exceptionMsg);"
211470,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestInputFormat.java,130,,"    IntColumn intColumn = intColumn(""foo"");"
211471,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestInputOutputFormatWithPadding.java,123,,"    conf.set(""dfs.block.size"", ""1024"");"
211472,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestLargeColumnChunk.java,60,,"      required(BINARY).named(""data""))"
211473,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestMemoryManager.java,93,,"    Assert.assertTrue(""Allocations should never exceed pool size"","
211474,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestMultipleWriteRead.java,81,,"      .required(BINARY).as(stringType()).named(""name"")"
211475,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestMultipleWriteRead.java,83,,"      .optional(BINARY).as(stringType()).named(""comment"")"
211476,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetFileWriter.java,188,,"    assertEquals(""footer: ""+ readFooter, 2, readFooter.getBlocks().size());"
211477,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetFileWriter.java,268,,"    configuration.set(""parquet.bloom.filter.column.names"", ""foo"");"
211478,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetFileWriter.java,852,,"        new MessageType(""root1"","
211479,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetFileWriter.java,855,,"        new HashMap<String, String>(), ""test"");"
211480,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetReaderRandomAccess.java,152,,"      this.filter = FilterCompat.get(eq(longColumn(""i64_flip""), 1L));"
211481,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetReaderRandomAccess.java,157,,"        new PrimitiveType(REQUIRED, INT64, ""i64""),"
211482,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetWriter.java,301,,"      .named(""str"")"
211483,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetWriterAppendBlocks.java,67,,"      .required(BINARY).as(UTF8).named(""string"")"
211484,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetWriterAppendBlocks.java,68,,"      .named(""AppendTest"");"
211485,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java,151,,"              .append(""line"", (int) key.get())"
211486,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java,336,,"    assertTrue(value(readJob, ""parquet"", ""bytesread"") > 0L);"
211487,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnMaskerTest.java,84,,"    group.getLong(""DocId"", 0);"
211488,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnMaskerTest.java,92,,"    Group subGroup = group.getGroup(""Links"", 0);"
211489,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnMaskerTest.java,102,,"      assertArrayEquals(group.getBinary(""Name"", 0).getBytes(), testDocs.name[i].getBytes());"
211490,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,61,,"    String inputFile = createParquetFile(""input"");"
211491,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,62,,"    String outputFile = createTempFile(""output"");"
211492,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,65,,"    List<String> cols = Arrays.asList(""Gender"");"
211493,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,73,,"    assertEquals(fields.get(0).getName(), ""DocId"");"
211494,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,74,,"    assertEquals(fields.get(1).getName(), ""Name"");"
211495,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,75,,"    assertEquals(fields.get(2).getName(), ""Links"");"
211496,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,78,,"    assertEquals(subFields.get(0).getName(), ""Backward"");"
211497,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/ColumnPrunerTest.java,79,,"    assertEquals(subFields.get(1).getName(), ""Forward"");"
211498,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/CompressionConveterTest.java,131,,"      assertTrue(group.getLong(""DocId"", 0) == testDocs.docId[i]);"
211499,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/TestHadoop2ByteBufferReads.java,74,,"    Assert.assertEquals(""Buffer contents should match"","
211500,./TargetProjects/parquet-mr/parquet-hadoop/src/test/java/org/apache/parquet/hadoop/util/TestSerializationUtil.java,48,,"    SerializationUtil.writeObjectToConfAsBase64(""anobject"", anObject, conf);"
211501,./TargetProjects/parquet-mr/parquet-pig/src/main/java/org/apache/parquet/pig/ParquetLoader.java,156,,"      String jobToString = String.format(""job[id=%s, name=%s]"", job.getJobID(), job.getJobName());"
211502,./TargetProjects/parquet-mr/parquet-pig/src/main/java/org/apache/parquet/pig/PigSchemaConverter.java,500,,"    if (LOG.isDebugEnabled()) LOG.debug(""filtering type:\n"" + type + ""\nwith:\n "" + fieldSchema);"
211503,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,79,,"    String out = ""target/out"";"
211504,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,88,,"    pigServer.registerQuery(""A = LOAD 'in' USING mock.Storage();"");"
211505,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,90,,"    pigServer.registerQuery(""Store A into '""+out+""' using "" + ParquetStorer.class.getName()+""();"");"
211506,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,90,,"    pigServer.registerQuery(""Store A into '""+out+""' using "" + ParquetStorer.class.getName()+""();"");"
211507,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,90,,"    pigServer.registerQuery(""Store A into '""+out+""' using "" + ParquetStorer.class.getName()+""();"");"
211508,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,98,,"    pigServer.registerQuery(""C = LOAD '"" + out + ""' using "" + ParquetLoader.class.getName()+""();"");"
211509,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,102,,"    List<Tuple> actualList = data.get(""out"");"
211510,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetLoader.java,232,,"      String query = ""B = LOAD '"" + out + ""' using "" + ParquetLoader.class.getName()+"
211511,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,49,,"    String out = ""target/out"";"
211512,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,64,,"    pigServer.registerQuery(""Store A into '""+out+""' using ""+ParquetStorer.class.getName()+""();"");"
211513,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,64,,"    pigServer.registerQuery(""Store A into '""+out+""' using ""+ParquetStorer.class.getName()+""();"");"
211514,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,66,,"      throw new RuntimeException(""Job failed"", pigServer.executeBatch().get(0).getException());"
211515,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,69,,"    pigServer.registerQuery(""B = LOAD '""+out+""' USING ""+ParquetLoader.class.getName()+""();"");"
211516,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,69,,"    pigServer.registerQuery(""B = LOAD '""+out+""' USING ""+ParquetLoader.class.getName()+""();"");"
211517,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,70,,"    pigServer.registerQuery(""Store B into 'out' using mock.Storage();"");"
211518,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestParquetStorer.java,75,,"    List<Tuple> result = data.get(""out"");"
211519,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,113,,"        ""message pig_schema {\n"" +"
211520,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,114,,"        ""  optional binary a (UTF8);\n"" +"
211521,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,119,,"        ""    }\n"" +"
211522,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,120,,"        ""  }\n"" +"
211523,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,121,,"        ""}\n"");"
211524,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,146,,"        ""    repeated group key_value (MAP_KEY_VALUE) {\n"" +"
211525,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,147,,"        ""      required binary key (UTF8);\n"" +"
211526,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java,151,,"        ""      }\n"" +"
211527,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestTupleRecordConsumer.java,70,,"    links.addGroup(""Backward"").addGroup(""bag"").add(0, 1l);"
211528,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/TestTupleRecordConsumer.java,85,,"    addGroup.addGroup(""bag"").append(""b"", ""foo"");"
211529,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/summary/TestSummary.java,46,,"      t(b(t(1l), t(2l, m(""foo"", ""bar"")), t(3))),"
211530,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/summary/TestSummary.java,46,,"      t(b(t(1l), t(2l, m(""foo"", ""bar"")), t(3))),"
211531,./TargetProjects/parquet-mr/parquet-pig/src/test/java/org/apache/parquet/pig/summary/TestSummary.java,48,,"      t(b(t(1l), t(2l), t(2, ""bloh""))),"
211532,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoInputOutputFormatTest.java,50,,"      msg.addRepeatedString(""Msg1"");"
211533,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoInputOutputFormatTest.java,51,,"      msg.addRepeatedString(""Msg2"");"
211534,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoInputOutputFormatTest.java,154,,"    inputMessage.setString(""writtenString"");"
211535,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoInputOutputFormatTest.java,358,,"      .addRepeatedInnerMessage(TestProtobuf.InnerMessage.newBuilder().setOne(""one"").build())"
211536,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoInputOutputFormatTest.java,359,,"      .addRepeatedInnerMessage(TestProtobuf.InnerMessage.newBuilder().setTwo(""two"").build())"
211537,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoRecordConverterTest.java,43,,"    data.setOptionalBytes(ByteString.copyFrom(""someText"", ""UTF-8""));"
211538,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoRecordConverterTest.java,43,,"    data.setOptionalBytes(ByteString.copyFrom(""someText"", ""UTF-8""));"
211539,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoRecordConverterTest.java,55,,"    data.setOptionalString(""Good Will Hunting"");"
211540,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoRecordConverterTest.java,241,,"    top.addInnerBuilder().setOne(""First inner"");"
211541,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoRecordConverterTest.java,242,,"    top.addInnerBuilder().setTwo(""Second inner"");"
211542,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoRecordConverterTest.java,243,,"    top.addInnerBuilder().setThree(""Third inner"");"
211543,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,70,,"      ""    optional int32 someId = 3;\n"" +"
211544,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,71,,"      ""  }\n"" +"
211545,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,114,,"        ""      }\n"" +"
211546,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,115,,"        ""    }\n"" +"
211547,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,129,,"        ""    repeated group list {\n"" +"
211548,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,130,,"        ""      required int32 element;\n"" +"
211549,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoSchemaConverterTest.java,141,,"        ""      optional group element {\n"" +"
211550,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,55,,"    msg.setOne(""oneValue"");"
211551,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,62,,"    inOrder.verify(readConsumerMock).startField(""one"", 0);"
211552,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,86,,"    inOrder.verify(readConsumerMock).startField(""two"", 1);"
211553,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,89,,"    inOrder.verify(readConsumerMock).startField(""three"", 2);"
211554,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,113,,"    inOrder.verify(readConsumerMock).startField(""repeatedInt"", 0);"
211555,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,115,,"    inOrder.verify(readConsumerMock).startField(""list"", 0);"
211556,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,118,,"    inOrder.verify(readConsumerMock).startField(""element"", 0);"
211557,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,302,,"    inOrder.verify(readConsumerMock).startField(""mapInt"", 0);"
211558,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,304,,"    inOrder.verify(readConsumerMock).startField(""key_value"", 0);"
211559,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,307,,"    inOrder.verify(readConsumerMock).startField(""key"", 0);"
211560,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,310,,"    inOrder.verify(readConsumerMock).startField(""value"", 1);"
211561,./TargetProjects/parquet-mr/parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java,528,,"    inOrder.verify(readConsumerMock).startField(""inner"", 0);"
211562,./TargetProjects/parquet-mr/parquet-thrift/src/main/java/org/apache/parquet/hadoop/thrift/ThriftReadSupport.java,191,,"  @SuppressWarnings(""unchecked"")"
211563,./TargetProjects/parquet-mr/parquet-thrift/src/main/java/org/apache/parquet/thrift/struct/ThriftType.java,179,,"      throw new IllegalArgumentException(""Expected complex type"");"
211564,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,62,,"            rc.startField(""list_of_ints"", 0);"
211565,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,82,,"            ""  }"" +"
211566,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,129,,"            rc.startField(""array"", 0);"
211567,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,153,,"            ""  optional group locations (LIST) {"" +"
211568,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,157,,"            ""    }"" +"
211569,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,164,,"            rc.startField(""locations"", 0);"
211570,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,167,,"            rc.startField(""element"", 0);"
211571,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,170,,"            rc.startField(""latitude"", 0);"
211572,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,173,,"            rc.startField(""longitude"", 1);"
211573,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,225,,"            rc.startField(""count"", 0);"
211574,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,268,,"            ""        required double latitude;"" +"
211575,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,269,,"            ""        required double longitude;"" +"
211576,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,270,,"            ""      }"" +"
211577,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,281,,"            rc.startField(""list"", 0); // start writing array contents"
211578,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestArrayCompatibility.java,564,,"            rc.startField(""listOfLists_tuple_tuple"", 0); // start writing inner array contents"
211579,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,75,,"                            new Name(""Bob"", ""Roberts""),"
211580,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,75,,"                            new Name(""Bob"", ""Roberts""),"
211581,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,77,,"                            ""bob.roberts@example.com"","
211582,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,231,,"    innerValue1.put(""inner key (1, 1)"", ""inner (1, 1)"");"
211583,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,232,,"    innerValue1.put(""inner key (1, 2)"", ""inner (1, 2)"");"
211584,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,235,,"    innerValue2.put(""inner key (2, 1)"", ""inner (2, 1)"");"
211585,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,236,,"    innerValue2.put(""inner key (2, 2)"", ""inner (2, 2)"");"
211586,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,238,,"    mapValue.put(""outer key 1"", innerValue1);"
211587,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,239,,"    mapValue.put(""outer key 2"", innerValue2);"
211588,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java,305,,"    toWrite.setInfo(""test_info"");"
211589,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestThriftToParquetFileWriter.java,90,,"      assertEquals(a.persons.size(), g.getFieldRepetitionCount(""persons""));"
211590,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestThriftToParquetFileWriter.java,214,,"          g.getGroup(""names"", 0).getFieldRepetitionCount(""names_tuple""));"
211591,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestThriftToParquetFileWriter.java,216,,"          g.getGroup(""names"", 0).getGroup(""names_tuple"", 0).getFieldRepetitionCount(""key_value""));"
211592,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/hadoop/thrift/TestThriftToParquetFileWriter.java,225,,"    map.put(""key"", Arrays.asList(""val1"",""val2""));"
211593,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,76,,"        ""startMessage()"","
211594,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,77,,"         ""startField(name, 0)"","
211595,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,79,,"         ""endField(name, 0)"","
211596,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,80,,"         ""startField(names, 1)"","
211597,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,81,,"          ""startGroup()"","
211598,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,82,,"           ""startField(key_value, 0)"","
211599,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,84,,"             ""startField(key, 0)"","
211600,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,85,,"              ""addBinary(foo)"","
211601,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,86,,"             ""endField(key, 0)"","
211602,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,87,,"             ""startField(value, 1)"","
211603,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,88,,"              ""addBinary(bar)"","
211604,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,89,,"             ""endField(value, 1)"","
211605,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,90,,"            ""endGroup()"","
211606,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,99,,"           ""endField(key_value, 0)"","
211607,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,101,,"         ""endField(names, 1)"","
211608,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,102,,"        ""endMessage()"""
211609,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,163,,"           ""startField(t, 0)"", // repeated field"
211610,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,165,,"             ""startField(names_tuple, 0)"", // map: optional field"
211611,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,178,,"             ""endField(names_tuple, 0)"","
211612,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,180,,"           ""endField(t, 0)"","
211613,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,228,,"    names.add(""John"");"
211614,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,229,,"    names.add(""Jack"");"
211615,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,230,,"    final TestNameList o = new TestNameList(""name"", names);"
211616,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,235,,"          ""addBinary(name)"","
211617,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,242,,"                ""addBinary(John)"","
211618,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,247,,"                ""addBinary(Jack)"","
211619,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,377,,"                 ""startField(number, 0)"","
211620,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,379,,"                 ""endField(number, 0)"","
211621,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,564,,"                ""startField(element, 0)"","
211622,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetWriteProtocol.java,566,,"                ""endField(element, 0)"","
211623,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestProtocolReadToWrite.java,124,,"      fail(""this should throw"");"
211624,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestProtocolReadToWrite.java,141,,"    StructWithUnionV1 validUnion = new StructWithUnionV1(""a valid struct"", UnionV1.aLong(new ALong(17L)));"
211625,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,51,,"            ""message ParquetSchema {\n"" +"
211626,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,57,,"                    ""      }\n"" +"
211627,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,64,,"                    ""        }\n"" +"
211628,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,66,,"                    ""    }\n"" +"
211629,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,67,,"                    ""  }\n"" +"
211630,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,77,,"    shouldGetProjectedSchema(""name/first_name"", ""name.first_name"", ""message ParquetSchema {"" +"
211631,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,78,,"            ""  required group name = 1 {"" +"
211632,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,79,,"            ""    optional binary first_name (UTF8) = 1;"" +"
211633,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,85,,"            ""    optional binary last_name (UTF8) = 2;"" +"
211634,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverter.java,243,,"      fail(""this should throw"");"
211635,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,46,,"        ""message ParquetSchema {\n"" +"
211636,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,49,,"        ""  }\n"" +"
211637,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,63,,"        ""    required binary name (UTF8) = 1;\n"" +"
211638,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,79,,"    shouldGetProjectedSchema(""name"", ""name"","
211639,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,121,,"        ""      optional group structV3 = 1 {\n"" +"
211640,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,122,,"        ""        required binary name (UTF8) = 1;\n"" +"
211641,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,123,,"        ""      }\n"" +"
211642,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,124,,"        ""      optional group structV4 = 2 {\n"" +"
211643,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,127,,"        ""      optional group aNewBool = 3 {\n"" +"
211644,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,128,,"        ""        required boolean b = 1;\n"" +"
211645,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,130,,"        ""    }\n"" +"
211646,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,146,,"        ""    optional group structV3 = 1 {\n"" +"
211647,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,147,,"        ""      required binary name (UTF8) = 1;\n"" +"
211648,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,149,,"        ""    optional group structV4 = 2 {\n"" +"
211649,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,151,,"        ""        optional binary gender (UTF8) = 3;\n"" +"
211650,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,154,,"        ""    optional group aNewBool = 3 {\n"" +"
211651,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,155,,"        ""      required boolean b = 1;\n"" +"
211652,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,237,,"        ""      required int64 l = 1;\n"" +"
211653,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,313,,"        ""        optional group structV3 = 1 {\n"" +"
211654,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,314,,"        ""          required binary name (UTF8) = 1;\n"" +"
211655,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,315,,"        ""          optional binary age (UTF8) = 2;\n"" +"
211656,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,316,,"        ""          optional binary gender (UTF8) = 3;\n"" +"
211657,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,317,,"        ""        }\n"" +"
211658,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,318,,"        ""        optional group structV4 = 2 {\n"" +"
211659,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,328,,"        ""        optional group aNewBool = 3 {\n"" +"
211660,./TargetProjects/parquet-mr/parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftSchemaConverterProjectUnion.java,329,,"        ""          required boolean b = 1;\n"" +"
211661,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java,502,,"                if (currentFilePath.startsWith(""http""))"
211662,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FieldFlag.java,89,,"                new Object[]{1, ""ReadOnly"", isFlagBitSet(flagValue, 1)},"
211663,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FieldFlag.java,90,,"                new Object[]{2, ""Required"", isFlagBitSet(flagValue, 2)},"
211664,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/FieldFlag.java,91,,"                new Object[]{3, ""NoExport"", isFlagBitSet(flagValue, 3)},"
211665,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/PanoseFlag.java,86,,"                ""Any"","
211666,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/flagbitspane/PanoseFlag.java,87,,"                ""No Fit"","
211667,./TargetProjects/pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/streampane/StreamPane.java,167,,"            tabbedPane.add(""Hex view"", hexView.getPane());"
211668,./TargetProjects/pdfbox/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java,153,,"            sortDic.setItem(COSName.S, COSName.getPDFName(""fieldtwo""));"
211669,./TargetProjects/pdfbox/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractTTFFonts.java,154,,"                    name = getUniqueFileName(prefix + ""_"" + key, ""ttf"");"
211670,./TargetProjects/pdfbox/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/PrintBookmarks.java,100,,"                System.out.println(indentation + ""Destination page: "" + (pd.retrievePageNumber() + 1));"
211671,./TargetProjects/pdfbox/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ShowTextWithPositioning.java,57,,"             InputStream is = PDDocument.class.getResourceAsStream(""/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf""))"
211672,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java,74,,"            PDTextField textBox = (PDTextField) acroForm.getField(""SampleField"");"
211673,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java,177,,"	@MethodSource(""signingTypes"")"
211674,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java,352,,"            signing.setVisibleSignatureProperties(""name"", ""location"", ""Security"", 0, 1, true);"
211675,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java,352,,"            signing.setVisibleSignatureProperties(""name"", ""location"", ""Security"", 0, 1, true);"
211676,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java,352,,"            signing.setVisibleSignatureProperties(""name"", ""location"", ""Security"", 0, 1, true);"
211677,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java,548,,"                @SuppressWarnings(""unchecked"")"
211678,./TargetProjects/pdfbox/examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestCreateSignature.java,672,,"            PDField field = doc.getDocumentCatalog().getAcroForm().getField(""SampleField"");"
211679,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java,106,,"        @SuppressWarnings(""unused"")"
211680,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java,475,,"        font.addValueToTopDict(""FontMatrix"", topDict.getArray(""FontMatrix"", Arrays.<Number>asList("
211681,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java,479,,"        font.addValueToTopDict(""FontBBox"", topDict.getArray(""FontBBox"","
211682,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java,679,,"            int localSubrOffset = (Integer) privateDict.getNumber(""Subrs"", 0);"
211683,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java,817,,"        encoding.add(0, 0, "".notdef"");"
211684,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java,169,,"                    + "" of font "" + fontName);"
211685,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/cff/Type1CharString.java,346,,"                LOG.warn(""flex without moveTo in font "" + fontName + "", glyph "" + glyphName +"
211686,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java,146,,"            LOG.warn(""subtable has no glyphs"");"
211687,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java,482,,"                    LOG.debug(""Tried skipping "" + g.getOffset() + "" bytes but skipped only "" + isResult + "" bytes"");"
211688,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java,482,,"                    LOG.debug(""Tried skipping "" + g.getOffset() + "" bytes but skipped only "" + isResult + "" bytes"");"
211689,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java,482,,"                    LOG.debug(""Tried skipping "" + g.getOffset() + "" bytes but skipped only "" + isResult + "" bytes"");"
211690,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,103,,"        read(Token.NAME, ""dict"");"
211691,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,105,,"        readMaybe(Token.NAME, ""dup"");"
211692,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,107,,"        read(Token.NAME, ""begin"");"
211693,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,118,,"                (""currentdict"".equals(token.getText()) || ""end"".equals(token.getText())))"
211694,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,199,,"            readMaybe(Token.NAME, ""readonly"");"
211695,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,200,,"            read(Token.NAME, ""def"");"
211696,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,475,,"        Token executeonly = readMaybe(Token.NAME, ""executeonly"");"
211697,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,579,,"                    readMaybe(Token.NAME, ""noaccess"");"
211698,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/type1/Type1Parser.java,802,,"        throw new IOException(""Found "" + token + "" but expected ND"");"
211699,./TargetProjects/pdfbox/fontbox/src/main/java/org/apache/fontbox/util/autodetect/WindowsFontDirFinder.java,79,,"            LOG.debug(""Couldn't get Windows font directories - ignoring"", e);"
211700,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/afm/AFMParserTest.java,114,,"                new FileInputStream(""src/test/resources/afm/Helvetica.afm""));"
211701,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/afm/CompositeTest.java,32,,"        Composite composite = new Composite(""name"");"
211702,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/afm/FontMetricsTest.java,53,,"            fail(""An UnsupportedOperationException should have been thrown"");"
211703,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFCharsetTest.java,30,,"        assertEquals(0, cffExpertCharset.getSID("".notdef""));"
211704,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFEncodingTest.java,30,,"        assertEquals(""space"", cffExpertEncoding.getName(32));"
211705,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFParserTest.java,85,,"        assertEquals("".notdef"", charset.getNameForGID(0), ""Unexpected value for gid2name mapping"");"
211706,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFParserTest.java,93,,"        assertEquals(0, charset.getSIDForGID(0), ""Unexpected value for gid2sid mapping"");"
211707,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFParserTest.java,99,,"        assertEquals(0, charset.getSID("".notdef""), ""Unexpected value for name2sid mapping"");"
211708,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFParserTest.java,124,,"                ""Other char strings byte values than expected"");"
211709,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cff/CFFParserTest.java,172,,"        @SuppressWarnings(""unchecked"")"
211710,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/cmap/TestCMapParser.java,47,,"        final String resourceDir = ""src/test/resources/cmap"";"
211711,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java,50,,"        TrueTypeFont x = new TTFParser().parse(""src/test/resources/ttf/LiberationSans-Regular.ttf"");"
211712,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java,58,,"            assertEquals(0, subset.nameToGID("".notdef""));"
211713,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizerTest.java,38,,"                new HashSet<>(Arrays.asList(new String[] { ""HrkJj"", ""68RetP"", ""Yx!23uyt"" })));"
211714,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizerTest.java,38,,"                new HashSet<>(Arrays.asList(new String[] { ""HrkJj"", ""68RetP"", ""Yx!23uyt"" })));"
211715,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizerTest.java,38,,"                new HashSet<>(Arrays.asList(new String[] { ""HrkJj"", ""68RetP"", ""Yx!23uyt"" })));"
211716,./TargetProjects/pdfbox/fontbox/src/test/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizerTest.java,74,,"                new HashSet<>(Arrays.asList(new String[] { ""67_112_96"", ""74_112_76"" })));"
211717,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/filter/DecodeOptions.java,231,,"            throw new UnsupportedOperationException(""This instance may not be modified."");"
211718,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java,167,,"            LOG.error(""expected number, actual="" + value + "" at offset "" + numOffset);"
211719,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java,405,,"                    nextChar + ""' at offset "" + source.getPosition());"
211720,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java,2159,,"        if( !nextLine.trim().equals( ""trailer"" ) )"
211721,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java,714,,"            throw new IllegalArgumentException(""Parameters must be within 0..1, but are """
211722,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java,98,,"    public static final String PLACEMENT_START                 = ""Start"";"
211723,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java,106,,"    public static final String PLACEMENT_END                   = ""End"";"
211724,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDLayoutAttributeObject.java,194,,"    public static final String WIDTH_AUTO                      = ""Auto"";"
211725,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java,290,,"            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(getEncryptionKey(), ""AES""));"
211726,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationStamp.java,149,,"        String parentAttrKey = appearanceXML.getAttribute(""KEY"");"
211727,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationStamp.java,167,,"                if (""STREAM"".equalsIgnoreCase(child.getTagName()))"
211728,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationStamp.java,174,,"                    LOG.debug(parentAttrKey + "" => Set "" + child.getAttribute(""KEY""));"
211729,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationStamp.java,244,,"                              child.getAttribute(""ENCODING""));"
211730,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationStamp.java,309,,"                    LOG.debug(parentAttrKey + "" value("" + i + ""): "" + childAttrVal);"
211731,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationStamp.java,309,,"                    LOG.debug(parentAttrKey + "" value("" + i + ""): "" + childAttrVal);"
211732,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java,202,,"                LOG.warn(""Could not load font file: "" + file, e);"
211733,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FileSystemFontProvider.java,724,,"                        LOG.trace(format +"": '"" + name.getPostScriptName() + ""' / '"" +"
211734,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java,152,,"        if (name.equals("".notdef"") && !isEmbedded() && !isStandard14())"
211735,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java,156,,"        if (""sfthyphen"".equals(name))"
211736,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java,158,,"            return genericFont.getPath(""hyphen"");"
211737,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java,160,,"        if (""nbspace"".equals(name))"
211738,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1CFont.java,162,,"            return genericFont.getPath(""space"");"
211739,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType1Font.java,431,,"            if ("".notdef"".equals(name))"
211740,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/Standard14Fonts.java,65,,"        mapName(""Symbol"");"
211741,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactory.java,245,,"                throw new IOException(""Not a valid tiff file"");"
211742,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java,223,,"            throw new IllegalArgumentException(""Image type not supported: "" + name);"
211743,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/util/DateConverter.java,433,,"        TimeZone tz = new SimpleTimeZone(0, ""GMT"");"
211744,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/util/SmallMap.java,122,,"    @SuppressWarnings(""unchecked"")"
211745,./TargetProjects/pdfbox/pdfbox/src/main/java/org/apache/pdfbox/util/SmallMap.java,136,,"            throw new NullPointerException( ""Key or value must not be null."");"
211746,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSArray.java,167,,"        assertEquals(""NULL"", cosArray.getName(3, ""NULL""));"
211747,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSStream.java,45,,"        byte[] testString = ""This is a test string to be used as input for TestCOSStream"".getBytes(StandardCharsets.US_ASCII);"
211748,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java,283,,"            COSString x1 = new COSString(""Test"");"
211749,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/cos/UnmodifiableCOSDictionaryTest.java,35,,"            fail(""An UnsupportedOperationException should have been thrown"");"
211750,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java,161,,"	@MethodSource(""keyLengths"")"
211751,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java,95,,"        if (Cipher.getMaxAllowedKeyLength(""AES"") != Integer.MAX_VALUE)"
211752,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java,366,,"            File pdfFile = new File(testResultsDir, prefix + keyLength + ""-bit-"" + (preferAES ? ""AES"" : ""RC4"") + ""-decrypted.pdf"");"
211753,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/encryption/TestSymmetricKeyEncryption.java,366,,"            File pdfFile = new File(testResultsDir, prefix + keyLength + ""-bit-"" + (preferAES ? ""AES"" : ""RC4"") + ""-decrypted.pdf"");"
211754,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/filter/PredictorTest.java,36,,"        assertEquals(Integer.parseInt(""11111111"", 2), getBitSeq(Integer.parseInt(""11111111"", 2), 0, 8));"
211755,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/filter/PredictorTest.java,37,,"        assertEquals(Integer.parseInt(""00000000"", 2), getBitSeq(Integer.parseInt(""00000000"", 2), 0, 8));"
211756,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/filter/PredictorTest.java,40,,"        assertEquals(Integer.parseInt(""001"", 2), getBitSeq(Integer.parseInt(""00110001"", 2), 0, 3));"
211757,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/filter/PredictorTest.java,41,,"        assertEquals(Integer.parseInt(""10101010"", 2), getBitSeq(Integer.parseInt(""10101010"", 2), 0, 8));"
211758,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/io/RandomAccessReadBufferedFileTest.java,39,,"                new File(getClass().getResource(""RandomAccessReadFile1.txt"").toURI())))"
211759,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/io/RandomAccessReadMemoryMappedFileTest.java,43,,"                new File(getClass().getResource(""RandomAccessReadFile1.txt"").toURI())))"
211760,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/io/SequenceRandomAccessReadTest.java,76,,"        String input1 = ""01234567890123456789"";"
211761,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/io/SequenceRandomAccessReadTest.java,79,,"        String input2 = ""abcdefghijklmnopqrst"";"
211762,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/multipdf/OverlayTest.java,73,,"            try (PDDocument overlayDocument = Loader.loadPDF(new File(IN_DIR, ""rot"" + rotation + "".pdf"")))"
211763,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java,202,,"                .loadPDF(new File(TARGETPDFDIR, ""PDFBOX-3999-GeneralForbearance.pdf""));"
211764,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java,290,,"        PDDocument src = Loader.loadPDF(new File(TARGETPDFDIR, ""PDFBOX-4408.pdf""));"
211765,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/multipdf/PDFMergerUtilityTest.java,723,,"        pdfMergerUtility.addSource(new File(SRCDIR, ""PDFA3A.pdf""));"
211766,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/PDFStreamParserTest.java,45,,"        testInlineImage2ops(""ID\n12345EI Q"", ""12345"", ""Q"");"
211767,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/PDFStreamParserTest.java,46,,"        testInlineImage2ops(""ID\n12345EI EMC"", ""12345"", ""EMC"");"
211768,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/PDFStreamParserTest.java,67,,"        testInlineImage1op(""ID\n12EI5EI"", ""12EI5"");"
211769,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/TestPDFParser.java,51,,"            fail(""Unexpected Exception"");"
211770,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java,166,,"        assertEquals(3, cosArrayList.size(), ""List size shall be 3"");"
211771,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java,167,,"        assertEquals(3, annotationsArray.size(), ""COSArray size shall be 3"");"
211772,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java,187,,"        assertTrue(cosArrayList.remove(toBeRemoved), ""Remove operation shall return true"");"
211773,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java,106,,"        assertTrue(byteArrayContainsLC(""non os specific"", nonOSFile.toByteArray(), ""ISO-8859-1""),"
211774,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/function/type4/TestOperators.java,57,,"    @SuppressWarnings(""squid:S2699"") // Assertion done in Type4Tester"
211775,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java,79,,"            validate(ximage3, 1, 344, 287, ""tiff"", PDDeviceGray.INSTANCE.getName());"
211776,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java,79,,"        InputStream stream = JPEGFactoryTest.class.getResourceAsStream(""jpeg.jpg"");"
211777,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java,81,,"        validate(ximage, 8, 344, 287, ""jpg"", PDDeviceRGB.INSTANCE.getName());"
211778,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactoryTest.java,161,,"                && (System.getProperty(""java.specification.version"").equals(""1.6"")"
211779,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java,89,,"        BufferedImage image = ImageIO.read(this.getClass().getResourceAsStream(""png.png""));"
211780,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java,92,,"        validate(ximage1, 8, image.getWidth(), image.getHeight(), ""png"", PDDeviceRGB.INSTANCE.getName());"
211781,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,53,,"        testCompareCreatedFileByExtensionWithCreatedByCCITTFactory(""ccittg4.tif"");"
211782,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,55,,"        testCompareCreatedFileByExtensionWithCreatedByJPEGFactory(""jpeg.jpg"");"
211783,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,56,,"        testCompareCreatedFileByExtensionWithCreatedByJPEGFactory(""jpegcmyk.jpg"");"
211784,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,58,,"        testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(""gif.gif"");"
211785,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,59,,"        testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(""gif-1bit-transparent.gif"");"
211786,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,60,,"        testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(""png_indexed_8bit_alpha.png"");"
211787,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java,61,,"        testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(""png.png"");"
211788,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java,97,,"            PDOptionalContentGroup background = new PDOptionalContentGroup(""background"");"
211789,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java,102,,"            PDOptionalContentGroup enabled = new PDOptionalContentGroup(""enabled"");"
211790,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java,108,,"            PDOptionalContentGroup disabled = new PDOptionalContentGroup(""disabled"");"
211791,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java,123,,"                contentStream.showText(""PDF 1.5: Optional Content Groups"");"
211792,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java,351,,"            PDOptionalContentGroup enabled = new PDOptionalContentGroup(""science"");"
211793,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/optionalcontent/TestOptionalContentGroups.java,357,,"            PDOptionalContentGroup disabled1 = new PDOptionalContentGroup(""alternative"");"
211794,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java,76,,"            assertEquals(0, cosFields.size(), ""Initially there shall be 0 fields"");"
211795,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java,78,,"            assertEquals(numFormFieldsByAcrobat, acroForm.getFields().size(), ""After rebuild there shall be "" + numFormFieldsByAcrobat + "" fields"");"
211796,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,117,,"            radioButton.setValue(""Off"");"
211797,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,168,,"        PDCheckBox checkbox = (PDCheckBox) acrobatAcroForm.getField(""Checkbox"");"
211798,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,170,,"        assertEquals(""Yes"", checkbox.getOnValue());"
211799,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,222,,"        PDCheckBox checkbox = (PDCheckBox) acrobatAcroForm.getField(""CheckboxGroup"");"
211800,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,231,,"        assertTrue(checkbox.getOnValues().contains(""Option1""));"
211801,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,233,,"        assertTrue(checkbox.getOnValues().contains(""Option3""));"
211802,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,295,,"        assertThrows(IllegalArgumentException.class, () -> checkbox.setValue(""InvalidValue""));"
211803,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,325,,"        PDRadioButton radioButton = (PDRadioButton) acrobatAcroForm.getField(""RadioButtonGroup"");"
211804,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,328,,"        assertTrue(radioButton.getOnValues().contains(""RadioButton01""));"
211805,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java,329,,"        assertTrue(radioButton.getOnValues().contains(""RadioButton02""));"
211806,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,70,,"            options.add(""Value01"");"
211807,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,71,,"            options.add(""Value02"");"
211808,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,87,,"                widget.setAppearanceState(""Off"");"
211809,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,141,,"        String sourceUrl = ""https://issues.apache.org/jira/secure/attachment/12848122/SF1199AEG%20%28Complete%29.pdf"";"
211810,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,146,,"            PDRadioButton field = (PDRadioButton) acroForm.getField(""Checking/Savings"");"
211811,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,148,,"                    ""the radio buttons can be selected individually although having the same ON value"");"
211812,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,172,,"            assertEquals(""Off"", field.getValue(), ""initially no option shall be selected"");"
211813,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java,174,,"            field.setValue(""Checking"");"
211814,./TargetProjects/pdfbox/pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java,464,,"                + ""Content\n"""
211815,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/content/PreflightContentStream.java,210,,"                registerError(""Invalid argument for the operator : "" + operator.getName(),"
211816,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java,167,,"                        ""DestOutputProfile is missing""));"
211817,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java,76,,"                        if (dc.getTitle(""x-default"") != null)"
211818,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java,80,,"                                ve.add(unsynchronizedMetaDataError(""Title""));"
211819,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java,107,,"                                ve.add(absentXMPPropertyError(""Title"", ""Property is not defined""));"
211820,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java,149,,"                        ve.add(absentXMPPropertyError(""Author"","
211821,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java,204,,"                            ve.add(absentXMPPropertyError(""Subject"","
211822,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/metadata/SynchronizedMetaDataValidation.java,365,,"                    ve.add(absentXMPPropertyError(""CreationDate"", ""Property is not defined""));"
211823,./TargetProjects/pdfbox/preflight/src/main/java/org/apache/pdfbox/preflight/process/AbstractProcess.java,65,,"            addValidationError(context, new ValidationError(PreflightConstants.ERROR_FONTS_TYPE1_DAMAGED, ""The FontFile can't be read for "" + fontName + "": "" + e.getMessage()));"
211824,./TargetProjects/pdfbox/preflight/src/test/java/org/apache/pdfbox/preflight/action/pdfa1b/TestGotoRemoteAction.java,38,,"        gotoAction.setD(COSName.getPDFName(""ADest""));"
211825,./TargetProjects/pdfbox/preflight/src/test/java/org/apache/pdfbox/preflight/metadata/TestMetadataFiles.java,44,,"        assertTrue(checkPDF(validFile), ""Metadata test file "" + validFile + "" has to be valid "");"
211826,./TargetProjects/pdfbox/preflight/src/test/java/org/apache/pdfbox/preflight/metadata/TestMetadataFiles.java,48,,"        assertFalse(checkPDF(invalidFile1), ""Metadata test file "" + invalidFile1 + "" has to be invalid "");"
211827,./TargetProjects/pdfbox/preflight/src/test/java/org/apache/pdfbox/preflight/metadata/TestSynchronizedMetadataValidation.java,271,,"        dc.setTitle(""x-default"", ""XMPTitle"");"
211828,./TargetProjects/pdfbox/preflight/src/test/java/org/apache/pdfbox/preflight/parser/TestXmlResultParser.java,64,,"        parser.createResponseWithError(document, ""pdftype"", result, preflight);"
211829,./TargetProjects/pdfbox/tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java,125,,"        field = new IIOMetadataNode(""TIFFField"");"
211830,./TargetProjects/pdfbox/tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java,126,,"        field.setAttribute(""number"", Integer.toString(tiffTagNumber));"
211831,./TargetProjects/pdfbox/tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java,127,,"        field.setAttribute(""name"", name);"
211832,./TargetProjects/pdfbox/tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java,132,,"        valueNode.setAttribute(""value"", Integer.toString(val));"
211833,./TargetProjects/pdfbox/tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java,134,,"            checkResolution(outDir + file.getName() + ""-1."" + imageType, (int) dpi);"
211834,./TargetProjects/pdfbox/tools/src/test/java/org/apache/pdfbox/tools/imageio/TestImageIOUtils.java,202,,"        assertNotNull(newImage, ""File '"" + filename + ""' could not be read"");"
211835,./TargetProjects/pdfbox/xmpbox/src/main/java/org/apache/xmpbox/DateConverter.java,291,,"        retval.append(String.format(Locale.US, ""%02d"", cal.get(Calendar.MONTH) + 1));"
211836,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/DateConverterTest.java,76,,"        testString1 = ""2015-02-02T16:37:19.192Z"";"
211837,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java,134,,"                + ""      <rdf:Description rdf:about=\""\""\n"""
211838,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/XMPMetaDataTest.java,140,,"                + ""      </rdf:Description>\n"""
211839,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/parser/DeserializationTest.java,170,,"            fail(""Should fail during parse"");"
211840,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/BasicJobTicketSchemaTest.java,45,,"        basic.addJob(""zeid2"", ""zename2"", ""zeurl2"");"
211841,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/BasicJobTicketSchemaTest.java,45,,"        basic.addJob(""zeid2"", ""zename2"", ""zeurl2"");"
211842,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/BasicJobTicketSchemaTest.java,45,,"        basic.addJob(""zeid2"", ""zename2"", ""zeurl2"");"
211843,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/DublinCoreTest.java,48,,"    @MethodSource(""initializeParameters"")"
211844,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/PhotoshopSchemaTest.java,46,,"    @MethodSource(""initializeParameters"")"
211845,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/XMPSchemaTest.java,50,,"    private final XMPSchema schem = new XMPSchema(parent, ""nsURI"", ""nsSchem"");"
211846,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/XMPSchemaTest.java,63,,"        schem.addBagValue(bagName, schem.getMetadata().getTypeMapping().createText(null, ""rdf"", ""li"", value1));"
211847,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/schema/XMPSchemaTester.java,220,,"                        String getNameProperty = ""get"" + prepareName(field.get(schema).toString(), spt) + ""Property"";"
211848,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestSimpleMetadataProperties.java,55,,"	        new BooleanType(parent, null, ""test"", ""boolean"", ""Not a Boolean"");"
211849,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestSimpleMetadataProperties.java,55,,"	        new BooleanType(parent, null, ""test"", ""boolean"", ""Not a Boolean"");"
211850,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestSimpleMetadataProperties.java,68,,"	        new DateType(parent, null, ""test"", ""date"", ""Bad Date"");"
211851,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestSimpleMetadataProperties.java,81,,"	        new IntegerType(parent, null, ""test"", ""integer"", ""Not an int"");"
211852,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestSimpleMetadataProperties.java,94,,"	        new RealType(parent, null, ""test"", ""real"", ""Not a real"");"
211853,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestSimpleMetadataProperties.java,108,,"	        new TextType(parent, null, ""test"", ""text"", calendar);"
211854,./TargetProjects/pdfbox/xmpbox/src/test/java/org/apache/xmpbox/type/TestStructuredType.java,44,,"    @MethodSource(""initializeParameters"")"
211855,./TargetProjects/pdfbox-jbig2/src/main/java/org/apache/pdfbox/jbig2/JBIG2ImageMetadata.java,84,,"        node.setAttribute(""value"", ""1.0"");"
211856,./TargetProjects/pdfbox-jbig2/src/main/java/org/apache/pdfbox/jbig2/JBIG2ImageMetadataFormat.java,38,,"        addElement(""ImageDescriptor"", JBIG2ImageMetadata.IMAGE_METADATA_FORMAT_NAME,"
211857,./TargetProjects/pdfbox-jbig2/src/main/java/org/apache/pdfbox/jbig2/JBIG2ImageMetadataFormat.java,40,,"        addAttribute(""ImageDescriptor"", ""imageWidth"", DATATYPE_INTEGER, true, null, ""1"", ""65535"","
211858,./TargetProjects/pdfbox-jbig2/src/main/java/org/apache/pdfbox/jbig2/image/Bitmaps.java,59,,"            throw new IllegalArgumentException(""bitmap must not be null"");"
211859,./TargetProjects/pdfbox-jbig2/src/test/java/org/apache/pdfbox/jbig2/ChecksumTest.java,49,,"                { ""target/images/042_1.jb2"", ""69-26-6629-1793-107941058147-58-79-37-31-79"" },"
211860,./TargetProjects/pdfbox-jbig2/src/test/java/org/apache/pdfbox/jbig2/JBIG2ImageReaderTest.java,67,,"        final File inputFile = new File(""target/images/042_1.jb2"");"
211861,./TargetProjects/pdfbox-jbig2/src/test/java/org/apache/pdfbox/jbig2/image/BitmapsChecksumTest.java,64,,"                { ""target/images/042_1.jb2"", 1,"
211862,./TargetProjects/pdfbox-jbig2/src/test/java/org/apache/pdfbox/jbig2/segments/GenericRegionTest.java,47,,"        final File inputFile = new File(""target/images/sampledata.jb2"");"
211863,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,50,,"        String ddl = ""create table "" + tableName1 + "" (pk integer primary key, col integer)"";"
211864,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,56,,"        conn.createStatement().execute(""UPSERT INTO "" + tableName1 + "" VALUES (1,2)"");"
211865,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,59,,"        conn.createStatement().executeQuery(""select "" + tableName1 + "".pk as pk from "" + tableName1 + "" group by pk"");"
211866,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,59,,"        conn.createStatement().executeQuery(""select "" + tableName1 + "".pk as pk from "" + tableName1 + "" group by pk"");"
211867,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,97,,"            sql=""select DISTINCT entity_id, score from ( select entity_id, score from ""+intTableName+"" limit 1)"";"
211868,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,252,,"                    ""pk1 ""+(desc ? ""desc"" : """")+"", ""+"
211869,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,266,,"            sql = ""select a.ak3 ""+"
211870,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,267,,"                  ""from (select pk1 ak1,pk2 ak2,pk3 ak3, substr(v1,1,1) av1,substr(v2,1,1) av2 from ""+tableName+"" order by pk2,pk3 limit 10) a ""+"
211871,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,270,,"            assertResultSet(rs, new Object[][]{{""b33""},{""b23""},{""b13""},{""a33""},{""a23""},{""a13""}});"
211872,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,270,,"            assertResultSet(rs, new Object[][]{{""b33""},{""b23""},{""b13""},{""a33""},{""a23""},{""a13""}});"
211873,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,270,,"            assertResultSet(rs, new Object[][]{{""b33""},{""b23""},{""b13""},{""a33""},{""a23""},{""a13""}});"
211874,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,270,,"            assertResultSet(rs, new Object[][]{{""b33""},{""b23""},{""b13""},{""a33""},{""a23""},{""a13""}});"
211875,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,270,,"            assertResultSet(rs, new Object[][]{{""b33""},{""b23""},{""b13""},{""a33""},{""a23""},{""a13""}});"
211876,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,270,,"            assertResultSet(rs, new Object[][]{{""b33""},{""b23""},{""b13""},{""a33""},{""a23""},{""a13""}});"
211877,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateIT.java,279,,"                  ""from (select pk1 ak1,pk2 ak2,pk3 ak3,substr(v1,1,1) av1,substr(v2,1,1) av2 from ""+tableName+"" order by pk2,pk3 limit 10) a ""+"
211878,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AggregateQueryIT.java,146,,"        String query = ""SELECT count(1) FROM "" + tableName + "" WHERE X_DECIMAL is null"";"
211879,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,118,,"            conn.createStatement().execute(""CREATE INDEX IF NOT EXISTS "" + indexNameOne + "" ON "" +"
211880,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,118,,"            conn.createStatement().execute(""CREATE INDEX IF NOT EXISTS "" + indexNameOne + "" ON "" +"
211881,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,139,,"        String query = ""ALTER "" +(isViewScenario ? ""VIEW "" : ""TABLE "") + phoenixObjectName + "" ADD new_column_3 VARCHAR(64) CASCADE INDEX ALL"";"
211882,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,139,,"        String query = ""ALTER "" +(isViewScenario ? ""VIEW "" : ""TABLE "") + phoenixObjectName + "" ADD new_column_3 VARCHAR(64) CASCADE INDEX ALL"";"
211883,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,139,,"        String query = ""ALTER "" +(isViewScenario ? ""VIEW "" : ""TABLE "") + phoenixObjectName + "" ADD new_column_3 VARCHAR(64) CASCADE INDEX ALL"";"
211884,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,213,,"        ColumnInfo [] columnArray =  {new ColumnInfo(""new_column_1"", PFloat.INSTANCE.getSqlType())};"
211885,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterAddCascadeIndexIT.java,214,,"        ColumnInfo [] columnIndexArray =  {new ColumnInfo(""0:new_column_1"", PDecimal.INSTANCE.getSqlType())};"
211886,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,102,,"            String baseTableDDL = ""CREATE TABLE "" + baseTable + "" (TENANT_ID VARCHAR NOT NULL, PK1 VARCHAR NOT NULL, V1 VARCHAR, V2 VARCHAR CONSTRAINT NAME_PK PRIMARY KEY(TENANT_ID, PK1)) MULTI_TENANT = true "";"
211887,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,107,,"                String view1DDL = ""CREATE VIEW "" + view1 + "" AS SELECT * FROM "" + baseTable;"
211888,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,107,,"                String view1DDL = ""CREATE VIEW "" + view1 + "" AS SELECT * FROM "" + baseTable;"
211889,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,122,,"            String alterBaseTable = ""ALTER TABLE "" + baseTable + "" ADD V3 VARCHAR"";"
211890,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,215,,"            globalConn.createStatement().execute(""SELECT * FROM "" + baseTable);"
211891,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,216,,"            assertTrue(checkColumnPartOfPk(globalConn.unwrap(PhoenixConnection.class), ""NEW_PK"", baseTable));"
211892,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,436,,"            String view1DDL = ""CREATE VIEW "" + view1 + "" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 CHAR(256)) AS SELECT * FROM "" + baseTable;"
211893,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,442,,"            tenant2Conn.createStatement().execute(""ALTER VIEW "" + divergedView + "" DROP COLUMN V2"");"
211894,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,479,,"            assertTableDefinition(tenant1Conn, view1, PTableType.VIEW, baseTable, 0, 7, 5,  ""PK1"", ""V1"", ""V2"", ""V3"", ""KV"", ""PK2"", ""VIEW_COL1"", ""VIEW_COL2"");"
211895,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,479,,"            assertTableDefinition(tenant1Conn, view1, PTableType.VIEW, baseTable, 0, 7, 5,  ""PK1"", ""V1"", ""V2"", ""V3"", ""KV"", ""PK2"", ""VIEW_COL1"", ""VIEW_COL2"");"
211896,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,479,,"            assertTableDefinition(tenant1Conn, view1, PTableType.VIEW, baseTable, 0, 7, 5,  ""PK1"", ""V1"", ""V2"", ""V3"", ""KV"", ""PK2"", ""VIEW_COL1"", ""VIEW_COL2"");"
211897,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,479,,"            assertTableDefinition(tenant1Conn, view1, PTableType.VIEW, baseTable, 0, 7, 5,  ""PK1"", ""V1"", ""V2"", ""V3"", ""KV"", ""PK2"", ""VIEW_COL1"", ""VIEW_COL2"");"
211898,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterMultiTenantTableWithViewsIT.java,512,,"            assertTableDefinition(conn, baseTable, PTableType.TABLE, null, 1, 6, BASE_TABLE_BASE_COLUMN_COUNT, ""TENANT_ID"", ""PK1"", ""V1"", ""V2"", ""V3"");"
211899,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,132,,"        conn.createStatement().execute(""ALTER TABLE "" + dataTableFullName + "" SET DISABLE_WAL = true"");"
211900,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,171,,"            String ddl = ""CREATE TABLE "" + dataTableFullName +"
211901,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,173,,"                    ""  CONSTRAINT pk PRIMARY KEY (a_string)) "" + tableDDLOptions;"
211902,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,176,,"            String dml = ""UPSERT INTO "" + dataTableFullName + "" VALUES(?)"";"
211903,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,184,,"            String query = ""SELECT * FROM "" + dataTableFullName;"
211904,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,328,,"            String ddl = ""CREATE TABLE "" + dataTableFullName + "" (\n"" +"
211905,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,526,,"                                    + ""  (a_string varchar not null, col1 integer, cf1.col2 integer, col3 integer , cf2.col4 integer """
211906,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,529,,"                                    + (!columnEncoded ? "",IMMUTABLE_STORAGE_SCHEME="" + PTable.ImmutableStorageScheme.ONE_CELL_PER_COLUMN : """")));"
211907,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,539,,"            conn.createStatement().execute(""CREATE INDEX "" + indexTableName + "" ON "" + dataTableFullName + "" (col1) include (cf1.col2) SALT_BUCKETS=4"");"
211908,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,539,,"            conn.createStatement().execute(""CREATE INDEX "" + indexTableName + "" ON "" + dataTableFullName + "" (col1) include (cf1.col2) SALT_BUCKETS=4"");"
211909,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,539,,"            conn.createStatement().execute(""CREATE INDEX "" + indexTableName + "" ON "" + dataTableFullName + "" (col1) include (cf1.col2) SALT_BUCKETS=4"");"
211910,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,790,,"        rs = conn1.createStatement().executeQuery(""SELECT COLUMN_COUNT FROM \""SYSTEM\"".\""CATALOG\""\n"""
211911,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,791,,"                + ""WHERE TENANT_ID IS NULL AND\n"""
211912,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,792,,"                + ""(TABLE_SCHEM, TABLE_NAME) = ('"" + schemaName + ""','""+ dataTableName + ""') AND\n"""
211913,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,792,,"                + ""(TABLE_SCHEM, TABLE_NAME) = ('"" + schemaName + ""','""+ dataTableName + ""') AND\n"""
211914,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,792,,"                + ""(TABLE_SCHEM, TABLE_NAME) = ('"" + schemaName + ""','""+ dataTableName + ""') AND\n"""
211915,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,793,,"                + ""COLUMN_FAMILY IS NULL AND COLUMN_NAME IS NULL"");"
211916,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,945,,"                    + "" ) ""+tableDDLOptions;"
211917,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1061,,"            assertFalse(table.getColumnForColumnName(""PK2"").isRowTimestamp());"
211918,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1084,,"                conn.createStatement().execute(""CREATE VIEW "" + viewTableFullName2 + "" (KV3 VARCHAR, KV4 DATE, KV5 INTEGER, CONSTRAINT PK PRIMARY KEY (KV3, KV4 ROW_TIMESTAMP) ) AS SELECT * FROM "" + dataTableFullName2);"
211919,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1160,,"	        conn.createStatement().execute(""CREATE TABLE IF NOT EXISTS "" + fullTableName + "" ("""
211920,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1162,,"	                + "" COL1 integer NOT NULL,"""
211921,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1163,,"	                + "" COL2 bigint NOT NULL,"""
211922,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1194,,"	        assertEncodedCQValue(DEFAULT_COLUMN_FAMILY, ""VIEW_COL1"", schemaName, viewName, ENCODED_CQ_COUNTER_INITIAL_VALUE + 1);"
211923,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1195,,"	        assertEncodedCQValue(""A"", ""VIEW_COL2"", schemaName, viewName, ENCODED_CQ_COUNTER_INITIAL_VALUE);"
211924,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1413,,"        String query = ""SELECT "" + COLUMN_QUALIFIER + "" FROM \""SYSTEM\"".CATALOG WHERE "" + TABLE_SCHEM + "" = ? AND "" + TABLE_NAME"
211925,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java,1414,,"                + "" = ? "" + "" AND "" + COLUMN_FAMILY + "" = ?"" + "" AND "" + COLUMN_NAME  + "" = ?"" + "" AND "" + COLUMN_QUALIFIER  + "" IS NOT NULL"";"
211926,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,140,,"            String ddlFormat = ""CREATE TABLE IF NOT EXISTS "" + tableName + "" ("""
211927,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,141,,"                            + "" %s ID char(1) NOT NULL,"""
211928,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,142,,"                            + "" COL1 integer NOT NULL,"""
211929,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,143,,"                            + "" COL2 bigint NOT NULL,"""
211930,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,144,,"                            + "" CONSTRAINT NAME_PK PRIMARY KEY (%s ID, COL1, COL2)"""
211931,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,145,,"                            + "" ) %s"";"
211932,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,147,,"            assertTableDefinition(conn, tableName, PTableType.TABLE, null, 0, 3, QueryConstants.BASE_TABLE_BASE_COLUMN_COUNT, true, ""ID"", ""COL1"", ""COL2"");"
211933,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,147,,"            assertTableDefinition(conn, tableName, PTableType.TABLE, null, 0, 3, QueryConstants.BASE_TABLE_BASE_COLUMN_COUNT, true, ""ID"", ""COL1"", ""COL2"");"
211934,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,149,,"            viewConn.createStatement().execute(""CREATE VIEW "" + viewOfTable + "" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR ) AS SELECT * FROM "" + tableName);"
211935,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,149,,"            viewConn.createStatement().execute(""CREATE VIEW "" + viewOfTable + "" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR ) AS SELECT * FROM "" + tableName);"
211936,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,150,,"            assertTableDefinition(viewConn, viewOfTable, PTableType.VIEW, tableName, 0, 5, 3, true, ""ID"", ""COL1"", ""COL2"", ""VIEW_COL1"", ""VIEW_COL2"");"
211937,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,150,,"            assertTableDefinition(viewConn, viewOfTable, PTableType.VIEW, tableName, 0, 5, 3, true, ""ID"", ""COL1"", ""COL2"", ""VIEW_COL1"", ""VIEW_COL2"");"
211938,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,153,,"            conn.createStatement().execute(""ALTER TABLE "" + tableName + "" ADD COL3 varchar(10) PRIMARY KEY, COL4 integer"");"
211939,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,154,,"            assertTableDefinition(conn, tableName, PTableType.TABLE, null, columnEncoded ? 2 : 1, 5, QueryConstants.BASE_TABLE_BASE_COLUMN_COUNT, false, ""ID"", ""COL1"", ""COL2"", ""COL3"", ""COL4"");"
211940,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,154,,"            assertTableDefinition(conn, tableName, PTableType.TABLE, null, columnEncoded ? 2 : 1, 5, QueryConstants.BASE_TABLE_BASE_COLUMN_COUNT, false, ""ID"", ""COL1"", ""COL2"", ""COL3"", ""COL4"");"
211941,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,195,,"            viewConn.createStatement().execute(""ALTER VIEW "" + viewOfTable2"
211942,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,198,,"            viewConn.createStatement().execute(""SELECT * FROM ""+viewOfTable2);"
211943,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,353,,"                            + "" %s ID char(10) NOT NULL,"""
211944,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,363,,"            assertTableDefinition(viewConn,viewOfTable, PTableType.VIEW, tableName, 0, 10, 4, true, ""ID"", ""COL1"", ""COL2"", ""COL3"", ""VIEW_COL1"", ""VIEW_COL2"", ""VIEW_COL3"", ""VIEW_COL4"", ""VIEW_COL5"", ""VIEW_COL6"");"
211945,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,363,,"            assertTableDefinition(viewConn,viewOfTable, PTableType.VIEW, tableName, 0, 10, 4, true, ""ID"", ""COL1"", ""COL2"", ""COL3"", ""VIEW_COL1"", ""VIEW_COL2"", ""VIEW_COL3"", ""VIEW_COL4"", ""VIEW_COL5"", ""VIEW_COL6"");"
211946,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,363,,"            assertTableDefinition(viewConn,viewOfTable, PTableType.VIEW, tableName, 0, 10, 4, true, ""ID"", ""COL1"", ""COL2"", ""COL3"", ""VIEW_COL1"", ""VIEW_COL2"", ""VIEW_COL3"", ""VIEW_COL4"", ""VIEW_COL5"", ""VIEW_COL6"");"
211947,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,363,,"            assertTableDefinition(viewConn,viewOfTable, PTableType.VIEW, tableName, 0, 10, 4, true, ""ID"", ""COL1"", ""COL2"", ""COL3"", ""VIEW_COL1"", ""VIEW_COL2"", ""VIEW_COL3"", ""VIEW_COL4"", ""VIEW_COL5"", ""VIEW_COL6"");"
211948,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,366,,"            String dml = ""UPSERT INTO "" + viewOfTable + "" VALUES(?,?,?,?,?, ?, ?, ?, ?, ?)"";"
211949,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,368,,"            stmt.setString(1, ""view1"");"
211950,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,387,,"                assertEquals(""Unexpected exception"", CANNOT_MUTATE_TABLE.getErrorCode(), e.getErrorCode());"
211951,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,490,,"            viewConn.createStatement().execute(""CREATE VIEW "" + viewOfTable + "" ( VIEW_COL1 DECIMAL(10,2), VIEW_COL2 VARCHAR(256) CONSTRAINT pk PRIMARY KEY (VIEW_COL1, VIEW_COL2)) AS SELECT * FROM "" + tableName);"
211952,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,500,,"            stmt.setString(5, ""view5"");"
211953,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,835,,"            String childViewDDL = ""CREATE VIEW "" + childView + "" AS SELECT * FROM "" + baseTable;"
211954,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableWithViewsIT.java,839,,"            assertColumnsMatch(view.getColumns(), ""PK2"", ""V1"", ""V2"");"
211955,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AppendOnlySchemaIT.java,85,,"            conn1.createStatement().execute(""CREATE TABLE ""+ metricTableName + ""(metricId INTEGER NOT NULL, metricVal DOUBLE, CONSTRAINT PK PRIMARY KEY(metricId))"""
211956,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AppendOnlySchemaIT.java,92,,"                            + "" AS SELECT * FROM "" + metricTableName"
211957,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/AppendOnlySchemaIT.java,95,,"            conn1.createStatement().execute(""UPSERT INTO "" + viewName + ""(hostName, metricVal) VALUES('host1', 1.0)"");"
211958,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,52,,"            String ddl = ""CREATE TABLE "" + testDecimalArithmetic +"
211959,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,58,,"            String query = ""UPSERT INTO "" + testDecimalArithmetic"
211960,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,63,,"            stmt.setBigDecimal(3, new BigDecimal(""12345""));"
211961,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,64,,"            stmt.setBigDecimal(4, new BigDecimal(""12.34""));"
211962,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,81,,"                ""UPSERT INTO "" + testDecimalArithmetic + ""(pk, col1, col2, col3) VALUES(?,?,?,?)"";"
211963,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,97,,"            assertEquals(new BigDecimal(""123.45""), rs.getBigDecimal(3));"
211964,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,323,,"            conn.createStatement().execute(""upsert into "" + testRandomFunction + "" values ('x')"");"
211965,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,385,,"                ""select count(*) from "" + testRandomFunction1 + "" where v1 = rand(1)"");"
211966,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,390,,"                ""select count(*) from "" + testRandomFunction1 + "" where v1 = rand(2)"");"
211967,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,464,,"            query = ""SELECT col1 + col3 FROM "" + testDecimalArithmetic + "" WHERE pk='testValueOne'"";"
211968,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArithmeticQueryIT.java,664,,"        String tableName = ""TBL_"" + generateUniqueName();"
211969,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array1IT.java,108,,"            Array array = conn.createArrayOf(""DOUBLE"", doubleArr);"
211970,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array1IT.java,217,,"            Array array = conn.createArrayOf(""VARCHAR"", strArr);"
211971,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array1IT.java,425,,"            String query = ""SELECT a_double_array[1]  FROM "" + table"
211972,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array1IT.java,630,,"            strArr[0] = ""abc"";"
211973,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array1IT.java,754,,"                ""CREATE TABLE  "" + table + ""  ( k VARCHAR, a_string_array VARCHAR(100) ARRAY[4], b_string_array VARCHAR(100) ARRAY[4] \n"""
211974,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array1IT.java,792,,"        stmt = conn.prepareStatement(""UPSERT INTO  "" + table + ""  VALUES('a',ARRAY[2.0,3.0])"");"
211975,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,57,,"        conn.createStatement().execute(""CREATE TABLE  "" + table + ""  ( k VARCHAR PRIMARY KEY, a CHAR(5) ARRAY)"");"
211976,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,67,,"        stmt = conn.prepareStatement(""UPSERT INTO  "" + table + ""  VALUES(?,?)"");"
211977,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,102,,"            Array array = conn.createArrayOf(""DOUBLE"", doubleArr);"
211978,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,181,,"            strArr[0] = ""XYZWER"";"
211979,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,453,,"        stmt = conn.prepareStatement(""UPSERT INTO  "" + table + ""  VALUES(?,?,?)"");"
211980,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,455,,"        String[] s = new String[] {""abc"",""def"", ""ghi"",""jkl""};"
211981,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,455,,"        String[] s = new String[] {""abc"",""def"", ""ghi"",""jkl""};"
211982,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,455,,"        String[] s = new String[] {""abc"",""def"", ""ghi"",""jkl""};"
211983,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,456,,"        Array array = conn.createArrayOf(""VARCHAR"", s);"
211984,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,466,,"        rs = conn.createStatement().executeQuery(""SELECT k, a_string_array[2] FROM  "" + table + ""  where a_string_array=b_string_array"");"
211985,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,490,,"        String[] s = new String[] { ""abc"", ""def"", ""ghi"", ""jkll"" };"
211986,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array2IT.java,526,,"        String[] s = new String[] { ""abc"", ""def"", ""ghi"", ""jkll"", null, null, ""xxx"" };"
211987,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,44,,"        String ddl = ""CREATE TABLE   "" + table + ""  (region_name VARCHAR PRIMARY KEY, a VARCHAR, b VARCHAR)"";"
211988,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,49,,"        PreparedStatement stmt = conn.prepareStatement(""UPSERT INTO   "" + table + "" (region_name, a, b) VALUES('a', 'foo', 'abc')"");"
211989,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,61,,"        Array arr = conn.createArrayOf(""VARCHAR"", new Object[]{""foo"", ""abc"", ""oo""});"
211990,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,132,,"        String ddl = ""create table   "" + table + ""  (k varchar array primary key desc)"";"
211991,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,132,,"        String ddl = ""create table   "" + table + ""  (k varchar array primary key desc)"";"
211992,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,137,,"        PreparedStatement stmt = conn.prepareStatement(""upsert into   "" + table + ""  values (array['a', 'c'])"");"
211993,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,144,,"        stmt = conn.prepareStatement(""select * from   "" + table + ""  where k >= array['a', 'b']"");"
211994,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,331,,"        assertEquals(conn.createArrayOf(""INTEGER"", new Integer[]{1, 2}), rs.getArray(1));"
211995,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,430,,"        PreparedStatement stmt = conn.prepareStatement(""UPSERT INTO   "" + table + ""  VALUES (1, ARRAY[1, 2], ARRAY[2, 3])"");"
211996,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,451,,"        String ddl = ""CREATE TABLE   "" + table + ""  (p INTEGER PRIMARY KEY, arr1 INTEGER ARRAY, arr2 INTEGER ARRAY)"";"
211997,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/Array3IT.java,456,,"        PreparedStatement stmt = conn.prepareStatement(""UPSERT INTO  "" + table + ""  VALUES (1, ARRAY[1, 2], ARRAY[2, 3])"");"
211998,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,37,,"        String ddl = ""CREATE TABLE "" + tableName"
211999,./TargetProjects/phoenix/phoenix-core/src/it/java/org/apache/phoenix/end2end/ArrayAppendFunctionIT.java,41,,"        String dml = ""UPSERT INTO "" + tableName + ""(region_name,varchars,integers,doubles,bigints,chars,double1,char1,nullcheck,chars2) VALUES('SF Bay Area',"" +"
