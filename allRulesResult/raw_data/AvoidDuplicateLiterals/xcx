75000,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,69,,"        Feed feed = publishFeed(cluster, ""minutes(5)"", ""2012-02-27 10:00 UTC"", ""2016-02-28 10:00 UTC"");"
75001,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,72,,"        Process process = prepareProcess(cluster, ""minutes(10)"", ""2012-02-28 10:37 UTC"", ""2012-02-28 10:47 UTC"");"
75002,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,72,,"        Process process = prepareProcess(cluster, ""minutes(10)"", ""2012-02-28 10:37 UTC"", ""2012-02-28 10:47 UTC"");"
75003,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,72,,"        Process process = prepareProcess(cluster, ""minutes(10)"", ""2012-02-28 10:37 UTC"", ""2012-02-28 10:47 UTC"");"
75004,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,74,,"        Input input = getInput(""inputFeed"", feed.getName(), ""now(0,-20)"", ""now(0,0)"", false);"
75005,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,74,,"        Input input = getInput(""inputFeed"", feed.getName(), ""now(0,-20)"", ""now(0,0)"", false);"
75006,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/ProcessHelperTest.java,74,,"        Input input = getInput(""inputFeed"", feed.getName(), ""now(0,-20)"", ""now(0,0)"", false);"
75007,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/StorageFactoryTest.java,161,,"    @DataProvider (name = ""overriddenFeedStorageDataProvider"")"
75008,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/TestWorkflowNameBuilder.java,39,,"        feed.setName(""raw-logs"");"
75009,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/lock/MemoryLocksTest.java,39,,"        Assert.assertEquals(memoryLocks.acquireLock(feed, ""test""), true);"
75010,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ClusterEntityParserTest.java,237,,"        StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""true"");"
75011,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ClusterEntityParserTest.java,294,,"        Assert.fail(""Should have thrown a validation exception"");"
75012,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/DatasourceEntityParserTest.java,75,,"        Assert.assertEquals(""test-hsql-db"", datasource.getName());"
75013,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,83,,"        this.dfsCluster = EmbeddedCluster.newCluster(""testCluster"");"
75014,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,95,,"        cluster.setName(""backupCluster"");"
75015,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,126,,"        assertEquals(feed.getSla().getSlaLow().toString(), ""hours(2)"");"
75016,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,277,,"            Assert.fail(""Expected ValidationException"");"
75017,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,394,,"        location.setPath(""/projects/bi/rmc/daily/ad/${YEAR}/fraud/${MONTH}-${DAY}/ad"");"
75018,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,464,,"                        .getResourceAsStream(""/config/feed/feed-0.1.xml""));"
75019,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,535,,"                .setPath(""/data/clicks/${YEAR}/${MONTH}/${DAY}/${HOUR}"");"
75020,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,588,,"        final InputStream inputStream = getClass().getResourceAsStream(""/config/feed/hive-table-feed.xml"");"
75021,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,665,,"        StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""true"");"
75022,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,665,,"        StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""true"");"
75023,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,674,,"            StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""false"");"
75024,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedEntityParserTest.java,1025,,"        InputStream feedStream = this.getClass().getResourceAsStream(""/config/feed/feed-import-0.1.xml"");"
75025,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedUpdateTest.java,81,,"            ConfigurationStore.get().remove(EntityType.PROCESS, ""sample"");"
75026,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/FeedUpdateTest.java,99,,"            ConfigurationStore.get().remove(EntityType.PROCESS, ""sample2"");"
75027,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ProcessEntityParserTest.java,110,,"        Assert.assertEquals(process.getInputs().getInputs().get(0).getStart(), ""today(0,0)"");"
75028,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ProcessEntityParserTest.java,282,,"        process.getRetry().setOnTimeout(new Boolean(""true""));"
75029,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ProcessEntityParserTest.java,342,,"                ProcessEntityParserTest.class.getResourceAsStream(""/config/process/process-table.xml""));"
75030,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ProcessEntityParserTest.java,418,,"        StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""true"");"
75031,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/parser/ProcessEntityParserTest.java,436,,"            StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""false"");"
75032,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java,65,,"            throw new FalconException(""For test"");"
75033,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java,125,,"        Assert.assertEquals(EntityUtil.getVersion(store.get(EntityType.CLUSTER, ""cluster1"")).intValue(), 0);"
75034,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java,146,,"        Assert.assertEquals(EntityUtil.getVersion(store.get(EntityType.DATASOURCE, ""mysql-db"")).intValue(), 0);"
75035,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java,200,,"        process.setName(""remove"");"
75036,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/store/FeedLocationStoreTest.java,89,,"                ""/projects/cas/data/hourly/2014/09/09/09""));"
75037,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/v0/EntityGraphTest.java,396,,"        ds.setName(""test-db"");"
75038,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/entity/v0/EntityGraphTest.java,400,,"        cluster.setName(""ci1"");"
75039,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/expression/ExpressionHelperTest.java,38,,"        Date referenceDate = ExpressionHelper.FORMATTER.get().parse(""2015-02-01T00:00Z"");"
75040,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/group/FeedGroupMapTest.java,61,,"                        .getResourceAsStream(""/config/feed/feed-0.1.xml""));"
75041,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/group/FeedGroupMapTest.java,73,,"        FeedGroup group = groupMapping.get(""group1"");"
75042,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/group/FeedGroupMapTest.java,78,,"        group = groupMapping.get(""group2"");"
75043,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/group/FeedGroupMapTest.java,83,,"        group = groupMapping.get(""group3"");"
75044,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,100,,"    private static final String EVICTED_FEED = ""imp-click-join1"";"
75045,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,168,,"                ""classification=production"");"
75046,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,185,,"        Feed impressionsFeed = addFeedEntity(""impression-feed"", clusterEntity,"
75047,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,186,,"                ""classified-as=Secure"", ""analytics"", Storage.TYPE.FILESYSTEM,"
75048,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,186,,"                ""classified-as=Secure"", ""analytics"", Storage.TYPE.FILESYSTEM,"
75049,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,190,,"        verifyFeedEntityEdges(impressionsFeed.getName(), ""Secure"", ""analytics"");"
75050,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,198,,"        Feed clicksFeed = addFeedEntity(""clicks-feed"", clusterEntity,"
75051,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,199,,"                ""classified-as=Secure,classified-as=Financial"", ""analytics"", Storage.TYPE.FILESYSTEM,"
75052,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,211,,"                ""classified-as=Financial"", ""reporting,bi"", Storage.TYPE.FILESYSTEM,"
75053,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,211,,"                ""classified-as=Financial"", ""reporting,bi"", Storage.TYPE.FILESYSTEM,"
75054,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,223,,"        Feed join2Feed = addFeedEntity(""imp-click-join2"", clusterEntity,"
75055,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,241,,"                ""classified-as=Critical"", ""testPipeline,dataReplication_Pipeline"", GENERATE_WORKFLOW_NAME,"
75056,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,241,,"                ""classified-as=Critical"", ""testPipeline,dataReplication_Pipeline"", GENERATE_WORKFLOW_NAME,"
75057,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,462,,"                        ""jail://global:00/falcon/raw-click/bcp/20140101"","
75058,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,520,,"                        EVICTED_FEED, EVICTED_INSTANCE_PATHS, ""IGNORE"", EVICTED_FEED),"
75059,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,527,,"        List<String> expectedFeeds = Arrays.asList(""impression-feed/2014-01-01T00:00Z"", ""clicks-feed/2014-01-01T00:00Z"","
75060,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,527,,"        List<String> expectedFeeds = Arrays.asList(""impression-feed/2014-01-01T00:00Z"", ""clicks-feed/2014-01-01T00:00Z"","
75061,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,528,,"                ""imp-click-join1/2014-01-01T00:00Z"", ""imp-click-join1/2014-01-02T00:00Z"");"
75062,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,612,,"        Assert.assertEquals(edge.getVertex(Direction.IN).getProperty(""name""), ""reporting"");"
75063,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,615,,"        edge = feedVertex.getEdges(Direction.OUT, ""classified-as"").iterator().next();"
75064,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java,626,,"                ""Actual does not contain expected: "" + actual);"
75065,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/CurrentUserTest.java,102,,"        CurrentUser.authenticate(""proxy"");"
75066,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/CurrentUserTest.java,154,,"        CurrentUser.authenticate(""foo"");"
75067,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,51,,"    public static final String PROCESS_ENTITY_NAME = ""sample-process"";"
75068,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,132,,"        provider.authorizeResource(""admin"", ""version"", null, null, proxyUgi);"
75069,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,132,,"        provider.authorizeResource(""admin"", ""version"", null, null, proxyUgi);"
75070,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,141,,"        provider.authorizeResource(""entities"", ""schedule"", ""feed"", feedEntity.getName(), proxyUgi);"
75071,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,141,,"        provider.authorizeResource(""entities"", ""schedule"", ""feed"", feedEntity.getName(), proxyUgi);"
75072,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,142,,"        provider.authorizeResource(""instance"", ""status"", ""feed"", feedEntity.getName(), proxyUgi);"
75073,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,142,,"        provider.authorizeResource(""instance"", ""status"", ""feed"", feedEntity.getName(), proxyUgi);"
75074,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,166,,"        StartupProperties.get().setProperty(""falcon.security.authorization.admin.users"", ""admin"");"
75075,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,167,,"        StartupProperties.get().setProperty(""falcon.security.authorization.admin.groups"", ""admin"");"
75076,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,182,,"                ""admin"", realUser, new String[]{""admin-group"", });"
75077,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,195,,"                ""admin-user"", realUser, new String[]{""admin-group"", });"
75078,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,216,,"            {""entities"", ""list"", ""feed""},"
75079,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/DefaultAuthorizationProviderTest.java,217,,"            {""entities"", ""list"", ""process""},"
75080,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java,107,,"            StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""true"");"
75081,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java,107,,"            StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""true"");"
75082,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/service/ProxyUserServiceTest.java,65,,"        RuntimeProperties.get().setProperty(""falcon.service.ProxyUserService.proxyuser.foo.hosts"", ""*"");"
75083,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/service/ProxyUserServiceTest.java,66,,"        RuntimeProperties.get().remove(""falcon.service.ProxyUserService.proxyuser.foo.groups"");"
75084,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/service/ProxyUserServiceTest.java,91,,"        proxyUserService.validate(""foo"", ""localhost"", ""bar"");"
75085,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/service/ProxyUserServiceTest.java,91,,"        proxyUserService.validate(""foo"", ""localhost"", ""bar"");"
75086,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/service/ProxyUserServiceTest.java,91,,"        proxyUserService.validate(""foo"", ""localhost"", ""bar"");"
75087,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/update/UpdateHelperTest.java,75,,"        this.dfsCluster = EmbeddedCluster.newCluster(""testCluster"");"
75088,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/update/UpdateHelperTest.java,124,,"        newFeed.setFrequency(Frequency.fromString(""days(1)""));"
75089,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,43,,"        tree.insert(""key1"", ""value1"");"
75090,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,44,,"        tree.insert(""key2"", ""value2"");"
75091,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,45,,"        tree.insert(""random"", ""random"");"
75092,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,56,,"        tree2.insert(""/data/cas/projects/dwh/"", ""dwh"");"
75093,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,56,,"        tree2.insert(""/data/cas/projects/dwh/"", ""dwh"");"
75094,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,65,,"        tree.insert(""duplicatekey"", ""value1"");"
75095,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,85,,"        tree.insert(""water"", ""No Overlap"");"
75096,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,91,,"        tree.insert(""rand"", ""Input Subset"");"
75097,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,114,,"        tree.insert(""/data/cas/projects/rtbd/"", ""rtbd"");"
75098,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,125,,"        tree.insert(""randomizer"", ""randomizer"");"
75099,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,289,,"        FeedLookupResult.FeedProperties f1 = new FeedLookupResult.FeedProperties(""feed"","
75100,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,290,,"                LocationType.DATA, ""cluster"");"
75101,./TargetProjects/falcon/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java,309,,"        tree.insert(""keyWithMultipleValues"", ""value1"");"
75102,./TargetProjects/falcon/extensions/src/main/java/org/apache/falcon/extensions/mirroring/hdfsSnapshot/HdfsSnapshotMirroringExtension.java,65,,"                    + HdfsSnapshotMirrorProperties.SOURCE_CLUSTER.getName() + "" not found"");"
75103,./TargetProjects/falcon/extensions/src/main/java/org/apache/falcon/extensions/mirroring/hive/HiveMirroringExtension.java,61,,"            throw new FalconException(""Cluster entity "" + srcClusterName + "" not found"");"
75104,./TargetProjects/falcon/extensions/src/main/java/org/apache/falcon/extensions/mirroring/hive/HiveMirroringExtension.java,61,,"            throw new FalconException(""Cluster entity "" + srcClusterName + "" not found"");"
75105,./TargetProjects/falcon/extensions/src/test/java/org/apache/falcon/extensions/ExtensionTest.java,190,,"            Assert.fail(""Entities returned cannot be null or empty"");"
75106,./TargetProjects/falcon/extensions/src/test/java/org/apache/falcon/extensions/jdbc/ExtensionMetaStoreTest.java,77,,"        stateStore.storeExtensionBean(""test2"", ""test_location"", ExtensionType.CUSTOM, ""test2_description"","
75107,./TargetProjects/falcon/extensions/src/test/java/org/apache/falcon/extensions/jdbc/ExtensionMetaStoreTest.java,85,,"        stateStore.storeExtensionJob(""job1"", ""test2"", feeds, processes, config);"
75108,./TargetProjects/falcon/extensions/src/test/java/org/apache/falcon/extensions/store/ExtensionStoreTest.java,112,,"        store.registerExtension(""test"", EXTENSION_PATH, ""test desc"", ""falconUser"");"
75109,./TargetProjects/falcon/extensions/src/test/java/org/apache/falcon/extensions/store/ExtensionStoreTest.java,112,,"        store.registerExtension(""test"", EXTENSION_PATH, ""test desc"", ""falconUser"");"
75110,./TargetProjects/falcon/extensions/src/test/java/org/apache/falcon/extensions/store/ExtensionStoreTest.java,185,,"        String extensionPath = EXTENSION_PATH + ""testStatusChange"";"
75111,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/Entities/ProcessMerlin.java,300,,"                in.setName(""inputData"" + i);"
75112,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/helpers/entity/AbstractEntityHelper.java,277,,"        return Util.sendRequest(createUrl(url), ""get"", null, user);"
75113,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/helpers/entity/AbstractEntityHelper.java,303,,"        LOGGER.info(""Submitting "" + getEntityType() + "": \n"" + Util.prettyPrintXml(data));"
75114,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/helpers/entity/AbstractEntityHelper.java,304,,"        return Util.sendRequest(createUrl(this.hostname + URLS.SUBMIT_URL.getValue(), getEntityType() + colo), ""post"","
75115,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/supportClasses/HadoopFileEditor.java,62,,"        FileUtils.deleteQuietly(new File(currentFile + "".bck""));"
75116,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/supportClasses/HadoopFileEditor.java,63,,"        FileUtils.deleteQuietly(new File(""tmp""));"
75117,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/AssertUtil.java,268,,"        Assert.assertNotEquals(response.getMessage(), ""null"", ""response message should not be null"");"
75118,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/AssertUtil.java,268,,"        Assert.assertNotEquals(response.getMessage(), ""null"", ""response message should not be null"");"
75119,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/HadoopUtil.java,142,,"            if (!path.toUri().toString().contains(""_SUCCESS"")) {"
75120,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/HiveAssert.java,133,,"            ""Table "" + table1FullName + "" has different comment from "" + table2FullName);"
75121,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/InstanceUtil.java,187,,"        LOGGER.info(""instances: "" + Arrays.toString(instances));"
75122,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/LogUtil.java,95,,"                        + ""Exception: "" + e);"
75123,./TargetProjects/falcon/falcon-regression/merlin-core/src/main/java/org/apache/falcon/regression/core/util/LogUtil.java,241,,"                    LOGGER.error(""Couldn't fetch bundle info for "" + wfJobId + "". Exception: "" + e);"
75124,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ClusterWizardPage.java,100,,"        return getNameInput().getAttribute(""value"");"
75125,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ClusterWizardPage.java,344,,"        for (String line : basicProps.split(""\\n"")) {"
75126,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,131,,"        final List<WebElement> propertyParts = propertiesBox.findElements(By.xpath(""./div""));"
75127,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,137,,"        softAssert.assertEquals(generalParts.get(0).getText(), ""General"", ""Unexpected heading"");"
75128,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,287,,"            generalPropBlock.findElement(By.xpath(""./*"")).findElements(By.xpath(""./*""));"
75129,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,290,,"            ""Unexpected label in general properties."");"
75130,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,291,,"        softAssert.assertEquals(generalPropParts.get(1).getText(), ""Name"","
75131,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,366,,"                ""Unexpected label in input properties"");"
75132,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,492,,"                ""Unexpected label in instance summary heading"");"
75133,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,540,,"                        ""Displayed start time : "" + oneSummary + "" is not """
75134,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/EntityPage.java,566,,"            return startedBox.findElement(By.tagName(""input""));"
75135,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/FeedWizardPage.java,363,,"                Assert.fail(""Tag Key Index - "" + index + "" found"");"
75136,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/FeedWizardPage.java,365,,"                LOGGER.info(""Tag Key Index - "" + index + "" not found"");"
75137,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/FeedWizardPage.java,377,,"        return getFeedTagKey(index).getAttribute(""value"");"
75138,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/PageHeader.java,51,,"    @FindBy(className = ""navbar"")"
75139,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,196,,"        return getTagKey(index).getAttribute(""value"");"
75140,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,357,,"                Assert.fail(""Tag Key Index - "" + index + "" found"");"
75141,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,359,,"                LOGGER.info(""Tag Key Index - "" + index + "" not found"");"
75142,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,846,,"        parts = currentBlock.trim().split(""\\n"");"
75143,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,889,,"            cluster.setName(getProperty(currentBlock, ""Name"", ""Validity"", 1));"
75144,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,893,,"            String start = getProperty(currentBlock, ""Validity"", ""End"", 2);"
75145,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,912,,"            input.setName(getProperty(currentBlock, ""Name"", ""Feed"", 1));"
75146,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/ProcessWizardPage.java,916,,"            input.setFeed(getProperty(currentBlock, ""Feed"", ""Instance"", 1));"
75147,./TargetProjects/falcon/falcon-regression/merlin/src/main/java/org/apache/falcon/regression/ui/search/SearchPage.java,56,,"        @FindBy(className = ""mainUIView""),"
75148,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,267,,"        LOGGER.info(""Start time: "" + startTime + ""\tEnd time: "" + endTime);"
75149,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,267,,"        LOGGER.info(""Start time: "" + startTime + ""\tEnd time: "" + endTime);"
75150,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,275,,"        bundles[0].setProcessInput(""now(0,0)"", ""now(0,4)"");"
75151,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,278,,"        LOGGER.info(""Creating necessary data..."");"
75152,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,286,,"        LOGGER.info(""Process data: "" + Util.prettyPrintXml(bundles[0].getProcessData()));"
75153,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,299,,"            ""?start="" + startTime + ""&end="" + endTime);"
75154,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,299,,"            ""?start="" + startTime + ""&end="" + endTime);"
75155,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,500,,"        newFeed.setFeedPathValue(baseTestDir + ""/randomPath"" + MINUTE_DATE_PATTERN);"
75156,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,531,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:04Z"");"
75157,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,574,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2099-01-02T01:00Z"");"
75158,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/AuthorizationTest.java,609,,"        Assert.assertEquals(oldFeedUser, newFeedUser, ""User should be the same"");"
75159,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ELValidationsTest.java,75,,"            ""currentYear(10,0,22,0)"", ""now(4,20)"", false);"
75160,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/EmbeddedPigScriptTest.java,115,,"    @Test(groups = {""singleCluster""}, timeOut = 600000)"
75161,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,117,,"    @Test(enabled = true, groups = {""multiCluster""})"
75162,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,122,,"                .withRetention(""hours(10)"", ActionType.DELETE)"
75163,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,136,,"        LOGGER.info(""Feed: "" + Util.prettyPrintXml(feedOriginalSubmit));"
75164,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,146,,"        Assert.assertEquals(OozieUtil.checkIfFeedCoordExist(cluster2OC, feedName, ""REPLICATION""), 0);"
75165,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,147,,"        Assert.assertEquals(OozieUtil.checkIfFeedCoordExist(cluster2OC, feedName, ""RETENTION""), 1);"
75166,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,159,,"                .withPartition(""UK/${cluster.colo}"")"
75167,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,236,,"                .withPartition(""US/${cluster.colo}"")"
75168,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedClusterUpdateTest.java,257,,"        LOGGER.info(""Updated Feed: "" + Util.prettyPrintXml(feedUpdated));"
75169,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedInstanceListingTest.java,93,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:21Z"");"
75170,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedInstanceListingTest.java,93,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:21Z"");"
75171,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedInstanceListingTest.java,105,,"                        ""?start=2010-01-02T01:00Z&end=2010-01-02T01:21Z"");"
75172,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedInstanceStatusTest.java,135,,"        prism.getFeedHelper().getProcessInstanceStatus(feedName, ""?start="" + startPlus100Min"
75173,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedInstanceStatusTest.java,136,,"                + ""&end="" + TimeUtil.addMinsToTime(startTime, 120));"
75174,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,107,,"    @Test(dataProvider = ""dataFlagProvider"")"
75175,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,113,,"        LOGGER.info(""Time range between : "" + startTime + "" and "" + endTime);"
75176,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,113,,"        LOGGER.info(""Time range between : "" + startTime + "" and "" + endTime);"
75177,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,123,,"                .withRetention(""days(1000000)"", ActionType.DELETE)"
75178,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,135,,"        feed.withProperty(""job.counter"", ""true"");"
75179,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,135,,"        feed.withProperty(""job.counter"", ""true"");"
75180,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,138,,"        LOGGER.info(""Feed : "" + Util.prettyPrintXml(feed.toString()));"
75181,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,143,,"        DateTimeFormatter fmt = DateTimeFormat.forPattern(""yyyy'/'MM'/'dd'/'HH'/'mm'"");"
75182,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,153,,"                OSUtil.concat(OSUtil.NORMAL_INPUT, ""dataFile.xml""));"
75183,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,155,,"                OSUtil.concat(OSUtil.NORMAL_INPUT, ""dataFile1.txt""));"
75184,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,160,,"        Assert.assertEquals(OozieUtil.checkIfFeedCoordExist(cluster2OC, feed.getName(), ""REPLICATION""), 1);"
75185,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,182,,"                    cluster2FS, ""feed"", ""Success logs are not present"");"
75186,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedReplicationTest.java,182,,"                    cluster2FS, ""feed"", ""Success logs are not present"");"
75187,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedResumeTest.java,68,,"    @Test(groups = {""singleCluster""})"
75188,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedScheduleTest.java,65,,"    @Test(groups = {""singleCluster""})"
75189,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedStatusTest.java,75,,"    @Test(groups = {""singleCluster""})"
75190,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedSubmitAndScheduleTest.java,67,,"    @Test(groups = {""singleCluster""})"
75191,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedSubmitTest.java,68,,"    @Test(groups = {""singleCluster""})"
75192,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/FeedSuspendTest.java,70,,"    @Test(groups = {""singleCluster""})"
75193,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/InstanceSummaryTest.java,112,,"            .getInstanceSummary(processName, ""?start="" + startTime);"
75194,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/InstanceSummaryTest.java,138,,"            ""?start="" + startTime + ""&end="" + endTime);"
75195,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,111,,"    @Test(dataProvider = ""DP"", groups = {""0.2.2"", ""retry""}, enabled = true)"
75196,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,111,,"    @Test(dataProvider = ""DP"", groups = {""0.2.2"", ""retry""}, enabled = true)"
75197,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,149,,"            LOGGER.info(""going to update process at:"" + DateTime.now(DateTimeZone.UTC));"
75198,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,155,,"            Assert.assertEquals(bundleId, newBundleId, ""its creating a new bundle!!!"");"
75199,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,193,,"                ""Failure Retry validation failed"");"
75200,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,205,,"                    .getMessage().contains(""updated successfully""),"
75201,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/NewRetryTest.java,206,,"                    ""process was not updated successfully"");"
75202,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessFrequencyTest.java,92,,"        bundles[0].setProcessInputStartEnd(""now(0,0)"", ""now(0,0)"");"
75203,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceColoMixedTest.java,130,,"                .withRetention(""days(10000)"", ActionType.DELETE)"
75204,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceColoMixedTest.java,131,,"                .withValidity(startTime, ""2099-01-01T00:00Z"")"
75205,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceColoMixedTest.java,202,,"                ""?start="" + processStartTime + ""&end="" + TimeUtil.addMinsToTime(processStartTime, 45));"
75206,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceColoMixedTest.java,202,,"                ""?start="" + processStartTime + ""&end="" + TimeUtil.addMinsToTime(processStartTime, 45));"
75207,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceKillsTest.java,95,,"    @Test(groups = {""singleCluster""})"
75208,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceKillsTest.java,97,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:04Z"");"
75209,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceKillsTest.java,97,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:04Z"");"
75210,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,99,,"    @Test(groups = {""singleCluster""})"
75211,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,101,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:26Z"");"
75212,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,101,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:26Z"");"
75213,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,110,,"            start + ""&end=2010-01-02T01:16Z"");"
75214,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,114,,"            start + ""&end=2010-01-02T01:11Z"");"
75215,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,383,,"        Assert.assertEquals(OozieUtil.getWorkflowActionStatus(clusterOC, bundleId, ""user-action"")"
75216,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRerunTest.java,384,,"            .contains(""SUCCEEDED""), true);"
75217,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceResumeTest.java,92,,"    @Test(groups = {""singleCluster""})"
75218,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceResumeTest.java,105,,"                ""?start=2010-01-02T01:00Z&end=2010-01-02T01:15Z"");"
75219,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceRunningTest.java,95,,"    @Test(groups = {""singleCluster""})"
75220,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceStatusTest.java,93,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:22Z"");"
75221,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceStatusTest.java,111,,"    @Test(groups = {""singleCluster""})"
75222,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceStatusTest.java,129,,"        Assert.assertTrue(matchWorkflows(instanceWfIDs, oozieWfIDs), ""No job ids exposed in status message"");"
75223,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceStatusTest.java,461,,"            ""?start="" + start + ""&end="" + TimeUtil.addMinsToTime(end, -11));"
75224,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceSuspendTest.java,85,,"    @Test(groups = {""singleCluster""})"
75225,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceSuspendTest.java,87,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:23Z"");"
75226,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceSuspendTest.java,87,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:23Z"");"
75227,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessInstanceSuspendTest.java,95,,"            ""?start=2010-01-02T01:00Z&end=2010-01-02T01:21Z"");"
75228,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessLateRerunTest.java,96,,"        LOGGER.info(""Time range between : "" + startTime + "" and "" + endTime);"
75229,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessLateRerunTest.java,96,,"        LOGGER.info(""Time range between : "" + startTime + "" and "" + endTime);"
75230,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessLateRerunTest.java,103,,"        bundles[0].setProcessLatePolicy(getLateData(2, ""minutes"", ""periodic"", inputName, aggregateWorkflowDir));"
75231,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessLateRerunTest.java,103,,"        bundles[0].setProcessLatePolicy(getLateData(2, ""minutes"", ""periodic"", inputName, aggregateWorkflowDir));"
75232,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ProcessLateRerunTest.java,114,,"            LOGGER.info(""Waiting..."");"
75233,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SLA/FeedSLAMonitoringTest.java,184,,"                ""?start="" + slaStartTime + ""&end="" + slaEndTime).getSlaResult();"
75234,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SLA/FeedSLAMonitoringTest.java,184,,"                ""?start="" + slaStartTime + ""&end="" + slaEndTime).getSlaResult();"
75235,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SearchApiTest.java,172,,"                order = params.getParams().contains(""sortOrder=desc"") ? ""desc"" : ""asc"";"
75236,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SearchApiTest.java,184,,"                .withExpTypes(""feed"", ""process"", ""mirror"").withExpTotal(11), },"
75237,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SearchApiTest.java,184,,"                .withExpTypes(""feed"", ""process"", ""mirror"").withExpTotal(11), },"
75238,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SearchApiTest.java,184,,"                .withExpTypes(""feed"", ""process"", ""mirror"").withExpTotal(11), },"
75239,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SearchApiTest.java,236,,"            {new QueryParams().withTagkeys(""bundle""), new Result().withExpBundles(1, 2, 3)"
75240,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/SearchApiTest.java,287,,"            {new QueryParams().forType(""feed,process"").withNameSeq(""bundle"").withTagkeys(""partial,common"")"
75241,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/TouchAPIPrismAndServerTest.java,103,,"        Assert.assertNotEquals(oldbundleId, bundleId, ""Bundle ids are same. No new bundle generated."");"
75242,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/TouchAPIPrismAndServerTest.java,104,,"        validate(response, ""Old coordinator id: "" + coordId + "". New bundle id: "" + bundleId);"
75243,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/TouchAPIPrismAndServerTest.java,104,,"        validate(response, ""Old coordinator id: "" + coordId + "". New bundle id: "" + bundleId);"
75244,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ValidateAPIPrismAndServerTest.java,40,,"@Test(groups = { ""distributed"", ""embedded"", ""sanity"" })"
75245,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/ValidateAPIPrismAndServerTest.java,40,,"@Test(groups = { ""distributed"", ""embedded"", ""sanity"" })"
75246,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/entity/ListEntitiesTest.java,121,,"    @Test(dataProvider = ""getHelpers"")"
75247,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatFeedOperationsTest.java,122,,"    @Test(groups = {""multiCluster""})"
75248,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,135,,"    @Test(dataProvider = ""generateSeparators"")"
75249,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,139,,"            StringUtils.join(new String[]{""yyyy"", ""MM"", ""dd"", ""HH""}, separator);"
75250,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,146,,"        cols.add(HCatUtil.getStringSchema(col1Name, col1Name + "" comment""));"
75251,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,150,,"        partitionCols.add(HCatUtil.getStringSchema(partitionColumn, partitionColumn + "" partition""));"
75252,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,170,,"            new String[]{""#dt=${YEAR}"", ""${MONTH}"", ""${DAY}"", ""${HOUR}""}, separator);"
75253,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,170,,"            new String[]{""#dt=${YEAR}"", ""${MONTH}"", ""${DAY}"", ""${HOUR}""}, separator);"
75254,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,170,,"            new String[]{""#dt=${YEAR}"", ""${MONTH}"", ""${DAY}"", ""${HOUR}""}, separator);"
75255,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,170,,"            new String[]{""#dt=${YEAR}"", ""${MONTH}"", ""${DAY}"", ""${HOUR}""}, separator);"
75256,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,172,,"            ""catalog:"" + dbName + "":"" + inputTableName + tableUriPartitionFragment;"
75257,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,184,,"        bundles[0].setProcessInputStartEnd(""now(0,0)"", ""now(0,0)"");"
75258,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,192,,"            outputHDFSDir + ""/dt="" + dataDates.get(0), clusterFS);"
75259,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatProcessTest.java,250,,"        final String inputFeed2Name = Util.readEntityName(inputFeed1) + ""-second"";"
75260,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/hcat/HCatReplicationTest.java,161,,"        cols.add(HCatUtil.getStringSchema(col1Name, col1Name + "" comment""));"
75261,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/EntityLineageTest.java,108,,"            new Pair((new String[]{""Feed001""}), new String[]{""Feed002"", ""Feed005""}),"
75262,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/EntityLineageTest.java,205,,"        String[] expectedVertices = {""Process001"", ""Process002"", ""Process003"", ""Process004"", ""Process005"","
75263,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/EntityLineageTest.java,205,,"        String[] expectedVertices = {""Process001"", ""Process002"", ""Process003"", ""Process004"", ""Process005"","
75264,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/EntitySummaryTest.java,216,,"                softAssert.assertTrue(status.equals(""RUNNING"") || status.equals(""SUBMITTED""),"
75265,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/EntitySummaryTest.java,365,,"        softAssert.assertEquals(summaries[0].getName(), pNames.get(1), ""Another process expected."");"
75266,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/LineageApiTest.java,180,,"        LOGGER.info(""response: "" + response);"
75267,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/LineageApiTest.java,181,,"        LOGGER.info(""responseString: "" + responseString);"
75268,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/LineageApiTest.java,415,,"                + ""one between cluster and owner, one between cluster and colo and one between cluster and tags"");"
75269,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/LineageApiTest.java,421,,"            ""Expecting edge from the cluster to inputFeeds & outputFeeds"");"
75270,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListFeedInstancesTest.java,146,,"                + ""&end="" + TimeUtil.addMinsToTime(startTime, i * 5 + 2);"
75271,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListFeedInstancesTest.java,168,,"            ""?start="" + startTime + ""&numResults=12"");"
75272,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListFeedInstancesTest.java,228,,"            ""start="" + startTime + ""&numResults=12&orderBy=status&sortOrder=desc"", null);"
75273,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListFeedInstancesTest.java,307,,"            ""end="" + TimeUtil.addMinsToTime(startTime, 4), null);"
75274,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListProcessInstancesTest.java,67,,"        LOGGER.info(""Time range is between : "" + startTime + "" and "" + endTime);"
75275,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListProcessInstancesTest.java,122,,"            ""?start="" + TimeUtil.addMinsToTime(startTime, 4)"
75276,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListProcessInstancesTest.java,123,,"                + ""&end="" + TimeUtil.addMinsToTime(startTime, 8));"
75277,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListProcessInstancesTest.java,143,,"            ""start="" + startTime + ""&numResults=12&orderBy=status&sortOrder=desc"", null);"
75278,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/lineage/ListProcessInstancesTest.java,198,,"            ""start="" + startTime + ""&numResults=12"", null);"
75279,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/nativeScheduler/NativeScheduleTest.java,97,,"                ""properties=falcon.scheduler:native"");"
75280,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/nativeScheduler/NativeScheduleTest.java,102,,"                ""properties=falcon.scheduler:oozie"");"
75281,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/nativeScheduler/NativeSchedulerAPITest.java,196,,"                ""start="" + startTime + ""&end="" + TimeUtil.addMinsToTime(startTime, 2), null);"
75282,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/nativeScheduler/NativeSchedulerAPITest.java,201,,"                .getInstanceParams(processMerlin.getName(), ""?start="" + startTime);"
75283,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/EntityDryRunTest.java,86,,"    @Test(groups = {""singleCluster""})"
75284,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/EntityDryRunTest.java,88,,"        bundles[0].setProcessProperty(""EntityDryRunTestProp"", ""${coord:someEL(1)"");"
75285,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/EntityDryRunTest.java,88,,"        bundles[0].setProcessProperty(""EntityDryRunTestProp"", ""${coord:someEL(1)"");"
75286,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/FeedDelayTest.java,179,,"                ""minutes(40)"", ""minutes(20)"", true, },"
75287,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/FeedDelayTest.java,179,,"                ""minutes(40)"", ""minutes(20)"", true, },"
75288,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/NewPrismProcessUpdateTest.java,119,,"    @Test(groups = { ""multiCluster"" }, timeOut = 1200000)"
75289,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/NewPrismProcessUpdateTest.java,145,,"        LOGGER.info(""updated process: "" + Util.prettyPrintXml(updatedProcess.toString()));"
75290,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/NewPrismProcessUpdateTest.java,319,,"                ""number of instances doesnt match :("");"
75291,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/OptionalInputTest.java,83,,"    @Test(enabled = true, groups = {""singleCluster""})"
75292,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/OptionalInputTest.java,86,,"                ""2010-01-02T01:00Z"", ""2010-01-02T01:12Z"");"
75293,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/OptionalInputTest.java,86,,"                ""2010-01-02T01:00Z"", ""2010-01-02T01:12Z"");"
75294,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/OptionalInputTest.java,94,,"        bundles[0].setProcessInputStartEnd(""now(0,-10)"", ""now(0,0)"");"
75295,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/OptionalInputTest.java,94,,"        bundles[0].setProcessInputStartEnd(""now(0,-10)"", ""now(0,0)"");"
75296,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/OptionalInputTest.java,103,,"            inputPath + ""/input1/"", dataDates);"
75297,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismClusterDeleteTest.java,72,,"    @Test(groups = {""multiCluster""})"
75298,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismConcurrentRequestTest.java,80,,"    @Test(groups = {""multiCluster""})"
75299,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismConcurrentRequestTest.java,85,,"                new Brother(""brother"" + i, ""submit"", EntityType.FEED, brotherGrimm, bundles[0],"
75300,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismConcurrentRequestTest.java,95,,"            LOGGER.info(brother.getName() + "" output: \n"""
75301,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,93,,"    @Test(groups = {""multiCluster""})"
75302,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,373,,"        Assert.assertTrue(r.getMessage().contains(""SUCCEEDED""));"
75303,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,380,,"        String startTimeServer1 = ""2012-10-01T12:00Z"";"
75304,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,388,,"                .withRetention(""days(10000)"", ActionType.DELETE)"
75305,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,703,,"        compareDataStoreStates(finalSystemState.get(""prismArchive""), finalPrismArchiveStore,"
75306,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,705,,"        compareDataStoreStates(finalPrismStore, finalSystemState.get(""prismStore""), clusterName);"
75307,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,707,,"        compareDataStoreStates(finalServer1Store, finalSystemState.get(""Server1Store""),"
75308,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,709,,"        compareDataStoreStates(finalSystemState.get(""Server1Archive""), finalServer1ArchiveStore,"
75309,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,712,,"        compareDataStoresForEquality(finalSystemState.get(""Server2Archive""),"
75310,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedDeleteTest.java,714,,"        compareDataStoresForEquality(finalSystemState.get(""Server2Store""), finalServer2Store);"
75311,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,85,,"    @Test(groups = {""multiCluster""})"
75312,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,109,,"                .withRetention(""hours(10)"", ActionType.DELETE)"
75313,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,110,,"                .withValidity(startTime, ""2099-01-01T00:00Z"")"
75314,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,234,,"            LOGGER.info(""still in for loop"");"
75315,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,291,,"            OSUtil.concat(OSUtil.OOZIE_EXAMPLE_INPUT_DATA, ""2ndLateData""), inputFolderListForColo1);"
75316,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,339,,"                .withPartition(""ua1/${cluster.colo}"")"
75317,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedLateReplicationTest.java,368,,"        HadoopUtil.putFileInFolderHDFS(cluster2FS, 90, 1, prefix, ""_SUCCESS"");"
75318,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,97,,"        uploadDataToServer3(testDirWithDate + ""00/ua2/"", testFile1);"
75319,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,98,,"        uploadDataToServer3(testDirWithDate + ""05/ua2/"", testFile2);"
75320,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,109,,"        uploadDataToServer3(testDirWithDate + ""00/ua3/"", testFile1);"
75321,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,110,,"        uploadDataToServer3(testDirWithDate + ""05/ua3/"", testFile2);"
75322,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,184,,"        String startTimeUA1 = ""2012-10-01T12:05Z"";"
75323,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,185,,"        String startTimeUA2 = ""2012-10-01T12:10Z"";"
75324,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,193,,"                .withRetention(""days(1000000)"", ActionType.DELETE)"
75325,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,203,,"                .withValidity(startTimeUA2, ""2012-10-01T12:25Z"")"
75326,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,212,,"                .withValidity(""2012-10-01T12:00Z"", ""2099-01-01T00:00Z"")"
75327,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,212,,"                .withValidity(""2012-10-01T12:00Z"", ""2099-01-01T00:00Z"")"
75328,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,217,,"        LOGGER.info(""feed: "" + Util.prettyPrintXml(feed.toString()));"
75329,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,247,,"                .withValidity(startTimeUA1, ""2099-10-01T12:10Z"")"
75330,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,253,,"                .withValidity(startTimeUA2, ""2099-10-01T12:25Z"")"
75331,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,263,,"                .withPartition(""${cluster.colo}"")"
75332,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,285,,"        Assert.assertEquals(OozieUtil.checkIfFeedCoordExist(cluster2OC, feed.getName(), ""RETENTION""), 1);"
75333,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,294,,"        AssertUtil.failIfStringFoundInPath(ua2ReplicatedData, ""ua1"", ""ua2"");"
75334,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,294,,"        AssertUtil.failIfStringFoundInPath(ua2ReplicatedData, ""ua1"", ""ua2"");"
75335,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,565,,"                .withDataLocation(testBaseDir1 + ""/ua1"" + MINUTE_DATE_PATTERN)"
75336,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,573,,"                .withDataLocation(testBaseDir1 + ""/ua2"" + MINUTE_DATE_PATTERN)"
75337,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationPartitionExpTest.java,672,,"                .withDataLocation(testBaseDir2 + ""/replicated"" + MINUTE_DATE_PATTERN)"
75338,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationUpdateTest.java,129,,"                .withRetention(""hours(10)"", ActionType.DELETE)"
75339,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedReplicationUpdateTest.java,218,,"                .withValidity(startTime, ""2099-01-01T00:00Z"")"
75340,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedResumeTest.java,75,,"    @Test(groups = {""prism"", ""0.2""})"
75341,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedResumeTest.java,75,,"    @Test(groups = {""prism"", ""0.2""})"
75342,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSnSTest.java,47,,"@Test(groups = ""distributed"")"
75343,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSnSTest.java,90,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75344,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSnSTest.java,90,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75345,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSnSTest.java,90,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75346,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSuspendTest.java,41,,"@Test(groups = ""distributed"")"
75347,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSuspendTest.java,77,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75348,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedSuspendTest.java,77,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75349,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedUpdateTest.java,139,,"                .withRetention(""hours(10)"", ActionType.DELETE)"
75350,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismFeedUpdateTest.java,140,,"                .withValidity(startTime, ""2099-01-01T00:00Z"")"
75351,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,77,,"    @Test(groups = {""prism"", ""0.2""})"
75352,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,77,,"    @Test(groups = {""prism"", ""0.2""})"
75353,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,180,,"            compareDataStoreStates(finalPrismStore, systemPostUp.get(""prismStore""), processName);"
75354,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,181,,"            compareDataStoreStates(systemPostUp.get(""prismArchive""), finalPrismArchiveStore,"
75355,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,184,,"            compareDataStoresForEquality(finalUA2Store, systemPostUp.get(""ua2Store""));"
75356,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,185,,"            compareDataStoresForEquality(finalUA2ArchiveStore, systemPostUp.get(""ua2Archive""));"
75357,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,187,,"            compareDataStoreStates(finalUA1Store, systemPostUp.get(""ua1Store""), processName);"
75358,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessDeleteTest.java,188,,"            compareDataStoreStates(systemPostUp.get(""ua1Archive""), finalUA1ArchiveStore,"
75359,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessResumeTest.java,76,,"    @Test(groups = {""prism"", ""0.2""})"
75360,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessResumeTest.java,76,,"    @Test(groups = {""prism"", ""0.2""})"
75361,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessScheduleTest.java,48,,"@Test(groups = ""distributed"")"
75362,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessScheduleTest.java,94,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75363,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessScheduleTest.java,94,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75364,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessScheduleTest.java,94,,"    @Test(groups = {""prism"", ""0.2"", ""embedded""})"
75365,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSnSTest.java,83,,"    @Test(groups = {""prism"", ""0.2"", ""embedded"", ""multiCluster""})"
75366,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSnSTest.java,83,,"    @Test(groups = {""prism"", ""0.2"", ""embedded"", ""multiCluster""})"
75367,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSnSTest.java,83,,"    @Test(groups = {""prism"", ""0.2"", ""embedded"", ""multiCluster""})"
75368,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSnSTest.java,83,,"    @Test(groups = {""prism"", ""0.2"", ""embedded"", ""multiCluster""})"
75369,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSnSTest.java,148,,"    @Test(groups = {""prism"", ""0.2"", ""distributed""})"
75370,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSuspendTest.java,41,,"@Test(groups = ""distributed"")"
75371,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSuspendTest.java,77,,"    @Test(groups = {""prism"", ""0.2"", ""distributed""})"
75372,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismProcessSuspendTest.java,77,,"    @Test(groups = {""prism"", ""0.2"", ""distributed""})"
75373,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismSubmitTest.java,43,,"@Test(groups = ""distributed"")"
75374,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismSubmitTest.java,98,,"        Assert.assertTrue(r.getMessage().contains(""SUCCEEDED""));"
75375,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismSubmitTest.java,122,,"        Assert.assertTrue(r.getMessage().contains(""PARTIAL""));"
75376,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismSubmitTest.java,289,,"    @Test(groups = ""embedded"")"
75377,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/PrismSubmitTest.java,293,,"        Assert.assertTrue(r.getMessage().contains(""FAILED""));"
75378,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,106,,"    @Test(groups = {""singleCluster"", ""0.3.1"", ""embedded""}, timeOut = 1200000, enabled = false)"
75379,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,106,,"    @Test(groups = {""singleCluster"", ""0.3.1"", ""embedded""}, timeOut = 1200000, enabled = false)"
75380,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,160,,"        processBundle.setProcessProperty(""someProp"", ""someValue"");"
75381,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,172,,"    @Test(groups = {""MultiCluster"", ""0.3.1"", ""embedded""}, timeOut = 1200000, enabled = false)"
75382,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,197,,"        Assert.assertEquals(OozieUtil.checkIfFeedCoordExist(cluster2OC, updatedFeed.getName(), ""RETENTION""), 2);"
75383,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,322,,"            FeedMerlin updatedFeed = new FeedMerlin(feed).withProperty(""someProp"", ""someVal"");"
75384,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/prism/UpdateAtSpecificTimeTest.java,419,,"            .withRetention(""days(100000)"", ActionType.DELETE)"
75385,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/ClusterSetupTest.java,96,,"        Assert.assertEquals(alertText, ""falcon/default/Submit successful (cluster) "" + sourceCluster.getName());"
75386,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/ClusterSetupTest.java,163,,"        Assert.assertTrue(clusterSetup.checkElementByContent(""input"", path), ""Location should be present."");"
75387,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,83,,"        bundles[0].setProcessValidity(""2010-01-02T01:00Z"", ""2010-01-02T01:11Z"");"
75388,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,112,,"            Arrays.asList(inputFeed, outputFeed, processMerlin), ""Unexpected search results."");"
75389,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,116,,"                ""Unexpected entity name displayed on entity page."");"
75390,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,311,,"                + ""&end="" + TimeUtil.addMinsToTime(startTime, 6));"
75391,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,325,,"            process.getName(), ""start="" + startTime, null);"
75392,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,359,,"        displayedSummary.selectInstanceSummaryStatus(""RUNNING"");"
75393,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/EntityPageTest.java,361,,"            ""Unexpected summary displayed."");"
75394,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/FeedSetupTest.java,64,,"    private final List<String> timeUnits = new ArrayList<>(Arrays.asList(""minutes"", ""hours"", ""days"", ""months""));"
75395,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/FeedSetupTest.java,128,,"        feed.setGroups(""groups"");"
75396,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/FeedSetupTest.java,129,,"        feed.setAvailabilityFlag(""_SUCCESS"");"
75397,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/FeedSetupTest.java,743,,"            baseTestHDFSDir + ""/newInput/${YEAR}/${MONTH}/${DAY}/${HOUR}/${MINUTE}"");"
75398,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/FeedSetupTest.java,744,,"        feedFromXML.getLocations().getLocations().get(1).setPath(baseTestHDFSDir + ""/newFalcon/clicksStats"");"
75399,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/FeedSetupTest.java,745,,"        feedFromXML.getLocations().getLocations().get(2).setPath(baseTestHDFSDir + ""/newFalcon/clicksMetaData"");"
75400,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/HomePageTest.java,115,,"        Assert.assertTrue(alert.contains(""Submit successful""), ""Not expected alert: '"" + alert + ""'"");"
75401,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/HomePageTest.java,115,,"        Assert.assertTrue(alert.contains(""Submit successful""), ""Not expected alert: '"" + alert + ""'"");"
75402,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/LoginTest.java,54,,"        AssertUtil.assertEmpty(loginPage.getUserVisibleWarning(), ""Unexpected user warning."");"
75403,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/ProcessSetupTest.java,124,,"        process.setTags(""first=yes,second=yes,third=no"");"
75404,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/searchUI/ProcessSetupTest.java,179,,"        LOGGER.info(String.format(""Comparing source process: %n%s%n and preview: %n%s%n."", process, processFromXML));"
75405,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/security/AclValidationTest.java,81,,"    @Test(dataProvider = ""generateUserAndGroup"")"
75406,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/security/EntityOp.java,45,,"                logger.error(""Caught exception: "" + e);"
75407,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,59,,"    private String startTime = ""2015-06-06T09:37Z"";"
75408,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,89,,"        bundles[0].setInputFeedValidity(""2014-01-01T01:00Z"", ""2016-12-12T22:00Z"");"
75409,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,89,,"        bundles[0].setInputFeedValidity(""2014-01-01T01:00Z"", ""2016-12-12T22:00Z"");"
75410,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,101,,"        if (processTime[1].equals(""Input"")) {"
75411,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,106,,"        if (processTime[1].equals(""Output"")) {"
75412,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,111,,"        if (processTime[0].equals(""true"") && r != null) {"
75413,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,114,,"        } else if (processTime[0].equals(""emptyMessage"") && r != null) {"
75414,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,124,,"            new String[] { ""true"", ""Input"", ""2015-06-06T09:35Z"", ""2015-06-06T09:37Z"", ""2015-06-06T09:47Z"","
75415,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,125,,"                ""2015-06-06T09:57Z"", },"
75416,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,129,,"                ""2015-06-06T09:57Z"", ""2015-06-06T10:07Z"", },"
75417,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,132,,"            new String[] { ""true"", ""Input"", ""2015-06-06T10:00Z"", ""2015-06-06T10:17Z"", ""2015-06-06T09:57Z"","
75418,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,135,,"                ""2015-06-06T10:27Z"", ""2015-06-06T09:47Z"", ""2015-06-06T10:07Z"", },"
75419,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/FeedInstanceDependencyTest.java,164,,"            new String[] { ""false"", ""Output"", ""2017-06-06T10:45Z"", },"
75420,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/PipelineInstanceDependencyTest.java,206,,"                ""?instanceTime="" + startTimeStr, null);"
75421,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/ProcessInstanceDependencyTest.java,102,,"        if (param[1].equals(""true"")) {"
75422,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/ProcessInstanceDependencyTest.java,183,,"            { TimeUtil.addMinsToTime(startTime, 60), ""false"" },"
75423,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,54,,"@Test(groups = { ""distributed"", ""embedded"", ""sanity"" })"
75424,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,54,,"@Test(groups = { ""distributed"", ""embedded"", ""sanity"" })"
75425,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,109,,"                TimeUtil.addMinsToTime(startTime, -20), EntityType.FEED, ""Input[MISSING]"");"
75426,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,117,,"            finalInstanceTag = ""Output[WAITING]"";"
75427,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,125,,"            expectedEdgeList.add(new Edge(processVertex, outputVertex1, ""produces""));"
75428,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,127,,"        expectedEdgeList.add(new Edge(inputVertex1, processVertex, ""consumed by""));"
75429,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,143,,"    @Test(dataProvider = ""getParameters"", groups = ""embedded"")"
75430,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,149,,"                    ""?start="" + startTime);"
75431,./TargetProjects/falcon/falcon-regression/merlin/src/test/java/org/apache/falcon/regression/triage/TriageAPISingleColoTest.java,303,,"        processObj.getInputs().getInputs().get(1).setStart(""now(-1,0)"");"
75432,./TargetProjects/falcon/lifecycle/src/main/java/org/apache/falcon/lifecycle/engine/oozie/utils/OozieBuilderUtils.java,352,,"            properties.setProperty(OozieClient.USE_SYSTEM_LIBPATH, ""true"");"
75433,./TargetProjects/falcon/lifecycle/src/test/java/org/apache/falcon/lifecycle/retention/AgeBasedDeleteTest.java,51,,"        property.setValue(""hours(3)"");"
75434,./TargetProjects/falcon/messaging/src/test/java/org/apache/falcon/messaging/JMSMessageConsumerTest.java,129,,"            message.setStringProperty(""appName"", ""FALCON_PROCESS_DEFAULT_process1"");"
75435,./TargetProjects/falcon/messaging/src/test/java/org/apache/falcon/messaging/JMSMessageConsumerTest.java,175,,"            message.setStringProperty(""eventStatus"", ""WAITING"");"
75436,./TargetProjects/falcon/messaging/src/test/java/org/apache/falcon/messaging/JMSMessageProducerTest.java,78,,"                ""-"" + WorkflowExecutionArgs.ENTITY_NAME.getName(), ""agg-coord"","
75437,./TargetProjects/falcon/messaging/src/test/java/org/apache/falcon/messaging/JMSMessageProducerTest.java,103,,"                ""-"" + WorkflowExecutionArgs.OUTPUT_FEED_NAMES.getName(), ""null"","
75438,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,38,,"            @Dimension(value = ""entity-type"") String entityType,"
75439,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,39,,"            @Dimension(value = ""entity-name"") String entityName,"
75440,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,41,,"            @Dimension(value = ""wf-id"") String wfId,"
75441,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,42,,"            @Dimension(value = ""wf-user"") String workflowUser,"
75442,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,43,,"            @Dimension(value = ""run-id"") String runId,"
75443,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,45,,"        return ""IGNORE"";"
75444,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,72,,"            @Dimension(value = ""message"") String message,"
75445,./TargetProjects/falcon/metrics/src/main/java/org/apache/falcon/aspect/GenericAlert.java,96,,"            @Dimension(value = ""exception"") Throwable throwable) {"
75446,./TargetProjects/falcon/oozie-el-extensions/src/main/java/org/apache/oozie/extensions/OozieELExtensions.java,175,,"        eval.setVariable("".wrap"", ""true"");"
75447,./TargetProjects/falcon/oozie-el-extensions/src/main/java/org/apache/oozie/extensions/OozieELExtensions.java,175,,"        eval.setVariable("".wrap"", ""true"");"
75448,./TargetProjects/falcon/oozie-el-extensions/src/test/java/org/apache/oozie/extensions/TestOozieELExtensions.java,94,,"        Assert.assertEquals(CoordELFunctions.evalAndWrap(eval, ""${now(0, 0)}""), ""2009-09-02T10:00Z"");"
75449,./TargetProjects/falcon/oozie-el-extensions/src/test/java/org/apache/oozie/extensions/TestOozieELExtensions.java,100,,"        Assert.assertEquals(CoordELFunctions.evalAndWrap(eval, ""${yesterday(0, 0)}""), ""2009-09-01T00:00Z"");"
75450,./TargetProjects/falcon/oozie-el-extensions/src/test/java/org/apache/oozie/extensions/TestOozieELExtensions.java,127,,"        eval.setVariable(OozieClient.USER_NAME, ""test"");"
75451,./TargetProjects/falcon/oozie/src/main/java/org/apache/falcon/logging/LogProvider.java,80,,"                    EntityUtil.getLogPath(cluster, entity) + ""/job-"""
75452,./TargetProjects/falcon/oozie/src/main/java/org/apache/falcon/oozie/process/ProcessExecutionWorkflowBuilder.java,156,,"                    paramList.add(key + ""=${wf:conf('"" + key + ""')}"");"
75453,./TargetProjects/falcon/oozie/src/main/java/org/apache/oozie/client/LocalOozieClientBundle.java,214,,"        throw new OozieClientException(ErrorCode.E0301.toString(), ""no-op"");"
75454,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,174,,"            {""true"", ""2099-01-01T00:00Z""},"
75455,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,183,,"        Path bundlePath = new Path(""/projects/falcon/"");"
75456,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,192,,"        Assert.assertEquals(props.get(""queueName""), ""ageBasedDeleteQueue"");"
75457,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,238,,"        buildCoordAndValidateFrequency(""${coord:hours(6)}"");"
75458,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,291,,"                    if (action.getName().equals(""eviction"") || action.getName().equals(""replication"")){"
75459,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,324,,"        Assert.assertEquals(""${coord:minutes(20)}"", coord.getFrequency());"
75460,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,334,,"        Assert.assertEquals(""input-dataset"", inputDataset.getName());"
75461,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,351,,"        Assert.assertEquals(""${now(0,-40)}"", inEventInstance);"
75462,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,367,,"        Assert.assertEquals(props.get(""sourceRelativePaths""), pathsWithPartitions);"
75463,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,369,,"        Assert.assertEquals(props.get(""sourceRelativePaths""), ""${coord:dataIn('input')}"");"
75464,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,370,,"        Assert.assertEquals(props.get(""distcpSourcePaths""), ""${coord:dataIn('input')}"");"
75465,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,371,,"        Assert.assertEquals(props.get(""distcpTargetPaths""), ""${coord:dataOut('output')}"");"
75466,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,371,,"        Assert.assertEquals(props.get(""distcpTargetPaths""), ""${coord:dataOut('output')}"");"
75467,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,372,,"        Assert.assertEquals(props.get(""falconFeedStorageType""), Storage.TYPE.FILESYSTEM.name());"
75468,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,411,,"                new Path(StringUtils.removeStart(appPath, ""${nameNode}"")));"
75469,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/feed/OozieFeedWorkflowBuilderTest.java,744,,"        conf.set(""fs.permissions.umask-mode"", umask);"
75470,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,115,,"        storeEntity(EntityType.FEED, ""clicksummary"", FEED_XML);"
75471,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,221,,"        ACTION oozieAction = getAction(parentWorkflow, ""user-action"");"
75472,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,256,,"    @DataProvider(name = ""secureOptions"")"
75473,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,268,,"        URL resource = this.getClass().getResource(""/config/feed/hive-table-feed.xml"");"
75474,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,272,,"        resource = this.getClass().getResource(""/config/feed/hive-table-feed-out.xml"");"
75475,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,282,,"        Path bundlePath = new Path(""/falcon/staging/workflows"", process.getName());"
75476,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,291,,"        String coordPath = bundle.getCoordinator().get(0).getAppPath().replace(""${nameNode}"", """");"
75477,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,311,,"        WORKFLOWAPP parentWorkflow = getWorkflowapp(fs, new Path(wfPath, ""workflow.xml""));"
75478,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,319,,"        Assert.assertEquals(hiveAction.getScript(), ""${nameNode}/apps/hive/script.hql"");"
75479,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,320,,"        Assert.assertEquals(hiveAction.getJobXml(), ""${wf:appPath()}/conf/hive-site.xml"");"
75480,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java,396,,"        assertEquals(argsList.get(0), ""${falcon_""+input.getName()+""_partition_filter_hive}"");"
75481,./TargetProjects/falcon/oozie/src/test/java/org/apache/falcon/oozie/workflow/FalconPostProcessingTest.java,57,,"    private String userNotification = ""true"";"
75482,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/FalconServer.java,124,,"        if (!(""true"".equals(isSafeMode) || ""false"".equals(isSafeMode))) {"
75483,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/listener/ContextStartupListener.java,65,,"        buffer.append(""\n############################################"");"
75484,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java,325,,"            LOG.error(""Update failed"", e);"
75485,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java,648,,"                throw FalconWebException.newAPIException(""Entity operation "" + operation.name()"
75486,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractInstanceManager.java,466,,"                    return (order.equalsIgnoreCase(""asc"")) ? i1.getStatus().name().compareTo(i2.getStatus().name())"
75487,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractSchedulableEntityManager.java,73,,"            @Context HttpServletRequest request, @Dimension(""entityType"") @PathParam(""type"") String type,"
75488,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractSchedulableEntityManager.java,73,,"            @Context HttpServletRequest request, @Dimension(""entityType"") @PathParam(""type"") String type,"
75489,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractSchedulableEntityManager.java,74,,"            @Dimension(""entityName"") @PathParam(""entity"") String entity,"
75490,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractSchedulableEntityManager.java,74,,"            @Dimension(""entityName"") @PathParam(""entity"") String entity,"
75491,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/AbstractSchedulableEntityManager.java,75,,"            @Dimension(""colo"") @PathParam(""colo"") String colo,"
75492,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/ExtensionManagerProxy.java,99,,"            @PathParam(""extension-name"") String extensionName,"
75493,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/ExtensionManagerProxy.java,101,,"            @DefaultValue("""") @QueryParam(""doAs"") String doAsUser) {"
75494,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/ExtensionManagerProxy.java,120,,"            @PathParam(""job-name"") final String jobName,"
75495,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/ExtensionManagerProxy.java,141,,"                              @QueryParam(""colo"") final String coloExpr,"
75496,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/ExtensionManagerProxy.java,148,,"            LOG.error(""Extension Job not found:"" + jobName);"
75497,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/ExtensionManagerProxy.java,162,,"        return new APIResult(APIResult.Status.SUCCEEDED, ""Extension job "" + jobName + "" scheduled successfully"");"
75498,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,115,,"            @Dimension(""entityType"") @PathParam(""type"") final String type,"
75499,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,115,,"            @Dimension(""entityType"") @PathParam(""type"") final String type,"
75500,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,116,,"            @Dimension(""entityName"") @PathParam(""entity"") final String entity,"
75501,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,116,,"            @Dimension(""entityName"") @PathParam(""entity"") final String entity,"
75502,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,117,,"            @Dimension(""colo"") @QueryParam(""colo"") String colo,"
75503,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,118,,"            @Dimension(""lifecycle"") @QueryParam(""lifecycle"") final List<LifeCycle> lifeCycles,"
75504,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,119,,"            @DefaultValue("""") @QueryParam(""filterBy"") final String filterBy,"
75505,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,120,,"            @DefaultValue("""") @QueryParam(""orderBy"") final String orderBy,"
75506,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,121,,"            @DefaultValue("""") @QueryParam(""sortOrder"") final String sortOrder,"
75507,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,122,,"            @DefaultValue(""0"") @QueryParam(""offset"") final Integer offset,"
75508,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,123,,"            @QueryParam(""numResults"") final Integer numResults) {"
75509,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,170,,"            @Dimension(""start-time"") @QueryParam(""start"") final String startStr,"
75510,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,170,,"            @Dimension(""start-time"") @QueryParam(""start"") final String startStr,"
75511,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,171,,"            @Dimension(""end-time"") @QueryParam(""end"") final String endStr,"
75512,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,171,,"            @Dimension(""end-time"") @QueryParam(""end"") final String endStr,"
75513,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/InstanceManagerProxy.java,179,,"            @Dimension(""allAttempts"") @QueryParam(""allAttempts"") final Boolean allAttempts) {"
75514,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,82,,"            @Dimension(""entityType"") @PathParam(""type"") final String entityType,"
75515,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,82,,"            @Dimension(""entityType"") @PathParam(""type"") final String entityType,"
75516,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,83,,"            @Dimension(""entityName"") @QueryParam(""name"") final String entityName,"
75517,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,86,,"            @Dimension(""colo"") @QueryParam(""colo"") final String colo) {"
75518,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,176,,"                              @QueryParam(""skipDryRun"") final Boolean skipDryRun) {"
75519,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,215,,"            @Dimension(""entityName"") @PathParam(""entity"") final String entityName,"
75520,./TargetProjects/falcon/prism/src/main/java/org/apache/falcon/resource/proxy/SchedulableEntityManagerProxy.java,325,,"        final Set<String> allColos = getApplicableColos(""cluster"", clusterName);"
75521,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/jdbc/MonitoringJdbcStateStoreTest.java,93,,"        monitoringJdbcStateStore.putMonitoredEntity(""test_feed1"", EntityType.FEED.toString(), now());"
75522,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/jdbc/MonitoringJdbcStateStoreTest.java,101,,"        Date dateOne =  SchemaHelper.parseDateUTC(""2015-11-20T00:00Z"");"
75523,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/jdbc/MonitoringJdbcStateStoreTest.java,103,,"        monitoringJdbcStateStore.putPendingInstances(""test_feed1"", ""test_cluster"", dateOne, EntityType.FEED.toString());"
75524,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/jdbc/MonitoringJdbcStateStoreTest.java,118,,"        monitoringJdbcStateStore.putMonitoredEntity(""test-process"", EntityType.PROCESS.toString(),"
75525,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/jdbc/MonitoringJdbcStateStoreTest.java,135,,"        store.putMonitoredEntity(""test-feed1"", EntityType.FEED.toString(), now());"
75526,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/jdbc/MonitoringJdbcStateStoreTest.java,155,,"        store.putSLAAlertInstance(""test-feed1"", ""test-cluster"", EntityType.FEED.toString(),"
75527,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,134,,"            getEntityList("""", """", """", ""process"", """", """", """", """", 0, 10, """");"
75528,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,141,,"        StartupProperties.get().setProperty(""falcon.security.authorization.enabled"", ""false"");"
75529,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,142,,"        CurrentUser.authenticate(System.getProperty(""user.name""));"
75530,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,151,,"        EntityList entityList = this.getEntityList("""", """", """", ""process"", """", """", """", ""asc"", 0, 10, """");"
75531,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,237,,"                ""consumer=consumer@xyz.com, owner=producer@xyz.com"","
75532,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,253,,"                ""name"", ""desc"", 1, 1, """");"
75533,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/EntityManagerTest.java,262,,"        entityList = this.getEntityList(""pipelines"", """", """", ""process"","
75534,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/InstanceManagerTest.java,67,,"        result = instanceManager.searchInstances(""PROCESS"", PROCESS_NAME_PREFIX, """", """", """", """", """", 0, 10);"
75535,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/admin/AdminResourceTest.java,49,,"        checkProperty(AdminResource.SAFEMODE, ""false"");"
75536,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java,66,,"        Response response = resource.getVertex(""blah"");"
75537,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java,75,,"                MetadataTestContext.PROCESS_ENTITY_NAME + ""/2014-01-01T01:00Z"").iterator().next();"
75538,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java,314,,"        String path = StartupProperties.get().getProperty(""falcon.graph.serialize.path"");"
75539,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/MetadataDiscoveryResourceTest.java,192,,"        Assert.assertEquals(results.get(""type""), RelationshipType.PROCESS_ENTITY.toString());"
75540,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/MetadataDiscoveryResourceTest.java,193,,"        Assert.assertEquals(results.get(""name""), MetadataTestContext.PROCESS_ENTITY_NAME);"
75541,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/MetadataDiscoveryResourceTest.java,194,,"        List inVertices = (List) results.get(""inVertices"");"
75542,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/resource/metadata/MetadataDiscoveryResourceTest.java,197,,"        List outVertices = (List) results.get(""outVertices"");"
75543,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/ClientCertificateFilterTest.java,90,,"        when(mockRequest.getAttribute(""javax.servlet.request.X509Certificate""))."
75544,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuditFilterTest.java,74,,"        Mockito.when(mockRequest.getRequestURI()).thenReturn(""http://127.0.0.1:15000"");"
75545,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthenticationFilterTest.java,125,,"        CurrentUser.authenticate(""nouser"");"
75546,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthenticationFilterTest.java,168,,"        final String userName = System.getProperty(""user.name"");"
75547,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthenticationFilterTest.java,172,,"            Mockito.when(mockRequest.getMethod()).thenReturn(""POST"");"
75548,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthenticationFilterTest.java,277,,"        Mockito.when(mockRequest.getParameter(FalconAuthenticationFilter.DO_AS_PARAM)).thenReturn(""doAsProxyUser"");"
75549,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthorizationFilterTest.java,106,,"                ""falcon.security.authorization.enabled"", String.valueOf(enabled));"
75550,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthorizationFilterTest.java,113,,"            StringBuffer requestUrl = new StringBuffer(""http://localhost"" + resource);"
75551,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconAuthorizationFilterTest.java,115,,"            Mockito.when(mockRequest.getRequestURI()).thenReturn(""/api"" + resource);"
75552,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconCSRFFilterTest.java,59,,"        StartupProperties.get().setProperty(""falcon.security.csrf.enabled"", ""true"");"
75553,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconCSRFFilterTest.java,59,,"        StartupProperties.get().setProperty(""falcon.security.csrf.enabled"", ""true"");"
75554,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconCSRFFilterTest.java,60,,"        StartupProperties.get().setProperty(""falcon.security.csrf.header"", FALCON_CSRF_HEADER_DEFAULT);"
75555,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/security/FalconCSRFFilterTest.java,61,,"        mockHeader(""Mozilla/5.0"", null);"
75556,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/BacklogMetricEmitterServiceTest.java,104,,"        storeEntity(EntityType.PROCESS, ""entity1"");"
75557,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/EntitySLAAlertServiceTest.java,112,,"        monitoringJdbcStateStore.putPendingInstances(""test-feed"", ""test-cluster"", dateOne, EntityType.FEED.toString());"
75558,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/EntitySLAAlertServiceTest.java,112,,"        monitoringJdbcStateStore.putPendingInstances(""test-feed"", ""test-cluster"", dateOne, EntityType.FEED.toString());"
75559,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/EntitySLAMonitoringTest.java,66,,"        Date start = SchemaHelper.parseDateUTC(""2014-05-05T00:00Z"");"
75560,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/EntitySLAMonitoringTest.java,67,,"        Date end = SchemaHelper.parseDateUTC(""2015-05-05T00:00Z"");"
75561,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/EntitySLAMonitoringTest.java,90,,"        AbstractSchedulableEntityManager.validateSlaParams(""feed"","
75562,./TargetProjects/falcon/prism/src/test/java/org/apache/falcon/service/EntitySLAMonitoringTest.java,97,,"        AbstractSchedulableEntityManager.validateSlaParams(""process"","
75563,./TargetProjects/falcon/replication/src/test/java/org/apache/falcon/replication/FeedReplicatorTest.java,53,,"            ""true"","
75564,./TargetProjects/falcon/replication/src/test/java/org/apache/falcon/replication/FeedReplicatorTest.java,103,,"            ""-ignoreErrors"", ""false"","
75565,./TargetProjects/falcon/replication/src/test/java/org/apache/falcon/replication/FilteredCopyListingTest.java,117,,"        Path source = new Path(fileSystemPath.toString() + ""///tmp/source"");"
75566,./TargetProjects/falcon/replication/src/test/java/org/apache/falcon/replication/FilteredCopyListingTest.java,118,,"        Path target = new Path(fileSystemPath.toString() + ""///tmp/target"");"
75567,./TargetProjects/falcon/replication/src/test/java/org/apache/falcon/replication/FilteredCopyListingTest.java,119,,"        Path listingPath = new Path(fileSystemPath.toString() + ""///tmp/META/fileList.seq"");"
75568,./TargetProjects/falcon/replication/src/test/java/org/apache/falcon/replication/FilteredCopyListingTest.java,140,,"        configuration.set(""falcon.include.path"", ""*/3/*"");"
75569,./TargetProjects/falcon/rerun/src/test/java/org/apache/falcon/rerun/AbstractRerunPolicyTest.java,62,,"        long delay = backoff.getDelay(new Frequency(""minutes(2)""), 2);"
75570,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,108,,"                    createTestData(""feed1"", ""yyyy-MM-dd/'more'/yyyy"", 10, TimeUnit.DAYS, ""/data"");"
75571,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,108,,"                    createTestData(""feed1"", ""yyyy-MM-dd/'more'/yyyy"", 10, TimeUnit.DAYS, ""/data"");"
75572,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,108,,"                    createTestData(""feed1"", ""yyyy-MM-dd/'more'/yyyy"", 10, TimeUnit.DAYS, ""/data"");"
75573,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,112,,"            String logFile = hdfsUrl + ""/falcon/staging/feed/instancePaths-2012-01-01-01-00.csv"";"
75574,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,115,,"                ""-feedBasePath"", dataPath,"
75575,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,116,,"                ""-retentionType"", ""instance"","
75576,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,116,,"                ""-retentionType"", ""instance"","
75577,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,117,,"                ""-retentionLimit"", ""days(10)"","
75578,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,118,,"                ""-timeZone"", ""UTC"","
75579,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,118,,"                ""-timeZone"", ""UTC"","
75580,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,119,,"                ""-frequency"", ""daily"","
75581,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,119,,"                ""-frequency"", ""daily"","
75582,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,120,,"                ""-logFile"", logFile,"
75583,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,121,,"                ""-falconFeedStorageType"", Storage.TYPE.FILESYSTEM.name(),"
75584,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,139,,"            Assert.fail(""Unknown exception"", e);"
75585,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,218,,"                ""-frequency"", ""hourly"","
75586,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,256,,"            Assert.assertEquals(""instances=NULL"", stream.getBuffer());"
75587,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,291,,"            createTestData(""/stats"");"
75588,./TargetProjects/falcon/retention/src/test/java/org/apache/falcon/retention/FeedEvictorTest.java,292,,"            createTestData(""/meta"");"
75589,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/InstanceState.java,58,,"                    throw new InvalidStateTransitionException(""Event "" + event.name() + "" not valid for state, """
75590,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/InstanceState.java,58,,"                    throw new InvalidStateTransitionException(""Event "" + event.name() + "" not valid for state, """
75591,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/InstanceState.java,111,,"                throw new InvalidStateTransitionException(""Instance is in terminal state, "" + this.name()"
75592,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/InstanceState.java,112,,"                        + "". Cannot apply transitions."");"
75593,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/InMemoryStateStore.java,64,,"            throw new StateStoreException(""Entity with key, "" + key + "" already exists."");"
75594,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/InMemoryStateStore.java,72,,"            throw new StateStoreException(""Entity with key, "" + entityId + "" does not exist."");"
75595,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/InMemoryStateStore.java,131,,"            throw new StateStoreException(""Instance with key, "" + key + "" already exists."");"
75596,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/jdbc/JDBCStateStore.java,76,,"            throw new StateStoreException(""Entity with key, "" + key + "" already exists."");"
75597,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/jdbc/JDBCStateStore.java,95,,"            throw new StateStoreException(""Entity with key, "" + entityID + "" does not exist."");"
75598,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/jdbc/JDBCStateStore.java,206,,"            throw new StateStoreException(""Instance with key, "" + instanceID + "" already exists."");"
75599,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/jdbc/JDBCStateStore.java,282,,"        q.setParameter(""cluster"", instance.getCluster());"
75600,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/jdbc/JDBCStateStore.java,289,,"        q.setParameter(""currentState"", instanceState.getCurrentState().toString());"
75601,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/state/store/jdbc/JDBCStateStore.java,319,,"        q.setParameter(""entityId"", id.getEntityID().getKey());"
75602,./TargetProjects/falcon/scheduler/src/main/java/org/apache/falcon/workflow/engine/FalconWorkflowEngine.java,143,,"        return ""SUCCESS"";"
75603,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/notification/service/DataAvailabilityServiceTest.java,54,,"        this.dfsCluster = EmbeddedCluster.newCluster(""testCluster"");"
75604,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/EntityStateServiceTest.java,62,,"        mockEntity.setName(""test"");"
75605,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,84,,"        this.dfsCluster = EmbeddedCluster.newCluster(""testCluster"");"
75606,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,128,,"            Assert.fail(""Exception must have been thrown"");"
75607,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,168,,"        EntityState entityState1 = getEntityState(EntityType.PROCESS, ""process1"");"
75608,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,190,,"        storeEntity(EntityType.FEED, ""clicksFeed"");"
75609,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,191,,"        storeEntity(EntityType.FEED, ""clicksSummary"");"
75610,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,251,,"                System.currentTimeMillis() - 60000, ""cluster1"", System.currentTimeMillis() - 60000);"
75611,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/state/service/store/TestJDBCStateStore.java,263,,"                System.currentTimeMillis(), ""cluster2"", System.currentTimeMillis());"
75612,./TargetProjects/falcon/scheduler/src/test/java/org/apache/falcon/workflow/engine/WorkflowEngineFactoryTest.java,67,,"        storeEntity(EntityType.PROCESS, ""summarize"");"
75613,./TargetProjects/falcon/shell/src/main/java/org/apache/falcon/shell/commands/FalconEntityCommands.java,159,,"                    unspecifiedDefaultValue = ""false"", specifiedDefaultValue = ""true"") boolean skipDryRun"
75614,./TargetProjects/falcon/shell/src/main/java/org/apache/falcon/shell/commands/FalconEntityCommands.java,159,,"                    unspecifiedDefaultValue = ""false"", specifiedDefaultValue = ""true"") boolean skipDryRun"
75615,./TargetProjects/falcon/test-util/src/main/java/org/apache/falcon/cluster/util/EmbeddedCluster.java,112,,"                ""http://localhost:41000/oozie"", ""0.1""));"
75616,./TargetProjects/falcon/unit/src/main/java/org/apache/falcon/unit/FalconUnitClient.java,210,,"                LOG.warn(""Cluster is not registered with this entity "" + entityName);"
75617,./TargetProjects/falcon/unit/src/main/java/org/apache/falcon/unit/LocalExtensionManager.java,119,,"        return new APIResult(APIResult.Status.SUCCEEDED, ""Extension job "" + jobName + "" scheduled successfully"");"
75618,./TargetProjects/falcon/unit/src/test/java/org/apache/falcon/unit/TestFalconUnit.java,78,,"    private static final String TEST_EXTENSION = ""testExtension"";"
75619,./TargetProjects/falcon/unit/src/test/java/org/apache/falcon/unit/TestFalconUnit.java,475,,"        Process process = (Process) getClient().getDefinition(EntityType.PROCESS.toString(), ""sample"", null);"
75620,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ConfigSyncService.java,50,,"                            @Dimension(""colo"") @QueryParam(""colo"") String colo) {"
75621,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ExtensionManager.java,54,,"                + ""on Prism."");"
75622,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ExtensionManager.java,61,,"    public APIResult schedule(@PathParam(""job-name"") String jobName,"
75623,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ExtensionManager.java,63,,"                              @DefaultValue("""") @QueryParam(""doAs"") String doAsUser) {"
75624,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ExtensionManager.java,75,,"            @PathParam(""extension-name"") String extensionName,"
75625,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ExtensionManager.java,84,,"                + ""Please run your operation on Prism."");"
75626,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/ExtensionManager.java,101,,"                + ""operation on Prism."");"
75627,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,51,,"            @Dimension(""type"") @PathParam(""type"") String type,"
75628,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,52,,"            @Dimension(""entity"") @PathParam(""entity"") String entity,"
75629,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,53,,"            @Dimension(""colo"") @QueryParam(""colo"") String colo,"
75630,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,54,,"            @Dimension(""lifecycle"") @QueryParam(""lifecycle"") List<LifeCycle> lifeCycles,"
75631,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,55,,"            @DefaultValue("""") @QueryParam(""filterBy"") String filterBy,"
75632,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,56,,"            @DefaultValue("""") @QueryParam(""orderBy"") String orderBy,"
75633,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,57,,"            @DefaultValue("""") @QueryParam(""sortOrder"") String sortOrder,"
75634,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,58,,"            @DefaultValue(""0"") @QueryParam(""offset"") Integer offset,"
75635,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,59,,"            @QueryParam(""numResults"") Integer resultsPerPage) {"
75636,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,81,,"            @Dimension(""start-time"") @QueryParam(""start"") String startStr,"
75637,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,81,,"            @Dimension(""start-time"") @QueryParam(""start"") String startStr,"
75638,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,82,,"            @Dimension(""end-time"") @QueryParam(""end"") String endStr,"
75639,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,82,,"            @Dimension(""end-time"") @QueryParam(""end"") String endStr,"
75640,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/InstanceManager.java,90,,"            @Dimension(""allAttempts"") @QueryParam(""allAttempts"") Boolean allAttempts) {"
75641,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,51,,"    public APIResult getStatus(@Dimension(""entityType"") @PathParam(""type"") String type,"
75642,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,51,,"    public APIResult getStatus(@Dimension(""entityType"") @PathParam(""type"") String type,"
75643,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,52,,"                               @Dimension(""entityName"") @PathParam(""entity"") String entity,"
75644,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,52,,"                               @Dimension(""entityName"") @PathParam(""entity"") String entity,"
75645,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,53,,"                               @Dimension(""colo"") @QueryParam(""colo"") final String colo,"
75646,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,80,,"                + "" supported.Please run your operation on Prism."", Response.Status.FORBIDDEN);"
75647,./TargetProjects/falcon/webapp/src/main/java/org/apache/falcon/resource/SchedulableEntityManager.java,101,,"            @QueryParam(""skipDryRun"") final Boolean skipDryRun) {"
75648,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/catalog/HiveCatalogServiceIT.java,88,,"                new HCatFieldSchema(""region"", HCatFieldSchema.Type.STRING, """")"
75649,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/catalog/HiveCatalogServiceIT.java,142,,"        firstPtn.put(""ds"", ""20130903""); //yyyyMMDD"
75650,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/catalog/HiveCatalogServiceIT.java,156,,"        thirdPtn.put(""ds"", ""20130902"");"
75651,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,68,,"        Assert.assertEquals(executeWithURL(""entity -submit -type cluster -file "" + filePath), 0);"
75652,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,69,,"        context.setCluster(overlay.get(""cluster""));"
75653,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,74,,"        Assert.assertEquals(executeWithURL(""entity -submit -type feed -file "" + filePath), 0);"
75654,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,78,,"                        + overlay.get(""inputFeedName""));"
75655,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,86,,"                + "" -file "" + filePath), 0);"
75656,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,90,,"                        + overlay.get(""outputFeedName""));"
75657,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,98,,"                        + overlay.get(""processName""));"
75658,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,175,,"                + "" -name "" + overlay.get(""outputFeedName"")), 0);"
75659,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,192,,"        Assert.assertEquals(executeWithURL(""entity -schedule -type feed -name "" + overlay.get(""outputFeedName"")), 0);"
75660,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,194,,"        Assert.assertEquals(executeWithURL(""entity -schedule -type process -name "" + overlay.get(""processName"")"
75661,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,283,,"                + "" -start "" + SchemaHelper.getDateFormat().format(new Date(0))"
75662,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,284,,"                + "" -end "" + SchemaHelper.getDateFormat().format(new Date())"
75663,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,334,,"        Assert.assertEquals(executeWithURL(""entity -submit -type feed -name "" + ""name""), -1);"
75664,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,366,,"        Assert.assertEquals(executeWithURL(""instance -running -type feed -lifecycle eviction -name """
75665,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,372,,"        Assert.assertEquals(executeWithURL(""instance -status -type process -name """
75666,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,581,,"        Assert.assertEquals(executeWithURL(""instance -kill -type process -name """
75667,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,835,,"                + ""name"" + "" -start 2010-01-01T01:00Z  -end 2010-01-01T03:00Z""), -1);"
75668,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,851,,"                        .split(""\\s"")), -1);"
75669,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconCLIIT.java,903,,"        Assert.assertEquals(executeWithURL(""instance -logs -type process -name """
75670,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconClusterUpdateCLIIT.java,62,,"        context.setCluster(overlay.get(""cluster""));"
75671,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconSafemodeCLIIT.java,72,,"        Assert.assertEquals(executeWithURL(""entity -status -type feed -name "" + overlay.get(""inputFeedName"")), 0);"
75672,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/cli/FalconSafemodeCLIIT.java,118,,"                + "" -name "" + overlay.get(""inputFeedName"")), -1);"
75673,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/late/LateDataHandlerIT.java,125,,"            ""-falconInputNames"", ""foo"","
75674,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/FeedImportIT.java,105,,"        LOG.info(""entity -submit -type cluster -file "" + filePath);"
75675,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/FeedImportIT.java,114,,"        Assert.assertEquals(TestContext.executeWithURL(""entity -submit -type datasource -file "" + filePath), 0);"
75676,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/FileSystemFeedReplicationIT.java,68,,"        String sourceFilePath = TestContext.overlayParametersOverTemplate(""/table/primary-cluster.xml"", overlay);"
75677,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/FileSystemFeedReplicationIT.java,125,,"        Assert.assertEquals(TestContext.executeWithURL(""entity -submit -type cluster -file "" + filePath), 0);"
75678,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,99,,"        final List<String> partitionKeys = Arrays.asList(""ds"", ""region"");"
75679,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,104,,"        final List<String> multiColDatedPartitionKeys = Arrays.asList(""year"", ""month"", ""day"", ""region"");"
75680,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,104,,"        final List<String> multiColDatedPartitionKeys = Arrays.asList(""year"", ""month"", ""day"", ""region"");"
75681,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,104,,"        final List<String> multiColDatedPartitionKeys = Arrays.asList(""year"", ""month"", ""day"", ""region"");"
75682,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,118,,"            {""days(10)"", """", false},"
75683,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,122,,"            {""days(15)"", """", false},"
75684,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,126,,"            {""days(100)"", """", false},"
75685,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedEvictorIT.java,465,,"        instancePaths.append(""instancePaths="");"
75686,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/lifecycle/TableStorageFeedReplicationIT.java,150,,"        Assert.assertEquals(TestContext.executeWithURL(""entity -submit -type cluster -file "" + filePath), 0);"
75687,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/AbstractSchedulerManagerJerseyIT.java,196,,"        Path path = new Path(""/examples/input-data/rawLogs/"" + formatter.format(date) + ""/file"");"
75688,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/AbstractSchedulerManagerJerseyIT.java,196,,"        Path path = new Path(""/examples/input-data/rawLogs/"" + formatter.format(date) + ""/file"");"
75689,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerJerseyIT.java,220,,"            Assert.fail(""Exception should be Thrown"");"
75690,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerJerseyIT.java,300,,"        overlay.put(""inputFeedName"", feed3);"
75691,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerPaginationJerseyIT.java,59,,"                .path(""api/entities/list/process/"")"
75692,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerPaginationJerseyIT.java,60,,"                .header(""Cookie"", context.getAuthenticationToken())"
75693,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerPaginationJerseyIT.java,79,,"                .queryParam(""orderBy"", ""name"").queryParam(""sortOrder"", ""desc"").queryParam(""offset"", ""2"")"
75694,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerPaginationJerseyIT.java,79,,"                .queryParam(""orderBy"", ""name"").queryParam(""sortOrder"", ""desc"").queryParam(""offset"", ""2"")"
75695,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/EntityManagerPaginationJerseyIT.java,80,,"                .queryParam(""numResults"", ""2"").queryParam(""fields"", ""status,tags"")"
75696,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/ExtensionManagerIT.java,105,,"        System.out.println(""extension -instances -jobName "" + JOB_NAME_1 + "" -fields status,clusters,tags"");"
75697,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/ExtensionManagerIT.java,105,,"        System.out.println(""extension -instances -jobName "" + JOB_NAME_1 + "" -fields status,clusters,tags"");"
75698,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/MetadataResourceJerseyIT.java,75,,"                .header(""Cookie"", context.getAuthenticationToken())"
75699,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/ProcessInstanceManagerIT.java,126,,"        String endTime = ""2012-04-20T00:01Z"";"
75700,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/TestContext.java,154,,"                    ""application.services"","
75701,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/TestContext.java,298,,"        ClientResponse response = resource.header(""Cookie"", AUTH_COOKIE_EQ + authenticationToken)"
75702,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/resource/TestContext.java,403,,"                cluster = EmbeddedCluster.newCluster(overlay.get(""cluster""), true);"
75703,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/util/HsqldbTestUtils.java,228,,"            r=st.execute(""INSERT INTO "" + CUSTOMER_TABLE_NAME + "" VALUES(1, 'Apple')"");"
75704,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/util/HsqldbTestUtils.java,229,,"            LOG.info(""INSERT INTO returned {}"", r);"
75705,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/validation/FeedEntityValidationIT.java,52,,"            ""catalog:"" + DATABASE_NAME + "":"" + TABLE_NAME + ""#ds=${YEAR}-${MONTH}-${DAY}-${HOUR}"";"
75706,./TargetProjects/falcon/webapp/src/test/java/org/apache/falcon/validation/FeedEntityValidationIT.java,122,,"            {""catalog:"" + DATABASE_NAME + "":"" + TABLE_NAME + ""#ds=ds=${YEAR}-${MONTH}-${DAY}"", """"},"
75707,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.classpath.service/src/test/java/org/apache/felix/atomos/tests/classpath/service/test/ClasspathLaunchTest.java,108,,"        assertNotNull(bc, ""No context found."");"
75708,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.index.bundles/src/test/java/org/apache/felix/atomos/tests/index/bundles/IndexLaunchTest.java,143,,"        assertNotNull(bc, ""No context found."");"
75709,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,169,,"        assertEquals(ref.getBundle(), b, ""Wrong bundle."");"
75710,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,290,,"        assertEquals(1, child.getAtomosContents().size(), ""Wrong number of bundles."");"
75711,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,353,,"        final File modules = new File(""target/modules"");"
75712,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,371,,"        assertNotNull(bc, ""No context found."");"
75713,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,467,,"        final AtomosLayer child = atomos.getBootLayer().addLayer(""SINGLE"","
75714,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,683,,"            fail(""Failed to find class: "" + e.getMessage());"
75715,./TargetProjects/felix-atomos/atomos.tests/atomos.tests.modulepath.service/src/test/java/org/apache/felix/atomos/tests/modulepath/service/ModulepathLaunchTest.java,975,,"            ""Wrong BSN"");"
75716,./TargetProjects/felix-atomos/atomos/src/test/java/org/apache/felix/atomos/AtomosTest.java,247,,"        assertEquals(b1, reinstall, ""Wrong bundle."");"
75717,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,366,,"                    out.println(""   "" + resources[resIdx].getPresentationName()"
75718,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,643,,"                            ""Expecting more arguments."", null);"
75719,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,683,,"                            ""Not expecting '"" + tokenizer.sval + ""'."", null);"
75720,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,1024,,"            out.println(""obr "" + ADDURL_CMD + "" <repository-url> ..."");"
75721,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,1082,,"                + "" <bundle-name>|<bundle-symbolic-name>|<bundle-id>[;<version>] ..."");"
75722,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,1139,,"                + ""] <local-dir> <bundle-name>[;<version>] ..."");"
75723,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrCommandImpl.java,1180,,"                + "" | "" + REMOVEURL_CMD"
75724,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrGogoCommand.java,127,,"        @Parameter(names={ ""-v"", ""--verbose"" }, presentValue=""true"","
75725,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrGogoCommand.java,128,,"            absentValue=""false"") boolean verbose,"
75726,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrGogoCommand.java,242,,"        @Descriptor(""( <bundle-name> | <symbolic-name> | <bundle-id> )[@<version>] ..."")"
75727,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ObrGogoCommand.java,336,,"                    System.out.println(""   "" + resources[resIdx].getPresentationName()"
75728,./TargetProjects/felix-dev/bundlerepository/src/main/java/org/apache/felix/bundlerepository/impl/ResolverImpl.java,95,,"        throw new IllegalStateException(""The resources have not been resolved."");"
75729,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/NamespaceTranslatorTest.java,50,,"        assertEquals(""bheuaark"", NamespaceTranslator.getFelixNamespace(""bheuaark""));"
75730,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/OSGiRepositoryImplTest.java,57,,"        URL url = getClass().getResource(""/another_repository.xml"");"
75731,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/OSGiRepositoryImplTest.java,86,,"        assertEquals(1, res.getCapabilities(""foo"").size());"
75732,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/OSGiRepositoryXMLTest.java,50,,"        URL url = getClass().getResource(""/spec_repository.xml"");"
75733,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/OSGiRequirementAdapterTest.java,41,,"        dirs.put(""test"", ""test"");"
75734,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResolverImplTest.java,45,,"        URL url = getClass().getResource(""/repo_for_resolvertest.xml"");"
75735,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResolverImplTest.java,200,,"        resolver.add(repoAdmin.getHelper().requirement(""bundle"", ""(symbolicname=res1)""));"
75736,./TargetProjects/felix-dev/bundlerepository/src/test/java/org/apache/felix/bundlerepository/impl/ResourceImplTest.java,34,,"        final URL dir = getClass().getResource(""/repo_files"");"
75737,./TargetProjects/felix-dev/cm.json/src/main/java/org/apache/felix/cm/json/impl/ConfigurationReaderImpl.java,253,,"                    throwIOException(""PID "".concat(pid)"
75738,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/ConfigurationReaderImplTest.java,63,,"        assertNotNull(configs.get(""config.a""));"
75739,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/ConfigurationReaderImplTest.java,64,,"        assertNotNull(configs.get(""config.b""));"
75740,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/JsonSupportTest.java,69,,"        builder.add(""hello"", ""world"");"
75741,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/JsonSupportTest.java,149,,"                             ""{\n"""
75742,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/JsonSupportTest.java,150,,"                             + ""  \""a\"" : 1,\n"""
75743,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/JsonSupportTest.java,151,,"                             + ""  \""b\"" : 2\n"""
75744,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/JsonSupportTest.java,152,,"                             + ""}\n"";"
75745,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/OrderedDictionaryTest.java,42,,"        assertNull(map.put(""hello"", ""helloV""));"
75746,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/OrderedDictionaryTest.java,42,,"        assertNull(map.put(""hello"", ""helloV""));"
75747,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/OrderedDictionaryTest.java,43,,"        assertNull(map.put(""world"", ""worldV""));"
75748,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/OrderedDictionaryTest.java,43,,"        assertNull(map.put(""world"", ""worldV""));"
75749,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,51,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""String""));"
75750,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,52,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""int""));"
75751,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,53,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Integer""));"
75752,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,54,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""long""));"
75753,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,55,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Long""));"
75754,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,56,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""float""));"
75755,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,57,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Float""));"
75756,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,58,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""double""));"
75757,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,59,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Double""));"
75758,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,60,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""byte""));"
75759,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,61,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Byte""));"
75760,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,62,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""short""));"
75761,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,63,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Short""));"
75762,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,64,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""char""));"
75763,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,65,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Character""));"
75764,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,66,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""boolean""));"
75765,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,67,,"        assertNull(TypeConverter.convertObjectToType(JsonValue.NULL, ""Boolean""));"
75766,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,69,,"        assertArrayEquals(new String[0], (String[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""String[]""));"
75767,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,70,,"        assertArrayEquals(new int[0], (int[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""int[]""));"
75768,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,71,,"        assertArrayEquals(new Integer[0], (Integer[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Integer[]""));"
75769,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,72,,"        assertArrayEquals(new long[0], (long[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""long[]""));"
75770,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,73,,"        assertArrayEquals(new Long[0], (Long[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Long[]""));"
75771,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,74,,"        assertArrayEquals(new float[0], (float[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""float[]""), 0.1f);"
75772,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,75,,"        assertArrayEquals(new Float[0], (Float[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Float[]""));"
75773,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,76,,"        assertArrayEquals(new double[0], (double[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""double[]""), 0.1);"
75774,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,77,,"        assertArrayEquals(new Double[0], (Double[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Double[]""));"
75775,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,78,,"        assertArrayEquals(new byte[0], (byte[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""byte[]""));"
75776,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,79,,"        assertArrayEquals(new Byte[0], (Byte[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Byte[]""));"
75777,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,80,,"        assertArrayEquals(new short[0], (short[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""short[]""));"
75778,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,81,,"        assertArrayEquals(new Short[0], (Short[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Short[]""));"
75779,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,82,,"        assertArrayEquals(new char[0], (char[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""char[]""));"
75780,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,84,,"                (Character[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Character[]""));"
75781,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,85,,"        assertArrayEquals(new boolean[0], (boolean[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""boolean[]""));"
75782,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,86,,"        assertArrayEquals(new Boolean[0], (Boolean[]) TypeConverter.convertObjectToType(JsonValue.NULL, ""Boolean[]""));"
75783,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,88,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection"")).isEmpty());"
75784,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,89,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<String>"")).isEmpty());"
75785,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,91,,"                ((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Integer>"")).isEmpty());"
75786,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,92,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Long>"")).isEmpty());"
75787,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,93,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Float>"")).isEmpty());"
75788,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,94,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Double>"")).isEmpty());"
75789,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,95,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Byte>"")).isEmpty());"
75790,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,96,,"        assertTrue(((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Short>"")).isEmpty());"
75791,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,98,,"                ((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Character>"")).isEmpty());"
75792,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,100,,"                ((Collection<?>) TypeConverter.convertObjectToType(JsonValue.NULL, ""Collection<Boolean>"")).isEmpty());"
75793,./TargetProjects/felix-dev/cm.json/src/test/java/org/apache/felix/cm/json/impl/TypeConverterTest.java,124,,"        builder.add(""hello"", ""world"");"
75794,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,35,,"        String envUser = System.getenv(""USER"");"
75795,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,38,,"            envUser = System.getenv(""USERNAME""); // maybe we're on Windows"
75796,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,50,,"        dict.put(""foo"", ""bar"");"
75797,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,52,,"        dict.put(""defaulted"", ""$[secret:not_there;default=defval123]"");"
75798,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,53,,"        dict.put(""cur.user"", ""$[env:"" + userVar + ""]"");"
75799,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,70,,"        Mockito.when(bc.getProperty(""foo.bar"")).thenReturn(""hello there"");"
75800,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,70,,"        Mockito.when(bc.getProperty(""foo.bar"")).thenReturn(""hello there"");"
75801,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,117,,"        String rf = getClass().getResource(""/other/testfile.txt"").getFile();"
75802,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,122,,"        assertEquals(""xxla la layy"", plugin.replace(""akey"", ""xx$[secret:testfile.txt]yy"", ""apid""));"
75803,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolationConfigurationPluginTest.java,122,,"        assertEquals(""xxla la layy"", plugin.replace(""akey"", ""xx$[secret:testfile.txt]yy"", ""apid""));"
75804,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolatorTest.java,35,,"        assertEquals(""hello world"", Interpolator.replace(""$[foo:hello]"", (type, name, dir) -> {"
75805,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolatorTest.java,36,,"            if (""foo"".equals(type) && ""hello"".equals(name)) {"
75806,./TargetProjects/felix-dev/configadmin-plugins/interpolation/src/test/java/org/apache/felix/configadmin/plugin/interpolation/InterpolatorTest.java,36,,"            if (""foo"".equals(type) && ""hello"".equals(name)) {"
75807,./TargetProjects/felix-dev/configadmin/src/main/java/org/apache/felix/cm/file/FilePersistenceManager.java,477,,"    @SuppressWarnings(""rawtypes"")"
75808,./TargetProjects/felix-dev/configadmin/src/main/java/org/apache/felix/cm/impl/Log.java,62,,"    @SuppressWarnings(""rawtypes"")"
75809,./TargetProjects/felix-dev/configadmin/src/main/java/org/apache/felix/cm/impl/SimpleFilter.java,345,,"                            ""Unknown operator: "" + filter.substring(startIdx, endIdx), filter);"
75810,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/ConfigurationHandlerTest.java,85,,"        @SuppressWarnings(""unchecked"")"
75811,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/ConfigurationHandlerTest.java,86,,"        final Dictionary<String, Object> dict = ConfigurationHandler.read(new ByteArrayInputStream(CONFIG.getBytes(""UTF-8"")));"
75812,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/ConfigurationHandlerTest.java,106,,"        properties.put(SERVICE_PID , new String [] {""foo"", ""bar""});"
75813,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/ConfigurationHandlerTest.java,106,,"        properties.put(SERVICE_PID , new String [] {""foo"", ""bar""});"
75814,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/ConfigurationHandlerTest.java,140,,"        properties.put(SERVICE_PID, ""com.adobe.granite.foo.Bar"");"
75815,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,69,,"        assertEquals( ""plain"", fpm.encodePid( ""plain"" ) );"
75816,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,70,,"        assertEquals( ""plain"" + File.separatorChar + ""path"", fpm.encodePid( ""plain.path"" ) );"
75817,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,99,,"        String oldOsName = System.getProperty( ""os.name"" );"
75818,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,103,,"            assertEquals(""%004cPT1"", winFpm.encodePid( ""LPT1"" ));"
75819,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,104,,"            assertEquals(""%006cpt1"", winFpm.encodePid( ""lpt1"" ));"
75820,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,171,,"        check( ""StringArray"", new String[]"
75821,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/file/FilePersistenceManagerTest.java,173,,"        check( ""IntArray"", new int[]"
75822,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/CaseInsensitiveDictionaryTest.java,43,,"        dict.put(""illegal"", ""value1"");"
75823,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/CaseInsensitiveDictionaryTest.java,44,,"        dict.put(""ILLEGAL"", ""value2"");"
75824,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/CaseInsensitiveDictionaryTest.java,44,,"        dict.put(""ILLEGAL"", ""value2"");"
75825,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/CaseInsensitiveDictionaryTest.java,82,,"        internalTestCheckValue( ""String"" );"
75826,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationImplTest.java,33,,"        props1.put(""array"", new long[] {1,2});"
75827,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,86,,"        String pid = ""testDefaultPersistenceManager"";"
75828,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,90,,"        dictionary.put( ""property1"", ""value1"" );"
75829,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,90,,"        dictionary.put( ""property1"", ""value1"" );"
75830,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,200,,"        assertNoLog( configMgr, LogService.LOG_DEBUG, ""Debug Test Message"", null );"
75831,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,201,,"        assertNoLog( configMgr, LogService.LOG_INFO, ""Info Test Message"", null );"
75832,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,202,,"        assertLog( configMgr, LogService.LOG_WARNING, ""Warning Test Message"", null );"
75833,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,203,,"        assertLog( configMgr, LogService.LOG_ERROR, ""Error Test Message"", null );"
75834,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,305,,"        bundleContext.setProperty( ""felix.cm.loglevel"", null );"
75835,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,363,,"        setServiceTrackerField( configMgr, ""configurationListenerTracker"" );"
75836,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/ConfigurationManagerTest.java,365,,"                setServiceTrackerField( configMgr, ""syncConfigurationListenerTracker"","
75837,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/helper/TargetedPidTest.java,55,,"        final String pid = ""a.b.c"";"
75838,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/helper/TargetedPidTest.java,57,,"        final Version version = new Version( ""1.0.0"" );"
75839,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/helper/TargetedPidTest.java,58,,"        final String location = ""loc:"" + symbolicName;"
75840,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/helper/TargetedPidTest.java,65,,"            createBundle( symbolicName, new Version( ""0.2.0"" ), location ), pid );"
75841,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/impl/helper/TargetedPidTest.java,75,,"        TestCase.assertFalse( ""Unregistered service must not match targeted PID"",  p1.matchesTarget( rnone ) );"
75842,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigAdminSecurityTest.java,187,,"        TestCase.assertTrue( props.get( ""port"" ) != null );"
75843,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationAdminUpdateStressTest.java,100,,"        System.out.println( ""[LogService/"" + level + ""] "" + message );"
75844,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationAdminUpdateStressTest.java,234,,"                    Long number = ( Long ) properties.get( ""number"" );"
75845,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBaseTest.java,60,,"        final String pid = ""test_configuration_after_config_admin_stop"";"
75846,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBaseTest.java,328,,"            TestCase.fail( ""Expected IllegalStateException for config.update"" );"
75847,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBaseTest.java,366,,"                    put( ""sample"", ""sample"" );"
75848,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBaseTest.java,397,,"        TestCase.assertNotNull( ""ConfigurationAdmin service is required"", ca );"
75849,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBaseTest.java,785,,"        TestCase.assertNotNull( ""Expect Properties after Service Registration"", tester.props );"
75850,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBindingTest.java,105,,"        TestCase.assertNotNull( ""Activator not started !!"", tester );"
75851,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBindingTest.java,111,,"        TestCase.assertNotNull( ""Expect Properties after Service Registration"", tester.props );"
75852,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBindingTest.java,112,,"        TestCase.assertEquals( ""Expect a single update call"", 1, tester.numManagedServiceUpdatedCalls );"
75853,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBindingTest.java,632,,"        final String locationA = ""test:location/A/"" + pid;"
75854,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/ConfigurationBindingTest.java,646,,"        final String locationB = ""test:location/B/"" + pid;"
75855,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/FELIX2813_ConfigurationAdminStartupTest.java,99,,"        listener.assertEvent( ConfigurationEvent.CM_UPDATED, ""test"", null, true, 1 );"
75856,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServiceFactoryPIDTest.java,51,,"        final String factoryPid = ""test.pid"";"
75857,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServiceFactoryPIDTest.java,65,,"        TestCase.assertNotNull( ""Activator not started !!"", tester );"
75858,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServiceFactoryPIDTest.java,68,,"        TestCase.assertNotNull( ""Expect Properties after Service Registration"", tester.configs.get( pid ) );"
75859,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServiceFactoryPIDTest.java,159,,"            TestCase.assertEquals( ""Expect a single update call"", 1, tester.numManagedServiceFactoryUpdatedCalls );"
75860,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServicePIDTest.java,51,,"        final String pid = ""test.pid"";"
75861,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServicePIDTest.java,66,,"        TestCase.assertNotNull( ""Activator not started !!"", tester );"
75862,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServicePIDTest.java,69,,"        TestCase.assertNotNull( ""Expect Properties after Service Registration"", tester.props );"
75863,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/MultiServicePIDTest.java,160,,"            TestCase.assertEquals( ""Expect a single update call"", 1, tester.numManagedServiceUpdatedCalls );"
75864,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/TargetedPidTest.java,46,,"        String basePid = ""test_targeted"";"
75865,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/TargetedPidTest.java,55,,"            TestCase.assertNotNull( ""Activator not started !!"", tester );"
75866,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/TargetedPidTest.java,63,,"            TestCase.assertEquals( ""Expect calls"", ++callCount, tester.numManagedServiceUpdatedCalls );"
75867,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/TargetedPidTest.java,68,,"                    String.format( ""%s|%s"", basePid, bundle.getSymbolicName() ),"
75868,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/TargetedPidTest.java,78,,"                TestCase.assertEquals( ""Expect PID"", pid, tester.props.get( Constants.SERVICE_PID ) );"
75869,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/helper/Log.java,76,,"            System.out.println(getLevel(level) + "" - "" + Thread.currentThread().getName() + "" : "" + message);"
75870,./TargetProjects/felix-dev/configadmin/src/test/java/org/apache/felix/cm/integration/helper/Log.java,76,,"            System.out.println(getLevel(level) + "" - "" + Thread.currentThread().getName() + "" : "" + message);"
75871,./TargetProjects/felix-dev/configurator/src/main/java/org/apache/felix/configurator/impl/Configurator.java,107,,"                    SystemLogger.debug(""Adding bundle "" + getBundleIdentity(bundle) + "" : "" + getBundleState(state));"
75872,./TargetProjects/felix-dev/configurator/src/main/java/org/apache/felix/configurator/impl/json/BinaryManager.java,55,,"                    .concat("" : Invalid value/type for configuration : "").concat(key).concat("" : "")"
75873,./TargetProjects/felix-dev/configurator/src/test/java/org/apache/felix/configurator/impl/ConfigUtilTest.java,40,,"        final String pid = ""a.b"";"
75874,./TargetProjects/felix-dev/configurator/src/test/java/org/apache/felix/configurator/impl/ConfiguratorTest.java,131,,"        aProps.put(""foo"", ""foo"");"
75875,./TargetProjects/felix-dev/connect/src/main/java/org/apache/felix/connect/JarRevision.java,73,,"                return new URL(""jar:"" + m_urlString + ""!/"" + ((m_prefix == null) ? """" : m_prefix));"
75876,./TargetProjects/felix-dev/connect/src/main/java/org/apache/felix/connect/felix/framework/ServiceRegistrationImpl.java,387,,"            throw new UnsupportedOperationException(""Not supported yet."");"
75877,./TargetProjects/felix-dev/connect/src/main/java/org/apache/felix/connect/felix/framework/capabilityset/SimpleFilter.java,316,,"                        ""Unknown operator: "" + filter.substring(startIdx, endIdx));"
75878,./TargetProjects/felix-dev/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java,126,,"	@SuppressWarnings(""unchecked"")"
75879,./TargetProjects/felix-dev/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java,241,,"						""Cannot convert "" + object + "" to "" + targetAsClass);"
75880,./TargetProjects/felix-dev/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java,270,,"	@SuppressWarnings(""rawtypes"")"
75881,./TargetProjects/felix-dev/converter/converter/src/main/java/org/osgi/util/converter/ConvertingImpl.java,767,,"			@SuppressWarnings(""boxing"")"
75882,./TargetProjects/felix-dev/converter/converter/src/main/java/org/osgi/util/converter/CustomConverterImpl.java,135,,"		@SuppressWarnings(""unchecked"")"
75883,./TargetProjects/felix-dev/converter/converter/src/main/java/org/osgi/util/converter/ListDelegate.java,38,,"			""unchecked"", ""rawtypes"""
75884,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterBuilderTest.java,65,,"        assertEquals(""A,B"", ca.convert(new String[] {""A"", ""B""}).to(String.class));"
75885,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterBuilderTest.java,90,,"        assertEquals(Integer.valueOf(-1), ca.convert(""Hello"").to(Integer.class));"
75886,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterCollectionsTest.java,422,,"        l.addAll(Arrays.asList(""hi"", ""there""));"
75887,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,78,,"        @SuppressWarnings(""unchecked"")"
75888,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,92,,"        @SuppressWarnings(""rawtypes"")"
75889,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,158,,"                return ""Chocolate!"";"
75890,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,180,,"        assertEquals(""Chocolate!"", m.get(""foo""));"
75891,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,181,,"        assertEquals(76543, (int) m.get(""bar""));"
75892,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,182,,"        assertEquals(true, (boolean) m.get(""za.za""));"
75893,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,222,,"        m.put(""bar"", ""999"");"
75894,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,275,,"        assertEquals(""fooo!"", ta.foo());"
75895,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterMapTest.java,583,,"        dict.put(""foo"", ""hello"");"
75896,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,113,,"        assertEquals(""abc"", converter.convert(""abc"").to(String.class));"
75897,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,114,,"        assertEquals(""true"", converter.convert(Boolean.TRUE).to(String.class));"
75898,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,116,,"        assertEquals(""123"", converter.convert(123).to(String.class));"
75899,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,118,,"        assertEquals(""12.3"", converter.convert(12.3f).to(String.class));"
75900,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,172,,"        assertEquals(""hello"", c.convert(ca).to(String.class));"
75901,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,242,,"                return ""1234"";"
75902,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,277,,"        MyClass2 mc = converter.convert(new String[] {""xxx"", ""yyy"", ""zzz""}).to(MyClass2.class);"
75903,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,303,,"        assertEquals(Arrays.asList(""123"", ""456""), ll);"
75904,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,447,,"        assertEquals(42, (int) converter.convert(""haha"").defaultValue(42).to(int.class));"
75905,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,499,,"        assertEquals(new Date(0), c1.convert(""foo"").to(Date.class));"
75906,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,759,,"        assertNull(converter.convert(""test"").defaultValue(null).to(new TypeReference<List<Long>>() {}));"
75907,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,765,,"        embedded.marco = ""hohoho"";"
75908,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,770,,"        dto.ping = ""lalala"";"
75909,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,775,,"        @SuppressWarnings(""rawtypes"")"
75910,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,778,,"        assertEquals(""lalala"", m.get(""ping""));"
75911,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,779,,"        assertEquals(Long.MIN_VALUE, m.get(""pong""));"
75912,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,780,,"        assertEquals(Count.ONE, m.get(""count""));"
75913,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,781,,"        assertNotNull(m.get(""embedded""));"
75914,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,881,,"    	assertEquals(dto.charSet, m.get(""charSet""));"
75915,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,894,,"    @Test @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
75916,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,957,,"        dto.dtoMap.put(""aaa"", subDTO2);"
75917,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,1085,,"        mb.beanVal = ""Hello"";"
75918,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,1087,,"        assertEquals(Collections.singletonMap(""value"", ""Hello""),"
75919,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,1317,,"        m.put(""org.foo.bar.width"", ""327"");"
75920,./TargetProjects/felix-dev/converter/converter/src/test/java/org/osgi/util/converter/ConverterTest.java,1317,,"        m.put(""org.foo.bar.width"", ""327"");"
75921,./TargetProjects/felix-dev/converter/schematizer/src/main/java/org/apache/felix/schematizer/impl/SchemaBasedConverter.java,66,,"    @SuppressWarnings( ""unchecked"" )"
75922,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchemaTest.java,51,,"                .schematize(""MyDTO"", new TypeReference<MyDTO3<MyEmbeddedDTO2<String>>>(){})"
75923,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchemaTest.java,63,,"        dto.ping = ""lalala"";"
75924,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchemaTest.java,74,,"        assertNotNull(s.valuesAt(""/embedded"", dto));"
75925,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,49,,"                .schematize(""MyDTO"", new TypeReference<MyDTO>(){})"
75926,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,55,,"        Node pingNode = root.children().get(""/ping"");"
75927,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,56,,"        assertNodeEquals(""ping"", ""/ping"", false, String.class, true, pingNode);"
75928,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,57,,"        Node pongNode = root.children().get(""/pong"");"
75929,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,58,,"        assertNodeEquals(""pong"", ""/pong"", false, Long.class, true, pongNode);"
75930,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,59,,"        Node countNode = root.children().get(""/count"");"
75931,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,60,,"        assertNodeEquals(""count"", ""/count"", false, MyDTO.Count.class, true, countNode);"
75932,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,61,,"        Node embeddedNode = root.children().get(""/embedded"");"
75933,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,63,,"        assertNodeEquals(""embedded"", ""/embedded"", false, MyEmbeddedDTO.class, true, embeddedNode);"
75934,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,65,,"        assertNodeEquals(""marco"", ""/embedded/marco"", false, String.class, true, marcoNode);"
75935,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,65,,"        assertNodeEquals(""marco"", ""/embedded/marco"", false, String.class, true, marcoNode);"
75936,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,67,,"        assertNodeEquals(""polo"", ""/embedded/polo"", false, Long.class, true, poloNode);"
75937,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,67,,"        assertNodeEquals(""polo"", ""/embedded/polo"", false, Long.class, true, poloNode);"
75938,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,69,,"        assertNodeEquals(""alpha"", ""/embedded/alpha"", false, MyEmbeddedDTO.Alpha.class, true, alphaNode);"
75939,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,69,,"        assertNodeEquals(""alpha"", ""/embedded/alpha"", false, MyEmbeddedDTO.Alpha.class, true, alphaNode);"
75940,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,93,,"                .type(""MyDTO"", ""/embedded/value"", String.class)"
75941,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/schematizer/impl/SchematizerServiceTest.java,272,,"        assertTrue(!""ERROR"".equals(embeddedNode.name()));"
75942,./TargetProjects/felix-dev/converter/schematizer/src/test/java/org/apache/felix/serializer/impl/json/JsonDeserializationTest.java,56,,"                .schematize(""MyDTO"", new TypeReference<MyDTO>(){})"
75943,./TargetProjects/felix-dev/converter/serializer/src/main/java/org/apache/felix/serializer/impl/json/DebugJsonWriter.java,64,,"    @SuppressWarnings(""rawtypes"")"
75944,./TargetProjects/felix-dev/converter/serializer/src/test/java/org/apache/felix/serializer/impl/json/JsonBackingObjectSerializationTest.java,162,,"            ""    {\n"" +"
75945,./TargetProjects/felix-dev/coordinator/src/test/java/org/apache/felix/coordinator/impl/CoordinatorImplTest.java,44,,"        final String name = ""test"";"
75946,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.annotation/src/org/apache/felix/dm/annotation/plugin/bnd/AnnotationCollector.java,462,,"            Object[] properties = m_repeatableProperty.get(""value"");"
75947,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.annotation/src/org/apache/felix/dm/annotation/plugin/bnd/AnnotationCollector.java,639,,"            throw new IllegalStateException(""detected multiple "" + annot + "" annotation from class "" + m_currentClassName + "" (on from child classes)"");"
75948,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.annotation/src/org/apache/felix/dm/annotation/plugin/bnd/AnnotationCollector.java,913,,"        	if (""true"".equals(writer.getParameter(EntryParam.required))) {"
75949,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.annotation/src/org/apache/felix/dm/annotation/plugin/bnd/AnnotationCollector.java,1406,,"                    throw new IllegalArgumentException(""Property \"""" + name + ""\"" in class "" + m_componentClassName"
75950,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.annotation/src/org/apache/felix/dm/annotation/plugin/bnd/AnnotationCollector.java,1406,,"                    throw new IllegalArgumentException(""Property \"""" + name + ""\"" in class "" + m_componentClassName"
75951,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.annotation/src/org/apache/felix/dm/annotation/plugin/bnd/AnnotationCollector.java,1505,,"                throw new IllegalStateException(""detected multiple @Inject annotation from class "" + m_currentClassName + "" (on from child classes)"");"
75952,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.index.itest/src/org/apache/felix/dm/index/itest/tests/Ensure.java,65,,"            STREAM.println(""[Ensure "" + INSTANCE + ""] step "" + step + "" ["" + currentThread() + ""] "" + info);"
75953,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.index.itest/src/org/apache/felix/dm/index/itest/tests/TestBase.java,229,,"            System.out.println(getLevel(level) + "" - "" + Thread.currentThread().getName() + "" : "" + message);"
75954,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.index.itest/src/org/apache/felix/dm/index/itest/tests/TestBase.java,229,,"            System.out.println(getLevel(level) + "" - "" + Thread.currentThread().getName() + "" : "" + message);"
75955,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AdapterWithPropagationTest.java,69,,"            Assert.assertTrue(""v2overriden"".equals(properties.get(""p2"")));"
75956,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AdapterWithoutPropagationTest.java,43,,"        props.put(""foo"", ""bar"");"
75957,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectBaseTest.java,50,,"        props.put(""name"", ""a"");"
75958,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithCallbacksServiceDependencyTest.java,39,,"        		.setCallbacks(""add"", ""remove"")"
75959,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithCallbacksServiceDependencyTest.java,39,,"        		.setCallbacks(""add"", ""remove"")"
75960,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,112,,"                     .setCallbacks(""add"", ""change"", null))"
75961,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,112,,"                     .setCallbacks(""add"", ""change"", null))"
75962,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,160,,"        props.put(""foo"", ""bar"");"
75963,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,160,,"        props.put(""foo"", ""bar"");"
75964,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,172,,"                     .setCallbacks(""add"", ""change"", ""remove"", ""swap""));"
75965,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,172,,"                     .setCallbacks(""add"", ""change"", ""remove"", ""swap""));"
75966,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,216,,"        System.out.println(""-------------------------- Modifying original service properties."");"
75967,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,219,,"        props.put(""foo"", ""barModified"");"
75968,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,617,,"            System.out.println(""+++ A"" + m_rank + "".add:"" + s + ""/"" + ServiceUtil.toString(ref));   "
75969,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AspectWithPropagationTest.java,622,,"            System.out.println(""+++ A"" + m_rank + "".swap: new="" + newS + "", props="" + ServiceUtil.toString(newSRef));"
75970,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AutoConfigTest.java,51,,"            public String toString() { return ""provider1""; }"
75971,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/AutoConfigTest.java,55,,"            public String toString() { return ""provider2""; }"
75972,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/BundleDependencyTest.java,39,,"        Component consumer = m.createComponent().setImplementation(c).add(m.createBundleDependency().setCallbacks(""add"", ""remove""));"
75973,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/BundleDependencyTest.java,39,,"        Component consumer = m.createComponent().setImplementation(c).add(m.createBundleDependency().setCallbacks(""add"", ""remove""));"
75974,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/ConfigurationDependencyTest.java,71,,"        Component s3 = m.createComponent().setImplementation(new ConfiguredServiceConsumer(e)).add(m.createServiceDependency().setService(Runnable.class, (""(testkey=testvalue)"")).setRequired(true));"
75975,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/ConfigurationDependencyTest.java,208,,"                props.put(""testkey"", ""testvalue"");"
75976,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/ConfigurationDependencyTest.java,208,,"                props.put(""testkey"", ""testvalue"");"
75977,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/ConfigurationDependencyTest.java,234,,"                Assert.fail(""Could not find the configured property."");"
75978,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/DiagnosticsTest.java,111,,"		List<MissingDependency> missingDependencies = graph.getMissingDependencies(""service"");"
75979,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/DiagnosticsTest.java,115,,"		assertTrue(graph.getMissingDependencies(""configuration"").isEmpty());"
75980,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX2875_ServiceDependencyWithoutServiceNameTest.java,49,,"        props.put(""provider"", ""provider1"");"
75981,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX4913_OptionalCallbackInvokedTwiceTest.java,49,,"        Dependency dep = m.createServiceDependency().setService(B.class).setRequired(false).setCallbacks(""bind"", ""unbind"");"
75982,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX4913_OptionalCallbackInvokedTwiceTest.java,49,,"        Dependency dep = m.createServiceDependency().setService(B.class).setRequired(false).setCallbacks(""bind"", ""unbind"");"
75983,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5238_TypeSafeConfigWithDefaultMethodTest.java,85,,"        String getTestkey2() default ""123"";"
75984,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5238_TypeSafeConfigWithDefaultMethodTest.java,121,,"        			Assert.fail(""Could not find the configured property."");"
75985,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5305_DirectInjectionShouldSeeServiceUpdates.java,60,,"        configurator.update(""provider"", ""message1"");          "
75986,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5355_ConfigTypesWithDotsTest.java,72,,"        public default String foo__param2() { return ""default value2""; } // foo__param2() -> foo_param2"
75987,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5355_ConfigTypesWithDotsTest.java,75,,"        public default String[] getFooBar5() { return new String[] {""default value1"", ""default value2""}; }"
75988,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5355_ConfigTypesWithDotsTest.java,77,,"        public default SortedMap<String, String> getFooBar7() { TreeMap<String, String> defMap = new TreeMap<>(); defMap.put(""key"", ""default""); return defMap; }"
75989,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FELIX5630_NullObjectTest.java,98,,"		@SuppressWarnings(""unused"")"
75990,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/FactoryConfigurationAdapterTest.java,54,,"        FactoryConfigurationCreator configurator = new FactoryConfigurationCreator(m_ensure, ""MyFactoryPid"", 1, ""key"", ""value1"");"
75991,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/InstanceBoundDependencyTest.java,55,,"        s1_1_props.put(""name"", ""s1_1"");"
75992,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/InstanceBoundDependencyTest.java,55,,"        s1_1_props.put(""name"", ""s1_1"");"
75993,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/MultipleExtraDependenciesTest.java,67,,"         h.put(""type"", ""xx"");"
75994,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/RemovedDependencyTest.java,55,,"        props.put(""name"", ""provider1"");"
75995,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/RemovedDependencyTest.java,55,,"        props.put(""name"", ""provider1"");"
75996,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/RemovedDependencyTest.java,58,,"        props.put(""name"", ""provider2"");"
75997,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/RemovedDependencyTest.java,61,,"        props.put(""name"", ""provider3"");"
75998,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/ScopedAspectAdaptersServiceTest.java,41,,"            .setFactory(this, ""createServiceConsumer"")"
75999,./TargetProjects/felix-dev/dependencymanager/org.apache.felix.dependencymanager.itest/src/org/apache/felix/dm/itest/api/ScopedAspectAdaptersServiceTest.java,42,,"            .add(m.createServiceDependency().setService(Service.class).setRequired(true).setCallbacks(""bind"", null));"
