Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,{,"switch (LA(1)) {
case '.':
{
    match('.');
{
      _loop364:       do {
        if (((LA(1) >= '0' && LA(1) <= '9'))) {
          mDIGIT(false);
        }
 else {
          break _loop364;
        }
      }
 while (true);
    }
{
switch (LA(1)) {
case 'E':
case 'e':
{
{
{
switch (LA(1)) {
case 'e':
{
                  match('e');
                  break;
                }
case 'E':
{
                match('E');
                break;
              }
default :
{
              throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
            }
        }
      }
{
switch (LA(1)) {
case '+':
{
            match('+');
            break;
          }
case '-':
{
          match('-');
          break;
        }
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
        break;
      }
default :
{
      throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
    }
}
}
{
int _cnt370=0;
_loop370: do {
  if (((LA(1) >= '0' && LA(1) <= '9'))) {
    mDIGIT(false);
  }
 else {
    if (_cnt370 >= 1) {
      break _loop370;
    }
 else {
      throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
    }
  }
  _cnt370++;
}
 while (true);
}
}
_ttype=FLOAT;
break;
}
case 'D':
case 'd':
{
{
switch (LA(1)) {
case 'd':
{
match('d');
break;
}
case 'D':
{
match('D');
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
_ttype=FIXED;
break;
}
default :
{
_ttype=FLOAT;
}
}
}
break;
}
case 'E':
case 'e':
{
{
switch (LA(1)) {
case 'e':
{
match('e');
break;
}
case 'E':
{
match('E');
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
{
switch (LA(1)) {
case '+':
{
match('+');
break;
}
case '-':
{
match('-');
break;
}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
{
int _cnt375=0;
_loop375: do {
if (((LA(1) >= '0' && LA(1) <= '9'))) {
mDIGIT(false);
}
 else {
if (_cnt375 >= 1) {
break _loop375;
}
 else {
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
_cnt375++;
}
 while (true);
}
_ttype=FLOAT;
break;
}
case 'D':
case 'd':
{
{
switch (LA(1)) {
case 'd':
{
match('d');
break;
}
case 'D':
{
match('D');
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
_ttype=FIXED;
break;
}
default :
{
}
}
",0,0,0,72,
2,{,"switch (LA(1)) {
case 'E':
case 'e':
{
{
switch (LA(1)) {
case 'e':
{
          match('e');
          break;
        }
case 'E':
{
        match('E');
        break;
      }
default :
{
      throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
    }
}
}
{
switch (LA(1)) {
case '+':
{
    match('+');
    break;
  }
case '-':
{
  match('-');
  break;
}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
{
int _cnt389=0;
_loop389: do {
if (((LA(1) >= '0' && LA(1) <= '9'))) {
mDIGIT(false);
}
 else {
if (_cnt389 >= 1) {
break _loop389;
}
 else {
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
_cnt389++;
}
 while (true);
}
break;
}
case 'D':
case 'd':
{
{
switch (LA(1)) {
case 'd':
{
match('d');
break;
}
case 'D':
{
match('D');
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
_ttype=FIXED;
break;
}
default :
{
}
}
",0,0,0,,
3,{,"switch (entry.getKey()) {
case TOKENIZATION_ENABLE_STEMMING:
{
    boolean bool=Boolean.parseBoolean(entry.getValue());
    optionsBuilder=optionsBuilder.stemTerms(bool);
    break;
  }
case TOKENIZATION_SKIP_STOP_WORDS:
{
  boolean bool=Boolean.parseBoolean(entry.getValue());
  optionsBuilder=optionsBuilder.ignoreStopTerms(bool);
  break;
}
case TOKENIZATION_LOCALE:
{
Locale locale=new Locale(entry.getValue());
optionsBuilder=optionsBuilder.useLocale(locale);
break;
}
case TOKENIZATION_NORMALIZE_UPPERCASE:
{
boolean bool=Boolean.parseBoolean(entry.getValue());
optionsBuilder=optionsBuilder.alwaysUpperCaseTerms(bool);
break;
}
case TOKENIZATION_NORMALIZE_LOWERCASE:
{
boolean bool=Boolean.parseBoolean(entry.getValue());
optionsBuilder=optionsBuilder.alwaysLowerCaseTerms(bool);
break;
}
default :
{
}
}
",0,0,0,,
4,Files.createDirectories(file.toPath());{,"Files.createDirectories(file.toPath());
",0,0,4,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
5,{,"switch (LA(1)) {
case '.':
{
    match('.');
{
      _loop367:       do {
        if (((LA(1) >= '0' && LA(1) <= '9'))) {
          mDIGIT(false);
        }
 else {
          break _loop367;
        }
      }
 while (true);
    }
{
switch (LA(1)) {
case 'E':
case 'e':
{
{
{
switch (LA(1)) {
case 'e':
{
                  match('e');
                  break;
                }
case 'E':
{
                match('E');
                break;
              }
default :
{
              throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
            }
        }
      }
{
switch (LA(1)) {
case '+':
{
            match('+');
            break;
          }
case '-':
{
          match('-');
          break;
        }
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
        break;
      }
default :
{
      throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
    }
}
}
{
int _cnt373=0;
_loop373: do {
  if (((LA(1) >= '0' && LA(1) <= '9'))) {
    mDIGIT(false);
  }
 else {
    if (_cnt373 >= 1) {
      break _loop373;
    }
    throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
  }
  _cnt373++;
}
 while (true);
}
}
_ttype=FLOAT;
break;
}
case 'D':
case 'd':
{
{
switch (LA(1)) {
case 'd':
{
match('d');
break;
}
case 'D':
{
match('D');
break;
}
default :
{
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
}
}
_ttype=FIXED;
break;
}
default :
{
_ttype=FLOAT;
}
}
}
break;
}
case 'E':
case 'e':
{
{
switch (LA(1)) {
case 'e':
{
match('e');
break;
}
case 'E':
{
match('E');
break;
}
default :
{
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
}
}
{
switch (LA(1)) {
case '+':
{
match('+');
break;
}
case '-':
{
match('-');
break;
}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
break;
}
default :
{
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
}
}
{
int _cnt378=0;
_loop378: do {
if (((LA(1) >= '0' && LA(1) <= '9'))) {
mDIGIT(false);
}
 else {
if (_cnt378 >= 1) {
break _loop378;
}
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
_cnt378++;
}
 while (true);
}
_ttype=FLOAT;
break;
}
case 'D':
case 'd':
{
{
switch (LA(1)) {
case 'd':
{
match('d');
break;
}
case 'D':
{
match('D');
break;
}
default :
{
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
}
}
_ttype=FIXED;
break;
}
default :
{
}
}
",0,0,0,,
6,{,"switch (LA(1)) {
case 'E':
case 'e':
{
{
switch (LA(1)) {
case 'e':
{
          match('e');
          break;
        }
case 'E':
{
        match('E');
        break;
      }
default :
{
      throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
    }
}
}
{
switch (LA(1)) {
case '+':
{
    match('+');
    break;
  }
case '-':
{
  match('-');
  break;
}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
break;
}
default :
{
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
}
}
{
int _cnt392=0;
_loop392: do {
if (((LA(1) >= '0' && LA(1) <= '9'))) {
mDIGIT(false);
}
 else {
if (_cnt392 >= 1) {
break _loop392;
}
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
_cnt392++;
}
 while (true);
}
break;
}
case 'D':
case 'd':
{
{
switch (LA(1)) {
case 'd':
{
match('d');
break;
}
case 'D':
{
match('D');
break;
}
default :
{
throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
}
}
_ttype=FIXED;
break;
}
default :
{
}
}
",0,0,0,,
7,{,"if ((databaseWrapper != null) && (databaseWrapper.getDatabase() != null)) {
  OlcDatabaseConfig database=databaseWrapper.getDatabase();
  database.clearOlcSuffix();
  List<DnWrapper> dnWrappers=suffixDnTableWidget.getElements();
  Dn[] suffixDns=new Dn[dnWrappers.size()];
  int pos=0;
  for (  DnWrapper dnWrapper : dnWrappers) {
    suffixDns[pos++]=dnWrapper.getDn();
  }
  database.addOlcSuffix(suffixDns);
  database.setOlcRootDN(rootDnEntryWidget.getDn());
  String rootPassword=rootPasswordWidget.getPasswordAsString();
  if (Strings.isNotEmpty(rootPassword)) {
    database.setOlcRootPW(rootPassword);
  }
  if (databaseSpecificDetailsBlock != null) {
    databaseSpecificDetailsBlock.commit(onSave);
  }
  if (browserConnection.getSchema().hasAttributeTypeDescription(""olcDisabled"")) {
    database.setOlcDisabled(disabledBooleanWithDefaultWidget.getValue());
  }
  if ((database instanceof OlcHdbConfig) || (database instanceof OlcBdbConfig)) {
  }
{
  }
}
",0,0,0,,
8,{,"switch (event.getType()) {
case CHILD_ADDED:
{
    JobID jobId=fromEvent(event);
    LOG.debug(""Received CHILD_ADDED event notification for job {}"",jobId);
    jobGraphListener.onAddedJobGraph(jobId);
  }
break;
case CHILD_UPDATED:
{
}
break;
case CHILD_REMOVED:
{
JobID jobId=fromEvent(event);
LOG.debug(""Received CHILD_REMOVED event notification for job {}"",jobId);
jobGraphListener.onRemovedJobGraph(jobId);
}
break;
case CONNECTION_SUSPENDED:
{
LOG.warn(""ZooKeeper connection SUSPENDING. Changes to the submitted job "" + ""graphs are not monitored (temporarily)."");
}
break;
case CONNECTION_LOST:
{
LOG.warn(""ZooKeeper connection LOST. Changes to the submitted job "" + ""graphs are not monitored (permanently)."");
}
break;
case CONNECTION_RECONNECTED:
{
LOG.info(""ZooKeeper connection RECONNECTED. Changes to the submitted job "" + ""graphs are monitored again."");
}
break;
case INITIALIZED:
{
LOG.info(""JobGraphsPathCacheListener initialized"");
}
break;
}
",0,0,0,,
9,{,"try {
  if (resetLastPeekedEvents) {
    resetLastPeekedEvents();
    resetLastPeekedEvents=false;
  }
{
  }
  events=queue.peek(batchSize,batchTimeInterval);
}
 catch (InterruptedException e) {
  interrupted=true;
  sender.getCancelCriterion().checkCancelInProgress(e);
  continue;
}
 finally {
  if (interrupted) {
    Thread.currentThread().interrupt();
  }
}
",0,0,0,,
10,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 28:
{
    yybegin(MDSTART);
    return new Symbol(ParserSym.MUDECL,yytext());
  }
case 101:
break;
case 50:
{
yybegin(ATTRVALLIT_SQM);
CRcount++;
}
case 102:
break;
case 49:
{
yybegin(ATTRVALLIT_SQM);
NLcount++;
}
case 103:
break;
case 18:
{
yybegin(ATTRVAL);
}
case 104:
break;
case 32:
{
yybegin(COMMENT);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 105:
break;
case 43:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 106:
break;
case 98:
{
yybegin(CDATA);
appendText(LexerTextType.ENTITY_SEMI);
}
case 107:
break;
case 62:
{
yybegin(CDATA_ENDTAG_START);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 108:
break;
case 96:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(true));
}
case 109:
break;
case 7:
{
yybegin(YYINITIAL);
appendText(LexerTextType.LINE_TERMINATOR);
CRcount++;
}
case 110:
break;
case 6:
{
yybegin(YYINITIAL);
appendText(LexerTextType.LINE_TERMINATOR);
NLcount++;
}
case 111:
break;
case 61:
{
yybegin(CDATA);
appendText(LexerTextType.TEXT);
}
case 112:
break;
case 59:
{
yybegin(CDATA);
NLcount++;
appendText(LexerTextType.LINE_TERMINATOR);
}
case 113:
break;
case 31:
{
yybegin(MD);
CRcount++;
}
case 114:
break;
case 30:
{
yybegin(MD);
NLcount++;
}
case 115:
break;
case 9:
{
yybegin(ATTR);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 116:
break;
case 38:
{
yybegin(ATTREQUALS);
}
case 117:
break;
case 100:
{
if (yytext().equalsIgnoreCase(currentCDATAClosingTag)) {
yypushback(yytext().length() - 2);
yybegin(CDATA_ENDTAG_START);
String aux=buffer.toString();
if (aux.endsWith(""\r\n"")) {
aux=aux.substring(0,aux.length() - 2);
}
 else if (aux.endsWith(""\n"") || aux.endsWith(""\r"")) {
aux=aux.substring(0,aux.length() - 1);
}
flushBufferedText();
return new Symbol(ParserSym.TEXT,new HTMLText(aux,offsetCDATA,false,false));
}
 else {
yybegin(CDATA);
appendText(LexerTextType.TEXT);
}
}
case 118:
break;
case 85:
{
yybegin(CDATA);
CRNLcount++;
appendText(LexerTextType.LINE_TERMINATOR);
}
case 119:
break;
case 5:
{
yybegin(YYINITIAL);
appendText(LexerTextType.SPACE);
}
case 120:
break;
case 35:
{
yybegin(CHECK_IF_CDATA);
syncronizeSent=false;
return new Symbol(ParserSym.TAG_CLOSE,yychar,yyline,new Character(yytext().charAt(0)));
}
case 121:
break;
case 14:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.TAG_CLOSE,yychar,yyline,new Character(yytext().charAt(0)));
}
case 122:
break;
case 93:
{
yybegin(YYINITIAL);
appendText(LexerTextType.ENTITY_SEMI);
}
case 123:
break;
case 23:
{
yybegin(ENDTAG);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 124:
break;
case 74:
{
yybegin(ATTRVAL);
CRNLcount++;
}
case 125:
break;
case 1:
{
yybegin(COMMENT);
return new Symbol(ParserSym.COMM_CONTENT,yytext());
}
case 126:
break;
case 37:
{
yybegin(ATTREQUALS);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 127:
break;
case 17:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NUM,yytext());
}
case 128:
break;
case 88:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.EMPTY_TAG,yytext());
}
case 129:
break;
case 57:
{
yybegin(CDATA);
appendText(LexerTextType.TEXT);
}
case 130:
break;
case 81:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(false));
}
case 131:
break;
case 20:
{
yybegin(ATTRVAL);
CRcount++;
}
case 132:
break;
case 19:
{
yybegin(ATTRVAL);
NLcount++;
}
case 133:
break;
case 40:
{
yybegin(ATTREQUALS);
CRcount++;
}
case 134:
break;
case 10:
{
yybegin(ATTREQUALS);
return new Symbol(ParserSym.ATTR_NAME,yytext());
}
case 135:
break;
case 39:
{
yybegin(ATTREQUALS);
NLcount++;
}
case 136:
break;
case 64:
{
yypushback(yytext().length());
if (!syncronizeSent) {
syncronizeSent=true;
return new Symbol(ParserSym.SYNC,yytext());
}
if (cup.action_obj.isLastStartTagCreatedOk() && currentCDATAClosingTag != null) {
textState=LexerTextStateType.CDATA;
yybegin(CDATA);
}
 else {
yybegin(YYINITIAL);
}
}
case 137:
break;
case 75:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NMTK,replaceEntity(false));
}
case 138:
break;
case 65:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.LEXERR_EXPECTED_TAG_NAME,yytext());
}
case 139:
break;
case 91:
{
yybegin(TAG_IGNORE_ATTS);
CRNLcount++;
}
case 140:
break;
case 90:
{
yybegin(IGNORED_Q_TAG);
}
case 141:
break;
case 63:
{
yybegin(CDATA_ENDTAG_START);
return new Symbol(ParserSym.END_TAG_NAME,offsetCDATA,yyline,yytext());
}
case 142:
break;
case 70:
{
yybegin(YYINITIAL);
appendText(LexerTextType.LINE_TERMINATOR);
CRNLcount++;
}
case 143:
break;
case 82:
{
yybegin(ATTRVALLIT_SQM);
CRNLcount++;
}
case 144:
break;
case 79:
{
yybegin(ATTREQUALS);
CRNLcount++;
}
case 145:
break;
case 72:
{
yybegin(ATTR);
CRNLcount++;
}
case 146:
break;
case 33:
{
yybegin(STARTTAG);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 147:
break;
case 71:
{
yybegin(YYINITIAL);
appendText(LexerTextType.ENTITY_NO_SEMI);
}
case 148:
break;
case 2:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.ATTRVAL_LIT,yytext());
}
case 149:
break;
case 60:
{
yybegin(CDATA);
CRcount++;
appendText(LexerTextType.LINE_TERMINATOR);
}
case 150:
break;
case 83:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(false));
}
case 151:
break;
case 99:
{
yybegin(ENDTAG);
String tagName=yytext().substring(2);
return new Symbol(ParserSym.END_TAG_NAME,yychar,yyline,tagName);
}
case 152:
break;
case 76:
{
yybegin(ENDTAG);
CRNLcount++;
}
case 153:
break;
case 53:
{
yybegin(YYINITIAL);
yypushback(yytext().length());
return new Symbol(ParserSym.TAG_SLASH_CLOSE,yytext());
}
case 154:
break;
case 16:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NMTK,yytext());
}
case 155:
break;
case 22:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.SQM,new Character(yytext().charAt(0)));
}
case 156:
break;
case 80:
{
yybegin(ATTRVALLIT_DQM);
CRNLcount++;
}
case 157:
break;
case 77:
{
yybegin(COMMENT);
return new Symbol(ParserSym.COMM,yytext());
}
case 158:
break;
case 47:
{
yybegin(ATTR);
return new Symbol(ParserSym.DQM,new Character(yytext().charAt(0)));
}
case 159:
break;
case 73:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NUMTK,yytext());
}
case 160:
break;
case 86:
{
yybegin(CDATA);
appendText(LexerTextType.ENTITY_NO_SEMI);
terminatorSkipped=false;
}
case 161:
break;
case 36:
{
yybegin(TAG_IGNORE_ATTS);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 162:
break;
case 4:
{
yybegin(YYINITIAL);
appendText(LexerTextType.TEXT);
}
case 163:
break;
case 56:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.TAG_SLASH_CLOSE,yytext());
}
case 164:
break;
case 94:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NMTK,replaceEntity(true));
}
case 165:
break;
case 41:
{
yybegin(ATTRVAL);
return new Symbol(ParserSym.EQUALS,new Character(yytext().charAt(0)));
}
case 166:
break;
case 15:
{
yybegin(TAG_TRAILINGWS);
}
case 167:
break;
case 26:
{
yybegin(ENDTAG);
CRcount++;
}
case 168:
break;
case 95:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.TAG_COMM_CLOSE,yytext());
}
case 169:
break;
case 24:
{
yybegin(ENDTAG);
}
case 170:
break;
case 25:
{
yybegin(ENDTAG);
NLcount++;
}
case 171:
break;
case 44:
{
yybegin(ATTRVALLIT_DQM);
}
case 172:
break;
case 13:
{
yybegin(ATTR);
CRcount++;
}
case 173:
break;
case 89:
{
yybegin(MD);
return new Symbol(ParserSym.TAG_OPEN_EXM,yychar,yyline,yytext());
}
case 174:
break;
case 12:
{
yybegin(ATTR);
NLcount++;
}
case 175:
break;
case 58:
{
yybegin(CDATA);
appendText(LexerTextType.SPACE);
}
case 176:
break;
case 92:
{
yybegin(YYINITIAL);
}
case 177:
break;
case 84:
{
yybegin(TAG_TRAILINGWS);
CRNLcount++;
}
case 178:
break;
case 46:
{
yybegin(ATTRVALLIT_DQM);
CRcount++;
}
case 179:
break;
case 45:
{
yybegin(ATTRVALLIT_DQM);
NLcount++;
}
case 180:
break;
case 87:
{
String tagName=yytext().substring(1).toLowerCase();
Element e=dtd.elementHash.get(tagName);
if (e != null && ((e.getType() == DTDConstants.CDATA) || e.isScript())) {
currentCDATAClosingTag=""</"" + tagName + "">"";
yybegin(TAG_IGNORE_ATTS);
}
 else {
if (isPreformatted(tagName)) {
preEntryCounter++;
textState=LexerTextStateType.PREFORMATTED;
}
currentCDATAClosingTag=null;
yybegin(STARTTAG);
}
return new Symbol(ParserSym.TAG_NAME,yychar,yyline,yytext().substring(1,yytext().length()));
}
case 181:
break;
case 3:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.ATTRVAL_LIT,yytext());
}
case 182:
break;
case 68:
{
yybegin(TAG_IGNORE_ATTS);
CRcount++;
}
case 183:
break;
case 29:
{
yybegin(MD);
}
case 184:
break;
case 55:
{
yybegin(TAG_TRAILINGWS);
CRcount++;
}
case 185:
break;
case 42:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.DQM,new Character(yytext().charAt(0)));
}
case 186:
break;
case 67:
{
yybegin(TAG_IGNORE_ATTS);
NLcount++;
}
case 187:
break;
case 54:
{
yybegin(TAG_TRAILINGWS);
NLcount++;
}
case 188:
break;
case 21:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.DQM,new Character(yytext().charAt(0)));
}
case 189:
break;
case 27:
{
yybegin(MD);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 190:
break;
case 11:
{
yybegin(ATTR);
}
case 191:
break;
case 8:
{
HTMLText textToken=flushBufferedText();
yypushback(1);
yybegin(YYINITIAL_NOTEXT);
if (textToken != null) {
return new Symbol(ParserSym.TEXT,textToken);
}
}
case 192:
break;
case 48:
{
yybegin(ATTRVALLIT_SQM);
}
case 193:
break;
case 51:
{
yybegin(ATTR);
return new Symbol(ParserSym.SQM,new Character(yytext().charAt(0)));
}
case 194:
break;
case 97:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(true));
}
case 195:
break;
case 66:
{
yybegin(TAG_IGNORE_ATTS);
}
case 196:
break;
case 52:
{
yybegin(MDSTART);
return new Symbol(ParserSym.MUDECL_CONTENT,yytext());
}
case 197:
break;
case 78:
{
yybegin(MD);
CRNLcount++;
}
case 198:
break;
case 34:
{
yybegin(CHECK_IF_CDATA);
return new Symbol(ParserSym.TAG_OPEN,new Character(yytext().charAt(0)));
}
case 199:
break;
case 69:
{
}
case 200:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
{
if (buffer.length() > 0) {
String aux=buffer.toString();
buffer=new StringBuilder();
return new Symbol(ParserSym.TEXT,new HTMLText(aux,offsetCDATA,false,false));
}
if (yystate() == CDATA) {
yybegin(YYINITIAL);
return new Symbol(ParserSym.EOF_LITERAL,currentCDATAClosingTag.substring(2,currentCDATAClosingTag.length() - 1));
}
return new Symbol(ParserSym.EOF,yytext());
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
11,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 28:
{
    yybegin(MDSTART);
    return new Symbol(ParserSym.MUDECL,yytext());
  }
case 101:
break;
case 50:
{
yybegin(ATTRVALLIT_SQM);
CRcount++;
}
case 102:
break;
case 49:
{
yybegin(ATTRVALLIT_SQM);
NLcount++;
}
case 103:
break;
case 18:
{
yybegin(ATTRVAL);
}
case 104:
break;
case 32:
{
yybegin(COMMENT);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 105:
break;
case 43:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 106:
break;
case 98:
{
yybegin(CDATA);
appendText(LexerTextType.ENTITY_SEMI);
}
case 107:
break;
case 62:
{
yybegin(CDATA_ENDTAG_START);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 108:
break;
case 96:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(true));
}
case 109:
break;
case 7:
{
yybegin(YYINITIAL);
appendText(LexerTextType.LINE_TERMINATOR);
CRcount++;
}
case 110:
break;
case 6:
{
yybegin(YYINITIAL);
appendText(LexerTextType.LINE_TERMINATOR);
NLcount++;
}
case 111:
break;
case 61:
{
yybegin(CDATA);
appendText(LexerTextType.TEXT);
}
case 112:
break;
case 59:
{
yybegin(CDATA);
NLcount++;
appendText(LexerTextType.LINE_TERMINATOR);
}
case 113:
break;
case 31:
{
yybegin(MD);
CRcount++;
}
case 114:
break;
case 30:
{
yybegin(MD);
NLcount++;
}
case 115:
break;
case 9:
{
yybegin(ATTR);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 116:
break;
case 38:
{
yybegin(ATTREQUALS);
}
case 117:
break;
case 100:
{
if (yytext().equalsIgnoreCase(currentCDATAClosingTag)) {
yypushback(yytext().length() - 2);
yybegin(CDATA_ENDTAG_START);
String aux=buffer.toString();
if (aux.endsWith(""\r\n"")) {
aux=aux.substring(0,aux.length() - 2);
}
 else if (aux.endsWith(""\n"") || aux.endsWith(""\r"")) {
aux=aux.substring(0,aux.length() - 1);
}
flushBufferedText();
return new Symbol(ParserSym.TEXT,new HTMLText(aux,offsetCDATA,false,false));
}
 else {
yybegin(CDATA);
appendText(LexerTextType.TEXT);
}
}
case 118:
break;
case 85:
{
yybegin(CDATA);
CRNLcount++;
appendText(LexerTextType.LINE_TERMINATOR);
}
case 119:
break;
case 5:
{
yybegin(YYINITIAL);
appendText(LexerTextType.SPACE);
}
case 120:
break;
case 35:
{
yybegin(CHECK_IF_CDATA);
syncronizeSent=false;
return new Symbol(ParserSym.TAG_CLOSE,yychar,yyline,new Character(yytext().charAt(0)));
}
case 121:
break;
case 14:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.TAG_CLOSE,yychar,yyline,new Character(yytext().charAt(0)));
}
case 122:
break;
case 93:
{
yybegin(YYINITIAL);
appendText(LexerTextType.ENTITY_SEMI);
}
case 123:
break;
case 23:
{
yybegin(ENDTAG);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 124:
break;
case 74:
{
yybegin(ATTRVAL);
CRNLcount++;
}
case 125:
break;
case 1:
{
yybegin(COMMENT);
return new Symbol(ParserSym.COMM_CONTENT,yytext());
}
case 126:
break;
case 37:
{
yybegin(ATTREQUALS);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 127:
break;
case 17:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NUM,yytext());
}
case 128:
break;
case 88:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.EMPTY_TAG,yytext());
}
case 129:
break;
case 57:
{
yybegin(CDATA);
appendText(LexerTextType.TEXT);
}
case 130:
break;
case 81:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(false));
}
case 131:
break;
case 20:
{
yybegin(ATTRVAL);
CRcount++;
}
case 132:
break;
case 19:
{
yybegin(ATTRVAL);
NLcount++;
}
case 133:
break;
case 40:
{
yybegin(ATTREQUALS);
CRcount++;
}
case 134:
break;
case 10:
{
yybegin(ATTREQUALS);
return new Symbol(ParserSym.ATTR_NAME,yytext());
}
case 135:
break;
case 39:
{
yybegin(ATTREQUALS);
NLcount++;
}
case 136:
break;
case 64:
{
yypushback(yytext().length());
if (!syncronizeSent) {
syncronizeSent=true;
return new Symbol(ParserSym.SYNC,yytext());
}
if (cup.action_obj.isLastStartTagCreatedOk() && currentCDATAClosingTag != null) {
textState=LexerTextStateType.CDATA;
yybegin(CDATA);
}
 else {
yybegin(YYINITIAL);
}
}
case 137:
break;
case 75:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NMTK,replaceEntity(false));
}
case 138:
break;
case 65:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.LEXERR_EXPECTED_TAG_NAME,yytext());
}
case 139:
break;
case 91:
{
yybegin(TAG_IGNORE_ATTS);
CRNLcount++;
}
case 140:
break;
case 90:
{
yybegin(IGNORED_Q_TAG);
}
case 141:
break;
case 63:
{
yybegin(CDATA_ENDTAG_START);
return new Symbol(ParserSym.END_TAG_NAME,offsetCDATA,yyline,yytext());
}
case 142:
break;
case 70:
{
yybegin(YYINITIAL);
appendText(LexerTextType.LINE_TERMINATOR);
CRNLcount++;
}
case 143:
break;
case 82:
{
yybegin(ATTRVALLIT_SQM);
CRNLcount++;
}
case 144:
break;
case 79:
{
yybegin(ATTREQUALS);
CRNLcount++;
}
case 145:
break;
case 72:
{
yybegin(ATTR);
CRNLcount++;
}
case 146:
break;
case 33:
{
yybegin(STARTTAG);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 147:
break;
case 71:
{
yybegin(YYINITIAL);
appendText(LexerTextType.ENTITY_NO_SEMI);
}
case 148:
break;
case 2:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.ATTRVAL_LIT,yytext());
}
case 149:
break;
case 60:
{
yybegin(CDATA);
CRcount++;
appendText(LexerTextType.LINE_TERMINATOR);
}
case 150:
break;
case 83:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(false));
}
case 151:
break;
case 99:
{
yybegin(ENDTAG);
String tagName=yytext().substring(2);
return new Symbol(ParserSym.END_TAG_NAME,yychar,yyline,tagName);
}
case 152:
break;
case 76:
{
yybegin(ENDTAG);
CRNLcount++;
}
case 153:
break;
case 53:
{
yybegin(YYINITIAL);
yypushback(yytext().length());
return new Symbol(ParserSym.TAG_SLASH_CLOSE,yytext());
}
case 154:
break;
case 16:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NMTK,yytext());
}
case 155:
break;
case 22:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.SQM,new Character(yytext().charAt(0)));
}
case 156:
break;
case 80:
{
yybegin(ATTRVALLIT_DQM);
CRNLcount++;
}
case 157:
break;
case 77:
{
yybegin(COMMENT);
return new Symbol(ParserSym.COMM,yytext());
}
case 158:
break;
case 47:
{
yybegin(ATTR);
return new Symbol(ParserSym.DQM,new Character(yytext().charAt(0)));
}
case 159:
break;
case 73:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NUMTK,yytext());
}
case 160:
break;
case 86:
{
yybegin(CDATA);
appendText(LexerTextType.ENTITY_NO_SEMI);
terminatorSkipped=false;
}
case 161:
break;
case 36:
{
yybegin(TAG_IGNORE_ATTS);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 162:
break;
case 4:
{
yybegin(YYINITIAL);
appendText(LexerTextType.TEXT);
}
case 163:
break;
case 56:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.TAG_SLASH_CLOSE,yytext());
}
case 164:
break;
case 94:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.ATTRVAL_NMTK,replaceEntity(true));
}
case 165:
break;
case 41:
{
yybegin(ATTRVAL);
return new Symbol(ParserSym.EQUALS,new Character(yytext().charAt(0)));
}
case 166:
break;
case 15:
{
yybegin(TAG_TRAILINGWS);
}
case 167:
break;
case 26:
{
yybegin(ENDTAG);
CRcount++;
}
case 168:
break;
case 95:
{
yybegin(YYINITIAL);
return new Symbol(ParserSym.TAG_COMM_CLOSE,yytext());
}
case 169:
break;
case 24:
{
yybegin(ENDTAG);
}
case 170:
break;
case 25:
{
yybegin(ENDTAG);
NLcount++;
}
case 171:
break;
case 44:
{
yybegin(ATTRVALLIT_DQM);
}
case 172:
break;
case 13:
{
yybegin(ATTR);
CRcount++;
}
case 173:
break;
case 89:
{
yybegin(MD);
return new Symbol(ParserSym.TAG_OPEN_EXM,yychar,yyline,yytext());
}
case 174:
break;
case 12:
{
yybegin(ATTR);
NLcount++;
}
case 175:
break;
case 58:
{
yybegin(CDATA);
appendText(LexerTextType.SPACE);
}
case 176:
break;
case 92:
{
yybegin(YYINITIAL);
}
case 177:
break;
case 84:
{
yybegin(TAG_TRAILINGWS);
CRNLcount++;
}
case 178:
break;
case 46:
{
yybegin(ATTRVALLIT_DQM);
CRcount++;
}
case 179:
break;
case 45:
{
yybegin(ATTRVALLIT_DQM);
NLcount++;
}
case 180:
break;
case 87:
{
String tagName=yytext().substring(1).toLowerCase();
Element e=dtd.elementHash.get(tagName);
if (e != null && ((e.getType() == DTDConstants.CDATA) || e.isScript())) {
currentCDATAClosingTag=""</"" + tagName + "">"";
yybegin(TAG_IGNORE_ATTS);
}
 else {
if (isPreformatted(tagName)) {
preEntryCounter++;
textState=LexerTextStateType.PREFORMATTED;
}
currentCDATAClosingTag=null;
yybegin(STARTTAG);
}
return new Symbol(ParserSym.TAG_NAME,yychar,yyline,yytext().substring(1,yytext().length()));
}
case 181:
break;
case 3:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.ATTRVAL_LIT,yytext());
}
case 182:
break;
case 68:
{
yybegin(TAG_IGNORE_ATTS);
CRcount++;
}
case 183:
break;
case 29:
{
yybegin(MD);
}
case 184:
break;
case 55:
{
yybegin(TAG_TRAILINGWS);
CRcount++;
}
case 185:
break;
case 42:
{
yybegin(ATTRVALSTART);
return new Symbol(ParserSym.DQM,new Character(yytext().charAt(0)));
}
case 186:
break;
case 67:
{
yybegin(TAG_IGNORE_ATTS);
NLcount++;
}
case 187:
break;
case 54:
{
yybegin(TAG_TRAILINGWS);
NLcount++;
}
case 188:
break;
case 21:
{
yybegin(ATTRVALLIT_DQM);
return new Symbol(ParserSym.DQM,new Character(yytext().charAt(0)));
}
case 189:
break;
case 27:
{
yybegin(MD);
return new Symbol(ParserSym.LEXERR,yytext());
}
case 190:
break;
case 11:
{
yybegin(ATTR);
}
case 191:
break;
case 8:
{
HTMLText textToken=flushBufferedText();
yypushback(1);
yybegin(YYINITIAL_NOTEXT);
if (textToken != null) {
return new Symbol(ParserSym.TEXT,textToken);
}
}
case 192:
break;
case 48:
{
yybegin(ATTRVALLIT_SQM);
}
case 193:
break;
case 51:
{
yybegin(ATTR);
return new Symbol(ParserSym.SQM,new Character(yytext().charAt(0)));
}
case 194:
break;
case 97:
{
yybegin(ATTRVALLIT_SQM);
return new Symbol(ParserSym.ATTRVAL_LIT,replaceEntity(true));
}
case 195:
break;
case 66:
{
yybegin(TAG_IGNORE_ATTS);
}
case 196:
break;
case 52:
{
yybegin(MDSTART);
return new Symbol(ParserSym.MUDECL_CONTENT,yytext());
}
case 197:
break;
case 78:
{
yybegin(MD);
CRNLcount++;
}
case 198:
break;
case 34:
{
yybegin(CHECK_IF_CDATA);
return new Symbol(ParserSym.TAG_OPEN,new Character(yytext().charAt(0)));
}
case 199:
break;
case 69:
{
}
case 200:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
{
if (buffer.length() > 0) {
String aux=buffer.toString();
buffer=new StringBuilder();
return new Symbol(ParserSym.TEXT,new HTMLText(aux,offsetCDATA,false,false));
}
if (yystate() == CDATA) {
yybegin(YYINITIAL);
return new Symbol(ParserSym.EOF_LITERAL,currentCDATAClosingTag.substring(2,currentCDATAClosingTag.length() - 1));
}
return new Symbol(ParserSym.EOF,yytext());
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
12,{,"switch (currChar) {
case 'y':
  if (!inQuotes) {
    if (firstYIndex < 0)     firstYIndex=currCharIndex;
    yCount++;
  }
break;
case '\'':
if (inQuotes) {
int nextCharIndex=currCharIndex + 1;
if ((nextCharIndex < patternLen) && ('\'' == formatPattern.charAt(nextCharIndex))) {
  currCharIndex++;
}
 else {
  inQuotes=false;
}
}
 else {
inQuotes=true;
}
default :
{
}
}
",0,0,0,,
13,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 32:
{
    return PHPTokenId.UNKNOWN_TOKEN;
  }
case 173:
break;
case 105:
{
return PHPTokenId.PHP_FALSE;
}
case 174:
break;
case 26:
{
yypushback(1);
yybegin(ST_PHP_NOWDOC);
}
case 175:
break;
case 36:
{
String yytext=yytext();
switch (yytext.charAt(yytext.length() - 1)) {
case '?':
case '%':
yypushback(1);
break;
default :
popState();
}
return PHPTokenId.PHP_LINE_COMMENT;
}
case 176:
break;
case 84:
{
yypushback(2);
return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
}
case 177:
break;
case 119:
{
return PHPTokenId.PHP_TYPE_MIXED;
}
case 178:
break;
case 68:
{
popState();
return PHPTokenId.PHPDOC_COMMENT_END;
}
case 179:
break;
case 144:
{
return PHPTokenId.PHP_INCLUDE;
}
case 180:
break;
case 163:
{
return PHPTokenId.PHP_ENDDECLARE;
}
case 181:
break;
case 38:
{
return PHPTokenId.UNKNOWN_TOKEN;
}
case 182:
break;
case 63:
{
if (isEndNowdoc()) {
String yytext=yytext();
int trailingNewlineOffset=(yytext.endsWith(""\n"") || yytext.endsWith(""\r"")) ? 2 : 0;
int lastIndexOfNewline=yytext.lastIndexOf('\n',yylength() - trailingNewlineOffset);
if (lastIndexOfNewline == -1) {
lastIndexOfNewline=yytext.lastIndexOf('\r',yylength() - trailingNewlineOffset);
}
int back=yylength() - lastIndexOfNewline - 1;
yypushback(back);
yybegin(ST_PHP_END_NOWDOC);
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
 else {
yypushback(1);
}
}
case 183:
break;
case 132:
{
return PHPTokenId.PHP_GLOBAL;
}
case 184:
break;
case 167:
{
return PHPTokenId.PHP__FUNCTION__;
}
case 185:
break;
case 18:
{
popState();
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
case 186:
break;
case 43:
{
if (shortTagsAllowed) {
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.PHP_OPENTAG;
}
 else {
return PHPTokenId.T_INLINE_HTML;
}
}
case 187:
break;
case 59:
{
yypushback(1);
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.PHP_CURLY_OPEN;
}
case 188:
break;
case 128:
{
return PHPTokenId.PHP_TYPE_OBJECT;
}
case 189:
break;
case 95:
{
return PHPTokenId.PHP_LIST;
}
case 190:
break;
case 104:
{
return PHPTokenId.PHP_EMPTY;
}
case 191:
break;
case 14:
{
pushState(ST_PHP_LINE_COMMENT);
return PHPTokenId.PHP_LINE_COMMENT;
}
case 192:
break;
case 100:
{
return PHPTokenId.PHP_CASE;
}
case 193:
break;
case 46:
{
return PHPTokenId.PHP_VARIABLE;
}
case 194:
break;
case 49:
{
yybegin(YYINITIAL);
if (yylength() > 2) {
yypushback(yylength() - 2);
}
stack.clear();
return PHPTokenId.PHP_CLOSETAG;
}
case 195:
break;
case 23:
{
int trailingNewLineLength=1;
int label_len=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
if (yytext().charAt(label_len - 1) == ';') {
label_len--;
back++;
}
if (isEndHeredoc()) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=label_len - indexOfHeredocId;
yypushback(back);
yybegin(ST_PHP_END_HEREDOC);
}
 else {
yypushback(yylength() - trailingNewLineLength);
yybegin(ST_PHP_HEREDOC);
}
}
case 196:
break;
case 8:
{
if (isInConst) {
isInConst=false;
parenBalanceInConst=0;
bracketBalanceInConst=0;
}
return PHPTokenId.PHP_SEMICOLON;
}
case 197:
break;
case 48:
{
if (aspTagsAllowed) {
yybegin(YYINITIAL);
stack.clear();
return PHPTokenId.PHP_CLOSETAG;
}
return PHPTokenId.UNKNOWN_TOKEN;
}
case 198:
break;
case 37:
{
return PHPTokenId.PHP_LINE_COMMENT;
}
case 199:
break;
case 92:
{
pushState(ST_PHP_DOC_COMMENT);
yypushback(yylength() - 3);
return PHPTokenId.PHPDOC_COMMENT_START;
}
case 200:
break;
case 146:
{
return PHPTokenId.PHP__FILE__;
}
case 201:
break;
case 110:
{
return PHPTokenId.PHP_ISSET;
}
case 202:
break;
case 53:
{
return PHPTokenId.PHP_IF;
}
case 203:
break;
case 60:
{
popState();
pushState(ST_PHP_LOOKING_FOR_PROPERTY);
return PHPTokenId.PHP_OBJECT_OPERATOR;
}
case 204:
break;
case 70:
{
if (aspTagsAllowed) {
yybegin(YYINITIAL);
stack.clear();
return PHPTokenId.PHP_CLOSETAG;
}
String text=yytext();
if (text.indexOf('\r') != -1 || text.indexOf('\n') != -1) {
popState();
}
return PHPTokenId.PHP_LINE_COMMENT;
}
case 205:
break;
case 51:
{
return PHPTokenId.PHP_AS;
}
case 206:
break;
case 24:
{
heredoc=null;
hereocLength=0;
yybegin(ST_PHP_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return PHPTokenId.PHP_HEREDOC_TAG_END;
}
case 207:
break;
case 171:
{
pushState(ST_HALTED_COMPILER);
return PHPTokenId.PHP_HALT_COMPILER;
}
case 208:
break;
case 80:
{
return PHPTokenId.PHP_USE;
}
case 209:
break;
case 113:
{
return PHPTokenId.PHP_TYPE_FLOAT;
}
case 210:
break;
case 170:
{
return PHPTokenId.PHP__NAMESPACE__;
}
case 211:
break;
case 69:
{
popState();
return PHPTokenId.PHP_LINE_COMMENT;
}
case 212:
break;
case 169:
{
return PHPTokenId.PHP_INCLUDE_ONCE;
}
case 213:
break;
case 157:
{
return PHPTokenId.PHP_NAMESPACE;
}
case 214:
break;
case 67:
{
popState();
return PHPTokenId.PHP_COMMENT_END;
}
case 215:
break;
case 151:
{
return PHPTokenId.PHP_ITERABLE;
}
case 216:
break;
case 108:
{
int bprefix=(yytext().charAt(0) != '<') ? 1 : 0;
int startString=3 + bprefix;
hereocLength=yylength() - bprefix - 3- 1- (yytext().charAt(yylength() - 2) == '\r' ? 1 : 0);
while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
startString++;
hereocLength--;
}
if (yytext().charAt(startString) == '""') {
hereocLength-=2;
startString++;
}
heredoc=yytext().substring(startString,hereocLength + startString);
yybegin(ST_PHP_START_HEREDOC);
return PHPTokenId.PHP_HEREDOC_TAG_START;
}
case 217:
break;
case 66:
{
popState();
String match=yytext();
String[] segments=match.split(""[ \n\r\t]+"");
int back=1;
if (segments.length > 1) {
int wsLength=yylength() - 1 - segments[0].length();
back+=wsLength;
}
yypushback(back);
return PHPTokenId.PHP_STRING;
}
case 218:
break;
case 40:
{
popState();
return PHPTokenId.T_INLINE_HTML;
}
case 219:
break;
case 30:
{
popState();
parenBalanceInScripting++;
return PHPTokenId.PHP_TOKEN;
}
case 220:
break;
case 6:
{
return PHPTokenId.PHP_OPERATOR;
}
case 221:
break;
case 11:
{
pushState(ST_PHP_BACKQUOTE);
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
case 222:
break;
case 56:
{
pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
return PHPTokenId.PHP_VARIABLE;
}
case 223:
break;
case 3:
{
return PHPTokenId.PHP_NUMBER;
}
case 224:
break;
case 81:
{
yypushback(1);
pushState(ST_PHP_VAR_OFFSET);
return PHPTokenId.PHP_VARIABLE;
}
case 225:
break;
case 141:
{
return PHPTokenId.PHP_REQUIRE;
}
case 226:
break;
case 143:
{
return PHPTokenId.PHP_DECLARE;
}
case 227:
break;
case 116:
{
return PHPTokenId.PHP_CLONE;
}
case 228:
break;
case 111:
{
return PHPTokenId.PHP_TRAIT;
}
case 229:
break;
case 58:
{
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.PHP_TOKEN;
}
case 230:
break;
case 75:
{
return PHPTokenId.PHP_NEW;
}
case 231:
break;
case 86:
{
yypushback(2);
return PHPTokenId.PHP_COMMENT;
}
case 232:
break;
case 65:
{
return PHPTokenId.PHP_OBJECT_OPERATOR;
}
case 233:
break;
case 19:
{
yypushback(1);
popState();
}
case 234:
break;
case 137:
{
return PHPTokenId.PHP_EXTENDS;
}
case 235:
break;
case 93:
{
return PHPTokenId.PHP_NULL;
}
case 236:
break;
case 102:
{
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.PHP_OPENTAG;
}
case 237:
break;
case 124:
{
return PHPTokenId.PHP_WHILE;
}
case 238:
break;
case 156:
{
return PHPTokenId.PHP_ENDSWITCH;
}
case 239:
break;
case 145:
{
return PHPTokenId.PHP_PRIVATE;
}
case 240:
break;
case 1:
{
return PHPTokenId.T_INLINE_HTML;
}
case 241:
break;
case 166:
{
return PHPTokenId.PHP_YIELD_FROM;
}
case 242:
break;
case 103:
{
return PHPTokenId.PHP_ENDIF;
}
case 243:
break;
case 33:
{
yypushback(1);
popState();
if (yylength() > 0) return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
}
case 244:
break;
case 101:
{
popState();
String yytext=yytext();
if (""true"".equalsIgnoreCase(yytext)) {
return PHPTokenId.PHP_TRUE;
}
 else if (""false"".equalsIgnoreCase(yytext)) {
return PHPTokenId.PHP_FALSE;
}
 else if (""null"".equalsIgnoreCase(yytext)) {
return PHPTokenId.PHP_NULL;
}
assert false : ""expected \""true\"", \""false\"", or \""null\"" but "" + ""\"""" + yytext + ""\"""";
yypushback(yylength());
}
case 245:
break;
case 129:
{
return PHPTokenId.PHP_STATIC;
}
case 246:
break;
case 142:
{
return PHPTokenId.PHP_DEFAULT;
}
case 247:
break;
case 17:
{
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
case 248:
break;
case 34:
{
popState();
return PHPTokenId.PHP_TOKEN;
}
case 249:
break;
case 71:
{
int index=firstWhitespaceIndexOf(yytext());
if (index == -1) {
yypushback(1);
}
 else {
yypushback(yylength() - index);
}
popState();
return PHPTokenId.PHP_STRING;
}
case 250:
break;
case 147:
{
return PHPTokenId.PHP__LINE__;
}
case 251:
break;
case 44:
{
pushState(ST_PHP_LOOKING_FOR_PROPERTY);
return PHPTokenId.PHP_OBJECT_OPERATOR;
}
case 252:
break;
case 88:
{
return PHPTokenId.PHP_EXIT;
}
case 253:
break;
case 42:
{
if (aspTagsAllowed) {
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.PHP_OPENTAG;
}
 else {
return PHPTokenId.T_INLINE_HTML;
}
}
case 254:
break;
case 47:
{
pushState(ST_PHP_COMMENT);
return PHPTokenId.PHP_COMMENT_START;
}
case 255:
break;
case 107:
{
return PHPTokenId.PHP_BREAK;
}
case 256:
break;
case 31:
{
if (parenBalanceInConst == 0 && bracketBalanceInConst == 0) {
isInConst=false;
}
yypushback(1);
popState();
}
case 257:
break;
case 22:
{
yypushback(1);
yybegin(ST_PHP_HEREDOC);
}
case 258:
break;
case 159:
{
return PHPTokenId.PHP_INSTEADOF;
}
case 259:
break;
case 118:
{
return PHPTokenId.PHP_MATCH;
}
case 260:
break;
case 25:
{
}
case 261:
break;
case 160:
{
return PHPTokenId.PHP_PROTECTED;
}
case 262:
break;
case 72:
{
String text=yytext();
if ((text.charAt(1) == '%' && aspTagsAllowed) || (text.charAt(1) == '?')) {
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
}
 else {
return PHPTokenId.T_INLINE_HTML;
}
}
case 263:
break;
case 41:
{
popState();
yypushback(1);
}
case 264:
break;
case 120:
{
return PHPTokenId.PHP_PRINT;
}
case 265:
break;
case 79:
{
return PHPTokenId.PHP_VAR;
}
case 266:
break;
case 172:
{
pushState(ST_PHP_IN_SCRIPTING);
return PHPTokenId.T_INLINE_HTML;
}
case 267:
break;
case 13:
{
if (isInConst) {
pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
}
 else if (parenBalanceInScripting > 0) {
pushState(ST_PHP_LOOKING_FOR_PARAMETER_NAME);
}
return PHPTokenId.PHP_TOKEN;
}
case 268:
break;
case 112:
{
return PHPTokenId.PHP_THROW;
}
case 269:
break;
case 133:
{
return PHPTokenId.PHP_PARENT;
}
case 270:
break;
case 131:
{
return PHPTokenId.PHP_SWITCH;
}
case 271:
break;
case 87:
{
yypushback(2);
return PHPTokenId.PHPDOC_COMMENT;
}
case 272:
break;
case 77:
{
return PHPTokenId.PHP_TYPE_INT;
}
case 273:
break;
case 122:
{
return PHPTokenId.PHP_CASTING;
}
case 274:
break;
case 50:
{
return PHPTokenId.PHP_TEXTUAL_OPERATOR;
}
case 275:
break;
case 39:
{
popState();
return PHPTokenId.WHITESPACE;
}
case 276:
break;
case 76:
{
return PHPTokenId.PHP_DIE;
}
case 277:
break;
case 155:
{
return PHPTokenId.PHP__CLASS__;
}
case 278:
break;
case 2:
{
yypushback(1);
pushState(ST_PHP_HIGHLIGHTING_ERROR);
}
case 279:
break;
case 117:
{
return PHPTokenId.PHP_CLASS;
}
case 280:
break;
case 139:
{
return PHPTokenId.PHP_FINALLY;
}
case 281:
break;
case 158:
{
return PHPTokenId.PHP_INTERFACE;
}
case 282:
break;
case 154:
{
return PHPTokenId.PHP__TRAIT__;
}
case 283:
break;
case 121:
{
return PHPTokenId.PHP_UNSET;
}
case 284:
break;
case 12:
{
return PHPTokenId.PHP_CURLY_OPEN;
}
case 285:
break;
case 28:
{
yypushback(1);
popState();
}
case 286:
break;
case 134:
{
return PHPTokenId.PHP_PUBLIC;
}
case 287:
break;
case 21:
{
int indexOfNewline=yytext().indexOf(""\r"");
if (indexOfNewline == -1) {
indexOfNewline=yytext().indexOf(""\n"");
}
if (indexOfNewline > 0) {
yypushback(yylength() - indexOfNewline);
}
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
case 288:
break;
case 168:
{
return PHPTokenId.PHP_REQUIRE_ONCE;
}
case 289:
break;
case 162:
{
return PHPTokenId.PHP_ENDFOREACH;
}
case 290:
break;
case 45:
{
return PHPTokenId.PHP_FN;
}
case 291:
break;
case 85:
{
return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
}
case 292:
break;
case 130:
{
return PHPTokenId.PHP_TYPE_STRING;
}
case 293:
break;
case 90:
{
return PHPTokenId.PHP_EVAL;
}
case 294:
break;
case 82:
{
popState();
pushState(ST_PHP_LOOKING_FOR_PROPERTY);
return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
}
case 295:
break;
case 97:
{
return PHPTokenId.PHP_GOTO;
}
case 296:
break;
case 114:
{
isInConst=true;
parenBalanceInConst=0;
bracketBalanceInConst=0;
pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
return PHPTokenId.PHP_CONST;
}
case 297:
break;
case 20:
{
popState();
return PHPTokenId.PHP_STRING;
}
case 298:
break;
case 150:
{
return PHPTokenId.PHP_ABSTRACT;
}
case 299:
break;
case 27:
{
heredoc=null;
hereocLength=0;
yybegin(ST_PHP_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return PHPTokenId.PHP_NOWDOC_TAG_END;
}
case 300:
break;
case 5:
{
if (""?"".equals(yytext())) {
pushState(ST_PHP_LOOKING_FOR_TRUE_FALSE_NULL);
}
 else if (""("".equals(yytext())) {
pushState(ST_PHP_LOOKING_FOR_PARAMETER_NAME);
}
if (isInConst) {
String text=yytext();
switch (text) {
case ""["":
bracketBalanceInConst++;
break;
case ""]"":
bracketBalanceInConst--;
break;
case ""("":
parenBalanceInConst++;
break;
case "")"":
parenBalanceInConst--;
break;
default :
break;
}
}
switch (yytext()) {
case ""("":
parenBalanceInScripting++;
break;
case "")"":
parenBalanceInScripting--;
break;
default :
break;
}
return PHPTokenId.PHP_TOKEN;
}
case 301:
break;
case 9:
{
pushState(ST_PHP_DOUBLE_QUOTES);
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
case 302:
break;
case 64:
{
if (isEndNowdoc()) {
int indexOfNowdocId=yytext().indexOf(heredoc);
int back=yylength() - indexOfNowdocId - heredoc.length();
yypushback(back);
heredoc=null;
hereocLength=0;
yybegin(ST_PHP_IN_SCRIPTING);
return PHPTokenId.PHP_NOWDOC_TAG_END;
}
 else {
yypushback(1);
yybegin(ST_PHP_NOWDOC);
}
}
case 303:
break;
case 91:
{
return PHPTokenId.PHP_ECHO;
}
case 304:
break;
case 106:
{
return PHPTokenId.PHP_FINAL;
}
case 305:
break;
case 161:
{
return PHPTokenId.PHP__METHOD__;
}
case 306:
break;
case 10:
{
return PHPTokenId.PHP_NS_SEPARATOR;
}
case 307:
break;
case 123:
{
return PHPTokenId.PHP_YIELD;
}
case 308:
break;
case 149:
{
pushState(ST_PHP_LOOKING_FOR_FUNCTION_NAME);
return PHPTokenId.PHP_FUNCTION;
}
case 309:
break;
case 136:
{
return PHPTokenId.PHP__DIR__;
}
case 310:
break;
case 4:
{
return PHPTokenId.PHP_STRING;
}
case 311:
break;
case 152:
{
return PHPTokenId.PHP_CONTINUE;
}
case 312:
break;
case 62:
{
int trailingNewLineLength=1;
if (isEndHeredoc()) {
String yytext=yytext();
int newlineLength=yytext.startsWith(""\r\n"") ? 2 : 1;
int back=yylength() - newlineLength;
yypushback(back);
yybegin(ST_PHP_END_HEREDOC);
}
 else {
char previousChar=' ';
int indexOfVariable=-1;
for (int i=0; i < yylength(); i++) {
char currentChar=yytext().charAt(i);
if (currentChar == '$' && previousChar == '{') {
indexOfVariable=i - 1;
break;
}
if (currentChar == '$' && previousChar != '\\') {
indexOfVariable=i;
break;
}
previousChar=currentChar;
}
if (indexOfVariable == -1) {
yypushback(trailingNewLineLength);
}
 else {
yypushback(yylength() - indexOfVariable);
return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
}
}
return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
}
case 313:
break;
case 165:
{
return PHPTokenId.PHP_IMPLEMENTS;
}
case 314:
break;
case 135:
{
int index=firstWhitespaceIndexOf(yytext());
if (index == -1) {
yypushback(2);
}
 else {
yypushback(yylength() - index);
}
popState();
String yytext=yytext();
if (""parent"".equalsIgnoreCase(yytext)) {
return PHPTokenId.PHP_PARENT;
}
 else if (""self"".equalsIgnoreCase(yytext)) {
return PHPTokenId.PHP_SELF;
}
 else if (""static"".equalsIgnoreCase(yytext)) {
return PHPTokenId.PHP_STATIC;
}
assert false : ""expected \""parent\"", \""self\"", or \""static\"" but "" + ""\"""" + yytext() + ""\"""";
yypushback(yylength());
}
case 315:
break;
case 74:
{
pushState(ST_PHP_LOOKING_FOR_PROPERTY);
return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
}
case 316:
break;
case 78:
{
return PHPTokenId.PHP_TRY;
}
case 317:
break;
case 109:
{
return PHPTokenId.PHP_ARRAY;
}
case 318:
break;
case 7:
{
return PHPTokenId.WHITESPACE;
}
case 319:
break;
case 127:
{
return PHPTokenId.PHP_RETURN;
}
case 320:
break;
case 35:
{
return PHPTokenId.PHP_TOKEN;
}
case 321:
break;
case 16:
{
return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
}
case 322:
break;
case 115:
{
return PHPTokenId.PHP_CATCH;
}
case 323:
break;
case 153:
{
return PHPTokenId.PHP_CALLABLE;
}
case 324:
break;
case 83:
{
String text=yytext();
int lastIndexOfDollar=text.lastIndexOf('$');
yypushback(text.length() - lastIndexOfDollar);
return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
}
case 325:
break;
case 61:
{
return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
}
case 326:
break;
case 164:
{
return PHPTokenId.PHP_INSTANCEOF;
}
case 327:
break;
case 140:
{
int bprefix=(yytext().charAt(0) != '<') ? 1 : 0;
int startString=3 + bprefix;
hereocLength=yylength() - bprefix - 3- 2- 1- (yytext().charAt(yylength() - 2) == '\r' ? 1 : 0);
while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
startString++;
hereocLength--;
}
startString++;
heredoc=yytext().substring(startString,hereocLength + startString);
yybegin(ST_PHP_START_NOWDOC);
return PHPTokenId.PHP_NOWDOC_TAG_START;
}
case 328:
break;
case 98:
{
return PHPTokenId.PHP_TYPE_BOOL;
}
case 329:
break;
case 125:
{
return PHPTokenId.PHP_ENDFOR;
}
case 330:
break;
case 73:
{
return PHPTokenId.PHP_FOR;
}
case 331:
break;
case 138:
{
return PHPTokenId.PHP_FOREACH;
}
case 332:
break;
case 55:
{
pushState(ST_PHP_LOOKING_FOR_STATIC_PROPERTY);
return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
}
case 333:
break;
case 29:
{
popState();
return PHPTokenId.PHP_STRING;
}
case 334:
break;
case 89:
{
return PHPTokenId.PHP_ELSE;
}
case 335:
break;
case 96:
{
return PHPTokenId.PHP_SELF;
}
case 336:
break;
case 57:
{
yypushback(1);
return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
}
case 337:
break;
case 15:
{
int lastState=stack.peek();
if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
popState();
}
return PHPTokenId.PHP_CURLY_CLOSE;
}
case 338:
break;
case 52:
{
return PHPTokenId.PHP_DO;
}
case 339:
break;
case 99:
{
return PHPTokenId.PHP_TYPE_VOID;
}
case 340:
break;
case 148:
{
return PHPTokenId.PHP_ENDWHILE;
}
case 341:
break;
case 126:
{
return PHPTokenId.PHP_ELSEIF;
}
case 342:
break;
case 94:
{
return PHPTokenId.PHP_TRUE;
}
case 343:
break;
case 54:
{
return PHPTokenId.PHP_ATTRIBUTE;
}
case 344:
break;
default :
if (zzInput == YYEOF) switch (zzLexicalState) {
case ST_PHP_COMMENT:
{
if (input.readLength() > 0) {
input.backup(1);
return PHPTokenId.PHP_COMMENT;
}
 else {
return null;
}
}
case 791:
break;
case ST_PHP_DOC_COMMENT:
{
if (input.readLength() > 0) {
input.backup(1);
return PHPTokenId.PHPDOC_COMMENT;
}
 else {
return null;
}
}
case 792:
break;
default :
{
if (input.readLength() > 0) {
input.backup(1);
return PHPTokenId.UNKNOWN_TOKEN;
}
 else {
return null;
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
14,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 59:
{
  }
case 216:
break;
case 214:
{
comment=yytext();
handleVarComment();
}
case 217:
break;
case 199:
{
return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
}
case 218:
break;
case 162:
{
int removeChars=(yytext().charAt(0) == 'b') ? 4 : 3;
heredoc=yytext().substring(removeChars).trim();
if (heredoc.charAt(0) == '""') {
heredoc=heredoc.substring(1,heredoc.length() - 1);
}
yybegin(ST_START_HEREDOC);
return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
}
case 219:
break;
case 29:
{
return createSymbol(ASTPHP5Symbols.T_OR);
}
case 220:
break;
case 160:
{
return createFullSymbol(ASTPHP5Symbols.T_PRINT);
}
case 221:
break;
case 185:
{
return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
}
case 222:
break;
case 1:
{
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
case 223:
break;
case 24:
{
return createSymbol(ASTPHP5Symbols.T_RGREATER);
}
case 224:
break;
case 171:
{
return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
}
case 225:
break;
case 25:
{
return createSymbol(ASTPHP5Symbols.T_TIMES);
}
case 226:
break;
case 113:
{
String text=yytext();
if ((text.charAt(1) == '%' && asp_tags) || (text.charAt(1) == '?')) {
yypushback(1);
yybegin(ST_IN_SHORT_ECHO);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 227:
break;
case 78:
{
return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
}
case 228:
break;
case 98:
{
return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
}
case 229:
break;
case 12:
{
pushState(ST_IN_SCRIPTING);
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
}
case 230:
break;
case 46:
{
nowdoc=null;
nowdoc_len=0;
nowdocBody.delete(0,nowdocBody.length());
nowdocBodyStart=-1;
nowdocBodyLength=0;
yybegin(ST_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
}
case 231:
break;
case 22:
{
return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
}
case 232:
break;
case 47:
{
yypushback(yylength());
popState();
}
case 233:
break;
case 23:
{
return createSymbol(ASTPHP5Symbols.T_NOT);
}
case 234:
break;
case 19:
{
return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
}
case 235:
break;
case 126:
{
return createFullSymbol(ASTPHP5Symbols.T_VAR);
}
case 236:
break;
case 56:
{
popState();
return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
}
case 237:
break;
case 209:
{
return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
}
case 238:
break;
case 149:
{
return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
}
case 239:
break;
case 168:
{
return createFullSymbol(ASTPHP5Symbols.T_STATIC);
}
case 240:
break;
case 139:
{
return createFullSymbol(ASTPHP5Symbols.T_EVAL);
}
case 241:
break;
case 170:
{
return createFullSymbol(ASTPHP5Symbols.T_RETURN);
}
case 242:
break;
case 152:
{
return createFullSymbol(ASTPHP5Symbols.T_UNSET);
}
case 243:
break;
case 131:
{
if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
}
case 244:
break;
case 91:
{
return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
}
case 245:
break;
case 48:
{
popState();
return createFullSymbol(ASTPHP5Symbols.T_STRING);
}
case 246:
break;
case 205:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
}
case 247:
break;
case 203:
{
return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
}
case 248:
break;
case 38:
{
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 249:
break;
case 180:
{
return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
}
case 250:
break;
case 77:
{
return createSymbol(ASTPHP5Symbols.T_ATTRIBUTE);
}
case 251:
break;
case 103:
{
yypushback(1);
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 252:
break;
case 87:
{
return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
}
case 253:
break;
case 125:
{
return createSymbol(ASTPHP5Symbols.T_COALESCE_EQUAL);
}
case 254:
break;
case 70:
{
return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
}
case 255:
break;
case 116:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
}
case 256:
break;
case 154:
{
return createFullSymbol(ASTPHP5Symbols.T_CONST);
}
case 257:
break;
case 142:
{
return createFullSymbol(ASTPHP5Symbols.T_GOTO);
}
case 258:
break;
case 124:
{
pushState(ST_LOOKING_FOR_PROPERTY);
return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
}
case 259:
break;
case 119:
{
return createFullSymbol(ASTPHP5Symbols.T_EXIT);
}
case 260:
break;
case 37:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 261:
break;
case 134:
{
yypushback(2);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
case 262:
break;
case 192:
{
return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
}
case 263:
break;
case 127:
{
return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
}
case 264:
break;
case 42:
{
yypushback(1);
yybegin(ST_HEREDOC);
}
case 265:
break;
case 167:
{
return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
}
case 266:
break;
case 45:
{
yypushback(1);
yybegin(ST_NOWDOC);
}
case 267:
break;
case 97:
{
return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
}
case 268:
break;
case 147:
{
return createFullSymbol(ASTPHP5Symbols.T_BREAK);
}
case 269:
break;
case 104:
{
int trailingNewLineLength=1;
int labelLength=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
if (yytext().charAt(labelLength - 1) == ';') {
labelLength--;
back++;
}
if (isEndHereOrNowdoc(heredoc)) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=labelLength - indexOfHeredocId;
yypushback(back);
yybegin(ST_END_HEREDOC);
}
 else {
char previousChar=' ';
int indexOfVariable=-1;
for (int i=0; i < yylength(); i++) {
char currentChar=yytext().charAt(i);
if (currentChar == '$' && previousChar == '{') {
indexOfVariable=i - 1;
break;
}
if (currentChar == '$' && previousChar != '\\') {
indexOfVariable=i;
break;
}
previousChar=currentChar;
}
if (indexOfVariable == -1) {
yypushback(trailingNewLineLength);
}
 else {
yypushback(yylength() - indexOfVariable);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
}
updateHeredocBodyInfo();
if (yystate() == ST_END_HEREDOC) {
return createFullHeredocBodySymbol();
}
}
case 270:
break;
case 61:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_ECHO);
}
case 271:
break;
case 169:
{
return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
}
case 272:
break;
case 36:
{
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 273:
break;
case 33:
{
return createSymbol(ASTPHP5Symbols.T_TILDA);
}
case 274:
break;
case 73:
{
return createFullSymbol(ASTPHP5Symbols.T_IF);
}
case 275:
break;
case 182:
{
return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
}
case 276:
break;
case 20:
{
return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
}
case 277:
break;
case 158:
{
return createFullSymbol(ASTPHP5Symbols.T_MATCH);
}
case 278:
break;
case 28:
{
return createSymbol(ASTPHP5Symbols.T_REFERENCE);
}
case 279:
break;
case 92:
{
handleCommentStart();
yybegin(ST_COMMENT);
}
case 280:
break;
case 201:
{
return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
}
case 281:
break;
case 207:
{
return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
}
case 282:
break;
case 157:
{
return createFullSymbol(ASTPHP5Symbols.T_YIELD);
}
case 283:
break;
case 17:
{
return createSymbol(ASTPHP5Symbols.T_MINUS);
}
case 284:
break;
case 44:
{
updateNowdocBodyInfo();
}
case 285:
break;
case 197:
{
return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
}
case 286:
break;
case 213:
{
return createFullSymbol(ASTPHP5Symbols.T_NS_C);
}
case 287:
break;
case 161:
{
return createSymbol(ASTPHP5Symbols.T_INT_CAST);
}
case 288:
break;
case 111:
{
handlePHPDocEnd();
yybegin(ST_IN_SCRIPTING);
}
case 289:
break;
case 166:
{
return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
}
case 290:
break;
case 84:
{
return createSymbol(ASTPHP5Symbols.T_COALESCE);
}
case 291:
break;
case 204:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
}
case 292:
break;
case 79:
{
return createSymbol(ASTPHP5Symbols.T_DEC);
}
case 293:
break;
case 100:
{
yypushback(1);
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 294:
break;
case 190:
{
return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
}
case 295:
break;
case 138:
{
return createFullSymbol(ASTPHP5Symbols.T_ELSE);
}
case 296:
break;
case 200:
{
return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
}
case 297:
break;
case 80:
{
pushState(ST_LOOKING_FOR_PROPERTY);
return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
}
case 298:
break;
case 13:
{
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
case 299:
break;
case 2:
{
}
case 300:
break;
case 50:
{
popState();
pushState(ST_IN_SCRIPTING);
return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
}
case 301:
break;
case 18:
{
return createSymbol(ASTPHP5Symbols.T_LGREATER);
}
case 302:
break;
case 141:
{
return createFullSymbol(ASTPHP5Symbols.T_LIST);
}
case 303:
break;
case 110:
{
handleMultilineCommentEnd();
yybegin(ST_IN_SCRIPTING);
}
case 304:
break;
case 132:
{
yypushback(1);
pushState(ST_VAR_OFFSET);
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 305:
break;
case 165:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
}
case 306:
break;
case 3:
{
return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
}
case 307:
break;
case 41:
{
updateHeredocBodyInfo();
}
case 308:
break;
case 143:
{
handleCommentStart();
}
case 309:
break;
case 146:
{
return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
}
case 310:
break;
case 137:
{
return createFullSymbol(ASTPHP5Symbols.T_ECHO);
}
case 311:
break;
case 51:
{
return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
}
case 312:
break;
case 95:
{
return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
}
case 313:
break;
case 55:
{
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
}
case 314:
break;
case 150:
{
return createFullSymbol(ASTPHP5Symbols.T_THROW);
}
case 315:
break;
case 133:
{
String text=yytext();
int lastIndexOfDollar=text.lastIndexOf('$');
yypushback(text.length() - lastIndexOfDollar);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
case 316:
break;
case 159:
{
return createFullSymbol(ASTPHP5Symbols.T_WHILE);
}
case 317:
break;
case 198:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
}
case 318:
break;
case 63:
{
if (asp_tags) {
yybegin(ST_IN_SCRIPTING);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 319:
break;
case 184:
{
return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
}
case 320:
break;
case 102:
{
pushState(ST_IN_SCRIPTING);
yypushback(yylength() - 1);
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
}
case 321:
break;
case 178:
{
return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
}
case 322:
break;
case 174:
{
return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
}
case 323:
break;
case 11:
{
yybegin(ST_BACKQUOTE);
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 324:
break;
case 16:
{
return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
}
case 325:
break;
case 153:
{
return createFullSymbol(ASTPHP5Symbols.T_CATCH);
}
case 326:
break;
case 106:
{
if (isEndHereOrNowdoc(nowdoc)) {
String yytext=yytext();
int newlineLength=yytext.startsWith(""\r\n"") ? 2 : 1;
int back=yylength() - newlineLength;
yypushback(back);
updateNowdocBodyInfo();
yybegin(ST_END_NOWDOC);
if (nowdocBodyLength > 0) {
return createFullNowdocBodySymbol();
}
}
 else {
yypushback(1);
updateNowdocBodyInfo();
}
}
case 327:
break;
case 60:
{
String yytext=yytext();
switch (yytext.charAt(yytext.length() - 1)) {
case '?':
case '%':
case '>':
yypushback(1);
break;
default :
handleLineCommentEnd();
yybegin(ST_IN_SCRIPTING);
}
}
case 328:
break;
case 101:
{
pushState(ST_LOOKING_FOR_VARNAME);
return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
}
case 329:
break;
case 35:
{
if (!stack.isEmpty()) {
popState();
}
bracket--;
return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
}
case 330:
break;
case 135:
{
return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
}
case 331:
break;
case 93:
{
return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
}
case 332:
break;
case 26:
{
return createSymbol(ASTPHP5Symbols.T_DIV);
}
case 333:
break;
case 105:
{
int trailingNewLineLength=1;
int labelLength=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
String yytext=yytext();
if (yytext.charAt(labelLength - 1) == ';') {
labelLength--;
back++;
}
if (isEndHereOrNowdoc(heredoc)) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=labelLength - indexOfHeredocId;
yypushback(back);
yybegin(ST_END_HEREDOC);
}
 else {
yypushback(yylength());
yybegin(ST_HEREDOC);
}
}
case 334:
break;
case 32:
{
return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
}
case 335:
break;
case 128:
{
return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
}
case 336:
break;
case 6:
{
return createSymbol(ASTPHP5Symbols.T_PLUS);
}
case 337:
break;
case 155:
{
return createFullSymbol(ASTPHP5Symbols.T_CLASS);
}
case 338:
break;
case 120:
{
return createFullSymbol(ASTPHP5Symbols.T_FOR);
}
case 339:
break;
case 163:
{
yypushback(3);
pushState(ST_LOOKING_FOR_PROPERTY);
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 340:
break;
case 81:
{
return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
}
case 341:
break;
case 74:
{
return createFullSymbol(ASTPHP5Symbols.T_DO);
}
case 342:
break;
case 96:
{
return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
}
case 343:
break;
case 40:
{
int indexOfNewline=yytext().indexOf(""\r"");
if (indexOfNewline == -1) {
indexOfNewline=yytext().indexOf(""\n"");
}
if (indexOfNewline > 0) {
yypushback(yylength() - indexOfNewline);
}
updateHeredocBodyInfo();
}
case 344:
break;
case 4:
{
return createFullSymbol(ASTPHP5Symbols.T_STRING);
}
case 345:
break;
case 177:
{
return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
}
case 346:
break;
case 5:
{
return createSymbol(ASTPHP5Symbols.T_NEKUDA);
}
case 347:
break;
case 144:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
}
case 348:
break;
case 121:
{
return createFullSymbol(ASTPHP5Symbols.T_NEW);
}
case 349:
break;
case 57:
{
bracket--;
return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
}
case 350:
break;
case 206:
{
return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
}
case 351:
break;
case 49:
{
yypushback(yylength());
popState();
pushState(ST_IN_SCRIPTING);
}
case 352:
break;
case 164:
{
isEndedPhp=false;
whitespaceEndPosition=getTokenStartPosition() + yylength();
yybegin(ST_IN_SCRIPTING);
}
case 353:
break;
case 67:
{
return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
}
case 354:
break;
case 75:
{
return createFullSymbol(ASTPHP5Symbols.T_FN);
}
case 355:
break;
case 8:
{
whitespaceEndPosition=getTokenStartPosition() + yylength();
}
case 356:
break;
case 183:
{
return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
}
case 357:
break;
case 211:
{
return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
}
case 358:
break;
case 181:
{
return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
}
case 359:
break;
case 156:
{
return createFullSymbol(ASTPHP5Symbols.T_CLONE);
}
case 360:
break;
case 148:
{
return createFullSymbol(ASTPHP5Symbols.T_ISSET);
}
case 361:
break;
case 21:
{
return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
}
case 362:
break;
case 172:
{
return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
}
case 363:
break;
case 15:
{
handleCommentStart();
yybegin(ST_ONE_LINE_COMMENT);
}
case 364:
break;
case 123:
{
return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
}
case 365:
break;
case 62:
{
if (short_tags_allowed || yylength() > 2) {
yybegin(ST_IN_SCRIPTING);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 366:
break;
case 145:
{
return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
}
case 367:
break;
case 215:
{
yybegin(ST_HALTED_COMPILER);
return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
}
case 368:
break;
case 86:
{
return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
}
case 369:
break;
case 89:
{
return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
}
case 370:
break;
case 107:
{
if (isEndHereOrNowdoc(nowdoc)) {
int indexOfNowdocId=yytext().indexOf(nowdoc);
int back=yylength() - indexOfNowdocId - nowdoc.length();
yypushback(back);
nowdoc=null;
nowdoc_len=0;
nowdocBody.delete(0,nowdocBody.length());
nowdocBodyStart=-1;
nowdocBodyLength=0;
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
}
 else {
yypushback(1);
yybegin(ST_NOWDOC);
updateNowdocBodyInfo();
}
}
case 371:
break;
case 129:
{
return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
}
case 372:
break;
case 118:
{
return createFullSymbol(ASTPHP5Symbols.T_TRY);
}
case 373:
break;
case 151:
{
return createFullSymbol(ASTPHP5Symbols.T_FINAL);
}
case 374:
break;
case 195:
{
return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
}
case 375:
break;
case 173:
{
return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
}
case 376:
break;
case 39:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 377:
break;
case 7:
{
return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
}
case 378:
break;
case 112:
{
if (asp_tags || yytext().charAt(0) != '%') {
isEndedPhp=true;
handleLineCommentEnd();
yypushback(yylength());
yybegin(ST_IN_SCRIPTING);
}
}
case 379:
break;
case 194:
{
return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
}
case 380:
break;
case 115:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
}
case 381:
break;
case 64:
{
return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
}
case 382:
break;
case 27:
{
return createSymbol(ASTPHP5Symbols.T_PRECENT);
}
case 383:
break;
case 212:
{
comment=yytext();
handleVarComment();
}
case 384:
break;
case 83:
{
isEndedPhp=true;
yybegin(YYINITIAL);
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
case 385:
break;
case 94:
{
if (asp_tags) {
yybegin(YYINITIAL);
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 386:
break;
case 191:
{
return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
}
case 387:
break;
case 189:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
}
case 388:
break;
case 30:
{
return createSymbol(ASTPHP5Symbols.T_KOVA);
}
case 389:
break;
case 43:
{
heredoc=null;
resetHeredocBodyInfo();
yybegin(ST_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
}
case 390:
break;
case 10:
{
yybegin(ST_DOUBLE_QUOTES);
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 391:
break;
case 193:
{
return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
}
case 392:
break;
case 117:
{
return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
}
case 393:
break;
case 72:
{
return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
}
case 394:
break;
case 136:
{
int len=yylength();
yypushback(2);
comment=yytext();
}
case 395:
break;
case 196:
{
return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
}
case 396:
break;
case 85:
{
return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
}
case 397:
break;
case 122:
{
return createFullSymbol(ASTPHP5Symbols.T_USE);
}
case 398:
break;
case 82:
{
return createSymbol(ASTPHP5Symbols.T_SR);
}
case 399:
break;
case 14:
{
return createSymbol(ASTPHP5Symbols.T_EQUAL);
}
case 400:
break;
case 31:
{
return createSymbol(ASTPHP5Symbols.T_COMMA);
}
case 401:
break;
case 175:
{
return createFullSymbol(ASTPHP5Symbols.T_DIR);
}
case 402:
break;
case 202:
{
return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
}
case 403:
break;
case 52:
{
yypushback(1);
popState();
return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 404:
break;
case 65:
{
return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
}
case 405:
break;
case 109:
{
return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
}
case 406:
break;
case 9:
{
return createSymbol(ASTPHP5Symbols.T_DOLLAR);
}
case 407:
break;
case 66:
{
return createSymbol(ASTPHP5Symbols.T_INC);
}
case 408:
break;
case 76:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
}
case 409:
break;
case 88:
{
return createSymbol(ASTPHP5Symbols.T_SL);
}
case 410:
break;
case 68:
{
return createFullSymbol(ASTPHP5Symbols.T_AS);
}
case 411:
break;
case 210:
{
return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
}
case 412:
break;
case 130:
{
return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
}
case 413:
break;
case 71:
{
return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
}
case 414:
break;
case 34:
{
return createSymbol(ASTPHP5Symbols.T_AT);
}
case 415:
break;
case 53:
{
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 416:
break;
case 188:
{
return createFullSymbol(ASTPHP5Symbols.T_LINE);
}
case 417:
break;
case 186:
{
int bprefix=(yytext().charAt(0) != '<') ? 1 : 0;
int startString=3 + bprefix;
nowdoc_len=yylength() - bprefix - 3- 2- 1- (yytext().charAt(yylength() - 2) == '\r' ? 1 : 0);
while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
startString++;
nowdoc_len--;
}
startString++;
nowdoc=yytext().substring(startString,nowdoc_len + startString);
yybegin(ST_START_NOWDOC);
return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
}
case 418:
break;
case 176:
{
return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
}
case 419:
break;
case 69:
{
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 420:
break;
case 208:
{
return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
}
case 421:
break;
case 179:
{
return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
}
case 422:
break;
case 99:
{
return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
}
case 423:
break;
case 90:
{
return createSymbol(ASTPHP5Symbols.T_POW);
}
case 424:
break;
case 140:
{
return createFullSymbol(ASTPHP5Symbols.T_CASE);
}
case 425:
break;
case 187:
{
return createFullSymbol(ASTPHP5Symbols.T_FILE);
}
case 426:
break;
case 108:
{
return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
}
case 427:
break;
case 114:
{
return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
}
case 428:
break;
case 54:
{
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 429:
break;
case 58:
{
}
case 430:
break;
default :
if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
zzAtEOF=true;
zzDoEOF();
switch (zzLexicalState) {
case ST_DOCBLOCK:
{
if (yytext().length() > 0) {
yypushback(1);
comment=yytext();
}
 else {
return createSymbol(ASTPHP5Symbols.EOF);
}
}
case 805:
break;
default :
{
return createSymbol(ASTPHP5Symbols.EOF);
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
15,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 59:
{
  }
case 216:
break;
case 214:
{
comment=yytext();
handleVarComment();
}
case 217:
break;
case 199:
{
return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
}
case 218:
break;
case 162:
{
int removeChars=(yytext().charAt(0) == 'b') ? 4 : 3;
heredoc=yytext().substring(removeChars).trim();
if (heredoc.charAt(0) == '""') {
heredoc=heredoc.substring(1,heredoc.length() - 1);
}
yybegin(ST_START_HEREDOC);
return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
}
case 219:
break;
case 29:
{
return createSymbol(ASTPHP5Symbols.T_OR);
}
case 220:
break;
case 160:
{
return createFullSymbol(ASTPHP5Symbols.T_PRINT);
}
case 221:
break;
case 185:
{
return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
}
case 222:
break;
case 1:
{
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
case 223:
break;
case 24:
{
return createSymbol(ASTPHP5Symbols.T_RGREATER);
}
case 224:
break;
case 171:
{
return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
}
case 225:
break;
case 25:
{
return createSymbol(ASTPHP5Symbols.T_TIMES);
}
case 226:
break;
case 113:
{
String text=yytext();
if ((text.charAt(1) == '%' && asp_tags) || (text.charAt(1) == '?')) {
yypushback(1);
yybegin(ST_IN_SHORT_ECHO);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 227:
break;
case 78:
{
return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
}
case 228:
break;
case 98:
{
return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
}
case 229:
break;
case 12:
{
pushState(ST_IN_SCRIPTING);
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
}
case 230:
break;
case 46:
{
nowdoc=null;
nowdoc_len=0;
nowdocBody.delete(0,nowdocBody.length());
nowdocBodyStart=-1;
nowdocBodyLength=0;
yybegin(ST_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
}
case 231:
break;
case 22:
{
return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
}
case 232:
break;
case 47:
{
yypushback(yylength());
popState();
}
case 233:
break;
case 23:
{
return createSymbol(ASTPHP5Symbols.T_NOT);
}
case 234:
break;
case 19:
{
return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
}
case 235:
break;
case 126:
{
return createFullSymbol(ASTPHP5Symbols.T_VAR);
}
case 236:
break;
case 56:
{
popState();
return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
}
case 237:
break;
case 209:
{
return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
}
case 238:
break;
case 149:
{
return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
}
case 239:
break;
case 168:
{
return createFullSymbol(ASTPHP5Symbols.T_STATIC);
}
case 240:
break;
case 139:
{
return createFullSymbol(ASTPHP5Symbols.T_EVAL);
}
case 241:
break;
case 170:
{
return createFullSymbol(ASTPHP5Symbols.T_RETURN);
}
case 242:
break;
case 152:
{
return createFullSymbol(ASTPHP5Symbols.T_UNSET);
}
case 243:
break;
case 131:
{
if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
}
case 244:
break;
case 91:
{
return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
}
case 245:
break;
case 48:
{
popState();
return createFullSymbol(ASTPHP5Symbols.T_STRING);
}
case 246:
break;
case 205:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
}
case 247:
break;
case 203:
{
return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
}
case 248:
break;
case 38:
{
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 249:
break;
case 180:
{
return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
}
case 250:
break;
case 77:
{
return createSymbol(ASTPHP5Symbols.T_ATTRIBUTE);
}
case 251:
break;
case 103:
{
yypushback(1);
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 252:
break;
case 87:
{
return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
}
case 253:
break;
case 125:
{
return createSymbol(ASTPHP5Symbols.T_COALESCE_EQUAL);
}
case 254:
break;
case 70:
{
return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
}
case 255:
break;
case 116:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
}
case 256:
break;
case 154:
{
return createFullSymbol(ASTPHP5Symbols.T_CONST);
}
case 257:
break;
case 142:
{
return createFullSymbol(ASTPHP5Symbols.T_GOTO);
}
case 258:
break;
case 124:
{
pushState(ST_LOOKING_FOR_PROPERTY);
return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
}
case 259:
break;
case 119:
{
return createFullSymbol(ASTPHP5Symbols.T_EXIT);
}
case 260:
break;
case 37:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 261:
break;
case 134:
{
yypushback(2);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
case 262:
break;
case 192:
{
return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
}
case 263:
break;
case 127:
{
return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
}
case 264:
break;
case 42:
{
yypushback(1);
yybegin(ST_HEREDOC);
}
case 265:
break;
case 167:
{
return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
}
case 266:
break;
case 45:
{
yypushback(1);
yybegin(ST_NOWDOC);
}
case 267:
break;
case 97:
{
return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
}
case 268:
break;
case 147:
{
return createFullSymbol(ASTPHP5Symbols.T_BREAK);
}
case 269:
break;
case 104:
{
int trailingNewLineLength=1;
int labelLength=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
if (yytext().charAt(labelLength - 1) == ';') {
labelLength--;
back++;
}
if (isEndHereOrNowdoc(heredoc)) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=labelLength - indexOfHeredocId;
yypushback(back);
yybegin(ST_END_HEREDOC);
}
 else {
char previousChar=' ';
int indexOfVariable=-1;
for (int i=0; i < yylength(); i++) {
char currentChar=yytext().charAt(i);
if (currentChar == '$' && previousChar == '{') {
indexOfVariable=i - 1;
break;
}
if (currentChar == '$' && previousChar != '\\') {
indexOfVariable=i;
break;
}
previousChar=currentChar;
}
if (indexOfVariable == -1) {
yypushback(trailingNewLineLength);
}
 else {
yypushback(yylength() - indexOfVariable);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
}
updateHeredocBodyInfo();
if (yystate() == ST_END_HEREDOC) {
return createFullHeredocBodySymbol();
}
}
case 270:
break;
case 61:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_ECHO);
}
case 271:
break;
case 169:
{
return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
}
case 272:
break;
case 36:
{
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 273:
break;
case 33:
{
return createSymbol(ASTPHP5Symbols.T_TILDA);
}
case 274:
break;
case 73:
{
return createFullSymbol(ASTPHP5Symbols.T_IF);
}
case 275:
break;
case 182:
{
return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
}
case 276:
break;
case 20:
{
return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
}
case 277:
break;
case 158:
{
return createFullSymbol(ASTPHP5Symbols.T_MATCH);
}
case 278:
break;
case 28:
{
return createSymbol(ASTPHP5Symbols.T_REFERENCE);
}
case 279:
break;
case 92:
{
handleCommentStart();
yybegin(ST_COMMENT);
}
case 280:
break;
case 201:
{
return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
}
case 281:
break;
case 207:
{
return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
}
case 282:
break;
case 157:
{
return createFullSymbol(ASTPHP5Symbols.T_YIELD);
}
case 283:
break;
case 17:
{
return createSymbol(ASTPHP5Symbols.T_MINUS);
}
case 284:
break;
case 44:
{
updateNowdocBodyInfo();
}
case 285:
break;
case 197:
{
return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
}
case 286:
break;
case 213:
{
return createFullSymbol(ASTPHP5Symbols.T_NS_C);
}
case 287:
break;
case 161:
{
return createSymbol(ASTPHP5Symbols.T_INT_CAST);
}
case 288:
break;
case 111:
{
handlePHPDocEnd();
yybegin(ST_IN_SCRIPTING);
}
case 289:
break;
case 166:
{
return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
}
case 290:
break;
case 84:
{
return createSymbol(ASTPHP5Symbols.T_COALESCE);
}
case 291:
break;
case 204:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
}
case 292:
break;
case 79:
{
return createSymbol(ASTPHP5Symbols.T_DEC);
}
case 293:
break;
case 100:
{
yypushback(1);
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 294:
break;
case 190:
{
return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
}
case 295:
break;
case 138:
{
return createFullSymbol(ASTPHP5Symbols.T_ELSE);
}
case 296:
break;
case 200:
{
return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
}
case 297:
break;
case 80:
{
pushState(ST_LOOKING_FOR_PROPERTY);
return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
}
case 298:
break;
case 13:
{
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
case 299:
break;
case 2:
{
}
case 300:
break;
case 50:
{
popState();
pushState(ST_IN_SCRIPTING);
return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
}
case 301:
break;
case 18:
{
return createSymbol(ASTPHP5Symbols.T_LGREATER);
}
case 302:
break;
case 141:
{
return createFullSymbol(ASTPHP5Symbols.T_LIST);
}
case 303:
break;
case 110:
{
handleMultilineCommentEnd();
yybegin(ST_IN_SCRIPTING);
}
case 304:
break;
case 132:
{
yypushback(1);
pushState(ST_VAR_OFFSET);
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 305:
break;
case 165:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
}
case 306:
break;
case 3:
{
return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
}
case 307:
break;
case 41:
{
updateHeredocBodyInfo();
}
case 308:
break;
case 143:
{
handleCommentStart();
}
case 309:
break;
case 146:
{
return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
}
case 310:
break;
case 137:
{
return createFullSymbol(ASTPHP5Symbols.T_ECHO);
}
case 311:
break;
case 51:
{
return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
}
case 312:
break;
case 95:
{
return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
}
case 313:
break;
case 55:
{
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
}
case 314:
break;
case 150:
{
return createFullSymbol(ASTPHP5Symbols.T_THROW);
}
case 315:
break;
case 133:
{
String text=yytext();
int lastIndexOfDollar=text.lastIndexOf('$');
yypushback(text.length() - lastIndexOfDollar);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
case 316:
break;
case 159:
{
return createFullSymbol(ASTPHP5Symbols.T_WHILE);
}
case 317:
break;
case 198:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
}
case 318:
break;
case 63:
{
if (asp_tags) {
yybegin(ST_IN_SCRIPTING);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 319:
break;
case 184:
{
return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
}
case 320:
break;
case 102:
{
pushState(ST_IN_SCRIPTING);
yypushback(yylength() - 1);
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
}
case 321:
break;
case 178:
{
return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
}
case 322:
break;
case 174:
{
return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
}
case 323:
break;
case 11:
{
yybegin(ST_BACKQUOTE);
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 324:
break;
case 16:
{
return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
}
case 325:
break;
case 153:
{
return createFullSymbol(ASTPHP5Symbols.T_CATCH);
}
case 326:
break;
case 106:
{
if (isEndHereOrNowdoc(nowdoc)) {
String yytext=yytext();
int newlineLength=yytext.startsWith(""\r\n"") ? 2 : 1;
int back=yylength() - newlineLength;
yypushback(back);
updateNowdocBodyInfo();
yybegin(ST_END_NOWDOC);
if (nowdocBodyLength > 0) {
return createFullNowdocBodySymbol();
}
}
 else {
yypushback(1);
updateNowdocBodyInfo();
}
}
case 327:
break;
case 60:
{
String yytext=yytext();
switch (yytext.charAt(yytext.length() - 1)) {
case '?':
case '%':
case '>':
yypushback(1);
break;
default :
handleLineCommentEnd();
yybegin(ST_IN_SCRIPTING);
}
}
case 328:
break;
case 101:
{
pushState(ST_LOOKING_FOR_VARNAME);
return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
}
case 329:
break;
case 35:
{
if (!stack.isEmpty()) {
popState();
}
bracket--;
return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
}
case 330:
break;
case 135:
{
return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
}
case 331:
break;
case 93:
{
return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
}
case 332:
break;
case 26:
{
return createSymbol(ASTPHP5Symbols.T_DIV);
}
case 333:
break;
case 105:
{
int trailingNewLineLength=1;
int labelLength=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
String yytext=yytext();
if (yytext.charAt(labelLength - 1) == ';') {
labelLength--;
back++;
}
if (isEndHereOrNowdoc(heredoc)) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=labelLength - indexOfHeredocId;
yypushback(back);
yybegin(ST_END_HEREDOC);
}
 else {
yypushback(yylength());
yybegin(ST_HEREDOC);
}
}
case 334:
break;
case 32:
{
return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
}
case 335:
break;
case 128:
{
return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
}
case 336:
break;
case 6:
{
return createSymbol(ASTPHP5Symbols.T_PLUS);
}
case 337:
break;
case 155:
{
return createFullSymbol(ASTPHP5Symbols.T_CLASS);
}
case 338:
break;
case 120:
{
return createFullSymbol(ASTPHP5Symbols.T_FOR);
}
case 339:
break;
case 163:
{
yypushback(3);
pushState(ST_LOOKING_FOR_PROPERTY);
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 340:
break;
case 81:
{
return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
}
case 341:
break;
case 74:
{
return createFullSymbol(ASTPHP5Symbols.T_DO);
}
case 342:
break;
case 96:
{
return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
}
case 343:
break;
case 40:
{
int indexOfNewline=yytext().indexOf(""\r"");
if (indexOfNewline == -1) {
indexOfNewline=yytext().indexOf(""\n"");
}
if (indexOfNewline > 0) {
yypushback(yylength() - indexOfNewline);
}
updateHeredocBodyInfo();
}
case 344:
break;
case 4:
{
return createFullSymbol(ASTPHP5Symbols.T_STRING);
}
case 345:
break;
case 177:
{
return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
}
case 346:
break;
case 5:
{
return createSymbol(ASTPHP5Symbols.T_NEKUDA);
}
case 347:
break;
case 144:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
}
case 348:
break;
case 121:
{
return createFullSymbol(ASTPHP5Symbols.T_NEW);
}
case 349:
break;
case 57:
{
bracket--;
return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
}
case 350:
break;
case 206:
{
return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
}
case 351:
break;
case 49:
{
yypushback(yylength());
popState();
pushState(ST_IN_SCRIPTING);
}
case 352:
break;
case 164:
{
isEndedPhp=false;
whitespaceEndPosition=getTokenStartPosition() + yylength();
yybegin(ST_IN_SCRIPTING);
}
case 353:
break;
case 67:
{
return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
}
case 354:
break;
case 75:
{
return createFullSymbol(ASTPHP5Symbols.T_FN);
}
case 355:
break;
case 8:
{
whitespaceEndPosition=getTokenStartPosition() + yylength();
}
case 356:
break;
case 183:
{
return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
}
case 357:
break;
case 211:
{
return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
}
case 358:
break;
case 181:
{
return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
}
case 359:
break;
case 156:
{
return createFullSymbol(ASTPHP5Symbols.T_CLONE);
}
case 360:
break;
case 148:
{
return createFullSymbol(ASTPHP5Symbols.T_ISSET);
}
case 361:
break;
case 21:
{
return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
}
case 362:
break;
case 172:
{
return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
}
case 363:
break;
case 15:
{
handleCommentStart();
yybegin(ST_ONE_LINE_COMMENT);
}
case 364:
break;
case 123:
{
return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
}
case 365:
break;
case 62:
{
if (short_tags_allowed || yylength() > 2) {
yybegin(ST_IN_SCRIPTING);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 366:
break;
case 145:
{
return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
}
case 367:
break;
case 215:
{
yybegin(ST_HALTED_COMPILER);
return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
}
case 368:
break;
case 86:
{
return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
}
case 369:
break;
case 89:
{
return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
}
case 370:
break;
case 107:
{
if (isEndHereOrNowdoc(nowdoc)) {
int indexOfNowdocId=yytext().indexOf(nowdoc);
int back=yylength() - indexOfNowdocId - nowdoc.length();
yypushback(back);
nowdoc=null;
nowdoc_len=0;
nowdocBody.delete(0,nowdocBody.length());
nowdocBodyStart=-1;
nowdocBodyLength=0;
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
}
 else {
yypushback(1);
yybegin(ST_NOWDOC);
updateNowdocBodyInfo();
}
}
case 371:
break;
case 129:
{
return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
}
case 372:
break;
case 118:
{
return createFullSymbol(ASTPHP5Symbols.T_TRY);
}
case 373:
break;
case 151:
{
return createFullSymbol(ASTPHP5Symbols.T_FINAL);
}
case 374:
break;
case 195:
{
return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
}
case 375:
break;
case 173:
{
return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
}
case 376:
break;
case 39:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 377:
break;
case 7:
{
return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
}
case 378:
break;
case 112:
{
if (asp_tags || yytext().charAt(0) != '%') {
isEndedPhp=true;
handleLineCommentEnd();
yypushback(yylength());
yybegin(ST_IN_SCRIPTING);
}
}
case 379:
break;
case 194:
{
return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
}
case 380:
break;
case 115:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
}
case 381:
break;
case 64:
{
return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
}
case 382:
break;
case 27:
{
return createSymbol(ASTPHP5Symbols.T_PRECENT);
}
case 383:
break;
case 212:
{
comment=yytext();
handleVarComment();
}
case 384:
break;
case 83:
{
isEndedPhp=true;
yybegin(YYINITIAL);
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
case 385:
break;
case 94:
{
if (asp_tags) {
yybegin(YYINITIAL);
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 386:
break;
case 191:
{
return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
}
case 387:
break;
case 189:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
}
case 388:
break;
case 30:
{
return createSymbol(ASTPHP5Symbols.T_KOVA);
}
case 389:
break;
case 43:
{
heredoc=null;
resetHeredocBodyInfo();
yybegin(ST_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
}
case 390:
break;
case 10:
{
yybegin(ST_DOUBLE_QUOTES);
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 391:
break;
case 193:
{
return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
}
case 392:
break;
case 117:
{
return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
}
case 393:
break;
case 72:
{
return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
}
case 394:
break;
case 136:
{
int len=yylength();
yypushback(2);
comment=yytext();
}
case 395:
break;
case 196:
{
return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
}
case 396:
break;
case 85:
{
return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
}
case 397:
break;
case 122:
{
return createFullSymbol(ASTPHP5Symbols.T_USE);
}
case 398:
break;
case 82:
{
return createSymbol(ASTPHP5Symbols.T_SR);
}
case 399:
break;
case 14:
{
return createSymbol(ASTPHP5Symbols.T_EQUAL);
}
case 400:
break;
case 31:
{
return createSymbol(ASTPHP5Symbols.T_COMMA);
}
case 401:
break;
case 175:
{
return createFullSymbol(ASTPHP5Symbols.T_DIR);
}
case 402:
break;
case 202:
{
return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
}
case 403:
break;
case 52:
{
yypushback(1);
popState();
return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 404:
break;
case 65:
{
return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
}
case 405:
break;
case 109:
{
return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
}
case 406:
break;
case 9:
{
return createSymbol(ASTPHP5Symbols.T_DOLLAR);
}
case 407:
break;
case 66:
{
return createSymbol(ASTPHP5Symbols.T_INC);
}
case 408:
break;
case 76:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
}
case 409:
break;
case 88:
{
return createSymbol(ASTPHP5Symbols.T_SL);
}
case 410:
break;
case 68:
{
return createFullSymbol(ASTPHP5Symbols.T_AS);
}
case 411:
break;
case 210:
{
return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
}
case 412:
break;
case 130:
{
return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
}
case 413:
break;
case 71:
{
return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
}
case 414:
break;
case 34:
{
return createSymbol(ASTPHP5Symbols.T_AT);
}
case 415:
break;
case 53:
{
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 416:
break;
case 188:
{
return createFullSymbol(ASTPHP5Symbols.T_LINE);
}
case 417:
break;
case 186:
{
int bprefix=(yytext().charAt(0) != '<') ? 1 : 0;
int startString=3 + bprefix;
nowdoc_len=yylength() - bprefix - 3- 2- 1- (yytext().charAt(yylength() - 2) == '\r' ? 1 : 0);
while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
startString++;
nowdoc_len--;
}
startString++;
nowdoc=yytext().substring(startString,nowdoc_len + startString);
yybegin(ST_START_NOWDOC);
return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
}
case 418:
break;
case 176:
{
return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
}
case 419:
break;
case 69:
{
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 420:
break;
case 208:
{
return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
}
case 421:
break;
case 179:
{
return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
}
case 422:
break;
case 99:
{
return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
}
case 423:
break;
case 90:
{
return createSymbol(ASTPHP5Symbols.T_POW);
}
case 424:
break;
case 140:
{
return createFullSymbol(ASTPHP5Symbols.T_CASE);
}
case 425:
break;
case 187:
{
return createFullSymbol(ASTPHP5Symbols.T_FILE);
}
case 426:
break;
case 108:
{
return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
}
case 427:
break;
case 114:
{
return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
}
case 428:
break;
case 54:
{
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 429:
break;
case 58:
{
}
case 430:
break;
default :
if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
zzAtEOF=true;
zzDoEOF();
switch (zzLexicalState) {
case ST_DOCBLOCK:
{
if (yytext().length() > 0) {
yypushback(1);
comment=yytext();
}
 else {
return createSymbol(ASTPHP5Symbols.EOF);
}
}
case 805:
break;
default :
{
return createSymbol(ASTPHP5Symbols.EOF);
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
16,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 59:
{
  }
case 216:
break;
case 214:
{
comment=yytext();
handleVarComment();
}
case 217:
break;
case 199:
{
return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
}
case 218:
break;
case 162:
{
int removeChars=(yytext().charAt(0) == 'b') ? 4 : 3;
heredoc=yytext().substring(removeChars).trim();
if (heredoc.charAt(0) == '""') {
heredoc=heredoc.substring(1,heredoc.length() - 1);
}
yybegin(ST_START_HEREDOC);
return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
}
case 219:
break;
case 29:
{
return createSymbol(ASTPHP5Symbols.T_OR);
}
case 220:
break;
case 160:
{
return createFullSymbol(ASTPHP5Symbols.T_PRINT);
}
case 221:
break;
case 185:
{
return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
}
case 222:
break;
case 1:
{
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
case 223:
break;
case 24:
{
return createSymbol(ASTPHP5Symbols.T_RGREATER);
}
case 224:
break;
case 171:
{
return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
}
case 225:
break;
case 25:
{
return createSymbol(ASTPHP5Symbols.T_TIMES);
}
case 226:
break;
case 113:
{
String text=yytext();
if ((text.charAt(1) == '%' && asp_tags) || (text.charAt(1) == '?')) {
yypushback(1);
yybegin(ST_IN_SHORT_ECHO);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 227:
break;
case 78:
{
return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
}
case 228:
break;
case 98:
{
return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
}
case 229:
break;
case 12:
{
pushState(ST_IN_SCRIPTING);
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
}
case 230:
break;
case 46:
{
nowdoc=null;
nowdoc_len=0;
nowdocBody.delete(0,nowdocBody.length());
nowdocBodyStart=-1;
nowdocBodyLength=0;
yybegin(ST_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
}
case 231:
break;
case 22:
{
return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
}
case 232:
break;
case 47:
{
yypushback(yylength());
popState();
}
case 233:
break;
case 23:
{
return createSymbol(ASTPHP5Symbols.T_NOT);
}
case 234:
break;
case 19:
{
return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
}
case 235:
break;
case 126:
{
return createFullSymbol(ASTPHP5Symbols.T_VAR);
}
case 236:
break;
case 56:
{
popState();
return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
}
case 237:
break;
case 209:
{
return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
}
case 238:
break;
case 149:
{
return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
}
case 239:
break;
case 168:
{
return createFullSymbol(ASTPHP5Symbols.T_STATIC);
}
case 240:
break;
case 139:
{
return createFullSymbol(ASTPHP5Symbols.T_EVAL);
}
case 241:
break;
case 170:
{
return createFullSymbol(ASTPHP5Symbols.T_RETURN);
}
case 242:
break;
case 152:
{
return createFullSymbol(ASTPHP5Symbols.T_UNSET);
}
case 243:
break;
case 131:
{
if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
}
case 244:
break;
case 91:
{
return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
}
case 245:
break;
case 48:
{
popState();
return createFullSymbol(ASTPHP5Symbols.T_STRING);
}
case 246:
break;
case 205:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
}
case 247:
break;
case 203:
{
return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
}
case 248:
break;
case 38:
{
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 249:
break;
case 180:
{
return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
}
case 250:
break;
case 77:
{
return createSymbol(ASTPHP5Symbols.T_ATTRIBUTE);
}
case 251:
break;
case 103:
{
yypushback(1);
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 252:
break;
case 87:
{
return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
}
case 253:
break;
case 125:
{
return createSymbol(ASTPHP5Symbols.T_COALESCE_EQUAL);
}
case 254:
break;
case 70:
{
return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
}
case 255:
break;
case 116:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
}
case 256:
break;
case 154:
{
return createFullSymbol(ASTPHP5Symbols.T_CONST);
}
case 257:
break;
case 142:
{
return createFullSymbol(ASTPHP5Symbols.T_GOTO);
}
case 258:
break;
case 124:
{
pushState(ST_LOOKING_FOR_PROPERTY);
return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
}
case 259:
break;
case 119:
{
return createFullSymbol(ASTPHP5Symbols.T_EXIT);
}
case 260:
break;
case 37:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 261:
break;
case 134:
{
yypushback(2);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
case 262:
break;
case 192:
{
return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
}
case 263:
break;
case 127:
{
return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
}
case 264:
break;
case 42:
{
yypushback(1);
yybegin(ST_HEREDOC);
}
case 265:
break;
case 167:
{
return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
}
case 266:
break;
case 45:
{
yypushback(1);
yybegin(ST_NOWDOC);
}
case 267:
break;
case 97:
{
return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
}
case 268:
break;
case 147:
{
return createFullSymbol(ASTPHP5Symbols.T_BREAK);
}
case 269:
break;
case 104:
{
int trailingNewLineLength=1;
int labelLength=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
if (yytext().charAt(labelLength - 1) == ';') {
labelLength--;
back++;
}
if (isEndHereOrNowdoc(heredoc)) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=labelLength - indexOfHeredocId;
yypushback(back);
yybegin(ST_END_HEREDOC);
}
 else {
char previousChar=' ';
int indexOfVariable=-1;
for (int i=0; i < yylength(); i++) {
char currentChar=yytext().charAt(i);
if (currentChar == '$' && previousChar == '{') {
indexOfVariable=i - 1;
break;
}
if (currentChar == '$' && previousChar != '\\') {
indexOfVariable=i;
break;
}
previousChar=currentChar;
}
if (indexOfVariable == -1) {
yypushback(trailingNewLineLength);
}
 else {
yypushback(yylength() - indexOfVariable);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
}
updateHeredocBodyInfo();
if (yystate() == ST_END_HEREDOC) {
return createFullHeredocBodySymbol();
}
}
case 270:
break;
case 61:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_ECHO);
}
case 271:
break;
case 169:
{
return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
}
case 272:
break;
case 36:
{
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 273:
break;
case 33:
{
return createSymbol(ASTPHP5Symbols.T_TILDA);
}
case 274:
break;
case 73:
{
return createFullSymbol(ASTPHP5Symbols.T_IF);
}
case 275:
break;
case 182:
{
return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
}
case 276:
break;
case 20:
{
return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
}
case 277:
break;
case 158:
{
return createFullSymbol(ASTPHP5Symbols.T_MATCH);
}
case 278:
break;
case 28:
{
return createSymbol(ASTPHP5Symbols.T_REFERENCE);
}
case 279:
break;
case 92:
{
handleCommentStart();
yybegin(ST_COMMENT);
}
case 280:
break;
case 201:
{
return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
}
case 281:
break;
case 207:
{
return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
}
case 282:
break;
case 157:
{
return createFullSymbol(ASTPHP5Symbols.T_YIELD);
}
case 283:
break;
case 17:
{
return createSymbol(ASTPHP5Symbols.T_MINUS);
}
case 284:
break;
case 44:
{
updateNowdocBodyInfo();
}
case 285:
break;
case 197:
{
return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
}
case 286:
break;
case 213:
{
return createFullSymbol(ASTPHP5Symbols.T_NS_C);
}
case 287:
break;
case 161:
{
return createSymbol(ASTPHP5Symbols.T_INT_CAST);
}
case 288:
break;
case 111:
{
handlePHPDocEnd();
yybegin(ST_IN_SCRIPTING);
}
case 289:
break;
case 166:
{
return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
}
case 290:
break;
case 84:
{
return createSymbol(ASTPHP5Symbols.T_COALESCE);
}
case 291:
break;
case 204:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
}
case 292:
break;
case 79:
{
return createSymbol(ASTPHP5Symbols.T_DEC);
}
case 293:
break;
case 100:
{
yypushback(1);
return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 294:
break;
case 190:
{
return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
}
case 295:
break;
case 138:
{
return createFullSymbol(ASTPHP5Symbols.T_ELSE);
}
case 296:
break;
case 200:
{
return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
}
case 297:
break;
case 80:
{
pushState(ST_LOOKING_FOR_PROPERTY);
return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
}
case 298:
break;
case 13:
{
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
case 299:
break;
case 2:
{
}
case 300:
break;
case 50:
{
popState();
pushState(ST_IN_SCRIPTING);
return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
}
case 301:
break;
case 18:
{
return createSymbol(ASTPHP5Symbols.T_LGREATER);
}
case 302:
break;
case 141:
{
return createFullSymbol(ASTPHP5Symbols.T_LIST);
}
case 303:
break;
case 110:
{
handleMultilineCommentEnd();
yybegin(ST_IN_SCRIPTING);
}
case 304:
break;
case 132:
{
yypushback(1);
pushState(ST_VAR_OFFSET);
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 305:
break;
case 165:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
}
case 306:
break;
case 3:
{
return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
}
case 307:
break;
case 41:
{
updateHeredocBodyInfo();
}
case 308:
break;
case 143:
{
handleCommentStart();
}
case 309:
break;
case 146:
{
return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
}
case 310:
break;
case 137:
{
return createFullSymbol(ASTPHP5Symbols.T_ECHO);
}
case 311:
break;
case 51:
{
return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
}
case 312:
break;
case 95:
{
return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
}
case 313:
break;
case 55:
{
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
}
case 314:
break;
case 150:
{
return createFullSymbol(ASTPHP5Symbols.T_THROW);
}
case 315:
break;
case 133:
{
String text=yytext();
int lastIndexOfDollar=text.lastIndexOf('$');
yypushback(text.length() - lastIndexOfDollar);
updateHeredocBodyInfo();
return createFullHeredocBodySymbol();
}
case 316:
break;
case 159:
{
return createFullSymbol(ASTPHP5Symbols.T_WHILE);
}
case 317:
break;
case 198:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
}
case 318:
break;
case 63:
{
if (asp_tags) {
yybegin(ST_IN_SCRIPTING);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 319:
break;
case 184:
{
return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
}
case 320:
break;
case 102:
{
pushState(ST_IN_SCRIPTING);
yypushback(yylength() - 1);
bracket++;
return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
}
case 321:
break;
case 178:
{
return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
}
case 322:
break;
case 174:
{
return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
}
case 323:
break;
case 11:
{
yybegin(ST_BACKQUOTE);
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 324:
break;
case 16:
{
return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
}
case 325:
break;
case 153:
{
return createFullSymbol(ASTPHP5Symbols.T_CATCH);
}
case 326:
break;
case 106:
{
if (isEndHereOrNowdoc(nowdoc)) {
String yytext=yytext();
int newlineLength=yytext.startsWith(""\r\n"") ? 2 : 1;
int back=yylength() - newlineLength;
yypushback(back);
updateNowdocBodyInfo();
yybegin(ST_END_NOWDOC);
if (nowdocBodyLength > 0) {
return createFullNowdocBodySymbol();
}
}
 else {
yypushback(1);
updateNowdocBodyInfo();
}
}
case 327:
break;
case 60:
{
String yytext=yytext();
switch (yytext.charAt(yytext.length() - 1)) {
case '?':
case '%':
case '>':
yypushback(1);
break;
default :
handleLineCommentEnd();
yybegin(ST_IN_SCRIPTING);
}
}
case 328:
break;
case 101:
{
pushState(ST_LOOKING_FOR_VARNAME);
return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
}
case 329:
break;
case 35:
{
if (!stack.isEmpty()) {
popState();
}
bracket--;
return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
}
case 330:
break;
case 135:
{
return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
}
case 331:
break;
case 93:
{
return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
}
case 332:
break;
case 26:
{
return createSymbol(ASTPHP5Symbols.T_DIV);
}
case 333:
break;
case 105:
{
int trailingNewLineLength=1;
int labelLength=yylength() - trailingNewLineLength;
int back=trailingNewLineLength;
String yytext=yytext();
if (yytext.charAt(labelLength - 1) == ';') {
labelLength--;
back++;
}
if (isEndHereOrNowdoc(heredoc)) {
int indexOfHeredocId=yytext().indexOf(heredoc);
back+=labelLength - indexOfHeredocId;
yypushback(back);
yybegin(ST_END_HEREDOC);
}
 else {
yypushback(yylength());
yybegin(ST_HEREDOC);
}
}
case 334:
break;
case 32:
{
return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
}
case 335:
break;
case 128:
{
return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
}
case 336:
break;
case 6:
{
return createSymbol(ASTPHP5Symbols.T_PLUS);
}
case 337:
break;
case 155:
{
return createFullSymbol(ASTPHP5Symbols.T_CLASS);
}
case 338:
break;
case 120:
{
return createFullSymbol(ASTPHP5Symbols.T_FOR);
}
case 339:
break;
case 163:
{
yypushback(3);
pushState(ST_LOOKING_FOR_PROPERTY);
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 340:
break;
case 81:
{
return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
}
case 341:
break;
case 74:
{
return createFullSymbol(ASTPHP5Symbols.T_DO);
}
case 342:
break;
case 96:
{
return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
}
case 343:
break;
case 40:
{
int indexOfNewline=yytext().indexOf(""\r"");
if (indexOfNewline == -1) {
indexOfNewline=yytext().indexOf(""\n"");
}
if (indexOfNewline > 0) {
yypushback(yylength() - indexOfNewline);
}
updateHeredocBodyInfo();
}
case 344:
break;
case 4:
{
return createFullSymbol(ASTPHP5Symbols.T_STRING);
}
case 345:
break;
case 177:
{
return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
}
case 346:
break;
case 5:
{
return createSymbol(ASTPHP5Symbols.T_NEKUDA);
}
case 347:
break;
case 144:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
}
case 348:
break;
case 121:
{
return createFullSymbol(ASTPHP5Symbols.T_NEW);
}
case 349:
break;
case 57:
{
bracket--;
return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
}
case 350:
break;
case 206:
{
return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
}
case 351:
break;
case 49:
{
yypushback(yylength());
popState();
pushState(ST_IN_SCRIPTING);
}
case 352:
break;
case 164:
{
isEndedPhp=false;
whitespaceEndPosition=getTokenStartPosition() + yylength();
yybegin(ST_IN_SCRIPTING);
}
case 353:
break;
case 67:
{
return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
}
case 354:
break;
case 75:
{
return createFullSymbol(ASTPHP5Symbols.T_FN);
}
case 355:
break;
case 8:
{
whitespaceEndPosition=getTokenStartPosition() + yylength();
}
case 356:
break;
case 183:
{
return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
}
case 357:
break;
case 211:
{
return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
}
case 358:
break;
case 181:
{
return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
}
case 359:
break;
case 156:
{
return createFullSymbol(ASTPHP5Symbols.T_CLONE);
}
case 360:
break;
case 148:
{
return createFullSymbol(ASTPHP5Symbols.T_ISSET);
}
case 361:
break;
case 21:
{
return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
}
case 362:
break;
case 172:
{
return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
}
case 363:
break;
case 15:
{
handleCommentStart();
yybegin(ST_ONE_LINE_COMMENT);
}
case 364:
break;
case 123:
{
return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
}
case 365:
break;
case 62:
{
if (short_tags_allowed || yylength() > 2) {
yybegin(ST_IN_SCRIPTING);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 366:
break;
case 145:
{
return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
}
case 367:
break;
case 215:
{
yybegin(ST_HALTED_COMPILER);
return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
}
case 368:
break;
case 86:
{
return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
}
case 369:
break;
case 89:
{
return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
}
case 370:
break;
case 107:
{
if (isEndHereOrNowdoc(nowdoc)) {
int indexOfNowdocId=yytext().indexOf(nowdoc);
int back=yylength() - indexOfNowdocId - nowdoc.length();
yypushback(back);
nowdoc=null;
nowdoc_len=0;
nowdocBody.delete(0,nowdocBody.length());
nowdocBodyStart=-1;
nowdocBodyLength=0;
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
}
 else {
yypushback(1);
yybegin(ST_NOWDOC);
updateNowdocBodyInfo();
}
}
case 371:
break;
case 129:
{
return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
}
case 372:
break;
case 118:
{
return createFullSymbol(ASTPHP5Symbols.T_TRY);
}
case 373:
break;
case 151:
{
return createFullSymbol(ASTPHP5Symbols.T_FINAL);
}
case 374:
break;
case 195:
{
return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
}
case 375:
break;
case 173:
{
return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
}
case 376:
break;
case 39:
{
yybegin(ST_IN_SCRIPTING);
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 377:
break;
case 7:
{
return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
}
case 378:
break;
case 112:
{
if (asp_tags || yytext().charAt(0) != '%') {
isEndedPhp=true;
handleLineCommentEnd();
yypushback(yylength());
yybegin(ST_IN_SCRIPTING);
}
}
case 379:
break;
case 194:
{
return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
}
case 380:
break;
case 115:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
}
case 381:
break;
case 64:
{
return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
}
case 382:
break;
case 27:
{
return createSymbol(ASTPHP5Symbols.T_PRECENT);
}
case 383:
break;
case 212:
{
comment=yytext();
handleVarComment();
}
case 384:
break;
case 83:
{
isEndedPhp=true;
yybegin(YYINITIAL);
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
case 385:
break;
case 94:
{
if (asp_tags) {
yybegin(YYINITIAL);
return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
}
 else {
return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
}
}
case 386:
break;
case 191:
{
return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
}
case 387:
break;
case 189:
{
return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
}
case 388:
break;
case 30:
{
return createSymbol(ASTPHP5Symbols.T_KOVA);
}
case 389:
break;
case 43:
{
heredoc=null;
resetHeredocBodyInfo();
yybegin(ST_IN_SCRIPTING);
int back=0;
if (yytext().charAt(yylength() - 1) == ';') {
back++;
}
yypushback(back);
return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
}
case 390:
break;
case 10:
{
yybegin(ST_DOUBLE_QUOTES);
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 391:
break;
case 193:
{
return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
}
case 392:
break;
case 117:
{
return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
}
case 393:
break;
case 72:
{
return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
}
case 394:
break;
case 136:
{
int len=yylength();
yypushback(2);
comment=yytext();
}
case 395:
break;
case 196:
{
return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
}
case 396:
break;
case 85:
{
return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
}
case 397:
break;
case 122:
{
return createFullSymbol(ASTPHP5Symbols.T_USE);
}
case 398:
break;
case 82:
{
return createSymbol(ASTPHP5Symbols.T_SR);
}
case 399:
break;
case 14:
{
return createSymbol(ASTPHP5Symbols.T_EQUAL);
}
case 400:
break;
case 31:
{
return createSymbol(ASTPHP5Symbols.T_COMMA);
}
case 401:
break;
case 175:
{
return createFullSymbol(ASTPHP5Symbols.T_DIR);
}
case 402:
break;
case 202:
{
return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
}
case 403:
break;
case 52:
{
yypushback(1);
popState();
return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
}
case 404:
break;
case 65:
{
return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
}
case 405:
break;
case 109:
{
return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
}
case 406:
break;
case 9:
{
return createSymbol(ASTPHP5Symbols.T_DOLLAR);
}
case 407:
break;
case 66:
{
return createSymbol(ASTPHP5Symbols.T_INC);
}
case 408:
break;
case 76:
{
return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
}
case 409:
break;
case 88:
{
return createSymbol(ASTPHP5Symbols.T_SL);
}
case 410:
break;
case 68:
{
return createFullSymbol(ASTPHP5Symbols.T_AS);
}
case 411:
break;
case 210:
{
return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
}
case 412:
break;
case 130:
{
return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
}
case 413:
break;
case 71:
{
return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
}
case 414:
break;
case 34:
{
return createSymbol(ASTPHP5Symbols.T_AT);
}
case 415:
break;
case 53:
{
return createSymbol(ASTPHP5Symbols.T_QUATE);
}
case 416:
break;
case 188:
{
return createFullSymbol(ASTPHP5Symbols.T_LINE);
}
case 417:
break;
case 186:
{
int bprefix=(yytext().charAt(0) != '<') ? 1 : 0;
int startString=3 + bprefix;
nowdoc_len=yylength() - bprefix - 3- 2- 1- (yytext().charAt(yylength() - 2) == '\r' ? 1 : 0);
while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
startString++;
nowdoc_len--;
}
startString++;
nowdoc=yytext().substring(startString,nowdoc_len + startString);
yybegin(ST_START_NOWDOC);
return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
}
case 418:
break;
case 176:
{
return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
}
case 419:
break;
case 69:
{
return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
}
case 420:
break;
case 208:
{
return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
}
case 421:
break;
case 179:
{
return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
}
case 422:
break;
case 99:
{
return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
}
case 423:
break;
case 90:
{
return createSymbol(ASTPHP5Symbols.T_POW);
}
case 424:
break;
case 140:
{
return createFullSymbol(ASTPHP5Symbols.T_CASE);
}
case 425:
break;
case 187:
{
return createFullSymbol(ASTPHP5Symbols.T_FILE);
}
case 426:
break;
case 108:
{
return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
}
case 427:
break;
case 114:
{
return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
}
case 428:
break;
case 54:
{
return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
}
case 429:
break;
case 58:
{
}
case 430:
break;
default :
if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
zzAtEOF=true;
zzDoEOF();
switch (zzLexicalState) {
case ST_DOCBLOCK:
{
if (yytext().length() > 0) {
yypushback(1);
comment=yytext();
}
 else {
return createSymbol(ASTPHP5Symbols.EOF);
}
}
case 805:
break;
default :
{
return createSymbol(ASTPHP5Symbols.EOF);
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
17,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 41:
{
    if (yytext().endsWith(""}"")) {
      yypushback(1);
    }
    syntax=Syntax.PYTHON;
    return LatteTopTokenId.T_LATTE;
  }
case 42:
break;
case 39:
{
if (yytext().endsWith(""}"")) {
  yypushback(1);
}
syntax=Syntax.LATTE;
return LatteTopTokenId.T_LATTE;
}
case 43:
break;
case 10:
{
return LatteTopTokenId.T_LATTE_ERROR;
}
case 44:
break;
case 24:
{
if (yylength() > 3) {
yypushback(3);
return LatteTopTokenId.T_HTML;
}
if (syntax == Syntax.ASP) {
pushState(ST_COMMENT);
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 45:
break;
case 6:
{
if (curlyInBalance(yytext())) {
return LatteTopTokenId.T_LATTE;
}
}
case 46:
break;
case 23:
{
if (yylength() > 3) {
yypushback(3);
return LatteTopTokenId.T_HTML;
}
yypushback(1);
if (syntax == Syntax.ASP) {
pushState(ST_ASP);
return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
}
}
case 47:
break;
case 16:
{
if (curlyInBalance(yytext().substring(0,yylength() - 1))) {
yypushback(1);
return LatteTopTokenId.T_LATTE;
}
}
case 48:
break;
case 9:
{
yypushback(yylength());
pushState(ST_HIGHLIGHTING_ERROR);
}
case 49:
break;
case 20:
{
if (yylength() > 3) {
yypushback(3);
return LatteTopTokenId.T_HTML;
}
if (syntax == Syntax.PYTHON) {
pushState(ST_COMMENT);
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 50:
break;
case 31:
{
String text=yytext().toLowerCase().trim();
String attributeName=text.substring(0,text.length() - 2);
if (attributeName.endsWith(""n:syntax"")) {
tags.peek().setIsSyntax(true);
pushState(ST_IN_SYNTAX_ATTR);
}
 else {
pushState(ST_N_ATTR_DOUBLE);
}
return LatteTopTokenId.T_HTML;
}
case 51:
break;
case 30:
{
HtmlTag tag=tags.pop();
if (tag.isSyntax()) {
syntax=Syntax.LATTE;
}
popState();
}
case 52:
break;
case 28:
{
popState();
syntax=Syntax.ASP;
return LatteTopTokenId.T_LATTE;
}
case 53:
break;
case 34:
{
popState();
syntax=Syntax.DOUBLE;
return LatteTopTokenId.T_LATTE;
}
case 54:
break;
case 37:
{
if (yytext().endsWith(""}"")) {
yypushback(1);
}
syntax=Syntax.ASP;
return LatteTopTokenId.T_LATTE;
}
case 55:
break;
case 11:
{
if (yylength() > 2) {
yypushback(2);
return LatteTopTokenId.T_HTML;
}
if (syntax == Syntax.LATTE) {
pushState(ST_COMMENT);
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 56:
break;
case 14:
{
if (yylength() > 2) {
yypushback(2);
return LatteTopTokenId.T_HTML;
}
yypushback(1);
if (syntax == Syntax.LATTE) {
pushState(ST_LATTE);
return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
}
 else {
popState();
return LatteTopTokenId.T_HTML;
}
}
case 57:
break;
case 18:
{
yypushback(1);
popState();
return LatteTopTokenId.T_LATTE;
}
case 58:
break;
case 29:
{
popState();
syntax=Syntax.OFF;
return LatteTopTokenId.T_LATTE;
}
case 59:
break;
case 3:
{
yypushback(1);
pushState(ST_POSSIBLE_LATTE);
}
case 60:
break;
case 25:
{
if (syntax == Syntax.PYTHON) {
popState();
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 61:
break;
case 38:
{
if (yytext().endsWith(""}"")) {
yypushback(1);
}
syntax=Syntax.OFF;
return LatteTopTokenId.T_LATTE;
}
case 62:
break;
case 4:
{
yypushback(yylength());
popState();
}
case 63:
break;
case 1:
{
return LatteTopTokenId.T_LATTE_COMMENT;
}
case 64:
break;
case 12:
{
tags.push(new HtmlTag());
pushState(ST_IN_HTML_TAG);
}
case 65:
break;
case 21:
{
if (yylength() > 3) {
yypushback(3);
return LatteTopTokenId.T_HTML;
}
yypushback(1);
if (syntax == Syntax.DOUBLE) {
pushState(ST_DOUBLE);
return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
}
if (syntax == Syntax.PYTHON) {
pushState(ST_PYTHON_DOUBLE);
return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
}
if (syntax == Syntax.LATTE) {
yypushback(1);
}
}
case 66:
break;
case 5:
{
popState();
}
case 67:
break;
case 15:
{
yypushback(1);
popState();
return LatteTopTokenId.T_HTML;
}
case 68:
break;
case 8:
{
return LatteTopTokenId.T_LATTE;
}
case 69:
break;
case 40:
{
if (yytext().endsWith(""}"")) {
yypushback(1);
}
syntax=Syntax.DOUBLE;
return LatteTopTokenId.T_LATTE;
}
case 70:
break;
case 35:
{
popState();
syntax=Syntax.PYTHON;
return LatteTopTokenId.T_LATTE;
}
case 71:
break;
case 27:
{
if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
popState();
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 72:
break;
case 17:
{
if (!tags.isEmpty()) {
HtmlTag tag=tags.pop();
if (tag.isSyntax()) {
syntax=Syntax.LATTE;
}
}
popState();
}
case 73:
break;
case 32:
{
String text=yytext().toLowerCase().trim();
String attributeName=text.substring(0,text.length() - 2);
if (attributeName.endsWith(""n:syntax"")) {
tags.peek().setIsSyntax(true);
pushState(ST_IN_SYNTAX_ATTR);
}
 else {
pushState(ST_N_ATTR_SINGLE);
}
return LatteTopTokenId.T_HTML;
}
case 74:
break;
case 36:
{
syntax=Syntax.LATTE;
return LatteTopTokenId.T_LATTE;
}
case 75:
break;
case 7:
{
popState();
return LatteTopTokenId.T_LATTE_CLOSE_DELIMITER;
}
case 76:
break;
case 26:
{
if (syntax == Syntax.ASP) {
popState();
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 77:
break;
case 19:
{
if (yylength() > 3) {
yypushback(3);
return LatteTopTokenId.T_HTML;
}
yypushback(1);
if (syntax == Syntax.PYTHON) {
pushState(ST_PYTHON);
return LatteTopTokenId.T_LATTE_OPEN_DELIMITER;
}
}
case 78:
break;
case 13:
{
if (syntax == Syntax.LATTE) {
popState();
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 79:
break;
case 22:
{
if (yylength() > 3) {
yypushback(3);
return LatteTopTokenId.T_HTML;
}
if (syntax == Syntax.DOUBLE || syntax == Syntax.PYTHON) {
pushState(ST_COMMENT);
return LatteTopTokenId.T_LATTE_COMMENT_DELIMITER;
}
}
case 80:
break;
case 33:
{
popState();
syntax=Syntax.LATTE;
return LatteTopTokenId.T_LATTE;
}
case 81:
break;
case 2:
{
}
case 82:
break;
default :
if (zzInput == YYEOF) {
if (input.readLength() > 0) {
input.backup(1);
return LatteTopTokenId.T_HTML;
}
 else {
return null;
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
18,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 19:
{
    if (lexing == Lexing.NORMAL) {
      yypushback(yylength());
      pushState(ST_VERBATIM_START);
    }
  }
case 21:
break;
case 18:
{
if (lexing != Lexing.VERBATIM) {
  int indexOfRawBlockStart=yytext().lastIndexOf(""{%"");
  yypushback(yylength() - indexOfRawBlockStart);
  pushState(ST_RAW_END);
}
}
case 22:
break;
case 20:
{
if (lexing != Lexing.RAW) {
int indexOfVerbatimBlockStart=yytext().lastIndexOf(""{%"");
yypushback(yylength() - indexOfVerbatimBlockStart);
pushState(ST_VERBATIM_END);
}
}
case 23:
break;
case 8:
{
if (lexing == Lexing.NORMAL) {
if (yylength() > 2) {
yypushback(2);
return TwigTopTokenId.T_HTML;
}
pushState(ST_BLOCK);
return TwigTopTokenId.T_TWIG_BLOCK_START;
}
}
case 24:
break;
case 3:
{
if (!probablyInDString && !probablyInSString) {
curlyBalance--;
}
}
case 25:
break;
case 12:
{
if (yylength() > 2) {
yypushback(2);
return TwigTopTokenId.T_HTML;
}
lexing=Lexing.NORMAL;
return TwigTopTokenId.T_TWIG_BLOCK_START;
}
case 26:
break;
case 16:
{
if (!probablyInDString && !probablyInSString) {
if (curlyBalance >= 0 && curlyBalance <= 2) {
curlyBalance--;
yypushback(2);
}
 else {
curlyBalance-=3;
}
}
}
case 27:
break;
case 15:
{
popState();
return TwigTopTokenId.T_TWIG_COMMENT;
}
case 28:
break;
case 17:
{
if (lexing == Lexing.NORMAL) {
yypushback(yylength());
pushState(ST_RAW_START);
}
}
case 29:
break;
case 2:
{
if (!probablyInDString && !probablyInSString) {
curlyBalance++;
}
}
case 30:
break;
case 9:
{
if (lexing == Lexing.NORMAL) {
int textLength=yylength();
yypushback(2);
pushState(ST_COMMENT);
if (textLength > 2) {
return TwigTopTokenId.T_HTML;
}
}
}
case 31:
break;
case 5:
{
if (!probablyInDString) {
probablyInSString=!probablyInSString;
}
}
case 32:
break;
case 13:
{
if (yylength() > 2) {
yypushback(2);
return TwigTopTokenId.T_HTML;
}
lexing=Lexing.VERBATIM;
return TwigTopTokenId.T_TWIG_BLOCK_START;
}
case 33:
break;
case 4:
{
if (!probablyInSString) {
probablyInDString=!probablyInDString;
}
}
case 34:
break;
case 6:
{
return TwigTopTokenId.T_TWIG_OTHER;
}
case 35:
break;
case 7:
{
if (lexing == Lexing.NORMAL) {
if (yylength() > 2) {
yypushback(2);
return TwigTopTokenId.T_HTML;
}
pushState(ST_VAR);
curlyBalance=0;
return TwigTopTokenId.T_TWIG_VAR_START;
}
}
case 36:
break;
case 10:
{
if (yylength() > 2) {
yypushback(2);
return TwigTopTokenId.T_HTML;
}
lexing=Lexing.RAW;
return TwigTopTokenId.T_TWIG_BLOCK_START;
}
case 37:
break;
case 11:
{
if (yylength() > 2) {
yypushback(2);
return TwigTopTokenId.T_TWIG_BLOCK;
}
popState();
return TwigTopTokenId.T_TWIG_BLOCK_END;
}
case 38:
break;
case 14:
{
if (!probablyInDString && !probablyInSString) {
if (yylength() > 2) {
if (curlyBalance == 0 || curlyBalance == 1) {
if (zzInput == YYEOF) {
yypushback(3);
}
 else {
yypushback(2);
}
return TwigTopTokenId.T_TWIG_VAR;
}
}
if (curlyBalance == 0) {
popState();
return TwigTopTokenId.T_TWIG_VAR_END;
}
 else if (curlyBalance == 1) {
popState();
curlyBalance=0;
return TwigTopTokenId.T_TWIG_VAR_END;
}
 else {
curlyBalance-=2;
}
}
}
case 39:
break;
case 1:
{
}
case 40:
break;
default :
if (zzInput == YYEOF) {
if (input.readLength() > 0) {
input.backup(1);
if (zzLexicalState == ST_BLOCK) {
return TwigTopTokenId.T_TWIG_BLOCK;
}
 else if (zzLexicalState == ST_VAR) {
return TwigTopTokenId.T_TWIG_VAR;
}
 else {
return TwigTopTokenId.T_HTML;
}
}
 else {
return null;
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
19,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 46:
{
    parenBalance=1;
    lastReaded=bracketBalance=braceBalance=0;
    yypushback(1);
    yybegin(JAVASCRIPT_VALUE);
  }
case 122:
break;
case 56:
{
braceBalance++;
lastReaded=tokenLength;
}
case 123:
break;
case 19:
{
yypushback(1);
yybegin(DOCTYPE_STRING_END);
if (tokenLength > 1) {
return JadeTokenId.DOCTYPE_STRING_END;
}
}
case 124:
break;
case 95:
{
if (!hasCssId) {
hasCssId=true;
return JadeTokenId.CSS_ID;
}
 else {
return JadeTokenId.UNKNOWN;
}
}
case 125:
break;
case 18:
{
yypushback(1);
yybegin(DOCTYPE);
if (tokenLength > 1) {
return JadeTokenId.UNKNOWN;
}
}
case 126:
break;
case 88:
{
parenBalance=1;
lastReaded=bracketBalance=braceBalance=0;
yybegin(JAVASCRIPT_VALUE);
return JadeTokenId.BRACKET_LEFT_PAREN;
}
case 127:
break;
case 105:
{
int delta=tokenLength - lastReaded;
if (delta > 0) {
yypushback(delta);
yybegin(AFTER_EOL);
if (tokenLength > delta) {
return JadeTokenId.JAVASCRIPT;
}
}
yypushback(tokenLength);
yybegin(AFTER_EOL);
}
case 128:
break;
case 67:
{
continueJS=false;
lastReaded=tokenLength;
yybegin(JAVASCRIPT_VALUE);
}
case 129:
break;
case 76:
{
yypushback(1);
yybegin(JAVASCRIPT_AFTER_EACH);
}
case 130:
break;
case 98:
{
yypushback(2);
yybegin(JAVASCRIPT_EXPRESSION);
whereToGo=IN_PLAIN_TEXT_BLOCK;
if (tokenLength > 2) {
return JadeTokenId.TEXT;
}
}
case 131:
break;
case 102:
{
return JadeTokenId.FILTER;
}
case 132:
break;
case 4:
{
return JadeTokenId.UNKNOWN;
}
case 133:
break;
case 49:
{
continueJS=true;
lastReaded=tokenLength;
}
case 134:
break;
case 84:
{
yybegin(MIXIN_CALL_ARGUMENT);
parenBalance=1;
braceBalance=0;
return JadeTokenId.OPERATOR_COMMA;
}
case 135:
break;
case 75:
{
yybegin(AFTER_TAG);
dotAfterTag=true;
hasCssId=false;
return JadeTokenId.TAG;
}
case 136:
break;
case 112:
{
yybegin(AFTER_TAG);
dotAfterTag=true;
hasCssId=false;
lastTag=TAG_TYPE.STYLE;
return JadeTokenId.TAG;
}
case 137:
break;
case 104:
{
yybegin(AFTER_EACH);
return JadeTokenId.KEYWORD_FOR;
}
case 138:
break;
case 43:
{
yybegin(HTML_ATTRIBUTE_VALUE);
return JadeTokenId.OPERATOR_ASSIGNMENT;
}
case 139:
break;
case 116:
{
yybegin(AFTER_CODE_DELIMITER);
return JadeTokenId.KEYWORD_UNLESS;
}
case 140:
break;
case 23:
{
return JadeTokenId.OPERATOR_DIVISION;
}
case 141:
break;
case 7:
{
indent=tokenLength;
return JadeTokenId.WHITESPACE;
}
case 142:
break;
case 13:
{
return JadeTokenId.DOCTYPE_ATTRIBUTE;
}
case 143:
break;
case 6:
{
yybegin(AFTER_TAG);
dotAfterTag=true;
hasCssId=false;
lastTag=TAG_TYPE.OTHER;
return JadeTokenId.TAG;
}
case 144:
break;
case 2:
{
return JadeTokenId.UNKNOWN;
}
case 145:
break;
case 59:
{
switch (zzInput) {
case '(':
parenBalance++;
break;
case '{':
braceBalance++;
break;
case '}':
braceBalance--;
break;
case ')':
parenBalance--;
break;
case ',':
case '\r':
case '\n':
if (parenBalance == 1 && braceBalance == 0) {
parenBalance=0;
}
break;
}
if (parenBalance == 0 && braceBalance == 0) {
yypushback(1);
yybegin(HTML_ATTRIBUTE);
parenBalance=1;
if (tokenLength > 1) {
return JadeTokenId.JAVASCRIPT;
}
}
}
case 146:
break;
case 41:
{
return JadeTokenId.EOL;
}
case 147:
break;
case 58:
{
bracketBalance--;
lastReaded=tokenLength;
}
case 148:
break;
case 92:
{
yybegin(IN_FILTER_BLOCK);
blockIndent=-1;
return JadeTokenId.FILTER;
}
case 149:
break;
case 52:
{
bracketBalance++;
lastReaded=tokenLength;
}
case 150:
break;
case 22:
{
yybegin(TEXT_LINE);
return JadeTokenId.WHITESPACE;
}
case 151:
break;
case 48:
{
if (zzInput == ')') parenBalance--;
if (checkEndJS(tokenLength,(char)zzInput)) {
return JadeTokenId.JAVASCRIPT;
}
if (zzInput == ')') parenBalance++;
}
case 152:
break;
case 74:
{
yybegin(AFTER_EOL);
return JadeTokenId.EOL;
}
case 153:
break;
case 25:
{
yybegin(AFTER_COLON_IN_TAG);
return JadeTokenId.OPERATOR_COLON;
}
case 154:
break;
case 24:
{
yybegin(AFTER_PLAIN_TEXT_BLOCK_DELIMITER);
return JadeTokenId.PLAIN_TEXT_DELIMITER;
}
case 155:
break;
case 83:
{
yybegin(MIXIN_CALL_ARGUMENT);
parenBalance=1;
braceBalance=0;
return JadeTokenId.BRACKET_LEFT_PAREN;
}
case 156:
break;
case 78:
{
return JadeTokenId.MIXIN_NAME;
}
case 157:
break;
case 100:
{
braceBalance=1;
return JadeTokenId.EXPRESSION_DELIMITER_OPEN;
}
case 158:
break;
case 33:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength > 1) {
return JadeTokenId.UNBUFFERED_COMMENT;
}
}
case 159:
break;
case 111:
{
yybegin(AFTER_BLOCK);
return JadeTokenId.KEYWORD_BLOCK;
}
case 160:
break;
case 21:
{
yybegin(TEXT_LINE);
}
case 161:
break;
case 115:
{
yybegin(AFTER_TAG);
dotAfterTag=true;
hasCssId=false;
lastTag=TAG_TYPE.SCRIPT;
return JadeTokenId.TAG;
}
case 162:
break;
case 30:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength > 1) {
return JadeTokenId.COMMENT;
}
}
case 163:
break;
case 37:
{
yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
eolPosition=tokenLength;
}
case 164:
break;
case 82:
{
return JadeTokenId.BRACKET_RIGHT_PAREN;
}
case 165:
break;
case 87:
{
yybegin(AFTER_TAG);
return JadeTokenId.UNKNOWN;
}
case 166:
break;
case 93:
{
yypushback(2);
yybegin(JAVASCRIPT_EXPRESSION);
whereToGo=TEXT_LINE;
}
case 167:
break;
case 28:
{
yypushback(1);
yybegin(JAVASCRIPT_WITH_BLOCK_EXPANSION);
}
case 168:
break;
case 31:
{
int indentInComment=tokenLength - eolPosition;
if (indent >= indentInComment) {
yypushback(indentInComment + 1);
yybegin(AFTER_EOL);
if (tokenLength > (indentInComment + 1)) {
return JadeTokenId.COMMENT;
}
}
 else {
yybegin(IN_COMMENT);
}
}
case 169:
break;
case 26:
{
yybegin(HTML_ATTRIBUTE);
return JadeTokenId.BRACKET_LEFT_PAREN;
}
case 170:
break;
case 9:
{
yybegin(IN_PLAIN_TEXT_LINE);
}
case 171:
break;
case 50:
{
yybegin(JS_STRING);
}
case 172:
break;
case 99:
{
yybegin(HTML_ATTRIBUTE_VALUE);
return JadeTokenId.OPERATOR_NOT_EQUALS;
}
case 173:
break;
case 8:
{
yybegin(AFTER_CODE_DELIMITER);
return JadeTokenId.CODE_DELIMITER;
}
case 174:
break;
case 120:
{
yybegin(AFTER_INCLUDE);
return JadeTokenId.KEYWORD_INCLUDE;
}
case 175:
break;
case 11:
{
hasCssId=false;
yypushback(1);
yybegin(AFTER_TAG);
}
case 176:
break;
case 70:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength - 1 > 0) {
return JadeTokenId.FILTER_TEXT;
}
}
case 177:
break;
case 63:
{
braceBalance++;
}
case 178:
break;
case 101:
{
yypushback(2);
yybegin(JAVASCRIPT_EXPRESSION);
whereToGo=IN_FILTER_BLOCK;
if (tokenLength > 2) {
return JadeTokenId.FILTER_TEXT;
}
}
case 179:
break;
case 80:
{
return JadeTokenId.UNKNOWN;
}
case 180:
break;
case 16:
{
yybegin(DOCTYPE_STRING);
return JadeTokenId.DOCTYPE_STRING_START;
}
case 181:
break;
case 66:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength - 1 > 0) {
return JadeTokenId.UNKNOWN;
}
}
case 182:
break;
case 55:
{
yybegin(JS_SSTRING);
}
case 183:
break;
case 65:
{
yypushback(1);
yybegin(AFTER_TAG);
}
case 184:
break;
case 108:
{
return JadeTokenId.KEYWORD_ELSE;
}
case 185:
break;
case 29:
{
yybegin(IN_COMMENT_AFTER_EOL);
eolPosition=tokenLength;
}
case 186:
break;
case 118:
{
yybegin(AFTER_TAG);
return JadeTokenId.KEYWORD_DEFAULT;
}
case 187:
break;
case 77:
{
lastReaded=tokenLength;
}
case 188:
break;
case 72:
{
yypushback(1);
yybegin(FILEPATH);
}
case 189:
break;
case 68:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength - 1 > 0) {
return JadeTokenId.FILE_PATH;
}
}
case 190:
break;
case 53:
{
if (checkEndJS(tokenLength,(char)zzInput)) {
return JadeTokenId.JAVASCRIPT;
}
}
case 191:
break;
case 38:
{
yypushback(1);
yybegin(AFTER_EOL);
indent=0;
if (tokenLength > 1) {
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
}
case 192:
break;
case 20:
{
yybegin(DOCTYPE);
return JadeTokenId.DOCTYPE_STRING_END;
}
case 193:
break;
case 14:
{
yybegin(AFTER_EOL);
indent=0;
if (tokenLength > 0) {
return JadeTokenId.EOL;
}
}
case 194:
break;
case 15:
{
return JadeTokenId.WHITESPACE;
}
case 195:
break;
case 12:
{
yybegin(IN_PLAIN_TEXT_LINE);
return JadeTokenId.PLAIN_TEXT_DELIMITER;
}
case 196:
break;
case 97:
{
yypushback(2);
yybegin(JAVASCRIPT_EXPRESSION);
whereToGo=IN_PLAIN_TEXT_LINE;
if (tokenLength > 2) {
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
}
case 197:
break;
case 109:
{
yybegin(AFTER_EACH);
return JadeTokenId.KEYWORD_EACH;
}
case 198:
break;
case 5:
{
indent=0;
return JadeTokenId.EOL;
}
case 199:
break;
case 71:
{
int indentInBlock=tokenLength - eolPosition;
if (blockIndent < 0) {
blockIndent=indentInBlock;
}
if (blockIndent > indentInBlock) {
yypushback(indentInBlock);
yybegin(AFTER_EOL);
if (tokenLength > indentInBlock) {
return JadeTokenId.FILTER_TEXT;
}
}
yybegin(IN_FILTER_BLOCK);
}
case 200:
break;
case 54:
{
parenBalance--;
if (checkEndJS(tokenLength,(char)zzInput)) {
return JadeTokenId.JAVASCRIPT;
}
}
case 201:
break;
case 79:
{
yybegin(MIXIN_ARGUMENTS);
return JadeTokenId.BRACKET_LEFT_PAREN;
}
case 202:
break;
case 17:
{
yybegin(DOCTYPE);
return JadeTokenId.DOCTYPE_TEMPLATE;
}
case 203:
break;
case 36:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength - 1 > 0) {
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
}
case 204:
break;
case 61:
{
yybegin(AFTER_EOL);
indent=0;
return JadeTokenId.EOL;
}
case 205:
break;
case 91:
{
yybegin(AFTER_CODE_DELIMITER);
return JadeTokenId.KEYWORD_IN;
}
case 206:
break;
case 34:
{
int indentInComment=tokenLength - eolPosition;
if (indent >= indentInComment) {
yypushback(indentInComment);
yybegin(AFTER_EOL);
if (tokenLength > indentInComment) {
return JadeTokenId.UNBUFFERED_COMMENT;
}
}
 else {
yybegin(IN_UNBUFFERED_COMMENT);
}
}
case 207:
break;
case 107:
{
yybegin(AFTER_CODE_DELIMITER);
return JadeTokenId.KEYWORD_CASE;
}
case 208:
break;
case 114:
{
yybegin(AFTER_MIXIN);
return JadeTokenId.KEYWORD_MIXIN;
}
case 209:
break;
case 103:
{
yybegin(IN_UNBUFFERED_COMMENT);
return JadeTokenId.UNBUFFERED_COMMENT_DELIMITER;
}
case 210:
break;
case 45:
{
yybegin(AFTER_TAG);
return JadeTokenId.BRACKET_RIGHT_PAREN;
}
case 211:
break;
case 64:
{
braceBalance--;
if (braceBalance == 0) {
yypushback(1);
if (tokenLength > 1) {
return JadeTokenId.JAVASCRIPT;
}
}
 else if (braceBalance == -1) {
yybegin(whereToGo);
return JadeTokenId.EXPRESSION_DELIMITER_CLOSE;
}
}
case 212:
break;
case 69:
{
yybegin(IN_FILTER_BLOCK_AFTER_EOL);
eolPosition=tokenLength;
}
case 213:
break;
case 42:
{
return JadeTokenId.ATTRIBUTE;
}
case 214:
break;
case 32:
{
yybegin(IN_UNBUFFERED_COMMENT_AFTER_EOL);
eolPosition=tokenLength;
}
case 215:
break;
case 35:
{
yypushback(1);
yybegin(AFTER_EOL);
indent=0;
if (tokenLength - 1 > 0) {
return JadeTokenId.TEXT;
}
}
case 216:
break;
case 47:
{
lastReaded=tokenLength;
}
case 217:
break;
case 121:
{
yybegin(AFTER_ATTRIBUTES);
return JadeTokenId.ATTRIBUTE;
}
case 218:
break;
case 119:
{
yybegin(FILEPATH);
return JadeTokenId.KEYWORD_EXTENDS;
}
case 219:
break;
case 40:
{
blockIndent=-1;
eolPosition=0;
yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
return JadeTokenId.EOL;
}
case 220:
break;
case 96:
{
yypushback(2);
yybegin(JAVASCRIPT_EXPRESSION);
whereToGo=TEXT_LINE;
if (tokenLength > 2) {
return JadeTokenId.TEXT;
}
}
case 221:
break;
case 89:
{
yybegin(IN_COMMENT);
return JadeTokenId.COMMENT_DELIMITER;
}
case 222:
break;
case 27:
{
yypushback(1);
yybegin(JAVASCRIPT_LINE);
}
case 223:
break;
case 106:
{
return JadeTokenId.OPERATOR_REST_ARGUMENTS;
}
case 224:
break;
case 117:
{
yybegin(AFTER_DOCTYPE);
return JadeTokenId.DOCTYPE;
}
case 225:
break;
case 86:
{
switch (zzInput) {
case '(':
parenBalance++;
break;
case '{':
braceBalance++;
break;
case '}':
braceBalance--;
break;
case ')':
parenBalance--;
break;
case ',':
if (parenBalance == 1 && braceBalance == 0) {
parenBalance=0;
}
break;
}
if (parenBalance == 0 && braceBalance == 0) {
yypushback(1);
yybegin(AFTER_PLUS_MIXIN);
parenBalance=1;
if (tokenLength > 1) {
return JadeTokenId.JAVASCRIPT;
}
}
}
case 226:
break;
case 73:
{
yybegin(TEXT_LINE);
return JadeTokenId.BLOCK_NAME;
}
case 227:
break;
case 62:
{
yypushback(1);
yybegin(AFTER_EOL);
if (tokenLength - 1 > 0) {
return JadeTokenId.JAVASCRIPT;
}
}
case 228:
break;
case 57:
{
braceBalance--;
lastReaded=tokenLength;
}
case 229:
break;
case 3:
{
yypushback(1);
indent=0;
yybegin(AFTER_EOL);
}
case 230:
break;
case 10:
{
yybegin(AFTER_PLUS_MIXIN);
return JadeTokenId.OPERATOR_PLUS;
}
case 231:
break;
case 44:
{
return JadeTokenId.OPERATOR_COMMA;
}
case 232:
break;
case 110:
{
yybegin(AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION);
return JadeTokenId.KEYWORD_WHEN;
}
case 233:
break;
case 81:
{
return JadeTokenId.IDENTIFIER;
}
case 234:
break;
case 85:
{
yybegin(AFTER_TAG);
return JadeTokenId.BRACKET_LEFT_PAREN;
}
case 235:
break;
case 113:
{
yybegin(AFTER_CODE_DELIMITER);
return JadeTokenId.KEYWORD_WHILE;
}
case 236:
break;
case 51:
{
parenBalance++;
lastReaded=tokenLength;
}
case 237:
break;
case 60:
{
return JadeTokenId.JAVASCRIPT;
}
case 238:
break;
case 90:
{
yybegin(AFTER_CODE_DELIMITER);
return JadeTokenId.KEYWORD_IF;
}
case 239:
break;
case 39:
{
int currentIndent=tokenLength - eolPosition;
if (currentIndent <= indent) {
yybegin(AFTER_EOL);
indent=currentIndent;
if (tokenLength > currentIndent) {
yypushback(currentIndent);
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
 else {
return JadeTokenId.WHITESPACE;
}
}
if (blockIndent < 0) {
blockIndent=currentIndent;
}
if (blockIndent > currentIndent) {
yypushback(currentIndent);
yybegin(AFTER_EOL);
if (tokenLength > currentIndent) {
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
}
yybegin(IN_PLAIN_TEXT_BLOCK);
}
case 240:
break;
case 94:
{
return JadeTokenId.CSS_CLASS;
}
case 241:
break;
case 1:
{
}
case 242:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
switch (zzLexicalState) {
case IN_PLAIN_TEXT_BLOCK_AFTER_EOL:
{
if (input.readLength() > 0) {
input.backup(1);
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
 else {
return null;
}
}
case 305:
break;
case IN_PLAIN_TEXT_LINE:
{
if (input.readLength() > 0) {
input.backup(1);
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
 else {
return null;
}
}
case 306:
break;
case IN_COMMENT_AFTER_EOL:
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.COMMENT;
}
 else {
return null;
}
}
case 307:
break;
case IN_FILTER_BLOCK:
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.FILTER_TEXT;
}
 else {
return null;
}
}
case 308:
break;
case TEXT_LINE:
{
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.TEXT;
}
 else {
return null;
}
}
}
case 309:
break;
case IN_UNBUFFERED_COMMENT:
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.UNBUFFERED_COMMENT;
}
 else {
return null;
}
}
case 310:
break;
case IN_UNBUFFERED_COMMENT_AFTER_EOL:
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.UNBUFFERED_COMMENT;
}
 else {
return null;
}
}
case 311:
break;
case IN_FILTER_BLOCK_AFTER_EOL:
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.FILTER_TEXT;
}
 else {
return null;
}
}
case 312:
break;
case IN_PLAIN_TEXT_BLOCK:
{
if (input.readLength() > 0) {
input.backup(1);
return getTokenIdFromTagType(lastTag,JadeTokenId.PLAIN_TEXT);
}
 else {
return null;
}
}
case 313:
break;
case IN_COMMENT:
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.COMMENT;
}
 else {
return null;
}
}
case 314:
break;
default :
{
if (input.readLength() > 0) {
input.backup(1);
return JadeTokenId.UNKNOWN;
}
 else {
return null;
}
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
20,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 20:
{
    return JsTokenId.BRACKET_LEFT_PAREN;
  }
case 132:
break;
case 61:
{
if (!canFollowKeyword) {
  return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_IF;
}
case 133:
break;
case 27:
{
return JsTokenId.OPERATOR_BITWISE_NOT;
}
case 134:
break;
case 67:
{
return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
}
case 135:
break;
case 128:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_INTERFACE;
}
case 136:
break;
case 105:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_CLASS;
}
case 137:
break;
case 81:
{
return JsTokenId.OPERATOR_REST;
}
case 138:
break;
case 38:
{
yypushback(1);
yybegin(STRINGEND);
if (tokenLength - 1 > 0) {
return JsTokenId.STRING;
}
}
case 139:
break;
case 111:
{
return JsTokenId.DOC_COMMENT;
}
case 140:
break;
case 13:
{
yybegin(TEMPLATE);
return JsTokenId.TEMPLATE_BEGIN;
}
case 141:
break;
case 49:
{
braceBalances.push(Brace.JSX);
yybegin(INITIAL);
return JsTokenId.JSX_EXP_BEGIN;
}
case 142:
break;
case 54:
{
return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
}
case 143:
break;
case 8:
{
return JsTokenId.OPERATOR_NOT;
}
case 144:
break;
case 15:
{
yybegin(SSTRING);
return JsTokenId.STRING_BEGIN;
}
case 145:
break;
case 117:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_IMPORT;
}
case 146:
break;
case 75:
{
yypushback(2);
yybegin(TEMPLATEEXP);
if (tokenLength - 2 > 0) {
return JsTokenId.TEMPLATE;
}
}
case 147:
break;
case 82:
{
return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
}
case 148:
break;
case 63:
{
return JsTokenId.OPERATOR_EQUALS;
}
case 149:
break;
case 29:
{
return JsTokenId.OPERATOR_COLON;
}
case 150:
break;
case 131:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_IMPLEMENTS;
}
case 151:
break;
case 57:
{
return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
}
case 152:
break;
case 31:
{
return JsTokenId.OPERATOR_BITWISE_OR;
}
case 153:
break;
case 125:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_CONTINUE;
}
case 154:
break;
case 24:
{
return JsTokenId.OPERATOR_SEMICOLON;
}
case 155:
break;
case 100:
{
return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
}
case 156:
break;
case 16:
{
if (!canFollowLiteral || (lastNonWhiteToken != null && (lastNonWhiteToken == JsTokenId.IDENTIFIER || lastNonWhiteToken == JsTokenId.NUMBER))) {
return JsTokenId.OPERATOR_LOWER;
}
 else {
jsxBalances.push(0);
yypushback(1);
yybegin(JSX);
}
}
case 157:
break;
case 58:
{
return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
}
case 158:
break;
case 122:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_FINALLY;
}
case 159:
break;
case 37:
{
yypushback(1);
yybegin(INITIAL);
if (tokenLength - 1 > 0) {
return getErrorToken();
}
}
case 160:
break;
case 28:
{
return JsTokenId.OPERATOR_TERNARY;
}
case 161:
break;
case 19:
{
return JsTokenId.OPERATOR_ASSIGNMENT;
}
case 162:
break;
case 116:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_TYPEOF;
}
case 163:
break;
case 39:
{
yybegin(INITIAL);
return JsTokenId.STRING_END;
}
case 164:
break;
case 30:
{
return JsTokenId.OPERATOR_BITWISE_AND;
}
case 165:
break;
case 26:
{
return JsTokenId.OPERATOR_GREATER;
}
case 166:
break;
case 23:
{
if (!braceBalances.isEmpty()) {
Brace braceType=braceBalances.pop();
if (braceType == Brace.TEMPLATE) {
yypushback(1);
yybegin(TEMPLATEEXPEND);
}
 else if (braceType == Brace.JSX) {
yypushback(1);
yybegin(JSXEXPEND);
}
 else {
return JsTokenId.BRACKET_RIGHT_CURLY;
}
}
 else {
return JsTokenId.BRACKET_RIGHT_CURLY;
}
}
case 167:
break;
case 127:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_FUNCTION;
}
case 168:
break;
case 21:
{
return JsTokenId.BRACKET_RIGHT_PAREN;
}
case 169:
break;
case 77:
{
yypushback(1);
yybegin(REGEXPEND);
if (tokenLength - 1 > 0) {
return JsTokenId.REGEXP;
}
}
case 170:
break;
case 107:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_THROW;
}
case 171:
break;
case 84:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_NEW;
}
case 172:
break;
case 73:
{
return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
}
case 173:
break;
case 25:
{
return JsTokenId.OPERATOR_COMMA;
}
case 174:
break;
case 88:
{
return JsTokenId.OPERATOR_EQUALS_EXACTLY;
}
case 175:
break;
case 65:
{
return JsTokenId.OPERATOR_GREATER_EQUALS;
}
case 176:
break;
case 55:
{
return JsTokenId.OPERATOR_NOT_EQUALS;
}
case 177:
break;
case 95:
{
return JsTokenId.KEYWORD_TRUE;
}
case 178:
break;
case 68:
{
return JsTokenId.OPERATOR_AND;
}
case 179:
break;
case 72:
{
return JsTokenId.OPERATOR_INCREMENT;
}
case 180:
break;
case 5:
{
return JsTokenId.WHITESPACE;
}
case 181:
break;
case 80:
{
return JsTokenId.OPERATOR_NOT_EQUALS_EXACTLY;
}
case 182:
break;
case 86:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_LET;
}
case 183:
break;
case 70:
{
return JsTokenId.OPERATOR_OR;
}
case 184:
break;
case 124:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_PACKAGE;
}
case 185:
break;
case 120:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_EXTENDS;
}
case 186:
break;
case 93:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_ELSE;
}
case 187:
break;
case 87:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_VAR;
}
case 188:
break;
case 2:
{
yypushback(1);
yybegin(INITIAL);
}
case 189:
break;
case 98:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_WITH;
}
case 190:
break;
case 45:
{
yypushback(1);
yybegin(ERROR);
}
case 191:
break;
case 74:
{
return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
}
case 192:
break;
case 90:
{
return JsTokenId.OPERATOR_RIGHT_SHIFT;
}
case 193:
break;
case 35:
{
return JsTokenId.OPERATOR_AT;
}
case 194:
break;
case 56:
{
return JsTokenId.OPERATOR_DECREMENT;
}
case 195:
break;
case 114:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_STATIC;
}
case 196:
break;
case 46:
{
yybegin(INITIAL);
return JsTokenId.REGEXP_END;
}
case 197:
break;
case 79:
{
return JsTokenId.OPERATOR_EXPONENTIATION_ASSIGNMENT;
}
case 198:
break;
case 33:
{
return JsTokenId.OPERATOR_BITWISE_XOR;
}
case 199:
break;
case 43:
{
yybegin(INITIAL);
return JsTokenId.TEMPLATE_END;
}
case 200:
break;
case 94:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_CASE;
}
case 201:
break;
case 1:
{
yybegin(INITIAL);
if (tokenLength > 0) {
return JsTokenId.EOL;
}
}
case 202:
break;
case 40:
{
yypushback(1);
yybegin(INITIAL);
if (tokenLength - 1 > 0) {
return getErrorToken();
}
}
case 203:
break;
case 110:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_WHILE;
}
case 204:
break;
case 66:
{
return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
}
case 205:
break;
case 96:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_THIS;
}
case 206:
break;
case 130:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_INSTANCEOF;
}
case 207:
break;
case 104:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_CONST;
}
case 208:
break;
case 14:
{
yybegin(STRING);
return JsTokenId.STRING_BEGIN;
}
case 209:
break;
case 85:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_FOR;
}
case 210:
break;
case 113:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_EXPORT;
}
case 211:
break;
case 89:
{
return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
}
case 212:
break;
case 118:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_DELETE;
}
case 213:
break;
case 76:
{
braceBalances.push(Brace.TEMPLATE);
yybegin(INITIAL);
return JsTokenId.TEMPLATE_EXP_BEGIN;
}
case 214:
break;
case 3:
{
return getErrorToken();
}
case 215:
break;
case 6:
{
if (canFollowLiteral) {
yybegin(REGEXP);
return JsTokenId.REGEXP_BEGIN;
}
 else {
return JsTokenId.OPERATOR_DIVISION;
}
}
case 216:
break;
case 101:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_BREAK;
}
case 217:
break;
case 32:
{
return JsTokenId.OPERATOR_PLUS;
}
case 218:
break;
case 62:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_DO;
}
case 219:
break;
case 60:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_IN;
}
case 220:
break;
case 52:
{
if (canFollowLiteral) {
yypushback(1);
yybegin(REGEXP);
return JsTokenId.REGEXP_BEGIN;
}
 else {
return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
}
}
case 221:
break;
case 129:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_PROTECTED;
}
case 222:
break;
case 48:
{
yypushback(1);
yybegin(JSXEXP);
if (tokenLength - 1 > 0) {
return JsTokenId.JSX_TEXT;
}
}
case 223:
break;
case 91:
{
return JsTokenId.BLOCK_COMMENT;
}
case 224:
break;
case 7:
{
return JsTokenId.OPERATOR_MULTIPLICATION;
}
case 225:
break;
case 112:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_RETURN;
}
case 226:
break;
case 9:
{
return JsTokenId.IDENTIFIER;
}
case 227:
break;
case 97:
{
return JsTokenId.KEYWORD_NULL;
}
case 228:
break;
case 10:
{
return JsTokenId.NUMBER;
}
case 229:
break;
case 83:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_TRY;
}
case 230:
break;
case 121:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_DEFAULT;
}
case 231:
break;
case 78:
{
Integer balance=jsxBalances.isEmpty() ? 0 : jsxBalances.pop() - 1;
if (balance <= 0) {
yybegin(INITIAL);
return JsTokenId.JSX_TEXT;
}
 else {
jsxBalances.push(balance);
}
}
case 232:
break;
case 109:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_YIELD;
}
case 233:
break;
case 22:
{
if (!braceBalances.isEmpty()) {
braceBalances.push(Brace.EXP);
}
return JsTokenId.BRACKET_LEFT_CURLY;
}
case 234:
break;
case 53:
{
return JsTokenId.OPERATOR_EXPONENTIATION;
}
case 235:
break;
case 59:
{
return JsTokenId.OPERATOR_LOWER_EQUALS;
}
case 236:
break;
case 69:
{
return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
}
case 237:
break;
case 106:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_SUPER;
}
case 238:
break;
case 50:
{
yybegin(JSX);
return JsTokenId.JSX_EXP_END;
}
case 239:
break;
case 115:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_SWITCH;
}
case 240:
break;
case 119:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_PUBLIC;
}
case 241:
break;
case 99:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_VOID;
}
case 242:
break;
case 4:
{
return JsTokenId.EOL;
}
case 243:
break;
case 103:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_CATCH;
}
case 244:
break;
case 51:
{
yybegin(LCOMMENTEND);
return JsTokenId.LINE_COMMENT;
}
case 245:
break;
case 11:
{
return JsTokenId.OPERATOR_DOT;
}
case 246:
break;
case 108:
{
return JsTokenId.KEYWORD_FALSE;
}
case 247:
break;
case 41:
{
yypushback(1);
yybegin(SSTRINGEND);
if (tokenLength - 1 > 0) {
return JsTokenId.STRING;
}
}
case 248:
break;
case 34:
{
return JsTokenId.OPERATOR_MODULUS;
}
case 249:
break;
case 17:
{
return JsTokenId.BRACKET_LEFT_BRACKET;
}
case 250:
break;
case 126:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.KEYWORD_DEBUGGER;
}
case 251:
break;
case 102:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_AWAIT;
}
case 252:
break;
case 18:
{
return JsTokenId.BRACKET_RIGHT_BRACKET;
}
case 253:
break;
case 123:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_PRIVATE;
}
case 254:
break;
case 12:
{
return JsTokenId.OPERATOR_MINUS;
}
case 255:
break;
case 71:
{
return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
}
case 256:
break;
case 92:
{
if (!canFollowKeyword) {
return JsTokenId.IDENTIFIER;
}
return JsTokenId.RESERVED_ENUM;
}
case 257:
break;
case 42:
{
yypushback(1);
yybegin(TEMPLATEEND);
if (tokenLength - 1 > 0) {
return JsTokenId.TEMPLATE;
}
}
case 258:
break;
case 44:
{
yybegin(TEMPLATE);
return JsTokenId.TEMPLATE_EXP_END;
}
case 259:
break;
case 47:
{
Integer balance=jsxBalances.isEmpty() ? 0 : jsxBalances.pop();
jsxBalances.push(balance + 1);
}
case 260:
break;
case 36:
{
}
case 261:
break;
case 64:
{
return JsTokenId.OPERATOR_ARROW;
}
case 262:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
{
if (input.readLength() > 0) {
input.backup(1);
return getErrorToken();
}
 else {
return null;
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
21,{,"switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 6:
{
    return JsDocumentationTokenId.ASTERISK;
  }
case 24:
break;
case 9:
{
return JsDocumentationTokenId.BRACKET_LEFT_CURLY;
}
case 25:
break;
case 14:
{
yybegin(DOCBLOCK);
return JsDocumentationTokenId.COMMENT_DOC_START;
}
case 26:
break;
case 12:
{
return JsDocumentationTokenId.BRACKET_RIGHT_BRACKET;
}
case 27:
break;
case 11:
{
return JsDocumentationTokenId.BRACKET_LEFT_BRACKET;
}
case 28:
break;
case 7:
{
yybegin(AT);
yypushback(1);
}
case 29:
break;
case 20:
{
return JsDocumentationTokenId.COMMENT_END;
}
case 30:
break;
case 18:
{
yybegin(DOCBLOCK);
return JsDocumentationTokenId.STRING_END;
}
case 31:
break;
case 10:
{
return JsDocumentationTokenId.BRACKET_RIGHT_CURLY;
}
case 32:
break;
case 21:
{
yypushback(1);
return JsDocumentationTokenId.OTHER;
}
case 33:
break;
case 5:
{
return JsDocumentationTokenId.WHITESPACE;
}
case 34:
break;
case 19:
{
yybegin(DOCBLOCK_START);
}
case 35:
break;
case 13:
{
yypushback(1);
yybegin(DOCBLOCK);
return JsDocumentationTokenId.COMMENT_BLOCK_START;
}
case 36:
break;
case 16:
{
yypushback(1);
yybegin(DOCBLOCK);
if (tokenLength - 1 > 0) {
return JsDocumentationTokenId.UNKNOWN;
}
}
case 37:
break;
case 8:
{
return JsDocumentationTokenId.COMMA;
}
case 38:
break;
case 4:
{
yybegin(STRING);
return JsDocumentationTokenId.STRING_BEGIN;
}
case 39:
break;
case 3:
{
return JsDocumentationTokenId.OTHER;
}
case 40:
break;
case 2:
{
return JsDocumentationTokenId.EOL;
}
case 41:
break;
case 17:
{
yypushback(1);
yybegin(STRINGEND);
if (tokenLength - 1 > 0) {
return JsDocumentationTokenId.STRING;
}
}
case 42:
break;
case 22:
{
yybegin(DOCBLOCK);
return JsDocumentationTokenId.KEYWORD;
}
case 43:
break;
case 15:
{
yybegin(DOCBLOCK);
return JsDocumentationTokenId.AT;
}
case 44:
break;
case 23:
{
return JsDocumentationTokenId.HTML;
}
case 45:
break;
case 1:
{
}
case 46:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
{
if (input.readLength() > 0) {
input.backup(1);
return JsDocumentationTokenId.UNKNOWN;
}
 else {
return null;
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
",0,0,0,,
22,{,"switch (tag) {
case 256:
{
    params.setInt(COSName.COLUMNS,val);
    break;
  }
case 257:
{
  params.setInt(COSName.ROWS,val);
  break;
}
case 259:
{
if (val == 4) {
  k=-1;
}
if (val == 3) {
  k=0;
}
break;
}
case 262:
{
if (val == 1) {
params.setBoolean(COSName.BLACK_IS_1,true);
}
break;
}
case 266:
{
if (val != 1) {
throw new IOException(""FillOrder "" + val + "" is not supported"");
}
break;
}
case 273:
{
if (count == 1) {
dataoffset=val;
}
break;
}
case 274:
{
if (val != 1) {
throw new IOException(""Orientation "" + val + "" is not supported"");
}
break;
}
case 279:
{
if (count == 1) {
datalength=val;
}
break;
}
case 292:
{
if ((val & 1) != 0) {
k=50;
}
if ((val & 4) != 0) {
throw new IOException(""CCITT Group 3 'uncompressed mode' is not supported"");
}
if ((val & 2) != 0) {
throw new IOException(""CCITT Group 3 'fill bits before EOL' is not supported"");
}
break;
}
case 324:
{
if (count == 1) {
dataoffset=val;
}
break;
}
case 325:
{
if (count == 1) {
datalength=val;
}
break;
}
default :
{
}
}
",0,0,0,,
23,{,"switch (prev.getOpcode()) {
case OP_equals:
case OP_strictequals:
case OP_not:
case OP_greaterthan:
case OP_lessthan:
case OP_greaterequals:
case OP_lessequals:
case OP_istype:
case OP_istypelate:
case OP_instanceof:
case OP_deleteproperty:
case OP_in:
case OP_convert_b:
case OP_pushtrue:
case OP_pushfalse:
{
    delete(0);
    break;
  }
default :
{
}
}
",0,0,0,,
24,{,"switch (prev.getOpcode()) {
case OP_pushbyte:
{
    replace(1,InstructionFactory.getInstruction(OP_pushdouble,new Double(convertByteImmediateToDouble(prev.getImmediate()))));
    break;
  }
case OP_pushint:
case OP_pushuint:
{
  replace(1,InstructionFactory.getInstruction(OP_pushdouble,new Double(((Number)prev.getOperand(0)).doubleValue())));
  break;
}
case OP_pushdouble:
case OP_pushnan:
case OP_lf32:
case OP_lf64:
case OP_convert_d:
{
delete(0);
break;
}
default :
{
}
}
",0,0,0,,
25,{,"switch (prev.getOpcode()) {
case OP_convert_i:
case OP_coerce_i:
case OP_bitand:
case OP_bitor:
case OP_bitxor:
case OP_lshift:
case OP_rshift:
case OP_add_i:
case OP_subtract_i:
case OP_increment_i:
case OP_decrement_i:
case OP_multiply_i:
case OP_pushbyte:
case OP_pushshort:
case OP_pushint:
case OP_li8:
case OP_li16:
case OP_li32:
case OP_sxi1:
case OP_sxi8:
case OP_sxi16:
{
    delete(0);
    break;
  }
default :
{
}
}
",0,0,0,,
26,{,"switch (prev.getOpcode()) {
case OP_coerce_s:
case OP_convert_s:
case OP_pushstring:
case OP_typeof:
{
    delete(0);
    break;
  }
default :
{
}
}
",0,0,0,,
27,{,"switch (prev.getOpcode()) {
case OP_convert_u:
case OP_pushuint:
{
    delete(0);
    break;
  }
default :
{
}
}
",0,0,0,,
28,{,"switch (prev.getOpcode()) {
case OP_convert_b:
{
    replace(1,i.getInstruction());
    break;
  }
case OP_equals:
{
  replace(1,InstructionFactory.createModifiedInstruction(OP_ifne,i.getInstruction()));
  break;
}
case OP_strictequals:
{
replace(1,InstructionFactory.createModifiedInstruction(OP_ifstrictne,i.getInstruction()));
break;
}
case OP_lessthan:
{
replace(1,InstructionFactory.createModifiedInstruction(OP_ifnlt,i.getInstruction()));
break;
}
case OP_lessequals:
{
replace(1,InstructionFactory.createModifiedInstruction(OP_ifnle,i.getInstruction()));
break;
}
case OP_greaterthan:
{
replace(1,InstructionFactory.createModifiedInstruction(OP_ifngt,i.getInstruction()));
break;
}
case OP_greaterequals:
{
replace(1,InstructionFactory.createModifiedInstruction(OP_ifnge,i.getInstruction()));
break;
}
case OP_not:
{
InstructionInfo prev2=previous(2);
switch (prev2.getOpcode()) {
case OP_strictequals:
{
replace(2,InstructionFactory.createModifiedInstruction(OP_ifstricteq,i.getInstruction()));
break;
}
case OP_equals:
{
replace(2,InstructionFactory.createModifiedInstruction(OP_ifeq,i.getInstruction()));
break;
}
case OP_lessthan:
{
replace(2,InstructionFactory.createModifiedInstruction(OP_iflt,i.getInstruction()));
break;
}
case OP_lessequals:
{
replace(2,InstructionFactory.createModifiedInstruction(OP_ifle,i.getInstruction()));
break;
}
case OP_greaterthan:
{
replace(2,InstructionFactory.createModifiedInstruction(OP_ifgt,i.getInstruction()));
break;
}
case OP_greaterequals:
{
replace(2,InstructionFactory.createModifiedInstruction(OP_ifge,i.getInstruction()));
break;
}
default :
{
replace(1,InstructionFactory.createModifiedInstruction(OP_iftrue,i.getInstruction()));
break;
}
}
break;
}
default :
{
}
}
",0,0,0,,
29,{,"switch (prev.getOpcode()) {
case OP_callproperty:
{
    replace(1,InstructionFactory.createModifiedInstruction(OP_callpropvoid,prev.getInstruction()));
    break;
  }
case OP_callsuper:
{
  replace(1,InstructionFactory.createModifiedInstruction(OP_callsupervoid,prev.getInstruction()));
  break;
}
default :
{
}
}
",0,0,0,,
30,{,"switch (prev.getOpcode()) {
case OP_returnvoid:
{
    delete(0);
    break;
  }
case OP_pop:
{
  replace(1,i.getInstruction());
  break;
}
case OP_pushscope:
{
if (previous(2).getOpcode() == OP_getlocal0) replace(2,i.getInstruction());
break;
}
default :
{
}
}
",0,0,0,,
31,{,"switch (prev.getOpcode()) {
case OP_setlocal:
{
    if (cur.getInstruction().getImmediate() != prev.getInstruction().getImmediate())     break;
    Instruction[] newInsns={InstructionFactory.getInstruction(OP_dup),prev.getInstruction()};
    replace(1,newInsns);
    break;
  }
default :
{
}
}
",0,0,0,,
32,{,"switch (name.getKind()) {
case ABCConstants.CONSTANT_QnameA:
case ABCConstants.CONSTANT_MultinameA:
case ABCConstants.CONSTANT_MultinameLA:
case ABCConstants.CONSTANT_RTQnameA:
case ABCConstants.CONSTANT_RTQnameLA:
{
    break;
  }
case ABCConstants.CONSTANT_TypeName:
{
  break;
}
case ABCConstants.CONSTANT_RTQname:
case ABCConstants.CONSTANT_RTQnameL:
case ABCConstants.CONSTANT_MultinameL:
{
}
default :
{
if (binding.getDefinition() == null && SemanticUtils.definitionCanBeAnalyzed(binding,this.project)) {
addProblem(accessUndefinedProperty(binding,binding.getNode()));
}
checkReference(binding);
}
}
",0,0,0,,
33,{,"switch (extensionCode) {
case 0xf9:
  GraphicControlExtension gce=readGraphicControlExtension(completeCode,is);
result.add(gce);
break;
case COMMENT_EXTENSION:
case PLAIN_TEXT_EXTENSION:
{
GenericGifBlock block=readGenericGIFBlock(is,completeCode);
result.add(block);
break;
}
case APPLICATION_EXTENSION_LABEL:
{
byte label[]=readSubBlock(is);
if (formatCompliance != null) formatCompliance.addComment(""Unknown Application Extension ("" + new String(label,""US-ASCII"") + "")"",completeCode);
{
}
if ((label != null) && (label.length > 0)) {
GenericGifBlock block=readGenericGIFBlock(is,completeCode,label);
result.add(block);
}
break;
}
default :
{
if (formatCompliance != null) formatCompliance.addComment(""Unknown block"",completeCode);
GenericGifBlock block=readGenericGIFBlock(is,completeCode);
result.add(block);
break;
}
}
",0,0,0,,
34,{  },"switch (yy_last_accept_state) {
case 1:
case -2:
  break;
case 2:
{
  return disambiguateStar();
}
case -3:
break;
case 3:
{
return newSymbol(sym.SLASH);
}
case -4:
break;
case 4:
{
return newSymbol(sym.PLUS);
}
case -5:
break;
case 5:
{
return newSymbol(sym.MINUS);
}
case -6:
break;
case 6:
{
return newSymbol(sym.QNAME,yytext());
}
case -7:
break;
case 7:
{
throw new Exception(yytext());
}
case -8:
break;
case 8:
{
return newSymbol(sym.COMMA);
}
case -9:
break;
case 9:
{
return newSymbol(sym.ATSIGN);
}
case -10:
break;
case 10:
{
return newSymbol(sym.DOT);
}
case -11:
break;
case 11:
{
return newSymbol(sym.VBAR);
}
case -12:
break;
case 12:
{
return newSymbol(sym.DOLLAR);
}
case -13:
break;
case 13:
{
return newSymbol(sym.EQ);
}
case -14:
break;
case 14:
{
return newSymbol(sym.LT);
}
case -15:
break;
case 15:
{
return newSymbol(sym.GT);
}
case -16:
break;
case 16:
{
return newSymbol(sym.LPAREN);
}
case -17:
break;
case 17:
{
return newSymbol(sym.RPAREN);
}
case -18:
break;
case 18:
{
}
case -19:
break;
case 19:
{
return newSymbol(sym.LBRACK);
}
case -20:
break;
case 20:
{
return newSymbol(sym.RBRACK);
}
case -21:
break;
case 21:
{
return newSymbol(sym.INT,new Long(yytext()));
}
case -22:
break;
case 22:
{
return newSymbol(sym.DSLASH);
}
case -23:
break;
case 23:
{
return disambiguateAxisOrFunction(sym.ID);
}
case -24:
break;
case 24:
{
return disambiguateOperator(sym.OR);
}
case -25:
break;
case 25:
{
return newSymbol(sym.DCOLON);
}
case -26:
break;
case 26:
{
return newSymbol(sym.QNAME,yytext());
}
case -27:
break;
case 27:
{
return newSymbol(sym.DDOT);
}
case -28:
break;
case 28:
{
return newSymbol(sym.REAL,new Double(yytext()));
}
case -29:
break;
case 29:
{
return newSymbol(sym.NE);
}
case -30:
break;
case 30:
{
return newSymbol(sym.LE);
}
case -31:
break;
case 31:
{
return newSymbol(sym.GE);
}
case -32:
break;
case 32:
{
return newSymbol(sym.Literal,yytext().substring(1,yytext().length() - 1));
}
case -33:
break;
case 33:
{
return newSymbol(sym.Literal,yytext().substring(1,yytext().length() - 1));
}
case -34:
break;
case 34:
{
return newSymbol(sym.REAL,new Double(yytext()));
}
case -35:
break;
case 35:
{
return disambiguateOperator(sym.DIV);
}
case -36:
break;
case 36:
{
return newSymbol(sym.QNAME,yytext());
}
case -37:
break;
case 37:
{
return disambiguateOperator(sym.MOD);
}
case -38:
break;
case 38:
{
return disambiguateAxisOrFunction(sym.KEY);
}
case -39:
break;
case 39:
{
return disambiguateOperator(sym.AND);
}
case -40:
break;
case 40:
{
return disambiguateAxisOrFunction(sym.SELF);
}
case -41:
break;
case 41:
{
return disambiguateAxisOrFunction(sym.CHILD);
}
case -42:
break;
case 42:
{
return newSymbol(sym.TEXT);
}
case -43:
break;
case 43:
{
return newSymbol(sym.NODE);
}
case -44:
break;
case 44:
{
return disambiguateAxisOrFunction(sym.PARENT);
}
case -45:
break;
case 45:
{
return newSymbol(sym.TEXT);
}
case -46:
break;
case 46:
{
return newSymbol(sym.NODE);
}
case -47:
break;
case 47:
{
return disambiguateAxisOrFunction(sym.ANCESTOR);
}
case -48:
break;
case 48:
{
initialize();
return new Symbol(sym.PATTERN);
}
case -49:
break;
case 49:
{
return disambiguateAxisOrFunction(sym.NAMESPACE);
}
case -50:
break;
case 50:
{
return newSymbol(sym.COMMENT);
}
case -51:
break;
case 51:
{
return disambiguateAxisOrFunction(sym.PRECEDING);
}
case -52:
break;
case 52:
{
return disambiguateAxisOrFunction(sym.ATTRIBUTE);
}
case -53:
break;
case 53:
{
return disambiguateAxisOrFunction(sym.FOLLOWING);
}
case -54:
break;
case 54:
{
return disambiguateAxisOrFunction(sym.DESCENDANT);
}
case -55:
break;
case 55:
{
return newSymbol(sym.COMMENT);
}
case -56:
break;
case 56:
{
initialize();
return new Symbol(sym.EXPRESSION);
}
case -57:
break;
case 57:
{
return disambiguateAxisOrFunction(sym.ANCESTORORSELF);
}
case -58:
break;
case 58:
{
return disambiguateAxisOrFunction(sym.PRECEDINGSIBLING);
}
case -59:
break;
case 59:
{
return disambiguateAxisOrFunction(sym.FOLLOWINGSIBLING);
}
case -60:
break;
case 60:
{
return disambiguateAxisOrFunction(sym.DESCENDANTORSELF);
}
case -61:
break;
case 61:
{
return disambiguateAxisOrFunction(sym.PIPARAM);
}
case -62:
break;
case 62:
{
return newSymbol(sym.PI);
}
case -63:
break;
case 63:
{
return newSymbol(sym.PI);
}
case -64:
break;
case 65:
{
return newSymbol(sym.QNAME,yytext());
}
case -65:
break;
case 66:
{
throw new Exception(yytext());
}
case -66:
break;
case 67:
{
return newSymbol(sym.INT,new Long(yytext()));
}
case -67:
break;
case 68:
{
return newSymbol(sym.REAL,new Double(yytext()));
}
case -68:
break;
case 70:
{
return newSymbol(sym.QNAME,yytext());
}
case -69:
break;
case 71:
{
throw new Exception(yytext());
}
case -70:
break;
case 73:
{
return newSymbol(sym.QNAME,yytext());
}
case -71:
break;
case 74:
{
throw new Exception(yytext());
}
case -72:
break;
case 76:
{
return newSymbol(sym.QNAME,yytext());
}
case -73:
break;
case 77:
{
throw new Exception(yytext());
}
case -74:
break;
case 79:
{
return newSymbol(sym.QNAME,yytext());
}
case -75:
break;
case 81:
{
return newSymbol(sym.QNAME,yytext());
}
case -76:
break;
case 83:
{
return newSymbol(sym.QNAME,yytext());
}
case -77:
break;
case 85:
{
return newSymbol(sym.QNAME,yytext());
}
case -78:
break;
case 87:
{
return newSymbol(sym.QNAME,yytext());
}
case -79:
break;
case 89:
{
return newSymbol(sym.QNAME,yytext());
}
case -80:
break;
case 91:
{
return newSymbol(sym.QNAME,yytext());
}
case -81:
break;
case 93:
{
return newSymbol(sym.QNAME,yytext());
}
case -82:
break;
case 95:
{
return newSymbol(sym.QNAME,yytext());
}
case -83:
break;
case 97:
{
return newSymbol(sym.QNAME,yytext());
}
case -84:
break;
case 99:
{
return newSymbol(sym.QNAME,yytext());
}
case -85:
break;
case 101:
{
return newSymbol(sym.QNAME,yytext());
}
case -86:
break;
case 103:
{
return newSymbol(sym.QNAME,yytext());
}
case -87:
break;
case 105:
{
return newSymbol(sym.QNAME,yytext());
}
case -88:
break;
case 107:
{
return newSymbol(sym.QNAME,yytext());
}
case -89:
break;
case 109:
{
return newSymbol(sym.QNAME,yytext());
}
case -90:
break;
case 111:
{
return newSymbol(sym.QNAME,yytext());
}
case -91:
break;
case 113:
{
return newSymbol(sym.QNAME,yytext());
}
case -92:
break;
case 115:
{
return newSymbol(sym.QNAME,yytext());
}
case -93:
break;
case 117:
{
return newSymbol(sym.QNAME,yytext());
}
case -94:
break;
case 119:
{
return newSymbol(sym.QNAME,yytext());
}
case -95:
break;
case 121:
{
return newSymbol(sym.QNAME,yytext());
}
case -96:
break;
case 123:
{
return newSymbol(sym.QNAME,yytext());
}
case -97:
break;
case 125:
{
return newSymbol(sym.QNAME,yytext());
}
case -98:
break;
case 127:
{
return newSymbol(sym.QNAME,yytext());
}
case -99:
break;
case 128:
{
return newSymbol(sym.QNAME,yytext());
}
case -100:
break;
case 129:
{
return newSymbol(sym.QNAME,yytext());
}
case -101:
break;
case 130:
{
return newSymbol(sym.QNAME,yytext());
}
case -102:
break;
case 131:
{
return newSymbol(sym.QNAME,yytext());
}
case -103:
break;
case 132:
{
return newSymbol(sym.QNAME,yytext());
}
case -104:
break;
case 133:
{
return newSymbol(sym.QNAME,yytext());
}
case -105:
break;
case 134:
{
return newSymbol(sym.QNAME,yytext());
}
case -106:
break;
case 135:
{
return newSymbol(sym.QNAME,yytext());
}
case -107:
break;
case 136:
{
return newSymbol(sym.QNAME,yytext());
}
case -108:
break;
case 137:
{
return newSymbol(sym.QNAME,yytext());
}
case -109:
break;
case 138:
{
return newSymbol(sym.QNAME,yytext());
}
case -110:
break;
case 139:
{
return newSymbol(sym.QNAME,yytext());
}
case -111:
break;
case 140:
{
return newSymbol(sym.QNAME,yytext());
}
case -112:
break;
case 141:
{
return newSymbol(sym.QNAME,yytext());
}
case -113:
break;
case 142:
{
return newSymbol(sym.QNAME,yytext());
}
case -114:
break;
case 143:
{
return newSymbol(sym.QNAME,yytext());
}
case -115:
break;
case 144:
{
return newSymbol(sym.QNAME,yytext());
}
case -116:
break;
case 145:
{
return newSymbol(sym.QNAME,yytext());
}
case -117:
break;
case 146:
{
return newSymbol(sym.QNAME,yytext());
}
case -118:
break;
case 147:
{
return newSymbol(sym.QNAME,yytext());
}
case -119:
break;
case 148:
{
return newSymbol(sym.QNAME,yytext());
}
case -120:
break;
case 149:
{
return newSymbol(sym.QNAME,yytext());
}
case -121:
break;
case 150:
{
return newSymbol(sym.QNAME,yytext());
}
case -122:
break;
case 151:
{
return newSymbol(sym.QNAME,yytext());
}
case -123:
break;
case 152:
{
return newSymbol(sym.QNAME,yytext());
}
case -124:
break;
case 153:
{
return newSymbol(sym.QNAME,yytext());
}
case -125:
break;
case 154:
{
return newSymbol(sym.QNAME,yytext());
}
case -126:
break;
case 155:
{
return newSymbol(sym.QNAME,yytext());
}
case -127:
break;
case 156:
{
return newSymbol(sym.QNAME,yytext());
}
case -128:
break;
case 157:
{
return newSymbol(sym.QNAME,yytext());
}
case -129:
break;
case 158:
{
return newSymbol(sym.QNAME,yytext());
}
case -130:
break;
case 159:
{
return newSymbol(sym.QNAME,yytext());
}
case -131:
break;
case 160:
{
return newSymbol(sym.QNAME,yytext());
}
case -132:
break;
case 161:
{
return newSymbol(sym.QNAME,yytext());
}
case -133:
break;
case 162:
{
return newSymbol(sym.QNAME,yytext());
}
case -134:
break;
case 163:
{
return newSymbol(sym.QNAME,yytext());
}
case -135:
break;
case 164:
{
return newSymbol(sym.QNAME,yytext());
}
case -136:
break;
case 165:
{
return newSymbol(sym.QNAME,yytext());
}
case -137:
break;
case 166:
{
return newSymbol(sym.QNAME,yytext());
}
case -138:
break;
case 167:
{
return newSymbol(sym.QNAME,yytext());
}
case -139:
break;
case 168:
{
return newSymbol(sym.QNAME,yytext());
}
case -140:
break;
case 169:
{
return newSymbol(sym.QNAME,yytext());
}
case -141:
break;
case 170:
{
return newSymbol(sym.QNAME,yytext());
}
case -142:
break;
case 171:
{
return newSymbol(sym.QNAME,yytext());
}
case -143:
break;
case 172:
{
return newSymbol(sym.QNAME,yytext());
}
case -144:
break;
case 173:
{
return newSymbol(sym.QNAME,yytext());
}
case -145:
break;
case 174:
{
return newSymbol(sym.QNAME,yytext());
}
case -146:
break;
case 175:
{
return newSymbol(sym.QNAME,yytext());
}
case -147:
break;
case 176:
{
return newSymbol(sym.QNAME,yytext());
}
case -148:
break;
case 177:
{
return newSymbol(sym.QNAME,yytext());
}
case -149:
break;
case 178:
{
return newSymbol(sym.QNAME,yytext());
}
case -150:
break;
case 179:
{
return newSymbol(sym.QNAME,yytext());
}
case -151:
break;
case 180:
{
return newSymbol(sym.QNAME,yytext());
}
case -152:
break;
case 181:
{
return newSymbol(sym.QNAME,yytext());
}
case -153:
break;
case 182:
{
return newSymbol(sym.QNAME,yytext());
}
case -154:
break;
case 183:
{
return newSymbol(sym.QNAME,yytext());
}
case -155:
break;
case 184:
{
return newSymbol(sym.QNAME,yytext());
}
case -156:
break;
case 187:
{
return newSymbol(sym.QNAME,yytext());
}
case -157:
break;
case 189:
{
return newSymbol(sym.QNAME,yytext());
}
case -158:
break;
case 191:
{
return newSymbol(sym.QNAME,yytext());
}
case -159:
break;
case 192:
{
return newSymbol(sym.QNAME,yytext());
}
case -160:
break;
case 193:
{
return newSymbol(sym.QNAME,yytext());
}
case -161:
break;
case 194:
{
return newSymbol(sym.QNAME,yytext());
}
case -162:
break;
case 195:
{
return newSymbol(sym.QNAME,yytext());
}
case -163:
break;
case 196:
{
return newSymbol(sym.QNAME,yytext());
}
case -164:
break;
case 197:
{
return newSymbol(sym.QNAME,yytext());
}
case -165:
break;
case 198:
{
return newSymbol(sym.QNAME,yytext());
}
case -166:
break;
case 199:
{
return newSymbol(sym.QNAME,yytext());
}
case -167:
break;
case 200:
{
return newSymbol(sym.QNAME,yytext());
}
case -168:
break;
case 201:
{
return newSymbol(sym.QNAME,yytext());
}
case -169:
break;
case 202:
{
return newSymbol(sym.QNAME,yytext());
}
case -170:
break;
case 203:
{
return newSymbol(sym.QNAME,yytext());
}
case -171:
break;
case 204:
{
return newSymbol(sym.QNAME,yytext());
}
case -172:
break;
case 205:
{
return newSymbol(sym.QNAME,yytext());
}
case -173:
break;
case 206:
{
return newSymbol(sym.QNAME,yytext());
}
case -174:
break;
case 207:
{
return newSymbol(sym.QNAME,yytext());
}
case -175:
break;
case 208:
{
return newSymbol(sym.QNAME,yytext());
}
case -176:
break;
case 209:
{
return newSymbol(sym.QNAME,yytext());
}
case -177:
break;
case 210:
{
return newSymbol(sym.QNAME,yytext());
}
case -178:
break;
case 211:
{
return newSymbol(sym.QNAME,yytext());
}
case -179:
break;
case 212:
{
return newSymbol(sym.QNAME,yytext());
}
case -180:
break;
case 213:
{
return newSymbol(sym.QNAME,yytext());
}
case -181:
break;
case 214:
{
return newSymbol(sym.QNAME,yytext());
}
case -182:
break;
case 215:
{
return newSymbol(sym.QNAME,yytext());
}
case -183:
break;
case 216:
{
return newSymbol(sym.QNAME,yytext());
}
case -184:
break;
case 217:
{
return newSymbol(sym.QNAME,yytext());
}
case -185:
break;
case 218:
{
return newSymbol(sym.QNAME,yytext());
}
case -186:
break;
case 219:
{
return newSymbol(sym.QNAME,yytext());
}
case -187:
break;
case 220:
{
return newSymbol(sym.QNAME,yytext());
}
case -188:
break;
case 221:
{
return newSymbol(sym.QNAME,yytext());
}
case -189:
break;
case 222:
{
return newSymbol(sym.QNAME,yytext());
}
case -190:
break;
case 223:
{
return newSymbol(sym.QNAME,yytext());
}
case -191:
break;
case 224:
{
return newSymbol(sym.QNAME,yytext());
}
case -192:
break;
case 225:
{
return newSymbol(sym.QNAME,yytext());
}
case -193:
break;
case 226:
{
return newSymbol(sym.QNAME,yytext());
}
case -194:
break;
case 227:
{
return newSymbol(sym.QNAME,yytext());
}
case -195:
break;
case 228:
{
return newSymbol(sym.QNAME,yytext());
}
case -196:
break;
case 229:
{
return newSymbol(sym.QNAME,yytext());
}
case -197:
break;
case 230:
{
return newSymbol(sym.QNAME,yytext());
}
case -198:
break;
case 231:
{
return newSymbol(sym.QNAME,yytext());
}
case -199:
break;
case 232:
{
return newSymbol(sym.QNAME,yytext());
}
case -200:
break;
case 233:
{
return newSymbol(sym.QNAME,yytext());
}
case -201:
break;
default :
yy_error(YY_E_INTERNAL,false);
case -1:
}
",0,0,1,,"Block(),
"
35,{,"switch (code) {
case NodeFilter.FILTER_REJECT:
case NodeFilter.FILTER_SKIP:
{
    return;
  }
default :
{
}
}
",0,0,0,,
36,{,"switch (mr.functionId) {
case WMFConstants.META_SETWINDOWORG:
  currentStore.setVpX(vpX=-mr.elementAt(0));
currentStore.setVpY(vpY=-mr.elementAt(1));
vpX=vpX * scale;
vpY=vpY * scale;
break;
case WMFConstants.META_SETWINDOWORG_EX:
case WMFConstants.META_SETWINDOWEXT:
vpW=mr.elementAt(0);
vpH=mr.elementAt(1);
scaleX=scale;
scaleY=scale;
solid=new BasicStroke(scaleX * 2,BasicStroke.CAP_BUTT,BasicStroke.JOIN_ROUND);
break;
case WMFConstants.META_SETVIEWPORTORG:
case WMFConstants.META_SETVIEWPORTEXT:
case WMFConstants.META_OFFSETWINDOWORG:
case WMFConstants.META_SCALEWINDOWEXT:
case WMFConstants.META_OFFSETVIEWPORTORG:
case WMFConstants.META_SCALEVIEWPORTEXT:
break;
case WMFConstants.META_SETPOLYFILLMODE:
break;
case WMFConstants.META_CREATEPENINDIRECT:
{
int objIndex=0;
int penStyle=mr.elementAt(0);
Color newClr;
if (penStyle == WMFConstants.META_PS_NULL) {
newClr=Color.white;
objIndex=addObjectAt(currentStore,NULL_PEN,newClr,objIndex);
}
 else {
penWidth=mr.elementAt(4);
setStroke(g2d,penStyle,penWidth,scaleX);
newClr=new Color(mr.elementAt(1),mr.elementAt(2),mr.elementAt(3));
objIndex=addObjectAt(currentStore,PEN,newClr,objIndex);
}
}
break;
case WMFConstants.META_CREATEBRUSHINDIRECT:
{
int objIndex=0;
int brushStyle=mr.elementAt(0);
Color clr=new Color(mr.elementAt(1),mr.elementAt(2),mr.elementAt(3));
if (brushStyle == WMFConstants.BS_SOLID) {
objIndex=addObjectAt(currentStore,BRUSH,clr,objIndex);
}
 else if (brushStyle == WMFConstants.BS_HATCHED) {
int hatch=mr.elementAt(4);
Paint paint;
if (!opaque) {
paint=TextureFactory.getInstance().getTexture(hatch,clr);
}
 else {
paint=TextureFactory.getInstance().getTexture(hatch,clr,bkgdColor);
}
if (paint != null) {
objIndex=addObjectAt(currentStore,BRUSH,paint,objIndex);
}
 else {
clr=Color.black;
objIndex=addObjectAt(currentStore,NULL_BRUSH,clr,objIndex);
}
}
 else {
clr=Color.black;
objIndex=addObjectAt(currentStore,NULL_BRUSH,clr,objIndex);
}
}
break;
case WMFConstants.META_CREATEFONTINDIRECT:
{
float size=(int)(scaleY * mr.elementAt(0));
int charset=mr.elementAt(3);
int italic=mr.elementAt(1);
int weight=mr.elementAt(2);
int style=italic > 0 ? Font.ITALIC : Font.PLAIN;
style|=(weight > 400) ? Font.BOLD : Font.PLAIN;
String face=((MetaRecord.StringRecord)mr).text;
int d=0;
while ((d < face.length()) && ((Character.isLetterOrDigit(face.charAt(d))) || (Character.isWhitespace(face.charAt(d))))) {
d++;
}
if (d > 0) {
face=face.substring(0,d);
}
 else {
face=""System"";
}
if (size < 0) {
size=-size;
}
int objIndex=0;
fontHeight=size;
Font f=new Font(face,style,(int)size);
f=f.deriveFont(size);
int underline=mr.elementAt(4);
int strikeOut=mr.elementAt(5);
int orient=mr.elementAt(6);
int escape=mr.elementAt(7);
WMFFont wf=new WMFFont(f,charset,underline,strikeOut,italic,weight,orient,escape);
objIndex=addObjectAt(currentStore,FONT,wf,objIndex);
}
break;
case WMFConstants.META_CREATEBRUSH:
case WMFConstants.META_CREATEPATTERNBRUSH:
case WMFConstants.META_CREATEBITMAPINDIRECT:
case WMFConstants.META_CREATEBITMAP:
case WMFConstants.META_CREATEREGION:
{
int objIndex=addObjectAt(currentStore,PALETTE,INTEGER_0,0);
}
break;
case WMFConstants.META_CREATEPALETTE:
{
int objIndex=addObjectAt(currentStore,OBJ_REGION,INTEGER_0,0);
}
break;
case WMFConstants.META_SELECTPALETTE:
case WMFConstants.META_REALIZEPALETTE:
case WMFConstants.META_ANIMATEPALETTE:
case WMFConstants.META_SETPALENTRIES:
case WMFConstants.META_RESIZEPALETTE:
break;
case WMFConstants.META_SELECTOBJECT:
gdiIndex=mr.elementAt(0);
if ((gdiIndex & 0x80000000) != 0) {
break;
}
if (gdiIndex >= numObjects) {
gdiIndex-=numObjects;
switch (gdiIndex) {
case WMFConstants.META_OBJ_NULL_BRUSH:
brushObject=-1;
break;
case WMFConstants.META_OBJ_NULL_PEN:
penObject=-1;
break;
case WMFConstants.META_OBJ_WHITE_BRUSH:
case WMFConstants.META_OBJ_LTGRAY_BRUSH:
case WMFConstants.META_OBJ_GRAY_BRUSH:
case WMFConstants.META_OBJ_DKGRAY_BRUSH:
case WMFConstants.META_OBJ_BLACK_BRUSH:
case WMFConstants.META_OBJ_WHITE_PEN:
case WMFConstants.META_OBJ_BLACK_PEN:
case WMFConstants.META_OBJ_OEM_FIXED_FONT:
case WMFConstants.META_OBJ_ANSI_FIXED_FONT:
case WMFConstants.META_OBJ_ANSI_VAR_FONT:
case WMFConstants.META_OBJ_SYSTEM_FONT:
case WMFConstants.META_OBJ_DEVICE_DEFAULT_FONT:
case WMFConstants.META_OBJ_DEFAULT_PALETTE:
case WMFConstants.META_OBJ_SYSTEM_FIXED_FONT:
break;
}
break;
}
gdiObj=currentStore.getObject(gdiIndex);
if (!gdiObj.used) {
break;
}
switch (gdiObj.type) {
case PEN:
g2d.setColor((Color)gdiObj.obj);
penObject=gdiIndex;
break;
case BRUSH:
if (gdiObj.obj instanceof Color) {
g2d.setColor((Color)gdiObj.obj);
}
 else if (gdiObj.obj instanceof Paint) {
g2d.setPaint((Paint)gdiObj.obj);
}
 else {
g2d.setPaint(getPaint((byte[])(gdiObj.obj)));
}
brushObject=gdiIndex;
break;
case FONT:
{
this.wmfFont=((WMFFont)gdiObj.obj);
Font f=this.wmfFont.font;
g2d.setFont(f);
fontObject=gdiIndex;
}
break;
case NULL_PEN:
penObject=-1;
break;
case NULL_BRUSH:
brushObject=-1;
break;
}
break;
case WMFConstants.META_DELETEOBJECT:
gdiIndex=mr.elementAt(0);
gdiObj=currentStore.getObject(gdiIndex);
if (gdiIndex == brushObject) {
brushObject=-1;
}
 else if (gdiIndex == penObject) {
penObject=-1;
}
 else if (gdiIndex == fontObject) {
fontObject=-1;
}
gdiObj.clear();
break;
case WMFConstants.META_POLYPOLYGON:
{
int numPolygons=mr.elementAt(0);
int[] pts=new int[numPolygons];
for (int ip=0; ip < numPolygons; ip++) {
pts[ip]=mr.elementAt(ip + 1);
}
int offset=numPolygons + 1;
List v=new ArrayList(numPolygons);
for (int j=0; j < numPolygons; j++) {
int count=pts[j];
float[] xpts=new float[count];
float[] ypts=new float[count];
for (int k=0; k < count; k++) {
xpts[k]=scaleX * (vpX + xOffset + mr.elementAt(offset + k * 2));
ypts[k]=scaleY * (vpY + yOffset + mr.elementAt(offset + k * 2 + 1));
}
offset+=count * 2;
Polygon2D pol=new Polygon2D(xpts,ypts,count);
v.add(pol);
}
if (brushObject >= 0) {
setBrushPaint(currentStore,g2d,brushObject);
fillPolyPolygon(g2d,v);
firstEffectivePaint=false;
}
if (penObject >= 0) {
setPenColor(currentStore,g2d,penObject);
drawPolyPolygon(g2d,v);
firstEffectivePaint=false;
}
break;
}
case WMFConstants.META_POLYGON:
{
int count=mr.elementAt(0);
float[] _xpts=new float[count];
float[] _ypts=new float[count];
for (int k=0; k < count; k++) {
_xpts[k]=scaleX * (vpX + xOffset + mr.elementAt(k * 2 + 1));
_ypts[k]=scaleY * (vpY + yOffset + mr.elementAt(k * 2 + 2));
}
Polygon2D pol=new Polygon2D(_xpts,_ypts,count);
paint(brushObject,penObject,pol,g2d);
}
break;
case WMFConstants.META_MOVETO:
startX=scaleX * (vpX + xOffset + mr.elementAt(0));
startY=scaleY * (vpY + yOffset + mr.elementAt(1));
break;
case WMFConstants.META_LINETO:
{
float endX=scaleX * (vpX + xOffset + mr.elementAt(0));
float endY=scaleY * (vpY + yOffset + mr.elementAt(1));
Line2D.Float line=new Line2D.Float(startX,startY,endX,endY);
paintWithPen(penObject,line,g2d);
startX=endX;
startY=endY;
}
break;
case WMFConstants.META_POLYLINE:
{
int count=mr.elementAt(0);
float[] _xpts=new float[count];
float[] _ypts=new float[count];
for (int k=0; k < count; k++) {
_xpts[k]=scaleX * (vpX + xOffset + mr.elementAt(k * 2 + 1));
_ypts[k]=scaleY * (vpY + yOffset + mr.elementAt(k * 2 + 2));
}
Polyline2D pol=new Polyline2D(_xpts,_ypts,count);
paintWithPen(penObject,pol,g2d);
}
break;
case WMFConstants.META_RECTANGLE:
{
float x1, y1, x2, y2;
x1=scaleX * (vpX + xOffset + mr.elementAt(0));
x2=scaleX * (vpX + xOffset + mr.elementAt(2));
y1=scaleY * (vpY + yOffset + mr.elementAt(1));
y2=scaleY * (vpY + yOffset + mr.elementAt(3));
Rectangle2D.Float rec=new Rectangle2D.Float(x1,y1,x2 - x1,y2 - y1);
paint(brushObject,penObject,rec,g2d);
}
break;
case WMFConstants.META_ROUNDRECT:
{
float x1, y1, x2, y2, x3, y3;
x1=scaleX * (vpX + xOffset + mr.elementAt(0));
x2=scaleX * (vpX + xOffset + mr.elementAt(2));
x3=scaleX * (mr.elementAt(4));
y1=scaleY * (vpY + yOffset + mr.elementAt(1));
y2=scaleY * (vpY + yOffset + mr.elementAt(3));
y3=scaleY * (mr.elementAt(5));
RoundRectangle2D rec=new RoundRectangle2D.Float(x1,y1,x2 - x1,y2 - y1,x3,y3);
paint(brushObject,penObject,rec,g2d);
}
break;
case WMFConstants.META_ELLIPSE:
{
float x1=scaleX * (vpX + xOffset + mr.elementAt(0));
float x2=scaleX * (vpX + xOffset + mr.elementAt(2));
float y1=scaleY * (vpY + yOffset + mr.elementAt(1));
float y2=scaleY * (vpY + yOffset + mr.elementAt(3));
Ellipse2D.Float el=new Ellipse2D.Float(x1,y1,x2 - x1,y2 - y1);
paint(brushObject,penObject,el,g2d);
}
break;
case WMFConstants.META_SETTEXTALIGN:
currentHorizAlign=WMFUtilities.getHorizontalAlignment(mr.elementAt(0));
currentVertAlign=WMFUtilities.getVerticalAlignment(mr.elementAt(0));
break;
case WMFConstants.META_SETTEXTCOLOR:
frgdColor=new Color(mr.elementAt(0),mr.elementAt(1),mr.elementAt(2));
g2d.setColor(frgdColor);
break;
case WMFConstants.META_SETBKCOLOR:
bkgdColor=new Color(mr.elementAt(0),mr.elementAt(1),mr.elementAt(2));
g2d.setColor(bkgdColor);
break;
case WMFConstants.META_EXTTEXTOUT:
try {
byte[] bstr=((MetaRecord.ByteRecord)mr).bstr;
String sr=WMFUtilities.decodeString(wmfFont,bstr);
float x=scaleX * (vpX + xOffset + mr.elementAt(0));
float y=scaleY * (vpY + yOffset + mr.elementAt(1));
if (frgdColor != null) {
g2d.setColor(frgdColor);
}
 else {
g2d.setColor(Color.black);
}
FontRenderContext frc=g2d.getFontRenderContext();
Point2D.Double pen=new Point2D.Double(0,0);
GeneralPath gp=new GeneralPath(GeneralPath.WIND_NON_ZERO);
TextLayout layout=new TextLayout(sr,g2d.getFont(),frc);
int flag=mr.elementAt(2);
int x1=0, y1=0, x2=0, y2=0;
boolean clipped=false;
Shape clip=null;
if ((flag & WMFConstants.ETO_CLIPPED) != 0) {
clipped=true;
x1=mr.elementAt(3);
y1=mr.elementAt(4);
x2=mr.elementAt(5);
y2=mr.elementAt(6);
clip=g2d.getClip();
g2d.setClip(x1,y1,x2,y2);
}
firstEffectivePaint=false;
y+=getVerticalAlignmentValue(layout,currentVertAlign);
drawString(flag,g2d,getCharacterIterator(g2d,sr,wmfFont,currentHorizAlign),x,y,layout,wmfFont,currentHorizAlign);
if (clipped) {
g2d.setClip(clip);
}
}
 catch (Exception e) {
}
break;
case WMFConstants.META_TEXTOUT:
case WMFConstants.META_DRAWTEXT:
try {
byte[] bstr=((MetaRecord.ByteRecord)mr).bstr;
String sr=WMFUtilities.decodeString(wmfFont,bstr);
float x=scaleX * (vpX + xOffset + mr.elementAt(0));
float y=scaleY * (vpY + yOffset + mr.elementAt(1));
if (frgdColor != null) {
g2d.setColor(frgdColor);
}
 else {
g2d.setColor(Color.black);
}
FontRenderContext frc=g2d.getFontRenderContext();
Point2D.Double pen=new Point2D.Double(0,0);
GeneralPath gp=new GeneralPath(GeneralPath.WIND_NON_ZERO);
TextLayout layout=new TextLayout(sr,g2d.getFont(),frc);
firstEffectivePaint=false;
y+=getVerticalAlignmentValue(layout,currentVertAlign);
drawString(-1,g2d,getCharacterIterator(g2d,sr,wmfFont),x,y,layout,wmfFont,currentHorizAlign);
}
 catch (Exception e) {
}
break;
case WMFConstants.META_ARC:
case WMFConstants.META_PIE:
case WMFConstants.META_CHORD:
{
double left, top, right, bottom;
double xstart, ystart, xend, yend;
left=scaleX * (vpX + xOffset + mr.elementAt(0));
top=scaleY * (vpY + yOffset + mr.elementAt(1));
right=scaleX * (vpX + xOffset + mr.elementAt(2));
bottom=scaleY * (vpY + yOffset + mr.elementAt(3));
xstart=scaleX * (vpX + xOffset + mr.elementAt(4));
ystart=scaleY * (vpY + yOffset + mr.elementAt(5));
xend=scaleX * (vpX + xOffset + mr.elementAt(6));
yend=scaleY * (vpY + yOffset + mr.elementAt(7));
setBrushPaint(currentStore,g2d,brushObject);
double cx=left + (right - left) / 2;
double cy=top + (bottom - top) / 2;
double startAngle=-Math.toDegrees(Math.atan2(ystart - cy,xstart - cx));
double endAngle=-Math.toDegrees(Math.atan2(yend - cy,xend - cx));
double extentAngle=endAngle - startAngle;
if (extentAngle < 0) {
extentAngle+=360;
}
if (startAngle < 0) {
startAngle+=360;
}
Arc2D.Double arc;
switch (mr.functionId) {
case WMFConstants.META_ARC:
arc=new Arc2D.Double(left,top,right - left,bottom - top,startAngle,extentAngle,Arc2D.OPEN);
g2d.draw(arc);
break;
case WMFConstants.META_PIE:
arc=new Arc2D.Double(left,top,right - left,bottom - top,startAngle,extentAngle,Arc2D.PIE);
paint(brushObject,penObject,arc,g2d);
break;
case WMFConstants.META_CHORD:
arc=new Arc2D.Double(left,top,right - left,bottom - top,startAngle,extentAngle,Arc2D.CHORD);
paint(brushObject,penObject,arc,g2d);
}
firstEffectivePaint=false;
}
break;
case WMFConstants.META_SAVEDC:
dcStack.push(penWidth);
dcStack.push(startX);
dcStack.push(startY);
dcStack.push(brushObject);
dcStack.push(penObject);
dcStack.push(fontObject);
dcStack.push(frgdColor);
dcStack.push(bkgdColor);
break;
case WMFConstants.META_RESTOREDC:
bkgdColor=(Color)dcStack.pop();
frgdColor=(Color)dcStack.pop();
fontObject=(Integer)(dcStack.pop());
penObject=(Integer)(dcStack.pop());
brushObject=(Integer)(dcStack.pop());
startY=(Float)(dcStack.pop());
startX=(Float)(dcStack.pop());
penWidth=(Float)(dcStack.pop());
break;
case WMFConstants.META_POLYBEZIER16:
try {
setPenColor(currentStore,g2d,penObject);
int pointCount=mr.elementAt(0);
int bezierCount=(pointCount - 1) / 3;
float _startX=scaleX * (vpX + xOffset + mr.elementAt(1));
float _startY=scaleY * (vpY + yOffset + mr.elementAt(2));
GeneralPath gp=new GeneralPath(GeneralPath.WIND_NON_ZERO);
gp.moveTo(_startX,_startY);
for (int j=0; j < bezierCount; j++) {
int j6=j * 6;
float cp1X=scaleX * (vpX + xOffset + mr.elementAt(j6 + 3));
float cp1Y=scaleY * (vpY + yOffset + mr.elementAt(j6 + 4));
float cp2X=scaleX * (vpX + xOffset + mr.elementAt(j6 + 5));
float cp2Y=scaleY * (vpY + yOffset + mr.elementAt(j6 + 6));
float endX=scaleX * (vpX + xOffset + mr.elementAt(j6 + 7));
float endY=scaleY * (vpY + yOffset + mr.elementAt(j6 + 8));
gp.curveTo(cp1X,cp1Y,cp2X,cp2Y,endX,endY);
_startX=endX;
_startY=endY;
}
g2d.setStroke(solid);
g2d.draw(gp);
firstEffectivePaint=false;
}
 catch (Exception e) {
}
break;
case WMFConstants.META_EXCLUDECLIPRECT:
case WMFConstants.META_INTERSECTCLIPRECT:
case WMFConstants.META_OFFSETCLIPRGN:
case WMFConstants.META_SELECTCLIPREGION:
case WMFConstants.META_SETMAPMODE:
case WMFConstants.META_SETRELABS:
case WMFConstants.META_SETSTRETCHBLTMODE:
case WMFConstants.META_SETTEXTCHAREXTRA:
case WMFConstants.META_SETTEXTJUSTIFICATION:
case WMFConstants.META_FLOODFILL:
break;
case WMFConstants.META_SETBKMODE:
{
int mode=mr.elementAt(0);
opaque=(mode == WMFConstants.OPAQUE);
}
break;
case WMFConstants.META_SETROP2:
{
float rop=(float)(mr.ElementAt(0));
Paint paint=null;
boolean ok=false;
if (rop == WMFConstants.META_BLACKNESS) {
paint=Color.black;
ok=true;
}
 else if (rop == WMFConstants.META_WHITENESS) {
paint=Color.white;
ok=true;
}
 else if (rop == WMFConstants.META_PATCOPY) {
if (brushObject >= 0) {
paint=getStoredPaint(currentStore,brushObject);
ok=true;
}
}
if (ok) {
if (paint != null) {
g2d.setPaint(paint);
}
 else {
setBrushPaint(currentStore,g2d,brushObject);
}
}
}
break;
case WMFConstants.META_PATBLT:
{
float rop=(mr.elementAt(0));
float height=scaleY * (mr.elementAt(1));
float width=scaleX * (mr.elementAt(2));
float left=scaleX * (vpX + xOffset + mr.elementAt(3));
float top=scaleY * (vpY + yOffset + mr.elementAt(4));
Paint paint=null;
boolean ok=false;
if (rop == WMFConstants.META_BLACKNESS) {
paint=Color.black;
ok=true;
}
 else if (rop == WMFConstants.META_WHITENESS) {
paint=Color.white;
ok=true;
}
 else if (rop == WMFConstants.META_PATCOPY) {
if (brushObject >= 0) {
paint=getStoredPaint(currentStore,brushObject);
ok=true;
}
}
if (ok) {
Color oldClr=g2d.getColor();
if (paint != null) {
g2d.setPaint(paint);
}
 else {
setBrushPaint(currentStore,g2d,brushObject);
}
Rectangle2D.Float rec=new Rectangle2D.Float(left,top,width,height);
g2d.fill(rec);
g2d.setColor(oldClr);
}
}
break;
case WMFConstants.META_DIBSTRETCHBLT:
{
int height=mr.elementAt(1);
int width=mr.elementAt(2);
int sy=mr.elementAt(3);
int sx=mr.elementAt(4);
float dy=conv * currentStore.getVpWFactor() * (vpY + yOffset + mr.elementAt(7));
float dx=conv * currentStore.getVpHFactor() * (vpX + xOffset + mr.elementAt(8));
float heightDst=(mr.elementAt(5));
float widthDst=(mr.elementAt(6));
widthDst=widthDst * conv * currentStore.getVpWFactor();
heightDst=heightDst * conv * currentStore.getVpHFactor();
byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;
BufferedImage img=getImage(bitmap,width,height);
if (img != null) {
g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + widthDst),(int)(dy + heightDst),sx,sy,sx + width,sy + height,bkgdColor,observer);
}
}
break;
case WMFConstants.META_STRETCHDIB:
{
int height=mr.elementAt(1);
int width=mr.elementAt(2);
int sy=mr.elementAt(3);
int sx=mr.elementAt(4);
float dy=conv * currentStore.getVpWFactor() * (vpY + yOffset + mr.elementAt(7));
float dx=conv * currentStore.getVpHFactor() * (vpX + xOffset + mr.elementAt(8));
float heightDst=(mr.elementAt(5));
float widthDst=(mr.elementAt(6));
widthDst=widthDst * conv * currentStore.getVpWFactor();
heightDst=heightDst * conv * currentStore.getVpHFactor();
byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;
BufferedImage img=getImage(bitmap,width,height);
if (img != null) {
if (opaque) {
g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + widthDst),(int)(dy + heightDst),sx,sy,sx + width,sy + height,bkgdColor,observer);
}
 else {
g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + widthDst),(int)(dy + heightDst),sx,sy,sx + width,sy + height,observer);
}
}
}
break;
case WMFConstants.META_DIBBITBLT:
{
int rop=mr.ElementAt(0);
float height=(mr.ElementAt(1) * conv * currentStore.getVpWFactor());
float width=(mr.ElementAt(2) * conv * currentStore.getVpHFactor());
int sy=mr.ElementAt(3);
int sx=mr.ElementAt(4);
float dy=(conv * currentStore.getVpWFactor() * (vpY + yOffset + (float)mr.ElementAt(5)));
float dx=(conv * currentStore.getVpHFactor() * (vpX + xOffset + (float)mr.ElementAt(6)));
if (mr instanceof MetaRecord.ByteRecord) {
byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;
BufferedImage img=getImage(bitmap);
if (img != null) {
int withSrc=img.getWidth();
int heightSrc=img.getHeight();
if (opaque) {
g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + width),(int)(dy + height),sx,sy,sx + withSrc,sy + heightSrc,bkgdColor,observer);
}
 else {
g2d.drawImage(img,(int)dx,(int)dy,(int)(dx + width),(int)(dy + height),sx,sy,sx + withSrc,sy + heightSrc,observer);
}
}
}
 else {
if (opaque) {
Color col=g2d.getColor();
g2d.setColor(bkgdColor);
g2d.fill(new Rectangle2D.Float(dx,dy,width,height));
g2d.setColor(col);
}
}
}
break;
case WMFConstants.META_DIBCREATEPATTERNBRUSH:
{
int objIndex=0;
byte[] bitmap=((MetaRecord.ByteRecord)mr).bstr;
objIndex=addObjectAt(currentStore,BRUSH,bitmap,objIndex);
}
break;
case WMFConstants.META_SETPIXEL:
case WMFConstants.META_BITBLT:
case WMFConstants.META_STRETCHBLT:
case WMFConstants.META_ESCAPE:
case WMFConstants.META_FILLREGION:
case WMFConstants.META_FRAMEREGION:
case WMFConstants.META_INVERTREGION:
case WMFConstants.META_PAINTREGION:
case WMFConstants.META_SETMAPPERFLAGS:
case WMFConstants.META_SETDIBTODEV:
default :
{
}
break;
}
",0,0,0,,
37,case SPACE: {,"case SPACE:
",3,3,1,,"SimpleName(SwitchCase-expression, ),
"
38,case 3: {,"case 3:
",5,5,1,,"NumberLiteral(SwitchCase-expression, ),
"
39,case ServiceEvent.REGISTERED:{,"case ServiceEvent.REGISTERED:
",6,6,1,,"QualifiedName(SwitchCase-expression, ),
"
40,default: {,"default :
",18,18,1,,"SwitchCase(),
"
