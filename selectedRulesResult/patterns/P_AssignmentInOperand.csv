Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"while ((asmDesc.length() > 0) && (td = TypeDescriptor.fromString(asmDesc.substring(0, 1))) != null) {","while ((asmDesc.length() > 0) && (td=TypeDescriptor.fromString(asmDesc.substring(0,1))) != null) {
  returnStr.append(td.getDesc());
  for (int index=0; index < brkCount; index++) {
    returnStr.append(""[]"");
  }
  brkCount=0;
  returnStr.append(separator);
  asmDesc=asmDesc.substring(1);
}
",0,982,11,4150,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
2,if (++i > 10 && i % (size / 10) == 0) {,"if (++i > 10 && i % (size / 10) == 0) {
  long progress=Math.round((100.0 * (float)i) / (float)size);
  log.info(""progress: "" + progress + ""%"");
}
",0,163,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
3,outer: while (limit!=0 && !nextLayer.isEmpty() && maxDepth-- != 0) {,"while (limit != 0 && !nextLayer.isEmpty() && maxDepth-- != 0) {
  Set<Task<?>> thisLayer=nextLayer;
  nextLayer=MutableSet.of();
  for (  final Task<?> childTask : thisLayer) {
    TaskSummary wasThere=result.put(childTask.getId(),TaskTransformer.fromTask(ui.getBaseUriBuilder()).apply(childTask));
    if (wasThere == null) {
      if (--limit == 0) {
        break outer;
      }
      if (childTask instanceof HasTaskChildren) {
        Iterables.addAll(nextLayer,((HasTaskChildren)childTask).getChildren());
      }
    }
  }
}
",0,184,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
4,while((keytuple = scanner.next()) != null && scanner.getNextOffset() <= endOffset) {,"while ((keytuple=scanner.next()) != null && scanner.getNextOffset() <= endOffset) {
  assertTrue(keytuple.get(1).asInt4() <= 80);
}
",0,4,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
5,"while ((read = in.read(out, totalRead, out.length - totalRead - 1)) > 0) {","while ((read=in.read(out,totalRead,out.length - totalRead - 1)) > 0) {
  totalRead+=read;
  if (totalRead + 1 == out.length) {
    out=Arrays.copyOf(out,out.length + resizeBy);
  }
}
",0,5,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
6,if (parts[parts.length - 1].length() == 0 && --partsLo != 0) {,"if (parts[parts.length - 1].length() == 0 && --partsLo != 0) {
  return null;
}
",0,65,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
7,while ((stopped || (m = buffer.poll()) == null) && !closed && toWait > 0) {,"while ((stopped || (m=buffer.poll()) == null) && !closed && toWait > 0) {
  if (start == -1) {
    start=System.currentTimeMillis();
  }
  if (m == null && forcingDelivery) {
    if (stopped) {
      break;
    }
    if (!deliveryForced) {
      callForceDelivery=true;
      break;
    }
  }
  try {
    wait(toWait);
  }
 catch (  InterruptedException e) {
    throw new ActiveMQInterruptedException(e);
  }
  if (m != null || closed) {
    break;
  }
  long now=System.currentTimeMillis();
  toWait-=now - start;
  start=now;
}
",0,3,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
8,"if ((textContent = XMLUtil.getTextContent(n)) != null && !"""".equals(textContent)) {","if ((textContent=XMLUtil.getTextContent(n)) != null && !"""".equals(textContent)) {
  sb.append(textContent).append(""</"").append(name).append('>');
}
 else {
  sb.append(""/>"").append('\n');
}
",0,979,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
9,while (!(canWrite = channel.isWritable()) && (System.nanoTime() - deadline) < 0) {,"while (!(canWrite=channel.isWritable()) && (System.nanoTime() - deadline) < 0) {
  checkConnectionState();
  LockSupport.parkNanos(parkNanos);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
10,while ((parentFile = (File) this.treeWorkspace.getParent(parentFile)) != null) {,"while ((parentFile=(File)this.treeWorkspace.getParent(parentFile)) != null) {
  if (this.treeContainer.isRoot(parentFile)) {
    break;
  }
  id=parentFile.getName() + ""."" + id;
}
",0,20,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
11,if(!usingJava7Types && (java8Type = SQL_TYPE_TO_JAVA8_TYPE.get(dbAttribute.getType())) != null) {,"if (!usingJava7Types && (java8Type=SQL_TYPE_TO_JAVA8_TYPE.get(dbAttribute.getType())) != null) {
  return java8Type;
}
",0,20,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
12,if (cntRs.next() && (rows = cntRs.getInt(1)) > 0) {,"if (cntRs.next() && (rows=cntRs.getInt(1)) > 0) {
  logger.tracef(""Table %s did exist but is not empty. Skipping initialization. Found %d rows."",tableName,rows);
  if (logger.isDebugEnabled()) {
    final long expectedRows=Stream.of(sqls).map(String::toUpperCase).filter(sql -> sql.contains(""INSERT INTO"")).count();
    if (rows < expectedRows) {
      logger.debug(""Table "" + tableName + "" was expected to contain ""+ expectedRows+ "" rows while it has ""+ rows+ "" rows."");
    }
  }
  connection.commit();
  return;
}
 else {
  sqls=Stream.of(sqls).filter(sql -> {
    final String upperCaseSql=sql.toUpperCase();
    return !(upperCaseSql.contains(""CREATE TABLE"") || upperCaseSql.contains(""CREATE INDEX""));
  }
).toArray(String[]::new);
  if (sqls.length > 0) {
    logger.tracef(""Table %s did exist but is empty. Starting initialization."",tableName);
  }
 else {
    logger.tracef(""Table %s did exist but is empty. Initialization completed: no initialization statements left."",tableName);
    connection.commit();
  }
}
",0,25,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
13,if (queue != null && (queueConsumers = (Set<Consumer>) queue.getConsumers()) != null) {,"if (queue != null && (queueConsumers=(Set<Consumer>)queue.getConsumers()) != null) {
  for (  Consumer consumer : queueConsumers) {
    ((ServerConsumer)consumer).close(false);
    consumerQoSLevels.remove(((ServerConsumer)consumer).getID());
  }
}
",0,8,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
14,if (++done == up.get() && delegateCompletion != null) {,"if (++done == up.get() && delegateCompletion != null) {
  final IOCallback delegateToCall=delegateCompletion;
  delegateCompletion=null;
  delegateToCall.done();
}
",0,1,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
15,if ((data[index++] = readed) == -1) {,"if ((data[index++]=readed) == -1) {
  throw new Base64DecodingException(""decoding.general"");
}
",0,109,4,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
16,while ((backupServer.getClusterManager() == null || backupServer.getClusterManager().getClusterConnections().size() != 1) && nWaits++ < waitMillis / sleepTime) {,"while ((backupServer.getClusterManager() == null || backupServer.getClusterManager().getClusterConnections().size() != 1) && nWaits++ < waitMillis / sleepTime) {
  Thread.sleep(sleepTime);
}
",0,5,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
17,if (currentPage != null && currentPage.getPageId() == pageId && (cache = currentPage.getLiveCache()) != null) {,"if (currentPage != null && currentPage.getPageId() == pageId && (cache=currentPage.getLiveCache()) != null) {
  softCache.put(cache.getPageId(),cache);
  return cache;
}
",0,4,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
18,} else if (groupRouting && groupingHandler != null && (groupId = message.getGroupID()) != null) {,"if (groupRouting && groupingHandler != null && (groupId=message.getGroupID()) != null) {
  context.clear().setReusable(false);
  routeUsingStrictOrdering(message,context,groupingHandler,groupId,0);
}
 else if (CompositeAddress.isFullyQualified(message.getAddress())) {
  context.clear().setReusable(false);
  final Binding theBinding=bindingsNameMap.get(CompositeAddress.extractQueueName(message.getAddressSimpleString()));
  if (theBinding != null) {
    theBinding.route(message,context);
  }
}
 else {
  if (!reusableContext) {
    simpleRouting(message,context,currentVersion);
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
19,"if (""Message 1"".equals(body) && counter++ < 2) {","if (""Message 1"".equals(body) && counter++ < 2) {
  throw new IllegalArgumentException(""Damn"");
}
",0,52,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
20,if (started && !stopping && notificationsSent++ < clusterNotificationAttempts) {,"if (started && !stopping && notificationsSent++ < clusterNotificationAttempts) {
  scheduledExecutor.schedule(this,clusterNotificationInterval,TimeUnit.MILLISECONDS);
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
21,"if ((in = BrokerService.class.getResourceAsStream(""/org/apache/activemq/version.txt"")) != null) {","if ((in=BrokerService.class.getResourceAsStream(""/org/apache/activemq/version.txt"")) != null) {
  BufferedReader reader=new BufferedReader(new InputStreamReader(in));
  try {
    version=reader.readLine();
  }
 catch (  Exception e) {
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
22,while (secondReceive < toReceive && (msg = newConsumer.receive(5000)) != null) {,"while (secondReceive < toReceive && (msg=newConsumer.receive(5000)) != null) {
  msg.acknowledge();
  secondReceive++;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
23,"while ((extra = receiveMessage(connection, 0)) != null) {","while ((extra=receiveMessage(connection,0)) != null) {
  msg=extra;
  printer.increment();
  receiveCounter.incrementAndGet();
  counter++;
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
24,while (brokerName1.equals(brokerName2) && attempts-- > 0) {,"while (brokerName1.equals(brokerName2) && attempts-- > 0) {
  connection=(ActiveMQConnection)cf.createConnection();
  connection.start();
  brokerName2=connection.getBrokerName();
  Assert.assertNotNull(brokerName2);
  connection.close();
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
25,while (count++ < 20 && info[0] == null) {,"while (count++ < 20 && info[0] == null) {
  TimeUnit.SECONDS.sleep(1);
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
26,while (attempts++ < 5 && version == group.getCurrentData().get(0).getStat().getVersion()) {,"while (attempts++ < 5 && version == group.getCurrentData().get(0).getStat().getVersion()) {
  TimeUnit.SECONDS.sleep(1);
}
",0,4,9,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
27,"for (int t = nGroups, bc = 999999999; --t >= 0;) {","for (int t=nGroups, bc=999999999; --t >= 0; ) {
  final int cost_t=cost[t];
  if (cost_t < bc) {
    bc=cost_t;
    bt=t;
  }
}
",0,12,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
28,"while ((read = is.read(arr, offset, remain)) > 0 && remain > 0) {","while ((read=is.read(arr,offset,remain)) > 0 && remain > 0) {
  offset+=read;
  remain-=read;
}
",0,1,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
29,if (packet instanceof SessionSendMessage && ++count == 100) {,"if (packet instanceof SessionSendMessage && ++count == 100) {
  try {
    thread=new Thread(""***Server Restarter***""){
      @Override public void run(){
        try {
          serverToStop.fail(false);
          latch.countDown();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
    thread.start();
    latch.await();
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",0,2,4,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
30,while (!(isBackupStarted = backupServer.isActive()) && System.currentTimeMillis() - startTime < waitTimeout) {,"while (!(isBackupStarted=backupServer.isActive()) && System.currentTimeMillis() - startTime < waitTimeout) {
  Thread.sleep(300);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
31,if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {,"if (numWrites++ % 10000 == 0 && log.isDebugEnabled()) {
  log.debug(""Item state cache size: {}% of {} bytes"",cache.getMemoryUsed() * 100 / cache.getMaxMemorySize(),cache.getMaxMemorySize());
}
",0,1,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
32,"else if ((value=action.getRequestParam(field + ""!""))!=null)","if ((value=action.getRequestParam(field + ""!"")) != null) {
  if (col.getDataType().isDate()) {
    if (value.equals(sysdate) == false) {
      String format=(col.getDataType() == DataType.DATE) ? ""yyyy-MM-dd"" : ""yyyy-MM-dd HH:mm:ss.S"";
      SimpleDateFormat sdf=new SimpleDateFormat(format);
      try {
        value=sdf.parseObject(value.toString());
      }
 catch (      ParseException e) {
        log.error(""Failed to parse date for record"",e);
        continue;
      }
    }
  }
  if (log.isInfoEnabled())   log.info(""SetUpdateFields: directly setting field '"" + col.getName() + ""' to ""+ String.valueOf(value));
  if (ObjectUtils.compareEqual(record.getValue(i),value) == false) {
    setRecordFieldValue(i,value,false);
  }
}
 else {
  continue;
}
",0,10,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
33,while ((i != -1) && ((c = a[i]) == ' ' || c == '\r' || c == '\n' || c == '\f' || c == '\t')),"while ((i != -1) && ((c=a[i]) == ' ' || c == '\r' || c == '\n' || c == '\f' || c == '\t')) i--;
",0,5,14,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
34,if ( klass == null || ( ( pkg = klass.getPackage() ) != null && pkg.getName().startsWith( JAVA_PACKAGE ) ) ),"if (klass == null || ((pkg=klass.getPackage()) != null && pkg.getName().startsWith(JAVA_PACKAGE))) {
  return;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
35,if (context != null && --context.count == 0) {,"if (context != null && --context.count == 0) {
  context.request=null;
  context.response=null;
  localContext.set(null);
}
",0,2,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
36,while ((charFound = (char) (byteBuffer.get() & 0xff)) != ' ' || inblock) {,"while ((charFound=(char)(byteBuffer.get() & 0xff)) != ' ' || inblock) {
  if (charFound == '[') {
    inblock=true;
  }
  if (charFound == ']') {
    inblock=false;
  }
  structuredData.append(charFound);
}
",0,10,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
37,} else if ((responseCode = client.executeMethod(request)) != HttpStatus.SC_OK) {,"if ((responseCode=client.executeMethod(request)) != HttpStatus.SC_OK) {
  status=Status.UNRECOVERABLE_ERROR;
  errorString="" HTTP Server returned "" + responseCode + "" (expected 200 OK) "";
  return true;
}
",0,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
38,"while (prefix.equals("""") && ((lastSlash = uri.lastIndexOf(""/"")) > 0)) {","while (prefix.equals("""") && ((lastSlash=uri.lastIndexOf(""/"")) > 0)) {
  uri=uri.substring(0,lastSlash);
  for (int i=0; i < prefixes.length; i++) {
    if (uri.equals(prefixes[i])) {
      prefix=prefixes[i];
      break;
    }
  }
}
",0,4,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
39,"if ((models = exchange.getContext().getTypeConverter().convertTo(List.class, body)) == null) {","if ((models=exchange.getContext().getTypeConverter().convertTo(List.class,body)) == null) {
  models=new ArrayList<>();
  for (  Object model : ObjectHelper.createIterable(body)) {
    models.add(model);
  }
}
",0,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
40,if (!endpoint.isSynchronous() && (continuation = getContinuation(cxfExchange)) != null) {,"if (!endpoint.isSynchronous() && (continuation=getContinuation(cxfExchange)) != null) {
  LOG.trace(""Calling the Camel async processors."");
  return asyncInvoke(cxfExchange,serviceObject,method,paramArray,continuation,response);
}
 else {
  LOG.trace(""Calling the Camel sync processors."");
  return syncInvoke(cxfExchange,serviceObject,method,paramArray,response);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
41,if (name==null || (this.name=name.trim()).length()==0),"if (name == null || (this.name=name.trim()).length() == 0) throw new InvalidArgumentException(""name"",name);
",0,86,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
42,while (!done && counter++ < endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter()) {,"while (!done && counter++ < endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter()) {
  log.trace(""Early reply not found handler at attempt {}. Waiting a bit longer."",counter);
  try {
    Thread.sleep(endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime());
  }
 catch (  InterruptedException e) {
  }
  answer=correlation.get(correlationID);
  done=answer != null;
  if (answer != null) {
    if (log.isTraceEnabled()) {
      log.trace(""Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}"",correlationID,counter,answer);
    }
  }
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
43,while (Character.isDigit(ch = body.charAt(idx++))) {,"while (Character.isDigit(ch=body.charAt(idx++))) {
  id+=ch;
}
",0,3,6,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
44,if (((index = locale.indexOf(HYPHEN)) > -1) || ((index = locale.indexOf(UNDERSCORE)) > -1)) {,"if (((index=locale.indexOf(HYPHEN)) > -1) || ((index=locale.indexOf(UNDERSCORE)) > -1)) {
  if (index == 0) {
    throw new IllegalArgumentException(Resources.getMessage(""LOCALE_NO_LANGUAGE""));
  }
 else   if (index == locale.length() - 1) {
    throw new IllegalArgumentException(Resources.getMessage(""LOCALE_EMPTY_COUNTRY""));
  }
  language=locale.substring(0,index);
  country=locale.substring(index + 1);
}
 else {
  language=locale;
  country="""";
}
",0,14,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
45,if (((index = locale.indexOf(HYPHEN)) > -1),"if (((index=locale.indexOf(HYPHEN)) > -1) || ((index=locale.indexOf(UNDERSCORE)) > -1)) {
  language=locale.substring(0,index);
  country=locale.substring(index + 1);
}
",0,24,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
46,"if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {","if ((i=inputStream.read(buffer,maxNextCharInd,available - maxNextCharInd)) == -1) {
  inputStream.close();
  throw new java.io.IOException();
}
 else maxNextCharInd+=i;
",0,35,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
47,for( int i = values.size(); i-- != 0; ) if ( iterator.nextDouble() != 0 ) numNonZeros++;,"for (int i=values.size(); i-- != 0; ) if (iterator.nextDouble() != 0) numNonZeros++;
",0,11,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ForStatement-body, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ForStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ForStatement-body, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ForStatement-body, ),
"
48,if (i == null || i.intValue() != this.index++) {,"if (i == null || i.intValue() != this.index++) {
  exchange.setException(new CamelException(""Invalid index value.  Expected "" + this.index + "" but was ""+ i));
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, PostfixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
49,if (buf[off++] != cbuf[i]) {,"if (buf[off++] != cbuf[i]) {
  final String startname=new String(cbuf,0,len);
  final String endname=new String(buf,off - i - 1,len);
  throw new XmlPullParserException(""end tag name </"" + endname + ""> must be the same as start tag <""+ startname+ "">""+ "" from line ""+ elRawNameLine[depth],this,null);
}
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
50,"while ((exchange = consumer.receive(""activemq:JmsPollingConsumerTestQueue"", 2000)) != null) {","while ((exchange=consumer.receive(""activemq:JmsPollingConsumerTestQueue"",2000)) != null) {
  result.append(exchange.getIn().getBody(String.class));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
51,"while (count < len && -1 != (n = input.read(buffer, 0, (int) Math.min(len - count, buffer.length)))) {","while (count < len && -1 != (n=input.read(buffer,0,(int)Math.min(len - count,buffer.length)))) {
  output.write(buffer,0,n);
  count+=n;
}
",0,15,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
52,if (!dataInTheList[dataIdx++].equals(id)) {,"if (!dataInTheList[dataIdx++].equals(id)) {
  return false;
}
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
53,if (registry == null || (valueObjectType = registry.getValueType(leaf.getClass())) == null) {,"if (registry == null || (valueObjectType=registry.getValueType(leaf.getClass())) == null) {
  out.append(leaf);
}
 else {
  out.append(valueObjectType.toCacheKey(leaf));
}
",0,4,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
54,if(lastTagLevel == currentTagLevel-- && !cdata) {,"if (lastTagLevel == currentTagLevel-- && !cdata) {
  openTags.pop();
  println(""/>"");
}
 else {
  if (!cdata) {
    indent(-1).printIndent();
  }
  cdata=false;
  print(""</"").print(openTags.pop()).println("">"");
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
55,"if (path != null || (path = checkDefaultMavenResourceDir(lastPath, ""main"")) != null) {","if (path != null || (path=checkDefaultMavenResourceDir(lastPath,""main"")) != null) {
  return path;
}
 else {
  File lastDir=lastPath.getExistingDirectory(false);
  return lastDir != null ? lastDir.getAbsolutePath() : ""."";
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
56,if (i < s.length() && ((c = s.charAt(i)) == '/')) {,"if (i < s.length() && ((c=s.charAt(i)) == '/')) {
  i++;
  c=s.charAt(i);
  final int v2=Integer.parseInt(String.valueOf(c));
  i++;
  if (i >= s.length()) {
    addToSet(val,end,v2,type);
    return i;
  }
  c=s.charAt(i);
  if (c >= '0' && c <= '9') {
    final ValueSet vs=getValue(v2,s,i);
    final int v3=vs.value;
    addToSet(val,end,v3,type);
    i=vs.pos;
    return i;
  }
 else {
    addToSet(val,end,v2,type);
    return i;
  }
}
 else {
  addToSet(val,end,1,type);
  return i;
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
57,for (int i = lastShadow + BZip2Constants.NUM_OVERSHOOT_BYTES +1; --i >= 0;) {,"for (int i=lastShadow + BZip2Constants.NUM_OVERSHOOT_BYTES + 1; --i >= 0; ) {
  quadrant[i]=0;
}
",0,8,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
58,while ((index = path.lastIndexOf(File.separator)) != -1 && path.length() > rootLength) {,"while ((index=path.lastIndexOf(File.separator)) != -1 && path.length() > rootLength) {
  file=new File(path.substring(0,index));
  String[] children=file.list();
  if (children != null && children.length > 0) {
    break;
  }
  if (!file.delete()) {
    throw new IOException(""Unable to delete "" + file.getAbsolutePath());
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
59,while (cmd == null && ++retried <= _HostPingRetryCount.value()) {,"while (cmd == null && ++retried <= _HostPingRetryCount.value()) {
  Thread.sleep(1000 * _HostPingRetryTimer.value());
  cmd=resource.getCurrentStatus(_id);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
60,"while ((pod = findPod(null, null, dc, account.getId(), podsToAvoid)) != null) {","while ((pod=findPod(null,null,dc,account.getId(),podsToAvoid)) != null) {
  podsToAvoid.add(pod.first().getId());
  while ((pool=findStoragePool(dskCh,dc,pod.first(),null,null,null,poolsToAvoid)) != null) {
    break;
  }
  if (pool != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""Found a suitable pool for create volume: "" + pool.getId());
    }
    break;
  }
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
61,"if (result.size() > 1 && (gpuCapacities = ApiDBUtils.getGpuCapacites(result.get(0).getDataCenterId(), result.get(0).getPodId(), result.get(0).getClusterId())) != null) {","if (result.size() > 1 && (gpuCapacities=ApiDBUtils.getGpuCapacites(result.get(0).getDataCenterId(),result.get(0).getPodId(),result.get(0).getClusterId())) != null) {
  HashMap<String,Long> vgpuVMs=ApiDBUtils.getVgpuVmsCount(result.get(0).getDataCenterId(),result.get(0).getPodId(),result.get(0).getClusterId());
  float capacityUsed=0;
  long capacityMax=0;
  for (  VgpuTypesInfo capacity : gpuCapacities) {
    if (vgpuVMs.containsKey(capacity.getGroupName().concat(capacity.getModelName()))) {
      capacityUsed+=(float)vgpuVMs.get(capacity.getGroupName().concat(capacity.getModelName())) / capacity.getMaxVpuPerGpu();
    }
    if (capacity.getModelName().equals(GPU.GPUType.passthrough.toString())) {
      capacityMax+=capacity.getMaxCapacity();
    }
  }
  DataCenter zone=ApiDBUtils.findZoneById(result.get(0).getDataCenterId());
  CapacityResponse capacityResponse=new CapacityResponse();
  if (zone != null) {
    capacityResponse.setZoneId(zone.getUuid());
    capacityResponse.setZoneName(zone.getName());
  }
  if (result.get(0).getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(result.get(0).getPodId());
    capacityResponse.setPodId(pod.getUuid());
    capacityResponse.setPodName(pod.getName());
  }
  if (result.get(0).getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(result.get(0).getClusterId());
    capacityResponse.setClusterId(cluster.getUuid());
    capacityResponse.setClusterName(cluster.getName());
  }
  capacityResponse.setCapacityType(Capacity.CAPACITY_TYPE_GPU);
  capacityResponse.setCapacityName(CapacityVO.getCapacityName(Capacity.CAPACITY_TYPE_GPU));
  capacityResponse.setCapacityUsed((long)Math.ceil(capacityUsed));
  capacityResponse.setCapacityTotal(capacityMax);
  if (capacityMax > 0) {
    capacityResponse.setPercentUsed(format.format(capacityUsed / capacityMax * 100f));
  }
 else {
    capacityResponse.setPercentUsed(format.format(0));
  }
  capacityResponse.setObjectName(""capacity"");
  capacityResponses.add(capacityResponse);
}
",0,4,19,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
62,"} else if ((offeringDetails  = _serviceOfferingDetailsDao.findDetail(offering.getId(), GPU.Keys.vgpuType.toString())) != null) {","if ((offeringDetails=_serviceOfferingDetailsDao.findDetail(offering.getId(),GPU.Keys.vgpuType.toString())) != null) {
  ServiceOfferingDetailsVO groupName=_serviceOfferingDetailsDao.findDetail(offering.getId(),GPU.Keys.pciDevice.toString());
  if (!_resourceMgr.isGPUDeviceAvailable(host.getId(),groupName.getValue(),offeringDetails.getValue())) {
    s_logger.debug(""The last host of this VM does not have required GPU devices available"");
  }
}
 else {
  if (host.getStatus() == Status.Up) {
    boolean hostTagsMatch=true;
    if (offering.getHostTag() != null) {
      _hostDao.loadHostTags(host);
      if (!(host.getHostTags() != null && host.getHostTags().contains(offering.getHostTag()))) {
        hostTagsMatch=false;
      }
    }
    if (hostTagsMatch) {
      long cluster_id=host.getClusterId();
      ClusterDetailsVO cluster_detail_cpu=_clusterDetailsDao.findDetail(cluster_id,""cpuOvercommitRatio"");
      ClusterDetailsVO cluster_detail_ram=_clusterDetailsDao.findDetail(cluster_id,""memoryOvercommitRatio"");
      Float cpuOvercommitRatio=Float.parseFloat(cluster_detail_cpu.getValue());
      Float memoryOvercommitRatio=Float.parseFloat(cluster_detail_ram.getValue());
      boolean hostHasCpuCapability, hostHasCapacity=false;
      hostHasCpuCapability=_capacityMgr.checkIfHostHasCpuCapability(host.getId(),offering.getCpu(),offering.getSpeed());
      if (hostHasCpuCapability) {
        hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOvercommitRatio,memoryOvercommitRatio,true);
        if (!hostHasCapacity)         hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,false,cpuOvercommitRatio,memoryOvercommitRatio,true);
      }
      boolean displayStorage=getDisplayStorageFromVmProfile(vmProfile);
      if (hostHasCapacity && hostHasCpuCapability) {
        s_logger.debug(""The last host of this VM is UP and has enough capacity"");
        s_logger.debug(""Now checking for suitable pools under zone: "" + host.getDataCenterId() + "", pod: ""+ host.getPodId()+ "", cluster: ""+ host.getClusterId());
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        if (vm.getHypervisorType() == HypervisorType.BareMetal) {
          DeployDestination dest=new DeployDestination(dc,pod,cluster,host,new HashMap<Volume,StoragePool>(),displayStorage);
          s_logger.debug(""Returning Deployment Destination: "" + dest);
          return dest;
        }
        DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId(),null);
        Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoids,HostAllocator.RETURN_UPTO_ALL);
        Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
        List<Volume> readyAndReusedVolumes=result.second();
        if (!suitableVolumeStoragePools.isEmpty()) {
          List<Host> suitableHosts=new ArrayList<Host>();
          suitableHosts.add(host);
          Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools,avoids,getPlannerUsage(planner,vmProfile,plan,avoids),readyAndReusedVolumes,plan.getPreferredHosts(),vm);
          if (potentialResources != null) {
            Map<Volume,StoragePool> storageVolMap=potentialResources.second();
            for (            Volume vol : readyAndReusedVolumes) {
              storageVolMap.remove(vol);
            }
            DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap,displayStorage);
            s_logger.debug(""Returning Deployment Destination: "" + dest);
            return dest;
          }
        }
      }
 else {
        s_logger.debug(""The last host of this VM does not have enough capacity"");
      }
    }
  }
 else {
    s_logger.debug(""The last host of this VM is not UP or is not enabled, host status is: "" + host.getStatus().name() + "", host resource state is: ""+ host.getResourceState());
  }
}
",0,7,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
63,"while ((length = httpConn.getInputStream().read(buf, 0, buf.length)) != -1) {","while ((length=httpConn.getInputStream().read(buf,0,buf.length)) != -1) {
  remoteSize+=length;
}
",0,11,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
64,if((index = base_name.lastIndexOf(File.separatorChar)) > 0) {,"if ((index=base_name.lastIndexOf(File.separatorChar)) > 0) {
  base_name=base_name.substring(index + 1);
}
",0,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
65,while (idx > 0 && ((ch = sb.charAt(idx - 1)) == '\r' || ch == ' ' || ch == '\t')),"while (idx > 0 && ((ch=sb.charAt(idx - 1)) == '\r' || ch == ' ' || ch == '\t')) idx--;
",0,2,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
66,while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {,"while (resultSet.next() && (limit < 0 || cnt++ < limit)) {
  final DynaBean bean=createDynaBean();
  for (  final DynaProperty property : properties) {
    final String name=property.getName();
    final Object value=getObject(resultSet,name);
    bean.set(name,value);
  }
  rows.add(bean);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
67,if (iterations++ > 50 || bytz < 0) {,"if (iterations++ > 50 || bytz < 0) {
  fail(""Max iterations reached before resource released."");
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
68,if (!active.isSparseRecord(readIdx++),"if (!active.isSparseRecord(readIdx++) && raw.skip(DumpArchiveConstants.TP_SIZE) == -1) {
  throw new EOFException();
}
",0,0,3,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
69,if (!WritableTypeConverter.convertWritableToTajoType(writable).equals(tajoParams[i++])) {,"if (!WritableTypeConverter.convertWritableToTajoType(writable).equals(tajoParams[i++])) {
  return false;
}
",0,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
70,if (numUnpackSubStreams != 1 || stats.folderHasCrc == null,"if (numUnpackSubStreams != 1 || stats.folderHasCrc == null || !stats.folderHasCrc.get(folderIdx++)) {
  numDigests+=numUnpackSubStreams;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
71,"while(offset < size && (readed = input.read(data, offset, (size - offset))) != -1) {","while (offset < size && (readed=input.read(data,offset,(size - offset))) != -1) {
  offset+=readed;
}
",0,2,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
72,while ((skipTotal<bytes) && ((currentPos = (int)skip(bytes-skipTotal)) > 0)) {,"while ((skipTotal < bytes) && ((currentPos=(int)skip(bytes - skipTotal)) > 0)) {
  skipTotal+=currentPos;
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
73,for (int k = 3; (i <= hi) && (--k >= 0); i++) {,"for (int k=3; (i <= hi) && (--k >= 0); i++) {
  final int v=fmap[i];
  final int vd=v + d;
  int j=i;
  boolean onceRunned=false;
  int a=0;
  HAMMER:   while (true) {
    if (onceRunned) {
      fmap[j]=a;
      if ((j-=h) <= mj) {
        break HAMMER;
      }
    }
 else {
      onceRunned=true;
    }
    a=fmap[j - h];
    int i1=a + d;
    int i2=vd;
    if (block[i1 + 1] == block[i2 + 1]) {
      if (block[i1 + 2] == block[i2 + 2]) {
        if (block[i1 + 3] == block[i2 + 3]) {
          if (block[i1 + 4] == block[i2 + 4]) {
            if (block[i1 + 5] == block[i2 + 5]) {
              if (block[(i1+=6)] == block[(i2+=6)]) {
                int x=lastShadow;
                X:                 while (x > 0) {
                  x-=4;
                  if (block[i1 + 1] == block[i2 + 1]) {
                    if (quadrant[i1] == quadrant[i2]) {
                      if (block[i1 + 2] == block[i2 + 2]) {
                        if (quadrant[i1 + 1] == quadrant[i2 + 1]) {
                          if (block[i1 + 3] == block[i2 + 3]) {
                            if (quadrant[i1 + 2] == quadrant[i2 + 2]) {
                              if (block[i1 + 4] == block[i2 + 4]) {
                                if (quadrant[i1 + 3] == quadrant[i2 + 3]) {
                                  if ((i1+=4) >= lastPlus1) {
                                    i1-=lastPlus1;
                                  }
                                  if ((i2+=4) >= lastPlus1) {
                                    i2-=lastPlus1;
                                  }
                                  workDoneShadow++;
                                  continue X;
                                }
                                if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
                                  continue HAMMER;
                                }
                                break HAMMER;
                              }
                              if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
                                continue HAMMER;
                              }
                              break HAMMER;
                            }
                            if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
                              continue HAMMER;
                            }
                            break HAMMER;
                          }
                          if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
                            continue HAMMER;
                          }
                          break HAMMER;
                        }
                        if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
                          continue HAMMER;
                        }
                        break HAMMER;
                      }
                      if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
                        continue HAMMER;
                      }
                      break HAMMER;
                    }
                    if ((quadrant[i1] > quadrant[i2])) {
                      continue HAMMER;
                    }
                    break HAMMER;
                  }
                  if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
                    continue HAMMER;
                  }
                  break HAMMER;
                }
                break HAMMER;
              }
              if ((block[i1] & 0xff) > (block[i2] & 0xff)) {
                continue HAMMER;
              }
              break HAMMER;
            }
            if ((block[i1 + 5] & 0xff) > (block[i2 + 5] & 0xff)) {
              continue HAMMER;
            }
            break HAMMER;
          }
          if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
            continue HAMMER;
          }
          break HAMMER;
        }
        if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
          continue HAMMER;
        }
        break HAMMER;
      }
      if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
        continue HAMMER;
      }
      break HAMMER;
    }
    if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
      continue HAMMER;
    }
    break HAMMER;
  }
  fmap[j]=v;
}
",0,1,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
74,for (int parent_k; (parent_k = parent[k]) >= 0;) {,"for (int parent_k; (parent_k=parent[k]) >= 0; ) {
  k=parent_k;
  j++;
}
",0,0,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
75,if (block[(i1 += 6)] == block[(i2 += 6)]) {,"if (block[(i1+=6)] == block[(i2+=6)]) {
  int x=lastShadow;
  X:   while (x > 0) {
    x-=4;
    if (block[i1 + 1] == block[i2 + 1]) {
      if (quadrant[i1] == quadrant[i2]) {
        if (block[i1 + 2] == block[i2 + 2]) {
          if (quadrant[i1 + 1] == quadrant[i2 + 1]) {
            if (block[i1 + 3] == block[i2 + 3]) {
              if (quadrant[i1 + 2] == quadrant[i2 + 2]) {
                if (block[i1 + 4] == block[i2 + 4]) {
                  if (quadrant[i1 + 3] == quadrant[i2 + 3]) {
                    if ((i1+=4) >= lastPlus1) {
                      i1-=lastPlus1;
                    }
                    if ((i2+=4) >= lastPlus1) {
                      i2-=lastPlus1;
                    }
                    workDoneShadow++;
                    continue X;
                  }
                  if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
                    continue HAMMER;
                  }
                  break HAMMER;
                }
                if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
                  continue HAMMER;
                }
                break HAMMER;
              }
              if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
                continue HAMMER;
              }
              break HAMMER;
            }
            if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
              continue HAMMER;
            }
            break HAMMER;
          }
          if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
            continue HAMMER;
          }
          break HAMMER;
        }
        if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
          continue HAMMER;
        }
        break HAMMER;
      }
      if ((quadrant[i1] > quadrant[i2])) {
        continue HAMMER;
      }
      break HAMMER;
    }
    if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
      continue HAMMER;
    }
    break HAMMER;
  }
  break HAMMER;
}
",0,0,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
76,while ((code = (byte) (0xff & in.read())) != -1) {,"while ((code=(byte)(0xff & in.read())) != -1) {
  codeBytes.write(code);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
77,for (Future<Void> fetchFuture; (fetchFuture = fetchFutures.poll()) != null; ) {,"for (Future<Void> fetchFuture; (fetchFuture=fetchFutures.poll()) != null; ) {
  if (wait) {
    fetchFuture.get(fetchConfig.getFetchTimeout(),TimeUnit.MILLISECONDS);
  }
 else {
    if (fetchFuture.isDone()) {
      fetchFuture.get();
    }
 else {
      fetchFutures.addFirst(fetchFuture);
      break;
    }
  }
}
",0,5,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
78,"for (int i=0; (i=s.indexOf(KEY_SEP_CHAR, i)+1)>0; ) count++;","for (int i=0; (i=s.indexOf(KEY_SEP_CHAR,i) + 1) > 0; ) count++;
",0,2,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, ForStatement-body, ),
"
79,while ((ch = peekChar()) != EOF && pred.test(ch)) {,"while ((ch=peekChar()) != EOF && pred.test(ch)) {
  consumer.accept(readChar());
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
80,while (++i < len && (ch = readChar()) != EOF) {,"while (++i < len && (ch=readChar()) != EOF) {
  if (ch == lineContinuationChar && isNewLinePart(peekChar())) {
    --i;
    discardNewLineSequence();
  }
 else {
    consumer.accept(ch);
  }
}
",0,2,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
81,while (retries-- > 0 && count.get() != 2),"while (retries-- > 0 && count.get() != 2) {
  try {
    Thread.sleep(20);
  }
 catch (  final InterruptedException e) {
    Thread.interrupted();
  }
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
82,"while ( offset < bytes.length && ( numRead = fis.read( bytes, offset, bytes.length - offset ) ) >= 0 )","while (offset < bytes.length && (numRead=fis.read(bytes,offset,bytes.length - offset)) >= 0) {
  offset+=numRead;
}
",0,2,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
83,if (Object.class.equals(parmClass) && (objectParmCount++ == 2)) {,"if (Object.class.equals(parmClass) && (objectParmCount++ == 2)) {
  severe=true;
  break;
}
",0,0,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
84,for (int i = stack.size() - 1; --i >= 0;) {,"for (int i=stack.size() - 1; --i >= 0; ) {
  NodeIterator it=(NodeIterator)stack.get(i);
  Pointer pointer=it.getNodePointer();
  if (pointer != null && pointer.getNode() == node) {
    return true;
  }
}
",0,2,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
85,while (!stopped && attempts-- > 0 && this.clientStub == null && driverProcessIsAlive()) {,"while (!stopped && attempts-- > 0 && this.clientStub == null && driverProcessIsAlive()) {
  LOG.log(Level.INFO,""waiting for driver process to register"");
  this.wait(1000);
}
",0,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
86,while ( ( ++relativeIndex < 0 ) && ( result != null ) ),"while ((++relativeIndex < 0) && (result != null)) {
  result=result.getParent();
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
87,"if ((newState = getUpdatedState(curState, getMsgId(tuple), newEvents)) != null) {","if ((newState=getUpdatedState(curState,getMsgId(tuple),newEvents)) != null) {
  state.put(taskStream,newState);
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
88,if ( ( ( isSet = methodName.startsWith( OgnlRuntime.SET_PREFIX ) ) || ( isGet =,"if (((isSet=methodName.startsWith(OgnlRuntime.SET_PREFIX)) || (isGet=methodName.startsWith(OgnlRuntime.GET_PREFIX))) && (methodName.length() > 3)) {
  String propertyName=Introspector.decapitalize(methodName.substring(3));
  Class<?>[] parameterTypes=OgnlRuntime.getParameterTypes(method);
  int parameterCount=parameterTypes.length;
  if (isGet && (parameterCount == 1) && (method.getReturnType() != Void.TYPE)) {
    List<Method> pair=pairs.computeIfAbsent(propertyName,k -> new ArrayList<Method>());
    pair.add(method);
  }
  if (isSet && (parameterCount == 2) && (method.getReturnType() == Void.TYPE)) {
    List<Method> pair=pairs.computeIfAbsent(propertyName,k -> new ArrayList<Method>());
    pair.add(method);
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
89,"if ((_initParameterMap = (Map<String, String>)_servletContext.getAttribute(_INIT_PARAMETER_MAP_ATTRIBUTE)) == null)","if ((_initParameterMap=(Map<String,String>)_servletContext.getAttribute(_INIT_PARAMETER_MAP_ATTRIBUTE)) == null) {
  _initParameterMap=new ServletInitParameterMap(_servletContext);
  _servletContext.setAttribute(_INIT_PARAMETER_MAP_ATTRIBUTE,_initParameterMap);
}
",0,5,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
90,if (exceptionOnActivate && !(validateCounter++%2 == 0 ? evenValid : oddValid)) {,"if (exceptionOnActivate && !(validateCounter++ % 2 == 0 ? evenValid : oddValid)) {
  throw new Exception();
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
91,"while ((actualCount = actualReader.read(actualCh, targetIndex, targetSize - targetIndex)) != -1) {","while ((actualCount=actualReader.read(actualCh,targetIndex,targetSize - targetIndex)) != -1) {
  final int expectedCount=expectedResultReader.read(expectedCh,targetIndex,targetSize - targetIndex);
  if (expectedCount != -1) {
    expectedResultWriter.write(expectedCh,targetIndex,expectedCount);
  }
  if (expectedCount == actualCount) {
    assertEquals(expectedCount,actualCount,() -> String.format(""Step size %,d"",targetSize));
    assertArrayEquals(expectedCh,actualCh,() -> String.format(""[%,d] '%s' != '%s', result so far: \""%s\"""",index.get(),String.valueOf(expectedCh),String.valueOf(actualCh),actualResultWriter.toString()));
  }
 else   if (actualCount < expectedCount) {
    assertTrue(expectedResultWriter.toString().startsWith(actualResultWriter.toString()));
  }
  if (actualCount != -1) {
    actualResultWriter.write(actualCh,targetIndex,actualCount);
  }
 else {
    assertEquals(expectedCount,actualCount,() -> String.format(""Step size %,d"",targetSize));
  }
  index.incrementAndGet();
  assertFalse(index.get() > expectedResultLen,() -> ""Index: "" + index.get());
  Arrays.fill(actualCh,(char)0);
  Arrays.fill(expectedCh,(char)0);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
92,while ((entry = getTarFile().getNextTarEntry()) != null) {,"while ((entry=getTarFile().getNextTarEntry()) != null) {
  final AbstractFileName name=(AbstractFileName)getFileSystemManager().resolveName(getRootName(),UriParser.encode(entry.getName(),ENC));
  TarFileObject fileObj;
  if (entry.isDirectory() && getFileFromCache(name) != null) {
    fileObj=(TarFileObject)getFileFromCache(name);
    fileObj.setTarEntry(entry);
    continue;
  }
  fileObj=createTarFileObject(name,entry);
  putFileToCache(fileObj);
  TarFileObject parent=null;
  for (AbstractFileName parentName=(AbstractFileName)name.getParent(); parentName != null; fileObj=parent, parentName=(AbstractFileName)parentName.getParent()) {
    parent=(TarFileObject)getFileFromCache(parentName);
    if (parent == null) {
      parent=createTarFileObject(parentName,null);
      putFileToCache(parent);
    }
    parent.attachChild(fileObj.getName());
  }
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
93,"while (senderBean.countMessagesInQueue(""test"") > 0 && waitingCount++ < 15) {","while (senderBean.countMessagesInQueue(""test"") > 0 && waitingCount++ < 15) {
  Thread.sleep(10L);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
94,while ((workqueue.getActiveCount() < DEFAULT_HIGH_WATER_MARK,"while ((workqueue.getActiveCount() < DEFAULT_HIGH_WATER_MARK || numRun < DEFAULT_HIGH_WATER_MARK || workqueue.getSize() > 0) && max++ < 10) {
  Thread.sleep(100L);
  numRun=numRunning(workItems);
}
",0,0,3,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
95,while (workqueue.getPoolSize() > DEFAULT_LOW_WATER_MARK && i++ < 50) {,"while (workqueue.getPoolSize() > DEFAULT_LOW_WATER_MARK && i++ < 50) {
  if (last != workqueue.getPoolSize()) {
    last=workqueue.getPoolSize();
    i=0;
  }
  Thread.sleep(100L);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
96,if (number.charAt(lastDigitIndex--) != 'i') {,"if (number.charAt(lastDigitIndex--) != 'i') {
  throw new IAE(""Invalid format of number: %s"",rawNumber);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
97,for (byte[] largeEvent; (largeEvent = largeEventsToEmit.poll()) != LARGE_EVENTS_STOP; ) {,"for (byte[] largeEvent; (largeEvent=largeEventsToEmit.poll()) != LARGE_EVENTS_STOP; ) {
  emitLargeEvent(largeEvent);
  approximateBuffersToEmitCount.decrementAndGet();
  approximateLargeEventsToEmitCount.decrementAndGet();
  approximateEventsToEmitCount.decrementAndGet();
}
",0,0,7,,"PrimitiveType(ArrayType-elementType, VariableDeclarationExpression-type, ForStatement-initializers, ),
Dimension(ArrayType-dimensions, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
"
98,while (expected.hasNext() && actual.hasNext() && cnt++ < numFlatIterations) {,"while (expected.hasNext() && actual.hasNext() && cnt++ < numFlatIterations) {
  Assert.assertEquals(expected.next(),actual.next());
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
99,"while (!(header = in.readLine()).equals("""")) {","while (!(header=in.readLine()).equals("""")) {
  if (""Accept-Encoding: identity"".equals(header)) {
    foundAcceptEncoding.set(true);
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
100,while ((status = tsqa.getStatus(taskId).get()).isRunnable()) {,"while ((status=tsqa.getStatus(taskId).get()).isRunnable()) {
  if (System.currentTimeMillis() > startTime + 10 * 1000) {
    throw new ISE(""Where did the task go?!: %s"",task.getId());
  }
  Thread.sleep(100);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
"
101,"if ((mergeBufferHolder = mergeBufferPool.takeBatch(numBuffers, timeout)).isEmpty()) {","if ((mergeBufferHolder=mergeBufferPool.takeBatch(numBuffers,timeout)).isEmpty()) {
  throw new QueryTimeoutException(""Cannot acquire enough merge buffers"");
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
102,while (parentDir != null && --maxDepth >= 0) {,"while (parentDir != null && --maxDepth >= 0) {
  if (!parentDir.delete() || segment.getDataSource().equals(parentDir.getName())) {
    break;
  }
  parentDir=parentDir.getParentFile();
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
103,if ((listTableInfo == null) && (listTableInfo = getSessionObject(ListTableInfo.class)) == null),"if ((listTableInfo == null) && (listTableInfo=getSessionObject(ListTableInfo.class)) == null) {
  listTableInfo=new BeanListTableInfo();
  listTableInfo.setSortColumnName((defaultSortColumn != null ? defaultSortColumn.getName() : null));
  listTableInfo.setSortAscending(defaultSortAscending);
  setSessionObject(ListTableInfo.class,listTableInfo);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
104,if (paramObject==null || StringUtils.isEmpty((objectKey=paramObject.getObjectKey()))),"if (paramObject == null || StringUtils.isEmpty((objectKey=paramObject.getObjectKey()))) throw new InvalidArgumentException(""paramObject"",paramObject);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
105,"if (control!=null && (value=control.getFieldValue(field, action, locale, col))!=null)","if (control != null && (value=control.getFieldValue(field,action,locale,col)) != null) {
  if (value instanceof InputControl.FieldValueError) {
    InputControl.FieldValueError fieldError=(InputControl.FieldValueError)value;
    String errorValue=fieldError.getValue();
    addFieldError(field,col,fieldError,errorValue);
    setRecordFieldValue(i,errorValue,false);
    valid=false;
    continue;
  }
  if (value.equals(InputControl.NULL_VALUE) && col.isRequired()) {
    InputControl.FieldValueError fieldError=new InputControl.FieldValueError(FieldErrors.InputValueRequired,null,"""");
    addFieldError(field,col,fieldError,value);
    valid=false;
    continue;
  }
  if (log.isInfoEnabled())   log.info(""SetUpdateFields: setting field '"" + col.getName() + ""' to ""+ String.valueOf(value));
  if (!setRecordFieldValue(i,value,true)) {
    if (record instanceof ErrorInfo)     addFieldError(field,col,(ErrorInfo)record,value);
 else     addFieldError(field,col,new ActionError(FieldErrors.InputInvalidValue),value);
    setRecordFieldValue(i,value,false);
    valid=false;
  }
}
 else if ((value=action.getRequestParam(field + ""!"")) != null) {
  if (col.getDataType().isDate()) {
    if (value.equals(sysdate) == false) {
      String format=(col.getDataType() == DataType.DATE) ? ""yyyy-MM-dd"" : ""yyyy-MM-dd HH:mm:ss.S"";
      SimpleDateFormat sdf=new SimpleDateFormat(format);
      try {
        value=sdf.parseObject(value.toString());
      }
 catch (      ParseException e) {
        log.error(""Failed to parse date for record"",e);
        continue;
      }
    }
  }
  if (log.isInfoEnabled())   log.info(""SetUpdateFields: directly setting field '"" + col.getName() + ""' to ""+ String.valueOf(value));
  if (ObjectUtils.compareEqual(record.getValue(i),value) == false) {
    setRecordFieldValue(i,value,false);
  }
}
 else {
  continue;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
106,if ((keyIndex = ((DBTable) rowset).getPrimaryKey().getColumnPos(this)) >= 0),"if ((keyIndex=((DBTable)rowset).getPrimaryKey().getColumnPos(this)) >= 0) elem.setAttribute(""key"",String.valueOf(keyIndex + 1));
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
107,if (++eventCounter % logEveryNEvents == 0) {,"if (++eventCounter % logEveryNEvents == 0) {
  logger.info(""Null sink {} successful processed {} events."",getName(),eventCounter);
}
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
108,} else if ((topicProperty = context.getString(KafkaSourceConstants.TOPICS)) != null &&,"if ((topicProperty=context.getString(KafkaSourceConstants.TOPICS)) != null && !topicProperty.isEmpty()) {
  subscriber=new TopicListSubscriber(topicProperty);
}
 else if (subscriber == null) {
  throw new ConfigurationException(""At least one Kafka topic must be specified."");
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
109,while (++pos < _header.length(),"while (++pos < _header.length() && WHITE.indexOf(_header.charAt(pos)) != -1) ;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
110,if ((,"if (((c=s.charAt(i)) != ' ') && (c != '\t') && (c != '\r')&& (c != '\n')) {
  break;
}
",0,0,0,,
111,if (--i == index) return e;,"if (--i == index) return e;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
112,"while ((next = msg.indexOf('\n', start)) != -1) {","while ((next=msg.indexOf('\n',start)) != -1) {
  s+=msg.substring(start,next + 1);
  s+=""  "";
  start=next + 1;
}
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
113,if (key[++data] == '\0') {,"if (key[++data] == '\0') {
  ++data;
  break;
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
114,while (requests.get() > 0 && ((next = buffers.poll()) != null)) {,"while (requests.get() > 0 && ((next=buffers.poll()) != null)) {
  final int bytesFreed=next.remaining();
  s.onNext(next);
  requests.decrementAndGet();
  windowScalingIncrement.addAndGet(bytesFreed);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
115,"while ((l = inStream.read(tmp, 0, Math.min(DEFAULT_BYTE_BUFFER_SIZE, buffer.capacity() - buffer.length()))) > 0) {","while ((l=inStream.read(tmp,0,Math.min(DEFAULT_BYTE_BUFFER_SIZE,buffer.capacity() - buffer.length()))) > 0) {
  buffer.append(tmp,0,l);
}
",0,0,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
116,while ((chReadCount = reader.read(tmp)) != -1 && buf.length() < maxResultLength) {,"while ((chReadCount=reader.read(tmp)) != -1 && buf.length() < maxResultLength) {
  buf.append(tmp,0,chReadCount);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
117,if (count++ > 0) Duration.sleep(period);,"if (count++ > 0) Duration.sleep(period);
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
118,} else if ((result = this.mapTargetIdToTarget.get(targetedCombinerParameter.getTargetId())) != null) {,"if ((result=this.mapTargetIdToTarget.get(targetedCombinerParameter.getTargetId())) != null) {
  targetedCombinerParameter.setTarget(result);
  return result;
}
 else {
  return null;
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
119,if ((iterator = domRule.getAdviceExpressions()) != null && iterator.hasNext(),"if ((iterator=domRule.getAdviceExpressions()) != null && iterator.hasNext() && !bLenient) {
  throw DOMUtil.newUnexpectedElementException(child,nodeRule);
}
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
120,if ((matchValue = matchComponentsHere[iMatch]) == -2) {,"if ((matchValue=matchComponentsHere[iMatch]) == -2) {
  iVersion=versionComponents.length;
}
 else if (matchValue == -1) {
  iVersion++;
}
 else {
  int versionValue=versionComponents[iVersion];
  if (cmp == 0 && versionValue == matchValue || cmp < 0 && versionValue <= matchValue || cmp > 0 && versionValue >= matchValue) {
    iVersion++;
  }
 else {
    return false;
  }
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
121,while (i < fromString.length() && Character.isDigit((charAt = fromString.charAt(i)))) {,"while (i < fromString.length() && Character.isDigit((charAt=fromString.charAt(i)))) {
  value=value * 10 + Character.digit(charAt,10);
  i++;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
122,while((tuple = child.next()) != null && !context.isStopped()) {,"while ((tuple=child.next()) != null && !context.isStopped()) {
  keyTuple=new VTuple(groupingKeyIds.length);
  for (int i=0; i < groupingKeyIds.length; i++) {
    keyTuple.put(i,tuple.get(groupingKeyIds[i]));
  }
  if (hashTable.containsKey(keyTuple)) {
    FunctionContext[] contexts=hashTable.get(keyTuple);
    for (int i=0; i < aggFunctions.length; i++) {
      aggFunctions[i].merge(contexts[i],inSchema,tuple);
    }
  }
 else {
    FunctionContext contexts[]=new FunctionContext[aggFunctionsNum];
    for (int i=0; i < aggFunctionsNum; i++) {
      contexts[i]=aggFunctions[i].newContext();
      aggFunctions[i].merge(contexts[i],inSchema,tuple);
    }
    hashTable.put(keyTuple,contexts);
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
123,"while (!end && ((cmp = joincomparator.compare(leftTuple, rightTuple)) != 0)) {","while (!end && ((cmp=joincomparator.compare(leftTuple,rightTuple)) != 0)) {
  if (cmp > 0) {
    Tuple nullPaddedTuple=TupleUtil.createNullPaddedTuple(leftNumCols);
    frameTuple.set(nullPaddedTuple,rightTuple);
    projector.eval(frameTuple,outTuple);
    rightTuple=rightChild.next();
    if (rightTuple == null) {
      end=true;
    }
    return outTuple;
  }
 else   if (cmp < 0) {
    Tuple nullPaddedTuple=TupleUtil.createNullPaddedTuple(rightNumCols);
    frameTuple.set(leftTuple,nullPaddedTuple);
    projector.eval(frameTuple,outTuple);
    leftTuple=leftChild.next();
    if (leftTuple == null) {
      end=true;
    }
    return outTuple;
  }
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
124,while ((temp[lineFeedPos] = (byte)is.read()) != (byte)LF) {,"while ((temp[lineFeedPos]=(byte)is.read()) != (byte)LF) {
  if (temp[lineFeedPos] < 0) {
    break;
  }
  lineFeedPos++;
}
",0,0,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
125,"} else if ((el = DomUtil.getChildElement(config, ""noncollection"", null)) != null) {","if ((el=DomUtil.getChildElement(config,""noncollection"",null)) != null) {
  nodetypeNames=parseNodeTypesEntry(el);
  collectionNames=false;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
126,for (int b; (b = in.read()) != -1; k++) {,"for (int b; (b=in.read()) != -1; k++) {
  assertEquals(""Value.getStream().read() and Value.getBinary().read() "" + ""return different values."",(byte)b,content[k]);
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
127,if ((f2byte = f2.read()) != -1 && f2byte == f1byte) {,"if ((f2byte=f2.read()) != -1 && f2byte == f1byte) {
  equal=true;
  continue;
}
 else {
  equal=false;
  break;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
128,"if (!""HTTP"".equals(statusLine.substring(at, at += 4))) {","if (!""HTTP"".equals(statusLine.substring(at,at+=4))) {
  log.warn(""Status-Line '"" + statusLine + ""' does not start with HTTP"");
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
129,while ((n = readNextChar()) > '\u001F' && n != ESCAPE_CHAR && n != EOL && n != QUOTE_CHAR) {,"while ((n=readNextChar()) > '\u001F' && n != ESCAPE_CHAR && n != EOL && n != QUOTE_CHAR) {
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
130,while( ( wait = ( 1000 - ( System.currentTimeMillis() - before ) ) ) > 0 ) {,"while ((wait=(1000 - (System.currentTimeMillis() - before))) > 0) {
  try {
    Thread.sleep(wait);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
131,"if (!disruptor.getRingBuffer().tryPublishEvent(this,","if (!disruptor.getRingBuffer().tryPublishEvent(this,this,(location=calcLocationIfRequested(fqcn)),fqcn,level,marker,message,thrown)) {
  handleRingBufferFull(location,fqcn,level,marker,message,thrown);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
132,while (!after1.exists() && count++ < MAX_ATTEMPTS) {,"while (!after1.exists() && count++ < MAX_ATTEMPTS) {
  Thread.sleep(50);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
133,while (!stop[0] && (line = in.readLine()) != null) {,"while (!stop[0] && (line=in.readLine()) != null) {
  System.out.println(line);
}
",0,0,6,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
134,if ((++count & UPDATE_THRESHOLD) == UPDATE_THRESHOLD) {,"if ((++count & UPDATE_THRESHOLD) == UPDATE_THRESHOLD) {
  millis=System.currentTimeMillis();
}
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
135,for (int i = 0; null != (clazz = StackLocatorUtil.getCallerClass(i)); i++) {,"for (int i=0; null != (clazz=StackLocatorUtil.getCallerClass(i)); i++) {
  classes[i]=clazz;
}
",0,0,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NullLiteral(InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
136,while (!((curr = key[pos = (pos + 1) & mask]) == null)) {,"while (!((curr=key[pos=(pos + 1) & mask]) == null)) {
  if (curr.equals(k)) {
    return pos;
  }
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
"
137,if (((curr = myKeys[pos]) == null)) {,"if (((curr=myKeys[pos]) == null)) {
  myKeys[last]=(null);
  values[last]=null;
  return;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
138,while (myKeys[--i] == null) {,"while (myKeys[--i] == null) {
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
139,if (newKey[pos = HashCommon.mix(myKeys[i].hashCode()) & mask] != null) {,"if (newKey[pos=HashCommon.mix(myKeys[i].hashCode()) & mask] != null) {
  while (newKey[pos=(pos + 1) & mask] != null) {
  }
}
",0,0,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
140,"for (int j = realSize(), i = 0, t = 0; j-- != 0;) {","for (int j=realSize(), i=0, t=0; j-- != 0; ) {
  while (keys[i] == null) {
    i++;
  }
  if (this != keys[i]) {
    t=keys[i].hashCode();
  }
  if (this != values[i]) {
    t^=(values[i] == null ? 0 : values[i].hashCode());
  }
  result+=t;
  i++;
}
",0,1,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
141,if (!v.isNA(r) && ((d = v.at(r)) != 0.0)) {,"if (!v.isNA(r) && ((d=v.at(r)) != 0.0)) {
  m.setQuick(r,c,d);
}
",0,1,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
142,if (++i == size1 || ++j == size2) {,"if (++i == size1 || ++j == size2) {
  break;
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
143,if (v != null && (norm = v.norm(1)) != 0) {,"if (v != null && (norm=v.norm(1)) != 0) {
  numNonZero+=v.getNumNondefaultElements();
  totalCorpusWeight+=norm;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
144,if (btIndex > aCols.length || (aCol = aCols[btIndex]) == null,"if (btIndex > aCols.length || (aCol=aCols[btIndex]) == null || aCol.size() == 0) {
  continue;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
145,if (btIndex > aCols.length || (aCol = aCols[btIndex]) == null) {,"if (btIndex > aCols.length || (aCol=aCols[btIndex]) == null) {
  continue;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
146,"while (!Double.isNaN(current = CVB0Driver.readPerplexity(conf, topicModelTemp, iteration))) {","while (!Double.isNaN(current=CVB0Driver.readPerplexity(conf,topicModelTemp,iteration))) {
  lowest=Math.min(current,lowest);
  iteration++;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
147,"if ((result = comparator.compare(array[mid], object)) < 0) {","if ((result=comparator.compare(array[mid],object)) < 0) {
  from=mid + 1;
}
 else if (result == 0) {
  return mid;
}
 else {
  to=mid - 1;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
148,while ( !g.containsTuple(f=(Node)focus.tuples().next()) ) {,"while (!g.containsTuple(f=(Node)focus.tuples().next())) {
  f=null;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
149,while (iterations == -1 || iterations-- > 0) {,"while (iterations == -1 || iterations-- > 0) {
  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(samplePath),StandardCharsets.UTF_8));
  String line;
  while ((line=reader.readLine()) != null) {
    kafkaProducer.send(new ProducerRecord<String,String>(topic,line));
    Thread.sleep(delay);
  }
  reader.close();
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
150,"while (((msg = decoder.decode((ENCODED) in, state)) != null)) {","while (((msg=decoder.decode((ENCODED)in,state)) != null)) {
  super.messageReceived(session,msg,controller);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
"
151,while(((nextKey = _nextEntry()) == null) && _iteratorStack.size() > 0),"while (((nextKey=_nextEntry()) == null) && _iteratorStack.size() > 0) if (_currPath == null) _currIterator=_iteratorStack.pop();
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
152,"while ((count = _walkAvailableNodes(startIndex, count, disclosedRows)) > 0 && getDepth() > 0)","while ((count=_walkAvailableNodes(startIndex,count,disclosedRows)) > 0 && getDepth() > 0) {
  exitContainer();
  startIndex=getRowIndex();
  startIndex+=1;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
153,if ((property.isMethodExpression() || property.isMethodBinding()) && (sig = property.getMethodBindingSignature()) != null),"if ((property.isMethodExpression() || property.isMethodBinding()) && (sig=property.getMethodBindingSignature()) != null) {
  stream.writeCharacters(""\n      "");
  stream.writeStartElement(""method-signature"");
  stream.writeCharacters(sig.getReturnType());
  stream.writeCharacters("" myMethod("");
  String[] params=sig.getParameterTypes();
  for (int i=0; i < params.length; i++) {
    if (i > 0)     stream.writeCharacters("", "");
    stream.writeCharacters(params[i]);
  }
  stream.writeCharacters("")"");
  stream.writeEndElement();
}
 else {
  String propertyClass=property.getPropertyClass();
  stream.writeCharacters(""\n      "");
  stream.writeStartElement(""type"");
  stream.writeCharacters(propertyClass);
  stream.writeEndElement();
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
154,while (c != '[' && (c = stream.read()) >= 0) {,"while (c != '[' && (c=stream.read()) >= 0) {
  osEntitySet.write(c);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
155,while ((entitySet != null || singleton!=null),"while ((entitySet != null || singleton != null) && ++navigationCount < resourcePaths.size() && resourcePaths.get(navigationCount) instanceof UriResourceNavigation) {
  final UriResourceNavigation uriResourceNavigation=(UriResourceNavigation)resourcePaths.get(navigationCount);
  blockTypeFilters(uriResourceNavigation);
  if (uriResourceNavigation.getProperty().containsTarget()) {
    return entitySet;
  }
  EdmBindingTarget target=null;
  if (entitySet != null) {
    target=entitySet.getRelatedBindingTarget(uriResourceNavigation.getProperty().getName());
  }
 else   if (singleton != null) {
    target=singleton.getRelatedBindingTarget(uriResourceNavigation.getProperty().getName());
  }
  if (target instanceof EdmEntitySet) {
    entitySet=(EdmEntitySet)target;
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
156,if ((index = getMetadata().getDataItemNameIndex(attributeName)) != -1) {,"if ((index=getMetadata().getDataItemNameIndex(attributeName)) != -1) {
  String[] attrValues=geolocationData.getLocationData();
  if (index < attrValues.length) {
    value=attrValues[index];
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""RangerGeolocationDatabase.getValue() - No value specified attribute-name:"" + attributeName);
    }
  }
}
 else {
  LOG.error(""RangerGeolocationDatabase.getValue() - RangerGeolocationDatabase not initialized or Invalid attribute-name:"" + attributeName);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
157,"if (matcher.isMatch(resource, evalContext) && matchedCount++ > 0) {","if (matcher.isMatch(resource,evalContext) && matchedCount++ > 0) {
  ret=false;
  break;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
158,if ((requestFileURLs[i] = getInputFileURL(requestFileNames[i])) == null) {,"if ((requestFileURLs[i]=getInputFileURL(requestFileNames[i])) == null) {
  LOG.error(""Cannot read file: "" + requestFileNames[i]);
  ret=false;
}
",0,0,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
159,"while ((event = queue.poll(0, TimeUnit.MICROSECONDS)) != null) {","while ((event=queue.poll(0,TimeUnit.MICROSECONDS)) != null) {
  LOG.log(Level.FINEST,""Event: {0}"",event);
  linkRef.get().write(encoder.encode(event));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
160,if ((updateCount++ % 5) == 0) {,"if ((updateCount++ % 5) == 0) {
  LOG.error(""Throwing FailedException"");
  throw new FailedException(""Enforced State Update Fail. On retrial should replay the exact same batch."");
}
",0,0,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
161,while ((n = is.read(buf)) != -1 && bytesToCopy > 0) {,"while ((n=is.read(buf)) != -1 && bytesToCopy > 0) {
  out.write(buf,0,(int)Math.min(n,bytesToCopy));
  bytesToCopy-=n;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
162,while ((i = this.in.read()) != -1) {,"while ((i=this.in.read()) != -1) {
  out.write(i);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
163,"if ((method = findMethod(sqlCreateFunction.className(), ""evaluate"")) != null) {","if ((method=findMethod(sqlCreateFunction.className(),""evaluate"")) != null) {
  function=ScalarFunctionImpl.create(method);
}
 else if (findMethod(sqlCreateFunction.className(),""add"") != null) {
  function=AggregateFunctionImpl.create(Class.forName(sqlCreateFunction.className()));
}
 else {
  throw new RuntimeException(""Invalid scalar or aggregate function"");
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
164,"} else if ((conf = readStormConfig()).get(""storm.log.dir"") != null) {","if ((conf=readStormConfig()).get(""storm.log.dir"") != null) {
  dir=String.valueOf(conf.get(""storm.log.dir""));
}
 else if (System.getProperty(STORM_HOME) != null) {
  dir=System.getProperty(STORM_HOME) + FILE_SEPARATOR + ""logs"";
}
 else {
  dir=""logs"";
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
165,if (anyChanged = !difference.areEqual()) {,"if (anyChanged=!difference.areEqual()) {
  for (  Entry<String,Assignment> entry : difference.entriesOnlyOnLeft().entrySet()) {
    final Map<List<Long>,NodeInfo> execToPort=entry.getValue().get_executor_node_port();
    final long count=new HashSet<>(execToPort.values()).size();
    LOG.info(""Removing {} from {} slots"",entry.getKey(),count);
    LOG.info(""Remove executors: {}"",execToPort.keySet());
    numRemovedSlot+=count;
    numRemovedExec+=execToPort.size();
  }
  for (  Entry<String,Assignment> entry : difference.entriesOnlyOnRight().entrySet()) {
    final Map<List<Long>,NodeInfo> execToPort=entry.getValue().get_executor_node_port();
    final long count=new HashSet<>(execToPort.values()).size();
    LOG.info(""Assigning {} to {} slots"",entry.getKey(),count);
    LOG.info(""Assign executors: {}"",execToPort.keySet());
    numAddedSlot+=count;
    numAddedExec+=execToPort.size();
  }
  for (  Entry<String,MapDifference.ValueDifference<Assignment>> entry : difference.entriesDiffering().entrySet()) {
    final Map<List<Long>,NodeInfo> execToSlot=entry.getValue().rightValue().get_executor_node_port();
    final Set<NodeInfo> slots=new HashSet<>(execToSlot.values());
    LOG.info(""Reassigning {} to {} slots"",entry.getKey(),slots.size());
    LOG.info(""Reassign executors: {}"",execToSlot.keySet());
    final Map<List<Long>,NodeInfo> oldExecToSlot=entry.getValue().leftValue().get_executor_node_port();
    long commonExecCount=0;
    Set<NodeInfo> commonSlots=new HashSet<>(execToSlot.size());
    for (    Entry<List<Long>,NodeInfo> execEntry : execToSlot.entrySet()) {
      if (execEntry.getValue().equals(oldExecToSlot.get(execEntry.getKey()))) {
        commonExecCount++;
        commonSlots.add(execEntry.getValue());
      }
    }
    long commonSlotCount=commonSlots.size();
    numRemovedSlot+=new HashSet<>(oldExecToSlot.values()).size() - commonSlotCount;
    numRemovedExec+=oldExecToSlot.size() - commonExecCount;
    numAddedSlot+=slots.size() - commonSlotCount;
    numAddedExec+=execToSlot.size() - commonExecCount;
  }
}
",0,0,3,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, Assignment-rightHandSide, IfStatement-expression, ),
"
166,"if (charIdx < chars.length && (node[nodeIndex].key = index_seq_search(chars, charIdx)) != null) {","if (charIdx < chars.length && (node[nodeIndex].key=index_seq_search(chars,charIdx)) != null) {
  node[nodeIndex].type=NODE_TYPE_ACTION;
  node[nodeIndex].suffix=0;
  node_set=true;
  if (node[nodeIndex].key.len > 0) {
    charIdx+=node[nodeIndex].key.len;
  }
  if (ver == FORMAT_TYPE.NUM_TYPE) {
  }
  if (ver == FORMAT_TYPE.DCH_TYPE && charIdx < chars.length && (s=suff_search(chars,charIdx,SUFFTYPE_POSTFIX)) != null) {
    suffix|=s.id;
    if (s.len > 0) {
      charIdx+=s.len;
    }
  }
}
 else if (charIdx < chars.length) {
  if (chars[charIdx] == '""' && last != '\\') {
    int x=0;
    while (charIdx < chars.length) {
      charIdx++;
      if (chars[charIdx] == '""' && x != '\\') {
        charIdx++;
        break;
      }
 else       if (chars[charIdx] == '\\' && x != '\\') {
        x='\\';
        continue;
      }
      node[nodeIndex].type=NODE_TYPE_CHAR;
      node[nodeIndex].character=chars[charIdx];
      node[nodeIndex].key=null;
      node[nodeIndex].suffix=0;
      nodeIndex++;
      x=chars[charIdx];
    }
    node_set=false;
    suffix=0;
    last=0;
  }
 else   if (charIdx < chars.length - 1 && chars[charIdx] == '\\' && last != '\\' && chars[charIdx + 1] == '""') {
    last=chars[charIdx];
    charIdx++;
  }
 else   if (charIdx < chars.length) {
    node[nodeIndex].type=NODE_TYPE_CHAR;
    node[nodeIndex].character=chars[charIdx];
    node[nodeIndex].key=null;
    node_set=true;
    last=0;
    charIdx++;
  }
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
167,"if (ver == FORMAT_TYPE.DCH_TYPE && charIdx < chars.length  && (s = suff_search(chars, charIdx, SUFFTYPE_POSTFIX)) != null) {","if (ver == FORMAT_TYPE.DCH_TYPE && charIdx < chars.length && (s=suff_search(chars,charIdx,SUFFTYPE_POSTFIX)) != null) {
  suffix|=s.id;
  if (s.len > 0) {
    charIdx+=s.len;
  }
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
168,while (buf[off++] != ';') {,"while (buf[off++] != ';') {
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
169,while ((c = signature.charAt(pos++)) == ':') {,"while ((c=signature.charAt(pos++)) == ':') {
  pos=parseType(signature,pos,v.visitInterfaceBound());
}
",0,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
170,"while ((index = type.indexOf(""[]"", index) + 1) > 0) {","while ((index=type.indexOf(""[]"",index) + 1) > 0) {
  sb.append('[');
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
171,"if (!isSubTypeOf(values.get(i++), newValue(owner))) {","if (!isSubTypeOf(values.get(i++),newValue(owner))) {
  throw new AnalyzerException(insn,""Method owner"",newValue(owner),values.get(0));
}
",0,0,6,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
172,"while ((sessionStart = u.toString().indexOf("";jsessionid="")) != -1) {","while ((sessionStart=u.toString().indexOf("";jsessionid="")) != -1) {
  int sessionEnd=u.toString().indexOf("";"",sessionStart + 1);
  if (sessionEnd == -1) {
    sessionEnd=u.toString().indexOf(""?"",sessionStart + 1);
  }
  if (sessionEnd == -1) {
    sessionEnd=u.length();
  }
  u.delete(sessionStart,sessionEnd);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
173,while (n-- > 0 && !atEnd() && hasNext()) {,"while (n-- > 0 && !atEnd() && hasNext()) {
  index++;
  next();
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
174,while (!level.quit.equals((msg = queue.take()).l)) {,"while (!level.quit.equals((msg=queue.take()).l)) {
  final Throwable t=msg.t;
  if (null != t) {
switch (msg.l) {
case fatal:
      msg.ls.fatal(msg.s,t);
    break;
case error:
  msg.ls.error(msg.s,t);
break;
case warn:
msg.ls.warn(msg.s,t);
break;
case info:
msg.ls.info(msg.s,t);
break;
case debug:
msg.ls.debug(msg.s,t);
break;
}
}
 else {
switch (msg.l) {
case fatal:
msg.ls.fatal(msg.s);
break;
case error:
msg.ls.error(msg.s);
break;
case warn:
msg.ls.warn(msg.s);
break;
case info:
msg.ls.info(msg.s);
break;
case debug:
msg.ls.debug(msg.s);
break;
}
}
}
",0,0,6,,"QualifiedName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
175,for (int count = -1; (count = in.read(buf)) >= 0; ) {,"for (int count=-1; (count=in.read(buf)) >= 0; ) {
  bout.write(buf,0,count);
}
",0,0,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
176,while ((eventA = nextInterestingEvent(a)) != null & (eventB = nextInterestingEvent(b)) != null) {,"while ((eventA=nextInterestingEvent(a)) != null & (eventB=nextInterestingEvent(b)) != null) {
  if ((eventType=eventA.getEventType()) != eventB.getEventType()) {
    message.append(""events of different types: "").append(eventA).append("", "").append(eventB);
    return false;
  }
  if (eventType == XMLStreamConstants.START_ELEMENT) {
    final StartElement startA=eventA.asStartElement();
    final StartElement startB=eventB.asStartElement();
    if (!startA.getName().getLocalPart().equals(startB.getName().getLocalPart())) {
      message.append(""Different elements "").append(startA.getName()).append("", "").append(startB.getName()).append("" at location "").append(eventA.getLocation());
      return false;
    }
  }
 else   if (eventType == XMLStreamConstants.END_ELEMENT) {
    final EndElement endA=eventA.asEndElement();
    final EndElement endB=eventB.asEndElement();
    if (!endA.getName().getLocalPart().equals(endB.getName().getLocalPart())) {
      message.append(""Different elements "").append(endA.getName()).append("", "").append(endB.getName()).append("" at location "").append(eventA.getLocation());
      return false;
    }
  }
 else   if (eventType == XMLStreamConstants.CHARACTERS) {
    final Characters endA=eventA.asCharacters();
    final Characters endB=eventB.asCharacters();
    if (!endA.getData().equals(endB.getData())) {
      message.append(""Different content "").append(endA.getData()).append("", "").append(endB.getData()).append("" at location "").append(eventA.getLocation());
      return false;
    }
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
177,"for (int n = 0; (n = resource.read(b, 0, b.length)) != -1;","for (int n=0; (n=resource.read(b,0,b.length)) != -1; bout.write(b,0,n)) ;
",0,0,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
"
178,while (count++ < 30 && (aFile.exists() == false)) {,"while (count++ < 30 && (aFile.exists() == false)) {
  try {
    Thread.sleep(timeout);
  }
 catch (  InterruptedException ie) {
  }
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
179,"if ((resolveMethod = model.getClass().getMethod(""resolve"", ModelResolver.class)) != null) {","if ((resolveMethod=model.getClass().getMethod(""resolve"",ModelResolver.class)) != null) {
  resolveMethod.invoke(model,resolver);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
180,while ((digit = item.charAt(index)) == '.' || Character.isDigit(digit)) {,"while ((digit=item.charAt(index)) == '.' || Character.isDigit(digit)) {
  index--;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
181,if (++i>=cs.todo.length()) {,"if (++i >= cs.todo.length()) {
  throw new InvalidPatternException(""Curly brace not closed, parsing '"" + cs.todo.substring(braceStartIndex) + ""' after ""+ resultSoFar);
}
",1,16,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
182,if (count++ == 300 && !killed.get()) {,"if (count++ == 300 && !killed.get()) {
  killed.set(true);
  waitToKill.countDown();
}
",1,9,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
183,if (ai >= size || actions.get(ai++).intValue() != act) {,"if (ai >= size || actions.get(ai++).intValue() != act) {
  return false;
}
",1,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
184,if (ldata[doffset++] != pattern[poffset++]) {,"if (ldata[doffset++] != pattern[poffset++]) {
  continue outer_loop;
}
",1,2,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
185,while (locIndex-->0 && !locations.isEmpty()) {,"while (locIndex-- > 0 && !locations.isEmpty()) {
  locations.remove(0);
}
",1,1,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
186,for (request = null; count-- > 0; request = this.mock.getServer().takeRequest()) {,"for (request=null; count-- > 0; request=this.mock.getServer().takeRequest()) {
}
",1,1,9,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NullLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ForStatement-updaters, ),
"
187,if (entry != null && (handler = entry.handler) != null) {,"if (entry != null && (handler=entry.handler) != null) {
  handler.handleRequest(exchange);
}
 else {
  entry=methodMap.get(DEFAULT_HANDLER_KEY);
  if (entry != null && (handler=entry.handler) != null) {
    handler.handleRequest(exchange);
  }
 else {
    exchange.setStatusCode(StatusCodes.METHOD_NOT_ALLOWED);
    exchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_TYPE,MimeMappings.DEFAULT_MIME_MAPPINGS.get(""txt""));
    exchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_LENGTH,0);
    exchange.endExchange();
  }
}
",1,8,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
188,if (size == 1 || ++counter >= size) {,"if (size == 1 || ++counter >= size) {
  counter=0;
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
189,"if (contentType == null || (equal = contentType.indexOf(""charset="")) == -1) {","if (contentType == null || (equal=contentType.indexOf(""charset="")) == -1) {
  return null;
}
",1,9,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
190,"while ((n = in.read(buf, 0, Math.min(buf.length, maxBlobLength - blobLength))) != -1) {","while ((n=in.read(buf,0,Math.min(buf.length,maxBlobLength - blobLength))) != -1) {
  if (blob == null) {
    blob=new ByteArrayOutputStream(n);
  }
  blob.write(buf,0,n);
  blobLength+=n;
  if (blobLength >= maxBlobLength) {
    LOGGER.warn(""File length exceeds maxBlobLength ({}), truncating BLOB event!"",maxBlobLength);
    break;
  }
}
",1,28,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
191,while ((min == null || max == null) && (parent = child.getParent()) != null) {,"while ((min == null || max == null) && (parent=child.getParent()) != null) {
  pt=(OrientedPoint)parent.getCutHyperplane();
  if ((pt.isPositiveFacing() && child.isMinus()) || (!pt.isPositiveFacing() && child.isPlus())) {
    if (max == null) {
      max=pt;
    }
  }
 else   if (min == null) {
    min=pt;
  }
  child=parent;
}
",1,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
192,"while ((containerFrame1 = (Frame)SwingUtilities.getAncestorOfClass(Frame.class, container)) == null) {","while ((containerFrame1=(Frame)SwingUtilities.getAncestorOfClass(Frame.class,container)) == null) {
  try {
    waitForContainerLock.wait(1000);
    getLogger().debug(""waiting for container's frame to be available"");
  }
 catch (  InterruptedException ie) {
  }
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
193,"if ((bytes = inputStream.read(block, 0, CHUNK_SIZE)) > -1) {","if ((bytes=inputStream.read(block,0,CHUNK_SIZE)) > -1) {
  outputStream.write(block,0,bytes);
  totalBytes+=bytes;
}
 else {
  done=true;
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
194,"while ((pool = findStoragePool(dskCh, dc, pod.first(), clusterId, hostId, vm, poolsToAvoid)) != null) {","while ((pool=findStoragePool(dskCh,dc,pod.first(),clusterId,hostId,vm,poolsToAvoid)) != null) {
  break;
}
",1,1,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
195,for (int i = 1; (headerName = conn.getHeaderFieldKey(i)) != null; i++) {,"for (int i=1; (headerName=conn.getHeaderFieldKey(i)) != null; i++) {
  if (headerName.equals(""Set-Cookie"")) {
    String cookie=conn.getHeaderField(i);
    cookie=cookie.substring(0,cookie.indexOf("";""));
    String cookieName=cookie.substring(0,cookie.indexOf(""=""));
    String cookieValue=cookie.substring(cookie.indexOf(""="") + 1,cookie.length());
    cookieToSent=cookieName + ""="" + cookieValue;
  }
}
",1,1,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
196,while (System.currentTimeMillis() - startTick <= _opsTimeout || --retry > 0) {,"while (System.currentTimeMillis() - startTick <= _opsTimeout || --retry > 0) {
  s_logger.info(""Trying to connect to "" + ipAddress);
  try (SocketChannel sch=SocketChannel.open()){
    sch.configureBlocking(true);
    sch.socket().setSoTimeout(5000);
    final InetSocketAddress addr=new InetSocketAddress(ipAddress,port);
    sch.connect(addr);
    return null;
  }
 catch (  final IOException e) {
    s_logger.info(""Could] not connect to "" + ipAddress + "" due to ""+ e.toString());
    if (e instanceof ConnectException) {
      try {
        Thread.sleep(5000);
      }
 catch (      final InterruptedException ex) {
        s_logger.debug(""[ignored] interupted while waiting to retry connecting to vm after exception: "" + e.getLocalizedMessage());
      }
    }
  }
  try {
    Thread.sleep(1000);
  }
 catch (  final InterruptedException ex) {
    s_logger.debug(""[ignored] interupted while connecting to vm."");
  }
}
",1,3,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
197,while ((subnet2 = subnet2 >> 1 & subnet) != 0) {,"while ((subnet2=subnet2 >> 1 & subnet) != 0) {
  bits++;
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
198,if ((java_class = Repository.lookupClass(argv[0])) == null) {,"if ((java_class=Repository.lookupClass(argv[0])) == null) {
  java_class=new ClassParser(argv[0]).parse();
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
199,while (((cur = pq.pop()) != null) && lim-- > 0) {,"while (((cur=pq.pop()) != null) && lim-- > 0) {
  Object[] ar=(Object[])cur;
  al.add((String)ar[0]);
}
",1,21,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
200,if (bytes[++i] == CR) {,"if (bytes[++i] == CR) {
  continue;
}
",1,1,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
201,if (this.countdown-- > 0) {,"if (this.countdown-- > 0) {
  return '\n';
}
",1,1,3,,"ThisExpression(FieldAccess-expression, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
202,while ((i = (stream.read())) != -1 && Character.isDigit((char) i)) {,"while ((i=(stream.read())) != -1 && Character.isDigit((char)i)) {
  length++;
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
203,if (args != null && (size = args.length) > 0) {,"if (args != null && (size=args.length) > 0) {
  this.params=new Class<?>[size];
  for (int p=0; p < size; ++p) {
    final Object arg=args[p];
    final Class<?> parm=arg == null ? Void.class : arg.getClass();
    hash=(HASH * hash) + parm.hashCode();
    this.params[p]=parm;
  }
}
 else {
  this.params=NOARGS;
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
204,if (c == '\'' && (++currentIdx == pattern.length() || pattern.charAt(currentIdx) != '\'')) {,"if (c == '\'' && (++currentIdx == pattern.length() || pattern.charAt(currentIdx) != '\'')) {
  activeQuote=!activeQuote;
  continue;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
205,for (int i = expected * n; i-- > 0;) {,"for (int i=expected * n; i-- > 0; ) {
  histogram[sampler.sample()]++;
}
",1,1,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
206,if (buffer.get(offset++) == NullHandling.IS_NOT_NULL_BYTE) {,"if (buffer.get(offset++) == NullHandling.IS_NOT_NULL_BYTE) {
  return of(buffer.getLong(offset));
}
",1,4,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
207,while ((bytesRead = decoder.read(this.waitingBuffer)) > 0) {,"while ((bytesRead=decoder.read(this.waitingBuffer)) > 0) {
  totalRead+=bytesRead;
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
208,if (i++ != items.size() - 1) {,"if (i++ != items.size() - 1) {
  dumper.newLine();
}
",1,1,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
209,if (provisioned == null || (newNodes = provisioned.getNodeIds()).isEmpty()) {,"if (provisioned == null || (newNodes=provisioned.getNodeIds()).isEmpty()) {
  log.warn(""NewNodes is empty, returning from provision loop"");
  break;
}
 else {
  log.info(""Provisioned: %d [%s]"",provisioned.getNodeIds().size(),provisioned.getNodeIds());
  currentlyProvisioning.addAll(newNodes);
  lastProvisionTime=DateTimes.nowUtc();
  scalingStats.addProvisionEvent(provisioned);
  workersToProvision-=provisioned.getNodeIds().size();
  didProvision=true;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
210,while (skipped < count && (skip = in.skip(count - skipped)) != 0) {,"while (skipped < count && (skip=in.skip(count - skipped)) != 0) {
  skipped+=skip;
}
",1,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
211,if (isExcluded = name.charAt(0) == '!') {,"if (isExcluded=name.charAt(0) == '!') {
  name=name.substring(1);
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, IfStatement-expression, ),
"
212,if (messagePattern == null || (len = messagePattern.length()) == 0 || arguments == null,"if (messagePattern == null || (len=messagePattern.length()) == 0 || arguments == null || arguments.length == 0) {
  return messagePattern;
}
",1,3,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
213,for (int i = 0; i < MAX_CHANNEL_REQUESTS && (entry = this.channelQueue.poll()) != null; i++) {,"for (int i=0; i < MAX_CHANNEL_REQUESTS && (entry=this.channelQueue.poll()) != null; i++) {
  final SocketChannel socketChannel=entry.channel;
  final Object attachment=entry.attachment;
  try {
    prepareSocket(socketChannel.socket());
    socketChannel.configureBlocking(false);
  }
 catch (  final IOException ex) {
    logException(ex);
    try {
      socketChannel.close();
    }
 catch (    final IOException ex2) {
      logException(ex2);
    }
    throw ex;
  }
  final SelectionKey key;
  try {
    key=socketChannel.register(this.selector,SelectionKey.OP_READ);
  }
 catch (  final ClosedChannelException ex) {
    return;
  }
  final IOSession ioSession=new IOSessionImpl(""a"",key,socketChannel);
  final InternalDataChannel dataChannel=new InternalDataChannel(ioSession,null,ioSessionDecorator,sessionListener,closedSessions);
  dataChannel.upgrade(this.eventHandlerFactory.createHandler(dataChannel,attachment));
  dataChannel.setSocketTimeout(this.reactorConfig.getSoTimeout());
  key.attach(dataChannel);
  dataChannel.handleIOEvent(SelectionKey.OP_CONNECT);
}
",1,1,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
214,if ((this.jdbcDriverClass = properties.getProperty(propPrefix + PROP_JDBC_DRIVER)) == null) {,"if ((this.jdbcDriverClass=properties.getProperty(propPrefix + PROP_JDBC_DRIVER)) == null) {
  this.logger.error(""No '"" + propPrefix + PROP_JDBC_DRIVER+ ""' property"");
  throw new PIPException(""No '"" + propPrefix + PROP_JDBC_DRIVER+ ""' property"");
}
",1,5,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
215,} else if(!((configFile = new File(configFileName)).isFile() && configFile.canRead())) {,"if (!((configFile=new File(configFileName)).isFile() && configFile.canRead())) {
  throw new IllegalArgumentException(""Cannot read configuration file "" + configFile);
}
",1,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
216,"while((raw = reader.readLine(curPrompt + ""> "")) != null) {","while ((raw=reader.readLine(curPrompt + ""> "")) != null) {
  if (accumulatedLine.length() > 0) {
    accumulatedLine.append(' ');
  }
  line=raw.trim();
  if (line.length() == 0) {
    continue;
  }
 else   if (line.charAt(0) == '/') {
    printInvalidCommand(line);
    continue;
  }
 else   if (line.charAt(0) == '\\') {
    ((PersistentHistory)reader.getHistory()).flush();
    executeCommand(line);
  }
 else   if (line.endsWith("";"") && !line.endsWith(""\\;"")) {
    line=StringUtils.chomp(line).trim();
    String punctuated=accumulatedLine + line;
    if (!newStatement) {
      reader.getHistory().removeLast();
      reader.getHistory().removeLast();
      reader.getHistory().add(punctuated);
      ((PersistentHistory)reader.getHistory()).flush();
    }
    code=executeStatements(punctuated);
    newStatement=true;
    accumulatedLine=new StringBuffer();
    curPrompt=prompt;
  }
 else {
    line=StringUtils.chomp(raw).trim();
    accumulatedLine.append(line);
    if (!newStatement) {
      reader.getHistory().removeLast();
    }
 else {
      newStatement=false;
    }
    reader.getHistory().removeLast();
    reader.getHistory().add(accumulatedLine.toString());
    curPrompt=StringUtils.repeat("" "",prompt.length());
    continue;
  }
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
217,"while ((end != true) && ((cmp = joinComparator.compare(leftTuple, rightTuple)) != 0)) {","while ((end != true) && ((cmp=joinComparator.compare(leftTuple,rightTuple)) != 0)) {
  if (cmp > 0) {
    Tuple nullPaddedTuple=createNullPaddedTuple(leftNumCols);
    frameTuple.set(nullPaddedTuple,rightTuple);
    projector.eval(frameTuple,outTuple);
    rightTuple=rightChild.next();
    if (rightTuple == null) {
      end=true;
    }
    return outTuple;
  }
 else   if (cmp < 0) {
    leftTuple=leftChild.next();
    if (leftTuple == null) {
      end=true;
    }
  }
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
218,if ((out[s] = (char) buf[offset + count++]) < '\u0080') {,"if ((out[s]=(char)buf[offset + count++]) < '\u0080') {
  s++;
}
 else if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  if ((b & 0xC0) != 0x80) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  int c=buf[count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",1,1,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
219,} else if (((a = out[s]) & 0xe0) == 0xc0) {,"if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  if ((b & 0xC0) != 0x80) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  int c=buf[count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
220,if ((file = new File(path)).exists()) return file;,"if ((file=new File(path)).exists()) return file;
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
221,if ((oldKey == null || !oldKey.equals(key)) && --free == 0) {,"if ((oldKey == null || !oldKey.equals(key)) && --free == 0) {
  free=entries.length;
  int newCapacity=free << 2;
  rehash(newCapacity);
}
",1,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
222,while (command[++i] != '\'') {,"while (command[++i] != '\'') {
  checkRunOver(i,len,startLoop);
}
",1,1,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
223,if (index > s - 1 || !((val = get(index)) instanceof JsonString)) {,"if (index > s - 1 || !((val=get(index)) instanceof JsonString)) {
  return defaultValue;
}
 else {
  return JsonString.class.cast(val).getString();
}
",1,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
224,if (basisVector == null || (alpha = nextVector.dot(basisVector)) == 0.0) {,"if (basisVector == null || (alpha=nextVector.dot(basisVector)) == 0.0) {
  continue;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
225,if ((V = f2 + f2 - W) < 1.0) {,"if ((V=f2 + f2 - W) < 1.0) {
  Y=k2 + Dk;
  if (V <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {
    return Y;
  }
  if (V <= f(Y,lMy,cPm)) {
    return Y;
  }
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
226,while (((b = in.readByte()) & 0x80L) != 0) {,"while (((b=in.readByte()) & 0x80L) != 0) {
  value|=(b & 0x7F) << i;
  i+=7;
  Preconditions.checkArgument(i <= 63,""Variable length quantity is too long (must be <= 63)"");
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
227,"for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )","for (i=toRet - Math.min(curPos,seenUpto); i-- > 0; ) try {
  curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
  throw new Error(""Internal Error : Please send a bug report."");
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
228,if ((ch = reqCtx.getDecimalSeparator()) != (char)0),"if ((ch=reqCtx.getDecimalSeparator()) != (char)0) symbols.setDecimalSeparator(ch);
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
229,while (curIdx++ < index && xmlSecEventIterator.hasNext()) {,"while (curIdx++ < index && xmlSecEventIterator.hasNext()) {
  xmlSecEventIterator.next();
}
",1,1,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
230,if (++reader >= parts.get(part).size()) {,"if (++reader >= parts.get(part).size()) {
  state=STATE_END_ELEMENT_PART;
  event=END_ELEMENT;
}
 else {
  event=parts.get(part).get(reader).next();
  if (event == START_DOCUMENT) {
    event=parts.get(part).get(reader).next();
  }
}
",1,1,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
231,if ((results = (List<WSHandlerResult>) mc.get(WSHandlerConstants.RECV_RESULTS)) == null) {,"if ((results=(List<WSHandlerResult>)mc.get(WSHandlerConstants.RECV_RESULTS)) == null) {
  results=new ArrayList<>();
  mc.put(WSHandlerConstants.RECV_RESULTS,results);
}
",1,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
232,"if ((string = EvalHelper.evalString(""name"", getNameExpr(), this,","if ((string=EvalHelper.evalString(""name"",getNameExpr(),this,pageContext)) != null) {
  setName(string);
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
233,for (int i = currentStack.length; --i >= 0 && --parentIndex >= 0; ) {,"for (int i=currentStack.length; --i >= 0 && --parentIndex >= 0; ) {
  final StackTraceElement parentFrame=parentStack[parentIndex];
  if (parentFrame.equals(currentStack[i])) {
    duplicates++;
  }
 else {
    break;
  }
}
",1,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
234,if (sendfileSize > 0,"if (sendfileSize > 0 && length > sendfileSize && (Boolean.TRUE.equals(request.getAttribute(Globals.SENDFILE_SUPPORTED_ATTR))) && (request.getClass().getName().equals(""org.apache.catalina.connector.RequestFacade"")) && (response.getClass().getName().equals(""org.apache.catalina.connector.ResponseFacade"")) && resource.isFile() && ((canonicalPath=resource.getCanonicalPath()) != null)) {
  request.setAttribute(Globals.SENDFILE_FILENAME_ATTR,canonicalPath);
  if (range == null) {
    request.setAttribute(Globals.SENDFILE_FILE_START_ATTR,Long.valueOf(0L));
    request.setAttribute(Globals.SENDFILE_FILE_END_ATTR,Long.valueOf(length));
  }
 else {
    request.setAttribute(Globals.SENDFILE_FILE_START_ATTR,Long.valueOf(range.start));
    request.setAttribute(Globals.SENDFILE_FILE_END_ATTR,Long.valueOf(range.end + 1));
  }
  return true;
}
",1,1,2,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
235,while (retries-- > 0 && felix.getState() != Bundle.UNINSTALLED) {,"while (retries-- > 0 && felix.getState() != Bundle.UNINSTALLED) {
  felix.wait(100);
}
",1,1,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
236,"while (totalSize > 0 && (readSize = is.read(buf, offset, totalSize)) != -1) {","while (totalSize > 0 && (readSize=is.read(buf,offset,totalSize)) != -1) {
  offset+=readSize;
  totalSize-=readSize;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
237,if ((schemaLocation = (String)schemaLocationMap.get(schemaTypeName.getNamespaceURI())) != null) {,"if ((schemaLocation=(String)schemaLocationMap.get(schemaTypeName.getNamespaceURI())) != null) {
  schemaLocation=DEFAULT_SCHEMA_LOCATION;
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
238,if (typesIndex < types.size() && String.class.equals(types.get(typesIndex++).getGenericType())) {,"if (typesIndex < types.size() && String.class.equals(types.get(typesIndex++).getGenericType())) {
  String x=servletRequest.getParameter(name);
  if (x.startsWith(""\"""") || x.startsWith(""'"")) {
    jsonRequest+=x;
  }
 else {
    if (x.contains(""\"""")) {
      jsonRequest+=""'"" + x + ""'"";
    }
 else {
      jsonRequest+=""\"""" + x + ""\"""";
    }
  }
}
 else {
  jsonRequest+=servletRequest.getParameter(name);
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
239,if (nmessages++ % batchSize == 0) {,"if (nmessages++ % batchSize == 0) {
  long startACK=System.nanoTime();
  m.acknowledge();
  long endACK=System.nanoTime();
  totalTimeACKTime+=(endACK - startACK);
}
",2,2,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
240,while (rs.next() && (count++ < 5)) {,"while (rs.next() && (count++ < 5)) {
  QuoteDataBean quoteData=getQuoteDataFromResultSet(rs);
  topLosersData.add(quoteData);
}
",2,2,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
241,if (++i >= l) break;,"if (++i >= l) break;
",2,2,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
242,"if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {","if ((result=compareRight(a.substring(ia),b.substring(ib))) != 0) {
  return result;
}
",2,10,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
243,while (s != null && (i = s.indexOf('-')) > 0) {,"while (s != null && (i=s.indexOf('-')) > 0) {
  s=s.substring(0,i) + s.substring(i + 1,i + 2).toUpperCase() + s.substring(i + 2);
}
",2,6,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
244,if ((reader != null) && (lastIdText = reader.readLine()) != null) {,"if ((reader != null) && (lastIdText=reader.readLine()) != null) {
  lastId=Integer.parseInt(lastIdText);
}
",2,3,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
245,if ((curr = key[pos = HashCommon.mix(k.hashCode()) & mask]) == null) {,"if ((curr=key[pos=HashCommon.mix(k.hashCode()) & mask]) == null) {
  return false;
}
",2,5,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
246,while((entry = splitInputStream.getNextEntry()) != null && inputStreamToCompare.getNextEntry() != null) {,"while ((entry=splitInputStream.getNextEntry()) != null && inputStreamToCompare.getNextEntry() != null) {
  if (entry.isDirectory()) {
    continue;
  }
  assertArrayEquals(IOUtils.toByteArray(splitInputStream),IOUtils.toByteArray(inputStreamToCompare));
}
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
247,"while (!(lockResult = tryLock(task, request)).isOk()) {","while (!(lockResult=tryLock(task,request)).isOk()) {
  if (lockResult.isRevoked()) {
    return lockResult;
  }
  lockReleaseCondition.await();
}
",2,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
"
248,if ((this.definition = properties.getProperty(prop)) == null) {,"if ((this.definition=properties.getProperty(prop)) == null) {
  this.logger.error(""Missing '"" + prop + ""' property"");
  throw new PIPException(""Missing '"" + prop + ""' property"");
}
",2,2,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
249,if (current - lastException > EXCEPTION_INTERVAL || exceptionCount++ < MAX_EXCEPTIONS) {,"if (current - lastException > EXCEPTION_INTERVAL || exceptionCount++ < MAX_EXCEPTIONS) {
  LOGGER.error(msg);
}
",2,2,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
250,if ((curr = key[pos = (pos + 1) & mask]) == null) {,"if ((curr=key[pos=(pos + 1) & mask]) == null) {
  return false;
}
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
251,if ((result = array[mid].compareTo(object)) < 0) {,"if ((result=array[mid].compareTo(object)) < 0) {
  from=mid + 1;
}
 else if (result == 0) {
  return mid;
}
 else {
  to=mid - 1;
}
",2,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
252,if (--HttpShellJobDriver.this.expectCount <= 0) {,"if (--HttpShellJobDriver.this.expectCount <= 0) {
  HttpShellJobDriver.this.state=State.READY;
  if (HttpShellJobDriver.this.cmd == null) {
    LOG.log(Level.INFO,""All evaluators ready; waiting for command. State: {0}"",HttpShellJobDriver.this.state);
  }
 else {
    HttpShellJobDriver.this.submit(HttpShellJobDriver.this.cmd);
  }
}
",2,2,3,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
253,if (r[x] != d[y++]) {,"if (r[x] != d[y++]) {
  break;
}
",2,2,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
254,"while ((i=s.indexOf('=', i+1))>0)","while ((i=s.indexOf('=',i + 1)) > 0) {
  int n=s.lastIndexOf('&',i);
  if (n < 0)   n=s.lastIndexOf('?',i);
  if (n < 0)   continue;
  int v=s.indexOf('&',i);
  String name=s.substring(n + 1,i);
  String value=(v > i) ? s.substring(i + 1,v) : s.substring(i + 1);
  log.debug(""Adding view parameter '{}' with value '{}'."",name,value);
  if (map == null)   map=new HashMap<String,String>();
  map.put(name,value);
}
",3,16,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
255,while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {,"while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {
  bufline[j]=newLine;
  nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];
  bufcolumn[j]=newCol + columnDiff;
  columnDiff=nextColDiff;
  i++;
}
",3,4,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
256,while (pos[0] < str0.length() && isZero(ch0 = str0.codePointAt(pos[0]))) {,"while (pos[0] < str0.length() && isZero(ch0=str0.codePointAt(pos[0]))) {
  zeroes0++;
  pos[0]+=Character.charCount(ch0);
}
",3,3,10,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
257,while ((c = inputStream.read()) != -1 && crFound == false && lfFound == false) {,"while ((c=inputStream.read()) != -1 && crFound == false && lfFound == false) {
  if (c == CR) {
    crFound=true;
  }
 else   if (c == LF) {
    lfFound=true;
  }
 else {
    buff.append((char)c);
  }
}
",3,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
258,if ((maskIndex=addr.indexOf('/')) != -1) {,"if ((maskIndex=addr.indexOf('/')) != -1) {
  IPv4 other=new IPv4(addr.substring(0,maskIndex));
  int maskLen=Integer.valueOf(addr.substring(maskIndex + 1));
  IPv4 subnetMask=IPv4.getSubnetMask(maskLen);
  if (this.and(subnetMask).equals(other.and(subnetMask))) {
    return true;
  }
 else {
    return false;
  }
}
 else {
  throw new InvalidAddressException();
}
",3,3,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
259,"while ((categoryIndex = document.indexOf(""[[Category:"", startIndex)) != -1) {","while ((categoryIndex=document.indexOf(""[[Category:"",startIndex)) != -1) {
  categoryIndex+=11;
  int endIndex=document.indexOf(""]]"",categoryIndex);
  if (endIndex >= document.length() || endIndex < 0) {
    break;
  }
  String category=document.substring(categoryIndex,endIndex).toLowerCase(Locale.ENGLISH).trim();
  if (exactMatchOnly && inputCategories.contains(category)) {
    return category;
  }
  if (!exactMatchOnly) {
    for (int i=0; i < inputCategories.size(); i++) {
      String inputCategory=inputCategories.get(i);
      Pattern inputCategoryPattern=inputCategoryPatterns.get(i);
      if (inputCategoryPattern.matcher(category).matches()) {
        return inputCategory;
      }
    }
  }
  startIndex=endIndex;
}
",3,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
260,if (((ch = str.charAt(i)) < 0x20) || (ch > 0x7e)),"if (((ch=str.charAt(i)) < 0x20) || (ch > 0x7e)) {
  String s=""0000"" + Integer.toString(ch,16);
  retval.append(""\\u"" + s.substring(s.length() - 4,s.length()));
}
 else {
  retval.append(ch);
}
",3,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
261,"while ((length = is.read(bytes, offset, bytes.length - offset)) != -1) {","while ((length=is.read(bytes,offset,bytes.length - offset)) != -1) {
  offset+=length;
  if (offset == bytes.length) {
    os.write(bytes,0,bytes.length);
    offset=0;
  }
}
",4,292,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
262,while (Character.isDigit(priChar = (char) (byteBuffer.get() & 0xff))) {,"while (Character.isDigit(priChar=(char)(byteBuffer.get() & 0xff))) {
  facility*=10;
  facility+=Character.digit(priChar,10);
}
",4,4,7,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
263,if (++this.su_rTPos == 512) {,"if (++this.su_rTPos == 512) {
  this.su_rTPos=0;
}
",4,4,3,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
264,if ((listToDump = this.obligations).size() > 0) {,"if ((listToDump=this.obligations).size() > 0) {
  if (needsComma) {
    stringBuilder.append(',');
  }
  stringBuilder.append(""obligations="");
  stringBuilder.append(ListUtil.toString(listToDump));
  needsComma=true;
}
",4,4,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
265,for (i = 25; i-- > 0;),"for (i=25; i-- > 0; ) jjrounds[i]=0x80000000;
",5,5,4,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
266,if ((buffer[bufpos] = c = ReadByte()) == '\\') {,"if ((buffer[bufpos]=c=ReadByte()) == '\\') {
  UpdateLineColumn(c);
  int backSlashCnt=1;
  for (; ; ) {
    if (++bufpos == available)     AdjustBuffSize();
    try {
      if ((buffer[bufpos]=c=ReadByte()) != '\\') {
        UpdateLineColumn(c);
        if ((c == 'u') && ((backSlashCnt & 1) == 1)) {
          if (--bufpos < 0)           bufpos=bufsize - 1;
          break;
        }
        backup(backSlashCnt);
        return '\\';
      }
    }
 catch (    java.io.IOException e) {
      if (backSlashCnt > 1)       backup(backSlashCnt - 1);
      return '\\';
    }
    UpdateLineColumn(c);
    backSlashCnt++;
  }
  try {
    while ((c=ReadByte()) == 'u')     ++column;
    buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));
    column+=4;
  }
 catch (  java.io.IOException e) {
    throw new Error(""Invalid escape character at line "" + line + "" column ""+ column+ ""."");
  }
  if (backSlashCnt == 1)   return c;
 else {
    backup(backSlashCnt - 1);
    return '\\';
  }
}
 else {
  UpdateLineColumn(c);
  return c;
}
",5,5,5,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
267,for (int i = tab.length; i-- > 0; ) {,"for (int i=tab.length; i-- > 0; ) {
  for (Entry e=tab[i]; e != null; e=e.next) {
    if (e.value.equals(value)) {
      return true;
    }
  }
}
",5,5,5,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
268,if ((oldToken = token).next != null) token = token.next;,"if ((oldToken=token).next != null) token=token.next;
 else token=token.next=token_source.getNextToken();
",6,7,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
269,for(String line = null;(line = br.readLine()) != null;) {,"for (String line=null; (line=br.readLine()) != null; ) {
  templates.add(line);
}
",6,6,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NullLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
270,while ((length = (in.read(buffer))) >= 0),"while ((length=(in.read(buffer))) >= 0) {
  out.write(buffer,0,length);
  count+=length;
}
",6,6,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
271,if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt))),"if ((i=jjnewStateCnt) == (startsAt=25 - (jjnewStateCnt=startsAt))) return curPos;
",7,7,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
272,"while ((index = resultString.indexOf(""PropertyInt16\"":"", ++index)) > 0) {","while ((index=resultString.indexOf(""PropertyInt16\"":"",++index)) > 0) {
  count++;
}
",7,7,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
273,while (++pos < response.length) {,"while (++pos < response.length) {
  byte ch=response[pos];
  if (delimiters.indexOf(response[pos]) != -1 || ch < 32 || ch >= 127) {
    break;
  }
}
",8,8,2,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
274,"for (int cnt, pos = 0; (cnt = bin.read(buf, pos)) > 0; pos += cnt) {","for (int cnt, pos=0; (cnt=bin.read(buf,pos)) > 0; pos+=cnt) {
  out.write(buf,0,cnt);
}
",8,8,12,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(Assignment-rightHandSide, ForStatement-updaters, ),
"
275,while((token = tokenizer.nextToken()).getType() != JsonTokenizer.TokenType.NONE) {,"while ((token=tokenizer.nextToken()).getType() != JsonTokenizer.TokenType.NONE) {
switch (token.getType()) {
case ARRAY_START:
    onArrayStart();
  pushState(State.ARRAY);
break;
case OBJECT_START:
onObjectStart();
pushState(State.OBJECT_KEY);
break;
case ARRAY_END:
popState();
onArrayEnd();
break;
case OBJECT_END:
popState();
onObjectEnd();
break;
default :
processValue(token);
break;
}
}
",9,13,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
276,while (this.getCallBackCount() < 3 && count++ < 30) {,"while (this.getCallBackCount() < 3 && count++ < 30) {
  try {
    monitor.wait(1000L);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}
",9,9,5,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
277,if ((objectToDump = StringUtils.toString(this.getAttributeAssignmentExpressions())) != null) {,"if ((objectToDump=StringUtils.toString(this.getAttributeAssignmentExpressions())) != null) {
  stringBuilder.append("",attributeAssignmentExpressions="");
  stringBuilder.append((String)objectToDump);
}
",10,96,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
278,if (bufline[j = start % bufsize] != bufline[++start % bufsize]),"if (bufline[j=start % bufsize] != bufline[++start % bufsize]) bufline[j]=newLine++;
 else bufline[j]=newLine;
",12,13,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
279,if (((active0 &= old0) | (active1 &= old1)) == 0L),"if (((active0&=old0) | (active1&=old1)) == 0L) return jjStartNfa_0(0,old0,old1);
",13,13,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
280,while (!done.get() && (exchange = completion.poll()) != null) {,"while (!done.get() && (exchange=completion.poll()) != null) {
  doAggregate(result,exchange,original);
  if (nbAggregated.incrementAndGet() >= nbExchangeSent.get() && allSent.get()) {
    doDone(result.get(),true);
  }
}
",15,18,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
281,"while (b <= c && (comparison = comp.compare(array[b], partionValue)) <= 0) {","while (b <= c && (comparison=comp.compare(array[b],partionValue)) <= 0) {
  if (comparison == 0) {
    temp=array[a];
    array[a++]=array[b];
    array[b]=temp;
  }
  b++;
}
",15,17,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
282,"if ( -1 < (index = body.getClass().getName().indexOf( ""NotModifiedException"")) ) {","if (-1 < (index=body.getClass().getName().indexOf(""NotModifiedException""))) {
  if (index > -1)   response.sendError(HttpServletResponse.SC_NOT_MODIFIED,body.toString().substring(index));
 else   response.sendError(HttpServletResponse.SC_NOT_MODIFIED);
  return;
}
 else if (-1 < (index=body.getClass().getName().indexOf(""PreconditionFailedException""))) {
  if (index > -1)   response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED,body.toString().substring(index));
 else   response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
  return;
}
",15,15,7,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
