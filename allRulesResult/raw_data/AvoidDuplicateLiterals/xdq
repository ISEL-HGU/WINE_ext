94000,./TargetProjects/gora/gora-hbase/src/main/java/org/apache/gora/hbase/store/HBaseStore.java,587,,"        throw new  RuntimeException(""HBase mapping for field [""+ f +""] not found. "" +"
94001,./TargetProjects/gora/gora-hbase/src/main/java/org/apache/gora/hbase/store/HBaseStore.java,588,,"            ""Wrong gora-hbase-mapping.xml?"");"
94002,./TargetProjects/gora/gora-hbase/src/main/java/org/apache/gora/hbase/store/HBaseStore.java,842,,"        String tableName = tableElement.getAttributeValue(""name"");"
94003,./TargetProjects/gora/gora-hbase/src/test/java/org/apache/gora/hbase/store/TestHBaseStore.java,95,,"    TableName webPageTab = TableName.valueOf(""WebPage"");"
94004,./TargetProjects/gora/gora-hbase/src/test/java/org/apache/gora/hbase/store/TestHBaseStore.java,97,,"    Get get = new Get(Bytes.toBytes(""com.example/http""));"
94005,./TargetProjects/gora/gora-hbase/src/test/java/org/apache/gora/hbase/store/TestHBaseStore.java,100,,"    assertEquals(result.getFamilyMap(Bytes.toBytes(""parsedContent"")).size(), 4);"
94006,./TargetProjects/gora/gora-hbase/src/test/java/org/apache/gora/hbase/store/TestHBaseStore.java,124,,"    byte[] actualBytes = result.getValue(Bytes.toBytes(""content""), null);"
94007,./TargetProjects/gora/gora-hbase/src/test/java/org/apache/gora/hbase/store/TestHBaseStore.java,306,,"  @Ignore(""HBase does not support Result#size() without limit set"")"
94008,./TargetProjects/gora/gora-hive/src/test/java/org/apache/gora/hive/store/TestHiveStore.java,125,,"  @Ignore(""Hive test server doesn't support deleting and updating entries"")"
94009,./TargetProjects/gora/gora-ignite/src/main/java/org/apache/gora/ignite/store/IgniteStore.java,271,,"        @SuppressWarnings(""rawtypes"") SpecificDatumReader reader = getDatumReader(fieldSchema);"
94010,./TargetProjects/gora/gora-ignite/src/test/java/org/apache/gora/ignite/store/TestIgniteStore.java,45,,"    Assert.assertEquals(""Ignite Store Metadata Table Primary Key Type"", ""VARCHAR"", tableInfo.getPrimaryKeyType());"
94011,./TargetProjects/gora/gora-jet/src/test/java/org/apache/gora/jet/JetTest.java,62,,"    resultPageView.setIp(""88.240.129.183"");"
94012,./TargetProjects/gora/gora-jet/src/test/java/org/apache/gora/jet/generated/Pageview.java,660,,"	    throw new java.lang.UnsupportedOperationException(""Get is not supported on tombstones"");"
94013,./TargetProjects/gora/gora-jet/src/test/java/org/apache/gora/jet/generated/Pageview.java,668,,"	    throw new java.lang.UnsupportedOperationException(""Set is not supported on tombstones"");"
94014,./TargetProjects/gora/gora-jet/src/test/java/org/apache/gora/jet/generated/Pageview.java,676,,"	    throw new java.lang.UnsupportedOperationException(""IsDirty is not supported on tombstones"");"
94015,./TargetProjects/gora/gora-kudu/src/main/java/org/apache/gora/kudu/mapping/KuduMappingBuilder.java,88,,"      @SuppressWarnings(""unchecked"")"
94016,./TargetProjects/gora/gora-kudu/src/main/java/org/apache/gora/kudu/store/KuduStore.java,455,,"        @SuppressWarnings(""rawtypes"") SpecificDatumReader reader = getDatumReader(fieldSchema);"
94017,./TargetProjects/gora/gora-kudu/src/test/java/org/apache/gora/kudu/store/TestKuduStore.java,76,,"    Assert.assertEquals(""Kudu Store Metadata Table Primary Key Type"", ""string"", tableInfo.getPrimaryKeyType());"
94018,./TargetProjects/gora/gora-mongodb/src/main/java/org/apache/gora/mongodb/store/MongoStore.java,371,,"      Document q = new Document(""_id"", key);"
94019,./TargetProjects/gora/gora-mongodb/src/main/java/org/apache/gora/mongodb/store/MongoStore.java,843,,"            ""Field """
94020,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,102,,"    mapping.addClassField(""classField1"", ""top1"", ""document"");"
94021,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,102,,"    mapping.addClassField(""classField1"", ""top1"", ""document"");"
94022,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,102,,"    mapping.addClassField(""classField1"", ""top1"", ""document"");"
94023,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,103,,"    mapping.addClassField(""classField2"", ""top1.level2-1"", ""string"");"
94024,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,104,,"    mapping.addClassField(""classField3"", ""top1.level2-2"", ""int32"");"
94025,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,105,,"    mapping.addClassField(""classField4"", ""top1.level2-3"", ""document"");"
94026,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,130,,"    mapping.addClassField(""classField2"", ""top2.l2"", ""document"");"
94027,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,137,,"        mapping.getDocumentFieldType(""top1.l2""));"
94028,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoMapping.java,171,,"    mapping.addClassField(""classFieldName"", ""top1"", ""int32"");"
94029,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoStore.java,55,,"  @Ignore(""Skip until GORA-66 is fixed: need better semantic for end/start keys"")"
94030,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoStore.java,89,,"    String field = ""myField"";"
94031,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/store/TestMongoStoreMetadataAnalyzer.java,117,,"                add(""STRING"");"
94032,./TargetProjects/gora/gora-mongodb/src/test/java/org/apache/gora/mongodb/utils/TestBSONDecorator.java,97,,"    dbo1.put(""key1"", null);"
94033,./TargetProjects/gora/gora-orientdb/src/main/java/org/apache/gora/orientdb/query/OrientDBQuery.java,88,,"      selectQuery.where(projection(""_id"").eq(Parameter.parameter(""key"")));"
94034,./TargetProjects/gora/gora-orientdb/src/main/java/org/apache/gora/orientdb/store/OrientDBStore.java,166,,"      documentClass.createProperty(""_id"","
94035,./TargetProjects/gora/gora-orientdb/src/main/java/org/apache/gora/orientdb/store/OrientDBStore.java,221,,"            .where(projection(""_id"").eq(Parameter.parameter(""key"")));"
94036,./TargetProjects/gora/gora-orientdb/src/main/java/org/apache/gora/orientdb/store/OrientDBStore.java,554,,"                ""item"", new ODocument(""item"", item));"
94037,./TargetProjects/gora/gora-orientdb/src/main/java/org/apache/gora/orientdb/store/OrientDBStore.java,826,,"                  ""Field "" + fieldSchema.getName()"
94038,./TargetProjects/gora/gora-pig/src/main/java/org/apache/gora/pig/GoraDeleteStorage.java,110,,"    throw new IOException(this.getClass().getName() + "" can not be used to load data."") ;"
94039,./TargetProjects/gora/gora-pig/src/main/java/org/apache/gora/pig/GoraStorage.java,322,,"  @SuppressWarnings(""rawtypes"")"
94040,./TargetProjects/gora/gora-pig/src/main/java/org/apache/gora/pig/GoraStorage.java,380,,"  @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
94041,./TargetProjects/gora/gora-pig/src/main/java/org/apache/gora/pig/util/SchemaUtils.java,109,,"          throw new IOException(""Can not convert field ["" + fieldName + ""] from Pig BAG with schema "" + pigFieldSchema.getSchema() + "" to avro "" + avroType.name()) ;"
94042,./TargetProjects/gora/gora-pig/src/main/java/org/apache/gora/pig/util/SchemaUtils.java,109,,"          throw new IOException(""Can not convert field ["" + fieldName + ""] from Pig BAG with schema "" + pigFieldSchema.getSchema() + "" to avro "" + avroType.name()) ;"
94043,./TargetProjects/gora/gora-redis/src/main/java/org/apache/gora/redis/util/DatumHandler.java,63,,"  @SuppressWarnings(""unchecked"")"
94044,./TargetProjects/gora/gora-redis/src/main/java/org/apache/gora/redis/util/DatumHandler.java,72,,"          @SuppressWarnings(""rawtypes"")"
94045,./TargetProjects/gora/gora-redis/src/test/java/org/apache/gora/redis/GoraRedisTestDriver.java,70,,"        conf.set(""gora.datastore.redis.address"", bridgeIpAddress + "":"" + 7006);"
94046,./TargetProjects/gora/gora-solr/src/main/java/org/apache/gora/solr/store/SolrStore.java,273,,"        params.set(""httpBasicAuthUser"", serverUsername);"
94047,./TargetProjects/gora/gora-solr/src/main/java/org/apache/gora/solr/store/SolrStore.java,274,,"        params.set(""httpBasicAuthPassword"", serverPassword);"
94048,./TargetProjects/gora/gora-solr/src/main/java/org/apache/gora/solr/store/SolrStore.java,608,,"  @SuppressWarnings(""rawtypes"")"
94049,./TargetProjects/gora/gora-sql/src/test/java/org/apache/gora/sql/GoraSqlTestDriver.java,113,,"    properties.setProperty(""gora.sqlstore."" + DRIVER_CLASS_PROPERTY, JDBC_DRIVER_CLASS);"
94050,./TargetProjects/gora/gora-tutorial/src/main/java/org/apache/gora/tutorial/log/generated/Pageview.java,660,,"      throw new java.lang.UnsupportedOperationException(""Get is not supported on tombstones"");"
94051,./TargetProjects/gora/gora-tutorial/src/main/java/org/apache/gora/tutorial/log/generated/Pageview.java,668,,"      throw new java.lang.UnsupportedOperationException(""Set is not supported on tombstones"");"
94052,./TargetProjects/gora/gora-tutorial/src/main/java/org/apache/gora/tutorial/log/generated/Pageview.java,676,,"      throw new java.lang.UnsupportedOperationException(""IsDirty is not supported on tombstones"");"
94053,./TargetProjects/griffin/service/src/main/java/org/apache/griffin/core/measure/MeasureController.java,43,,"    @RequestMapping(value = ""/measures"", method = RequestMethod.GET)"
94054,./TargetProjects/griffin/service/src/main/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreServiceImpl.java,67,,"    @Cacheable(unless = ""#result==null"")"
94055,./TargetProjects/griffin/service/src/main/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreServiceImpl.java,72,,"                LOGGER.warn(""Hive client is null. "" +"
94056,./TargetProjects/griffin/service/src/main/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreServiceImpl.java,73,,"                    ""Please check your hive config."");"
94057,./TargetProjects/griffin/service/src/main/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreServiceJdbcImpl.java,120,,"    @Cacheable(unless = ""#result==null"")"
94058,./TargetProjects/griffin/service/src/main/java/org/apache/griffin/core/metric/MetricStoreImpl.java,142,,"        if (jsonNode.hasNonNull(""hits"") && jsonNode.get(""hits"")"
94059,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobControllerTest.java,86,,"                get(URLHelper.API_VERSION_PATH + ""/jobs"")"
94060,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobControllerTest.java,121,,"        String jobName = ""jobName"";"
94061,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobInstanceTest.java,111,,"    @SuppressWarnings(""unchecked"")"
94062,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobInstanceTest.java,115,,"        GriffinMeasure measure = createGriffinMeasure(""measureName"");"
94063,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobInstanceTest.java,117,,"        BatchJob job = new BatchJob(1L, ""jobName"","
94064,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobInstanceTest.java,118,,"                ""qName"", ""qGroup"", false);"
94065,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/JobInstanceTest.java,118,,"                ""qName"", ""qGroup"", false);"
94066,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/job/SparkSubmitJobTest.java,104,,"        GriffinMeasure measure = createGriffinMeasure(""measureName"");"
94067,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/ExternalMeasureOperatorImplTest.java,58,,"        ExternalMeasure measure = createExternalMeasure(""view_item_hourly"");"
94068,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/GriffinMeasureOperatorImplTest.java,65,,"        Measure measure = createGriffinMeasure(""view_item_hourly"");"
94069,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/MeasureControllerTest.java,79,,"        Measure measure = createGriffinMeasure(""view_item_hourly"");"
94070,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/MeasureControllerTest.java,83,,"        mvc.perform(get(URLHelper.API_VERSION_PATH + ""/measures""))"
94071,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/MeasureControllerTest.java,94,,"        mvc.perform(get(URLHelper.API_VERSION_PATH + ""/measures/1""))"
94072,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/MeasureServiceImplTest.java,85,,"        Measure measure = createGriffinMeasure(""view_item_hourly"");"
94073,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/measure/MeasureServiceImplTest.java,136,,"        ExternalMeasure measure = createExternalMeasure(""externalMeasure"");"
94074,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreControllerTest.java,60,,"        String dbName = ""default"";"
94075,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreControllerTest.java,73,,"        String tableName = ""table"";"
94076,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metastore/hive/HiveMetaStoreServiceImplTest.java,84,,"        given(client.getAllDatabases()).willReturn(Arrays.asList(""default""));"
94077,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metastore/hive/HiveMetastoreServiceJDBCImplTest.java,102,,"        when(rs.getString(anyInt())).thenReturn(""default"");"
94078,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metastore/kafka/KafkaSchemaServiceImplTest.java,61,,"            fail(""Cannot get all tables from all dbs"");"
94079,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metric/MetricControllerTest.java,79,,"        Metric metric = new Metric(""metricName"", ACCURACY, ""owner"", Collections"
94080,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metric/MetricControllerTest.java,103,,"        MetricValue value = new MetricValue(""jobName"", 1L, new HashMap<>());"
94081,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metric/MetricControllerTest.java,108,,"        mvc.perform(get(URLHelper.API_VERSION_PATH + ""/metrics/values"")"
94082,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metric/MetricServiceImplTest.java,91,,"        MetricValue value = new MetricValue(""jobName"", 1L, new HashMap<>());"
94083,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/metric/MetricServiceImplTest.java,191,,"        given(metricStore.deleteMetricValues(""metricName""))"
94084,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/EntityMocksHelper.java,60,,"        DataConnector dcSource = createDataConnector(""source_name"", ""default"","
94085,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/EntityMocksHelper.java,60,,"        DataConnector dcSource = createDataConnector(""source_name"", ""default"","
94086,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/EntityMocksHelper.java,61,,"            ""test_data_src"", ""dt=#YYYYMMdd# AND hour=#HH#"");"
94087,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/EntityMocksHelper.java,62,,"        DataConnector dcTarget = createDataConnector(""target_name"", ""default"","
94088,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/EntityMocksHelper.java,219,,"        jobDataMap.put(JOB_NAME, ""jobName"");"
94089,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/TimeUtilTest.java,120,,"        tests.put(""GMT"", ""GMT"");"
94090,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/TimeUtilTest.java,121,,"        tests.put(""GMT+1"", ""GMT+01:00"");"
94091,./TargetProjects/griffin/service/src/test/java/org/apache/griffin/core/util/TimeUtilTest.java,124,,"        tests.put(""GMT-1"", ""GMT-01:00"");"
94092,./TargetProjects/groovy/src/main/java/groovy/beans/BindableASTTransformation.java,196,,"            block.addStatement(stmt(callThisX(""firePropertyChange"", args(constX(propertyNode.getName()), oldValue, newValue))));"
94093,./TargetProjects/groovy/src/main/java/groovy/beans/BindableASTTransformation.java,266,,"                foundAdd = foundAdd || method.getName().equals(""addPropertyChangeListener"") && method.getParameters().length == 1;"
94094,./TargetProjects/groovy/src/main/java/groovy/beans/BindableASTTransformation.java,267,,"                foundRemove = foundRemove || method.getName().equals(""removePropertyChangeListener"") && method.getParameters().length == 1;"
94095,./TargetProjects/groovy/src/main/java/groovy/beans/BindableASTTransformation.java,337,,"                        params(param(pclClassNode, ""listener"")),"
94096,./TargetProjects/groovy/src/main/java/groovy/beans/BindableASTTransformation.java,350,,"                        params(param(ClassHelper.STRING_TYPE, ""name""), param(pclClassNode, ""listener"")),"
94097,./TargetProjects/groovy/src/main/java/groovy/beans/BindableASTTransformation.java,396,,"                        ""getPropertyChangeListeners"","
94098,./TargetProjects/groovy/src/main/java/groovy/beans/VetoableASTTransformation.java,176,,"            block.addStatement(stmt(callThisX(""fireVetoableChange"", args("
94099,./TargetProjects/groovy/src/main/java/groovy/beans/VetoableASTTransformation.java,260,,"                foundAdd = foundAdd || method.getName().equals(""addVetoableChangeListener"") && method.getParameters().length == 1;"
94100,./TargetProjects/groovy/src/main/java/groovy/beans/VetoableASTTransformation.java,261,,"                foundRemove = foundRemove || method.getName().equals(""removeVetoableChangeListener"") && method.getParameters().length == 1;"
94101,./TargetProjects/groovy/src/main/java/groovy/beans/VetoableASTTransformation.java,352,,"                        params(param(vclClassNode, ""listener"")),"
94102,./TargetProjects/groovy/src/main/java/groovy/beans/VetoableASTTransformation.java,365,,"                        params(param(ClassHelper.STRING_TYPE, ""name""), param(vclClassNode, ""listener"")),"
94103,./TargetProjects/groovy/src/main/java/groovy/beans/VetoableASTTransformation.java,413,,"                        ""getVetoableChangeListeners"","
94104,./TargetProjects/groovy/src/main/java/groovy/grape/GrabAnnotationTransformation.java,106,,"    private static final List<String> GRABRESOLVER_REQUIRED = Arrays.asList(""name"", ""root"");"
94105,./TargetProjects/groovy/src/main/java/groovy/grape/GrabAnnotationTransformation.java,107,,"    private static final List<String> GRAB_REQUIRED = Arrays.asList(""group"", ""module"", ""version"");"
94106,./TargetProjects/groovy/src/main/java/groovy/grape/GrabAnnotationTransformation.java,108,,"    private static final List<String> GRAB_OPTIONAL = Arrays.asList(""classifier"", ""transitive"", ""conf"", ""ext"", ""type"", ""changing"", ""force"", ""initClass"");"
94107,./TargetProjects/groovy/src/main/java/groovy/grape/GrabAnnotationTransformation.java,228,,"                    Expression value = node.getMember(""value"");"
94108,./TargetProjects/groovy/src/main/java/groovy/grape/GrabAnnotationTransformation.java,254,,"                                addError(""The attribute \"""" + s + ""\"" conflicts with attribute 'value' in @"" + node.getClassNode().getNameWithoutPackage() + "" annotations"", node);"
94109,./TargetProjects/groovy/src/main/java/groovy/lang/MetaClassImpl.java,2083,,"            method = getCategoryMethodGetter(sender, ""get"", true);"
94110,./TargetProjects/groovy/src/main/java/groovy/lang/NumberRange.java,249,,"    @SuppressWarnings(""unchecked"")"
94111,./TargetProjects/groovy/src/main/java/groovy/lang/NumberRange.java,408,,"            throw new IndexOutOfBoundsException(""Index: "" + index + "" should not be negative"");"
94112,./TargetProjects/groovy/src/main/java/groovy/lang/ObjectRange.java,242,,"            throw new IndexOutOfBoundsException(""Index: "" + index + "" should not be negative"");"
94113,./TargetProjects/groovy/src/main/java/groovy/lang/Script.java,138,,"            object = getProperty(""out"");"
94114,./TargetProjects/groovy/src/main/java/groovy/transform/builder/InitializerStrategy.java,162,,"            transform.addError(""Error during "" + BuilderASTTransformation.MY_TYPE_NAME +"
94115,./TargetProjects/groovy/src/main/java/groovy/transform/builder/InitializerStrategy.java,293,,"        Parameter initParam = param(paramType, ""initializer"");"
94116,./TargetProjects/groovy/src/main/java/groovy/transform/options/ImmutablePropertyHandler.java,208,,"        final Expression fieldExpr = propX(varX(""this""), fNode.getName());"
94117,./TargetProjects/groovy/src/main/java/groovy/util/Node.java,595,,"        options.put(""preorder"", true);"
94118,./TargetProjects/groovy/src/main/java/org/apache/groovy/parser/antlr4/AstBuilder.java,680,,"    @Override @SuppressWarnings(""unchecked"")"
94119,./TargetProjects/groovy/src/main/java/org/apache/groovy/parser/antlr4/AstBuilder.java,1561,,"        Objects.requireNonNull(classNode, ""classNode should not be null"");"
94120,./TargetProjects/groovy/src/main/java/org/apache/groovy/parser/antlr4/AstBuilder.java,2168,,"                throw createParsingFailedException(""The split property definition named '"" + fieldName + ""' must not have an initial value for both the field and the property"", ctx);"
94121,./TargetProjects/groovy/src/main/java/org/apache/groovy/util/concurrent/concurrentlinkedhashmap/ConcurrentLinkedHashMap.java,187,,"  @GuardedBy(""evictionLock"")"
94122,./TargetProjects/groovy/src/main/java/org/apache/groovy/util/concurrent/concurrentlinkedhashmap/Weighers.java,57,,"  @SuppressWarnings({""cast"", ""unchecked""})"
94123,./TargetProjects/groovy/src/main/java/org/apache/groovy/util/concurrent/concurrentlinkedhashmap/Weighers.java,57,,"  @SuppressWarnings({""cast"", ""unchecked""})"
94124,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/ast/AstToTextHelper.java,29,,"        if (node == null) return ""<unknown>"";"
94125,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/ast/ModuleNode.java,379,,"        if (classNode.getSuperClass().getDeclaredConstructor(params(param(ClassHelper.BINDING_TYPE, ""context""))) != null) {"
94126,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/ast/tools/GeneralUtils.java,208,,"        return callX(varX(""this""), methodName, args);"
94127,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,561,,"                mv.visitMethodInsn(INVOKESPECIAL, controller.getInternalBaseClassName(), ""<init>"", ""()V"", false);"
94128,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1066,,"                    mv.visitMethodInsn(INVOKEVIRTUAL, BytecodeHelper.getClassInternalName(ClassHelper.CLOSURE_TYPE), ""getThisObject"", ""()Ljava/lang/Object;"", false);"
94129,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1307,,"            mv.visitMethodInsn(INVOKEVIRTUAL, ""groovy/lang/Reference"", ""get"", ""()Ljava/lang/Object;"", false);"
94130,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1506,,"                classVisitor.visitField(ACC_PRIVATE + ACC_STATIC + ACC_SYNTHETIC, staticFieldName, ""Ljava/lang/Class;"", null, null);"
94131,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/AsmClassGenerator.java,1606,,"        mv.visitTypeInsn(ANEWARRAY, ""java/lang/Object"");"
94132,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,168,,"                    addError(""The "" + getDescription(methodNode) + "" is already defined in "" + getDescription(node) +"
94133,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,413,,"        msg.append("" in "");"
94134,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/DummyClassGenerator.java,121,,"        mv.visitTypeInsn(NEW, ""java/lang/RuntimeException"");"
94135,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/EnumVisitor.java,169,,"                            new BinaryExpression(new VariableExpression(""ordinal""), assign, new ConstantExpression(0))"
94136,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/InnerClassCompletionVisitor.java,157,,"                params(param(STRING_TYPE, ""name""), param(OBJECT_TYPE, ""args"")),"
94137,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/InnerClassVisitor.java,82,,"                innerClass.addField(""this$0"", ACC_FINAL | ACC_SYNTHETIC, node.getOuterClass().getPlainNodeReference(), null);"
94138,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/Verifier.java,181,,"                node.addField(""metaClass"", ACC_PRIVATE | ACC_TRANSIENT | ACC_SYNTHETIC, ClassHelper.METACLASS_TYPE,"
94139,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/Verifier.java,476,,"                            mv.visitFieldInsn(GETFIELD, classInternalName, ""metaClass"", ""Lgroovy/lang/MetaClass;"");"
94140,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/Verifier.java,1426,,"                            "" in "" + overridingMethod.getDeclaringClass().getName() +"
94141,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/VerifierCodeVisitor.java,87,,"            throw new RuntimeParserException(""Invalid "" + message + "". Identifier must not be empty"", node);"
94142,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/AssertionWriter.java,82,,"                mv.visitTypeInsn(NEW, ""org/codehaus/groovy/runtime/powerassert/ValueRecorder"");"
94143,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/AssertionWriter.java,171,,"            mv.visitTypeInsn(NEW, ""java/lang/StringBuffer"");"
94144,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/BinaryBooleanExpressionHelper.java,50,,"        throw new GroovyBugError(""should not reach here"");"
94145,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/CallSiteWriter.java,100,,"        CALLSITE_FIELD          = ""$callSiteArray"","
94146,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/CallSiteWriter.java,101,,"        REF_CLASS               = ""java/lang/ref/SoftReference"","
94147,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/CallSiteWriter.java,142,,"        mv.visitFieldInsn(GETSTATIC, controller.getInternalClassName(), ""$callSiteArray"", ""Ljava/lang/ref/SoftReference;"");"
94148,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/InvocationWriter.java,566,,"        mv.visitMethodInsn(INVOKESPECIAL, ownerDescriptor, ""<init>"", desc, false);"
94149,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/indy/sc/IndyStaticTypesMultiTypeDispatcher.java,73,,"        bewArray[1].setArraySetAndGet(  new GenericArrayAccess(""set"",""([III)V""),"
94150,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/indy/sc/IndyStaticTypesMultiTypeDispatcher.java,74,,"                                        new GenericArrayAccess(""get"",""([II)I""));"
94151,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticInvocationWriter.java,260,,"                        FieldNode thisField = current.getField(""this$0"");"
94152,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,128,,"    private static final MethodNode COLLECTION_SIZE_METHOD = COLLECTION_TYPE.getMethod(""size"", Parameter.EMPTY_ARRAY);"
94153,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,130,,"    private static final MethodNode MAP_GET_METHOD = MAP_TYPE.getMethod(""get"", new Parameter[]{new Parameter(OBJECT_TYPE, ""key"")});"
94154,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,614,,"            } else if (""power"".equals(message)) {"
94155,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,625,,"        } else if (""getAt"".equals(message)) {"
94156,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/classgen/asm/sc/StaticTypesCallSiteWriter.java,746,,"            mv.visitMethodInsn(INVOKESTATIC, ""org/codehaus/groovy/runtime/DefaultGroovyMethods"", ""power"", ""(Ljava/math/BigDecimal;Ljava/lang/Integer;)Ljava/lang/Number;"", false);"
94157,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/CompilerConfiguration.java,451,,"        handleOptimizationOption(INVOKEDYNAMIC, getSystemPropertySafe(""groovy.target.indy"", ""true""));"
94158,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/ResolveVisitor.java,348,,"        addError(""unable to resolve class "" + type.toString(false) + msg, node);"
94159,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/SourceUnit.java,289,,"                    sample = ""   "" + text.substring(start, end) + Utilities.eol() + ""   "" +"
94160,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,276,,"            throw new IllegalArgumentException(""You are not allowed to set both an allowed list and a disallowed list"");"
94161,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,976,,"            throw new SecurityException(""Importing ["" + packageName + ""] is not allowed"");"
94162,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,976,,"            throw new SecurityException(""Importing ["" + packageName + ""] is not allowed"");"
94163,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java,1256,,"                throw new SecurityException(""Method calls not allowed on ["" + typeName + ""]"");"
94164,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,263,,"            @DelegatesTo.Target(""self"") U self,"
94165,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,306,,"    @SuppressWarnings(""unchecked"")"
94166,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,451,,"            return ""null"";"
94167,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1362,,"    public static <T> Iterator<T> unique(Iterator<T> self, @ClosureParams(value=FromString.class, options={""T"",""T,T""}) Closure condition) {"
94168,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2229,,"    public static <T> Iterable<T> eachWithIndex(Iterable<T> self, @ClosureParams(value=FromString.class, options=""T,java.lang.Integer"") Closure closure) {"
94169,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5719,,"    protected static <T, K, V> T callClosureForMapEntry(@ClosureParams(value=FromString.class, options={""K,V"",""Map.Entry<K,V>""}) Closure<T> closure, Map.Entry<K,V> entry) {"
94170,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6144,,"            result = metaClass.invokeMethod(result, ""plus"", param);"
94171,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7052,,"    public static <K, V> Map.Entry<K, V> min(Map<K, V> self, @ClosureParams(value=FromString.class, options={""Map.Entry<K,V>"", ""Map.Entry<K,V>,Map.Entry<K,V>""}) Closure closure) {"
94172,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,8674,,"    public static <T> ListWithDefault<T> withDefault(List<T> self, @ClosureParams(value=SimpleType.class, options = ""int"") Closure<T> init) {"
94173,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,15840,,"            throw new GroovyRuntimeException(""The argument ("" + to +"
94174,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,15841,,"                    "") to upto() cannot be less than the value ("" + self + "") it's called on."");"
94175,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,15841,,"                    "") to upto() cannot be less than the value ("" + self + "") it's called on."");"
94176,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,16079,,"                    "") to downto() cannot be greater than the value ("" + self + "") it's called on."");"
94177,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/DefaultGroovyMethodsSupport.java,197,,"    @SuppressWarnings(""unchecked"")"
94178,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/EncodingGroovyMethodsSupport.java,26,,"            ""\u0042\u0042\u0042\u0042\u0042\u0042\u0042\u0042"""
94179,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/IOGroovyMethods.java,361,,"    public static <T> T eachLine(InputStream stream, String charset, @ClosureParams(value=FromString.class,options={""String"",""String,Integer""}) Closure<T> closure) throws IOException {"
94180,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/IOGroovyMethods.java,361,,"    public static <T> T eachLine(InputStream stream, String charset, @ClosureParams(value=FromString.class,options={""String"",""String,Integer""}) Closure<T> closure) throws IOException {"
94181,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/IOGroovyMethods.java,497,,"    public static <T> T splitEachLine(Reader self, String regex, @ClosureParams(value=FromString.class,options={""List<String>"",""String[]""},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {"
94182,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/IOGroovyMethods.java,497,,"    public static <T> T splitEachLine(Reader self, String regex, @ClosureParams(value=FromString.class,options={""List<String>"",""String[]""},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {"
94183,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/IOGroovyMethods.java,1382,,"    public static void transformChar(Reader self, Writer writer, @ClosureParams(value=SimpleType.class, options=""java.lang.String"") Closure closure) throws IOException {"
94184,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/InvokerHelper.java,715,,"                buffer.append(""..."");"
94185,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ProcessGroovyMethods.java,365,,"                throw new GroovyRuntimeException(""exception while reading process stream"", e);"
94186,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,263,,"            @SuppressWarnings(""unchecked"")"
94187,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,378,,"        visitMethod(ACC_PUBLIC, ""<init>"", ""()V"", null, null);"
94188,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,449,,"        visitField(ACC_PRIVATE + ACC_TRANSIENT, ""metaClass"", ""Lgroovy/lang/MetaClass;"", null, null);"
94189,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,449,,"        visitField(ACC_PRIVATE + ACC_TRANSIENT, ""metaClass"", ""Lgroovy/lang/MetaClass;"", null, null);"
94190,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ProxyGeneratorAdapter.java,500,,"        visitField(ACC_PRIVATE + ACC_FINAL, CLOSURES_MAP_FIELD, ""Ljava/util/Map;"", null, null);"
94191,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,235,,"    public static <T> T eachLine(File self, @ClosureParams(value = FromString.class, options = {""String"", ""String,Integer""}) Closure<T> closure) throws IOException {"
94192,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,235,,"    public static <T> T eachLine(File self, @ClosureParams(value = FromString.class, options = {""String"", ""String,Integer""}) Closure<T> closure) throws IOException {"
94193,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,371,,"    public static <T> T splitEachLine(File self, String regex, @ClosureParams(value = FromString.class, options = {""List<String>"", ""String[]""}, conflictResolutionStrategy = PickFirstResolver.class) Closure<T> closure) throws IOException {"
94194,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,371,,"    public static <T> T splitEachLine(File self, String regex, @ClosureParams(value = FromString.class, options = {""List<String>"", ""String[]""}, conflictResolutionStrategy = PickFirstResolver.class) Closure<T> closure) throws IOException {"
94195,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,627,,"            @NamedParam(value = ""connectTimeout"", type = Integer.class)"
94196,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,628,,"            @NamedParam(value = ""readTimeout"", type = Integer.class)"
94197,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,629,,"            @NamedParam(value = ""useCaches"", type = Boolean.class)"
94198,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,630,,"            @NamedParam(value = ""allowUserInteraction"", type = Boolean.class)"
94199,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,631,,"            @NamedParam(value = ""requestProperties"", type = Map.class)"
94200,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1214,,"    public static void eachFile(final File self, final FileType fileType, @ClosureParams(value = SimpleType.class, options = ""java.io.File"") final Closure closure)"
94201,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1351,,"            @NamedParam(value = ""type"", type = FileType.class)"
94202,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1352,,"            @NamedParam(value = ""preDir"", type = Closure.class)"
94203,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1354,,"            @NamedParam(value = ""postDir"", type = Closure.class)"
94204,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1358,,"            @NamedParam(value = ""filter"")"
94205,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1359,,"            @NamedParam(value = ""nameFilter"")"
94206,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1360,,"            @NamedParam(value = ""excludeFilter"")"
94207,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,1361,,"            @NamedParam(value = ""excludeNameFilter"")"
94208,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,2063,,"    public static <T> T withWriter(File file, @ClosureParams(value = SimpleType.class, options = ""java.io.BufferedWriter"") Closure<T> closure) throws IOException {"
94209,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/ResourceGroovyMethods.java,2471,,"    public static Writable filterLine(File self, @ClosureParams(value = SimpleType.class, options = ""java.lang.String"") Closure closure) throws IOException {"
94210,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,141,,"    @SuppressWarnings(""unchecked"")"
94211,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,524,,"    public static String dropWhile(final CharSequence self, @ClosureParams(value=FromString.class, conflictResolutionStrategy=PickFirstResolver.class, options={""String"", ""Character""}) final Closure condition) {"
94212,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,524,,"    public static String dropWhile(final CharSequence self, @ClosureParams(value=FromString.class, conflictResolutionStrategy=PickFirstResolver.class, options={""String"", ""Character""}) final Closure condition) {"
94213,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,770,,"    public static <T extends CharSequence> T eachMatch(final T self, final CharSequence regex, @ClosureParams(value=FromString.class, options={""List<String>"",""String[]""}) final Closure closure) {"
94214,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,770,,"    public static <T extends CharSequence> T eachMatch(final T self, final CharSequence regex, @ClosureParams(value=FromString.class, options={""List<String>"",""String[]""}) final Closure closure) {"
94215,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,934,,"    public static String find(final CharSequence self, final CharSequence regex, @ClosureParams(value=FromString.class, options={""java.util.List<java.lang.String>"",""java.lang.String[]""}) final Closure closure) {"
94216,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/StringGroovyMethods.java,934,,"    public static String find(final CharSequence self, final CharSequence regex, @ClosureParams(value=FromString.class, options={""java.util.List<java.lang.String>"",""java.lang.String[]""}) final Closure closure) {"
94217,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java,149,,"        mv.visitFieldInsn(Opcodes.PUTSTATIC, internalName, ""__constructor__"", ""Ljava/lang/reflect/Constructor;"");"
94218,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java,149,,"        mv.visitFieldInsn(Opcodes.PUTSTATIC, internalName, ""__constructor__"", ""Ljava/lang/reflect/Constructor;"");"
94219,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java,162,,"        classHeader(cw, internalName, ""org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite"");"
94220,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java,168,,"        genCallXxxWithArray(cw, """", ""org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite"", cachedMethod, ""java/lang/Object"");"
94221,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java,181,,"        classHeader(cw, internalName, ""org/codehaus/groovy/runtime/callsite/PojoMetaMethodSite"");"
94222,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/callsite/CallSiteGenerator.java,196,,"        classHeader(cw, internalName, ""org/codehaus/groovy/runtime/callsite/StaticMetaMethodSite"");"
94223,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94224,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94225,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94226,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94227,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94228,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94229,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94230,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94231,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94232,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94233,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/runtime/typehandling/NumberMathModificationInfo.java,36,,"        Collections.addAll(NAMES, ""plus"", ""minus"", ""multiply"", ""div"", ""compareTo"", ""or"", ""and"", ""xor"", ""intdiv"", ""mod"", ""leftShift"", ""rightShift"", ""rightShiftUnsigned"");"
94234,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/AbstractASTTransformation.java,329,,"            addError(""Error during "" + typeName + "" processing: Only one of 'includes' and 'excludes' should be supplied not both."", node);"
94235,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/AbstractInterruptibleASTTransformation.java,154,,"                    internalError(""Expecting boolean value for "" + parameterName + "" annotation parameter. Found "" + member + ""member"");"
94236,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/AbstractInterruptibleASTTransformation.java,154,,"                    internalError(""Expecting boolean value for "" + parameterName + "" annotation parameter. Found "" + member + ""member"");"
94237,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/AutoCloneASTTransformation.java,147,,"        MethodCallExpression writeObject = callX(castX(OOS_TYPE, varX(""it"")), ""writeObject"", varX(""this""));"
94238,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/AutoCloneASTTransformation.java,167,,"        addGeneratedMethod(cNode, ""clone"", ACC_PUBLIC, GenericsUtils.nonGeneric(cNode), Parameter.EMPTY_ARRAY, exceptions, body);"
94239,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/BaseScriptASTTransformation.java,75,,"            addError(""Annotation "" + MY_TYPE_NAME + "" member 'value' should be a class literal."", value);"
94240,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/EqualsAndHashCodeASTTransformation.java,204,,"                    notIdenticalX(getter, varX(""this"")),"
94241,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/EqualsAndHashCodeASTTransformation.java,293,,"        boolean hasExistingEquals = hasDeclaredMethod(cNode, ""equals"", 1);"
94242,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/ImmutableASTTransformation.java,243,,"                                varX(""map"", HMAP_TYPE),"
94243,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/ImmutableASTTransformation.java,258,,"                                        localVarX(""oldValue"", ClassHelper.OBJECT_TYPE),"
94244,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/ImmutableASTTransformation.java,279,,"                                        varX(""construct"", HMAP_TYPE),"
94245,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/MapConstructorASTTransformation.java,157,,"        Parameter map = param(MAP_TYPE, ""args"");"
94246,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,93,,"            addError(""Error during "" + NAMED_VARIANT + "" processing. No-args method not supported."", mNode);"
94247,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,141,,"        namedParam.addMember(""value"", constX(name));"
94248,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/NamedVariantASTTransformation.java,142,,"        namedParam.addMember(""type"", classX(fromParam.getType()));"
94249,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/NewifyASTTransformation.java,350,,"        @SuppressWarnings(""unchecked"")"
94250,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/ReadWriteLockASTTransformation.java,108,,"                addError(""Error during "" + myTypeName + "" processing: lock field with name '"" + value + ""' not found in class "" + targetClass.getName(), targetClass);"
94251,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/SynchronizedASTTransformation.java,66,,"                addError(""Error during "" + MY_TYPE_NAME + "" processing: annotation not allowed on abstract method '"" + mNode.getName() + ""'"", mNode);"
94252,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/SynchronizedASTTransformation.java,80,,"        if (value != null && value.length() > 0 && !value.equalsIgnoreCase(""$lock"")) {"
94253,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/ToStringASTTransformation.java,160,,"        boolean hasExistingToString = hasDeclaredMethod(cNode, ""toString"", 0);"
94254,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/sc/StaticCompilationVisitor.java,275,,"                Parameter param = new Parameter(node.getPlainNodeReference(), ""$that"");"
94255,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,356,,"    public static final MethodNode CLOSURE_CALL_NO_ARG  = CLOSURE_TYPE.getDeclaredMethod(""call"", Parameter.EMPTY_ARRAY);"
94256,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,476,,"                    Expression value = annotation.getMember(""value"");"
94257,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,599,,"                    case ""delegate"":"
94258,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,606,,"                    case ""owner"":"
94259,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1171,,"                addStaticTypeError(""Cannot assign value of type "" + prettyPrintType(valueType) + "" to variable of type "" + prettyPrintType(targetType), rightExpression);"
94260,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java,1409,,"        List<MethodNode> constructorList = findMethod(node, ""<init>"", arguments);"
94261,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/trait/TraitComposer.java,142,,"                argList.addExpression(new VariableExpression(""this""));"
94262,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/transform/trait/TraitReceiverTransformer.java,119,,"            if (mce.isImplicitThis() || ""this"".equals(obj)) {"
94263,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/util/ManagedConcurrentMap.java,27,,"        if (bundle==null) throw new IllegalArgumentException(""bundle must not be null"");"
94264,./TargetProjects/groovy/src/main/java/org/codehaus/groovy/vmplugin/v8/Java8.java,326,,"            Expression exp = definition.getMember(""value"");"
94265,./TargetProjects/groovy/src/test/gls/ch06/s05/JName1Test.java,31,,"        final String newX = ""new x"";"
94266,./TargetProjects/groovy/src/test/gls/ch06/s05/JName1Test.java,32,,"        final String newX1 = ""new x1"";"
94267,./TargetProjects/groovy/src/test/gls/ch06/s05/JName1Test.java,33,,"        final String newX2 = ""new x2"";"
94268,./TargetProjects/groovy/src/test/gls/ch06/s05/JName1Test.java,34,,"        final String newX3 = ""new x3"";"
94269,./TargetProjects/groovy/src/test/gls/ch06/s05/JName1Test.java,166,,"        assertTrue(""dynamic property"".equals(obj.getProperty(""x"")));"
94270,./TargetProjects/groovy/src/test/groovy/ClosureJavaIntegrationTest.java,59,,"        zoo.put(""Lions"", 5);"
94271,./TargetProjects/groovy/src/test/groovy/NamedParameterHelper.java,28,,"            @NamedParam(value = ""foo""),"
94272,./TargetProjects/groovy/src/test/groovy/NamedParameterHelper.java,29,,"            @NamedParam(value = ""bar"", type = String.class, required = true)"
94273,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,84,,"        String[] names = {""hashCode"", ""getClass"", ""wait"", ""wait"", ""wait"", ""equals"", ""notify"", ""notifyAll"", ""toString"", ""java.lang.Object""};"
94274,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,86,,"        String[] details = {""JAVA"", ""public final"", ""Object"", ""void"", ""wait"", ""long, int"", ""InterruptedException""};"
94275,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,86,,"        String[] details = {""JAVA"", ""public final"", ""Object"", ""void"", ""wait"", ""long, int"", ""InterruptedException""};"
94276,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,86,,"        String[] details = {""JAVA"", ""public final"", ""Object"", ""void"", ""wait"", ""long, int"", ""InterruptedException""};"
94277,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,89,,"        String[] ctorDetails = {""JAVA"", ""public"", ""Object"", ""Object"", ""java.lang.Object"", """", """"};"
94278,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,106,,"        String[] names = {""sleep"", ""sleep"", ""println"", ""println"", ""println"", ""find"", ""find"", ""findResult"", ""findResult"","
94279,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,116,,"        String[] details = {""GROOVY"", ""public"", ""Object"", ""void"", ""println"", ""Object"", ""n/a""};"
94280,./TargetProjects/groovy/src/test/groovy/inspect/InspectorTest.java,116,,"        String[] details = {""GROOVY"", ""public"", ""Object"", ""void"", ""println"", ""Object"", ""n/a""};"
94281,./TargetProjects/groovy/src/test/groovy/lang/EmptyRangeTest.java,140,,"            assertTrue(""expected exception thrown"", true);"
94282,./TargetProjects/groovy/src/test/groovy/lang/GStringTest.java,30,,"        DummyGString compString = new DummyGString(new Object[]{""James""});"
94283,./TargetProjects/groovy/src/test/groovy/lang/GStringTest.java,31,,"        assertArrayEquals(new String[]{""Hello "", ""!""}, compString.getStrings());"
94284,./TargetProjects/groovy/src/test/groovy/lang/MetaClassTest.java,36,,"        assertTrue(""got metaclass"", metaClass != null);"
94285,./TargetProjects/groovy/src/test/groovy/lang/NumberRangeTestCase.java,122,,"            assertTrue(""expected exception thrown"", true);"
94286,./TargetProjects/groovy/src/test/groovy/lang/NumberRangeTestCase.java,149,,"        assertEquals(""wrong number of calls to closure"", 3, callLog.size());"
94287,./TargetProjects/groovy/src/test/groovy/lang/NumberRangeTestCase.java,152,,"            assertEquals(""wrong argument passed to closure"", createValue(i), iter.next());"
94288,./TargetProjects/groovy/src/test/groovy/lang/NumberRangeTestCase.java,573,,"        assertFalse(""ranges equal"", range1.equals((Object) range2));"
94289,./TargetProjects/groovy/src/test/groovy/lang/NumberRangeTestCase.java,575,,"        assertFalse(""hash codes equal"", range1.hashCode() == range2.hashCode());"
94290,./TargetProjects/groovy/src/test/groovy/lang/NumberRangeTestCase.java,604,,"        assertEquals(""wrong string representation"", expected, range.toString());"
94291,./TargetProjects/groovy/src/test/groovy/lang/ObjectRangeTest.java,37,,"        assertEquals(""Size of "" + r, 11, r.size());"
94292,./TargetProjects/groovy/src/test/groovy/lang/ObjectRangeTest.java,82,,"        assertEquals(""from"", 0, r.getFrom());"
94293,./TargetProjects/groovy/src/test/groovy/lang/ObjectRangeTest.java,94,,"            assertEquals(""Item at index: "" + i, i + 10, value.intValue());"
94294,./TargetProjects/groovy/src/test/groovy/lang/ObjectRangeTest.java,133,,"            fail(""Should have thrown IndexOutOfBoundsException"");"
94295,./TargetProjects/groovy/src/test/groovy/lang/ObjectRangeTest.java,256,,"        assertEquals(""size"", 11, r.size());"
94296,./TargetProjects/groovy/src/test/groovy/lang/ObjectRangeTest.java,330,,"            assertEquals(""equals to "" + i, Integer.valueOf(i), (Integer) (it.next()));"
94297,./TargetProjects/groovy/src/test/groovy/tree/NodePrinterTest.java,30,,"        object.invokeMethod(""testTree"", null);"
94298,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,43,,"                ""enum E {\n"" +"
94299,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,44,,"                        ""    X, Y, Z\n"" +"
94300,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,45,,"                        ""}\n"""
94301,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,52,,"                        ""    X,\n"" +"
94302,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,53,,"                        ""    Y,\n"" +"
94303,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,119,,"                        ""    E(value) {\n"" +"
94304,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,120,,"                        ""        this.value = value\n"" +"
94305,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,147,,"                        ""    }\n"" +"
94306,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,176,,"                        ""    \n"" +"
94307,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,188,,"                        ""    X, Y, Z\n\n"" +"
94308,./TargetProjects/groovy/src/test/org/codehaus/groovy/antlr/EnumSourceParsingTest.java,287,,"                        ""    X, Y, Z,\n"" + // trailing comma"
94309,./TargetProjects/groovy/src/test/org/codehaus/groovy/ast/VariableExpressionTest.java,34,,"        VariableExpression intExpression = new VariableExpression(""foo"", ClassHelper.int_TYPE);"
94310,./TargetProjects/groovy/src/test/org/codehaus/groovy/ast/decompiled/AsmDecompilerTestData.java,31,,"@SuppressWarnings(""unused"")"
94311,./TargetProjects/groovy/src/test/org/codehaus/groovy/classgen/ClassCompletionVerifierTest.java,107,,"        ClassNode node = new ClassNode(""zzz"", modifiers, ClassHelper.OBJECT_TYPE);"
94312,./TargetProjects/groovy/src/test/org/codehaus/groovy/classgen/ForTest.java,35,,"        Parameter[] parameters = {new Parameter(ClassHelper.OBJECT_TYPE, ""coll"")};"
94313,./TargetProjects/groovy/src/test/org/codehaus/groovy/classgen/PropertyTest.java,46,,"        classNode.addProperty(new PropertyNode(""bar"", ACC_PUBLIC, ClassHelper.STRING_TYPE, classNode, null, null, null));"
94314,./TargetProjects/groovy/src/test/org/codehaus/groovy/classgen/RunBugsTest.java,32,,"        object.invokeMethod(""testBug"", null);"
94315,./TargetProjects/groovy/src/test/org/codehaus/groovy/control/io/AbstractReaderSourceTest.java,60,,"        Assert.assertEquals(""Wrong source line"", SAMPLE_SOURCE_LINE1, line1);"
94316,./TargetProjects/groovy/src/test/org/codehaus/groovy/reflection/SecurityTest.java,124,,"        cachedMethodUnderTest = createCachedMethod(""publicMethod"");"
94317,./TargetProjects/groovy/src/test/org/codehaus/groovy/reflection/SecurityTest.java,140,,"        cachedFieldUnderTest.setProperty(object, ""value"");"
94318,./TargetProjects/groovy/src/test/org/codehaus/groovy/reflection/SecurityTest.java,145,,"        cachedMethodUnderTest = createCachedMethod(""privateMethod"");"
94319,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/EncodingGroovyMethodsTest.java,27,,"        Assert.assertEquals(""e99a18c428cb38d5f260853678922e03"", EncodingGroovyMethods.md5(""abc123""));"
94320,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/EncodingGroovyMethodsTest.java,27,,"        Assert.assertEquals(""e99a18c428cb38d5f260853678922e03"", EncodingGroovyMethods.md5(""abc123""));"
94321,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/EncodingGroovyMethodsTest.java,43,,"        Assert.assertEquals(""0ade7c2cf97f75d009975f4d720d1fa6c19f4897"", EncodingGroovyMethods.digest(""9"", ""SHA-1""));"
94322,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeConstructorTest.java,34,,"        assertConstructor(new DummyBean(""Bob""), ""Bob"");"
94323,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeMethodTest.java,43,,"        assertEquals(""return value"", ""NoParams"", value);"
94324,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeMethodTest.java,50,,"        Object value = invoke(this, ""mockCallWithOneParam"", ""abc"");"
94325,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeMethodTest.java,64,,"        assertEquals(""return value"", ""Object"", value);"
94326,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeMethodTest.java,100,,"        assertMethodChooser(""String"", ""foo"");"
94327,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeMethodTest.java,143,,"        Object value = invoke(""hello"", ""size"", null);"
94328,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/InvokeMethodTest.java,161,,"        assertMethodCall(new Double(10), ""div"", new Double(2), new Double(5));"
94329,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/MethodKeyTest.java,27,,"        MethodKey a = new DefaultMethodKey(Object.class, ""foo"", new Class[]{Object.class, Integer.class}, false);"
94330,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/MethodRankHelperTest.java,26,,"        assertEquals(""Identical Strings"", 0, MethodRankHelper.delDistance(""asdf"", ""asdf""));"
94331,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/MethodRankHelperTest.java,68,,"        assertEquals(""2x TraCase + Case"", (MethodRankHelper.DL_CASE + MethodRankHelper.DL_TRANSPOSITION) * 2 + MethodRankHelper.DL_CASE,"
94332,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/NewStaticMetaMethodTest.java,35,,"        Object answer = metaMethod.invoke(""abc"", new Object[]{""xyz""});"
94333,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/PropertyTest.java,50,,"        assertGetSetProperty(bean, ""name"", ""James"", ""Bob"");"
94334,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/PropertyTest.java,50,,"        assertGetSetProperty(bean, ""name"", ""James"", ""Bob"");"
94335,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/PropertyTest.java,50,,"        assertGetSetProperty(bean, ""name"", ""James"", ""Bob"");"
94336,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/StringGroovyMethodsTest.java,119,,"        assertTrue(StringGroovyMethods.startsWithAny(""abcd"", ""ab"", ""ef""));"
94337,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/StringGroovyMethodsTest.java,156,,"        CharSequence charSequence = new StringBuilder().append(""ABCD"");"
94338,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/StringGroovyMethodsTest.java,157,,"        String regex = ""(A)(B)(C)(D)"";"
94339,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/StringGroovyMethodsTest.java,236,,"        assertTrue(StringGroovyMethods.isAtLeast(""2.1"", ""2.1""));"
94340,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,35,,"                                Maps.of(""name"", ""Daniel"","
94341,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,35,,"                                Maps.of(""name"", ""Daniel"","
94342,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,36,,"                                        ""gender"", ""Male"","
94343,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,36,,"                                        ""gender"", ""Male"","
94344,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,37,,"                                        ""city"", ""Shanghai"")"
94345,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,37,,"                                        ""city"", ""Shanghai"")"
94346,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,63,,"                (EvictableCache.ValueProvider<String, String>) key -> ""Chinese"";"
94347,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/CommonCacheTest.java,65,,"        Assert.assertEquals(""Chinese"", sc.getAndPut(""language"", vp,false));"
94348,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,36,,"                                Maps.of(""name"", ""Daniel"","
94349,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,36,,"                                Maps.of(""name"", ""Daniel"","
94350,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,37,,"                                        ""gender"", ""Male"","
94351,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,37,,"                                        ""gender"", ""Male"","
94352,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,38,,"                                        ""city"", ""Shanghai"")"
94353,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,38,,"                                        ""city"", ""Shanghai"")"
94354,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,64,,"                (EvictableCache.ValueProvider<String, String>) key -> ""Chinese"";"
94355,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/ConcurrentCommonCacheTest.java,66,,"        Assert.assertEquals(""Chinese"", sc.getAndPut(""language"", vp,false));"
94356,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,36,,"                                Maps.of(""name"", ""Daniel"","
94357,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,36,,"                                Maps.of(""name"", ""Daniel"","
94358,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,37,,"                                        ""gender"", ""Male"","
94359,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,37,,"                                        ""gender"", ""Male"","
94360,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,38,,"                                        ""city"", ""Shanghai"")"
94361,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,38,,"                                        ""city"", ""Shanghai"")"
94362,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,64,,"                (EvictableCache.ValueProvider<String, String>) key -> ""Chinese"";"
94363,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/StampedCommonCacheTest.java,66,,"        Assert.assertEquals(""Chinese"", sc.getAndPut(""language"", vp,false));"
94364,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/UnlimitedConcurrentCacheTest.java,37,,"                                Maps.of(""name"", ""Daniel"","
94365,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/UnlimitedConcurrentCacheTest.java,37,,"                                Maps.of(""name"", ""Daniel"","
94366,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/UnlimitedConcurrentCacheTest.java,38,,"                                        ""gender"", ""Male"","
94367,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/UnlimitedConcurrentCacheTest.java,38,,"                                        ""gender"", ""Male"","
94368,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/UnlimitedConcurrentCacheTest.java,39,,"                                        ""city"", ""Shanghai"")"
94369,./TargetProjects/groovy/src/test/org/codehaus/groovy/runtime/memoize/UnlimitedConcurrentCacheTest.java,39,,"                                        ""city"", ""Shanghai"")"
94370,./TargetProjects/groovy/subprojects/groovy-ant/src/main/java/org/codehaus/groovy/ant/Groovydoc.java,51,,"    private String windowTitle = ""Groovy Documentation"";"
94371,./TargetProjects/groovy/subprojects/groovy-ant/src/test/groovy/org/codehaus/groovy/ant/GroovyTest.java,92,,"        assertEquals(""from groovy file called from ant"", FLAG);"
94372,./TargetProjects/groovy/subprojects/groovy-ant/src/test/groovy/org/codehaus/groovy/ant/GroovycTest.java,81,,"        if (!(new File(getTargetDirectory() + getClass().getSimpleName() + "".class"")).exists()) {"
94373,./TargetProjects/groovy/subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/ast/visitor/AnnotationClosureVisitor.java,137,,"                        ""<"" + annotationNode.getClassNode().getName() + ""> "" + classNode.getName() + "" \n\n"","
94374,./TargetProjects/groovy/subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/ast/visitor/AnnotationProcessorVisitor.java,145,,"                        ""doCall"""
94375,./TargetProjects/groovy/subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/generation/OldVariableGenerationUtility.java,86,,"                    VariableExpression oldVariable = localVarX(""$old$"" + fieldNode.getName(), fieldNode.getType());"
94376,./TargetProjects/groovy/subprojects/groovy-contracts/src/main/java/org/apache/groovy/contracts/generation/TryCatchBlockGenerator.java,69,,"                                args(binX(constX(message), PLUS, callX(varX(param(ClassHelper.makeWithoutCaching(powerAssertionErrorClass), ""error"")), ""getMessage""))))),"
94377,./TargetProjects/groovy/subprojects/groovy-datetime/src/main/java/org/apache/groovy/datetime/extensions/DateTimeExtensions.java,512,,"        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
94378,./TargetProjects/groovy/subprojects/groovy-dateutil/src/main/java/org/apache/groovy/dateutil/extensions/DateUtilExtensions.java,715,,"            throw new GroovyRuntimeException(""The argument ("" + to +"
94379,./TargetProjects/groovy/subprojects/groovy-dateutil/src/main/java/org/apache/groovy/dateutil/extensions/DateUtilExtensions.java,716,,"                    "") to upto() cannot be earlier than the value ("" + self + "") it's called on."");"
94380,./TargetProjects/groovy/subprojects/groovy-dateutil/src/test/java/org/apache/groovy/dateutil/extensions/DateUtilExtensionsTest.java,35,,"        SimpleDateFormat sdf = new SimpleDateFormat(""yyyyMMdd"");"
94381,./TargetProjects/groovy/subprojects/groovy-dateutil/src/test/java/org/apache/groovy/dateutil/extensions/DateUtilExtensionsTest.java,36,,"        Date dec31 = sdf.parse(""20171231"");"
94382,./TargetProjects/groovy/subprojects/groovy-dateutil/src/test/java/org/apache/groovy/dateutil/extensions/DateUtilExtensionsTest.java,37,,"        assertEquals(""20180101"", sdf.format(DateUtilExtensions.plus(dec31, 1)));"
94383,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/main/java/org/apache/groovy/antlr/GroovydocVisitor.java,224,,"        if (len > 3 && methodName.startsWith(""get"")) {"
94384,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/main/java/org/apache/groovy/antlr/GroovydocVisitor.java,227,,"        } else if (len > 3 && methodName.startsWith(""set"")) {"
94385,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/GroovyDocTool.java,88,,"        if (""true"".equals(properties.getProperty(""privateScope""))) properties.setProperty(""packageScope"", ""true"");"
94386,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/GroovyDocWriter.java,62,,"            log.debug(""Generating "" + destFileName);"
94387,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/main/java/org/codehaus/groovy/tools/groovydoc/GroovyDocWriter.java,64,,"            output.writeToOutput(destFileName, renderedSrc, properties.getProperty(""fileEncoding""));"
94388,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,46,,"        plainTool = new GroovyDocTool(new String[]{""src/test/groovy""});"
94389,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,49,,"                new FileSystemResourceManager(""src""), // template storage"
94390,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,150,,"        srcList.add(base + "".groovy"");"
94391,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,154,,"        String constructorDoc = output.getText(MOCK_DIR + ""/"" + base + "".html"");"
94392,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,155,,"        assertNotNull(""No GroovyDoc found for "" + base, constructorDoc);"
94393,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,161,,"        final String base = ""org/codehaus/groovy/tools/groovydoc/testfiles"";"
94394,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,179,,"        String base = ""org/codehaus/groovy/tools/groovydoc/testfiles/Builder"";"
94395,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,180,,"        srcList.add(base + "".java"");"
94396,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,248,,"        assertTrue(groovyClassDoc.indexOf(""<interface>JavaInterface1</interface>"") > 0);"
94397,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,249,,"        assertTrue(groovyClassDoc.indexOf(""<interface>GroovyInterface1</interface>"") > 0);"
94398,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,250,,"        assertTrue(groovyClassDoc.indexOf(""<interface>Runnable</interface>"") > 0);"
94399,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,376,,"        props.put(""publicScope"", ""true"");"
94400,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,399,,"        testPropertiesFromGetterSetter(""GeneratePropertyFromGetSet"", ""str properties should be there"", ""<a href=\""#str\"">str</a>"", true);"
94401,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,469,,"        assertTrue(""method a1"" + (a ? "" not"" : """") + "" found in: \"""" + text + ""\"""", a ^ !text.contains(""<a href=\""#a1()\"">a1</a>""));"
94402,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,469,,"        assertTrue(""method a1"" + (a ? "" not"" : """") + "" found in: \"""" + text + ""\"""", a ^ !text.contains(""<a href=\""#a1()\"">a1</a>""));"
94403,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,599,,"        assertEquals(fullPathBaseA, root.classNamed(classDocDescendantA, ""Base"").getFullPathName());"
94404,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,791,,"            ""<pre>"" +"
94405,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,793,,"            ""</pre>"");"
94406,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,822,,"        final String base = ""org/codehaus/groovy/tools/groovydoc/testfiles/generics"";"
94407,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,824,,"                base + ""/Java.java"""
94408,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,830,,"        final String javadoc = output.getText(MOCK_DIR + ""/"" + base + ""/Java.html"");"
94409,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,843,,"                base + ""/Groovy.groovy"""
94410,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,849,,"        final String groovydoc = output.getText(MOCK_DIR + ""/"" + base + ""/Groovy.html"");"
94411,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,982,,"                ""<h4>@<a href='https://docs.oracle.com/javase/8/docs/api/java/lang/Deprecated.html' title='Deprecated'>Deprecated</a>\n"" +"
94412,./TargetProjects/groovy/subprojects/groovy-groovydoc/src/test/groovy/org/codehaus/groovy/tools/groovydoc/GroovyDocToolTest.java,1064,,"                        ""</DL></p>"""
94413,./TargetProjects/groovy/subprojects/groovy-jmx/src/main/java/groovy/jmx/GroovyMBean.java,99,,"            throwExceptionWithTarget(""Could not access property: "" + property + "". Reason: "", e);"
94414,./TargetProjects/groovy/subprojects/groovy-jmx/src/main/java/groovy/jmx/GroovyMBean.java,366,,"                .append(""\n  "")"
94415,./TargetProjects/groovy/subprojects/groovy-jmx/src/test/java/groovy/jmx/MBeanTest.java,42,,"        assertEquals(""JMX value of Name"", ""James"", mbeanServer.getAttribute(name, ""Name""));"
94416,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/DefaultJsonGenerator.java,137,,"                throw new JsonException(""Number "" + value + "" can't be serialized as JSON: infinite are not allowed in JSON."");"
94417,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,98,,"                            "" or "" + OPEN_BRACKET.getLabel() + "".\n"" +"
94418,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,100,,"                            ""on line: "" + token.getStartLine() + "", "" +"
94419,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,101,,"                            ""column: "" + token.getStartColumn()"
94420,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,293,,"                                ""But got '"" + currentToken.getText() + ""' instead."""
94421,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,293,,"                                ""But got '"" + currentToken.getText() + ""' instead."""
94422,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,301,,"                        ""Expected "" + CLOSE_BRACKET.getLabel() + "" "" +"
94423,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/groovy/json/JsonSlurperClassic.java,345,,"                                ""But got an unterminated object."""
94424,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/org/apache/groovy/json/internal/CharScanner.java,313,,"                    die(""unexpected character "" + ch);"
94425,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/org/apache/groovy/json/internal/JsonFastParser.java,183,,"                        if (foundDot || foundExp) { complain(""unexpected character "" + currentChar); }"
94426,./TargetProjects/groovy/subprojects/groovy-json/src/main/java/org/apache/groovy/json/internal/Sys.java,43,,"                if (ver.startsWith(""1.8"")) {"
94427,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,213,,"    public static <T> T eachLine(Path self, @ClosureParams(value = FromString.class, options = {""String"", ""String,Integer""}) Closure<T> closure) throws IOException {"
94428,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,213,,"    public static <T> T eachLine(Path self, @ClosureParams(value = FromString.class, options = {""String"", ""String,Integer""}) Closure<T> closure) throws IOException {"
94429,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,285,,"    public static <T> T splitEachLine(Path self, String regex, @ClosureParams(value = FromString.class, options = {""List<String>"", ""String[]""}, conflictResolutionStrategy = PickFirstResolver.class) Closure<T> closure) throws IOException {"
94430,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,285,,"    public static <T> T splitEachLine(Path self, String regex, @ClosureParams(value = FromString.class, options = {""List<String>"", ""String[]""}, conflictResolutionStrategy = PickFirstResolver.class) Closure<T> closure) throws IOException {"
94431,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,865,,"    public static void eachFile(final Path self, final FileType fileType, @ClosureParams(value = SimpleType.class, options = ""java.nio.file.Path"") final Closure closure) throws IOException {"
94432,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1001,,"            @NamedParam(value = ""type"", type = FileType.class)"
94433,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1002,,"            @NamedParam(value = ""preDir"", type = Closure.class)"
94434,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1004,,"            @NamedParam(value = ""postDir"", type = Closure.class)"
94435,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1008,,"            @NamedParam(value = ""filter"")"
94436,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1009,,"            @NamedParam(value = ""nameFilter"")"
94437,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1010,,"            @NamedParam(value = ""excludeFilter"")"
94438,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1011,,"            @NamedParam(value = ""excludeNameFilter"")"
94439,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1670,,"    public static <T> T withWriter(Path self, @ClosureParams(value = SimpleType.class, options = ""java.io.Writer"") Closure<T> closure) throws IOException {"
94440,./TargetProjects/groovy/subprojects/groovy-nio/src/main/java/org/apache/groovy/nio/extensions/NioExtensions.java,1884,,"    public static Writable filterLine(Path self, @ClosureParams(value = SimpleType.class, options = ""java.lang.String"") Closure closure) throws IOException {"
94441,./TargetProjects/groovy/subprojects/groovy-servlet/src/main/java/groovy/servlet/ServletBinding.java,250,,"        super.setVariable(""response"", response);"
94442,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,298,,"    public static void withInstance(String url, @ClosureParams(value=SimpleType.class, options=""groovy.sql.Sql"") Closure c) throws SQLException {"
94443,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,536,,"            @NamedParam(value = ""url"", type = String.class, required = true)"
94444,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,538,,"            @NamedParam(value = ""driverClassName"", type = String.class)"
94445,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,539,,"            @NamedParam(value = ""driver"", type = String.class)"
94446,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,540,,"            @NamedParam(value = ""user"", type = String.class)"
94447,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,541,,"            @NamedParam(value = ""password"", type = String.class)"
94448,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,1009,,"    public void query(String sql, @ClosureParams(value=SimpleType.class, options=""java.sql.ResultSet"") Closure closure) throws SQLException {"
94449,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,1018,,"            LOG.warning(""Failed to execute: "" + sql + "" because: "" + e.getMessage());"
94450,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,1018,,"            LOG.warning(""Failed to execute: "" + sql + "" because: "" + e.getMessage());"
94451,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,1149,,"    public void eachRow(String sql, @ClosureParams(value=SimpleType.class, options=""groovy.sql.GroovyResultSet"") Closure closure) throws SQLException {"
94452,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,1211,,"    public void eachRow(String sql, @ClosureParams(value=SimpleType.class, options=""java.sql.ResultSetMetaData"") Closure metaClosure,"
94453,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,2401,,"    public void execute(String sql, @ClosureParams(value=SimpleType.class, options={""boolean,java.util.List<groovy.sql.GroovyRowResult>"", ""boolean,int""}) Closure processResults) throws SQLException {"
94454,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,2401,,"    public void execute(String sql, @ClosureParams(value=SimpleType.class, options={""boolean,java.util.List<groovy.sql.GroovyRowResult>"", ""boolean,int""}) Closure processResults) throws SQLException {"
94455,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,3203,,"    public void call(String sql, List<Object> params, @ClosureParams(value=SimpleType.class, options=""java.lang.Object[]"") Closure closure) throws SQLException {"
94456,./TargetProjects/groovy/subprojects/groovy-sql/src/main/java/groovy/sql/Sql.java,3545,,"                    LOG.finest(""Caught exception resetting auto commit: "" + e.getMessage() + "" - continuing"");"
94457,./TargetProjects/groovy/subprojects/groovy-swing/src/main/groovy/groovy/swing/binding/JComboBoxProperties.java,90,,"        boundComboBox.addPropertyChangeListener(""model"", this);"
94458,./TargetProjects/groovy/subprojects/groovy-swing/src/main/java/org/apache/groovy/swing/binding/BindPath.java,168,,"            } else if (!mc.respondsTo(newObject, ""addPropertyChangeListener"", NAME_PARAMS).isEmpty()) {"
94459,./TargetProjects/groovy/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupBuilderCodeTransformer.java,98,,"                        new VariableExpression(""this""),"
94460,./TargetProjects/groovy/subprojects/groovy-templates/src/test/java/groovy/text/XmlTemplateEngineTest.java,30,,"        binding.put(""Christian"", ""Stein"");"
94461,./TargetProjects/groovy/subprojects/groovy-test/src/main/java/groovy/mock/interceptor/MockProxyMetaClass.java,81,,"            throw new RuntimeException(""cannot invoke method '"" + methodName + ""' without interceptor"");"
94462,./TargetProjects/groovy/subprojects/groovy-test/src/main/java/groovy/test/GroovyAssert.java,123,,"        assertTrue(""Closure "" + code + "" should have failed"", failed);"
94463,./TargetProjects/groovy/subprojects/groovy-xml/src/main/java/groovy/xml/slurpersupport/GPathResult.java,200,,"                delegate.invokeMethod(""yield"", args);"
94464,./TargetProjects/groovy/subprojects/stress/src/stressTest/java/org/codehaus/groovy/util/ManagedConcurrentLinkedQueueStressTest.java,44,,"        assertEquals(""should contain all entries"", ENTRY_COUNT, queue.values().size());"
94465,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,64,,"        assertNull(parser.parse(""foo""));"
94466,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,67,,"        assertEquals(""bar"", parser.parse(""foo=bar""));"
94467,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,67,,"        assertEquals(""bar"", parser.parse(""foo=bar""));"
94468,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,68,,"        assertEquals(""baz"", parser.parse(""CN=baz,dc=example,dc=com""));"
94469,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,68,,"        assertEquals(""baz"", parser.parse(""CN=baz,dc=example,dc=com""));"
94470,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,71,,"        assertEquals(""foo"", parser.parse(""cn=foo,DC=example,dc=net""));"
94471,./TargetProjects/guacamole-client/extensions/guacamole-auth-cas/src/test/java/org/apache/guacamole/auth/cas/group/LDAPGroupParserTest.java,72,,"        assertEquals(""bar"", parser.parse(""CN=bar,OU=groups,dc=example,Dc=net""));"
94472,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ModeledDirectoryObjectMapper.java,120,,"    int insert(@Param(""object"") ModelType object);"
94473,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/base/ObjectRelationMapper.java,55,,"    int insert(@Param(""parent"") ParentModelType parent,"
94474,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/connection/ModeledConnection.java,347,,"            logger.debug(""Unable to parse numeric attribute."", e);"
94475,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/connectiongroup/RootConnectionGroup.java,80,,"        throw new UnsupportedOperationException(""The root connection group cannot be modified."");"
94476,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/permission/ModeledObjectPermissionService.java,141,,"        throw new GuacamoleSecurityException(""Permission denied."");"
94477,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/sharing/connection/SharedConnection.java,90,,"        throw new UnsupportedOperationException(""Shared connections are immutable."");"
94478,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/sharing/connectiongroup/SharedRootConnectionGroup.java,77,,"        throw new UnsupportedOperationException(""The root group is immutable."");"
94479,./TargetProjects/guacamole-client/extensions/guacamole-auth-jdbc/modules/guacamole-auth-jdbc-base/src/main/java/org/apache/guacamole/auth/jdbc/user/ModeledUser.java,125,,"        new BooleanField(DISABLED_ATTRIBUTE_NAME, ""true""),"
94480,./TargetProjects/guacamole-client/extensions/guacamole-auth-json/src/main/java/org/apache/guacamole/auth/json/user/UserDataConnection.java,103,,"        throw new UnsupportedOperationException(""UserDataConnection is immutable."");"
94481,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/main/java/org/apache/guacamole/auth/quickconnect/utility/QCParser.java,195,,"                String paramName = URLDecoder.decode(paramArray[0], ""UTF-8"");"
94482,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,57,,"        assertEquals(""hostname1.domain.local"", guacConfig.getParameter(""hostname""));"
94483,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,58,,"        assertEquals(""guacuser"", guacConfig.getParameter(""username""));"
94484,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,59,,"        assertEquals(""guacpassword"", guacConfig.getParameter(""password""));"
94485,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,64,,"        uri = ""rdp://domain%5cguacuser:adPassword123@windows1.domain.tld/?enable-sftp=true"";"
94486,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,66,,"        assertEquals(""rdp"", guacConfig.getProtocol());"
94487,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,67,,"        assertEquals(""windows1.domain.tld"", guacConfig.getParameter(""hostname""));"
94488,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,68,,"        assertEquals(""domain\\guacuser"", guacConfig.getParameter(""username""));"
94489,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,70,,"        assertEquals(""true"", guacConfig.getParameter(""enable-sftp""));"
94490,./TargetProjects/guacamole-client/extensions/guacamole-auth-quickconnect/src/test/java/org/apache/guacamole/auth/quickconnect/utility/QCParserTest.java,77,,"        assertEquals(""5910"", guacConfig.getParameter(""port""));"
94491,./TargetProjects/guacamole-client/extensions/guacamole-auth-radius/src/main/java/org/apache/guacamole/auth/radius/AuthenticationProviderService.java,169,,"                throw new GuacamoleInvalidCredentialsException(""Authentication error."", CredentialsInfo.USERNAME_PASSWORD);"
94492,./TargetProjects/guacamole-client/extensions/guacamole-auth-totp/src/main/java/org/apache/guacamole/auth/totp/user/TOTPUser.java,57,,"                    new BooleanField(TOTP_KEY_SECRET_RESET_FIELD, ""true""),"
94493,./TargetProjects/guacamole-client/guacamole-common/src/test/java/org/apache/guacamole/protocol/FilteredGuacamoleReaderTest.java,43,,"            if (instruction.getOpcode().equals(""yes""))"
94494,./TargetProjects/guacamole-client/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/permission/ObjectPermissionSet.java,146,,"            throw new GuacamoleSecurityException(""Permission denied."");"
94495,./TargetProjects/guacamole-client/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/permission/SystemPermissionSet.java,101,,"            throw new GuacamoleSecurityException(""Permission denied."");"
94496,./TargetProjects/guacamole-client/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/simple/SimpleObjectPermissionSet.java,155,,"        throw new GuacamoleSecurityException(""Permission denied."");"
94497,./TargetProjects/guacamole-client/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/simple/SimpleSystemPermissionSet.java,90,,"        throw new GuacamoleSecurityException(""Permission denied."");"
94498,./TargetProjects/guacamole-client/guacamole-ext/src/test/java/org/apache/guacamole/properties/EnumGuacamolePropertyTest.java,183,,"                ""potato"", Vegetable.POTATO,"
94499,./TargetProjects/guacamole-client/guacamole-ext/src/test/java/org/apache/guacamole/properties/EnumGuacamolePropertyTest.java,184,,"                ""carrot"", Vegetable.CARROT"
94500,./TargetProjects/guacamole-client/guacamole-ext/src/test/java/org/apache/guacamole/properties/EnumGuacamolePropertyTest.java,189,,"                return ""favorite-vegetable"";"
94501,./TargetProjects/guacamole-client/guacamole/src/main/java/org/apache/guacamole/extension/ListenerFactory.java,75,,"    @SuppressWarnings(""deprecation"")"
94502,./TargetProjects/guacamole-client/guacamole/src/main/java/org/apache/guacamole/extension/ProviderFactory.java,62,,"            logger.error(""The {} extension in use is not properly defined. """
94503,./TargetProjects/guacamole-client/guacamole/src/main/java/org/apache/guacamole/extension/ProviderFactory.java,63,,"                    + ""Please contact the developers of the extension or, if you """
94504,./TargetProjects/guacamole-client/guacamole/src/main/java/org/apache/guacamole/extension/ProviderFactory.java,64,,"                    + ""are the developer, turn on debug-level logging."", typeName);"
94505,./TargetProjects/guacamole-client/guacamole/src/main/java/org/apache/guacamole/rest/user/APIUserWrapper.java,86,,"        throw new GuacamoleUnsupportedException(""APIUserWrapper does not provide permission access."");"
94506,./TargetProjects/guacamole-client/guacamole/src/main/java/org/apache/guacamole/rest/usergroup/APIUserGroupWrapper.java,78,,"        throw new GuacamoleUnsupportedException(""APIUserGroupWrapper does not provide permission access."");"
94507,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java,105,,"        System.getProperty(""user.name"")).makeQualified("
94508,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/main/java/org/apache/hadoop/fs/obs/DefaultOBSClientFactory.java,235,,"          ""From option "" + OBSConstants.OBS_CREDENTIALS_PROVIDER + ' '"
94509,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/main/java/org/apache/hadoop/fs/obs/OBSFileSystem.java,389,,"          + "" must be at least 2: forcing to 2."");"
94510,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/main/java/org/apache/hadoop/fs/obs/OBSFsDFSListing.java,181,,"              + "", marker="" + ("
94511,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/main/java/org/apache/hadoop/fs/obs/OBSInputStream.java,594,,"                + ""due to exception[{}]"","
94512,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/main/java/org/apache/hadoop/fs/obs/OBSInputStream.java,628,,"            + ""position:{}, thread:{}, timeUsedMilliSec:{}"","
94513,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/main/java/org/apache/hadoop/fs/obs/OBSObjectBucketUtils.java,375,,"      LOG.warn(""Interrupted while copying objects (copy)"");"
94514,./TargetProjects/hadoop/hadoop-cloud-storage-project/hadoop-huaweicloud/src/test/java/org/apache/hadoop/fs/obs/TestOBSFSMainOperations.java,59,,"    Assume.assumeTrue(""unspport."", false);"
94515,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java,121,,"        USER_KERBEROS_OPTIONS.put(""useDefaultCcache"", ""true"");"
94516,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java,181,,"            config.getProperty(DISCONNECT_FROM_ZOOKEEPER_ON_SHUTDOWN, ""true""));"
94517,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/KerberosTestUtils.java,74,,"        options.put(""refreshKrb5Config"", ""true"");"
94518,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/client/TestAuthenticatedURL.java,33,,"    token = new AuthenticatedURL.Token(""foo"");"
94519,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,111,,"        config.getProperty(""management.operation.return"", ""true"").equals(""true"");"
94520,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,111,,"        config.getProperty(""management.operation.return"", ""true"").equals(""true"");"
94521,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,145,,"        if (request.getHeader(""WWW-Authenticate"") == null) {"
94522,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,161,,"      Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn(""simple"");"
94523,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,256,,"      Mockito.when(config.getInitParameter(AuthenticationFilter.COOKIE_DOMAIN)).thenReturn("".foo.com"");"
94524,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,257,,"      Mockito.when(config.getInitParameter(AuthenticationFilter.COOKIE_PATH)).thenReturn(""/bar"");"
94525,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,348,,"      Mockito.when(request.getRequestURL()).thenReturn(new StringBuffer(""http://foo:8080/bar""));"
94526,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,367,,"      Mockito.when(config.getInitParameter(AuthenticationFilter.SIGNATURE_SECRET)).thenReturn(""secret"");"
94527,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java,606,,"    }).when(response).addHeader(Mockito.eq(""Set-Cookie""), Mockito.anyString());"
94528,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestJWTRedirectAuthenticationHandler.java,65,,"      SignedJWT jwt = getJWT(""bob"", new Date(new Date().getTime() + 5000),"
94529,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestJWTRedirectAuthenticationHandler.java,68,,"      Cookie cookie = new Cookie(""hadoop-jwt"", jwt.serialize());"
94530,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestJWTRedirectAuthenticationHandler.java,84,,"      fail(""alternateAuthentication should NOT have thrown a AuthenticationException"");"
94531,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/server/TestJWTRedirectAuthenticationHandler.java,183,,"      fail(""alternateAuthentication should NOT have thrown a ServletException"");"
94532,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/util/TestKerberosName.java,62,,"    checkTranslation(""joe/admin@FOO.COM"", ""joe"");"
94533,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/util/TestSigner.java,58,,"    String t = ""test"";"
94534,./TargetProjects/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/util/TestZKSignerSecretProvider.java,143,,"        .getBytes(Charset.forName(""UTF-8""));"
94535,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java,2596,,"      throw new ClassNotFoundException(""Class "" + name + "" not found"");"
94536,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java,3191,,"      case ""property"":"
94537,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java,3195,,"      case ""name"":"
94538,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java,3196,,"      case ""value"":"
94539,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java,3197,,"      case ""final"":"
94540,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java,3198,,"      case ""source"":"
94541,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/ConfigurationWithLogging.java,59,,"    log.info(""Got {} = '{}' (default '{}')"", name,"
94542,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java,338,,"        throw new IOException(""Can't get key "" + versionName + "" from "" +"
94543,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java,46,,"      ""   ["" + CreateCommand.USAGE + ""]\n"" +"
94544,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java,46,,"      ""   ["" + CreateCommand.USAGE + ""]\n"" +"
94545,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java,88,,"        String keyName = ""-help"";"
94546,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java,175,,"    sbuf.append(CreateCommand.USAGE + "":\n\n"" + CreateCommand.DESC + ""\n"");"
94547,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java,615,,"    checkNotEmpty(versionName, ""versionName"");"
94548,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java,625,,"    checkNotEmpty(name, ""name"");"
94549,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java,642,,"            throw new IOException(""Mkdirs failed to create "" +"
94550,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java,1260,,"  @SuppressWarnings(""deprecation"")"
94551,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java,541,,"      throw new FileNotFoundException(""File "" + f + "" not found"");"
94552,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java,597,,"      throw new FileNotFoundException(""File "" + f + "" does not exist"");"
94553,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java,271,,"      throw new HadoopIllegalArgumentException(""Invalid <aclSpec> : "" + aclStr);"
94554,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/AclCommands.java,184,,"        ""m"", ""x"", ""-set"");"
94555,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Count.java,63,,"      ""[-"" + OPTION_QUOTA + ""] [-"" + OPTION_HUMAN + ""] [-"" + OPTION_HEADER"
94556,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Count.java,78,,"          ""The -"" + OPTION_HUMAN +"
94557,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Ls.java,62,,"  public static final String USAGE = ""[-"" + OPTION_PATHONLY + ""] [-"" +"
94558,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Ls.java,78,,"          ""  -"" + OPTION_PATHONLY +"
94559,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/statistics/IOStatisticsLogging.java,269,,"        LOG.info(""IOStatistics: {}"", ioStatisticsToPrettyString(stats));"
94560,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/InodeTree.java,594,,"          throw new IOException(""Mount table "" + mountTableName"
94561,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java,818,,"          processThrowable(nflyNode, ""listStatus"", fnfe, ioExceptions, f);"
94562,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java,693,,"        throw readOnlyMountTable(""rename"", src);"
94563,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java,69,,"    .put(""-transitionToActive"","
94564,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java,71,,"    .put(""-transitionToStandby"","
94565,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java,787,,"            .put(""acceptRanges"", ""true"")"
94566,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java,879,,"        @SuppressWarnings(""unchecked"")"
94567,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1266,,"    @SuppressWarnings(""unchecked"")"
94568,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1286,,"                + keyClass.getCanonicalName() + ""'. """
94569,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1287,,"                + ""Please ensure that the configuration '"" +"
94570,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1288,,"                CommonConfigurationKeys.IO_SERIALIZATIONS_KEY + ""' is """
94571,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1290,,"                + ""custom serialization."");"
94572,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1433,,"        throw new IOException(""wrong key class: ""+key.getClass().getName()"
94573,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1434,,"                              +"" is not ""+keyClass);"
94574,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1436,,"        throw new IOException(""wrong value class: ""+val.getClass().getName()"
94575,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,1445,,"        throw new IOException(""negative length keys not allowed: "" + key);"
94576,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,2329,,"          throw new IOException(val+"" read ""+(valBuffer.getPosition()-keyLength)"
94577,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java,2330,,"                                + "" bytes, should read "" +"
94578,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/WritableUtils.java,89,,"    return new String(bytes, ""UTF-8"");"
94579,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java,612,,"          throw new IOException(""unexpected end of stream"");"
94580,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java,232,,"        throw new IllegalArgumentException(""maxRetries = "" + maxRetries+"" < 0"");"
94581,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java,119,,"          + "" could not be constructed."", e.getCause());"
94582,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RpcWritable.java,80,,"    @SuppressWarnings(""unchecked"")"
94583,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java,708,,"  @InterfaceAudience.LimitedPrivate({""HDFS"", ""MapReduce""})"
94584,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/metrics/RpcMetrics.java,83,,"            + interval + ""s"", ""rpc queue time in "" + metricsTimeUnit, ""ops"","
94585,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/metrics/RpcMetrics.java,84,,"            ""latency"", interval);"
94586,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java,259,,"          LOG.error(""getting attribute "" + prs + "" of "" + oname"
94587,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java,259,,"          LOG.error(""getting attribute "" + prs + "" of "" + oname"
94588,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java,260,,"              + "" threw an exception"", e);"
94589,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/log/LogLevel.java,339,,"            + ""Submitted Class Name: <b>"" + logName + ""</b><br />"");"
94590,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableStat.java,72,,"    numInfo = info(ucName +""Num""+ usName, ""Number of ""+ lsName +"" for ""+ desc);"
94591,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java,173,,"    if (""default"".equals(strInterface)) {"
94592,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java,830,,"              ""Call From """
94593,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java,832,,"                  + "" to """
94594,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/unix/DomainSocket.java,44,,"@InterfaceAudience.LimitedPrivate(""HDFS"")"
94595,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java,292,,"    println(""%s = %s"", ARG_KEYTAB, keytab);"
94596,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedIdMapping.java,355,,"      updateMapInternal(uMap, ""user"", MAC_GET_ALL_USERS_CMD, ""\\s+"","
94597,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedIdMapping.java,355,,"      updateMapInternal(uMap, ""user"", MAC_GET_ALL_USERS_CMD, ""\\s+"","
94598,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedIdMapping.java,369,,"      updateMapInternal(gMap, ""group"", MAC_GET_ALL_GROUPS_CMD, ""\\s+"","
94599,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java,2122,,"      if (""true"".equalsIgnoreCase(System.getenv(""HADOOP_JAAS_DEBUG""))) {"
94600,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/AbstractJavaKeyStoreProvider.java,185,,"        throw new IOException(""Can't get credential "" + alias + "" from """
94601,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java,45,,"      ""   ["" + CreateCommand.USAGE + ""]\n"" +"
94602,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java,45,,"      ""   ["" + CreateCommand.USAGE + ""]\n"" +"
94603,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java,116,,"      } else if (args[i].equals(""-help"")) {"
94604,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java,132,,"        .append(CreateCommand.USAGE + "":\n\n"" + CreateCommand.DESC + ""\n"")"
94605,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java,286,,"          getOut().println(""Credential "" + alias +"
94606,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/http/CrossOriginFilter.java,173,,"        Arrays.asList(allowedMethodsConfig.trim().split(""\\s*,\\s*"")));"
94607,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java,285,,"      options.put(""useKeyTab"", ""true"");"
94608,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java,286,,"    Preconditions.checkNotNull(url, ""url"");"
94609,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java,287,,"    Preconditions.checkNotNull(token, ""token"");"
94610,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationHandler.java,149,,"  @SuppressWarnings(""unchecked"")"
94611,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenManager.java,160,,"  @SuppressWarnings(""unchecked"")"
94612,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/KMSUtil.java,95,,"  @SuppressWarnings(""unchecked"")"
94613,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ReflectionUtils.java,125,,"  @SuppressWarnings(""unchecked"")"
94614,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SemaphoredDelegatingExecutor.java,106,,"    throw new RuntimeException(""Not implemented"");"
94615,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Sets.java,230,,"      throw new NullPointerException(""set1"");"
94616,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Sets.java,233,,"      throw new NullPointerException(""set2"");"
94617,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java,211,,"    return (WINDOWS)? new String[]{""cmd"", ""/c"", ""groups""}"
94618,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java,228,,"      return new String[] {""bash"", ""-c"", ""id -gn "" + quotedUser +"
94619,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shell.java,268,,"          new String[] { getWinUtilsPath(), ""chmod"", ""-R"", perm }"
94620,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java,99,,"               ""[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"" +"
94621,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java,250,,"          Charset.forName(""UTF-8""));"
94622,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java,289,,"      LOG.warn(""Error reading the stream "" + io);"
94623,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java,297,,"          LOG.warn(""Error closing the stream "" + in);"
94624,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionInfo.java,58,,"    return info.getProperty(""version"", ""Unknown"");"
94625,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestProtosLegacy.java,9779,,"              new java.lang.String[] { ""Message"", });"
94626,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,354,,"              ""Service.callBlockingMethod() given method descriptor for "" +"
94627,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,355,,"              ""wrong service type."");"
94628,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,395,,"              throw new java.lang.AssertionError(""Can't get here."");"
94629,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,404,,"              ""Service.getRequestPrototype() given method "" +"
94630,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,405,,"              ""descriptor for wrong service type."");"
94631,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,454,,"              ""Service.getResponsePrototype() given method "" +"
94632,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,664,,"          ""Service.callMethod() given method descriptor for wrong "" +"
94633,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/arm-java/org/apache/hadoop/ipc/protobuf/TestRpcServiceProtosLegacy.java,665,,"          ""service type."");"
94634,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,186,,"    declareProperty(""prop"", ""A"", ""A"");"
94635,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,452,,"    Mockito.when(mock.getenv(""SOME_VALUE"")).thenReturn(""some value"");"
94636,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,548,,"    declareProperty(""my.var"", """", """", true);"
94637,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,628,,"    out.write(""<property>"");"
94638,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,643,,"    out.write(""</property>\n"");"
94639,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,743,,"    appendProperty(""my.comment"", ""this <!--comment here--> contains a comment"");"
94640,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,795,,"    conf.set(""dirs"", StringUtils.join(dirs, "",""));"
94641,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,797,,"      String localPath = conf.getLocalPath(""dirs"", ""dir"" + i).toString();"
94642,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,997,,"    appendProperty(""e"", ""SecondLevelInclude"");"
94643,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1005,,"    appendProperty(""c"",""FirstLevelInclude"");"
94644,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1183,,"    IntegerRanges ranges = config.getRange(""Test"", """");"
94645,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1246,,"    appendProperty(""test.int1"", ""20"");"
94646,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1247,,"    appendProperty(""test.int2"", ""020"");"
94647,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1248,,"    appendProperty(""test.int3"", ""-20"");"
94648,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1249,,"    appendProperty(""test.int4"", "" -20 "");"
94649,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1372,,"    appendProperty(""test.class1"", ""java.lang.Integer"");"
94650,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1449,,"    conf.setEnum(""test.enum"", Dingo.FOO);"
94651,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1489,,"        conf.getTimeDuration(""test.time.a"", 7L, SECONDS, MILLISECONDS));"
94652,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1503,,"    conf.setTimeDuration(""test.time.b"", 1, DAYS);"
94653,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1511,,"    assertEquals(30L, conf.getTimeDuration(""test.time.X"", 30, SECONDS));"
94654,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1516,,"    assertEquals(10L, conf.getTimeDuration(""test.time.c"", ""10"", SECONDS));"
94655,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1542,,"    Assertions.assertThat(conf.getStorageSize(key, ""1GB"", MB))"
94656,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1560,,"    Assertions.assertThat(conf.getStorageSize(key, ""1PB"", GB))"
94657,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1616,,"      wconf.set(""test.time.warn"", s);"
94658,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1672,,"    appendProperty(""test.foo"", ""bar"");"
94659,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1672,,"    appendProperty(""test.foo"", ""bar"");"
94660,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1676,,"    conf.set(""fs.defaultFS"", ""value"");"
94661,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1720,,"    addr = conf.getSocketAddr(""myAddress"", defaultAddr, defaultPort);"
94662,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1777,,"    appendProperty(""test.key1"", ""final-value1"", true);"
94663,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1778,,"    appendProperty(""test.key2"", ""value2"");"
94664,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1778,,"    appendProperty(""test.key2"", ""value2"");"
94665,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1785,,"    appendProperty(""test.key1"", ""value1"");"
94666,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1786,,"    appendProperty(""test.key3"", ""value3"");"
94667,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1786,,"    appendProperty(""test.key3"", ""value3"");"
94668,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1792,,"    conf.set(""test.key3"", ""value4"");"
94669,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1793,,"    conf.set(""test.key4"", ""value5"");"
94670,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1793,,"    conf.set(""test.key4"", ""value5"");"
94671,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,1966,,"            ""test.unknown.key"", outWriter);"
94672,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,2225,,"        config.getClasses(""testClassName"", Configuration.class);"
94673,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,2278,,"        ""foo${"" + key + ""}"","
94674,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfiguration.java,2562,,"      appendPropertyByTag(""dfs.replication"", ""1"", ""HDFS"");"
94675,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationDeprecation.java,57,,"      ""-TestConfigurationDeprecation.xml"").getAbsolutePath();"
94676,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationDeprecation.java,281,,"    conf.set(""oldkey"", ""hello"");"
94677,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationDeprecation.java,298,,"    Configuration.addDeprecation(""dK_iterator"", new String[]{""nK_iterator""});"
94678,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationDeprecation.java,298,,"    Configuration.addDeprecation(""dK_iterator"", new String[]{""nK_iterator""});"
94679,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationDeprecation.java,331,,"    Configuration.addDeprecation(""dK_unset"", new String[]{""nK_unset""});"
94680,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationDeprecation.java,331,,"    Configuration.addDeprecation(""dK_unset"", new String[]{""nK_unset""});"
94681,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationFieldsBase.java,434,,"    LOG_CONFIG.debug(""\n=====\n"");"
94682,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestConfigurationFieldsBase.java,487,,"      LOG.info(""  (None)"");"
94683,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestDeprecatedKeys.java,62,,"    Configuration.addDeprecation(""dK"", new String[]{""nK1"", ""nK2""});"
94684,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestDeprecatedKeys.java,62,,"    Configuration.addDeprecation(""dK"", new String[]{""nK1"", ""nK2""});"
94685,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestDeprecatedKeys.java,72,,"    conf.set(""nK2"", ""VVV"");"
94686,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestGetInstances.java,55,,"    conf.setStrings(""some.classes"","
94687,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,163,,"    assertTrue(PROP1 + "" set to wrong value "","
94688,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,195,,"      assertFalse(""received unexpected exception"","
94689,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,204,,"        assertTrue(PROP1 + ""set to wrong value "","
94690,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,263,,"      assertTrue(""did not receive expected exception"","
94691,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,392,,"    changes.add(new PropertyChange(""name1"", ""new1"", ""old1""));"
94692,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,393,,"    changes.add(new PropertyChange(""name2"", ""new2"", ""old2""));"
94693,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,394,,"    changes.add(new PropertyChange(""name3"", ""new3"", ""old3""));"
94694,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,489,,"    final String property = ""FOO"";"
94695,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/conf/TestReconfiguration.java,490,,"    final String value1 = ""value1"";"
94696,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoCodec.java,87,,"      LOG.warn(""Skipping test since openSSL library not loaded"");"
94697,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoStreams.java,290,,"        throw new IOException(""Cannot read after EOF."");"
94698,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/TestCryptoStreams.java,293,,"        throw new IOException(""Cannot read to negative offset."");"
94699,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestCachingKeyProvider.java,60,,"    Mockito.when(mockProv.getKeyVersion(Mockito.eq(""k1@0"")))"
94700,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestCachingKeyProvider.java,62,,"    Mockito.when(mockProv.getKeyVersion(Mockito.eq(""k2@0""))).thenReturn(null);"
94701,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProvider.java,80,,"    KeyProvider.Metadata meta = new KeyProvider.Metadata(""myCipher"", 100, null,"
94702,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProvider.java,105,,"        ""description"", attributes, date, 123);"
94703,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,67,,"    kp = new UserProvider.Factory().createProvider(new URI(""user:///""), conf);"
94704,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,81,,"    assertEquals(""Version name of EEK should be EEK"","
94705,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,84,,"    assertEquals(""Name of EEK should be encryption key name"","
94706,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,86,,"    assertNotNull(""Expected encrypted key material"","
94707,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,88,,"    assertEquals(""Length of encryption key material and EEK material should """
94708,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,89,,"            + ""be the same"", encryptionKey.getMaterial().length,"
94709,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderCryptoExtension.java,174,,"      fail(""Re-encrypted EEK should have different material"");"
94710,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,63,,"    final Path jksPath = new Path(testRootDir.toString(), ""test.jks"");"
94711,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,65,,"        ""://file"" + jksPath.toUri().toString();"
94712,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,120,,"      provider.createKey(""key3"", key3, KeyProvider.options(conf));"
94713,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,136,,"      assertTrue(""should throw"", false);"
94714,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,149,,"      provider.createKey(""key4"", key3,"
94715,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,236,,"    provider.createKey(""key5"", new byte[]{1},"
94716,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyProviderFactory.java,451,,"    @SuppressWarnings(""unused"")"
94717,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java,81,,"        {""delete"", keyName, ""-f"", ""-provider"", jceksProvider};"
94718,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java,108,,"    String keyName = ""key1"";"
94719,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java,114,,"    final String[] args1 = {""create"", keyName, ""-provider"", jceksProvider};"
94720,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java,190,,"    final String[] args1 = {""create"", ""key1"", ""-cipher"", ""LJM"", ""-provider"","
94721,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestKeyShell.java,283,,"            ""-attr"", ""foo=bar""};"
94722,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestValueQueue.java,57,,"        keyQueue.add(""test"");"
94723,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/TestValueQueue.java,209,,"    Assert.assertEquals(""Failed in async call."", 10, filler.getTop().num);"
94724,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/kms/TestLoadBalancingKMSClientProvider.java,91,,"        ""kms://http@host1;host2;host3:9600/kms/foo""), conf);"
94725,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/kms/TestLoadBalancingKMSClientProvider.java,136,,"    assertEquals(""p3"", kp.createKey(""test3"", new Options(conf)).getName());"
94726,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/kms/TestLoadBalancingKMSClientProvider.java,231,,"      throwEx(new AuthenticationException(""bar""));"
94727,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/kms/TestLoadBalancingKMSClientProvider.java,266,,"      kp.generateEncryptedKey(""foo"");"
94728,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/kms/TestLoadBalancingKMSClientProvider.java,269,,"          ""AuthenticationException""));"
94729,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/crypto/key/kms/TestLoadBalancingKMSClientProvider.java,370,,"    final String keyName = ""test"";"
94730,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,100,,"    fSys.mkdirs(getTestRootPath(fSys, ""test""));"
94731,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,167,,"    Path absolutePath = new Path(absoluteDir, ""foo"");"
94732,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,203,,"    Path testDir = getTestRootPath(fSys, ""test/hadoop"");"
94733,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,234,,"    createFile(getTestRootPath(fSys, ""test/hadoop/file""));"
94734,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,239,,"      Assert.fail(""Should throw IOException."");"
94735,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,261,,"      Assert.fail(""Should throw FileNotFoundException"");"
94736,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,281,,"    Path testRootDir = getTestRootPath(fSys, ""test/hadoop/dir"");"
94737,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,689,,"    Assert.assertTrue(""Exists"", exists(fSys, path));"
94738,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,690,,"    Assert.assertEquals(""Length"", len, fSys.getFileStatus(path).getLen());"
94739,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,822,,"      Assert.fail(""Expected exception was not thrown"");"
94740,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,995,,"    createFile(getTestRootPath(fSys, ""test/hadoop/dir/file1""));"
94741,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FSMainOperationsBaseTest.java,996,,"    createFile(getTestRootPath(fSys, ""test/hadoop/dir/subdir/file2""));"
94742,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextCreateMkdirBaseTest.java,156,,"    Path f = new Path(root, ""d1/d2/d3"");"
94743,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,117,,"    fc.mkdir(getTestRootPath(fc, ""test""), FileContext.DEFAULT_PERM, true);"
94744,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,234,,"    Path testDir = getTestRootPath(fc, ""test/hadoop"");"
94745,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,265,,"    createFile(getTestRootPath(fc, ""test/hadoop/file""));"
94746,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,304,,"      Assert.fail(""Should throw FileNotFoundException"");"
94747,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,324,,"        getTestRootPath(fc, ""test/hadoop/a""),"
94748,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,780,,"    Assert.fail(""Excepted exception not thrown"");"
94749,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,993,,"      Assert.fail(""Expected exception was not thrown"");"
94750,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,1107,,"    Path src = getTestRootPath(fc, ""test/hadoop/dir"");"
94751,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,1159,,"    createFile(getTestRootPath(fc, ""test/hadoop/dir/file1""));"
94752,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,1160,,"    createFile(getTestRootPath(fc, ""test/hadoop/dir/subdir/file2""));"
94753,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,1331,,"    final Path path = new Path(rootPath, ""zoo"");"
94754,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java,1483,,"        .opt(""fs.test.something"", true)"
94755,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemContractBaseTest.java,224,,"      fail(""Should throw IOException."");"
94756,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemContractBaseTest.java,368,,"    assertTrue(""Exists"", fs.exists(path));"
94757,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemContractBaseTest.java,369,,"    assertEquals(""Length"", data.length, fs.getFileStatus(path).getLen());"
94758,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemContractBaseTest.java,414,,"    assertTrue(""File exists"", fs.exists(file));"
94759,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemContractBaseTest.java,512,,"    createFile(path(src + ""/file1""));"
94760,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileSystemContractBaseTest.java,513,,"    createFile(path(src + ""/subdir/file2""));"
94761,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,100,,"    Path linkToDir = new Path(testBaseDir1()+""/link"");"
94762,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,109,,"    Path file = new Path(""/noSuchFile"");"
94763,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,142,,"    Path file = new Path(testBaseDir1()+""/file"");"
94764,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,143,,"    Path link = new Path(testBaseDir2()+""/linkToFile"");"
94765,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,172,,"      assertEquals(""file"", getScheme());"
94766,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,181,,"    wrapper.createSymlink(new Path(""/doesNotExist""), dir, false);"
94767,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,257,,"    Path linkToFile = new Path(testBaseDir1(), ""linkToFile"");"
94768,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,610,,"    Path linkToDir = new Path(testBaseDir2(), ""linkToDir"");"
94769,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,640,,"    Path subDir        = new Path(testBaseDir1(), ""subDir"");"
94770,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,677,,"    Path link  = new Path(testBaseDir1(), ""link"");"
94771,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,820,,"    Path fileNewViaLink = new Path(linkToDir, ""fileNew"");"
94772,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,855,,"    Path dir           = new Path(baseDir, ""dir"");"
94773,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java,1143,,"      fail(""Renamed symlink to its target"");"
94774,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestAfsCheckPath.java,46,,"    URI uri = new URI(""dummy://dummy-host:"" + DEFAULT_PORT);"
94775,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestChecksumFs.java,61,,"    Path srcPath = new Path(testRootDirPath, ""testRenameSrc"");"
94776,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestContentSummary.java,36,,"    assertEquals(""getLength"", 0, contentSummary.getLength());"
94777,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestContentSummary.java,37,,"    assertEquals(""getFileCount"", 0, contentSummary.getFileCount());"
94778,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestContentSummary.java,38,,"    assertEquals(""getDirectoryCount"", 0, contentSummary.getDirectoryCount());"
94779,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestContentSummary.java,39,,"    assertEquals(""getQuota"", -1, contentSummary.getQuota());"
94780,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestContentSummary.java,40,,"    assertEquals(""getSpaceConsumed"", 0, contentSummary.getSpaceConsumed());"
94781,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestContentSummary.java,41,,"    assertEquals(""getSpaceQuota"", -1, contentSummary.getSpaceQuota());"
94782,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDefaultUri.java,41,,"    assertThat(uri.getScheme()).isEqualTo(""hdfs"");"
94783,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestDefaultUri.java,42,,"    assertThat(uri.getAuthority()).isEqualTo(""nn_host"");"
94784,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileContext.java,61,,"    assertEquals(""Umask for fc1 is incorrect"", 022, fc1.getUMask().toShort());"
94785,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileContext.java,62,,"    assertEquals(""Umask for fc2 is incorrect"", 022, fc2.getUMask().toShort());"
94786,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileStatus.java,56,,"  static final FsPermission PERMISSION = FsPermission.valueOf(""-rw-rw-rw-"");"
94787,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileStatus.java,150,,"        FsPermission.valueOf(""-rw-rw-rw-""), ""one"", ""one"", null, path);"
94788,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java,53,,"    FileSystem fs1 = FileSystem.get(new URI(""cachedfile://a""), conf);"
94789,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java,157,,"    UserGroupInformation ugiA = UserGroupInformation.createRemoteUser(""foo"");"
94790,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java,158,,"    UserGroupInformation ugiB = UserGroupInformation.createRemoteUser(""bar"");"
94791,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCanonicalization.java,37,,"    ""myfs://host"","
94792,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCanonicalization.java,56,,"    FileSystem fs = getVerifiedFS(""myfs://host"", ""myfs://host.a.b:123"");"
94793,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCanonicalization.java,126,,"    FileSystem fs = getVerifiedFS(""myfs://host:456"", ""myfs://host.a.b:456"");"
94794,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCanonicalization.java,219,,"    verifyPaths(fs, new String[]{ ""myfs://"" }, -1, true);"
94795,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCanonicalization.java,323,,"      throw new IOException(""not supposed to be here"");"
94796,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemTokens.java,79,,"    Text service1 = new Text(""singleTokenFs1"");"
94797,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemTokens.java,80,,"    Text service2 = new Text(""singleTokenFs2"");"
94798,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,178,,"    createFile(partitioned, ""part-r-00000"", ""foo"");"
94799,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,539,,"    final long expected = 2 * (3 + System.getProperty(""line.separator"").length());"
94800,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,591,,"      byte[] data = ""some-content"".getBytes(""UTF-8"");"
94801,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,835,,"    File link = new File(del, ""_link"");"
94802,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,1231,,"    String uris1 = ""hdfs://"" + host1 + "":"" + Integer.toString(port1) + ""/tmp/foo"";"
94803,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,1231,,"    String uris1 = ""hdfs://"" + host1 + "":"" + Integer.toString(port1) + ""/tmp/foo"";"
94804,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java,1471,,"    Path testPath = new Path(new Path(uri), ""writestring.out"");"
94805,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,62,,"    srcPath = new Path(testRootDir, ""srcFile"");"
94806,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,91,,"    shellRun(0, ""-get"", srcPath.toString(), dstPath.toString());"
94807,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,124,,"    Path testRoot = new Path(testRootDir, ""testPutFile"");"
94808,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,128,,"    Path targetDir = new Path(testRoot, ""target"");    "
94809,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,136,,"    Path testRoot = new Path(testRootDir, ""testPutDir"");"
94810,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,141,,"    Path dirPath = new Path(testRoot, new Path(""srcDir""));"
94811,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,261,,"      argv = new String[]{ ""-put"", srcPath, pathAsString(dest) };"
94812,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,368,,"        ""-getmerge"","
94813,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,370,,"        ""out"" });"
94814,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,399,,"        ""-getmerge"", ""-nl"","
94815,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,455,,"        ""-moveFromLocal"", srcFile.toString(), target.toString() });"
94816,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellCopy.java,580,,"        .run(new String[] { ""-copyFromLocal"", srcFile.toString(),"
94817,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellList.java,65,,"    String[] lsArgv = new String[]{""-ls"", testRootDir.toString()};"
94818,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellReturnCode.java,109,,"              ((owner != null) ? ""STUB-""+owner : oldStats[i][j].getOwner()),"
94819,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellReturnCode.java,152,,"    String argv[] = { ""-chmod"", ""777"", f1 };"
94820,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellReturnCode.java,152,,"    String argv[] = { ""-chmod"", ""777"", f1 };"
94821,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellReturnCode.java,209,,"    change(0, ""admin"", null, f1);"
94822,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellReturnCode.java,446,,"    chown.run(""user"", ""/path"");"
94823,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFsShellTouch.java,102,,"      assertThat(shellRun(""-touch"", ""-c"", newFileName))"
94824,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java,82,,"    final Path indexPath = new Path(harPath, ""_index"");"
94825,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java,92,,"    final URI uri = new URI(""har://"" + harPath.toString());"
94826,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestHarFileSystemBasics.java,328,,"      Assert.fail(""IOException expected."");"
94827,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalDirAllocator.java,143,,"      Shell.execCommand(Shell.getSetPermissionCommand(""u+w"", false,"
94828,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalDirAllocator.java,368,,"      dirAllocator.getLocalPathForWrite(""/test"", conf1);"
94829,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java,123,,"      Path dir1 = new Path(""dir1"");"
94830,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java,132,,"      Path file1 = new Path(""file1"");"
94831,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java,279,,"    Path file2 = new Path(TEST_ROOT_DIR+""/dir1"", ""file2"");"
94832,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java,347,,"    final File dir2 = new File(dir1, ""dir2"");"
94833,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestLocalFileSystem.java,761,,"    final List<String> supportedKeys = Arrays.asList(""strM"");"
94834,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,80,,"    toStringTest(""/foo"");"
94835,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,81,,"    toStringTest(""/foo/bar"");"
94836,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,82,,"    toStringTest(""foo"");"
94837,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,83,,"    toStringTest(""foo/bar"");"
94838,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,100,,"      toStringTest(""c:/foo/bar"");"
94839,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,154,,"      assertEquals(new Path(""c:/""), new Path(""c:/foo"").getParent());"
94840,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,164,,"    assertEquals(new Path(""/foo/bar""), new Path(""/foo"", ""bar""));"
94841,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,165,,"    assertEquals(new Path(""/foo/bar/baz""), new Path(""/foo/bar"", ""baz""));"
94842,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,169,,"    assertEquals(new Path(""foo/bar/baz""), new Path(""foo"", ""bar/baz""));"
94843,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,171,,"    assertEquals(new Path(""/foo""), new Path(""/bar"", ""/foo""));"
94844,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,228,,"    assertEquals(new Path(""../../foo/bar"").toString(), ""../../foo/bar"");"
94845,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,241,,"    assertEquals(new Path(""/foo/bar"",""../../boo/bud"").toString(), ""/boo/bud"");"
94846,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,327,,"            new URI(null, null, ""/foo?bar"", null, null),"
94847,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,333,,"            new URI(null, null, ""/foo bar"", null, null),"
94848,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,342,,"    assertEquals(new URI(""/foo;bar"").getPath(), new Path(""/foo;bar"").toUri().getPath());"
94849,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,344,,"    assertEquals(new URI(""/foo+bar""), new Path(""/foo+bar"").toUri());"
94850,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,354,,"    assertEquals(""/foo%20bar"","
94851,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestPath.java,426,,"        new Path(testRoot, ""*/f""),"
94852,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,120,,"    conf.set(""fs.defaultFS"", fs.getUri().toString());"
94853,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,155,,"    Path myPath = new Path(base, ""test/mkdirs"");"
94854,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,159,,"    Path myFile = new Path(base, ""test/mkdirs/myFile"");"
94855,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,166,,"      args[0] = ""-expunge"";"
94856,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,170,,"      assertEquals(""Expunge should return zero"", 0, val);"
94857,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,177,,"      args[0] = ""-rm"";"
94858,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,182,,"      assertEquals(""Remove should return zero"", 0, val);"
94859,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,208,,"      args[0] = ""-rmr"";"
94860,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,213,,"      assertEquals(""Recursive Remove should return zero"", 0, val);"
94861,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,450,,"      rc = shell.run(new String[] {""-expunge"", ""-immediate""});"
94862,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,571,,"    conf.setClass(""fs.file.impl"", TestLFS.class, FileSystem.class);"
94863,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,611,,"      System.err.println(""Exception raised from Trash.run "" +"
94864,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestTrash.java,645,,"    conf.setClass(""fs.trash.classname"", TestTrashPolicy.class, TrashPolicy.class);"
94865,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractCreateTest.java,98,,"                             ""FileAlreadyExistsException"","
94866,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractCreateTest.java,180,,"    Path child = new Path(path, ""child"");"
94867,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractCreateTest.java,325,,"    Path parent = new Path(grandparent, ""parent"");"
94868,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java,228,,"    listStatus.assertFieldsEquivalent(""files"", listing,"
94869,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java,296,,"    Path path = path(""missing"");"
94870,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java,401,,"    assertEquals(""size of file list returned"", 1, statusList.size());"
94871,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java,530,,"    Path file1 = touchf(""file-1.txt"");"
94872,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractGetFileStatusTest.java,549,,"    Path subdir = path(""subdir"");"
94873,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractMkdirTest.java,45,,"    assertPathExists(""mkdir failed"", dir);"
94874,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractOpenTest.java,190,,"        .opt(""fs.test.something"", true)"
94875,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractOpenTest.java,255,,"        ""exceptionally"","
94876,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractRenameTest.java,213,,"    writeTextFile(fs, new Path(srcDir, ""source.txt""),"
94877,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractSeekTest.java,195,,"      handleRelaxedException(""a negative seek"", ""EOFException"", e);"
94878,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractSeekTest.java,394,,"      fail(""Expected an exception"");"
94879,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/AbstractContractSeekTest.java,537,,"      fail(""Expected an exception, got "" + r);"
94880,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/ContractTestUtils.java,967,,"          message + "": not found "" + path + "" in "" + path.getParent())"
94881,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/contract/rawlocal/TestRawlocalContractRename.java,55,,"    ContractTestUtils.writeTextFile(fs, new Path(srcDir, ""source.txt""),"
94882,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestAclCommands.java,75,,"        0 == runCommand(new String[] {""-setfacl"", path}));"
94883,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCommandFactory.java,46,,"    assertArrayEquals(new String []{""tc1"", ""tc2"", ""tc2.1""}, names);"
94884,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCommandFactory.java,46,,"    assertArrayEquals(new String []{""tc1"", ""tc2"", ""tc2.1""}, names);"
94885,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCommandFactory.java,46,,"    assertArrayEquals(new String []{""tc1"", ""tc2"", ""tc2.1""}, names);"
94886,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCommandFactory.java,54,,"    assertArrayEquals(new String[]{""tc1"", ""tc2"", ""tc2.1"", ""tc3"", ""tc4""}, names);"
94887,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCopyFromLocal.java,106,,"    Path dir = new Path(""dir"" + RandomStringUtils.randomNumeric(4));"
94888,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCount.java,74,,"    options.add(""dummy"");"
94889,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCount.java,181,,"    Path path = new Path(""mockfs:/test"");"
94890,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestCount.java,289,,"        ""PATHNAME"";"
94891,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,346,,"    TestFile testfile01 = new TestFile(""testDir01"", ""testFile01"");"
94892,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,347,,"    TestFile testfile02 = new TestFile(""testDir02"", ""testFile02"");"
94893,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,348,,"    TestFile testfile03 = new TestFile(""testDir03"", ""testFile03"");"
94894,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,349,,"    TestFile testfile04 = new TestFile(""testDir04"", ""testFile04"");"
94895,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,350,,"    TestFile testfile05 = new TestFile(""testDir05"", ""testFile05"");"
94896,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,351,,"    TestFile testfile06 = new TestFile(""testDir06"", ""testFile06"");"
94897,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,384,,"    TestFile testfile01 = new TestFile(""testDirectory"", ""testFile01"");"
94898,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,410,,"    inOrder.verify(out).println(""Found 6 items"");"
94899,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,423,,"    TestFile testfile01 = new TestFile(""testDirectory01"", ""testFile01"");"
94900,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,431,,"    TestFile testfile04 = new TestFile(""testDirectory02"", ""testFile04"");"
94901,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestLs.java,453,,"    inOrder.verify(out).println(""Found 3 items"");"
94902,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestPathData.java,125,,"    assertEquals(new File(testDir + ""/d1/f1""), item.toFile());"
94903,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestTextCommand.java,58,,"      System.getProperty(""line.separator"") +"
94904,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestXAttrCommands.java,58,,"        0 == runCommand(new String[] { ""-getfattr"", ""-d""}));"
94905,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/shell/TestXAttrCommands.java,63,,"        0 == runCommand(new String[] { ""-getfattr"", ""extra"", ""-d"", ""/test""}));"
94906,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/statistics/TestDurationTracking.java,214,,"          throw new RuntimeException(""oops"");"
94907,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/statistics/TestIOStatisticsStore.java,57,,"  private static final String MEAN = ""mean"";"
94908,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,115,,"    fileSystemTestHelper.createFile(fSys, ""/foo"");"
94909,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,117,,"    Assert.assertTrue(fSysTarget.isFile(new Path(chrootedTo, ""foo"")));"
94910,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,120,,"    fileSystemTestHelper.createFile(fSys, ""/newDir/foo"");"
94911,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,130,,"    fileSystemTestHelper.createFile(fSys, ""/newDir/newDir2/foo"");"
94912,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,143,,"    fSys.mkdirs(fileSystemTestHelper.getTestRootPath(fSys, ""/dirX""));"
94913,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,147,,"    fSys.mkdirs(fileSystemTestHelper.getTestRootPath(fSys, ""/dirX/dirY""));"
94914,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,174,,"    fSys.mkdirs(new Path(""/newDir/dirFoo""));"
94915,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,328,,"    conf.setClass(""fs.mockfs.impl"", MockFileSystem.class, FileSystem.class);"
94916,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,330,,"    URI chrootUri = URI.create(""mockfs://foo/a/b"");"
94917,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFileSystem.java,451,,"    chrootFs.createSnapshot(snapRootPath, ""snap1"");"
94918,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,111,,"    fileContextTestHelper.createFileNonRecursive(fc, ""/foo"");"
94919,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,113,,"    Assert.assertTrue(isFile(fcTarget, new Path(chrootedTo, ""foo"")));"
94920,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,116,,"    fileContextTestHelper.createFile(fc, ""/newDir/foo"");"
94921,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,126,,"    fileContextTestHelper.createFile(fc, ""/newDir/newDir2/foo"");"
94922,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,139,,"    fc.mkdir(fileContextTestHelper.getTestRootPath(fc, ""/dirX""), FileContext.DEFAULT_PERM, false);"
94923,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,143,,"    fc.mkdir(fileContextTestHelper.getTestRootPath(fc, ""/dirX/dirY""), FileContext.DEFAULT_PERM, false);"
94924,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,170,,"    fc.mkdir(new Path(""/newDir/dirFoo""), FileContext.DEFAULT_PERM, false);"
94925,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestChRootedFs.java,339,,"        .createSnapshot(chRootedSnapRootPath, ""snap1"");"
94926,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemDelegation.java,52,,"    setupFileSystem(new URI(""fs1:/""), FakeFileSystem.class);"
94927,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemDelegation.java,53,,"    setupFileSystem(new URI(""fs2:/""), FakeFileSystem.class);"
94928,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/TestViewFileSystemOverloadSchemeLocalFileSystem.java,109,,"        new String[] {targetTestRoot + ""/wd2"" }, conf);"
94929,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,126,,"    fsTarget.mkdirs(new Path(targetTestRoot,""user""));"
94930,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,157,,"    ConfigUtil.addLink(conf, ""/user"", new Path(targetTestRoot, ""user"").toUri());"
94931,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,159,,"    ConfigUtil.addLink(conf, ""/data"", new Path(targetTestRoot,""data"").toUri());"
94932,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,160,,"    ConfigUtil.addLink(conf, ""/internalDir/linkToDir2"","
94933,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,162,,"    ConfigUtil.addLink(conf, ""/internalDir/internalDir2/linkToDir3"","
94934,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,164,,"    ConfigUtil.addLink(conf, ""/danglingLink"","
94935,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,166,,"    ConfigUtil.addLink(conf, ""/linkToAFile"","
94936,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,262,,"    fileSystemTestHelper.createFile(fsView, ""/user/foo"");"
94937,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,263,,"    Assert.assertTrue(""Created file should be type file"","
94938,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,265,,"    Assert.assertTrue(""Target of created file should be type file"","
94939,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,266,,"        fsTarget.isFile(new Path(targetTestRoot,""user/foo"")));"
94940,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,269,,"    Assert.assertTrue(""Delete should succeed"","
94941,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,271,,"    Assert.assertFalse(""File should not exist after delete"","
94942,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,273,,"    Assert.assertFalse(""Target File should not exist after delete"","
94943,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,277,,"    fileSystemTestHelper.createFile(fsView, ""/internalDir/linkToDir2/foo"");"
94944,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,293,,"    fileSystemTestHelper.createFile(fsView, ""/internalDir/internalDir2/linkToDir3/foo"");"
94945,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,319,,"    fsView.mkdirs(fileSystemTestHelper.getTestRootPath(fsView, ""/user/dirX""));"
94946,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,326,,"        fileSystemTestHelper.getTestRootPath(fsView, ""/user/dirX/dirY""));"
94947,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,426,,"        .assertPathDoesNotExist(fsView2, ""src should not exist after rename"","
94948,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,526,,"    dirPaths = listStatusInternal(located, new Path(""/internalDir""));"
94949,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,531,,"      Assert.assertTrue(""A mount should appear as symlink"", fs.isDirectory());"
94950,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,1041,,"    Path fsTargetFilePath = new Path(""debug.log"");"
94951,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,1315,,"    final String clusterName = ""cluster"" + new Random().nextInt();"
94952,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFileSystemBaseTest.java,1320,,"    URI uri = new URI(""viewfs://"" + clusterName + ""/"");"
94953,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,119,,"    fcTarget.mkdir(new Path(targetTestRoot,""user""),"
94954,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,121,,"    fcTarget.mkdir(new Path(targetTestRoot,""data""),"
94955,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,123,,"    fcTarget.mkdir(new Path(targetTestRoot,""dir2""),"
94956,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,125,,"    fcTarget.mkdir(new Path(targetTestRoot,""dir3""),"
94957,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,139,,"    ConfigUtil.addLink(conf, ""/user"","
94958,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,143,,"    ConfigUtil.addLink(conf, ""/data"","
94959,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,145,,"    ConfigUtil.addLink(conf, ""/internalDir/linkToDir2"","
94960,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,147,,"    ConfigUtil.addLink(conf, ""/internalDir/internalDir2/linkToDir3"","
94961,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,149,,"    ConfigUtil.addLink(conf, ""/danglingLink"","
94962,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,151,,"    ConfigUtil.addLink(conf, ""/linkToAFile"","
94963,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,222,,"    fileContextTestHelper.createFileNonRecursive(fcView, ""/user/foo"");"
94964,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,226,,"        isFile(fcTarget, new Path(targetTestRoot,""user/foo"")));"
94965,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,229,,"    Assert.assertTrue(""Delete should succeed"","
94966,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,238,,"        ""/internalDir/linkToDir2/foo"");"
94967,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,255,,"        ""/internalDir/internalDir2/linkToDir3/foo"");"
94968,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,280,,"    fcView.mkdir(fileContextTestHelper.getTestRootPath(fcView, ""/user/dirX""),"
94969,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,287,,"    fcView.mkdir(fileContextTestHelper.getTestRootPath(fcView, ""/user/dirX/dirY""),"
94970,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,405,,"        .assertPathDoesNotExist(fcView2, ""src should not exist after rename"","
94971,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,495,,"      Assert.assertTrue(""A mount should appear as symlink"", fs.isSymlink());"
94972,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/viewfs/ViewFsBaseTest.java,499,,"    fs = fileContextTestHelper.containsPath(fcView, ""/internalDir"", dirPaths);"
94973,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestFailoverController.java,149,,"    Mockito.doThrow(new HealthCheckFailedException(""Failed!""))"
94974,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestShellCommandFencer.java,211,,"    assertEquals(""a...f"", ShellCommandFencer.abbreviate(""abcdef"", 5));"
94975,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ha/TestZKFailoverController.java,117,,"    assertEquals(0, runFC(svc, ""-formatZK""));"
94976,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java,476,,"    MyGroupsProvider.mapping.put(""userA"", Arrays.asList(""groupA""));"
94977,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java,477,,"    MyGroupsProvider.mapping.put(""userB"", Arrays.asList(""groupB""));"
94978,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java,479,,"    HttpServer2 myServer = new HttpServer2.Builder().setName(""test"")"
94979,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestHttpServer.java,543,,"    Mockito.doReturn(null).when(request).getParameterValues(""dummy"");"
94980,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestSSLHttpServer.java,246,,"        readFromURL(new URL(baseUrl, SERVLET_PATH_ECHO + ""?a=b&c=d"")));"
94981,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestSSLHttpServerConfigs.java,171,,"          ""KeyStore password."");"
94982,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestSSLHttpServerConfigs.java,184,,"      testServerStart(SERVER_PWD, ""wrongPassword"", null);"
94983,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/http/TestSSLHttpServerConfigs.java,185,,"      Assert.fail(""Server should have failed to start with wrong "" +"
94984,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestArrayFile.java,137,,"      assertNotNull(""testArrayFileIteration error !!!"", writer);"
94985,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestArrayPrimitiveWritable.java,157,,"    assertEquals(""The int[] written by ObjectWritable as a non-compact array """
94986,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestBloomMapFile.java,261,,"      assertNotNull(""testBloomMapFileConstructors error !!!"", writer);"
94987,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestBoundedByteArrayOutputStream.java,47,,"    assertTrue(""Array Contents Mismatch"","
94988,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestBoundedByteArrayOutputStream.java,59,,"    assertTrue(""Writing beyond limit did not throw an exception"","
94989,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestDefaultStringifier.java,42,,"    conf.set(""io.serializations"", ""org.apache.hadoop.io.serializer.WritableSerialization"");"
94990,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestMapFile.java,433,,"        writer.append(new IntWritable(i), new Text(""Value:"" + i));"
94991,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestMapFile.java,551,,"  @SuppressWarnings(""deprecation"")"
94992,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestMapFile.java,653,,"      writer.append(new IntWritable(2), new Text(""value: "" + 1));"
94993,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFile.java,61,,"  @SuppressWarnings(""deprecation"")"
94994,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFile.java,226,,"    LOG.debug(""reading "" + count + "" records"");"
94995,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFile.java,283,,"    fs.delete(new Path(file+"".sorted""), true);"
94996,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFile.java,414,,"        LOG.info(""The original metadata:\n"" + theMetadata.toString());"
94997,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFile.java,415,,"        LOG.info(""The retrieved metadata:\n"" + aMetadata.toString());"
94998,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFile.java,416,,"        throw new RuntimeException(""metadata not match:  "" + 1);"
94999,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFileAppend.java,82,,"    writer.append(1L, ""one"");"
