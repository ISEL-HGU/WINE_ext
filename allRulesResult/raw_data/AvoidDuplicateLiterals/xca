52000,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java,1238,,"        assertFalse(EqualsBuilder.reflectionEquals(x1, x2, ""two""));"
52001,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java,1239,,"        assertFalse(EqualsBuilder.reflectionEquals(x1, x2, ""three""));"
52002,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java,58,,"        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', ""Test"", (short) 2), new TestFixture(2, 'c', ""Test"", (short) 2), testTransients);"
52003,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java,64,,"            new SubTestFixture(2, 'c', ""Test"", (short) 2, ""Same""),"
52004,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java,113,,"        @SuppressWarnings(""unused"")"
52005,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java,210,,"    @SuppressWarnings(""cast"") // cast is not really needed, keep for consistency"
52006,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java,499,,"        assertEquals((17 * 37 + 1) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, ""two""));"
52007,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java,500,,"        assertEquals((17 * 37 + 1) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, ""three""));"
52008,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java,70,,"                        ""Integer@8888["" + System.lineSeparator() + ""]"")"
52009,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java,78,,"                ""{\""a\"":\""hello\""}"","
52010,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java,265,,"                new ToStringBuilder(p).append(""name"", p.name)"
52011,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java,544,,"                new ToStringBuilder(base).append(""map"", map).toString());"
52012,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java,56,,"        assertEquals(baseStr + ""["" + System.lineSeparator() + ""]"", new ToStringBuilder(base).appendSuper(""Integer@8888["" + System.lineSeparator() + ""]"").toString());"
52013,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java,57,,"        assertEquals(baseStr + ""["" + System.lineSeparator() + ""  <null>"" + System.lineSeparator() + ""]"", new ToStringBuilder(base).appendSuper(""Integer@8888["" + System.lineSeparator() + ""  <null>"" + System.lineSeparator() + ""]"").toString());"
52014,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java,71,,"        assertEquals(baseStr + ""["" + System.lineSeparator() + ""  a=3"" + System.lineSeparator() + ""]"", new ToStringBuilder(base).append(""a"", i3).toString());"
52015,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,85,,"                   + ""  boolArray=<null>,"" + BR"
52016,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,86,,"                   + ""  charArray=<null>,"" + BR"
52017,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,87,,"                   + ""  doubleArray=<null>,"" + BR"
52018,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,88,,"                   + ""  intArray=<null>,"" + BR"
52019,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,89,,"                   + ""  longArray=<null>,"" + BR"
52020,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,90,,"                   + ""  stringArray=<null>"" + BR"
52021,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyleTest.java,104,,"                   + ""  },"" + BR"
52022,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/NoClassNameToStringStyleTest.java,56,,"        assertEquals(""[<null>]"", new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());"
52023,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java,57,,"        assertEquals(baseStr + ""[<null>]"", new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());"
52024,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java,69,,"        assertEquals(baseStr + ""[3]"", new ToStringBuilder(base).append(i3).toString());"
52025,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/RecursiveToStringStyleTest.java,56,,"        assertEquals(baseStr + ""[<null>]"", new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());"
52026,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java,57,,"        assertEquals(baseStr + ""[<null>]"", new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());"
52027,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java,56,,"        assertEquals(""<null>"", new ToStringBuilder(base).appendSuper(""<null>"").toString());"
52028,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java,58,,"        assertEquals(""hello"", new ToStringBuilder(base).appendSuper("""").append(""a"", ""hello"").toString());"
52029,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java,74,,"        assertEquals(baseStr + ""[%NULL%]"", new ToStringBuilder(base).appendSuper(""Integer@8888[%NULL%]"").toString());"
52030,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,54,,"        assertEquals(""<null>"", new ToStringBuilder(null).toString());"
52031,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,159,,"        assertEquals(baseString + ""[{<null>,5,{3,6}}]"", ToStringBuilder.reflectionToString(array));"
52032,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,168,,"        assertEquals(baseString + ""[{1,2,-3,4}]"", ToStringBuilder.reflectionToString(array));"
52033,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,204,,"        assertEquals(baseString + ""[{A,2,_,D}]"", ToStringBuilder.reflectionToString(array));"
52034,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,213,,"        assertEquals(baseString + ""[{1.0,2.9876,-3.00001,4.3}]"", ToStringBuilder.reflectionToString(array));"
52035,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,231,,"        assertEquals(baseString + ""[{true,false,false}]"", ToStringBuilder.reflectionToString(array));"
52036,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,242,,"        assertEquals(baseString + ""[{{1.0,2.29686},<null>,{NaN}}]"", ToStringBuilder.reflectionToString(array));"
52037,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,252,,"        assertEquals(baseString + ""[{{1,2},<null>,{5}}]"", ToStringBuilder.reflectionToString(array));"
52038,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,306,,"        assertEquals(baseString + ""[{{true,false},<null>,{false}}]"", ToStringBuilder.reflectionToString(array));"
52039,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,334,,"        assertEquals(baseString + ""[a=a]"", ToStringBuilder.reflectionToString(baseA));"
52040,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,344,,"        assertEquals(baseString + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB));"
52041,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,356,,"        @SuppressWarnings(""unused"")"
52042,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,597,,"        assertEquals(baseStr + ""[]"", new ToStringBuilder(base).appendSuper(""Integer@8888[]"").toString());"
52043,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,598,,"        assertEquals(baseStr + ""[<null>]"", new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());"
52044,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,598,,"        assertEquals(baseStr + ""[<null>]"", new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());"
52045,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,600,,"        assertEquals(baseStr + ""[a=hello]"", new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"", ""hello"").toString());"
52046,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,600,,"        assertEquals(baseStr + ""[a=hello]"", new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"", ""hello"").toString());"
52047,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,633,,"                new ToStringBuilder(base).append(""flags"", array).toString());"
52048,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,634,,"        assertEquals(baseStr + ""[flags=<null>]"","
52049,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,646,,"                new ToStringBuilder(base).append(""length"", array, false).toString());"
52050,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,673,,"        assertEquals(baseStr + ""[<size=4>]"", new ToStringBuilder(base).append(null, array, false).toString());"
52051,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,679,,"        assertEquals(baseStr + ""[values={1.0,2.9876,-3.00001,4.3}]"","
52052,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,680,,"                new ToStringBuilder(base).append(""values"", array).toString());"
52053,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,681,,"        assertEquals(baseStr + ""[values=<null>]"","
52054,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,692,,"        assertEquals(baseStr + ""[length=<size=4>]"","
52055,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,727,,"       assertEquals(baseStr + ""[values={1,2,-3,4}]"", new ToStringBuilder(base).append(""values"", array).toString());"
52056,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,858,,"        assertEquals(baseStr + ""[3]"", new ToStringBuilder(base).append(i3).toString());"
52057,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,860,,"        assertEquals(baseStr + ""[a=3]"", new ToStringBuilder(base).append(""a"", i3).toString());"
52058,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,861,,"        assertEquals(baseStr + ""[a=3,b=4]"", new ToStringBuilder(base).append(""a"", i3).append(""b"", i4).toString());"
52059,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,863,,"        assertEquals(baseStr + ""[a=<size=0>]"", new ToStringBuilder(base).append(""a"", new ArrayList<>(), false).toString());"
52060,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,866,,"        assertEquals(baseStr + ""[a={}]"", new ToStringBuilder(base).append(""a"", new HashMap<>(), true).toString());"
52061,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,1140,,"            this.toBaseString(instance1) + ""[staticInt=12345,staticString=staticString]"","
52062,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,159,,"        assertSame(t, factory.newThread(r), ""Wrong thread"");"
52063,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,93,,"        assertNull(ConcurrentUtils.extractCause(null), ""Non null result"");"
52064,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,101,,"        assertNull(ConcurrentUtils.extractCause(new ExecutionException(""Test"", null)), ""Non null result"");"
52065,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,112,,"        assertEquals(err, e, ""Wrong error"");"
52066,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,132,,"        assertSame(ex, cex.getCause(), ""Wrong cause"");"
52067,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,289,,"        @SuppressWarnings(""unchecked"")"
52068,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,395,,"        final String key = ""testKey"";"
52069,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,399,,"        assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, 0), ""Wrong result"");"
52070,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,400,,"        assertEquals(value, map.get(key), ""Wrong value in map"");"
52071,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java,89,,"        assertTrue(breaker.isClosed(), ""Not closed"");"
52072,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java,151,,"        assertTrue(open, ""Not open"");"
52073,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java,212,,"        assertThrows(NoSuchElementException.class, () -> res.getInitializer(""unknown""));"
52074,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,86,,"        listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), ""Day"", 4, 5));"
52075,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,57,,"            .addContextValue(""test1"", null)"
52076,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,58,,"            .addContextValue(""test2"", ""some value"")"
52077,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,58,,"            .addContextValue(""test2"", ""some value"")"
52078,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,59,,"            .addContextValue(""test Date"", new Date())"
52079,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,60,,"            .addContextValue(""test Nbr"", Integer.valueOf(5))"
52080,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,61,,"            .addContextValue(""test Poorly written obj"", new ObjectWithFaultyToString());"
52081,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,84,,"        exceptionContext.addContextValue(""test2"", ""different value"");"
52082,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java,116,,"        exceptionContext.setContextValue(""test2"", ""another"");"
52083,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java,47,,"        assertTrue(trace.contains(""ContextedException""));"
52084,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java,47,,"        assertTrue(trace.contains(""ContextedException""));"
52085,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java,292,,"        final IOException ioe = new IOException(""Unknown I/O error"");"
52086,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java,553,,"        assertEquals(""Odd Invocation: 1"", cause.getMessage());"
52087,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java,1386,,"                throw new IOException(""test"");"
52088,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/function/ObjectsTest.java,34,,"        assertSame(""foo"", Objects.requireNonNull(""foo""));"
52089,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/function/ObjectsTest.java,37,,"            fail(""Expected Exception"");"
52090,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/function/ObjectsTest.java,45,,"        assertSame(""foo"", Objects.requireNonNull(""foo"", ""bar""));"
52091,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java,40,,"                ""IllegalArgumentException expected for null input"");"
52092,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java,45,,"                ""IllegalArgumentException expected for empty input"");"
52093,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,353,,"        assertEquals(new BigDecimal(""1234.5""), NumberUtils.createBigDecimal(""1234.5""),"
52094,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,358,,"        this.testCreateBigDecimalFailure(""\b\t\n\f\r"");"
52095,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,360,,"        this.testCreateBigDecimalFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");"
52096,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,375,,"            ""createBigDecimal(\"""" + str + ""\"") should have failed."");"
52097,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,380,,"        assertEquals(new BigInteger(""12345""), NumberUtils.createBigInteger(""12345""), ""createBigInteger(String) failed"");"
52098,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,380,,"        assertEquals(new BigInteger(""12345""), NumberUtils.createBigInteger(""12345""), ""createBigInteger(String) failed"");"
52099,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,387,,"        assertEquals(new BigInteger(""255""), NumberUtils.createBigInteger(""0xff""), ""createBigInteger(String) failed"");"
52100,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,401,,"        assertEquals(new BigInteger(""+FFFFFFFFFFFFFFFF"", 16), NumberUtils.createBigInteger(""+0xFFFFFFFFFFFFFFFF""));"
52101,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,453,,"        assertEquals(Integer.decode(""+0xF""), NumberUtils.createInteger(""+0xF""));"
52102,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,471,,"        assertEquals(Long.decode(""+0xFFFFFFFF""), NumberUtils.createLong(""+0xFFFFFFFF""));"
52103,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,492,,"        assertEquals(Float.valueOf(""-1234.5""), NumberUtils.createNumber(""-1234.5""), ""createNumber(String) 7 failed"");"
52104,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,694,,"        final String[] zeros = {""0."", "".0"", ""0.0"", ""0""};"
52105,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,803,,"        assertFalse(NumberUtils.isDigits(""abc""), ""isDigits(String) neg 4 failed"");"
52106,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,1449,,"        assertEquals(1.2345d, NumberUtils.toDouble(""1.2345""), ""toDouble(String) 2 failed"");"
52107,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,1588,,"        assertEquals(""2352.00"","
52108,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,1606,,"        assertEquals(""23521.0000"","
52109,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,47,,"        final MutableObject<String> mutNumA = new MutableObject<>(""ALPHA"");"
52110,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java,55,,"            toString = ""(Integer)"";"
52111,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java,60,,"            toString = ""(double)"";"
52112,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java,70,,"            toString = ""(Object)"";"
52113,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,91,,"        assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, ""VALUE"").getDeclaringClass());"
52114,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,110,,"        assertThrows(NullPointerException.class, () -> FieldUtils.getField(null, ""none""));"
52115,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,542,,"                ""a null field name should cause an IllegalArgumentException"");"
52116,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,547,,"                ""an empty field name should cause an IllegalArgumentException"");"
52117,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,552,,"                ""a blank field name should cause an IllegalArgumentException"");"
52118,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,557,,"                ""a null target should cause an IllegalArgumentException"");"
52119,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,681,,"        final Field field = StaticContainer.class.getDeclaredField(""mutablePublic"");"
52120,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,682,,"        FieldUtils.writeStaticField(field, ""new"");"
52121,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,686,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""mutableProtected""), ""new""));"
52122,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,689,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""mutablePackage""), ""new""));"
52123,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,692,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""mutablePrivate""), ""new""));"
52124,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,695,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""IMMUTABLE_PUBLIC""), ""new""));"
52125,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,698,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""IMMUTABLE_PROTECTED""), ""new""));"
52126,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,701,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""IMMUTABLE_PACKAGE""), ""new""));"
52127,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,704,,"                () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(""IMMUTABLE_PRIVATE""), ""new""));"
52128,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,67,,"            return ""foo()"";"
52129,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,74,,"            return ""bar()"";"
52130,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,94,,"            return ""bar(Object)"";"
52131,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,113,,"        @SuppressWarnings(""unused"")"
52132,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,172,,"            return ""foo(Object)"";"
52133,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,202,,"            return ""Byte..."";"
52134,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,210,,"            return ""Short..."";"
52135,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,214,,"            return ""Boolean..."";"
52136,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,218,,"            return ""Float..."";"
52137,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,222,,"            return ""Double..."";"
52138,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,226,,"            return ""Integer..."";"
52139,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,230,,"            return ""Long..."";"
52140,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,234,,"            return ""Number..."";"
52141,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,238,,"            return ""Object..."";"
52142,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,242,,"            return ""String..."";"
52143,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,361,,"                ""varOverload"", (byte) 1, (byte) 2));"
52144,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,408,,"        assertEquals(""foo()"", MethodUtils.invokeMethod(testBean, ""foo"","
52145,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,441,,"                MethodUtils.invokeMethod(testBean, ""varOverloadEcho"", ""x"", ""y""));"
52146,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,498,,"                ""bar"", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));"
52147,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,523,,"                MethodUtils.invokeStaticMethod(TestBean.class, ""varOverloadEchoStatic"", ""x"", ""y""));"
52148,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,568,,"            final Method method = TestMutable.class.getMethod(""getValue"", element);"
52149,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,678,,"        final Method method = MethodUtils.getAccessibleMethod(StringParameterizedChild.class, ""consume"", String.class);"
52150,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,736,,"        assertEquals(""PublicChild"", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());"
52151,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,738,,"        assertTrue(methodsWithAnnotation[0].getName().endsWith(""AnnotatedMethod""));"
52152,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,793,,"        assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(""parentNotAnnotatedMethod""),"
52153,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,795,,"        assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(""doIt""), Annotated.class,"
52154,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,797,,"        assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(""parentProtectedAnnotatedMethod""),"
52155,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,799,,"        assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod(""privateAnnotatedMethod""),"
52156,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,801,,"        assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(""publicAnnotatedMethod""),"
52157,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,999,,"        assertEquals(""privateStringStuff()"", MethodUtils.invokeMethod(testBean, true, ""privateStringStuff""));"
52158,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,1025,,"        assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, ""testMethod""),"
52159,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java,1040,,"        assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, ""testMethod3"", Long.TYPE, Long.class),"
52160,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,799,,"                () -> String.format(""TypeUtils.isAssignable(%s, %s)"", arrayType, paramType));"
52161,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,908,,"       assertEquals(String.format(""? super %s"", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded));"
52162,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,63,,"        assertEquals(emf.format(new Object[] {""foo"", ""bar""}), ""Lower: foo Upper: BAR"");"
52163,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/FormattableUtilsTest.java,35,,"        assertEquals(""foo"", FormattableUtils.append(""foo"", new Formatter(), 0, -1, -1).toString());"
52164,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,44,,"            return ""foo"";"
52165,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,62,,"        sb.setNullText(""NULL"");"
52166,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,80,,"        sb.append(""bar"");"
52167,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,86,,"        sb.append(new StringBuffer(""baz""));"
52168,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,132,,"        assertEquals(""foobar"", sb.toString());"
52169,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,166,,"                ""append(char[], -1,) expected IndexOutOfBoundsException"");"
52170,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,171,,"                ""append(char[], 3,) expected IndexOutOfBoundsException"");"
52171,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,176,,"                ""append(char[],, -1) expected IndexOutOfBoundsException"");"
52172,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,181,,"                ""append(char[], 1, 3) expected IndexOutOfBoundsException"");"
52173,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,186,,"                ""append(char[], -1, 3) expected IndexOutOfBoundsException"");"
52174,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,191,,"                ""append(char[], 4, 0) expected IndexOutOfBoundsException"");"
52175,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,196,,"        sb.append(""abcbardef"", 3, 3);"
52176,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,492,,"        sb.appendln(""Hello %s"", ""Alice"");"
52177,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,825,,"        sb.setNullText(""null"");"
52178,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,978,,"        assertEquals(""foobarbaz"", sb.toString());"
52179,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,1104,,"        assertEquals(""foo,"", sb.toString());"
52180,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java,1185,,"        sb.append(""barbaz"");"
52181,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,84,,"        final StrBuilder sb7 = new StrBuilder(""foo"");"
52182,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,301,,"        sb.append(""Hello"");"
52183,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,427,,"        final StrBuilder sb = new StrBuilder(""abc"");"
52184,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,443,,"        sb.append(""junit"");"
52185,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,538,,"        assertThrows(IndexOutOfBoundsException.class, () -> new StrBuilder(""anything"").delete(2, 1));"
52186,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,543,,"        StrBuilder sb = new StrBuilder(""abcbccba"");"
52187,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,547,,"        assertEquals(""bcbccb"", sb.toString());"
52188,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,560,,"        StrBuilder sb = new StrBuilder(""abcba"");"
52189,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,631,,"        StrBuilder sb = new StrBuilder(""A0xA1A2yA3"");"
52190,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,637,,"        sb = new StrBuilder(""Ax1"");"
52191,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,742,,"        sb.replaceAll(""b"", ""xbx"");"
52192,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,810,,"        sb.replaceAll(A_NUMBER_MATCHER, ""***"");"
52193,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,898,,"        StrBuilder sb = new StrBuilder(""aaxaaaayaa"");"
52194,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,900,,"        assertEquals(""-x--y-"", sb.toString());"
52195,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,963,,"        assertEquals(""-xaaaayaa"", sb.toString());"
52196,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,983,,"        assertEquals(""-x--yaa"", sb.toString());"
52197,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1058,,"        assertEquals(""a b c"", sb.trim().toString());"
52198,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1102,,"       final StrBuilder sb = new StrBuilder (""hello goodbye"");"
52199,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1116,,"        assertEquals (""hello"", sb.subSequence(0, 5));"
52200,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1118,,"        assertEquals (""goodbye"", sb.subSequence(6, 13));"
52201,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1163,,"        final StrBuilder sb = new StrBuilder(""left right"");"
52202,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1217,,"        final StrBuilder sb = new StrBuilder(""abab"");"
52203,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1246,,"        sb = new StrBuilder(""xyzabc"");"
52204,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1413,,"        sb.append(""ab bd"");"
52205,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1818,,"        final StrBuilder sb = new StrBuilder(""1234567890"");"
52206,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1820,,"        writer.append(""Test "");"
52207,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java,1824,,"        assertEquals(""Test 1234567890"", writer.toString());"
52208,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java,45,,"        assertEquals(System.getProperty(""os.name""), StrLookup.systemPropertiesLookup().lookup(""os.name""));"
52209,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,47,,"        values.put(""animal"", ""quick brown fox"");"
52210,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,48,,"        values.put(""target"", ""lazy dog"");"
52211,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,61,,"        doTestReplace(""The quick brown fox jumps over the lazy dog."", ""The ${animal} jumps over the ${target}."", true);"
52212,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,149,,"        values.put(""critterType"", ""fox"");"
52213,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,368,,"        assertEquals(""The fox jumps over the lazy dog. 1234567890."","
52214,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,401,,"        map.put(""name"", ""commons"");"
52215,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java,401,,"        map.put(""name"", ""commons"");"
52216,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,62,,"        final String[] expected = {""a"", ""b"", ""c"", ""d;\""e"", ""f"", """", """", """"};"
52217,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,67,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52218,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,67,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52219,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,67,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52220,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,96,,"        final String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
52221,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,235,,"        final String input = ""a  b c"";"
52222,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,449,,"        tok.setIgnoredMatcher(StrMatcher.stringMatcher(""IGNORE""));"
52223,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java,622,,"        StrTokenizer tok = new StrTokenizer(""a b"");"
52224,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,56,,"        String input = ""Here is one line of text that is going to be wrapped after 20 columns."";"
52225,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,191,,"        assertEquals(""I Am Here 123"", WordUtils.capitalize(""i am here 123"") );"
52226,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,191,,"        assertEquals(""I Am Here 123"", WordUtils.capitalize(""i am here 123"") );"
52227,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,193,,"        assertEquals(""I Am HERE 123"", WordUtils.capitalize(""i am HERE 123"") );"
52228,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,194,,"        assertEquals(""I AM HERE 123"", WordUtils.capitalize(""I AM HERE 123"") );"
52229,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,207,,"        assertEquals(""I Am+Here-123"", WordUtils.capitalize(""I Am+Here-123"", chars) );"
52230,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,307,,"        assertEquals(""BJL"", WordUtils.initials(""Ben John Lee""));"
52231,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,307,,"        assertEquals(""BJL"", WordUtils.initials(""Ben John Lee""));"
52232,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,308,,"        assertEquals(""BJL"", WordUtils.initials(""   Ben \n   John\tLee\t""));"
52233,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,309,,"        assertEquals(""BJ"", WordUtils.initials(""Ben J.Lee""));"
52234,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,310,,"        assertEquals(""BJ.L"", WordUtils.initials("" Ben   John  . Lee""));"
52235,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,311,,"        assertEquals(""iah1"", WordUtils.initials(""i am here 123""));"
52236,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,323,,"        assertEquals(""S"", WordUtils.initials(""SJC"", array));"
52237,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,328,,"        assertEquals(""KO"", WordUtils.initials(""Kay O'Murphy"", array));"
52238,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java,421,,"        WordUtils.wrap(""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa """
52239,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java,35,,"        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { ""one"", ""two"" } });"
52240,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java,35,,"        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { ""one"", ""two"" } });"
52241,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,45,,"        assertEquals(""Test &"", neu.translate(""Test &""), ""Failed to ignore when last character is &"");"
52242,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java,36,,"        assertEquals(""\45"", result, ""Failed to unescape octal characters via the between method"");"
52243,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java,97,,"        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), ""yyyyMdH""));"
52244,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java,133,,"        assertEquals (""2005-01-01T12:00:00"", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));"
52245,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java,125,,"        assertEquals(truncatedDate, DateUtils.truncate(truncatedDate, calendarField), ""Truncating ""+ fdf.format(truncatedDate) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"");"
52246,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java,125,,"        assertEquals(truncatedDate, DateUtils.truncate(truncatedDate, calendarField), ""Truncating ""+ fdf.format(truncatedDate) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"");"
52247,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java,194,,"        targetDateDate = targetDayOfMonthDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
52248,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java,409,,"        roundedUpDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
52249,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java,415,,"        roundedUpDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
52250,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,384,,"        assertEquals(dateParser.parse(""January 1, 2002""),"
52251,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,390,,"        assertEquals(dateParser.parse(""December 1, 2001""),"
52252,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,393,,"        assertEquals(dateParser.parse(""February 16, 2002""),"
52253,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,399,,"        assertEquals(dateParser.parse(""February 13, 2002""),"
52254,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,405,,"        assertEquals(dateTimeParser.parse(""February 12, 2002 13:00:00.000""),"
52255,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,411,,"        assertEquals(dateTimeParser.parse(""February 12, 2002 12:35:00.000""),"
52256,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,417,,"        assertEquals(dateTimeParser.parse(""February 12, 2002 12:34:57.000""),"
52257,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,423,,"        assertEquals(dateTimeParser.parse(""February 3, 2002 12:00:00.000""),"
52258,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,429,,"        assertEquals(dateTimeParser.parse(""February 4, 2002 00:00:00.000""),"
52259,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,524,,"            assertEquals(dateTimeParser.parse(""March 31, 2003 00:00:00.000""),"
52260,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,526,,"                    ""ceiling MET date across DST change-over"");"
52261,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,549,,"            assertEquals(dateTimeParser.parse(""March 30, 2003 03:00:00.000""),"
52262,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,561,,"            assertEquals(dateTimeParser.parse(""March 30, 2003 04:00:00.000""),"
52263,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,786,,"        assertThrows(ParseException.class, () -> DateUtils.parseDate(""Wed, 09 Apr 2008 23:55:38 GMT"", ""EEE, dd MMM yyyy HH:mm:ss zzz""));"
52264,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,792,,"        DateUtils.parseDate(""Mi, 09 Apr 2008 23:55:38 GMT"", ""EEE, dd MMM yyyy HH:mm:ss zzz"");"
52265,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,859,,"        final String[] parsers = {""yyyy'-'DDD"", ""yyyy'-'MM'-'dd"", ""yyyyMMdd""};"
52266,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,859,,"        final String[] parsers = {""yyyy'-'DDD"", ""yyyy'-'MM'-'dd"", ""yyyyMMdd""};"
52267,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,859,,"        final String[] parsers = {""yyyy'-'DDD"", ""yyyy'-'MM'-'dd"", ""yyyyMMdd""};"
52268,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,917,,"        assertEquals(dateParser.parse(""February 1, 2002""),"
52269,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,929,,"        assertEquals(dateParser.parse(""November 16, 2001""),"
52270,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,937,,"        assertEquals(dateParser.parse(""November 18, 2001""),"
52271,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,943,,"        assertEquals(dateTimeParser.parse(""November 18, 2001 1:00:00.000""),"
52272,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,949,,"        assertEquals(dateTimeParser.parse(""November 18, 2001 1:23:00.000""),"
52273,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,955,,"        assertEquals(dateTimeParser.parse(""November 18, 2001 1:23:11.000""),"
52274,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,958,,"        assertEquals(dateTimeParser.parse(""February 3, 2002 00:00:00.000""),"
52275,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,1057,,"            assertEquals(dateTimeParser.parse(""March 30, 2003 00:00:00.000""),"
52276,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,1059,,"                    ""round MET date across DST change-over"");"
52277,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,1487,,"                    ""truncate MET date across DST change-over"");"
52278,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java,124,,"                             new int[] { 2006, 2, 10, 0, 0, 0 }, ""MM dd"");"
52279,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java,212,,"        assertEquals(""0000"", DurationFormatUtils.formatDuration(duration, ""SSSS""));"
52280,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java,444,,"        assertEquals(""03/06"", DurationFormatUtils.formatPeriod(time1970, time, ""yy/MM""));"
52281,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,139,,"        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
52282,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,140,,"        final FastDateFormat format2 = FastDateFormat.getInstance(""MM-DD-yyyy"");"
52283,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,163,,"    @DefaultTimeZone(""America/New_York"")"
52284,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,168,,"                TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
52285,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java,46,,"                Arguments.of(""z yyyy"", ""GMT 2010"",       Locale.UK, true), // no offset specified, but this is allowed as a TimeZone name"
52286,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java,184,,"    @MethodSource(""data"")"
52287,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java,47,,"                NEW_YORK, ""-05"", ""-0500"", ""-05:00"");"
52288,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java,47,,"                NEW_YORK, ""-05"", ""-0500"", ""-05:00"");"
52289,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java,63,,"    private static final TimeZone GMT = TimeZone.getTimeZone(""GMT"");"
52290,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java,288,,"        assertEquals(splitStr.length(), 12, ""Formatted split string not the correct length"");"
52291,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java,42,,"        ImmutablePair<Integer, String> oldPair = new ImmutablePair<>(0, ""foo"");"
52292,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java,54,,"        ImmutablePair<Object, String> oldPair2 = new ImmutablePair<>(null, ""bar"");"
52293,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,41,,"        final ImmutableTriple<Integer, String, Boolean> triple = new ImmutableTriple<>(0, ""foo"", Boolean.TRUE);"
52294,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,48,,"        final ImmutableTriple<Object, String, Integer> triple2 = new ImmutableTriple<>(null, ""bar"", 42);"
52295,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,131,,"        assertEquals(""(null,two,null)"", ImmutableTriple.of(null, ""two"", null).toString());"
52296,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java,132,,"        assertEquals(""(one,null,null)"", ImmutableTriple.of(""one"", null, null).toString());"
52297,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutablePairTest.java,36,,"        MutablePair<Integer, String> oldPair = new MutablePair<>(0, ""foo"");"
52298,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutablePairTest.java,48,,"        MutablePair<Object, String> oldPair2 = new MutablePair<>(null, ""bar"");"
52299,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,33,,"        final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<>(0, ""foo"", Boolean.FALSE);"
52300,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,37,,"        final MutableTriple<Object, String, String> triple2 = new MutableTriple<>(null, ""bar"", ""hello"");"
52301,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,37,,"        final MutableTriple<Object, String, String> triple2 = new MutableTriple<>(null, ""bar"", ""hello"");"
52302,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,66,,"        assertEquals(MutableTriple.of(null, ""foo"", ""baz""), MutableTriple.of(null, ""foo"", ""baz""));"
52303,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,104,,"        assertEquals(""(null,two,null)"", MutableTriple.of(null, ""two"", null).toString());"
52304,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java,105,,"        assertEquals(""(one,null,null)"", MutableTriple.of(""one"", null, null).toString());"
52305,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/PairTest.java,58,,"        final Pair<Integer, String> pair = ImmutablePair.of(0, ""foo"");"
52306,./TargetProjects/commons-lang/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java,75,,"        final Triple<Integer, String, Boolean> triple = ImmutableTriple.of(0, ""foo"", Boolean.TRUE);"
52307,./TargetProjects/commons-logging/src/main/java/org/apache/commons/logging/LogFactory.java,1385,,"                                          "" with priority "" + priority);"
52308,./TargetProjects/commons-logging/src/main/java/org/apache/commons/logging/impl/LogFactoryImpl.java,1022,,"                    logDiagnostic(""The log adapter '"" + logAdapterClassName + ""' is not available via classloader "" +"
52309,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/BasicOperationsTestCase.java,76,,"            log.trace(""Hello, Mum"");"
52310,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/log4j/StandardTests.java,175,,"        assertEquals(""Exception data incorrect"", ev.throwable!=null, thrown);"
52311,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/simple/CustomConfigTestCase.java,66,,"    { ""debug"", ""info"", ""warn"", ""error"", ""fatal"" };"
52312,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/simple/CustomConfigTestCase.java,66,,"    { ""debug"", ""info"", ""warn"", ""error"", ""fatal"" };"
52313,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/simple/CustomConfigTestCase.java,66,,"    { ""debug"", ""info"", ""warn"", ""error"", ""fatal"" };"
52314,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/simple/CustomConfigTestCase.java,66,,"    { ""debug"", ""info"", ""warn"", ""error"", ""fatal"" };"
52315,./TargetProjects/commons-logging/src/test/java/org/apache/commons/logging/simple/CustomConfigTestCase.java,66,,"    { ""debug"", ""info"", ""warn"", ""error"", ""fatal"" };"
52316,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/MathArraysTest.java,193,,"            Assert.fail(""an exception should have been thrown"");"
52317,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/MathArraysTest.java,335,,"            Assert.fail(""Expecting NullPointerException"");"
52318,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/MathArraysTest.java,640,,"            Assert.fail(""Expecting MathIllegalArgumentException"");"
52319,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,80,,"             new DfpDec(field, ""0.12345678901234568""),"
52320,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,100,,"             new DfpDec(field, ""1.2345678901234568""),"
52321,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,120,,"             new DfpDec(field, ""12.345678901234568""),"
52322,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,140,,"             new DfpDec(field, ""123.45678901234568""),"
52323,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,162,,"        test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.9"")),"
52324,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,170,,"        test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.99999999"")),"
52325,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,178,,"             new DfpDec(field, ""12345678901234568""),"
52326,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,181,,"        test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.0001"")),"
52327,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,186,,"             new DfpDec(field, ""-12345678901234568""),"
52328,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,189,,"        test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.0001"")),"
52329,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,227,,"        test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.5000"")),"
52330,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,239,,"        test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.5000"")),"
52331,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,378,,"        test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.9"")),"
52332,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,386,,"        test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.99999999"")),"
52333,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,398,,"             new Decimal10(field, ""1234567891""),"
52334,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpDecTest.java,402,,"             new Decimal10(field, ""-1234567891""),"
52335,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpMathTest.java,233,,"        test(DfpMath.pow(factory.newDfp(""0.5""), pinf),"
52336,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpMathTest.java,273,,"        test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""1e30"")),"
52337,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpMathTest.java,277,,"        test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""1e-30"")),"
52338,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpMathTest.java,309,,"        test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""-1e30"")),"
52339,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpMathTest.java,313,,"        test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""-1e-30"")),"
52340,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,143,,"             field.newDfp(""1.0000000000000001""),"
52341,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,182,,"        test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""-1e131052"")), // overflow on add"
52342,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,198,,"        test(field.newDfp(""1e-131072"").add(field.newDfp(""1e-131072"")), // underflow on add"
52343,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,274,,"        test(pinf.add(field.newDfp(""-1e131071"")), // adding infinities"
52344,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,278,,"        test(pinf.add(field.newDfp(""1e131071"")), // adding infinities"
52345,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,334,,"        test(field.newDfp(""12345678123456781234"").add(field.newDfp(""0.12345678123456781234"")),"
52346,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,377,,"        if (op.equals(""equal"")) {"
52347,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,383,,"        if (op.equals(""unequal"")) {"
52348,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,389,,"        if (op.equals(""lessThan"")) {"
52349,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,395,,"        if (op.equals(""greaterThan"")) {"
52350,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,425,,"        cmptst(field.newDfp(""0""), field.newDfp(""1e-131078""), ""equal"", false, 10); // 0 == 1e-131078"
52351,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,434,,"        cmptst(field.newDfp(""0""), field.newDfp(""1e+131071""), ""equal"", false, 11); // 0 == 1e+131071"
52352,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,459,,"        cmptst(field.newDfp(""1e20""), field.newDfp(""1.0000000000000001""), ""equal"", false, 24);"
52353,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,464,,"        cmptst(field.newDfp(""0.000001""), field.newDfp(""1e-6""), ""equal"", true, 25);"
52354,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,464,,"        cmptst(field.newDfp(""0.000001""), field.newDfp(""1e-6""), ""equal"", true, 25);"
52355,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,881,,"        test(field.newDfp(""1e-65539"").multiply(field.newDfp(""1e-65539"")),"
52356,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,938,,"             field.newDfp(""10000""),"
52357,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1242,,"        Assert.assertEquals(""toString #3"", ""NaN"", nan.toString());"
52358,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1257,,"        test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.9"")),"
52359,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1265,,"        test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.99999999"")),"
52360,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1273,,"             field.newDfp(""12345678901234567891""),"
52361,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1281,,"             field.newDfp(""-12345678901234567891""),"
52362,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1295,,"        test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),"
52363,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1303,,"        test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),"
52364,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/dfp/DfpTest.java,1382,,"             field.newDfp(""1234""),"
52365,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathTest.java,75,,"            assertEquals(""min("" + pair[0] + "", "" + pair[1] + "")"","
52366,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathTest.java,83,,"            assertEquals(""max("" + pair[0] + "", "" + pair[1] + "")"","
52367,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathTest.java,276,,"        assertTrue(""log() had errors in excess of "" + MAX_ERROR_ULP + "" ULP"", maxerrulp < MAX_ERROR_ULP);"
52368,./TargetProjects/commons-math/commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathTest.java,1552,,"                    Assert.fail(""an exception should have been thrown"");"
52369,./TargetProjects/commons-math/commons-math-legacy-exception/src/test/java/org/apache/commons/math4/legacy/exception/NotFiniteNumberExceptionTest.java,30,,"            Assert.fail(""an exception should have been thrown"");"
52370,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/TestUtils.java,295,,"                    "" x "" + observed.getColumnDimension());"
52371,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/TestUtils.java,354,,"                out.append("" differ. "");"
52372,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/TestUtils.java,355,,"                out.append("" expected = "");"
52373,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/TestUtils.java,357,,"                out.append("" observed = "");"
52374,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,159,,"        referenceRules.put(""d(f*g)/dx"",      ""f * dg/dx + df/dx * g"");"
52375,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,163,,"        referenceRules.put(""d2(f*g)/dx2"",    ""f * d2g/dx2 + 2 * df/dx * dg/dx + d2f/dx2 * g"");"
52376,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,173,,"        referenceRules.put(""d3(f*g)/dx3"",    ""f * d3g/dx3 +"" +"
52377,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,229,,"                            rule.append(term[0]).append("" * "");"
52378,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,249,,"        referenceRules.put(""(f(g))"",              ""(f(g))"");"
52379,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,250,,"        referenceRules.put(""d(f(g))/dx"",          ""d(f(g))/dg * dg/dx"");"
52380,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,254,,"        referenceRules.put(""d2(f(g))/dx2"",        ""d2(f(g))/dg2 * dg/dx * dg/dx + d(f(g))/dg * d2g/dx2"");"
52381,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,264,,"        referenceRules.put(""d3(f(g))/dx3"",        ""d3(f(g))/dg3 * dg/dx * dg/dx * dg/dx +"" +"
52382,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/differentiation/DSCompilerTest.java,296,,"        referenceRules.put(""d4(f(g))/dx4"",        ""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dx +"" +"
52383,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/integration/SimpsonIntegratorTest.java,183,,"        Assert.assertEquals(""Result"", expected, result, tolerance);"
52384,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatingFunctionTest.java,52,,"            Assert.fail(""an exception should have been thrown"");"
52385,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/BicubicInterpolatorTest.java,50,,"            Assert.fail(""an exception should have been thrown"");"
52386,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/TricubicInterpolatingFunctionTest.java,55,,"            Assert.fail(""an exception should have been thrown"");"
52387,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/analysis/interpolation/TricubicInterpolatorTest.java,46,,"            Assert.fail(""an exception should have been thrown"");"
52388,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/genetics/UniformCrossoverTest.java,34,,"    @SuppressWarnings(""boxing"")"
52389,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,179,,"            Assert.fail(""Expecting illegalArgumentException"");"
52390,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,192,,"        TestUtils.assertEquals(""inverse multiply"",m.multiply(mInv),"
52391,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,196,,"        TestUtils.assertEquals(""identity multiply"",m.multiply(identity),"
52392,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,392,,"            Assert.fail(""expecting OutOfRangeException"");"
52393,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,410,,"            Assert.fail(""Expecting OutOfRangeException"");"
52394,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,478,,"                Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
52395,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/Array2DRowRealMatrixTest.java,651,,"            Assert.fail(""Expecting MatrixDimensionMismatchException"");"
52396,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,308,,"            Assert.fail(""MathIllegalArgumentException expected"");"
52397,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,396,,"            Assert.fail(""OutOfRangeException expected"");"
52398,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,460,,"        checkArray(""compare vectors"" ,result_mapAdd,v_mapAdd.toArray());"
52399,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,525,,"        checkArray(""compare vect"" ,v_add.toArray(),result_add);"
52400,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,561,,"        Assert.assertEquals(""compare val "",Dfp25.of(32), dot);"
52401,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,862,,"                    Assert.assertTrue(""entry "" + i + ""has not been visited"","
52402,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayFieldVectorTest.java,862,,"                    Assert.assertTrue(""entry "" + i + ""has not been visited"","
52403,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayRealVectorTest.java,43,,"        Assert.assertEquals(""testData len"", 0, v0.getDimension());"
52404,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayRealVectorTest.java,47,,"        Assert.assertEquals(""testData is 0.0 "", 0.0, v1.getEntry(6), 0);"
52405,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayRealVectorTest.java,51,,"        Assert.assertEquals(""testData is 1.23 "", 1.23, v2.getEntry(4), 0);"
52406,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/ArrayRealVectorTest.java,81,,"        Assert.assertEquals(""testData is 9.0 "", 9.0, v5_i.getEntry(8), 0);"
52407,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BigRealTest.java,90,,"        BigReal a = new BigReal(""1.2345678"");"
52408,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockFieldMatrixTest.java,217,,"            Assert.fail(""Expecting illegalArgumentException"");"
52409,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockFieldMatrixTest.java,491,,"            Assert.fail(""expecting OutOfRangeException"");"
52410,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockFieldMatrixTest.java,509,,"            Assert.fail (""Expecting OutOfRangeException"");"
52411,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockFieldMatrixTest.java,782,,"            Assert.fail(""Expecting MatrixDimensionMismatchException"");"
52412,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockRealMatrixTest.java,179,,"            Assert.fail(""Expecting illegalArgumentException"");"
52413,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockRealMatrixTest.java,437,,"            Assert.fail(""expecting OutOfRangeException"");"
52414,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockRealMatrixTest.java,455,,"            Assert.fail (""Expecting OutOfRangeException"");"
52415,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockRealMatrixTest.java,523,,"                Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
52416,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/BlockRealMatrixTest.java,695,,"            Assert.fail(""Expecting MatrixDimensionMismatchException"");"
52417,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/EigenSolverTest.java,46,,"            Assert.fail(""an exception should have been thrown"");"
52418,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/FieldLUSolverTest.java,87,,"            Assert.fail(""an exception should have been thrown"");"
52419,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/FieldMatrixImplTest.java,158,,"            Assert.fail(""Expecting illegalArgumentException"");"
52420,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/FieldMatrixImplTest.java,350,,"            Assert.fail(""expecting OutOfRangeException"");"
52421,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/FieldMatrixImplTest.java,368,,"            Assert.fail (""Expecting OutOfRangeException"");"
52422,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/FieldMatrixImplTest.java,623,,"            Assert.fail(""Expecting MatrixDimensionMismatchException"");"
52423,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/LUSolverTest.java,80,,"            Assert.fail(""an exception should have been thrown"");"
52424,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/MatrixUtilsTest.java,73,,"            Assert.fail(""Expecting MathIllegalArgumentException"");"
52425,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/MatrixUtilsTest.java,85,,"            Assert.fail(""Expecting NullArgumentException"");"
52426,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/QRSolverTest.java,78,,"            Assert.fail(""an exception should have been thrown"");"
52427,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RRQRSolverTest.java,78,,"            Assert.fail(""an exception should have been thrown"");"
52428,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealMatrixFormatAbstractTest.java,57,,"            ""{{1""    + getDecimalCharacter() +"
52429,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealMatrixFormatAbstractTest.java,59,,"            ""43,1"" + getDecimalCharacter() +"
52430,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealMatrixFormatAbstractTest.java,60,,"            ""63},{2"" + getDecimalCharacter() +"
52431,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealMatrixFormatAbstractTest.java,61,,"            ""46,2"" + getDecimalCharacter() +"
52432,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealMatrixFormatAbstractTest.java,63,,"            ""66}}"";"
52433,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealMatrixFormatAbstractTest.java,231,,"            ""6333}}"";"
52434,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorAbstractTest.java,202,,"            Assert.assertEquals(""entry "" + i, data[i], v.getEntry(i), 0d);"
52435,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorAbstractTest.java,317,,"            final String msg = message + "", entry #"" + i;"
52436,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorAbstractTest.java,488,,"                throw new AssertionError(""unexpected value"");"
52437,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorAbstractTest.java,512,,"                final String msg = ""entry #""+i+"", left = ""+data1[i]+"", right = "" + data2[i];"
52438,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorAbstractTest.java,1541,,"                    Assert.assertTrue(""entry "" + i + ""has not been visited"","
52439,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorFormatAbstractTest.java,59,,"            ""63}"";"
52440,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorFormatAbstractTest.java,203,,"            ""4343; 1"" + getDecimalCharacter() +"
52441,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorFormatAbstractTest.java,204,,"            ""6333}"";"
52442,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorTest.java,52,,"    @Ignore(""Abstract class RealVector does not implement getSubvector(int, int)"")"
52443,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/RealVectorTest.java,87,,"    @Ignore(""Abstract class RealVector does not implement setSubvector(int, RealVector)"")"
52444,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,184,,"            Assert.fail(""Expecting illegalArgumentException"");"
52445,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,197,,"        assertClose(""inverse multiply"", m.multiply(mInv), identity,"
52446,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,203,,"        assertClose(""identity multiply"", m.multiply(identity), m,"
52447,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,305,,"            Assert.fail(""expecting MathIllegalArgumentException"");"
52448,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,344,,"            Assert.fail(""expecting OutOfRangeException"");"
52449,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldMatrixTest.java,362,,"            Assert.fail(""Expecting OutOfRangeException"");"
52450,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldVectorTest.java,60,,"        Assert.assertArrayEquals(""compare vectors"" ,result_mapAdd,v_mapAdd.toArray());"
52451,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldVectorTest.java,125,,"        Assert.assertArrayEquals(""compare vect"" ,v_add.toArray(),result_add);"
52452,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldVectorTest.java,161,,"        Assert.assertEquals(""compare val "",Dfp25.of(32), dot);"
52453,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldVectorTest.java,415,,"                    Assert.assertTrue(""entry "" + i + ""has not been visited"","
52454,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseFieldVectorTest.java,415,,"                    Assert.assertTrue(""entry "" + i + ""has not been visited"","
52455,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,181,,"            Assert.fail(""Expecting illegalArgumentException"");"
52456,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,194,,"        assertClose(""inverse multiply"", m.multiply(mInv), identity,"
52457,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,200,,"        assertClose(""identity multiply"", m.multiply(identity), m,"
52458,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,302,,"            Assert.fail(""expecting MathIllegalArgumentException"");"
52459,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,341,,"            Assert.fail(""expecting OutOfRangeException"");"
52460,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealMatrixTest.java,359,,"            Assert.fail(""Expecting OutOfRangeException"");"
52461,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealVectorTest.java,60,,"        Assert.assertEquals(""testData len"", 0, v0.getDimension());"
52462,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/linear/SparseRealVectorTest.java,64,,"        Assert.assertEquals(""testData is 0.0 "", 0.0, v1.getEntry(6), 0);"
52463,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/ode/nonstiff/AbstractEmbeddedRungeKuttaFieldIntegratorTest.java,162,,"            Assert.fail(""an exception should have been thrown"");"
52464,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/ode/nonstiff/EmbeddedRungeKuttaFieldIntegratorAbstractTest.java,162,,"            Assert.fail(""an exception should have been thrown"");"
52465,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/ode/nonstiff/HighamHall54IntegratorTest.java,64,,"        Assert.fail(""an exception should have been thrown"");"
52466,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java,148,,"    @Ignore(""See MATH-1552"")@Test"
52467,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java,81,,"        Assert.assertTrue(""nEval="" + nEval, nEval > 60);"
52468,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java,233,,"    @Ignore(""See MATH-1552"")@Test"
52469,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/random/HaltonSequenceGeneratorTest.java,84,,"            Assert.fail(""an exception should have been thrown"");"
52470,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/random/SobolSequenceGeneratorTest.java,63,,"            Assert.fail(""an exception should have been thrown"");"
52471,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/FrequencyTest.java,67,,"        fString.addValue(""one"");"
52472,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/StatUtilsTest.java,124,,"            Assert.fail(""null is not a valid data array."");"
52473,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/SummaryStatisticsTest.java,195,,"        Assert.assertTrue(""empty instances should be equal"", t.equals(u));"
52474,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/descriptive/rank/PercentileTest.java,216,,"            Assert.fail(""Expecting MathIllegalArgumentException"");"
52475,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/ChiSquareTestTest.java,48,,"        Assert.assertEquals(""chi-square p-value"", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);"
52476,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/ChiSquareTestTest.java,52,,"        Assert.assertEquals( ""chi-square test statistic"", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);"
52477,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/GTestTest.java,50,,"        Assert.assertEquals(""G test statistic"","
52478,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/GTestTest.java,53,,"        Assert.assertEquals(""g-Test p-value"", 0.55483, p_gtgf, 1E-5);"
52479,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/InferenceTestUtilsTest.java,51,,"        Assert.assertEquals(""chi-square p-value"", 0.904837418036, InferenceTestUtils.chiSquareTest(expected, observed), 1E-10);"
52480,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/InferenceTestUtilsTest.java,55,,"        Assert.assertEquals( ""chi-square test statistic"", 9.023307936427388, InferenceTestUtils.chiSquare(expected1, observed1), 1E-10);"
52481,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/InferenceTestUtilsTest.java,62,,"            Assert.fail(""alpha out of range, OutOfRangeException expected"");"
52482,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/OneWayAnovaTest.java,93,,"        Assert.assertEquals(""ANOVA P-value"", 6.959446E-06,"
52483,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/TTestTest.java,147,,"            Assert.fail(""alpha out of range, OutOfRangeException expected"");"
52484,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/inference/TTestTest.java,208,,"            Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
52485,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/MillerUpdatingRegressionTest.java,95,,"            Assert.fail(""Should throw MathIllegalArgumentException"");"
52486,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/MillerUpdatingRegressionTest.java,117,,"            Assert.fail(""Should throw MathIllegalArgumentException [NOINTERCEPT]"");"
52487,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,226,,"        Assert.assertEquals(""intercept"", regression.getIntercept(), fullReg.getParameterEstimate(0), 1.0e-16);"
52488,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,228,,"        Assert.assertEquals(""slope"", regression.getSlope(), fullReg.getParameterEstimate(1), 1.0e-16);"
52489,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,229,,"        Assert.assertEquals(""slope std err"",regression.getSlopeStdErr(), fullReg.getStdErrorOfEstimate(1),1.0E-16);"
52490,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,230,,"        Assert.assertEquals(""number of observations"",regression.getN(), fullReg.getN());"
52491,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,231,,"        Assert.assertEquals(""r-square"",regression.getRSquare(), fullReg.getRSquared(), 1.0E-16);"
52492,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,232,,"        Assert.assertEquals(""SSR"", regression.getRegressionSumSquares(), fullReg.getRegressionSumSquares() ,1.0E-16);"
52493,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,233,,"        Assert.assertEquals(""MSE"", regression.getMeanSquareError(), fullReg.getMeanSquareError() ,1.0E-16);"
52494,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,234,,"        Assert.assertEquals(""SSE"", regression.getSumSquaredErrors(), fullReg.getErrorSumSquares() ,1.0E-16);"
52495,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,401,,"        Assert.assertEquals(""std err intercept"", 0.232818234301152,"
52496,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,510,,"        Assert.assertEquals(""significance"", 4.596e-07,"
52497,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegressionTest.java,512,,"        Assert.assertEquals(""slope conf interval half-width"", 0.0270713794287,"
52498,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/util/ComplexFormatAbstractTest.java,85,,"        String expected = ""1"" + getDecimalCharacter() + ""23 + 1"" + getDecimalCharacter() + ""43i"";"
52499,./TargetProjects/commons-math/commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/util/ComplexFormatAbstractTest.java,93,,"        String expected = ""1"" + getDecimalCharacter() + ""2323232323 + 1"" + getDecimalCharacter() + ""4343434343i"";"
52500,./TargetProjects/commons-math/commons-math-neuralnet/src/test/java/org/apache/commons/math4/neuralnet/twod/NeuronSquareMesh2DTest.java,715,,"            Assert.fail(""exception expected"");"
52501,./TargetProjects/commons-math/commons-math-transform/src/test/java/org/apache/commons/math4/transform/FastFourierTransformerTest.java,58,,"                        "": IllegalArgumentException was expected"");"
52502,./TargetProjects/commons-net/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java,48,,"    @SuppressWarnings(""resource"") // Factory method."
52503,./TargetProjects/commons-net/src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java,61,,"    static final String FILE_LIST_REGEX = ""\\S+\\s+"" + // volume"
52504,./TargetProjects/commons-net/src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java,82,,"    static final String MEMBER_LIST_REGEX = ""(\\S+)\\s+"" + // name"
52505,./TargetProjects/commons-net/src/main/java/org/apache/commons/net/util/SubnetUtils.java,211,,"                .append("" Netmask: ["").append(getNetmask()).append(""]\n"")"
52506,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,31,,"        assertTrue(info.isInRange(""192.168.0.1""));"
52507,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,32,,"        assertTrue(info.isInRange(""192.168.0.2""));"
52508,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,58,,"        assertEquals(""0.0.0.0"", info.getNetmask());"
52509,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,208,,"        assertEquals(""255.255.255.255"", info.getNetmask());"
52510,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,239,,"        final SubnetUtils utils = new SubnetUtils(""0.0.0.0/0"");"
52511,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,331,,"        final String previousAddresses[] = new String[] { ""192.168.0.0"", ""192.168.0.0"", ""192.168.0.0"","
52512,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,353,,"        final String address = ""192.168.15.7"";"
52513,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/SubnetUtilsTest.java,356,,"        final String netwk[] = new String[] { ""192.168.15.4"", ""192.168.15.6"", ""192.168.15.7"" };"
52514,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/FTPClientConfigTest.java,96,,"            new SimpleDateFormat(""MMM dd, yyyy"", Locale.ENGLISH);"
52515,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java,100,,"        final FTPClient client = new PassiveNatWorkAroundLocalClient(""8.8.8.8"");"
52516,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java,101,,"        client._parsePassiveModeReply(""227 Entering Passive Mode (172,16,204,138,192,22)."");"
52517,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java,264,,"        testMdtmCalendar(""/file.txt"");"
52518,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java,110,,"        checkShortParse(""Feb 29th 2000"", server, input, expected);"
52519,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java,300,,"            fail(""Expected AssertionFailedError"");"
52520,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java,150,,"            assertNotNull(""Failed to parse "" + test, f);"
52521,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java,196,,"        assertNotNull(""Could not parse entry."", file);"
52522,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java,245,,"        assertNotNull(""Could not parse entry"", file);"
52523,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java,246,,"        assertEquals(""10 years and under"", file.getName());"
52524,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java,249,,"        assertNotNull(""Could not parse time"",timestamp);"
52525,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java,284,,"        assertNotNull(""Could not parse entry."", dir);"
52526,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java,124,,"            assertEquals(""Type of ""+ test, type, FTPFile.DIRECTORY_TYPE);"
52527,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java,208,,"        assertEquals(""user"", f.getUser());"
52528,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java,209,,"        assertEquals(""group"", f.getGroup());"
52529,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java,307,,"        assertNotNull(""Could not parse entry."", f);"
52530,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java,313,,"        assertEquals(""zxbox"", f.getName());"
52531,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java,198,,"        assertEquals(""Tue Jun 02 07:32:04 1998"","
52532,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java,107,,"        final String test = ""Hello World!""+CRLF+""..text""+EOM;"
52533,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/io/ToNetASCIIInputStreamTest.java,78,,"        byteTest(true, ""a\nb"", ""a\r\nb"");"
52534,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/io/ToNetASCIIInputStreamTest.java,80,,"        byteTest(true, ""Hello\nWorld\n"", ""Hello\r\nWorld\r\n"");"
52535,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java,77,,"        header = new SimpleSMTPHeader(""from@here.invalid"", ""to@there.invalid"", ""Test email"");"
52536,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java,175,,"                        client.connect(""127.0.0.1"", port);"
52537,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/tftp/TFTPServerPathTest.java,61,,"            tftp.receiveFile(file.getName(), TFTP.BINARY_MODE, output, ""localhost"", SERVER_PORT);"
52538,./TargetProjects/commons-net/src/test/java/org/apache/commons/net/util/Base64Test.java,76,,"        fail(""Not yet implemented"");"
52539,./TargetProjects/commons-numbers/commons-numbers-combinatorics/src/test/java/org/apache/commons/numbers/combinatorics/BinomialCoefficientTest.java,57,,"                        n + "" choose "" + k"
52540,./TargetProjects/commons-numbers/commons-numbers-complex/src/test/java/org/apache/commons/numbers/complex/CStandardTest.java,743,,"                assertOperation(z, w, Complex::multiply, ""*"", Complex::isInfinite, ""Inf"");"
52541,./TargetProjects/commons-numbers/commons-numbers-complex/src/test/java/org/apache/commons/numbers/complex/CStandardTest.java,753,,"                assertOperation(z, w, Complex::multiply, ""*"", Complex::isNaN, ""NaN"");"
52542,./TargetProjects/commons-numbers/commons-numbers-complex/src/test/java/org/apache/commons/numbers/complex/ComplexTest.java,907,,"        Assertions.assertEquals(0.0, z2.getImaginary(), ""Expected no sign preservation"");"
52543,./TargetProjects/commons-numbers/commons-numbers-complex/src/test/java/org/apache/commons/numbers/complex/ComplexTest.java,1398,,"                        Assertions.assertEquals(ya, za, () -> c + "" divideImaginary "" + arg + "": real"");"
52544,./TargetProjects/commons-numbers/commons-numbers-core/src/test/java/org/apache/commons/numbers/core/ArithmeticUtilsTest.java,63,,"            Assertions.fail(""expecting ArithmeticException"");"
52545,./TargetProjects/commons-numbers/commons-numbers-core/src/test/java/org/apache/commons/numbers/core/ArithmeticUtilsTest.java,184,,"            Assertions.fail(""Expecting ArithmeticException"");"
52546,./TargetProjects/commons-numbers/commons-numbers-core/src/test/java/org/apache/commons/numbers/core/ArithmeticUtilsTest.java,263,,"            Assertions.fail(""Expecting IllegalArgumentException"");"
52547,./TargetProjects/commons-numbers/commons-numbers-core/src/test/java/org/apache/commons/numbers/core/ArithmeticUtilsTest.java,359,,"            Assertions.assertEquals(i % 2 == 0 ? 1 : -1, pow, ""i: "" + i);"
52548,./TargetProjects/commons-numbers/commons-numbers-examples/examples-jmh/src/test/java/org/apache/commons/numbers/examples/jmh/core/LinearCombinationsTest.java,68,,"    @MethodSource(""provideLinearCombination"")"
52549,./TargetProjects/commons-numbers/commons-numbers-field/src/test/java/org/apache/commons/numbers/field/FieldParametricTest.java,38,,"    @MethodSource(""getList"")"
52550,./TargetProjects/commons-ognl/src/main/java/org/apache/commons/ognl/ASTChain.java,270,,"        String prevChain = (String) context.get( ""_currentChain"" );"
52551,./TargetProjects/commons-ognl/src/main/java/org/apache/commons/ognl/ASTProperty.java,178,,"                if ( context.get( ""_indexedMethod"" ) != null )"
52552,./TargetProjects/commons-ognl/src/main/java/org/apache/commons/ognl/OgnlRuntime.java,101,,"    public static final String SET_PREFIX = ""set"";"
52553,./TargetProjects/commons-ognl/src/main/java/org/apache/commons/ognl/OgnlRuntime.java,106,,"    public static final String GET_PREFIX = ""get"";"
52554,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ASTMethodTest.java,45,,"        pRef.setValue( ""value"" );"
52555,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ASTPropertyTest.java,54,,"        pRef.setValue( ""nested"" );"
52556,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ArrayElementsTest.java,46,,"        { STRING_ARRAY, ""#root[1]"", ""world"" },"
52557,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/CollectionDirectPropertyTest.java,40,,"        { Arrays.asList( ""hello"", ""world"" ), ""size"", 2 },"
52558,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/CollectionDirectPropertyTest.java,40,,"        { Arrays.asList( ""hello"", ""world"" ), ""size"", 2 },"
52559,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/IndexedPropertyTest.java,50,,"        { INDEXED, ""values[1]"", ""bar"" + ""xxx"", ""xxxx"" + ""xxx"", ""xxxx"" + ""xxx"" }, // set through setValues(int, String)"
52560,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/MapCreationTest.java,49,,"        FOO_BAR_MAP_1.put( ""foo"", ""bar"" );"
52561,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/MapCreationTest.java,49,,"        FOO_BAR_MAP_1.put( ""foo"", ""bar"" );"
52562,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/MapCreationTest.java,52,,"        FOO_BAR_MAP_2.put( ""bar"", ""baz"" );"
52563,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/NullHandlerTest.java,41,,"        { CORRECTED, ""stringValue"", ""corrected"" }, { CORRECTED, ""getStringValue()"", ""corrected"" },"
52564,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/NumberFormatExceptionTest.java,44,,"        { SIMPLE, ""intValue"", 0, 34, 34 },"
52565,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/NumberFormatExceptionTest.java,50,,"        { SIMPLE, ""bigIntValue"", BigInteger.valueOf( 0 ), BigInteger.valueOf( 34 ), BigInteger.valueOf( 34 ) },"
52566,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/NumberFormatExceptionTest.java,55,,"        { SIMPLE, ""bigDecValue"", new BigDecimal( 0.0 ), new BigDecimal( 34.55 ), new BigDecimal( 34.55 ) },"
52567,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/NumericConversionTest.java,55,,"        { ""55.1234"", Double.class, new Double( 55.1234 ) }, { new Integer( 55 ), Double.class, new Double( 55 ) },"
52568,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ObjectIndexedPropertyTest.java,43,,"        { OBJECT_INDEXED, ""attributes[\""bar\""]"", ""baz"" }, // get non-indexed property through"
52569,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ObjectIndexedPropertyTest.java,46,,"        { OBJECT_INDEXED, ""attribute[\""bar\""]"", ""baz"", ""newValue"", ""newValue"" }, // set"
52570,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ObjectIndexedTest.java,53,,"            return ""foo"";"
52571,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ObjectIndexedTest.java,185,,"        SimpleNode expression = (SimpleNode) Ognl.parseExpression( ""#ka.sunk[#root]"" );"
52572,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/ObjectIndexedTest.java,188,,"        Ognl.getValue( expression, context, ""aksdj"" );"
52573,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/PropertySetterTest.java,106,,"        Ognl.setValue( expression, context, this, ""hello"" );"
52574,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/SetterTest.java,46,,"        { ROOT, ""settableList[0]"", ""foo"", ""quux"" }, // absolute indexes"
52575,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/SetterTest.java,50,,"        { ROOT, ""settableList[$]"", ""quux"", ""oompa"" }, // special indexes"
52576,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/enhance/TestExpressionCompiler.java,121,,"        _context.put( ""key"", ""foo"" );"
52577,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/enhance/TestExpressionCompiler.java,125,,"        assertEquals( ""bar"", Ognl.getValue( expr, _context, root ) );"
52578,./TargetProjects/commons-ognl/src/test/java/org/apache/commons/ognl/test/enhance/TestExpressionCompiler.java,209,,"    IndexedMapObject mapObject = new IndexedMapObject( ""propertyValue"" );"
52579,./TargetProjects/commons-pool/src/main/java/org/apache/commons/pool2/PoolUtils.java,85,,"            return ""ErodingFactor{"" + ""factor="" + factor +"
52580,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestBaseKeyedPoolableObjectFactory.java,44,,"        factory.activateObject(""key"",null); // a no-op"
52581,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestBaseObjectPool.java,52,,"            fail(""Subclasses of TestBaseObjectPool must reimplement this method."");"
52582,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestKeyedObjectPool.java,50,,"            methodCalls.add(new MethodCall(""activateObject"", key, obj.getObject()));"
52583,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestKeyedObjectPool.java,94,,"            final MethodCall call = new MethodCall(""makeObject"", key);"
52584,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestKeyedObjectPool.java,109,,"            methodCalls.add(new MethodCall(""passivateObject"", key, obj.getObject()));"
52585,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestKeyedObjectPool.java,151,,"            final MethodCall call = new MethodCall(""validateObject"", key, obj.getObject());"
52586,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestObjectPool.java,141,,"        expectedMethods.add(new MethodCall(""makeObject"").returned(ZERO));"
52587,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestObjectPool.java,145,,"                    ""validateObject"", ZERO).returned(Boolean.TRUE));"
52588,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestObjectPool.java,147,,"        expectedMethods.add(new MethodCall(""passivateObject"", ZERO));"
52589,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestObjectPool.java,207,,"        expectedMethods.add(new MethodCall(""activateObject"", ZERO));"
52590,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,94,,"        @SuppressWarnings(""unchecked"")"
52591,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,119,,"        final List<String> expectedMethods = Arrays.asList(""addObject"", ""borrowObject"", ""clear"", ""clear"", ""close"", ""getNumActive"", ""getNumActive"","
52592,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,119,,"        final List<String> expectedMethods = Arrays.asList(""addObject"", ""borrowObject"", ""clear"", ""clear"", ""close"", ""getNumActive"", ""getNumActive"","
52593,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,119,,"        final List<String> expectedMethods = Arrays.asList(""addObject"", ""borrowObject"", ""clear"", ""clear"", ""close"", ""getNumActive"", ""getNumActive"","
52594,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,119,,"        final List<String> expectedMethods = Arrays.asList(""addObject"", ""borrowObject"", ""clear"", ""clear"", ""close"", ""getNumActive"", ""getNumActive"","
52595,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,119,,"        final List<String> expectedMethods = Arrays.asList(""addObject"", ""borrowObject"", ""clear"", ""clear"", ""close"", ""getNumActive"", ""getNumActive"","
52596,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,120,,"                ""getNumIdle"", ""getNumIdle"", ""invalidateObject"", ""returnObject"", ""toString"");"
52597,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,120,,"                ""getNumIdle"", ""getNumIdle"", ""invalidateObject"", ""returnObject"", ""toString"");"
52598,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,120,,"                ""getNumIdle"", ""getNumIdle"", ""invalidateObject"", ""returnObject"", ""toString"");"
52599,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,120,,"                ""getNumIdle"", ""getNumIdle"", ""invalidateObject"", ""returnObject"", ""toString"");"
52600,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/TestPoolUtils.java,132,,"        final List<String> expectedMethods = Arrays.asList(""activateObject"", ""destroyObject"", ""makeObject"", ""passivateObject"", ""validateObject"", ""toString"");"
52601,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java,912,,"        assertEquals(""foo"", (gkoPool.appendStats(""foo"")));"
52602,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java,928,,"        gkoPool.borrowObject(""one"");"
52603,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java,1789,,"                pool.borrowObject(""One"");"
52604,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java,1868,,"            fail(""Expected NoSuchElementException"");"
52605,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java,2131,,"        assertEquals(5, gkoPool.getNumIdle(), ""Should be 5 idle, found "" + gkoPool.getNumIdle());"
52606,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java,905,,"        ""rawtypes"", ""unchecked"""
52607,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java,923,,"                fail(""Thread "" + i + "" failed: "" + threads[i]._error.toString());"
52608,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java,923,,"                fail(""Thread "" + i + "" failed: "" + threads[i]._error.toString());"
52609,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java,1009,,"        assertEquals(""foo"", (genericObjectPool.appendStats(""foo"")));"
52610,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java,2179,,"            fail(""Expected NoSuchElementException"");"
52611,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java,2365,,"        assertEquals(5, genericObjectPool.getNumIdle(), ""Should be 5 idle, found "" + genericObjectPool.getNumIdle());"
52612,./TargetProjects/commons-pool/src/test/java/org/apache/commons/pool2/impl/TestLinkedBlockingDeque.java,62,,"            fail(""Not supposed to get here"");"
52613,./TargetProjects/commons-proxy/asm/src/main/java/org/apache/commons/proxy2/asm/ASMProxyFactory.java,339,,"    @SuppressWarnings(""serial"")"
52614,./TargetProjects/commons-proxy/core/src/main/java/org/apache/commons/proxy2/DefaultProxyFactory.java,55,,"        @SuppressWarnings(""unchecked"") // type inference"
52615,./TargetProjects/commons-proxy/core/src/main/java/org/apache/commons/proxy2/stub/BaseTrainer.java,61,,"        @SuppressWarnings(""unchecked"") // T is this class's second type parameter; thus the raw type is Class<T>"
52616,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/AbstractProxyFactoryTestCase.java,243,,"        set.add(""Hello"");"
52617,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/AbstractProxyFactoryTestCase.java,252,,"        assertEquals(Echo.class.getMethod(""echoBack"", String.class), tester.method);"
52618,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/AbstractSubclassingProxyFactoryTestCase.java,148,,"        assertEquals(""final"", proxy.echoBack(""echo""));"
52619,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/impl/MethodSignatureTest.java,44,,"        final MethodSignature sig = new MethodSignature(Echo.class.getMethod(""echoBack"", String.class));"
52620,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/InterceptorUtilsTest.java,35,,"        Invocation invocation = mockInvocation(Echo.class, ""echoBack"", String.class).withArguments(""World!"").build();"
52621,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/InterceptorUtilsTest.java,35,,"        Invocation invocation = mockInvocation(Echo.class, ""echoBack"", String.class).withArguments(""World!"").build();"
52622,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/SwitchInterceptorTest.java,42,,"        interceptor.when(new MethodNameMatcher(""echo"")).then(constant(""bar""));"
52623,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/SwitchInterceptorTest.java,43,,"        interceptor.when(new MethodNameMatcher(""echoBack"")).then(constant(""baz""));"
52624,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/SwitchInterceptorTest.java,45,,"        Invocation invocation = new MockInvocation(method, ""foo"", ""foo"");"
52625,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/matcher/argument/ArgumentMatcherUtilsTest.java,41,,"        ArgumentMatcher<String> matcher = ArgumentMatcherUtils.eq(""Hello"");"
52626,./TargetProjects/commons-proxy/core/src/test/java/org/apache/commons/proxy2/interceptor/matcher/argument/ArgumentMatcherUtilsTest.java,108,,"        assertTrue(matcher.matches(""abc""));"
52627,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/serialization/SerializationProxyTest.java,97,,"        final Provider proxy = proxyFactory.createInterceptorProxy(null, implementProvider(""foo""), Provider.class,"
52628,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/AbstractStubTestCase.java,64,,"                when(trainee.one(any(String.class))).thenReturn(""World"");"
52629,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/AbstractStubTestCase.java,67,,"        assertEquals(""World"", proxy.one(""Hello""));"
52630,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/AbstractStubTestCase.java,120,,"                        when(trainee.one(""Whatever"")).thenReturn(""Zero"");"
52631,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/AbstractStubTestCase.java,127,,"                        when(trainee.one(""Whatever"")).thenReturn(""One"");"
52632,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/AbstractStubTestCase.java,252,,"                when(trainee.arrayParameter(""One"", ""Two"", ""Three"")).thenReturn(""Four"");"
52633,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/StubBuilderTest.java,56,,"                when(trainee.one(""Foo"")).thenReturn(""Bar"");"
52634,./TargetProjects/commons-proxy/test/src/test/java/org/apache/commons/proxy2/stub/StubBuilderTest.java,56,,"                when(trainee.one(""Foo"")).thenReturn(""Bar"");"
52635,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractDatasetTest.java,92,,"        name = factory.createIRI(""http://xmlns.com/foaf/0.1/name"");"
52636,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractDatasetTest.java,602,,"        final IRI example1 = factory.createIRI(""http://example.com/s1"");"
52637,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractDatasetTest.java,603,,"        final IRI greeting = factory.createIRI(""http://example.com/greeting"");"
52638,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractDatasetTest.java,630,,"            final Literal lowerROOT = factory.createLiteral(""moi"", ""fi"");"
52639,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractGraphTest.java,88,,"        name = factory.createIRI(""http://xmlns.com/foaf/0.1/name"");"
52640,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractGraphTest.java,389,,"        final Literal lower = factory.createLiteral(""Hello"", ""en-gb"");"
52641,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractGraphTest.java,393,,"        final IRI example1 = factory.createIRI(""http://example.com/s1"");"
52642,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractGraphTest.java,394,,"        final IRI greeting = factory.createIRI(""http://example.com/greeting"");"
52643,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractGraphTest.java,422,,"            final Literal lowerROOT = factory.createLiteral(""moi"", ""fi"");"
52644,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractRDFTest.java,122,,"            graph.add(factory.createBlankNode(), factory.createIRI(""http://example.com/""), factory.createBlankNode());"
52645,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractRDFTest.java,158,,"        final Literal example = factory.createLiteral(""Example"");"
52646,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractRDFTest.java,212,,"        final Literal upper = factory.createLiteral(""Hello"", ""EN-GB"");"
52647,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractRDFTest.java,213,,"        final Literal lower = factory.createLiteral(""Hello"", ""en-gb"");"
52648,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/AbstractRDFTest.java,297,,"            final Literal mixedROOT = factory.createLiteral(""moi"", ""fI"");"
52649,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/DummyDataset.java,32,,"            throw new IllegalStateException(""DummyDataset can't be modified"");"
52650,./TargetProjects/commons-rdf/commons-rdf-api/src/test/java/org/apache/commons/rdf/api/DummyGraph.java,31,,"            throw new IllegalStateException(""DummyGraph can't be modified"");"
52651,./TargetProjects/commons-rdf/commons-rdf-examples/src/example/UserGuideTest.java,67,,"        IRI iri = factory.createIRI(""http://example.com/alice"");"
52652,./TargetProjects/commons-rdf/commons-rdf-jena/src/test/java/org/apache/commons/rdf/jena/GeneralizedRDFQuadTest.java,36,,"        final JenaIRI ex1 = jena.createIRI(""http://example.com/ex1"");"
52653,./TargetProjects/commons-rdf/commons-rdf-jena/src/test/java/org/apache/commons/rdf/jena/GeneralizedRDFQuadTest.java,37,,"        final JenaIRI ex2 = jena.createIRI(""http://example.com/ex2"");"
52654,./TargetProjects/commons-rdf/commons-rdf-jena/src/test/java/org/apache/commons/rdf/jena/GeneralizedRDFQuadTest.java,38,,"        final JenaIRI ex3 = jena.createIRI(""http://example.com/ex3"");"
52655,./TargetProjects/commons-rdf/commons-rdf-jena/src/test/java/org/apache/commons/rdf/jena/GeneralizedRDFQuadTest.java,53,,"        final JenaLiteral lit = jena.createLiteral(""Hello"");"
52656,./TargetProjects/commons-rdf/commons-rdf-jena/src/test/java/org/apache/commons/rdf/jena/GeneralizedRDFTripleTest.java,50,,"        final JenaLiteral lit = jena.createLiteral(""Hello"");"
52657,./TargetProjects/commons-rdf/commons-rdf-jsonld-java/src/main/java/org/apache/commons/rdf/jsonldjava/JsonLdQuadLike.java,46,,"    @SuppressWarnings(""unchecked"")"
52658,./TargetProjects/commons-rdf/commons-rdf-jsonld-java/src/test/java/org/apache/commons/rdf/jsonldjava/JsonLdComparisonTest.java,36,,"        final JsonLdLiteral lit1 = rdf.createLiteral(""Hello"");"
52659,./TargetProjects/commons-rdf/commons-rdf-jsonld-java/src/test/java/org/apache/commons/rdf/jsonldjava/JsonLdComparisonTest.java,86,,"            final JsonLdIRI s = rdf.createIRI(""http://example.com/s"");"
52660,./TargetProjects/commons-rdf/commons-rdf-jsonld-java/src/test/java/org/apache/commons/rdf/jsonldjava/JsonLdComparisonTest.java,87,,"            final JsonLdIRI p = rdf.createIRI(""http://example.com/p"");"
52661,./TargetProjects/commons-rdf/commons-rdf-jsonld-java/src/test/java/org/apache/commons/rdf/jsonldjava/JsonLdComparisonTest.java,95,,"            assertFalse(graph.contains(s, p, rdf.createLiteral(""Other"")));"
52662,./TargetProjects/commons-rdf/commons-rdf-simple/src/main/java/org/apache/commons/rdf/simple/experimental/AbstractRDFParser.java,217,,"    @SuppressWarnings(""unchecked"")"
52663,./TargetProjects/commons-rdf/commons-rdf-simple/src/test/java/org/apache/commons/rdf/simple/TestWritingGraph.java,63,,"        final IRI predicate = factory.createIRI(""pred"");"
52664,./TargetProjects/commons-rdf/commons-rdf-simple/src/test/java/org/apache/commons/rdf/simple/TestWritingGraph.java,71,,"                graph.add(subject, predicate, factory.createBlankNode(""Example "" + i));"
52665,./TargetProjects/commons-rdf/commons-rdf-simple/src/test/java/org/apache/commons/rdf/simple/experimental/AbstractRDFParserTest.java,128,,"            assertEquals(""<"" + testNt.toUri().toString() + "">"", firstPredicate(g, ""source""));"
52666,./TargetProjects/commons-rdf/commons-rdf-simple/src/test/java/org/apache/commons/rdf/simple/experimental/AbstractRDFParserTest.java,130,,"            assertEquals(""<"" + testNt.toRealPath().toUri().toString() + "">"", firstPredicate(g, ""base""));"
52667,./TargetProjects/commons-rdf/commons-rdf-simple/src/test/java/org/apache/commons/rdf/simple/experimental/AbstractRDFParserTest.java,133,,"            assertNull(firstPredicate(g, ""contentType""));"
52668,./TargetProjects/commons-rdf/commons-rdf-simple/src/test/java/org/apache/commons/rdf/simple/experimental/AbstractRDFParserTest.java,134,,"            assertNull(firstPredicate(g, ""contentTypeSyntax""));"
52669,./TargetProjects/commons-release-plugin/src/test/java/org/apache/commons/release/plugin/stubs/DistributionDetachmentProjectStub.java,46,,"        return ""commons-text"";"
52670,./TargetProjects/commons-release-plugin/src/test/java/org/apache/commons/release/plugin/stubs/DistributionDetachmentProjectStub.java,51,,"        return ""org.apache.commons"";"
52671,./TargetProjects/commons-release-plugin/src/test/java/org/apache/commons/release/plugin/stubs/DistributionDetachmentProjectStub.java,56,,"        return ""1.4"";"
52672,./TargetProjects/commons-release-plugin/src/test/java/org/apache/commons/release/plugin/stubs/DistributionDetachmentProjectStub.java,73,,"                ""bin"", ""1.4"""
52673,./TargetProjects/commons-release-plugin/src/test/java/org/apache/commons/release/plugin/stubs/DistributionDetachmentProjectStub.java,109,,"                ""src"", ""1.4"""
52674,./TargetProjects/commons-release-plugin/src/test/java/org/apache/commons/release/plugin/stubs/DistributionDetachmentProjectStub.java,142,,"                ""jar"","
52675,./TargetProjects/commons-rng/commons-rng-core/src/test/java/org/apache/commons/rng/core/RandomAssert.java,46,,"        assertEquals(""Value at position "", expected, rng);"
52676,./TargetProjects/commons-rng/commons-rng-core/src/test/java/org/apache/commons/rng/core/RandomAssert.java,127,,"        Assert.assertNotSame(""The copy instance should be a different object"", rng, copy);"
52677,./TargetProjects/commons-rng/commons-rng-core/src/test/java/org/apache/commons/rng/core/RandomAssert.java,128,,"        Assert.assertEquals(""The copy instance should be the same class"", rng.getClass(), copy.getClass());"
52678,./TargetProjects/commons-rng/commons-rng-core/src/test/java/org/apache/commons/rng/core/RandomAssert.java,129,,"        assertEquals(""Pre-jump value at position "", expectedBefore, copy);"
52679,./TargetProjects/commons-rng/commons-rng-core/src/test/java/org/apache/commons/rng/core/RandomAssert.java,130,,"        assertEquals(""Post-jump value at position "", expectedAfter, rng);"
52680,./TargetProjects/commons-rng/commons-rng-core/src/test/java/org/apache/commons/rng/core/util/NumberFactoryTest.java,174,,"                    Assert.fail(""Exception expected"");"
52681,./TargetProjects/commons-rng/commons-rng-examples/examples-jmh/src/main/java/org/apache/commons/rng/examples/jmh/sampling/ListShuffleBenchmark.java,345,,"    @SuppressWarnings({""rawtypes"", ""unchecked""})"
52682,./TargetProjects/commons-rng/commons-rng-examples/examples-jmh/src/main/java/org/apache/commons/rng/examples/jmh/sampling/ListShuffleBenchmark.java,345,,"    @SuppressWarnings({""rawtypes"", ""unchecked""})"
52683,./TargetProjects/commons-rng/commons-rng-sampling/src/test/java/org/apache/commons/rng/sampling/CompositeSamplersTest.java,337,,"        Assert.assertEquals(""Failed to add the correct number of samplers"", n, builder.size() - before);"
52684,./TargetProjects/commons-rng/commons-rng-sampling/src/test/java/org/apache/commons/rng/sampling/CompositeSamplersTest.java,357,,"        Assert.assertFalse(""p-value too small: "" + p, p < 0.001);"
52685,./TargetProjects/commons-rng/commons-rng-sampling/src/test/java/org/apache/commons/rng/sampling/distribution/KempSmallMeanPoissonSamplerTest.java,48,,"        @SuppressWarnings(""unused"")"
52686,./TargetProjects/commons-rng/commons-rng-sampling/src/test/java/org/apache/commons/rng/sampling/distribution/MarsagliaTsangWangDiscreteSamplerTest.java,302,,"        @SuppressWarnings(""unused"")"
52687,./TargetProjects/commons-rng/commons-rng-sampling/src/test/java/org/apache/commons/rng/sampling/distribution/MarsagliaTsangWangDiscreteSamplerTest.java,425,,"        Assert.assertEquals(""Invalid test set-up for p(0)"", Double.MIN_VALUE, getBinomialP0(trials, p), 0);"
52688,./TargetProjects/commons-rng/commons-rng-simple/src/test/java/org/apache/commons/rng/simple/internal/SeedFactoryTest.java,263,,"            Assert.assertEquals(""Position above 0 should be unmodified"", 0, seed[i]);"
52689,./TargetProjects/commons-scxml/src/main/java/org/apache/commons/scxml2/EvaluatorFactory.java,73,,"    @SuppressWarnings(""unused"")"
52690,./TargetProjects/commons-scxml/src/main/java/org/apache/commons/scxml2/model/Invoke.java,374,,"                    throw new SCXMLExpressionException(""<invoke> for state ""+parentState.getId() +"
52691,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/SCInstanceTest.java,45,,"        context.set(""name"", ""value"");"
52692,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/SCInstanceTest.java,45,,"        context.set(""name"", ""value"");"
52693,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/SCXMLExecutorTest.java,112,,"        Assertions.assertEquals(""ten"", currentStates.iterator().next().getId());"
52694,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/SCXMLExecutorTest.java,113,,"        currentStates = SCXMLTestHelper.fireEvent(exec, ""done.state.ten"");"
52695,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/SCXMLExecutorTest.java,235,,"        SCXMLTestHelper.assertPostTriggerState(exec, ""open"", payload, ""opened"");"
52696,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/SCXMLExecutorTest.java,237,,"        SCXMLTestHelper.assertPostTriggerState(exec, ""close"", payload, ""closed"");"
52697,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/AbstractSCXMLListenerTest.java,94,,"        Assertions.assertFalse(heardOnEntry, ""heardOnEntry == false"");"
52698,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/AbstractSCXMLListenerTest.java,95,,"        Assertions.assertFalse(heardOnExit, ""heardOnExit == false"");"
52699,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/AbstractSCXMLListenerTest.java,96,,"        Assertions.assertFalse(heardOnTransition, ""heardOnTransition == false"");"
52700,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/SimpleContextTest.java,38,,"        vars.put(""key"", ""value"");"
52701,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/SimpleContextTest.java,38,,"        vars.put(""key"", ""value"");"
52702,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/SimpleContextTest.java,52,,"        Assertions.assertFalse(context.has(""differentKey""));"
52703,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/SimpleContextTest.java,107,,"        parentVars.put(""differentKey"", ""differentValue"");"
52704,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/SimpleContextTest.java,153,,"        context.set(""key"", ""newValue"");"
52705,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/StopWatchDisplay.java,74,,"                split.setText(""Split"");"
52706,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/groovy/GroovyContextTest.java,36,,"        m.put(""foo"", ""bar"");"
52707,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/groovy/GroovyContextTest.java,36,,"        m.put(""foo"", ""bar"");"
52708,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/javascript/JSEvaluatorTest.java,173,,"                        ""Invalid result: "" + item.expression);"
52709,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/env/javascript/JSEvaluatorTest.java,188,,"        context.set(""fibonacci"", 12.0);"
52710,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/invoke/InvokeTest.java,45,,"        exec.registerInvokerClass(""scxml"", SimpleSCXMLInvoker.class);"
52711,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLReaderTest.java,192,,"        final SCXML scxml = SCXMLReader.read(SCXMLTestHelper.getResource(""org/apache/commons/scxml2/io/scxml-with-invalid-elems.xml""),"
52712,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLReaderTest.java,203,,"        assertContainsRecordedLogMessage(""Ignoring unknown or invalid element <baddata> in namespace \""http://www.w3.org/2005/07/scxml\"" as child of <datamodel>"");"
52713,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLReaderTest.java,204,,"        assertContainsRecordedLogMessage(""Ignoring unknown or invalid element <baddata> in namespace \""http://www.example.com/scxml\"" as child of <datamodel>"");"
52714,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLReaderTest.java,205,,"        assertContainsRecordedLogMessage(""Ignoring unknown or invalid element <trace> in namespace \""http://www.w3.org/2005/07/scxml\"" as child of <onentry>"");"
52715,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLReaderTest.java,206,,"        assertContainsRecordedLogMessage(""Ignoring unknown or invalid element <onbeforeexit> in namespace \""http://www.w3.org/2005/07/scxml\"" as child of <final>"");"
52716,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,44,,"                    ""  <state id=\""s1\"">\n"" +"
52717,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,45,,"                    ""    <transition target=\""fine\"">\n"" +"
52718,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,47,,"                    ""    </transition>\n"" +"
52719,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,48,,"                    ""  </state>\n"" +"
52720,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,49,,"                    ""  <final id=\""fine\""/>\n"" +"
52721,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,50,,"                    ""</scxml>"";"
52722,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLRequiredAttributesTest.java,63,,"            ""<scxml xmlns=\""http://www.w3.org/2005/07/scxml\"" version=\""1.0\"">\n"" +"
52723,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/io/SCXMLWriterTest.java,48,,"        final String assertValue = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"""
52724,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/model/ActionTest.java,54,,"        state.setId(""off"");"
52725,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/model/CustomActionTest.java,40,,"        new CustomAction(""http://my.actions.domain/CUSTOM"", ""hello"","
52726,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/model/HistoryTest.java,80,,"        SCXMLTestHelper.assertPostTriggerStates(exec, ""dial"", new String[] { ""talking"", ""on_call"" });"
52727,./TargetProjects/commons-scxml/src/test/java/org/apache/commons/scxml2/model/StateTest.java,31,,"        Assertions.assertNull(state.getTransitionsList(""event""));"
52728,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/StrBuilder.java,436,,"                throw new StringIndexOutOfBoundsException(""startIndex must be valid"");"
52729,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/StrBuilder.java,439,,"                throw new StringIndexOutOfBoundsException(""length must be valid"");"
52730,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/StringEscapeUtils.java,67,,"        escapeJavaMap.put(""\"""", ""\\\"""");"
52731,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/StringEscapeUtils.java,68,,"        escapeJavaMap.put(""\\"", ""\\\\"");"
52732,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/TextStringBuilder.java,488,,"                throw new StringIndexOutOfBoundsException(""startIndex must be valid"");"
52733,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/TextStringBuilder.java,491,,"                throw new StringIndexOutOfBoundsException(""length must be valid"");"
52734,./TargetProjects/commons-text/src/main/java/org/apache/commons/text/lookup/JavaPlatformStringLookup.java,86,,"        System.out.printf(""%s = %s%n"", KEY_VERSION, JavaPlatformStringLookup.INSTANCE.lookup(KEY_VERSION));"
52735,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/CaseUtilsTest.java,55,,"        assertThat(CaseUtils.toCamelCase(""   to-CAMEL-cASE"", false, chars)).isEqualTo(""toCamelCase"");"
52736,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/CaseUtilsTest.java,67,,"        assertThat(CaseUtils.toCamelCase(""tocamelcase"", false, null)).isEqualTo(""tocamelcase"");"
52737,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/ExtendedMessageFormatTest.java,475,,"        assertEquals(""Lower: foo Upper: BAR"", emf.format(new Object[] {""foo"", ""bar""}));"
52738,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/FormattableUtilsTest.java,54,,"        assertThat(FormattableUtils.append(""foo"", createFormatter(), 0, -1, -1, pad).toString()).isEqualTo(""foo"");"
52739,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,48,,"            return ""foo"";"
52740,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,70,,"        sb.setNullText(""NULL"").append((char[]) null);"
52741,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,94,,"            fail(""append(char[], -1,) expected IndexOutOfBoundsException"");"
52742,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,101,,"            fail(""append(char[], 3,) expected IndexOutOfBoundsException"");"
52743,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,108,,"            fail(""append(char[],, -1) expected IndexOutOfBoundsException"");"
52744,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,115,,"            fail(""append(char[], 1, 3) expected IndexOutOfBoundsException"");"
52745,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,122,,"            fail(""append(char[], -1, 3) expected IndexOutOfBoundsException"");"
52746,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,129,,"            fail(""append(char[], 4, 0) expected IndexOutOfBoundsException"");"
52747,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,138,,"        assertThat(sb.toString()).isEqualTo(""foobar"");"
52748,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,151,,"        sb.append(""Hi"", ""Alice"");"
52749,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,182,,"        sb.append(new StringBuffer(""baz""));"
52750,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,226,,"        sb.append(new StrBuilder(""bar""));"
52751,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,286,,"        sb.append(new StrBuilder(""abcbardef""), 3, 3);"
52752,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,543,,"        assertThat(sb.toString()).isEqualTo(""foobarbaz"");"
52753,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,616,,"        sb.setNullText(""null"");"
52754,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,1081,,"        assertThat(sb.toString()).isEqualTo(""foo,"");"
52755,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderAppendInsertTest.java,1284,,"        sb.append(""barbaz"");"
52756,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,104,,"        final StrBuilder sb = new StrBuilder(""1234567890"");"
52757,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,105,,"        final String text = ""Test"";"
52758,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,207,,"        final String text = ""Test "";"
52759,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,214,,"        assertEquals(""Test 1234567890"", buffer.toString());"
52760,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,296,,"                fail(""Exception expected!"");"
52761,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,445,,"        sb.append(""foo"");"
52762,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,536,,"        sb.append(""Hello"");"
52763,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,624,,"        StrBuilder sb = new StrBuilder(""abcbccba"");"
52764,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,628,,"        assertEquals(""bcbccb"", sb.toString());"
52765,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,669,,"        StrBuilder sb = new StrBuilder(""A0xA1A2yA3"");"
52766,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,675,,"        sb = new StrBuilder(""Ax1"");"
52767,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,687,,"        final StrBuilder sb = new StrBuilder(""abc"");"
52768,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,701,,"        StrBuilder sb = new StrBuilder(""abcba"");"
52769,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,775,,"        assertThrows(IndexOutOfBoundsException.class, () -> new StrBuilder(""anything"").delete(2, 1));"
52770,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,868,,"        sb.append(""junit"");"
52771,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,902,,"            fail(""no exception"");"
52772,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,983,,"        final StrBuilder sb = new StrBuilder(""abab"");"
52773,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1012,,"        sb = new StrBuilder(""xyzabc"");"
52774,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1085,,"        sb.append(""ab bd"");"
52775,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1347,,"        final StrBuilder sb = new StrBuilder(""left right"");"
52776,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1368,,"        assertEquals(""goodbye"", sb.midString(6, 7));"
52777,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1369,,"        assertEquals(""hello"", sb.midString(0, 5));"
52778,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1495,,"        StrBuilder sb = new StrBuilder(""aaxaaaayaa"");"
52779,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1497,,"        assertEquals(""-x--y-"", sb.toString());"
52780,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1505,,"        assertEquals(""-xaaaayaa"", sb.toString());"
52781,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1513,,"        assertEquals(""-x--yaa"", sb.toString());"
52782,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1594,,"        sb.replace(A_NUMBER_MATCHER, ""***"", 0, sb.length(), -1);"
52783,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1729,,"        sb.replaceAll(""b"", ""xbx"");"
52784,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,1931,,"        final StrBuilder sb = new StrBuilder(""hello goodbye"");"
52785,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrBuilderTest.java,2058,,"        assertEquals(""a b c"", sb.trim().toString());"
52786,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrLookupTest.java,86,,"        assertEquals(System.getProperty(""os.name""), StrLookup.systemPropertiesLookup().lookup(""os.name""));"
52787,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,154,,"        values.put(""animal"", ""quick brown fox"");"
52788,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,155,,"        values.put(""target"", ""lazy dog"");"
52789,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,169,,"        map.put(""name"", ""commons"");"
52790,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,169,,"        map.put(""name"", ""commons"");"
52791,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,216,,"        map.put(""pet"", ""${petCharacteristic} dog"");"
52792,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,221,,"        map.put(""critterType"", ""${animal}"");"
52793,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,223,,"        assertThrows(IllegalStateException.class, () -> sub.replace(""The ${animal} jumps over the ${target}.""));"
52794,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,234,,"        map.put(""animal"", ""fox"");"
52795,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrSubstitutorTest.java,238,,"        assertEquals(""The fox jumps over the lazy dog. 1234567890."","
52796,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,64,,"        final String[] expected = {""a"", ""b"", ""c"", ""d;\""e"", ""f"", """", """", """"};"
52797,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,69,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52798,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,69,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52799,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,69,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52800,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,98,,"        final String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
52801,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,234,,"        final String input = ""a  b c"";"
52802,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,329,,"        tok.setIgnoredMatcher(StrMatcher.stringMatcher(""IGNORE""));"
52803,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StrTokenizerTest.java,567,,"        StrTokenizer tok = new StrTokenizer(""a b"".toCharArray());"
52804,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,51,,"            {""no escaping"", ""plain text"", ""plain text""},"
52805,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,147,,"        assertEquals(""foo.bar"", StringEscapeUtils.escapeCsv(""foo.bar""));"
52806,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,148,,"        assertEquals(""\""foo,bar\"""", StringEscapeUtils.escapeCsv(""foo,bar""));"
52807,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,148,,"        assertEquals(""\""foo,bar\"""", StringEscapeUtils.escapeCsv(""foo,bar""));"
52808,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,149,,"        assertEquals(""\""foo\nbar\"""", StringEscapeUtils.escapeCsv(""foo\nbar""));"
52809,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,149,,"        assertEquals(""\""foo\nbar\"""", StringEscapeUtils.escapeCsv(""foo\nbar""));"
52810,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,150,,"        assertEquals(""\""foo\rbar\"""", StringEscapeUtils.escapeCsv(""foo\rbar""));"
52811,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,150,,"        assertEquals(""\""foo\rbar\"""", StringEscapeUtils.escapeCsv(""foo\rbar""));"
52812,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,151,,"        assertEquals(""\""foo\""\""bar\"""", StringEscapeUtils.escapeCsv(""foo\""bar""));"
52813,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,151,,"        assertEquals(""\""foo\""\""bar\"""", StringEscapeUtils.escapeCsv(""foo\""bar""));"
52814,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,152,,"        assertEquals(""foo\uD84C\uDFB4bar"", StringEscapeUtils.escapeCsv(""foo\uD84C\uDFB4bar""));"
52815,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,174,,"        fail(""Exception expected!"");"
52816,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,375,,"        assertEquals(""a\tb\rc\nd"", StringEscapeUtils.escapeXml10(""a\tb\rc\nd""),"
52817,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,532,,"        assertEquals(""Fran\u00E7ais"", StringEscapeUtils.unescapeHtml3(""Fran\u00E7ais""), ""funny chars pass through OK"");"
52818,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,534,,"        assertEquals(""Hello&;World"", StringEscapeUtils.unescapeHtml3(""Hello&;World""));"
52819,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,535,,"        assertEquals(""Hello&#;World"", StringEscapeUtils.unescapeHtml3(""Hello&#;World""));"
52820,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,536,,"        assertEquals(""Hello&# ;World"", StringEscapeUtils.unescapeHtml3(""Hello&# ;World""));"
52821,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringEscapeUtilsTest.java,537,,"        assertEquals(""Hello&##;World"", StringEscapeUtils.unescapeHtml3(""Hello&##;World""));"
52822,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,195,,"        values.put(""animal"", ACTUAL_ANIMAL);"
52823,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,445,,"        values.put(""animal.1"", ""fox"");"
52824,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,445,,"        values.put(""animal.1"", ""fox"");"
52825,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,446,,"        values.put(""animal.2"", ""mouse"");"
52826,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,446,,"        values.put(""animal.2"", ""mouse"");"
52827,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,447,,"        values.put(""species"", ""2"");"
52828,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,452,,"            .isThrownBy(() -> replace(sub, ""The ${animal.${species}} jumps over the ${target}.""))"
52829,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,467,,"        assertEqualsCharSeq(""The fox jumps over the lazy dog."","
52830,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,982,,"        map.put(""name"", ""commons"");"
52831,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorTest.java,982,,"        map.put(""name"", ""commons"");"
52832,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorWithInterpolatorStringLookupTest.java,41,,"        final String value = ""value"";"
52833,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorWithInterpolatorStringLookupTest.java,50,,"            final String spKey = ""user.name"";"
52834,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringSubstitutorWithInterpolatorStringLookupTest.java,51,,"            Assertions.assertEquals(System.getProperty(spKey), strSubst.replace(""${sys:"" + spKey + ""}""));"
52835,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,63,,"        final String[] expected = {""a"", ""b"", ""c"", ""d;\""e"", ""f"", """", """", """" };"
52836,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,68,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52837,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,68,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52838,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,68,,"                    ""token["" + i + ""] was '"" + tokens[i] + ""' but was expected to be '"" + expected[i] + ""'"");"
52839,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,97,,"        final String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
52840,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,233,,"        final String input = ""a  b c"";"
52841,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,328,,"        tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.stringMatcher(""IGNORE""));"
52842,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/StringTokenizerTest.java,566,,"        StringTokenizer tok = new StringTokenizer(""a b"".toCharArray());"
52843,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,51,,"            return ""foo"";"
52844,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,71,,"        sb.setNullText(""NULL"").append((char[]) null);"
52845,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,94,,"            fail(""append(char[], -1,) expected IndexOutOfBoundsException"");"
52846,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,101,,"            fail(""append(char[], 3,) expected IndexOutOfBoundsException"");"
52847,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,108,,"            fail(""append(char[],, -1) expected IndexOutOfBoundsException"");"
52848,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,115,,"            fail(""append(char[], 1, 3) expected IndexOutOfBoundsException"");"
52849,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,122,,"            fail(""append(char[], -1, 3) expected IndexOutOfBoundsException"");"
52850,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,129,,"            fail(""append(char[], 4, 0) expected IndexOutOfBoundsException"");"
52851,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,138,,"        assertThat(sb.toString()).isEqualTo(""foobar"");"
52852,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,150,,"        sb.append(""Hi"", ""Alice"");"
52853,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,180,,"        sb.append(new StringBuffer(""baz""));"
52854,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,222,,"        sb.append(""bar"");"
52855,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,309,,"        sb.append(""abcbardef"", 3, 3);"
52856,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,559,,"        assertThat(sb.toString()).isEqualTo(""foobarbaz"");"
52857,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,629,,"        sb.setNullText(""null"");"
52858,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,944,,"        assertThat(sb.toString()).isEqualTo(""foo,"");"
52859,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderAppendInsertTest.java,1146,,"        sb.append(""barbaz"");"
52860,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,101,,"        final TextStringBuilder sb = new TextStringBuilder(""1234567890"");"
52861,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,102,,"        final String text = ""Test"";"
52862,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,232,,"        final String text = ""Test "";"
52863,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,239,,"        assertEquals(""Test 1234567890"", buffer.toString());"
52864,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,440,,"        sb.append(""foo"");"
52865,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,529,,"        sb.append(""Hello"");"
52866,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,639,,"        TextStringBuilder sb = new TextStringBuilder(""abcbccba"");"
52867,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,643,,"        assertEquals(""bcbccb"", sb.toString());"
52868,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,682,,"        TextStringBuilder sb = new TextStringBuilder(""A0xA1A2yA3"");"
52869,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,688,,"        sb = new TextStringBuilder(""Ax1"");"
52870,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,699,,"        final String str = ""abc"";"
52871,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,721,,"        TextStringBuilder sb = new TextStringBuilder(""abcba"");"
52872,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,794,,"        assertThrows(IndexOutOfBoundsException.class, () -> new TextStringBuilder(""anything"").delete(2, 1));"
52873,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,816,,"        final String data = ""junit"";"
52874,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,950,,"            new TextStringBuilder(""title"").equalsIgnoreCase(new TextStringBuilder(""title"".toLowerCase(turkish))));"
52875,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,952,,"            new TextStringBuilder(""title"").equalsIgnoreCase(new TextStringBuilder(""TITLE"".toLowerCase(turkish))));"
52876,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1073,,"        final TextStringBuilder sb = new TextStringBuilder(""abab"");"
52877,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1102,,"        sb = new TextStringBuilder(""xyzabc"");"
52878,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1173,,"        sb.append(""ab bd"");"
52879,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1444,,"        final TextStringBuilder sb = new TextStringBuilder(""left right"");"
52880,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1463,,"        assertEquals(""goodbye"", sb.midString(6, 7));"
52881,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1464,,"        assertEquals(""hello"", sb.midString(0, 5));"
52882,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1659,,"        TextStringBuilder sb = new TextStringBuilder(""aaxaaaayaa"");"
52883,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1661,,"        assertEquals(""-x--y-"", sb.toString());"
52884,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1669,,"        assertEquals(""-xaaaayaa"", sb.toString());"
52885,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1677,,"        assertEquals(""-x--yaa"", sb.toString());"
52886,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1753,,"        sb.replace(A_NUMBER_MATCHER, ""***"", 0, sb.length(), -1);"
52887,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,1878,,"        sb.replaceAll(""b"", ""xbx"");"
52888,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,2073,,"        final TextStringBuilder sb = new TextStringBuilder(""hello goodbye"");"
52889,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/TextStringBuilderTest.java,2196,,"        assertEquals(""a b c"", sb.trim().toString());"
52890,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,36,,"        assertThatIllegalArgumentException().isThrownBy(() -> assertThat(WordUtils.abbreviate(""01 23 45 67 89"", 9, -10, null)).isEqualTo(""01 23 45 67""));"
52891,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,42,,"        assertThat(WordUtils.abbreviate(""012 3456789"", 0, 5, null)).isEqualTo(""012"");"
52892,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,42,,"        assertThat(WordUtils.abbreviate(""012 3456789"", 0, 5, null)).isEqualTo(""012"");"
52893,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,46,,"        assertThat(WordUtils.abbreviate(""0123456789"", 15, 20, null)).isEqualTo(""0123456789"");"
52894,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,97,,"        assertThat(WordUtils.capitalize(""i am here 123"")).isEqualTo(""I Am Here 123"");"
52895,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,97,,"        assertThat(WordUtils.capitalize(""i am here 123"")).isEqualTo(""I Am Here 123"");"
52896,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,99,,"        assertThat(WordUtils.capitalize(""i am HERE 123"")).isEqualTo(""I Am HERE 123"");"
52897,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,100,,"        assertThat(WordUtils.capitalize(""I AM HERE 123"")).isEqualTo(""I AM HERE 123"");"
52898,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,133,,"        assertThat(WordUtils.capitalizeFully(""I Am+Here-123"", chars)).isEqualTo(""I Am+Here-123"");"
52899,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,207,,"        assertThat(WordUtils.initials(""Ben John Lee"")).isEqualTo(""BJL"");"
52900,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,207,,"        assertThat(WordUtils.initials(""Ben John Lee"")).isEqualTo(""BJL"");"
52901,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,208,,"        assertThat(WordUtils.initials(""   Ben \n   John\tLee\t"")).isEqualTo(""BJL"");"
52902,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,209,,"        assertThat(WordUtils.initials(""Ben J.Lee"")).isEqualTo(""BJ"");"
52903,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,210,,"        assertThat(WordUtils.initials("" Ben   John  . Lee"")).isEqualTo(""BJ.L"");"
52904,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,211,,"        assertThat(WordUtils.initials(""i am here 123"")).isEqualTo(""iah1"");"
52905,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,223,,"        assertThat(WordUtils.initials(""SJC"", array)).isEqualTo(""S"");"
52906,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,228,,"        assertThat(WordUtils.initials(""Kay O'Murphy"", array)).isEqualTo(""KO"");"
52907,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,303,,"            .isEqualTo(""\uD800\uDF00\uD800\uDF02"");"
52908,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/WordUtilsTest.java,412,,"        String input = ""Here is one line of text that is going to be wrapped after 20 columns."";"
52909,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/io/StringSubstitutorFilterReaderTest.java,99,,"                    assertEquals(expectedCount, actualCount, () -> String.format(""Step size %,d"", targetSize));"
52910,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/lookup/AbstractStringLookupTest.java,43,,"        assertEquals(StringUtils.substringAfterLast(""abc"", 'a'), new TestStringLookup().substringAfterLast(""abc"", 'a'));"
52911,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/lookup/PropertiesStringLookupTest.java,42,,"        assertEquals(""Hello World!"", stringSubstitutor.replace(""${properties:"" + KEY_PATH + ""}""));"
52912,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/lookup/PropertiesStringLookupTest.java,42,,"        assertEquals(""Hello World!"", stringSubstitutor.replace(""${properties:"" + KEY_PATH + ""}""));"
52913,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,68,,"        checkFormat(fmt, -0.0, ""-0.0"");"
52914,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,69,,"        checkFormat(fmt, 0.0, ""0.0"");"
52915,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,70,,"        checkFormat(fmt, -1.0, ""-1.0"");"
52916,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,89,,"        checkFormat(fmt, Math.PI, ""3.141592653589793"");"
52917,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,90,,"        checkFormat(fmt, Math.E, ""2.718281828459045"");"
52918,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,103,,"            .infinity(""inf"")"
52919,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,104,,"            .nan(""nan"")"
52920,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,111,,"        checkFormat(fmt, Double.NEGATIVE_INFINITY, ""!inf"");"
52921,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,139,,"        checkFormat(fmt, Math.PI, ""3,14"");"
52922,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,140,,"        checkFormat(fmt, Math.E, ""2,72"");"
52923,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,217,,"        checkFormat(fmt, 0.001, ""1e!3"");"
52924,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/DoubleFormatTest.java,229,,"        checkFormat(fmt, 10000000.0, ""1e7"");"
52925,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/ParsedDecimalTest.java,53,,"        checkFrom(123.0, ""123"", 0);"
52926,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/numbers/ParsedDecimalTest.java,370,,"        checkToScientificString(0.0, ""0x10^0"", opts);"
52927,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/FuzzyScoreTest.java,36,,"        assertThat(ENGLISH_SCORE.fuzzyScore(""Workshop"", ""b"")).isEqualTo(0);"
52928,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,54,,"        assertIntersection(similarity, ""aaba"", ""abaa"", 2, 2, 2);"
52929,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,54,,"        assertIntersection(similarity, ""aaba"", ""abaa"", 2, 2, 2);"
52930,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,55,,"        assertIntersection(similarity, ""aaaa"", ""aa"", 1, 1, 1);"
52931,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,57,,"        assertIntersection(similarity, ""aaaa"", ""aaa"", 1, 1, 1);"
52932,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,58,,"        assertIntersection(similarity, ""aabab"", ""ababa"", 2, 2, 2);"
52933,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,58,,"        assertIntersection(similarity, ""aabab"", ""ababa"", 2, 2, 2);"
52934,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,59,,"        assertIntersection(similarity, ""the same"", ""the same"", 7, 7, 7);"
52935,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,60,,"        assertIntersection(similarity, ""abcdefghijklm"", ""ab_defg ijklm"", 13, 13, 11);"
52936,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/IntersectionSimilarityTest.java,60,,"        assertIntersection(similarity, ""abcdefghijklm"", ""ab_defg ijklm"", 13, 13, 11);"
52937,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/JaroWinklerDistanceTest.java,50,,"        assertEquals(0d, distance.apply(""foo"", ""foo""), 0.00001d);"
52938,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/JaroWinklerSimilarityTest.java,40,,"        assertEquals(1d, similarity.apply(wrap(""foo""), ""foo""), 0.00001d);"
52939,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,43,,"        result = UNLIMITED_DISTANCE.apply(""aaapppp"", """");"
52940,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,49,,"        result = UNLIMITED_DISTANCE.apply(""frog"", ""fog"");"
52941,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,49,,"        result = UNLIMITED_DISTANCE.apply(""frog"", ""fog"");"
52942,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,55,,"        result = UNLIMITED_DISTANCE.apply(""fly"", ""ant"");"
52943,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,55,,"        result = UNLIMITED_DISTANCE.apply(""fly"", ""ant"");"
52944,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,61,,"        result = UNLIMITED_DISTANCE.apply(""elephant"", ""hippo"");"
52945,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,61,,"        result = UNLIMITED_DISTANCE.apply(""elephant"", ""hippo"");"
52946,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,73,,"        result = UNLIMITED_DISTANCE.apply(""hippo"", ""zzzzzzzz"");"
52947,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,85,,"        result = UNLIMITED_DISTANCE.apply(""hello"", ""hallo"");"
52948,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,85,,"        result = UNLIMITED_DISTANCE.apply(""hello"", ""hallo"");"
52949,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDetailedDistanceTest.java,203,,"        result = new LevenshteinDetailedDistance(2).apply(""aaa"", ""bbb"");"
52950,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDistanceTest.java,35,,"        assertThat(UNLIMITED_DISTANCE.apply(""aaapppp"", """")).isEqualTo(7);"
52951,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDistanceTest.java,38,,"        assertThat(UNLIMITED_DISTANCE.apply(""elephant"", ""hippo"")).isEqualTo(7);"
52952,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDistanceTest.java,38,,"        assertThat(UNLIMITED_DISTANCE.apply(""elephant"", ""hippo"")).isEqualTo(7);"
52953,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDistanceTest.java,40,,"        assertThat(UNLIMITED_DISTANCE.apply(""hippo"", ""zzzzzzzz"")).isEqualTo(8);"
52954,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LevenshteinDistanceTest.java,72,,"        assertThat(new LevenshteinDistance(2).apply(""aaa"", ""bbb"")).isEqualTo(-1);"
52955,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LongestCommonSubsequenceTest.java,40,,"        assertThat(subject.apply(""left"", """")).isEqualTo(0);"
52956,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LongestCommonSubsequenceTest.java,41,,"        assertThat(subject.apply("""", ""right"")).isEqualTo(0);"
52957,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LongestCommonSubsequenceTest.java,42,,"        assertThat(subject.apply(""frog"", ""fog"")).isEqualTo(3);"
52958,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LongestCommonSubsequenceTest.java,45,,"        assertThat(subject.apply(""ABC Corporation"", ""ABC Corp"")).isEqualTo(8);"
52959,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/LongestCommonSubsequenceTest.java,51,,"        assertThat(subject.apply(""the same string"", ""the same string"")).isEqualTo(15);"
52960,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/ParameterizedLevenshteinDistanceTest.java,36,,"            Arguments.of(8, ""aaapppp"", """", 7),"
52961,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/ParameterizedLevenshteinDistanceTest.java,49,,"            Arguments.of(2, ""aaa"", ""bbb"", -1),"
52962,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/ParameterizedLevenshteinDistanceTest.java,79,,"            Arguments.of(7, ""elephant"", ""hippo"", 7),"
52963,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/ParameterizedLevenshteinDistanceTest.java,79,,"            Arguments.of(7, ""elephant"", ""hippo"", 7),"
52964,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/similarity/ParameterizedLevenshteinDistanceTest.java,83,,"            Arguments.of(8, ""hippo"", ""zzzzzzzz"", 8),"
52965,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/translate/LookupTranslatorTest.java,39,,"        translatorMap.put(""one"", ""two"");"
52966,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/translate/LookupTranslatorTest.java,39,,"        translatorMap.put(""one"", ""two"");"
52967,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/translate/NumericEntityUnescaperTest.java,44,,"        assertThat(neu.translate(""Test &"")).as(""Failed to ignore when last character is &"").isEqualTo(""Test &"");"
52968,./TargetProjects/commons-text/src/test/java/org/apache/commons/text/translate/OctalUnescaperTest.java,35,,"        assertThat(result).as(""Failed to unescape octal characters via the between method"").isEqualTo(""\45"");"
52969,./TargetProjects/commons-validator/src/main/java/org/apache/commons/validator/Field.java,148,,"    @SuppressWarnings(""unchecked"") // cannot instantiate generic array, so have to assume this is OK"
52970,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,106,,"       assertNotNull(""Results are null."", results);"
52971,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,108,,"       ValidatorResult firstNameResult = results.getValidatorResult(""firstName"");"
52972,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,109,,"       ValidatorResult lastNameResult = results.getValidatorResult(""lastName"");"
52973,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,111,,"       assertNotNull(""First Name ValidatorResult should not be null."", firstNameResult);"
52974,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,112,,"       assertTrue(""First Name ValidatorResult should contain the '"" + ACTION +""' action."", firstNameResult.containsAction(ACTION));"
52975,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,112,,"       assertTrue(""First Name ValidatorResult should contain the '"" + ACTION +""' action."", firstNameResult.containsAction(ACTION));"
52976,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,113,,"       assertTrue(""First Name ValidatorResult for the '"" + ACTION +""' action should have failed."", !firstNameResult.isValid(ACTION));"
52977,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,113,,"       assertTrue(""First Name ValidatorResult for the '"" + ACTION +""' action should have failed."", !firstNameResult.isValid(ACTION));"
52978,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,116,,"       assertTrue(""Last Name ValidatorResult should contain the '"" + ACTION +""' action."", lastNameResult.containsAction(ACTION));"
52979,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,117,,"       assertTrue(""Last Name ValidatorResult for the '"" + ACTION +""' action should have failed."", !lastNameResult.isValid(ACTION));"
52980,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,177,,"       assertTrue(""First Name ValidatorResult for the '"" + ACTION +""' action should have passed."", firstNameResult.isValid(ACTION));"
52981,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/ExtensionTest.java,333,,"       assertTrue(""firstName in "" + FORM_KEY + "" should be the first in the list"", fieldFirstName.getKey().equals(""firstName""));"
52982,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,66,,"        assertEquals(""Empty Args(1) "", 0, field.getArgs(""required"").length);"
52983,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,74,,"        field.addArg(createArg(""default-position-0""));"
52984,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,75,,"        field.addArg(createArg(""default-position-1""));"
52985,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,76,,"        field.addArg(createArg(""default-position-2""));"
52986,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,108,,"        field.addArg(createArg(""default-position-3""));"
52987,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,144,,"        field.addArg(createArg(""required-position-1"", ""required"", 1));"
52988,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,151,,"        assertEquals(""testOverrideUsingPositionA(3) "", 3, field.getArgs(""mask"").length);"
52989,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/FieldTest.java,193,,"        field.addArg(createArg(""required-position-2"", ""required""));"
52990,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/GenericValidatorTest.java,38,,"        assertTrue(""Min=5 End=0"",  GenericValidator.minLength(""12345\n\r"", 5, 0));"
52991,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java,145,,"        assertNotNull(""Results are null."", results);"
52992,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java,147,,"        ValidatorResult firstNameResult = results.getValidatorResult(""firstName"");"
52993,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java,148,,"        ValidatorResult lastNameResult = results.getValidatorResult(""lastName"");"
52994,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java,157,,"        assertTrue(!lastNameResult.containsAction(""int""));"
52995,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleTest.java,39,,"   protected static String ACTION = ""required"";"
52996,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleTest.java,82,,"      assertNotNull(""Results are null."", results);"
52997,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleTest.java,84,,"      ValidatorResult firstNameResult = results.getValidatorResult(""firstName"");"
52998,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleTest.java,85,,"      ValidatorResult lastNameResult = results.getValidatorResult(""lastName"");"
52999,./TargetProjects/commons-validator/src/test/java/org/apache/commons/validator/MultipleTest.java,87,,"      assertNotNull(""First Name ValidatorResult should not be null."", firstNameResult);"
