Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"if (session != null && session.getXXPortalUser() != null && session.getXXPortalUser().getLoginId() != null &&  ""rangerusersync"".equals(session.getXXPortalUser().getLoginId())","if (session != null && session.getXXPortalUser() != null && session.getXXPortalUser().getLoginId() != null && ""rangerusersync"".equals(session.getXXPortalUser().getLoginId()) && reqRoleList != null && !reqRoleList.isEmpty() && existingRoleList != null && !existingRoleList.isEmpty()) {
  if (!reqRoleList.equals(existingRoleList)) {
    userProfileRes.setUserRoleList(reqRoleList);
    userProfileRes.setUserSource(RangerCommonEnums.USER_EXTERNAL);
    List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByUserPermissionId(userProfileRes.getId());
    if (xuserPermissionList != null && xuserPermissionList.size() > 0) {
      for (      XXUserPermission xXUserPermission : xuserPermissionList) {
        if (xXUserPermission != null) {
          try {
            xUserPermissionService.deleteResource(xXUserPermission.getId());
          }
 catch (          Exception e) {
            logger.error(e.getMessage());
          }
        }
      }
    }
    updateUser(userProfileRes);
  }
}
 else {
  if (logger.isDebugEnabled()) {
    logger.debug(""Permission"" + "" denied. LoggedInUser="" + (session != null ? session.getXXPortalUser().getId() : """") + "" isn't permitted to perform the action."");
  }
}
",0,456,14,16608,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
2,"if (!""text/plain"".equals(BookStore.this.messageContext.get(""Content-Type""))) {","if (!""text/plain"".equals(BookStore.this.messageContext.get(""Content-Type""))) {
  throw new RuntimeException();
}
",0,502,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ThisExpression-qualifier, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
3,if (server.getActiveMQServerControl().getQueueNames().length - baselineQueueCount == 1) {,"if (server.getActiveMQServerControl().getQueueNames().length - baselineQueueCount == 1) {
  return true;
}
 else {
  return false;
}
",0,377,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
4,"if (""POST"".equals(req.getMethod()) && req.getHeader(""Content-Type"") == null) {","if (""POST"".equals(req.getMethod()) && req.getHeader(""Content-Type"") == null) {
  req.addHeader(""Content-Type"",""application/x-www-form-urlencoded"");
}
 else if (""1"".equals(getParameter(request,MULTI_PART_FORM_POST,null))) {
  req.setHeader(""Content-Type"",request.getHeader(""Content-Type""));
}
",0,102,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
5,"if (_nicDao.listByNetworkIdTypeAndGatewayAndBroadcastUri(nic.getNetworkId(), VirtualMachine.Type.User, nic.getIPv4Gateway(), nic.getBroadcastUri()).size() > 1) {","if (_nicDao.listByNetworkIdTypeAndGatewayAndBroadcastUri(nic.getNetworkId(),VirtualMachine.Type.User,nic.getIPv4Gateway(),nic.getBroadcastUri()).size() > 1) {
  return false;
}
",0,55,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
6,"if (tokens.size() == 2 + dimensions.size() + dimensions.size() - 1 && ""["".equals(tokens.get(0))","if (tokens.size() == 2 + dimensions.size() + dimensions.size() - 1 && ""["".equals(tokens.get(0)) && ""]"".equals(tokens.get(tokens.size() - 1))) {
  tokens=tokens.subList(1,tokens.size() - 1);
  int[] index=new int[dimensions.size()];
  for (int i=0; i < index.length; i++) {
    int tokenId=i * 2;
    index[i]=Integer.parseInt(tokens.get(tokenId));
    if (tokenId + 1 < tokens.size() && !"","".equals(tokens.get(tokenId + 1))) {
      throw new IllegalStateException(""Expected a comma but got "" + tokens.get(tokenId + 1));
    }
  }
  int valuePosition=0;
  int multiplier=1;
  for (int i=index.length - 1; i >= 0; i--) {
    int position=index[i];
    valuePosition+=position * multiplier;
    multiplier*=dimensions.get(i);
  }
  return valuePosition;
}
",0,34,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
7,"if (""Message 1"".equals(body) && counter++ < 2) {","if (""Message 1"".equals(body) && counter++ < 2) {
  throw new IllegalArgumentException(""Damn"");
}
",0,39,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
8,"if (acceptTypes.size() == 1 && ""text/mistypedxml"".equals(acceptTypes.get(0).toString())) {","if (acceptTypes.size() == 1 && ""text/mistypedxml"".equals(acceptTypes.get(0).toString())) {
  context.getHeaders().putSingle(""Accept"",""text/xml"");
}
",0,38,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
9,if (AccurateMath.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {,"if (AccurateMath.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {
  Assert.fail(""Failed cross products... i = "" + i + "" j = ""+ j);
}
",0,6,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
10,"if (""lookup"".equals(method.getName()) && method.getParameterTypes().length == 1 && String.class.equals(method.getParameterTypes()[0])) {","if (""lookup"".equals(method.getName()) && method.getParameterTypes().length == 1 && String.class.equals(method.getParameterTypes()[0])) {
  final Object lookedUp=bindings.get(normalize((String)args[0]));
  if (lookedUp != null) {
    if (lookedUp instanceof Reference) {
      return ((Reference)lookedUp).getObject();
    }
 else     if (lookedUp instanceof LinkRef) {
      return ((Context)proxy).lookup(((LinkRef)lookedUp).getLinkName());
    }
    try {
      return method.invoke(delegate,args);
    }
 catch (    final InvocationTargetException nnfe) {
      if (NameNotFoundException.class.isInstance(nnfe.getTargetException())) {
        return lookedUp;
      }
      throw nnfe.getTargetException();
    }
  }
}
",0,16,13,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
11,"if (!""customId"".equals(facesContext.getApplication().getFlowHandler().getCurrentFlowScope().get(""someId"")))","if (!""customId"".equals(facesContext.getApplication().getFlowHandler().getCurrentFlowScope().get(""someId""))) {
  throw new IllegalArgumentException(""someId should be equals to 'customId'"");
}
",0,22,8,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
12,if (b % (1024L * 1024L) == 0L) {,"if (b % (1024L * 1024L) == 0L) {
  LargeMessageTestBase.log.debug(""Read "" + b + "" bytes"");
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
13,if (fieldSeparatorIndexes.get(9) - fieldSeparatorIndexes.get(8) > 1) {,"if (fieldSeparatorIndexes.get(9) - fieldSeparatorIndexes.get(8) > 1) {
  mllpSocketBuffer.write('A');
}
",0,3,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
14,"if (!multiValue && enums == null && !""path"".equals(row.getKind()) && ""object"".equals(row.getType())) {","if (!multiValue && enums == null && !""path"".equals(row.getKind()) && ""object"".equals(row.getType())) {
  if (!value.startsWith(""#"") || value.length() <= 1) {
    result.addInvalidReference(name,value);
  }
}
",0,115,11,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
15,"if(httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()) != null && ""locallogin"".equals(httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()).toString())){","if (httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()) != null && ""locallogin"".equals(httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()).toString())) {
  httpRequest.getSession().setAttribute(""locallogin"",""true"");
  httpRequest.getServletContext().removeAttribute(httpRequest.getRequestedSessionId());
}
",0,2,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
16,"if ("""".equals(typeName.getPrefix()) && !"""".equals(typeName.getNamespaceURI())) {","if ("""".equals(typeName.getPrefix()) && !"""".equals(typeName.getNamespaceURI())) {
  throw new RuntimeException(""No prefix provided in QName for "" + typeName.getNamespaceURI());
}
",0,4,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
17,"if (""toString"".equals(method.getName()) && (args == null || args.length == 0)) {","if (""toString"".equals(method.getName()) && (args == null || args.length == 0)) {
  return NullProxy.this.toString();
}
 else {
  return returns.get(method.getReturnType());
}
",0,17,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
18,"if (""TRACE"".equals(request.method().name()) && !consumer.getEndpoint().isTraceEnabled()) {","if (""TRACE"".equals(request.method().name()) && !consumer.getEndpoint().isTraceEnabled()) {
  HttpResponse response=new DefaultHttpResponse(HTTP_1_1,METHOD_NOT_ALLOWED);
  response.headers().set(Exchange.CONTENT_TYPE,""text/plain"");
  response.headers().set(Exchange.CONTENT_LENGTH,0);
  ctx.writeAndFlush(response);
  ctx.channel().close();
  return;
}
",0,3,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
19,"if (vmSpec.getDetails().containsKey(ApiConstants.BootType.UEFI.toString()) && ""secure"".equalsIgnoreCase(vmSpec.getDetails().get(ApiConstants.BootType.UEFI.toString()))) {","if (vmSpec.getDetails().containsKey(ApiConstants.BootType.UEFI.toString()) && ""secure"".equalsIgnoreCase(vmSpec.getDetails().get(ApiConstants.BootType.UEFI.toString()))) {
  if (bootOptions == null) {
    bootOptions=new VirtualMachineBootOptions();
  }
  bootOptions.setEfiSecureBootEnabled(true);
}
",0,18,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
20,if (classes.size() == 1) cl = classes.iterator().next().getClassLoader();,"if (classes.size() == 1) cl=classes.iterator().next().getClassLoader();
",0,7,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
21,"if (""serialVersionUID"".equals(name) && Modifier.isFinal(access) && Modifier.isStatic(access) && Type.LONG_TYPE.equals(Type.getType(desc))) {","if (""serialVersionUID"".equals(name) && Modifier.isFinal(access) && Modifier.isStatic(access)&& Type.LONG_TYPE.equals(Type.getType(desc))) {
  computeSVUID=false;
  hasSVUID=true;
}
",0,1,14,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
22,if (newPrice.compareTo(high) == 1) high = newPrice;,"if (newPrice.compareTo(high) == 1) high=newPrice;
 else if (newPrice.compareTo(low) == -1) low=newPrice;
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
23,"if (this.comparator.compare(element1, element2) < 1) {","if (this.comparator.compare(element1,element2) < 1) {
  this.minimum=element1;
  this.maximum=element2;
}
 else {
  this.minimum=element2;
  this.maximum=element1;
}
",0,32,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
24,"if (ServiceLoader.class.getName().equals(className) && ""load"".equals(methodName)) {","if (ServiceLoader.class.getName().equals(className) && ""load"".equals(methodName)) {
  requestedClass=clsArg.getName();
  args=new HashMap<Pair<Integer,String>,String>();
  args.put(new Pair<Integer,String>(0,Class.class.getName()),requestedClass);
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    try {
      sm.checkPermission(new ServicePermission(requestedClass,ServicePermission.GET));
    }
 catch (    AccessControlException ace) {
      activator.log(Level.FINE,""No permission to obtain service of type: "" + requestedClass);
      return null;
    }
  }
}
 else {
  requestedClass=className;
  args=null;
}
",0,6,7,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
25,"if (""cifs"".equalsIgnoreCase((String) params.get(""protocol"")) && details != null) {","if (""cifs"".equalsIgnoreCase((String)params.get(""protocol"")) && details != null) {
  String user=details.get(""user"");
  String password=details.get(""password"");
  String domain=details.get(""domain"");
  String updatedPath=(String)params.get(""url"");
  if (user == null || password == null) {
    String errMsg=""Missing cifs user and password details. Add them as details parameter."";
    throw new InvalidParameterValueException(errMsg);
  }
 else {
    try {
      password=DBEncryptionUtil.encrypt(URLEncoder.encode(password,""UTF-8""));
      details.put(""password"",password);
      updatedPath+=""?user="" + user + ""&password=""+ password+ ""&domain=""+ domain;
    }
 catch (    UnsupportedEncodingException e) {
      throw new CloudRuntimeException(""Error while generating the cifs url. "" + e.getMessage());
    }
    store.setUrl(updatedPath);
  }
}
",0,9,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
26,"if (""import"".equals(el.getLocalName()) && StringUtils.isEmpty(el.getAttribute(""targetNamespace""))) {","if (""import"".equals(el.getLocalName()) && StringUtils.isEmpty(el.getAttribute(""targetNamespace""))) {
  hasStuffToRemove=true;
  break;
}
",0,5,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
27,"if(f.exists() || ""Entities.jar"".equals(name)) return f.toURL();","if (f.exists() || ""Entities.jar"".equals(name)) return f.toURL();
 else return null;
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
28,if (library.size()>1) return true;,"if (library.size() > 1) return true;
",0,13,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
29,"if (""xa"".equals(transaction) && !(dataSource instanceof XADataSource)) {","if (""xa"".equals(transaction) && !(dataSource instanceof XADataSource)) {
  throw new IllegalArgumentException(""xa transactions specified, but DataSource does not implement javax.sql.XADataSource"");
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
30,"if (""xa"".equals(transaction) || (transactionManager != null && dataSource instanceof XADataSource)) {","if (""xa"".equals(transaction) || (transactionManager != null && dataSource instanceof XADataSource)) {
  mcf=new XADataSourceMCFFactory();
  if (transaction == null) {
    transaction=""xa"";
  }
}
 else if (dataSource instanceof DataSource) {
  mcf=new DataSourceMCFFactory();
  if (transaction == null) {
    transaction=transactionManager != null ? ""local"" : ""none"";
  }
}
 else {
  throw new IllegalArgumentException(""dataSource must be of type javax.sql.DataSource/XADataSource"");
}
",0,6,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
31,"if ( annoBy.annotatedWith() == Mock.NoAnnotation.class && """".equals( annoBy.namedWith() ) )","if (annoBy.annotatedWith() == Mock.NoAnnotation.class && """".equals(annoBy.namedWith())) {
  numOfSimpleType++;
}
",0,13,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
32,if (contexts.size()==1) result.setContext( Iterables.getOnlyElement(contexts) );,"if (contexts.size() == 1) result.setContext(Iterables.getOnlyElement(contexts));
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
33,if (parts.length != 3) return Optional.absent();,"if (parts.length != 3) return Optional.absent();
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
34,if (Math.abs(anyBestTheoreticalW.score - w.score) >= 0.0000000001) {,"if (Math.abs(anyBestTheoreticalW.score - w.score) >= 0.0000000001) {
  if (bestLive == null && !delayForBest.isLongerThan(elapsedTime)) {
    if (isViable(w.entity)) {
      log.debug(""Theoretical best primary at "" + entity + "" (""+ anyBestTheoreticalW+ "", maybe others) not available, using next best: ""+ w);
      return w.entity;
    }
 else {
      continue;
    }
  }
 else {
    break;
  }
}
",0,8,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
35,"if (size() >= 2) throw new IllegalStateException(""Range must be of size 2; cannot add '""+o+""' when currently ""+this);","if (size() >= 2) throw new IllegalStateException(""Range must be of size 2; cannot add '"" + o + ""' when currently ""+ this);
",0,9,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
36,"if (((Map<?,?>)o).size()!=1) {","if (((Map<?,?>)o).size() != 1) {
  throw new IllegalArgumentException(""Unsupported constraint; map input should have a single key: "" + o);
}
",0,5,6,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
37,if (m.size()==1) return m.values().iterator().next();,"if (m.size() == 1) return m.values().iterator().next();
",0,3,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
38,"if (eagerInit != null && eagerInit instanceof String && ""true"".equalsIgnoreCase((String) eagerInit)","if (eagerInit != null && eagerInit instanceof String && ""true"".equalsIgnoreCase((String)eagerInit) && connectionManager instanceof AbstractConnectionManager) {
  try {
    ((AbstractConnectionManager)connectionManager).doStart();
    try {
      final Object cf=managedConnectionFactory.createConnectionFactory(connectionManager);
      if (cf instanceof ConnectionFactory) {
        final Connection connection=((ConnectionFactory)cf).getConnection();
        connection.getMetaData();
        connection.close();
      }
    }
 catch (    final Exception e) {
    }
  }
 catch (  final Exception e) {
    logger.warning(""Can't start connection manager"",e);
  }
}
",0,3,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
39,"if(!StringUtils.isEmpty(sessionUserName) && ""keyadmin"".equalsIgnoreCase(sessionUserName) && !StringUtils.isEmpty(pathInfo) && pathInfo.contains(""public/v2/api/service"")){","if (!StringUtils.isEmpty(sessionUserName) && ""keyadmin"".equalsIgnoreCase(sessionUserName) && !StringUtils.isEmpty(pathInfo)&& pathInfo.contains(""public/v2/api/service"")) {
  LOG.info(""Session will be created by : "" + sessionUserName);
  userName=sessionUserName;
}
",0,1,12,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
40,"if (path == null || ""."".equals(path) || org.apache.camel.util.ObjectHelper.isEmpty(path)) {","if (path == null || ""."".equals(path) || org.apache.camel.util.ObjectHelper.isEmpty(path)) {
  return;
}
",0,38,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
41,"} else if (!isManaged() || ""false"".equalsIgnoreCase(getConfig(JcloudsLocation.WAIT_FOR_SSHABLE))) {","if (!isManaged() || ""false"".equalsIgnoreCase(getConfig(JcloudsLocation.WAIT_FOR_SSHABLE))) {
  if (LOG.isTraceEnabled()) {
    LOG.trace(""Machine details for {} missing from Jclouds, but skipping SSH test because {}. name={}, version={}, "" + ""arch={}, ram={}, #cpus={}"",new Object[]{this,(isManaged() ? ""waitForSshable=false"" : ""unmanaged""),name,version,architecture,ram,cpus});
  }
  OsDetails osD=new BasicOsDetails(name.orNull(),architecture.orNull(),version.orNull());
  HardwareDetails hwD=new BasicHardwareDetails(cpus.orNull(),ram.orNull());
  return new BasicMachineDetails(hwD,osD);
}
 else {
  if (LOG.isTraceEnabled()) {
    LOG.trace(""Machine details for {} missing from Jclouds, using SSH test instead. name={}, version={}, "" + ""arch={}, ram={}, #cpus={}"",new Object[]{this,name,version,architecture,ram,cpus});
  }
  return super.detectMachineDetails();
}
",0,0,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
42,"if (""wsdl"".equals(a.getType()) && classifier != null && classifier.equals(a.getClassifier())) {","if (""wsdl"".equals(a.getType()) && classifier != null && classifier.equals(a.getClassifier())) {
  hasWsdlAttached=true;
}
",0,3,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
43,if (start.subtract(problem.getInitialState().getTime()).divide(integrator.getCurrentSignedStepsize()).abs().getReal() > 0.001) {,"if (start.subtract(problem.getInitialState().getTime()).divide(integrator.getCurrentSignedStepsize()).abs().getReal() > 0.001) {
  if (expectedStepStart != null) {
    T stepError=RealFieldElement.max(maxTimeError,start.subtract(expectedStepStart).abs());
    for (    T eventTime : problem.getTheoreticalEventsTimes()) {
      stepError=RealFieldElement.min(stepError,start.subtract(eventTime).abs());
    }
    maxTimeError=RealFieldElement.max(maxTimeError,stepError);
  }
  expectedStepStart=start.add(integrator.getCurrentSignedStepsize());
}
",0,36,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
44,"if (""Mac OS X"".equals(System.getProperties().getProperty(""os.name"")) && !JavaUtils.isJava11Compatible()) {","if (""Mac OS X"".equals(System.getProperties().getProperty(""os.name"")) && !JavaUtils.isJava11Compatible()) {
  System.out.println(""Skipping failure test for OSX"");
  return;
}
",0,3,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
45,"if (""properties"".equals(name) && findByTypeWithName(PropertiesComponent.class).containsKey(""properties"")) {","if (""properties"".equals(name) && findByTypeWithName(PropertiesComponent.class).containsKey(""properties"")) {
  return getReferenceByName(manager,name,PropertiesComponent.class).orElse(null);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
46,"if (path == null || ""."".equals(path) || ObjectHelper.isEmpty(path)) {","if (path == null || ""."".equals(path) || ObjectHelper.isEmpty(path)) {
  return;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
47,"if (request.getMethod().equals(""GET"") && ""hb"".equals(request.getParameter(""type""))) {","if (request.getMethod().equals(""GET"") && ""hb"".equals(request.getParameter(""type""))) {
  logger.debug(""GET type=hb : heartbeat received"");
  return;
}
",0,2,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
48,"if (colon != null && "":"".equals(colon.image) && colon.beginColumn - 1 == token.endColumn) {","if (colon != null && "":"".equals(colon.image) && colon.beginColumn - 1 == token.endColumn) {
  return true;
}
",0,4,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
49,"if (security != null && security.isAuthenticate() && ""Basic"".equalsIgnoreCase(security.getConstraint())) {","if (security != null && security.isAuthenticate() && ""Basic"".equalsIgnoreCase(security.getConstraint())) {
  String url=request.uri();
  if (url.contains(""?"")) {
    url=StringHelper.before(url,""?"");
  }
  URI uri=new URI(request.uri());
  String target=uri.getPath();
  String path=consumer.getConfiguration().getPath();
  if (path != null && target.startsWith(path)) {
    path=path.toLowerCase(Locale.US);
    String match=target.toLowerCase(Locale.US);
    if (match.startsWith(path)) {
      target=target.substring(path.length());
    }
  }
  String roles;
  if (security.getSecurityConstraint() != null) {
    roles=security.getSecurityConstraint().restricted(target);
  }
 else {
    roles=""*"";
  }
  if (roles != null) {
    HttpPrincipal principal=extractBasicAuthSubject(request);
    Subject subject=null;
    boolean inRole=true;
    if (principal != null) {
      subject=authenticate(security.getSecurityAuthenticator(),security.getLoginDeniedLoggingLevel(),principal);
      if (subject != null) {
        String userRoles=security.getSecurityAuthenticator().getUserRoles(subject);
        inRole=matchesRoles(roles,userRoles);
      }
    }
    if (principal == null || subject == null || !inRole) {
      if (principal == null) {
        LOG.debug(""Http Basic Auth required for resource: {}"",url);
      }
 else       if (subject == null) {
        LOG.debug(""Http Basic Auth not authorized for username: {}"",principal.getUsername());
      }
 else {
        LOG.debug(""Http Basic Auth not in role for username: {}"",principal.getUsername());
      }
      HttpResponse response=new DefaultHttpResponse(HTTP_1_1,UNAUTHORIZED);
      response.headers().set(""WWW-Authenticate"",""Basic realm=\"""" + security.getRealm() + ""\"""");
      response.headers().set(Exchange.CONTENT_TYPE,""text/plain"");
      response.headers().set(Exchange.CONTENT_LENGTH,0);
      ctx.writeAndFlush(response);
      ctx.channel().close();
      return;
    }
 else {
      LOG.debug(""Http Basic Auth authorized for username: {}"",principal.getUsername());
    }
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
50,"if (""have name"".equals(name.value) && attachinfo.value.getName() != null) {","if (""have name"".equals(name.value) && attachinfo.value.getName() != null) {
  name.value=""return detail + "" + attachinfo.value.getName();
}
 else if (""break schema"".equals(name.value)) {
  name.value=""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"" + ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"";
}
 else {
  name.value=""return detail + "" + name.value;
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
51,if (AccurateMath.abs(pc[i+off2] - yxcorr[ i] / (AccurateMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {,"if (AccurateMath.abs(pc[i + off2] - yxcorr[i] / (AccurateMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {
  Assert.fail(""Assert.failed cross product i = "" + i + "" y"");
}
",0,6,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
52,"} else if (""OPTIONS"".equals(method) || CamelWebSocketHandler.class == this.handler.getClass()","if (""OPTIONS"".equals(method) || CamelWebSocketHandler.class == this.handler.getClass() && CamelWebSocketHandler.class == handler.getClass()) {
  refCount++;
  return this.handler;
}
 else {
  throw new IllegalArgumentException(String.format(""Duplicate handler for %s method: '%s', '%s'"",method,this.handler,handler));
}
",0,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
53,"if (!optionPlaceholder && !lookup && javaType != null && ""array"".equals(row.getType())) {","if (!optionPlaceholder && !lookup && javaType != null && ""array"".equals(row.getType())) {
  if (suffix == null || suffix.isEmpty() || suffix.equals(""."")) {
    result.addInvalidArray(longKey,value);
  }
 else   if (!suffix.startsWith(""["") && !suffix.contains(""]"")) {
    result.addInvalidArray(longKey,value);
  }
 else {
    String index=CatalogHelper.before(suffix.substring(1),""]"");
    boolean valid=validateInteger(index);
    if (!valid) {
      result.addInvalidInteger(longKey,index);
    }
  }
}
",0,0,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
54,"if (!attrs[attr].isIgnored() && ""?"".equals(tokens[attr])) {","if (!attrs[attr].isIgnored() && ""?"".equals(tokens[attr])) {
  return false;
}
",0,12,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
55,"if (StringHelper.countChar(path, '@', idxPath) > 1) {","if (StringHelper.countChar(path,'@',idxPath) > 1) {
  String userInfoPath=idxPath > 0 ? path.substring(0,idxPath) : path;
  int max=userInfoPath.lastIndexOf('@');
  String before=userInfoPath.substring(0,max);
  String after=path.substring(max);
  before=StringHelper.replaceAll(before,""@"",""%40"");
  path=before + after;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
56,"if (""array"".equals(dataType) && schema.items != null","if (""array"".equals(dataType) && schema.items != null && schema.items instanceof Oas30ItemsSchema) {
  emit(""arrayType"",((Oas30ItemsSchema)schema.items).type);
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
57,"if (""org.apache.camel"".equals(groupId) && artifactId.startsWith(""camel-"") && !""test-jar"".equals(type)) {","if (""org.apache.camel"".equals(groupId) && artifactId.startsWith(""camel-"") && !""test-jar"".equals(type)) {
  String starterArtifact=artifactId + ""-starter"";
  File starterFile=new File(""../../components-starter/"" + starterArtifact);
  if (starterFile.exists()) {
    dependencyXml=dependencyXml.replace(artifactId,starterArtifact);
  }
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
58,"&& ""sayHi"".equals(((XMLBindingMessageFormat)obj).getRootNode().getLocalPart())) {","if (obj instanceof XMLBindingMessageFormat && ""sayHi"".equals(((XMLBindingMessageFormat)obj).getRootNode().getLocalPart())) {
  found=true;
  break;
}
",0,7,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
59,else if (c<='F') c = (c -'A') + 10;,"if (c <= 'F') c=(c - 'A') + 10;
 else c=(c - 'a') + 10;
",0,11,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
60,"if(( ch = s.charAt( index )) == '\""' ) {","if ((ch=s.charAt(index)) == '\""') {
  sb.append(""\\\"""");
}
 else if (ch == '\\') {
  sb.append(""\\\\"");
}
 else if (ch == '\'') {
  sb.append(""\\'"");
}
 else {
  sb.append(ch);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
61,"if (""resources"".equals(currentRoot) && attributes.getIndex(""type"") == -1 && attributes.getIndex(""class-name"") == -1 && attributes.getIndex(""provider"") == -1) {","if (""resources"".equals(currentRoot) && attributes.getIndex(""type"") == -1 && attributes.getIndex(""class-name"") == -1 && attributes.getIndex(""provider"") == -1) {
  attributes.addAttribute(null,""type"",""type"",null,""DataSource"");
}
",0,1,15,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
62,"if(json.get(""type"").toString().intern()==""custom"".intern()) {","if (json.get(""type"").toString().intern() == ""custom"".intern()) {
  control=(String)json.get(""control"");
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
63,"if (""rasd:InstanceID"".equals(el.getNodeName()) && el.getTextContent().trim().equals(parent_id)) {","if (""rasd:InstanceID"".equals(el.getNodeName()) && el.getTextContent().trim().equals(parent_id)) {
  return item;
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
64,"""yes"".equalsIgnoreCase(vmEntityVO.getDetails().get(VirtualMachineProfile.Param.UefiFlag.getName())))","if (MapUtils.isNotEmpty(vmEntityVO.getDetails()) && vmEntityVO.getDetails().containsKey(VirtualMachineProfile.Param.UefiFlag.getName()) && ""yes"".equalsIgnoreCase(vmEntityVO.getDetails().get(VirtualMachineProfile.Param.UefiFlag.getName()))) {
  Map<String,String> details=vmEntityVO.getDetails();
  vmProfile.getParameters().put(VirtualMachineProfile.Param.BootType,details.get(VirtualMachineProfile.Param.BootType.getName()));
  vmProfile.getParameters().put(VirtualMachineProfile.Param.BootMode,details.get(VirtualMachineProfile.Param.BootMode.getName()));
  vmProfile.getParameters().put(VirtualMachineProfile.Param.UefiFlag,details.get(VirtualMachineProfile.Param.UefiFlag.getName()));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
65,"if (MapUtils.isNotEmpty(host.getDetails()) && host.getDetails().containsKey(Host.HOST_UEFI_ENABLE) && ""false"".equalsIgnoreCase(host.getDetails().get(Host.HOST_UEFI_ENABLE))) {","if (MapUtils.isNotEmpty(host.getDetails()) && host.getDetails().containsKey(Host.HOST_UEFI_ENABLE) && ""false"".equalsIgnoreCase(host.getDetails().get(Host.HOST_UEFI_ENABLE))) {
  s_logger.debug(""Cannot deploy to specified host as host does n't support uefi vm deployment, returning."");
  return null;
}
",0,0,14,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
66,if (percent.compareTo(new BigDecimal(1)) == 1) {,"if (percent.compareTo(new BigDecimal(1)) == 1) {
  s_logger.debug(""VM "" + vm.getUuid() + "" CPU MHz exceeded host ""+ host.getUuid()+ "" CPU MHz, limiting VM CPU to the host maximum"");
  percent=new BigDecimal(1);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
67,if (Integer.parseInt(vnetList.get(i + 1)) - Integer.parseInt(vnetList.get(i)) > 1) {,"if (Integer.parseInt(vnetList.get(i + 1)) - Integer.parseInt(vnetList.get(i)) > 1) {
  endvnet=vnetList.get(i);
  vnetRange=vnetRange + startvnet + ""-""+ endvnet+ "","";
  startvnet=vnetList.get(i + 1);
}
",0,7,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
68,if ((matchLength = match.length) < 2) {,"if ((matchLength=match.length) < 2) {
  instruction=new TABLESWITCH(match,targets,target);
}
 else {
  sort(0,matchLength - 1);
  if (matchIsOrdered(max_gap)) {
    fillup(max_gap,target);
    instruction=new TABLESWITCH(this.match,this.targets,target);
  }
 else {
    instruction=new LOOKUPSWITCH(this.match,this.targets,target);
  }
}
",0,0,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
69,if (argv[i].charAt(0) == '-') {,"if (argv[i].charAt(0) == '-') {
  if (argv[i].equals(""-d"")) {
    dir=argv[++i];
    if (!dir.endsWith("""" + sep)) {
      dir=dir + sep;
    }
    final File store=new File(dir);
    if (!store.isDirectory()) {
      final boolean created=store.mkdirs();
      if (!created && !store.isDirectory()) {
        System.out.println(""Tried to create the directory "" + dir + "" but failed"");
      }
    }
  }
 else   if (argv[i].equals(""-zip"")) {
    zip_file=argv[++i];
  }
 else {
    System.out.println(""Unknown option "" + argv[i]);
  }
}
 else {
  file_name[files++]=argv[i];
}
",0,0,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
70,if (field.getSpecification().streamAssociations(MixedIn.INCLUDED).limit(1).count() == 0L) {,"if (field.getSpecification().streamAssociations(MixedIn.INCLUDED).limit(1).count() == 0L) {
  if (log.isDebugEnabled()) {
    log.debug(""includeField(Pl, Vec, Str): field is value; done"");
  }
  return false;
}
",0,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
71,if (AccurateMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {,"if (AccurateMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {
  if (!Double.isNaN(expectedStepStart)) {
    double stepError=AccurateMath.max(maxTimeError,AccurateMath.abs(start - expectedStepStart));
    for (    double eventTime : problem.getTheoreticalEventsTimes()) {
      stepError=AccurateMath.min(stepError,AccurateMath.abs(start - eventTime));
    }
    maxTimeError=AccurateMath.max(maxTimeError,stepError);
  }
  expectedStepStart=start + integrator.getCurrentSignedStepsize();
}
",0,5,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
72,if (getFullElements().length - 6 < 10) {,"if (getFullElements().length - 6 < 10) {
  return null;
}
",0,0,4,,"SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
73,if (0x50 == (signature[0] & 0xF0)) {,"if (0x50 == (signature[0] & 0xF0)) {
  for (int i=0; i < SKIPPABLE_FRAME_MAGIC.length; ++i) {
    if (signature[i + 1] != SKIPPABLE_FRAME_MAGIC[i]) {
      return false;
    }
  }
  return true;
}
",0,0,4,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
74,"if (!""XPMEXT"".equals(tokens[tokens.length - 1])) {","if (!""XPMEXT"".equals(tokens[tokens.length - 1])) {
  throw new ImageReadException(""Parsing XPM file failed, "" + ""can't parse <Values> section XPMEXT"");
}
",0,3,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
75,if (householderVectors[m][m - 1] != 0.0) {,"if (householderVectors[m][m - 1] != 0.0) {
  for (int i=m + 1; i <= high; i++) {
    ort[i]=householderVectors[i][m - 1];
  }
  for (int j=m; j <= high; j++) {
    double g=0.0;
    for (int i=m; i <= high; i++) {
      g+=ort[i] * pa[i][j];
    }
    g=(g / ort[m]) / householderVectors[m][m - 1];
    for (int i=m; i <= high; i++) {
      pa[i][j]+=g * ort[i];
    }
  }
}
",0,4,5,,"SimpleName(ArrayAccess-array, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
76,"if (""getExtension"".equals(method.getName()) && args != null && args.length == 1 && ClassLoader.class.equals(args[0])) {","if (""getExtension"".equals(method.getName()) && args != null && args.length == 1 && ClassLoader.class.equals(args[0])) {
  final ClassLoader extensionLoader=ClassLoader.class.cast(method.invoke(bus,args));
  if (CxfContainerClassLoader.class.isInstance(extensionLoader) && !CxfContainerClassLoader.class.cast(extensionLoader).hasTccl()) {
    return null;
  }
  return extensionLoader;
}
",0,1,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
77,if (hK[k - diagOffset] != 0.0) {,"if (hK[k - diagOffset] != 0.0) {
  for (int j=k; j < m; ++j) {
    double alpha=0;
    for (int i=k; i < m; ++i) {
      alpha-=ua[i][j] * householderVectors[i][k - diagOffset];
    }
    alpha/=diagonal[k - diagOffset] * hK[k - diagOffset];
    for (int i=k; i < m; ++i) {
      ua[i][j]+=-alpha * householderVectors[i][k - diagOffset];
    }
  }
}
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
78,"if (other.viewPart(column + 1, other.size() - column - 1).norm(1) > 1.0e-14) {","if (other.viewPart(column + 1,other.size() - column - 1).norm(1) > 1.0e-14) {
  throw new IllegalArgumentException(""Cannot set lower portion of triangular matrix to non-zero"");
}
",0,2,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
79,} else if (AccurateMath.abs(res.vals[res.nVals - 1]) < 1e-100) {,"if (AccurateMath.abs(res.vals[res.nVals - 1]) < 1e-100) {
  return res.vals[n];
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
80,if (interceptorMethods[0].getParameterTypes().length == 1),"if (interceptorMethods[0].getParameterTypes().length == 1) {
  return interceptorMethods[0].invoke(instance,invocationContext);
}
 else {
  return invocationContext.proceed();
}
",0,2,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
81,if (this.varCovData.length > 1) {,"if (this.varCovData.length > 1) {
  if (i == j) {
    return varCovData[i][i];
  }
 else   if (i >= varCovData[j].length) {
    return varCovData[i][j];
  }
 else {
    return varCovData[j][i];
  }
}
 else {
  if (i > j) {
    return varCovData[0][(i + 1) * i / 2 + j];
  }
 else {
    return varCovData[0][(j + 1) * j / 2 + i];
  }
}
",0,0,4,,"ThisExpression(FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
82,if (((xInt ^ yInt) & SGN_MASK) == 0L) {,"if (((xInt ^ yInt) & SGN_MASK) == 0L) {
  isEqual=Math.abs(xInt - yInt) <= maxUlps;
}
 else {
  final long deltaPlus;
  final long deltaMinus;
  if (xInt < yInt) {
    deltaPlus=yInt - POSITIVE_ZERO_DOUBLE_BITS;
    deltaMinus=xInt - NEGATIVE_ZERO_DOUBLE_BITS;
  }
 else {
    deltaPlus=xInt - POSITIVE_ZERO_DOUBLE_BITS;
    deltaMinus=yInt - NEGATIVE_ZERO_DOUBLE_BITS;
  }
  if (deltaPlus > maxUlps) {
    isEqual=false;
  }
 else {
    isEqual=deltaMinus <= (maxUlps - deltaPlus);
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
83,if (logLevel >= 4) { factory.setDebug(true); },"if (logLevel >= 4) {
  factory.setDebug(true);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
84,"if (""file"".equals(scheme) && (authority == null || """".equals(authority))) {","if (""file"".equals(scheme) && (authority == null || """".equals(authority))) {
  return true;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
85,"if (""file"".equals(scheme) && authority != null && authority.contains("":"")) {","if (""file"".equals(scheme) && authority != null && authority.contains("":"")) {
  return false;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
86,"if (is == null && uri != null && ""file"".equals(uri.getScheme())) {","if (is == null && uri != null && ""file"".equals(uri.getScheme())) {
  try {
    file=new File(uri);
  }
 catch (  IllegalArgumentException iae) {
    file=new File(uri.toURL().getPath());
    if (!file.exists()) {
      file=null;
    }
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
87,"if (""setResource3"".equals(m.getName()) && types[i].equals(String.class)) {","if (""setResource3"".equals(m.getName()) && types[i].equals(String.class)) {
  types[i]=CharSequence.class;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
88,"if (""true"".equals(val) || Boolean.TRUE.equals(val) || mtomEnabled) {","if (""true"".equals(val) || Boolean.TRUE.equals(val) || mtomEnabled) {
  setMtomEnabled(true);
  aegisContext.setMtomEnabled(true);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, IfStatement-expression, ),
"
89,"if (Version.parseVersion(System.getProperty(""java.specification.version"")).getMajor() > 1){","if (Version.parseVersion(System.getProperty(""java.specification.version"")).getMajor() > 1) {
  if (java.nio.file.Files.exists(java.nio.file.FileSystems.getFileSystem(URI.create(""jrt:/"")).getPath(""modules"",""java.se.ee""))) {
    composite.add(vmOption(""--add-modules=java.se.ee""));
  }
  composite.add(vmOption(""--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.lang=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.lang.invoke=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.io=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.net=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.nio=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util.jar=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util.regex=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util.zip=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/sun.nio.ch=ALL-UNNAMED""));
}
",0,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
90,"if (""/"".equals(this.servletPath) && !customServletPath) {","if (""/"".equals(this.servletPath) && !customServletPath) {
  if (this.pathInfo == null) {
    this.pathInfo=""/"";
    this.servletPath="""";
  }
 else {
    this.servletPath="""";
  }
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
91,"if (""Linux"".equals(System.getProperties().getProperty(""os.name""))","if (""Linux"".equals(System.getProperties().getProperty(""os.name"")) && System.getProperties().getProperty(""os.version"").indexOf(""el"") > 0) {
  System.out.println(""Skipping broadcast test for REL"");
  return;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
92,if (current.getLower().longValue() - previous.getUpper().longValue() == 1) {,"if (current.getLower().longValue() - previous.getUpper().longValue() == 1) {
  previous.setUpper(current.getUpper());
  ranges.remove(i);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
93,"if (realClass == SecureBookStore.class && ""getThatBook"".equals(m.getName())","if (realClass == SecureBookStore.class && ""getThatBook"".equals(m.getName()) && ""baddy"".equals(p.getName())) {
  return new MessageContentsList(Response.status(Response.Status.FORBIDDEN).build());
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
94,"if (10 > mbs.queryNames(name, null).size()) {","if (10 > mbs.queryNames(name,null).size()) {
  Thread.sleep(100);
}
 else {
  break;
}
",0,0,6,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
95,"if (latch != null && ""segment/count"".equals(event.toMap().get(""metric""))) {","if (latch != null && ""segment/count"".equals(event.toMap().get(""metric""))) {
  latch.countDown();
}
",0,4,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
96,if (test.prefix.charAt(0) == '_') {,"if (test.prefix.charAt(0) == '_') {
  ((BindingProvider)port).getRequestContext().put(SecurityConstants.STS_TOKEN_DO_CANCEL,Boolean.TRUE);
}
",0,10,4,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
97,"if ((authentication.getCredentials() == null) || """".equals(authentication.getCredentials())) {","if ((authentication.getCredentials() == null) || """".equals(authentication.getCredentials())) {
  throw new BadCredentialsException(messages.getMessage(""FederationAuthenticationProvider.noSignInRequest"",""Failed to get SignIn request""));
}
",0,19,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
98,"if ((principal == null) || """".equals(principal) || (credentials == null)","if ((principal == null) || """".equals(principal) || (credentials == null)|| """".equals(credentials)|| (authorities == null)|| (userDetails == null)|| (response == null)) {
  throw new IllegalArgumentException(""Cannot pass null or empty values to constructor"");
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
99,"|| """".equals(credentials) || (authorities == null) || (userDetails == null) || (response == null)) {","if ((principal == null) || """".equals(principal) || (credentials == null)|| """".equals(credentials)|| (authorities == null)|| (userDetails == null)|| (response == null)) {
  throw new IllegalArgumentException(""Cannot pass null or empty values to constructor"");
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
100,if (number.charAt(lastDigitIndex--) != 'i') {,"if (number.charAt(lastDigitIndex--) != 'i') {
  throw new IAE(""Invalid format of number: %s"",rawNumber);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
101,"if (""local"".equals(JobHelper.getJobTrackerAddress(config)) || determineIntervals) {","if (""local"".equals(JobHelper.getJobTrackerAddress(config)) || determineIntervals) {
  return 0;
}
 else {
  return reducerLookup.get(interval);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
102,"if (tuple.getValues().size() == 1 && ""val"".equals(tuple.getValue(0))) {","if (tuple.getValues().size() == 1 && ""val"".equals(tuple.getValue(0))) {
  collector.ack(tuple);
}
 else {
  nonTickTuple.set(tuple);
}
",0,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
103,"if (serviceProperties == null || ""false"".equals(serviceProperties.getProperty(IGNORE_DEFAULT_VALUES_PROP, ""false""))) {","if (serviceProperties == null || ""false"".equals(serviceProperties.getProperty(IGNORE_DEFAULT_VALUES_PROP,""false""))) {
  props.putAll(provider.getProperties());
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
104,if (fieldEntry.getValue().entrySet().stream().mapToInt(Multiset.Entry::getCount).sum() > 1) {,"if (fieldEntry.getValue().entrySet().stream().mapToInt(Multiset.Entry::getCount).sum() > 1) {
  errors.add(StringUtils.format(""[%s] seen in %s"",fieldEntry.getKey(),fieldEntry.getValue().entrySet().stream().map(entry -> StringUtils.format(""%s%s"",entry.getElement(),entry.getCount() == 1 ? """" : StringUtils.format("" (%d occurrences)"",entry.getCount()))).collect(Collectors.joining("", ""))));
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ExpressionMethodReference-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
105,"if (""true"".equals(this.required) && readOnly == false)","if (""true"".equals(this.required) && readOnly == false) {
  HtmlTag required=writer.startTag(dic.InputRequiredTag());
  required.addAttribute(""class"",dic.InputRequiredClass());
  required.beginBody(""*"");
  required.endTag();
}
",0,12,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
106,{   if (s.charAt(i)>='A'),"if (s.charAt(i) >= 'A') return error(FieldErrors.InputNoNumberFormat,null,s);
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
"
107,"if (msgLen > curPos + 2 && ""1 "".equals(msg.substring(curPos, curPos + 2))) {","if (msgLen > curPos + 2 && ""1 "".equals(msg.substring(curPos,curPos + 2))) {
  version=msg.substring(curPos,curPos + 1);
  headers.put(SyslogUtils.SYSLOG_VERSION,version);
  curPos+=2;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
108,if (archives.size() == 1) return archives.get(0).iterator();,"if (archives.size() == 1) return archives.get(0).iterator();
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
109,if (method.getParameterTypes().length != 1) continue;,"if (method.getParameterTypes().length != 1) continue;
",0,0,5,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
110,if (key[++data] == '\0') {,"if (key[++data] == '\0') {
  ++data;
  break;
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
111,if ((b&1)==1) result++;,"if ((b & 1) == 1) result++;
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
112,if (c==':') return i>0;,"if (c == ':') return i > 0;
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
113,if (((Character) value) == '1') {,"if (((Character)value) == '1') {
  self.selectorPath.setVisible(false);
}
 else {
  self.selectorPath.setVisible(true);
}
",0,0,3,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
114,if (searchTerms[0].charAt(0) == '.') {,"if (searchTerms[0].charAt(0) == '.') {
  if (rfc822Name.getCanonicalDomainName().endsWith(searchTerms[0])) {
    return ER_TRUE;
  }
 else {
    return ER_FALSE;
  }
}
 else {
  if (rfc822Name.getCanonicalDomainName().equals(searchTerms[0])) {
    return ER_TRUE;
  }
 else {
    return ER_FALSE;
  }
}
",0,0,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
115,"if ( ""java"".equals ( request.getLanguage() ) || null == request.getLanguage() )","if (""java"".equals(request.getLanguage()) || null == request.getLanguage()) {
  cpdLanguage=new JavaLanguage(request.getLanguageProperties());
}
 else if (""javascript"".equals(request.getLanguage())) {
  cpdLanguage=new EcmascriptLanguage();
}
 else if (""jsp"".equals(request.getLanguage())) {
  cpdLanguage=new JSPLanguage();
}
 else {
  cpdLanguage=LanguageFactory.createLanguage(request.getLanguage(),request.getLanguageProperties());
}
",0,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
116,"if (fieldsAnnotatedWith(cls, PivotRow.class).size()>1){","if (fieldsAnnotatedWith(cls,PivotRow.class).size() > 1) {
  throw new IllegalArgumentException(""Only one annotation for row allowed"");
}
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
117,if (getSize(testRootNode.getNodes(childNode.getName())) > 1) {,"if (getSize(testRootNode.getNodes(childNode.getName())) > 1) {
  path+=""["" + childNode.getIndex() + ""]"";
}
",0,0,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
118,"if (!""HTTP"".equals(statusLine.substring(at, at += 4))) {","if (!""HTTP"".equals(statusLine.substring(at,at+=4))) {
  log.warn(""Status-Line '"" + statusLine + ""' does not start with HTTP"");
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
119,"if (""-"".equals(token) || IS_NUMBER.matcher(token).matches()) {","if (""-"".equals(token) || IS_NUMBER.matcher(token).matches()) {
  final int arrayIndex=getArrayIndex(token,jsonArray,false);
  final JsonArrayBuilder arrayBuilder=provider.createArrayBuilder();
  final int jsonArraySize=jsonArray.size();
  for (int i=0; i < jsonArraySize; i++) {
    final boolean matchesIndex=i == arrayIndex;
    if (matchesIndex && currentPosition != referenceTokens.size() - 1) {
      arrayBuilder.add(remove(jsonArray.get(i),currentPosition + 1));
    }
 else     if (!matchesIndex) {
      arrayBuilder.add(jsonArray.get(i));
    }
  }
  return arrayBuilder.build();
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
120,"if (type.getValueType().equals(ValueType.STRING) && ""integer"".equals(JsonString.class.cast(type).getString())) {","if (type.getValueType().equals(ValueType.STRING) && ""integer"".equals(JsonString.class.cast(type).getString())) {
  return Optional.of(new MultipleOfValidation.Impl(model.toPointer(),model.getValueProvider(),1));
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
121,"if (""ShiroProvider"".equalsIgnoreCase(name) && params != null && !params.isEmpty()) {","if (""ShiroProvider"".equalsIgnoreCase(name) && params != null && !params.isEmpty()) {
  params.sort(Comparator.comparing((  Param p) -> SHIRO_PROVIDER_PARAM_ORDER.getOrDefault(p.getName(),Integer.MAX_VALUE)).thenComparing((  Param p) -> SHIRO_PROVIDER_PARAM_ORDER.getOrDefault(p.getName(),Integer.MAX_VALUE)));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
122,"if (""T"".equals(matcher.group(2)) == false) {","if (""T"".equals(matcher.group(2)) == false) {
  final String dayMatch=matcher.group(1);
  final String hourMatch=matcher.group(3);
  final String minuteMatch=matcher.group(4);
  final String secondMatch=matcher.group(5);
  if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {
    final long daysAsSecs=parseNumber(text,dayMatch,SECONDS_PER_DAY,""days"");
    final long hoursAsSecs=parseNumber(text,hourMatch,SECONDS_PER_HOUR,""hours"");
    final long minsAsSecs=parseNumber(text,minuteMatch,SECONDS_PER_MINUTE,""minutes"");
    final long seconds=parseNumber(text,secondMatch,1,""seconds"");
    try {
      return create(daysAsSecs,hoursAsSecs,minsAsSecs,seconds);
    }
 catch (    final ArithmeticException ex) {
      throw new IllegalArgumentException(""Text cannot be parsed to a Duration (overflow) "" + text,ex);
    }
  }
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
123,"if (arity.size() == 1) { return Range.valueOf(arity.min * index.size() + """"); }","if (arity.size() == 1) {
  return Range.valueOf(arity.min * index.size() + """");
}
",0,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
124,"if (classes.length < 2) { throw new ParameterException(CommandLine.this, ""Field "" + field + "" needs two types (one for the map key, one for the value) but only has "" + classes.length + "" types configured.""); }","if (classes.length < 2) {
  throw new ParameterException(CommandLine.this,""Field "" + field + "" needs two types (one for the map key, one for the value) but only has ""+ classes.length+ "" types configured."");
}
",0,1,9,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(ThisExpression-qualifier, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
125,"if (""nanos"".equals(unit) && !Boolean.FALSE.equals(rounded)) {","if (""nanos"".equals(unit) && !Boolean.FALSE.equals(rounded)) {
  return EPOCH_NANOS_RESOLVER;
}
 else if (""millis"".equals(unit)) {
  return !Boolean.TRUE.equals(rounded) ? EPOCH_MILLIS_RESOLVER : EPOCH_MILLIS_ROUNDED_RESOLVER;
}
 else if (""millis.nanos"".equals(unit) && rounded == null) {
  return EPOCH_MILLIS_NANOS_RESOLVER;
}
 else if (""secs"".equals(unit)) {
  return !Boolean.TRUE.equals(rounded) ? EPOCH_SECS_RESOLVER : EPOCH_SECS_ROUNDED_RESOLVER;
}
 else if (""secs.nanos"".equals(unit) && rounded == null) {
  return EPOCH_SECS_NANOS_RESOLVER;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
126,if (wpvList.get(0).getVector().get(0) <= 2.0) {,"if (wpvList.get(0).getVector().get(0) <= 2.0) {
  for (  WeightedPropertyVectorWritable wv : wpvList) {
    Vector v=wv.getVector();
    int idx=v.maxValueIndex();
    assertTrue(""bad cluster!"",v.get(idx) <= 2.0);
  }
  assertEquals(""Wrong size cluster"",4,wpvList.size());
}
 else {
  for (  WeightedPropertyVectorWritable wv : wpvList) {
    Vector v=wv.getVector();
    int idx=v.minValueIndex();
    assertTrue(""bad cluster!"",v.get(idx) > 2.0);
  }
  assertEquals(""Wrong size cluster"",5,wpvList.size());
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
127,"if ( c != null && ""User-Agent"".equals( c.getValue( null ) ) )","if (c != null && ""User-Agent"".equals(c.getValue(null))) {
  found=true;
  break;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
128,"if ( ""."".equals( path ) || subpath.equals( path ) || subpath.startsWith( path + File.separator ) )","if (""."".equals(path) || subpath.equals(path) || subpath.startsWith(path + File.separator)) {
  return true;
}
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
129,if ( 'y' != inputHandler.readLine().toLowerCase().charAt( 0 ) ),"if ('y' != inputHandler.readLine().toLowerCase().charAt(0)) {
  disableMaterialization=false;
}
",0,1,6,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
130,if (groupDirs.length != 1) break;,"if (groupDirs.length != 1) break;
",0,0,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
131,"if ((v < 0) && ""reprint"".equals(str)) {","if ((v < 0) && ""reprint"".equals(str)) {
  v=findChar(stty,""rprnt"");
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
132,"if (!""jsfc"".equals(oa[i].getLocalName()))","if (!""jsfc"".equals(oa[i].getLocalName())) {
  na[p++]=oa[i];
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
133,"if (""true"".equals(validate) && log.isLoggable(Level.WARNING))","if (""true"".equals(validate) && log.isLoggable(Level.WARNING)) {
  List<String> warnings=FacesConfigValidator.validate(externalContext);
  for (  String warning : warnings) {
    log.warning(warning);
  }
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
134,"if(!""*"".equals(keyValue[1]) && """".equals(configuredValue))","if (!""*"".equals(keyValue[1]) && """".equals(configuredValue)) {
  continue;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
135,"if(""*"".equals(keyValue[1]) && !"""".equals(configuredValue))","if (""*"".equals(keyValue[1]) && !"""".equals(configuredValue)) {
  result=true;
  continue;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
136,"if("""".equals(key.getSimpleName()) && BundleKey.class.isAssignableFrom(key.getSuperclass()))","if ("""".equals(key.getSimpleName()) && BundleKey.class.isAssignableFrom(key.getSuperclass())) {
  key=(Class<? extends BundleKey>)key.getSuperclass();
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
137,"if(Named.class.equals(annotationClass) || ""javax.faces.bean.ManagedBean"".equals(annotationClass.getName()))","if (Named.class.equals(annotationClass) || ""javax.faces.bean.ManagedBean"".equals(annotationClass.getName())) {
  return true;
}
",0,0,7,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
138,"if (""/"".endsWith(this.basePath) && this.simpleClassNameToPathMapping.size() == 1)","if (""/"".endsWith(this.basePath) && this.simpleClassNameToPathMapping.size() == 1) {
  className=""/"" + this.simpleClassNameToPathMapping.get(this.viewDefinitionClass.getSimpleName()) + ""/"";
}
 else {
  className=className.substring(className.lastIndexOf('.') + 1);
  className=convertToPathSyntax(className,this.simpleClassNameToPathMapping);
  className=createPageName(className);
  className=className.substring(0,className.lastIndexOf('/') + 1);
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
139,"if(className.contains(""$"") && ""."".equals(this.basePath))","if (className.contains(""$"") && ""."".equals(this.basePath)) {
  className=className.substring(className.lastIndexOf('.') + 1);
  className=convertToPathSyntax(className,this.simpleClassNameToPathMapping);
}
 else if (className.contains(""$"")) {
  className=className.substring(className.lastIndexOf('$') + 1);
}
 else {
  className=className.substring(className.lastIndexOf('.') + 1);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
140,"if(!"""".equals(view.inline()[0]))","if (!"""".equals(view.inline()[0])) {
  throw new IllegalStateException(""Definition error at: "" + annotatedType.getJavaClass().getName() + "" it isn't allowed to define a class level @""+ View.class.getName()+ "" without a typesafe view config. Please don't use @View(inline=\""...\"") for this use-case!"");
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
141,"if ((_state.enteringPPR != null) && ""id"".equals(name))","if ((_state.enteringPPR != null) && ""id"".equals(name)) {
  if (_LOG.isFine()) {
    _LOG.fine(""Using id {1} for element of {0}"",new Object[]{_state.enteringPPR,value});
  }
  _state.pprContext.addRenderedPartialTarget(value.toString());
  _state.enteringPPR=null;
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
142,if (numScripts == 1) { return scripts[firstNonNullScript]; },"if (numScripts == 1) {
  return scripts[firstNonNullScript];
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
143,if (stringArray.length == 1) return stringArray[0];,"if (stringArray.length == 1) return stringArray[0];
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, ReturnStatement-expression, IfStatement-thenStatement, ),
"
144,"if ( ( groupIdPrefix + "".modules"" ).equals( a.getGroupId() ) && ""org-netbeans-bootstrap"".equals( a.","if ((groupIdPrefix + "".modules"").equals(a.getGroupId()) && ""org-netbeans-bootstrap"".equals(a.getArtifactId())) {
  version=a.getBaseVersion();
  break;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
145,"if (isolation != null && ""snapshot"".equals(isolation) && !this.handler.supportsDataIsolation()) {","if (isolation != null && ""snapshot"".equals(isolation) && !this.handler.supportsDataIsolation()) {
  odResponse.setStatusCode(HttpStatusCode.PRECONDITION_FAILED.getStatusCode());
  return;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
146,"if (new QName(""uri:another:HelloWorld"", ""HelloWorldService"").equals(endpoint.getServiceName()) && ""HelloWorldPort"".equals(endpoint.getEndpointName())) {","if (new QName(""uri:another:HelloWorld"",""HelloWorldService"").equals(endpoint.getServiceName()) && ""HelloWorldPort"".equals(endpoint.getEndpointName())) {
  return DomUtil.parse(getClass().getResourceAsStream(""HelloWorld-DOC.wsdl""));
}
 else {
  return null;
}
",0,1,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
147,"if (!""POST"".equals(((HTTPBinding) bindingElement).getVerb())) {","if (!""POST"".equals(((HTTPBinding)bindingElement).getVerb())) {
  throw new UnsupportedOperationException(((HTTPBinding)bindingElement).getVerb() + "" not supported"");
}
",0,1,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
148,if (++TaskResubmitDriver.this.failuresSeen <= 1) {,"if (++TaskResubmitDriver.this.failuresSeen <= 1) {
  activeContext.submitTask(getTaskConfiguration());
}
 else {
  activeContext.close();
}
",0,0,3,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
149,if (TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start) > 60) {,"if (TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start) > 60) {
  throw new TimeoutException(""Server did not start after 60 seconds"");
}
",0,0,6,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
150,"if (exchange.getStatus() == ExchangeStatus.ACTIVE && ""receiver3"".equals(exchange.getService().getLocalPart())) {","if (exchange.getStatus() == ExchangeStatus.ACTIVE && ""receiver3"".equals(exchange.getService().getLocalPart())) {
  sent.add((String)exchange.getMessage(""in"").getProperty(DefaultFileMarshaler.FILE_NAME_PROPERTY));
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
151,"|| ""1"".equals(getParameter(request, Param.NO_CACHE.getKey(), null))) {","if (results.isStrictNoCache() || ""1"".equals(getParameter(request,Param.NO_CACHE.getKey(),null))) {
  refreshInterval=0;
}
 else if (getParameter(request,Param.REFRESH.getKey(),null) != null) {
  try {
    refreshInterval=Integer.valueOf(getParameter(request,Param.REFRESH.getKey(),null));
  }
 catch (  NumberFormatException nfe) {
    throw new GadgetException(GadgetException.Code.INVALID_PARAMETER,""refresh parameter is not a number"",HttpResponse.SC_BAD_REQUEST);
  }
}
 else {
  refreshInterval=Math.max(60 * 60,(int)(results.getCacheTtl() / 1000L));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
152,"if (!""1"".equals(getParameter(request, MULTI_PART_FORM_POST, null))) {","if (!""1"".equals(getParameter(request,MULTI_PART_FORM_POST,null))) {
  response.setHeader(""Content-Disposition"",""attachment;filename=p.txt"");
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
153,"} else if (""CPU"".equals(dp.name) && dp.value instanceof Map) {","if (""CPU"".equals(dp.name) && dp.value instanceof Map) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object sys=m.get(""sys-ms"");
  if (sys instanceof Number) {
    systemCpu.getAndAdd(((Number)sys).longValue());
  }
  Object user=m.get(""user-ms"");
  if (user instanceof Number) {
    userCpu.getAndAdd(((Number)user).longValue());
  }
}
 else if (dp.name.startsWith(""GC/"") && dp.value instanceof Map) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object count=m.get(""count"");
  if (count instanceof Number) {
    gcCount.getAndAdd(((Number)count).longValue());
  }
  Object time=m.get(""timeMs"");
  if (time instanceof Number) {
    gcMs.getAndAdd(((Number)time).longValue());
  }
}
 else if (dp.name.startsWith(""memory/"") && dp.value instanceof Map) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object val=m.get(""usedBytes"");
  if (val instanceof Number) {
    MemMeasure mm=memoryBytes.get(worker);
    if (mm == null) {
      mm=new MemMeasure();
      MemMeasure tmp=memoryBytes.putIfAbsent(worker,mm);
      mm=tmp == null ? mm : tmp;
    }
    mm.update(((Number)val).longValue());
  }
}
 else if (dp.name.equals(""__receive"")) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object pop=m.get(""population"");
  Object cap=m.get(""capacity"");
  if (pop instanceof Number && cap instanceof Number) {
    double full=((Number)pop).doubleValue() / ((Number)cap).doubleValue();
    if (full >= 0.8) {
      congested.get().put(topologyId + "":"" + taskInfo.srcComponentId+ "":""+ taskInfo.srcTaskId,""receive "" + pop + ""/""+ cap);
    }
  }
}
 else if (dp.name.equals(""__skipped-max-spout-ms"")) {
  if (dp.value instanceof Number) {
    skippedMaxSpoutMs.getAndAdd(((Number)dp.value).longValue());
    double full=((Number)dp.value).doubleValue() / 10_000.0;
    if (full >= 0.8) {
      congested.get().put(topologyId + "":"" + taskInfo.srcComponentId+ "":""+ taskInfo.srcTaskId,""max.spout.pending "" + (int)(full * 100) + ""%"");
    }
  }
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
154,if (768.0 == (double) readConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB)) {,"if (768.0 == (double)readConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB)) {
  topologyUpdated=true;
  break;
}
",0,0,5,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
155,"if(DerbyStore.NAME.equals(schemeSpecificPart[0]) && ""memory"".equals(schemeSpecificPart[1])) {","if (DerbyStore.NAME.equals(schemeSpecificPart[0]) && ""memory"".equals(schemeSpecificPart[1])) {
  Connection conn=null;
  try {
    String removingUri=catalogUri.split("";"")[0] + "";drop=true"";
    Class.forName(DerbyStore.CATALOG_DRIVER).newInstance();
    conn=DriverManager.getConnection(removingUri);
  }
  finally {
    CatalogUtil.closeQuietly(conn);
  }
}
",0,0,8,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
156,if (i == 1)   minute = Integer.parseInt(timeTokens[i]);,"if (i == 1) minute=Integer.parseInt(timeTokens[i]);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
157,if (++out.d > 7) {,"if (++out.d > 7) {
  out.d=1;
}
",0,0,2,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
158,"if (connInfo.scheme.split("":"").length > 1) {","if (connInfo.scheme.split("":"").length > 1) {
  int idx=uriStr.indexOf(':');
  uri=URI.create(uriStr.substring(idx + 1));
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
159,"if (""org/apache/tajo/org/objectweb"".equals(pkgName) && !name.startsWith(""<"")","if (""org/apache/tajo/org/objectweb"".equals(pkgName) && !name.startsWith(""<"") && s.equals(name)) {
  System.out.println(""INFO: "" + clsName + "".""+ s+ "" could be renamed"");
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
160,"if (""L[T"".indexOf(getChar(signature, pos)) != -1) {","if (""L[T"".indexOf(getChar(signature,pos)) != -1) {
  pos=checkFieldTypeSignature(signature,pos);
}
",0,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
161,"if (""true"".equals(configuration.getProperty(OpenEjbContainer.OPENEJB_EMBEDDED_REMOTABLE, ""false""))","if (""true"".equals(configuration.getProperty(OpenEjbContainer.OPENEJB_EMBEDDED_REMOTABLE,""false"")) || annotation != null || annotationOld != null) {
  try {
    if (annotation != null) {
      final List<String> value=new ArrayList<>(asList(annotation.value()));
      if (annotation.jaxrs()) {
        value.add(""jaxrs"");
      }
      if (annotation.jaxws()) {
        value.add(""jaxws"");
      }
      initFilteredServiceManager(value.toArray(new String[value.size()]));
    }
    if (annotationOld != null) {
      initFilteredServiceManager(annotationOld.value());
    }
    serviceManager=new ServiceManagerProxy(false);
    serviceManager.start();
  }
 catch (  final ServiceManagerProxy.AlreadyStartedException e) {
    throw new OpenEJBRuntimeException(e);
  }
}
",0,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
162,"if (configuration.isUnsafeEjbd() && ""*"".equals(properties.getProperty(""tomee.serialization.class.blacklist"", ""-"").trim())) {","if (configuration.isUnsafeEjbd() && ""*"".equals(properties.getProperty(""tomee.serialization.class.blacklist"",""-"").trim())) {
  properties.remove(""tomee.serialization.class.blacklist"");
  properties.put(""tomee.serialization.class.whitelist"",""*"");
  System.setProperty(""tomee.serialization.class.blacklist"",System.getProperty(""tomee.serialization.class.blacklist"",""-""));
  reloadClientSerializationConfig();
}
",0,3,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
163,"if (!""secret"".equals(event.getCredential())) return;","if (!""secret"".equals(event.getCredential())) return;
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
164,"&& ""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.force-unit-type"", unit.getProperty(""openejb.force-unit-type"", ""true"")))) {","if (unit.getJtaDataSource() == null && unit.getNonJtaDataSource() == null && ""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.force-unit-type"",unit.getProperty(""openejb.force-unit-type"",""true"")))) {
  unit.setTransactionType(TransactionType.JTA);
}
",0,2,10,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
165,"if (!""true"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.cdi.activated"", ""true""))) {","if (!""true"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.cdi.activated"",""true""))) {
  return false;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
166,"if (""false"".equalsIgnoreCase(serviceInfo.properties.getProperty(""SkipImplicitAttributes"", ""false"")) && !properties) {","if (""false"".equalsIgnoreCase(serviceInfo.properties.getProperty(""SkipImplicitAttributes"",""false"")) && !properties) {
  serviceRecipe.setProperty(""transactionManager"",transactionManager);
  serviceRecipe.setProperty(""ServiceId"",serviceInfo.id);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
167,"if (""destination"".equalsIgnoreCase(property) && info.id.equals(unsetProperties.get(""destination""))) {","if (""destination"".equalsIgnoreCase(property) && info.id.equals(unsetProperties.get(""destination""))) {
  continue;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
168,"&& ""org.apache.webbeans.jsf.DefaultConversationService"".equals(webBeansContext.getOpenWebBeansConfiguration().getProperty(ConversationService.class.getName()))) {","if (webBeansContext.getOpenWebBeansConfiguration().supportsConversation() && ""org.apache.webbeans.jsf.DefaultConversationService"".equals(webBeansContext.getOpenWebBeansConfiguration().getProperty(ConversationService.class.getName()))) {
  webBeansContext.registerService(ConversationService.class,ConversationService.class.cast(webBeansContext.getService(ContextsService.class)));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
169,"if (tomEEMojo.settings.getLocalRepository() == null || """".equals(tomEEMojo.settings.getLocalRepository())) {","if (tomEEMojo.settings.getLocalRepository() == null || """".equals(tomEEMojo.settings.getLocalRepository())) {
  tomEEMojo.settings.setLocalRepository(System.getProperty(""openejb.m2.home"",System.getProperty(""user.home"") + ""/.m2/repository""));
}
",0,1,7,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
170,"if (!""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.connector."" + id + "".skip-default"", ""false""))) {","if (!""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.connector."" + id + "".skip-default"",""false""))) {
  connectorModules.add(connectorModule);
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
171,"if (""file"".equals(url.getProtocol()) && copy.contains(new URL(""jar:"" + url.toExternalForm() + ""!/""))) {","if (""file"".equals(url.getProtocol()) && copy.contains(new URL(""jar:"" + url.toExternalForm() + ""!/""))) {
  copy.remove(url);
}
",0,0,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
172,"if (url && ""file"".equals(((URL) persistenceUrl).getProtocol())) {","if (url && ""file"".equals(((URL)persistenceUrl).getProtocol())) {
  persistenceModule.getWatchedResources().add(path);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
173,"if (""beforeDelivery"".equals(methodName) && Arrays.deepEquals(new Class[]{Method.class}, parameterTypes)) {","if (""beforeDelivery"".equals(methodName) && Arrays.deepEquals(new Class[]{Method.class},parameterTypes)) {
  beforeDelivery((Method)args[0]);
  return null;
}
 else if (""afterDelivery"".equals(methodName) && parameterTypes.length == 0) {
  afterDelivery();
  return null;
}
 else if (""release"".equals(methodName) && parameterTypes.length == 0) {
  release();
  return null;
}
 else {
  final Object value=deliverMessage(method,args);
  return value;
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
174,"if (file.getName().endsWith("".jar"") && file.getParentFile().getName().equals(""lib"") && ""WEB-INF"".equals(file.getParentFile().getParentFile().getName())) {","if (file.getName().endsWith("".jar"") && file.getParentFile().getName().equals(""lib"") && ""WEB-INF"".equals(file.getParentFile().getParentFile().getName())) {
  final File pXml=new File(file.getParentFile().getParentFile(),pXmlName);
  if (pXml.exists()) {
    urls.add(pXml.toURI().toURL());
  }
  break;
}
",0,0,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
175,"if (systemProperties.size() == 1 && ""log4j.configurationFile"".equals(systemProperties.stringPropertyNames().iterator().next())) {","if (systemProperties.size() == 1 && ""log4j.configurationFile"".equals(systemProperties.stringPropertyNames().iterator().next())) {
  return;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
176,"if (created.is(Base.class) && ""base"".equals(created.getName())) {","if (created.is(Base.class) && ""base"".equals(created.getName())) {
  created.replaceBy(new Child(created.getResource()));
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
177,"if (destroyed.is(Base.class) && destroyed.is(Child.class) && ""base"".equals(destroyed.getName())) {","if (destroyed.is(Base.class) && destroyed.is(Child.class) && ""base"".equals(destroyed.getName())) {
  final Object parent=Child.class.cast(destroyed.getResource()).parent;
  try {
    destroyed.replaceBy(new Assembler.ResourceInstance(""base"",parent,singleton(Base.class.getMethod(""stop"")),null));
  }
 catch (  final NoSuchMethodException e) {
    fail(e.getMessage());
  }
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
178,"if (! ""comp/env/jms/myqueue"".equals(resourceEnvRef.referenceName)) continue;","if (!""comp/env/jms/myqueue"".equals(resourceEnvRef.referenceName)) continue;
",0,0,4,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
179,"if ((""userA"".equals(username) || ""userB"".equals(username)) && ""test"".equals(password)) {","if ((""userA"".equals(username) || ""userB"".equals(username)) && ""test"".equals(password)) {
  return new Principal(){
    @Override public String getName(){
      return username;
    }
    @Override public String toString(){
      return username;
    }
  }
;
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
180,"if (method.getDeclaringClass().equals(Object.class) && ""toString"".equals(methodName)) {","if (method.getDeclaringClass().equals(Object.class) && ""toString"".equals(methodName)) {
  return getClass().getSimpleName() + "" Proxy"";
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
181,"if (line == null || ""[RI Server] Ready!"".equals(line)) break;","if (line == null || ""[RI Server] Ready!"".equals(line)) break;
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
182,"if (ic.getMethod().getName().equals(""bar"") && ""/app/foo"".equals(request.getRequestURI())) {","if (ic.getMethod().getName().equals(""bar"") && ""/app/foo"".equals(request.getRequestURI())) {
  return ""perfect"";
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
183,"if (name.equals(s.servletClass) || name.equals(s.servletName) || ""javax.ws.rs.core.Application "".equals(s.servletName)) {","if (name.equals(s.servletClass) || name.equals(s.servletName) || ""javax.ws.rs.core.Application "".equals(s.servletName)) {
  mapping=s.mappings.iterator().next();
}
 else {
  for (  final ParamValueInfo pvi : s.initParams) {
    if (""javax.ws.rs.Application"".equals(pvi.name) || Application.class.getName().equals(pvi.name)) {
      mapping=s.mappings.iterator().next();
      break;
    }
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
184,if( source.charAt(0) != '$' ) return output;,"if (source.charAt(0) != '$') return output;
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
185,"if( source.charAt(0) != '$' ) throw new IllegalArgumentException(""Source value does not start with '$'"");","if (source.charAt(0) != '$') throw new IllegalArgumentException(""Source value does not start with '$'"");
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
186,"if (uri.charAt(""tuscany:"".length()+1) != '/') {","if (uri.charAt(""tuscany:"".length() + 1) != '/') {
  uri=uri.replaceFirst("":/"",""://"");
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
187,"} else if (""##local"".equals(namespace) && (elemQName.getNamespaceURI() == null)) {","if (""##local"".equals(namespace) && (elemQName.getNamespaceURI() == null)) {
  matches=true;
}
 else {
  validNamespaces.add(namespace);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
188,if ((out[s] = (char) buf[offset + count++]) < '\u0080') {,"if ((out[s]=(char)buf[offset + count++]) < '\u0080') {
  s++;
}
 else if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  if ((b & 0xC0) != 0x80) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  int c=buf[count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",1,1239,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
189,"if (args.length < 1 || args[0] == null || ""-h"".equals(args[0]) || ""--help"".equals(args[0])) {","if (args.length < 1 || args[0] == null || ""-h"".equals(args[0]) || ""--help"".equals(args[0])) {
  programDriver.driver(args);
  return;
}
",1,2550,13,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
190,"if (r.charAt(i)=='""') return i;","if (r.charAt(i) == '""') return i;
",1,4,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
191,"if (port == -1 && ""http"".equalsIgnoreCase(uri.getScheme())) port = 80;","if (port == -1 && ""http"".equalsIgnoreCase(uri.getScheme())) port=80;
",1,5,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
192,"if (mr != null && !mr.isEmpty() && ""true"".equals(mr.get(0))) {","if (mr != null && !mr.isEmpty() && ""true"".equals(mr.get(0))) {
  jmsFault=JMSFaultFactory.createMalformedRequestURIFault(requestURI);
}
",1,2,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
193,"if (!""file"".equals(containerUrl.getProtocol())) throw new IllegalStateException(""Resource (""+resourceInThatDir+"") not on file system (at ""+containerUrl+"")"");","if (!""file"".equals(containerUrl.getProtocol())) throw new IllegalStateException(""Resource ("" + resourceInThatDir + "") not on file system (at ""+ containerUrl+ "")"");
",1,3,10,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
194,if (newPrice.compareTo(quote.getHigh()) == 1) quote.setHigh(newPrice);,"if (newPrice.compareTo(quote.getHigh()) == 1) quote.setHigh(newPrice);
 else if (newPrice.compareTo(quote.getLow()) == -1) quote.setLow(newPrice);
",1,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
195,"if (violators.size()==1) return violators.get(0)+"" is not up"";","if (violators.size() == 1) return violators.get(0) + "" is not up"";
",1,8,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
196,"if(startDate == null || """".equals(startDate)) throw new IllegalArgumentException(""A valid start date must be supplied"");","if (startDate == null || """".equals(startDate)) throw new IllegalArgumentException(""A valid start date must be supplied"");
",1,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
197,if ('+' == path0.charAt(path0.length() - 1)) {,"if ('+' == path0.charAt(path0.length() - 1)) {
  path0=path0.substring(0,path0.length() - 1);
}
",1,41,6,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
198,"else if ("".:"".indexOf(c)>=0) ;","if ("".:"".indexOf(c) >= 0) ;
 else break;
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
199,"if (schedulers.size()>1) log.warn(""multiple schedulers detected, using only the first, for ""+task+"": ""+schedulers);","if (schedulers.size() > 1) log.warn(""multiple schedulers detected, using only the first, for "" + task + "": ""+ schedulers);
",1,19,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
200,"else if (possibleArgs.length<2) args.append(""args are ""+Arrays.asList(possibleArgs[0]));","if (possibleArgs.length < 2) args.append(""args are "" + Arrays.asList(possibleArgs[0]));
 else {
  args.append(""args are "" + Arrays.asList(possibleArgs[0]));
  for (int i=1; i < possibleArgs.length; i++) {
    args.append("" or "");
    args.append(Arrays.asList(possibleArgs[i]));
  }
}
",1,5,9,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
201,"if (verbosity == 1) rv += "": ""+abbreviate(errorMessage);","if (verbosity == 1) rv+="": "" + abbreviate(errorMessage);
",1,5,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
202,"if (verbosity >= 2) rv += "" (""+ti.getThreadState()+"")"";","if (verbosity >= 2) rv+="" ("" + ti.getThreadState() + "")"";
",1,2,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
203,if (r.charAt(i)=='\\') escaped = true;,"if (r.charAt(i) == '\\') escaped=true;
",1,10,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
204,"if (l.size() != 2) throw new IllegalStateException(""Range must be of size 2; cannot create from ""+l);","if (l.size() != 2) throw new IllegalStateException(""Range must be of size 2; cannot create from "" + l);
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
205,if (i==5) used0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();,"if (i == 5) used0=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
",1,1,9,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
206,"if (!""Bob"".equalsIgnoreCase(e.getAttribute(TestEntity.NAME))) return false;","if (!""Bob"".equalsIgnoreCase(e.getAttribute(TestEntity.NAME))) return false;
",1,22,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
207,if (i.get() >= 4) submitter.period = null;,"if (i.get() >= 4) submitter.period=null;
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NullLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
208,if (diff>0.0000000000000001) return -1;,"if (diff > 0.0000000000000001) return -1;
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
209,"if (newLen>32) throw new IllegalStateException(""further subnet for ""+Arrays.toString(extraUnsignedBytes)+"" not possible on CIDR ""+this);","if (newLen > 32) throw new IllegalStateException(""further subnet for "" + Arrays.toString(extraUnsignedBytes) + "" not possible on CIDR ""+ this);
",1,1,9,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
210,if (Math.abs(x)<0.0000000001) x=0;,"if (Math.abs(x) < 0.0000000001) x=0;
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
211,"if (msg != null && ""stream closed"".equals(msg.toLowerCase(Locale.ENGLISH))) {","if (msg != null && ""stream closed"".equals(msg.toLowerCase(Locale.ENGLISH))) {
  LOG.debug(""Ignoring Stream closed IOException"",ioe);
  ExecResult result=new ExecResult(command,stdout,stderr,exitValue);
  return result;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
212,"if (""Claus"".equals(user) && contentType.startsWith(""text/xml"") && body.equals(""<order>123</order>"")) {","if (""Claus"".equals(user) && contentType.startsWith(""text/xml"") && body.equals(""<order>123</order>"")) {
  assertEquals(""test"",exchange.getIn().getHeader(""SOAPAction"",String.class));
  if (contentType.endsWith(""UTF-8"")) {
    assertEquals(""UTF-8"",exchange.getProperty(Exchange.CHARSET_NAME),""Get a wrong charset name."");
  }
  exchange.getMessage().setBody(""<order>OK</order>"");
  exchange.getMessage().setHeader(""Content-Type"",""text/xml"");
}
 else {
  exchange.getMessage().setBody(""FAIL"");
  exchange.getMessage().setHeader(Exchange.CONTENT_TYPE,""text/plain"");
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
213,"if (""true"".equalsIgnoreCase(allowCredentials) && ""*"".equals(allowOrigin) && origin != null) {","if (""true"".equalsIgnoreCase(allowCredentials) && ""*"".equals(allowOrigin) && origin != null) {
  allowOrigin=origin;
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
214,if (this.mode == 'w') {,"if (this.mode == 'w') {
  this.segments=new ArrayList<>();
  this.segmentlog=new ArrayList<>();
}
 else if (this.mode == 'i') {
  this.namespaces=new ArrayList<>();
}
",1,1,3,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
215,"if (""mac"".equals(macpart[0]) && macpart[1].equals(mac)) {","if (""mac"".equals(macpart[0]) && macpart[1].equals(mac)) {
  return c;
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
216,"if(ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {","if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
  return null;
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
217,"if (""xen-pv-drv-iso"".equals(iso.getDisplayText()) && vm.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {","if (""xen-pv-drv-iso"".equals(iso.getDisplayText()) && vm.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
  throw new InvalidParameterValueException(""Cannot attach Xenserver PV drivers to incompatible hypervisor "" + vm.getHypervisorType());
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
218,if (ascii[jj - bits] == '1') {,"if (ascii[jj - bits] == '1') {
  l_raw[ii]|=BITS[bits];
}
",1,1,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
219,"if ((image.getRGB(x, y) & 0x00ffffff) != 0x00ffffff)","if ((image.getRGB(x,y) & 0x00ffffff) != 0x00ffffff) return false;
",1,2,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
220,if ((Precision.EPSILON * t) * t > 1) {,"if ((Precision.EPSILON * t) * t > 1) {
  for (int j=i; j <= idx; j++) {
    matrixT[j][idx]/=t;
  }
}
",1,5,4,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
221,if (((i >> j) & 1) == 1) {,"if (((i >> j) & 1) == 1) {
  rankSum+=j + 1;
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
222,if (AccurateMath.abs(beta[i] - betar[i]) > 1.0e-8) {,"if (AccurateMath.abs(beta[i] - betar[i]) > 1.0e-8) {
  Assert.fail(""Parameters not correctly estimated"");
}
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
223,if ((in.buf_.data_[in.buf_.pos_] & 0xc0) != 0x80) {,"if ((in.buf_.data_[in.buf_.pos_] & 0xc0) != 0x80) {
  throw new org.omg.CORBA.DATA_CONVERSION(org.apache.yoko.orb.OB.MinorCodes.describeDataConversion(org.apache.yoko.orb.OB.MinorCodes.MinorUTF8Encoding),org.apache.yoko.orb.OB.MinorCodes.MinorUTF8Encoding,org.omg.CORBA.CompletionStatus.COMPLETED_NO);
}
",1,6,4,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
224,if (classes.get(Path.class).size() > 1) {,"if (classes.get(Path.class).size() > 1) {
  throw new NoUniqueBeanDefinitionException(Path.class,classes.get(Path.class).size(),""More than one service class (@Path) has been discovered"");
}
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
225,"if ("""".equals(action) || (ais != null && !ais.isEmpty())) {","if ("""".equals(action) || (ais != null && !ais.isEmpty())) {
  action=checkDefaultBinding(action,message,data);
}
",1,9,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
226,"if (""CN"".equalsIgnoreCase(rdn.getType()) && (rdn.getValue() instanceof String)) {","if (""CN"".equalsIgnoreCase(rdn.getType()) && (rdn.getValue() instanceof String)) {
  subjectName=(String)rdn.getValue();
  break;
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
227,"if (car != null && ""Porsche"".equals(car.getMake())","if (car != null && ""Porsche"".equals(car.getMake()) && ""Boxster"".equals(car.getModel()) && ""1998"".equals(car.getYear()) && ""white"".equals(car.getColor())) {
}
 else {
  fail(""Get the wrong car!"");
}
",1,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
228,if (data.get(i).get(0) == 0.0d) {,"if (data.get(i).get(0) == 0.0d) {
  instances[0].add(data.get(i));
}
 else {
  instances[1].add(data.get(i));
}
",1,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
229,"if (driver.executeSQL(cmd.getUpdate(), cmd.getParamValues(), conn, null) < 1)","if (driver.executeSQL(cmd.getUpdate(),cmd.getParamValues(),conn,null) < 1) seqValue=0;
",1,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
230,"if("""".equals(authzid) && !(username+""\0""+username+""\0""+password).equals(authline) && !(""\0""+username+""\0""+password).equals(authline)) {","if ("""".equals(authzid) && !(username + ""\0"" + username+ ""\0""+ password).equals(authline) && !(""\0"" + username + ""\0""+ password).equals(authline)) {
  pw.write(tag + "" BAD username password invalid.\r\n"");
  pw.flush();
  return;
}
",1,2,16,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
231,"if (""IDL:omg.org/CORBA/WStringValue:1.0"".equals(repid) && """".equals(suffix)) return String.class.getName();","if (""IDL:omg.org/CORBA/WStringValue:1.0"".equals(repid) && """".equals(suffix)) return String.class.getName();
",1,4,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
232,} else if (((a = out[s]) & 0xe0) == 0xc0) {,"if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  if ((b & 0xC0) != 0x80) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize) {
    throw new UTFDataFormatException();
  }
  int b=buf[count++];
  int c=buf[count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {
    throw new UTFDataFormatException();
  }
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
233,if ((yi = yRow.getQuick(i)) == 0.0) {,"if ((yi=yRow.getQuick(i)) == 0.0) {
  continue;
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
234,if ((V = f2 + f2 - W) < 1.0) {,"if ((V=f2 + f2 - W) < 1.0) {
  Y=k2 + Dk;
  if (V <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {
    return Y;
  }
  if (V <= f(Y,lMy,cPm)) {
    return Y;
  }
}
",1,3,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
235,"else if(""hive"".equalsIgnoreCase(vXAccessAudit.getServiceType()) && (""grant"".equalsIgnoreCase(vXAccessAudit.getAccessType()) || ""revoke"".equalsIgnoreCase(vXAccessAudit.getAccessType()))){","if (""hive"".equalsIgnoreCase(vXAccessAudit.getServiceType()) && (""grant"".equalsIgnoreCase(vXAccessAudit.getAccessType()) || ""revoke"".equalsIgnoreCase(vXAccessAudit.getAccessType()))) {
  try {
    vXAccessAudit.setRequestData(java.net.URLDecoder.decode(vXAccessAudit.getRequestData(),""UTF-8""));
  }
 catch (  UnsupportedEncodingException e) {
    logger.warn(""Error while encoding request data"");
  }
}
",1,2,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
236,"} else if (""true"".equals(value) || ""false"".equals(""value"")) {","if (""true"".equals(value) || ""false"".equals(""value"")) {
  map.put(key,Boolean.valueOf(value));
}
 else {
  map.put(key,value);
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
237,+ (serverSideScript != null ? 1 : 0) <= 1),"if (((cbl != null) ? cbl.size() : 0) + (attributeValue != null ? 1 : 0) + (serverSideScript != null ? 1 : 0) <= 1) {
  if (cbl == null || cbl.isEmpty()) {
    if (attributeValue != null) {
      return renderHTMLStringAttribute(writer,componentProperty,htmlAttrName,attributeValue);
    }
 else {
      return renderHTMLStringAttribute(writer,componentProperty,htmlAttrName,serverSideScript);
    }
  }
 else {
    return renderHTMLStringAttribute(writer,componentProperty,htmlAttrName,cbl.get(0).getScript(ClientBehaviorContext.createClientBehaviorContext(facesContext,component,eventName,sourceId,eventParameters)));
  }
}
 else {
  return renderHTMLStringAttribute(writer,componentProperty,htmlAttrName,ClientBehaviorRendererUtils.buildBehaviorChain(facesContext,component,sourceId,eventName,eventParameters,clientBehaviors,attributeValue,serverSideScript));
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
NumberLiteral(),
"
238,"if (""-C-"".equals(((UIOutput)child).getValue()) ||","if (""-C-"".equals(((UIOutput)child).getValue()) || ""-B-"".equals(((UIOutput)child).getValue()) || ""-D-"".equals(((UIOutput)child).getValue())) {
  Assert.assertTrue(!tagUniqueIdSet.contains(id));
}
 else {
  if (!tagUniqueIdSet.contains(id)) {
    Assert.fail();
  }
  if (!componentIdSet.contains(componentId)) {
    Assert.fail();
  }
}
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
239,"if (""-p"".equalsIgnoreCase(argv[argumentIndex]) || ""-password"".equalsIgnoreCase(argv[argumentIndex]) ) {","if (""-p"".equalsIgnoreCase(argv[argumentIndex]) || ""-password"".equalsIgnoreCase(argv[argumentIndex])) {
  if (argv.length > argumentIndex + 1) {
    passwordValue=argv[argumentIndex + 1];
    argv[argumentIndex + 1]="""";
    break;
  }
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
240,"if (""*"".equals(u) || (user != null && u.equalsIgnoreCase(user))) {","if (""*"".equals(u) || (user != null && u.equalsIgnoreCase(user))) {
  return true;
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
241,"if (encoder != null && ""SHA256"".equalsIgnoreCase(encoder) && authentication != null) {","if (encoder != null && ""SHA256"".equalsIgnoreCase(encoder) && authentication != null) {
  authenticator.setPasswordEncoder(new RangerCustomPasswordEncoder(authentication.getName(),""SHA-256""));
}
 else if (encoder != null && ""MD5"".equalsIgnoreCase(encoder) && authentication != null) {
  authenticator.setPasswordEncoder(new RangerCustomPasswordEncoder(authentication.getName(),""MD5""));
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
242,"&& ""G"".equals(curElem.getLocalName()) && XMLSignature.XMLNS.equals(curElem.getNamespaceURI())) {","if (curElem != null && ""G"".equals(curElem.getLocalName()) && XMLSignature.XMLNS.equals(curElem.getNamespaceURI())) {
  g=decode(curElem);
  curElem=DOMUtils.getNextSiblingElement(curElem,""Y"",XMLSignature.XMLNS);
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
243,"if (""base"".equals(n.getLocalName()) && !e.rendered) {","if (""base"".equals(n.getLocalName()) && !e.rendered) {
  baseAttrs.add(n);
}
 else if (!loa.containsKey(n.getName())) {
  loa.put(n.getName(),n);
}
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
244,if (echo1.doneIds.size() + echo2.doneIds.size() == 100) {,"if (echo1.doneIds.size() + echo2.doneIds.size() == 100) {
  break;
}
",1,1,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
245,"&& ""configureInterceptors"".equals(((Named) key.getAnnotation()).value())","if (Named.class.isAssignableFrom(key.getAnnotation().annotationType()) && ""configureInterceptors"".equals(((Named)key.getAnnotation()).value()) && key.getTypeLiteral().getRawType().equals(Object.class)) {
  calledCustom=true;
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
246,"if (StringUtils.isEmpty(key) || "".."".equals(key) || ""."".equals(key) || !BLOB_KEY_PATTERN.matcher(key).matches()) {","if (StringUtils.isEmpty(key) || "".."".equals(key) || ""."".equals(key)|| !BLOB_KEY_PATTERN.matcher(key).matches()) {
  LOG.error(""'{}' does not appear to be valid. It must match {}. And it can't be \"".\"", \""..\"", null or empty string."",key,BLOB_KEY_PATTERN);
  return false;
}
",1,1,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
247,if ((Time.currentTimeMillis() - dynamicState.startTime) > 120_000) {,"if ((Time.currentTimeMillis() - dynamicState.startTime) > 120_000) {
  throw new RuntimeException(""Not all processes in "" + dynamicState.container + "" exited after 120 seconds"");
}
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
248,"if (""http"".equals(scheme) && (port.intValue() == 80)) {","if (""http"".equals(scheme) && (port.intValue() == 80)) {
  ;
}
 else if (""https"".equals(scheme) && (port.intValue() == 443)) {
  ;
}
 else {
  sb.append("":"" + port);
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
249,"if ( ""war"".equals( artifact.getType() ) && !artifact.isOptional() && filter.include( artifact ) )","if (""war"".equals(artifact.getType()) && !artifact.isOptional() && filter.include(artifact)) {
  addContextFromArtifact(container,contexts,artifact,""/"" + artifact.getArtifactId(),null,false);
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
250,"if (this.configuration.isUnsafeEjbd() && ""-"".equals(System.getProperty(""tomee.serialization.class.blacklist""))) {","if (this.configuration.isUnsafeEjbd() && ""-"".equals(System.getProperty(""tomee.serialization.class.blacklist""))) {
  System.clearProperty(""tomee.serialization.class.blacklist"");
  Setup.reloadClientSerializationConfig();
}
",1,1,8,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
251,"if (webAppInfo == null || appInfo == null || ""false"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.jaxws.add-missing-servlets"", ""true""))) {","if (webAppInfo == null || appInfo == null || ""false"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.jaxws.add-missing-servlets"",""true""))) {
  return;
}
",1,2,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
252,"if (""javax.ws.rs.Application"".equals(pvi.name) || Application.class.getName().equals(pvi.name)) {","if (""javax.ws.rs.Application"".equals(pvi.name) || Application.class.getName().equals(pvi.name)) {
  skip=true;
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
253,if (value > 'z') return 'A';,"if (value > 'z') return 'A';
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
254,"if (""/"".equals(path) && uri != null && """".equals(contextPath)) {","if (""/"".equals(path) && uri != null && """".equals(contextPath)) {
  return uri.getPath();
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
255,"if (""file"".equals(contributionURL.getProtocol()) && new File(contributionURL.getFile()).isDirectory()) {","if (""file"".equals(contributionURL.getProtocol()) && new File(contributionURL.getFile()).isDirectory()) {
  scanner=new DirectoryContributionScanner();
}
 else {
  scanner=new JarContributionScanner();
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
256,if (attachment[0].getHeaders().size() == 6) {,"if (attachment[0].getHeaders().size() == 6) {
  attachment[0].addHeader(AttachmentUtils.MIME_HEADER_CONTENT_DESCRIPTION,""Kaputt"");
}
",1,1,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
257,"if (Objects.requireNonNull(channels, ""channels must not be null"").length == 1) {","if (Objects.requireNonNull(channels,""channels must not be null"").length == 1) {
  return channels[0];
}
",2,7,6,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
258,"if (""com.acme.dictionary"".equals(cap.getNamespace()) && cap.getDirectives().containsKey(""effective"")) {","if (""com.acme.dictionary"".equals(cap.getNamespace()) && cap.getDirectives().containsKey(""effective"")) {
  testDictionaryCapability1(cap);
  found1=true;
}
 else if (""com.acme.dictionary"".equals(cap.getNamespace()) && cap.getDirectives().containsKey(""filter"")) {
  testDictionaryCapability2(cap);
  found2=true;
}
 else if (""com.acme.ip2location"".equals(cap.getNamespace())) {
  testIP2LocationCapability(cap);
  found3=true;
}
",2,9,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
259,"if (c == '""') break;","if (c == '""') break;
",2,2,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
260,if (Calendars.length <= 1) return;,"if (Calendars.length <= 1) return;
",2,2,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
261,if (Double.parseDouble(endpoint.getConfiguration().getApiVersion()) >= 37.0) {,"if (Double.parseDouble(endpoint.getConfiguration().getApiVersion()) >= 37.0) {
  exchange.setProperty(RESPONSE_CLASS,SearchResult2.class);
}
 else {
  exchange.setProperty(RESPONSE_TYPE,TypeReferences.SEARCH_RESULT_TYPE);
}
",2,2,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
262,if (super.getLength() > 10) {,"if (super.getLength() > 10) {
  final byte[] tmp=new byte[10];
  System.arraycopy(bytes,0,tmp,0,10);
  hex=Utility.toHexString(tmp) + ""... (truncated)"";
}
 else {
  hex=Utility.toHexString(bytes);
}
",2,2,2,,"SimpleName(SuperMethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
263,"if (logLevel >= 1) { System.out.println(""started""); }","if (logLevel >= 1) {
  System.out.println(""started"");
}
",2,2,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
264,"if (!""Dreams"".equals(data.get(""id-name"").get(0))) {","if (!""Dreams"".equals(data.get(""id-name"").get(0))) {
  throw new Exception(""Map entry 0 does not match"");
}
",2,4,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
265,"&& ""]"".equals(tokens.get(tokens.size() - 1))) {","if (tokens.size() == 2 + dimensions.size() + dimensions.size() - 1 && ""["".equals(tokens.get(0)) && ""]"".equals(tokens.get(tokens.size() - 1))) {
  tokens=tokens.subList(1,tokens.size() - 1);
  int[] index=new int[dimensions.size()];
  for (int i=0; i < index.length; i++) {
    int tokenId=i * 2;
    index[i]=Integer.parseInt(tokens.get(tokenId));
    if (tokenId + 1 < tokens.size() && !"","".equals(tokens.get(tokenId + 1))) {
      throw new IllegalStateException(""Expected a comma but got "" + tokens.get(tokenId + 1));
    }
  }
  int valuePosition=0;
  int multiplier=1;
  for (int i=index.length - 1; i >= 0; i--) {
    int position=index[i];
    valuePosition+=position * multiplier;
    multiplier*=dimensions.get(i);
  }
  return valuePosition;
}
",2,2,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
266,"if (name.indexOf(""arg0"") >= 0 && ""11"".equalsIgnoreCase(value)) {","if (name.indexOf(""arg0"") >= 0 && ""11"".equalsIgnoreCase(value)) {
  value=""12"";
  ((SOAPElement)elem2).setValue(value);
}
",2,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
267,"if (this.action!=null && ""null"".equals(this.action))","if (this.action != null && ""null"".equals(this.action)) {
  log.warn(""Invalid action name 'null' for {}"",getClass().getName());
  this.action=null;
}
",2,3,7,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
268,if (source.peek(true).getType() == '(') {,"if (source.peek(true).getType() == '(') {
  source.checkLeftParen();
  disposition.setDisposition(source.readString());
  disposition.setParameterList(source.readParameterList());
  source.checkRightParen();
}
 else if (source.peek(true) == IMAPResponseTokenizer.NIL) {
  source.next();
}
 else {
  throw new ResponseFormatException(""Expecting NIL or '(' in response"");
}
",2,8,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
269,else if (test.charAt(length) != '/') return false;,"if (test.charAt(length) != '/') return false;
",2,2,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
270,if (theUnsafe.arrayIndexScale(byte[].class) != 1) {,"if (theUnsafe.arrayIndexScale(byte[].class) != 1) {
  throw new AssertionError();
}
",2,2,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(ArrayType-elementType, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
271,"if (!""3.0"".equals(this.getUddiVersion())) {","if (!""3.0"".equals(this.getUddiVersion())) {
  request.setAttribute(""generic"",this.getUddiVersion());
}
",2,2,4,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
272,"if (""of times"".equals(v[1]) || ""of"".equals(v[1]) || ""times"".equals(v[1])","if (""of times"".equals(v[1]) || ""of"".equals(v[1]) || ""times"".equals(v[1])|| ""the"".equals(v[1])) {
  frequency=2;
}
",2,2,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
273,"if ( ""txz"".equals( format ) || ""tgz"".equals( format ) || ""tbz2"".equals( format ) || format.startsWith( ""tar"" ) )","if (""txz"".equals(format) || ""tgz"".equals(format) || ""tbz2"".equals(format)|| format.startsWith(""tar"")) {
  archiver=createTarArchiver(format,TarLongFileMode.valueOf(configSource.getTarLongFileMode()));
}
 else if (""war"".equals(format)) {
  archiver=createWarArchiver();
}
 else {
  archiver=archiverManager.getArchiver(format);
}
",2,2,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
274,"if (!""foo"".equals(OAuthUtil.getParameter(info.message, ""oauth_magic""))) {","if (!""foo"".equals(OAuthUtil.getParameter(info.message,""oauth_magic""))) {
  throw new RuntimeException(""no oauth_trusted=foo parameter"");
}
",2,2,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
275,"if (Object.class == method.getDeclaringClass() && ""toString"".equals(method.getName())) {","if (Object.class == method.getDeclaringClass() && ""toString"".equals(method.getName())) {
  return ""Resettable["" + getDelegate().toString() + ""]"";
}
",2,4,7,,"SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
276,"if ("""".equals(name) || name.equals(field.getType().getName())) {","if ("""".equals(name) || name.equals(field.getType().getName())) {
  name=field.getName();
}
",2,2,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
277,if( i > 1 ) break;,"if (i > 1) break;
",2,2,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
278,"if (""-metadata"".startsWith(buffer) && !TShellCompletor.allArgs.contains(""-metadata"")) {","if (""-metadata"".startsWith(buffer) && !TShellCompletor.allArgs.contains(""-metadata"")) {
  candidates.add(""-metadata"" + (matches == 1 ? "" "" : """"));
}
",2,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
279,"if (""SubjectConfirmationData"".equals(elementPath.get(lastIndex).getLocalPart())","if (""SubjectConfirmationData"".equals(elementPath.get(lastIndex).getLocalPart()) && ""SubjectConfirmation"".equals(elementPath.get(lastIndex - 1).getLocalPart()) && ""Subject"".equals(elementPath.get(lastIndex - 2).getLocalPart())) {
  return idx;
}
 else if (""SubjectConfirmation"".equals(elementPath.get(lastIndex).getLocalPart()) && ""Subject"".equals(elementPath.get(lastIndex - 1).getLocalPart())) {
  return idx;
}
",2,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
280,"if (name==null || name.startsWith(""","if (name == null || name.startsWith(""//"") || symbolicName == null || ""classpath"".equals(symbolicName) || ""http"".equals(symbolicName) || ""https"".equals(symbolicName) || ""file"".equals(symbolicName)) {
  if (log.isTraceEnabled()) {
    log.trace(""Request for bundle '"" + symbolicName + ""' ""+ (Strings.isNonBlank(version) ? ""("" + version + "") "" : """")+ (originalSymbolicName.equals(symbolicName) ? """" : "". Original symbolic name: "" + originalSymbolicName)+ ""was ignored as no framework available; and failed to find '""+ name+ ""' in plain old classpath"");
  }
}
 else {
  log.warn(""Request for bundle '"" + symbolicName + ""' ""+ (Strings.isNonBlank(version) ? ""("" + version + "") "" : """")+ (originalSymbolicName.equals(symbolicName) ? """" : "". Original symbolic name: "" + originalSymbolicName)+ ""was ignored as no framework available; and failed to find '""+ name+ ""' in plain old classpath"");
}
",3,33,19,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
281,"if (""virtualdisk"".equalsIgnoreCase(info.getGroupInfo().getKey()) && ""average"".equalsIgnoreCase(info.getRollupType().value())) {","if (""virtualdisk"".equalsIgnoreCase(info.getGroupInfo().getKey()) && ""average"".equalsIgnoreCase(info.getRollupType().value())) {
  if (""numberReadAveraged"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskReadIOPerfCounterInfo=info;
  }
  if (""numberWriteAveraged"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskWriteIOPerfCounterInfo=info;
  }
  if (""read"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskReadKbsPerfCounterInfo=info;
  }
  if (""write"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskWriteKbsPerfCounterInfo=info;
  }
}
",3,17,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
282,"if (!multiValue && !valuePlaceholder && !lookup && ""boolean"".equals(row.getType())) {","if (!multiValue && !valuePlaceholder && !lookup&& ""boolean"".equals(row.getType())) {
  boolean bool=""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);
  if (!bool) {
    result.addInvalidBoolean(name,value);
  }
}
",3,7,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
283,"|| ""headerName"".equals(option.getName()) || ""regex"".equals(option.getName()) || ""xml"".equals(option.getName()) || ""includeTokens"".equals(option.getName())","if (""token"".equals(option.getName()) || ""endToken"".equals(option.getName()) || ""inheritNamespaceTagName"".equals(option.getName())|| ""headerName"".equals(option.getName())|| ""regex"".equals(option.getName())|| ""xml"".equals(option.getName())|| ""includeTokens"".equals(option.getName())|| ""group"".equals(option.getName())|| ""skipFirst"".equals(option.getName())) {
  continue;
}
",3,3,16,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
284,if (args.length > 2) clusterName = args[2];,"if (args.length > 2) clusterName=args[2];
",3,11,5,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
285,if (mant[mant.length - 1] > 1000) {,"if (mant[mant.length - 1] > 1000) {
  return exp * 4 - 1;
}
",3,3,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
286,"if (""wresult"".equals(result.getAttributeNS(null, ""name""))","if (""wresult"".equals(result.getAttributeNS(null,""name"")) || ""wa"".equals(result.getAttributeNS(null,""name"")) || ""wctx"".equals(result.getAttributeNS(null,""name""))) {
  String value=result.getAttributeNS(null,""value"");
  request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null,""name""),value));
}
",3,3,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
287,if (used + s.length() + 1 > 72) {,"if (used + s.length() + 1 > 72) {
  buf.append(""\r\n  "");
  used=2;
}
",3,3,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
288,if ('{' == ca[i + 1]),"if ('{' == ca[i + 1]) {
  if (buff != null && buff.length() > 0) {
    if (text == null) {
      text=new ArrayList<>();
    }
    text.add(new ELText(buff.toString()));
    buff.setLength(0);
  }
  vlen=findVarLength(ca,i);
  if (ctx != null && fact != null) {
    ve=fact.createValueExpression(ctx,new String(ca,i,vlen),String.class);
    if (location != null) {
      ve=new ContextAwareTagValueExpression(location,""expression"",ve);
    }
    t=new ELCacheableTextVariable(ve);
  }
 else {
    ve=new LiteralValueExpression(new String(ca,i,vlen));
    if (location != null) {
      ve=new ContextAwareTagValueExpression(location,""expression"",ve);
    }
    t=new ELCacheableTextVariable(ve);
  }
  if (text == null) {
    text=new ArrayList<>();
  }
  text.add(t);
  i+=vlen;
  continue;
}
",3,3,4,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
289,"if (this.isXhtml() && ""true"".equalsIgnoreCase(this.cdata)) {","if (this.isXhtml() && ""true"".equalsIgnoreCase(this.cdata)) {
  sb.append(""<![CDATA[\r\n"");
}
",3,3,6,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
290,"if (!this.isXhtml() && ""true"".equals(htmlComment)) {","if (!this.isXhtml() && ""true"".equals(htmlComment)) {
  sb.append(htmlBeginComment);
}
",3,3,5,,"ThisExpression(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
291,if (PlatformDependent.getByte(memoryAddress + offset) == '-') {,"if (PlatformDependent.getByte(memoryAddress + offset) == '-') {
  sign=true;
  offset++;
}
 else if (PlatformDependent.getByte(memoryAddress + offset) == '+') {
  offset++;
}
",3,3,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
292,if( i > 1 ) return null;,"if (i > 1) return null;
",3,3,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
293,"&& ""SubjectConfirmation"".equals(elementPath.get(lastIndex - 1).getLocalPart())","if (""SubjectConfirmationData"".equals(elementPath.get(lastIndex).getLocalPart()) && ""SubjectConfirmation"".equals(elementPath.get(lastIndex - 1).getLocalPart()) && ""Subject"".equals(elementPath.get(lastIndex - 2).getLocalPart())) {
  return idx;
}
 else if (""SubjectConfirmation"".equals(elementPath.get(lastIndex).getLocalPart()) && ""Subject"".equals(elementPath.get(lastIndex - 1).getLocalPart())) {
  return idx;
}
",3,3,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
294,if (++this.su_rTPos == 512) {,"if (++this.su_rTPos == 512) {
  this.su_rTPos=0;
}
",4,31,3,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
295,"if (s.length()>255) s = s.substring(0, 252)+ ""..."";","if (s.length() > 255) s=s.substring(0,252) + ""..."";
",4,6,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
296,if (pos >= 100) return;,"if (pos >= 100) return;
",4,4,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
297,"if (""java:comp/BeanManager"".equals(jndi) && resourceType != BeanManager.class) {","if (""java:comp/BeanManager"".equals(jndi) && resourceType != BeanManager.class) {
  throw new DefinitionException(""Resource "" + reference.getJndiName() + "" in ""+ reference.getOwnerClass()+ "" can't be cast to a BeanManager"");
}
 else if (""java:comp/TransactionSynchronizationRegistry"".equals(jndi) && resourceType != TransactionSynchronizationRegistry.class) {
  throw new DefinitionException(""Resource "" + reference.getJndiName() + "" in ""+ reference.getOwnerClass()+ "" can't be cast to a TransactionSynchronizationRegistry"");
}
 else if (""java:comp/TransactionManager"".equals(jndi) && resourceType != TransactionManager.class) {
  throw new DefinitionException(""Resource "" + reference.getJndiName() + "" in ""+ reference.getOwnerClass()+ "" can't be cast to a TransactionManager"");
}
 else if (""java:comp/ValidatorFactory"".equals(jndi) && resourceType != ValidatorFactory.class) {
  throw new DefinitionException(""Resource "" + reference.getJndiName() + "" in ""+ reference.getOwnerClass()+ "" can't be cast to a ValidatorFactory"");
}
 else if (""java:comp/Validator"".equals(jndi) && resourceType != Validator.class) {
  throw new DefinitionException(""Resource "" + reference.getJndiName() + "" in ""+ reference.getOwnerClass()+ "" can't be cast to a Validator"");
}
",4,4,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
298,"if (address instanceof StringRefAddr && ""URL"".equals(address.getType())) {","if (address instanceof StringRefAddr && ""URL"".equals(address.getType())) {
  String urlScheme=getUrlScheme((String)address.getContent());
  ServicePair<ObjectFactory> factoryService=ContextHelper.getURLObjectFactory(callerContext,urlScheme,environment);
  if (factoryService != null) {
    ObjectFactory factory=factoryService.get();
    String value=(String)address.getContent();
    Object result=getObjectFromFactory(value,name,nameCtx,environment,attrs,factory);
    if (result != null && result != obj) {
      return result;
    }
  }
}
",5,5,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
299,else if (c=='n') result.append('\n');,"if (c == 'n') result.append('\n');
 else if (c == 't') result.append('\t');
 else if (c == 'r') result.append('\r');
 else throw new IllegalArgumentException(""String '"" + s + ""' is not a valid ""+ mode+ "" string (unsupported escape char '""+ c+ ""' at position ""+ i+ "")"");
",5,5,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
300,"if (req.getParameter(""catalinaBaseDir"") != null && """".equals(req.getParameter(""catalinaBaseDir"").trim())) {","if (req.getParameter(""catalinaBaseDir"") != null && """".equals(req.getParameter(""catalinaBaseDir"").trim())) {
  installer.setCatalinaBaseDir(req.getParameter(""catalinaBaseDir"").trim());
}
",5,7,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
301,if ((buffer[bufpos] = c = ReadByte()) == '\\') {,"if ((buffer[bufpos]=c=ReadByte()) == '\\') {
  UpdateLineColumn(c);
  int backSlashCnt=1;
  for (; ; ) {
    if (++bufpos == available)     AdjustBuffSize();
    try {
      if ((buffer[bufpos]=c=ReadByte()) != '\\') {
        UpdateLineColumn(c);
        if ((c == 'u') && ((backSlashCnt & 1) == 1)) {
          if (--bufpos < 0)           bufpos=bufsize - 1;
          break;
        }
        backup(backSlashCnt);
        return '\\';
      }
    }
 catch (    java.io.IOException e) {
      if (backSlashCnt > 1)       backup(backSlashCnt - 1);
      return '\\';
    }
    UpdateLineColumn(c);
    backSlashCnt++;
  }
  try {
    while ((c=ReadByte()) == 'u')     ++column;
    buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));
    column+=4;
  }
 catch (  java.io.IOException e) {
    throw new Error(""Invalid escape character at line "" + line + "" column ""+ column+ ""."");
  }
  if (backSlashCnt == 1)   return c;
 else {
    backup(backSlashCnt - 1);
    return '\\';
  }
}
 else {
  UpdateLineColumn(c);
  return c;
}
",5,38,5,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
302,"if (""Signature"".equals(el.getLocalName()) && XMLSignature.XMLNS.equals(el.getNamespaceURI())) {","if (""Signature"".equals(el.getLocalName()) && XMLSignature.XMLNS.equals(el.getNamespaceURI())) {
  return true;
}
",5,9,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
303,if (argtypes[j].getSize() == 2) {,"if (argtypes[j].getSize() == 2) {
  twoslotoffset++;
  f.getLocals().set(twoslotoffset + j + (mg.isStatic() ? 0 : 1),Type.UNKNOWN);
}
",5,5,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
304,"} else if (!"""".equals(bindingStyle) && """".equals(style) && """".equals(previousOpStyle)) {","if (!"""".equals(bindingStyle) && """".equals(style) && """".equals(previousOpStyle)) {
  continue;
}
 else {
  return true;
}
",5,5,9,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
305,"|| ""wa"".equals(result.getAttributeNS(null, ""name""))","if (""wresult"".equals(result.getAttributeNS(null,""name"")) || ""wa"".equals(result.getAttributeNS(null,""name"")) || ""wctx"".equals(result.getAttributeNS(null,""name""))) {
  String value=result.getAttributeNS(null,""value"");
  request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null,""name""),value));
}
",5,5,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
306,"if (""BASIC"".equals(portInfo.authMethod) || ""DIGEST"".equals(portInfo.authMethod) || ""CLIENT-CERT"".equals(portInfo.authMethod)) {","if (""BASIC"".equals(portInfo.authMethod) || ""DIGEST"".equals(portInfo.authMethod) || ""CLIENT-CERT"".equals(portInfo.authMethod)) {
  auth=portInfo.authMethod;
  realm=portInfo.realmName;
  transport=portInfo.transportGuarantee;
}
",5,8,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
307,} else if (c == '(') count++;,"if (c == '(') count++;
 else if (c == ')') count++;
",6,6,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
308,if ('/' == File.separatorChar) {,"if ('/' == File.separatorChar) {
  return pFileName;
}
",6,6,2,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
309,if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L),"if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
  matchedToken=jjFillToken();
  TokenLexicalActions(matchedToken);
  if (jjnewLexState[jjmatchedKind] != -1)   curLexState=jjnewLexState[jjmatchedKind];
  return matchedToken;
}
 else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
  if (jjnewLexState[jjmatchedKind] != -1)   curLexState=jjnewLexState[jjmatchedKind];
  continue EOFLoop;
}
",7,436,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
310,"if (""bean"".equals(option.getName()) || ""ref"".equals(option.getName()) || ""method"".equals(option.getName()) || ""beanType"".equals(option.getName())) {","if (""bean"".equals(option.getName()) || ""ref"".equals(option.getName()) || ""method"".equals(option.getName())|| ""beanType"".equals(option.getName())) {
  continue;
}
",7,830,16,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
311,if (namebuffer[i - 1] == '/') {,"if (namebuffer[i - 1] == '/') {
  i--;
}
",7,12,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
312,if (pairs[i].length != 2) {,"if (pairs[i].length != 2) {
  fail(""Error in test fixture in the data array at index "" + i);
}
",7,7,4,,"SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
313,if (AccurateMath.abs(beta[0] - betar[0]) > 1.0e-8) {,"if (AccurateMath.abs(beta[0] - betar[0]) > 1.0e-8) {
  Assert.fail(""Parameters not correct after reorder (0,3)"");
}
",7,7,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
314,"if ( _cnt17>=1 ) { break _loop17; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}","if (_cnt17 >= 1) {
  break _loop17;
}
 else {
  throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
",7,8,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(BreakStatement-label, Block-statements, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
PrimitiveType(CastExpression-type, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
"
315,} else if (method.getName().charAt(0) == '<') {,"if (method.getName().charAt(0) == '<') {
  kind=Constants.INVOKESPECIAL;
}
 else {
  kind=Constants.INVOKEVIRTUAL;
}
",8,8,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
316,if (1 == _rio_rtiFilterFields[_rio_i]) {,"if (1 == _rio_rtiFilterFields[_rio_i]) {
  timePartition=_rio_a.readLong(""timePartition"");
}
 else if (2 == _rio_rtiFilterFields[_rio_i]) {
  dataType=_rio_a.readString(""dataType"");
}
 else if (3 == _rio_rtiFilterFields[_rio_i]) {
  streamName=_rio_a.readString(""streamName"");
}
 else if (4 == _rio_rtiFilterFields[_rio_i]) {
  seqId=_rio_a.readLong(""seqId"");
}
 else {
  java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo> typeInfos=(java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo>)(_rio_rtiFilter.getFieldTypeInfos());
  org.apache.hadoop.record.meta.Utils.skip(_rio_a,typeInfos.get(_rio_i).getFieldID(),typeInfos.get(_rio_i).getTypeID());
}
",9,9,3,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
317,"if( ""$"".equals( token ) || ""("".equals( token ) || "")"".equals( token ) || ""["".equals( token ) || ""]"".equals( token ) ) {","if (""$"".equals(token) || ""("".equals(token) || "")"".equals(token)|| ""["".equals(token)|| ""]"".equals(token)) {
}
 else {
  paramName=token;
  return;
}
",9,9,15,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
318,"if (Node.ELEMENT_NODE == nd.getNodeType() && ""MessageNumber"".equals(nd.getLocalName())) {","if (Node.ELEMENT_NODE == nd.getNodeType() && ""MessageNumber"".equals(nd.getLocalName())) {
  return getText(nd);
}
",11,11,7,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
319,if (((active0 &= old0) | (active1 &= old1)) == 0L),"if (((active0&=old0) | (active1&=old1)) == 0L) return jjStartNfa_0(0,old0,old1);
",13,35,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
320,if ((int) value < 0x80) {,"if ((int)value < 0x80) {
  out.buf_.data_[out.buf_.pos_++]=(byte)value;
}
 else if ((int)value < 0x7ff) {
  out.buf_.data_[out.buf_.pos_++]=(byte)((value >>> 6) | 0xc0);
  out.buf_.data_[out.buf_.pos_++]=(byte)(value & 0x3f);
}
 else if ((int)value < 0xffff) {
  out.buf_.data_[out.buf_.pos_++]=(byte)((value >>> 12) | 0xe0);
  out.buf_.data_[out.buf_.pos_++]=(byte)(((value >>> 6) & 0x3f) | 0x80);
  out.buf_.data_[out.buf_.pos_++]=(byte)((value & 0x3f) | 0x80);
}
 else throw new org.omg.CORBA.DATA_CONVERSION();
",13,13,3,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
321,if ((nInts - 1) * 32 + dstPos >= 64) {,"if ((nInts - 1) * 32 + dstPos >= 64) {
  throw new IllegalArgumentException(""(nInts-1)*32+dstPos is greater or equal to than 64"");
}
",19,19,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
322,"if (sb.charAt(sb.length() - 1) == ',') {","if (sb.charAt(sb.length() - 1) == ',') {
  sb.deleteCharAt(sb.length() - 1);
}
",38,8017,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
323,if ((0x7ff609c00000000L & l) != 0L) {,"if ((0x7ff609c00000000L & l) != 0L) {
  if (kind > 17)   kind=17;
  jjCheckNAdd(15);
}
 else if ((0x100002600L & l) != 0L) {
  if (kind > 9)   kind=9;
  jjCheckNAddStates(0,5);
}
 else if (curChar == 40) {
  if (kind > 12)   kind=12;
  jjCheckNAddTwoStates(17,19);
}
 else if (curChar == 41) {
  if (kind > 13)   kind=13;
  jjCheckNAdd(4);
}
 else if (curChar == 44) {
  if (kind > 11)   kind=11;
  jjCheckNAdd(2);
}
",47,47,3,,"NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
