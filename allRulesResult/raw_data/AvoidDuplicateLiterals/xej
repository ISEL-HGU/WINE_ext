113000,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ConvertAttr_SpaceTestCase.java,65,,"        assertEquals(""14mm"", right.toString());"
113001,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ConvertAttr_TextAlignTest.java,76,,"        assertEquals(""left"", cssValue.toString());"
113002,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ConvertAttr_TextDecorationTest.java,60,,"        assertEquals(""underline"", cssValue.toString());"
113003,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ConvertAttr_TextDecorationTest.java,70,,"        assertEquals(isHarmony() ? ""none"" : """", cssValue.toString());"
113004,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ConvertAttr_TextDecorationTest.java,88,,"        assertEquals(""line-through"", cssValue.toString());"
113005,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ConvertAttr_TextDecorationTest.java,146,,"                           ""underline line-through"");"
113006,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesClassTest.java,66,,"        assertEquals(""html body p.par"", rule.getName());"
113007,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesClassTest.java,68,,"        assertEquals("".par"", rule.getAttribute(AttributeSet.NameAttribute));"
113008,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesTest.java,71,,"        assertEquals(""html body p em"", rule.getName());"
113009,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesTest.java,88,,"        assertEquals(""red"", rule.getAttribute(Attribute.COLOR).toString());"
113010,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesTest.java,89,,"        assertEquals(""p.small em"","
113011,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesTest.java,111,,"        assertEquals(""rgb(255, 255, 150)"","
113012,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesTest.java,125,,"        ss.addRule(""em { color: rgb(127, 0, 0) }"");"
113013,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_ResolvedRulesTest.java,282,,"        rule = ss.getRule(""p em"");"
113014,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,83,,"        assertEquals(""body"", body.getName());"
113015,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,86,,"        body.addAttribute(HTML.Attribute.BGCOLOR, ""#ffffff"");"
113016,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,87,,"        body.addAttribute(HTML.Attribute.BACKGROUND, ""bg.jpg"");"
113017,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,88,,"        body.addAttribute(HTML.Attribute.TEXT, ""black"");"
113018,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,89,,"        body.addAttribute(HTML.Attribute.LINK, ""blue"");"
113019,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,90,,"        body.addAttribute(HTML.Attribute.ALINK, ""red"");"
113020,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,91,,"        body.addAttribute(HTML.Attribute.VLINK, ""purple"");"
113021,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,273,,"        branch.addAttribute(HTML.Attribute.ALIGN, ""top"");"
113022,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/StyleSheet_TranslateHTMLToCSS.java,290,,"        branch.addAttribute(HTML.Attribute.ALIGN, ""bottom"");"
113023,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/DTD401Test.java,155,,"        } else if (descr.equals(""CDATA"")) {"
113024,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/DTD401Test.java,232,,"                         .replaceAll(""( )+"", """").replaceAll(""CDATAs;"", ""CDATA""),"
113025,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/DTDTest.java,51,,"    DTD dtd = new DTD(""DTDTest1"");"
113026,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/DTDTest.java,54,,"    public static final String SPACE_ENTITY_NAME = ""#SPACE"";"
113027,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/DTDTest.java,79,,"            String name = ""name"";"
113028,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/DTDTest.java,80,,"            dtd1 = new DTD(""abcd"");"
113029,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/ElementTest.java,30,,"    AttributeList atts1 = new AttributeList(""atts1"");"
113030,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/EntityTest.java,47,,"        Entity entity2 = new Entity(""name"", DTDConstants.GENERAL, new char[0]); //$NON-NLS-1$"
113031,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/Utils.java,421,,"            printDebugInfo(""handleEndTag(tag="" + tag + "", "" + ""pos="""
113032,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/Utils401.java,62,,"        handleEntity(""#SPACE"", ""#SPACE"", ' ', 0, table);"
113033,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/Utils401.java,63,,"        handleEntity(""#RS"", ""#RS"", '\n', 0, table);"
113034,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/parser/Utils401.java,64,,"        handleEntity(""#RE"", ""#RE"", '\r', 0, table);"
113035,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultMutableTreeNodeTest.java,53,,"        node = new DefaultMutableTreeNode(""user object"");"
113036,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultMutableTreeNodeTest.java,475,,"        DefaultMutableTreeNode root = new DefaultMutableTreeNode(""root"");"
113037,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultMutableTreeNodeTest.java,576,,"        DefaultMutableTreeNode child = new DefaultMutableTreeNode(""child"");"
113038,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultMutableTreeNodeTest.java,577,,"        DefaultMutableTreeNode childChild = new DefaultMutableTreeNode(""childChild"");"
113039,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultMutableTreeNodeTest.java,578,,"        DefaultMutableTreeNode nodeChild = new DefaultMutableTreeNode(""nodeChild"");"
113040,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeCellEditorTest.java,69,,"        editor.getTreeCellEditorComponent(tree, ""any"", false, true, false, 0);"
113041,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeCellEditorTest.java,94,,"        Font f = new Font(""font"", 0, 30);"
113042,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeCellEditorTest.java,110,,"        defaultTextField.setText(""value"");"
113043,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeCellRendererTest.java,182,,"        assertSame(renderer, renderer.getTreeCellRendererComponent(tree, ""value"", false, false,"
113044,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeModelTest.java,64,,"            type = ""changed"";"
113045,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeModelTest.java,73,,"            type = ""inserted"";"
113046,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeModelTest.java,82,,"            type = ""removed"";"
113047,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeModelTest.java,91,,"            type = ""structure"";"
113048,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeModelTest.java,779,,"        Object source1 = ""source1"";"
113049,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/DefaultTreeSelectionModelTest.java,611,,"        listener.checkLastPropertyFired(model, ""selectionMode"", new Integer("
113050,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/tree/TreePathTest.java,94,,"        Object[] path2 = new Object[] { new Object(), ""11"", ""22"", ""33"", ""2222"" };"
113051,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/undo/UndoManagerTest.java,178,,"        assertTrue(""CannotUndoException was expected"", bWasException);"
113052,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,92,,"        dtd = new DTDGetter(""TestContentModelSemantic"");"
113053,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,99,,"        Element el = dtd.defineElement(""elemento"", ',', false, false, cm2,"
113054,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,124,,"        AttributeList al = new AttributeList(""bigC"", -2147483648, -1,"
113055,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,125,,"                ""value"", new Vector(), new AttributeList(null));"
113056,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,1751,,"            fail(""Should raise NullPointerException"");"
113057,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,2380,,"            fail(""Should raise ClassCastException, but was returned:"" + result);"
113058,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,2536,,"            fail(""Should raise ClassCastException"");"
113059,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java,3447,,"        assertEquals(""[null]"", v.toString());"
113060,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelSemanticTest.java,50,,"        Element el1 = newElement(""el1"");"
113061,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelSemanticTest.java,51,,"        Element el2 = newElement(""el2"");"
113062,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/x/swing/UtilitiesTest.java,29,,"        metrics = getFontMetrics(new Font(""fixed"", Font.PLAIN, 12));"
113063,./TargetProjects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/x/swing/UtilitiesTest.java,31,,"        assertEquals(""clipped string "", ""Long enough text for this ..."", clippedStr);"
113064,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/DecimalFormat.java,1235,,"            new ObjectStreamField(""posPrefixPattern"", String.class), //$NON-NLS-1$"
113065,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/DecimalFormat.java,1236,,"            new ObjectStreamField(""posSuffixPattern"", String.class), //$NON-NLS-1$"
113066,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/DecimalFormat.java,1237,,"            new ObjectStreamField(""negPrefixPattern"", String.class), //$NON-NLS-1$"
113067,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/DecimalFormat.java,1238,,"            new ObjectStreamField(""negSuffixPattern"", String.class), //$NON-NLS-1$"
113068,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/DecimalFormat.java,1244,,"            new ObjectStreamField(""useExponentialNotation"", boolean.class), //$NON-NLS-1$"
113069,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/DecimalFormat.java,1245,,"            new ObjectStreamField(""minExponentDigits"", byte.class), //$NON-NLS-1$"
113070,./TargetProjects/harmony-classlib/modules/text/src/main/java/java/text/SimpleDateFormat.java,331,,"        pattern = (String)getInternalField(""pattern"", icuFormat); //$NON-NLS-1$"
113071,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AnnotationTest.java,31,,"		assertNotNull(new Annotation(""value""));"
113072,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedCharacterIteratorTest.java,30,,"		String test = ""Test 23ring"";"
113073,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedCharacterIteratorTest.java,33,,"		assertEquals(""Wrong first"", 'T', it.current());"
113074,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java,147,,"            fail(""should throw NullPointerException"");"
113075,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java,51,,"			fail(""should throw IAE"");"
113076,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java,110,,"			fail(""should be IAE"");					"
113077,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java,657,,"			fail(""should throw IllegalArgumentException"");"
113078,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java,662,,"			assertFalse(Bidi.requiresBidi(""aaa"".toCharArray(), -1, 1));"
113079,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java,810,,"            fail(""Expected IAE"");           "
113080,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BreakIteratorTest.java,87,,"            fail(""should throw illegal argument exception"");"
113081,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BreakIteratorTest.java,299,,"			fail(""should throw NPE."");"
113082,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BreakIteratorTest.java,309,,"			fail(""should throw ArrayIndexOutOfBoundsException."");"
113083,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BreakIteratorTest.java,329,,"            fail(""should throw ArrayIndexOutOfBoundsException"");"
113084,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,32,,"    String[] formats = new String[] { ""Less than one"", ""one"","
113085,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,33,,"            ""Between one and two"", ""Greater than two"" };"
113086,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,45,,"        String[] appleFormats = { ""Tiny Apple"", ""Small Apple"", ""Medium Apple"","
113087,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,45,,"        String[] appleFormats = { ""Tiny Apple"", ""Small Apple"", ""Medium Apple"","
113088,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,46,,"                ""Large Apple"", ""Huge Apple"" };"
113089,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,98,,"                formattedString.equals(""Inverted Orange""));"
113090,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,125,,"                formattedString.equals(""Expensive Orange""));"
113091,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,444,,"		assertEquals(""NEGATIVE_ONE"", fmt.format(Long.MIN_VALUE));"
113092,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/ChoiceFormatTest.java,448,,"		assertEquals(""GREATER_THAN_ONE"", fmt.format(Long.MAX_VALUE));"
113093,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/CollationElementIteratorTest.java,101,,"		String text = ""cha"";"
113094,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/CollationElementIteratorTest.java,103,,"				.getInstance(new Locale(""es"", """", ""TRADITIONAL""));"
113095,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/CollationKeyTest.java,33,,"		CollationKey key1 = collator.getCollationKey(""abc"");"
113096,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/CollationKeyTest.java,34,,"		CollationKey key2 = collator.getCollationKey(""ABC"");"
113097,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/CollationKeyTest.java,35,,"		assertEquals(""Should be equal"", 0, key1.compareTo(key2));"
113098,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DataFormatFieldTest.java,37,,"		MyField field = new MyField(""day of month"", Calendar.ERA);"
113099,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DataFormatFieldTest.java,45,,"		assertSame(""Modified calendar field with the same field number"","
113100,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java,79,,"            fail(""Returned wrong array"");"
113101,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java,81,,"            assertTrue(""Array values do not match"", retVal[i].equals(val[i]));"
113102,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java,181,,"            assertTrue(""Failed to set strings"", Arrays"
113103,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java,257,,"        assertTrue(""Return is identical"", retVal != dfs.getMonths());"
113104,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatTest.java,55,,"			assertTrue(""Doesn't work"","
113105,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatTest.java,76,,"		assertTrue(""Wrong class"", f2.getClass() == SimpleDateFormat.class);"
113106,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatTest.java,77,,"		assertTrue(""Wrong default"", f2.equals(DateFormat.getDateInstance("
113107,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatTest.java,79,,"		assertTrue(""Wrong symbols"", f2.getDateFormatSymbols().equals("
113108,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatTest.java,132,,"            fail(""Should throw IAE"");"
113109,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatSymbolsTest.java,76,,"        Currency currE = Currency.getInstance(""EUR"");"
113110,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatSymbolsTest.java,186,,"        dfs.setNaN(""NAN!!"");"
113111,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,69,,"        Number number = form.parse(""23.1"", new ParsePosition(0));"
113112,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,92,,"        number = form.parse(""23.1f"", new ParsePosition(0));"
113113,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,99,,"        number = form.parse(""-0.0"", new ParsePosition(0));"
113114,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,103,,"        number = form.parse(""-9,223,372,036,854,775,8080.00"","
113115,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,807,,"        compare(""00.0#E0: 12.0"", df.format(12.0), ""12.0E0"");"
113116,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,810,,"        compare(""00.0#E0: 12346.0"", df.format(12346.0), ""12.35E3"");"
113117,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,836,,"        compare(""##0.0E0: 123.0"", df.format(123.0), ""123E0"");"
113118,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,837,,"        compare(""##0.0E0: 1234.0"", df.format(1234.0), ""1.234E3"");"
113119,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,846,,"        compare(""#00.0##E0: 0.1"", df.format(0.1), "".100E0"");"
113120,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,872,,"        compare(""#00.0##E0: 1.0"", df.format(1.0), ""1.00E0"");"
113121,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,884,,"        compare(""#.0E0: 0.0"", df.format(0.0), "".0E0"");"
113122,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,949,,"        compare(""###0.00#E0: 0.01"", df.format(0.01), ""100E-4"");"
113123,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,1220,,"        DecimalFormat df = new DecimalFormat(""###0.##"");"
113124,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,1266,,"        Number result = format.parse(""9223372036854775807"", pos);"
113125,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,1360,,"        assertTrue(""Not set"", df.getDecimalFormatSymbols().equals(dfs));"
113126,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java,1434,,"        assertEquals(""Not changed"", 4, df.getMaximumFractionDigits());"
113127,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/FieldPositionTest.java,32,,"		assertNull(""Constructor failed to set field attribute!"", fpos"
113128,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java,150,,"        checkSerialization(new MessageFormat(""{0}""));"
113129,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java,410,,"                new ChoiceFormat(""0#off|1#on""), DateFormat.getDateInstance(), };"
113130,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java,486,,"        f1.setFormatByArgumentIndex(4, new ChoiceFormat(""1#few|2#ok|3#a lot""));"
113131,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,112,,"        assertTrue(""Wrong class"", f2.getClass() == SimpleDateFormat.class);"
113132,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,115,,"        assertTrue(""Wrong symbols"", f2.getDateFormatSymbols().equals("
113133,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,117,,"        assertTrue(""Doesn't work"","
113134,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,126,,"        SimpleDateFormat f2 = new SimpleDateFormat(""yyyy"");"
113135,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,128,,"        assertEquals(""Wrong pattern"", ""yyyy"", f2.toPattern());"
113136,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,335,,"                ""test_formatLjava_util_DateLjava_lang_StringBufferLjava_text_FieldPosition"")"
113137,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,371,,"                "" 12"", DateFormat.DATE_FIELD);"
113138,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,381,,"        test.test("" H"", cal, "" 15"", DateFormat.HOUR_OF_DAY0_FIELD);"
113139,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,440,,"        test.test("" a"", cal, "" PM"", DateFormat.AM_PM_FIELD);"
113140,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,467,,"        format.setTimeZone(TimeZone.getTimeZone(""EST""));"
113141,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,468,,"        test.test("" z"", cal, "" GMT-05:00"", DateFormat.TIMEZONE_FIELD);"
113142,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,481,,"        test.test("" z"", cal, "" GMT+00:00"", DateFormat.TIMEZONE_FIELD);"
113143,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,530,,"                ""+1400, GMT+14:00"", summerDate);"
113144,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,651,,"        test.parse(""yyy"", ""99"", new GregorianCalendar(99, Calendar.JANUARY, 1)"
113145,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java,693,,"        test.parse(""h z"", ""14 GMT-24 "", new Date(51840000), 0, 9);"
113146,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,32,,"		assertNotNull(new StringCharacterIterator(""value"", 0));"
113147,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,121,,"		StringCharacterIterator sci0 = new StringCharacterIterator(""fixture"");"
113148,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,134,,"        StringCharacterIterator it1 = new StringCharacterIterator(""testing"", 2,"
113149,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,172,,"                assertEquals(""Wrong current char"", 'i', it.current());"
113150,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,192,,"                assertEquals(""Wrong next char"", 't', it1.next());"
113151,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,408,,"		assertEquals(""Wrong begin index"", 0, it.getBeginIndex());"
113152,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,409,,"		assertEquals(""Wrong end index"", 7, it.getEndIndex());"
113153,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/StringCharacterIteratorTest.java,410,,"		assertEquals(""Wrong current index"", 0, it.getIndex());"
113154,./TargetProjects/harmony-classlib/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/Support_Format.java,46,,"            assertEquals(""Test "" + count + "": incorrect formatted text"","
113155,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java,129,,"            ""TLS_RSA_WITH_NULL_MD5"", true, KeyExchange_RSA, null, ""MD5"","
113156,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java,133,,"            ""TLS_RSA_WITH_NULL_SHA"", true, KeyExchange_RSA, null, ""SHA"","
113157,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java,141,,"            ""TLS_RSA_WITH_RC4_128_MD5"", false, KeyExchange_RSA, ""RC4_128"","
113158,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java,158,,"            ""DES40_CBC"", ""SHA"", code_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA);"
113159,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java,161,,"            ""TLS_RSA_WITH_DES_CBC_SHA"", false, KeyExchange_RSA, ""DES_CBC"","
113160,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java,166,,"            ""3DES_EDE_CBC"", ""SHA"", code_TLS_RSA_WITH_3DES_EDE_CBC_SHA);"
113161,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLContextImpl.java,66,,"            throw new IllegalStateException(""SSLContext is not initiallized."");"
113162,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java,236,,"                                    ""INTERNAL ERROR"", e);"
113163,./TargetProjects/harmony-classlib/modules/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java,258,,"                                            .getInstance(""DiffieHellman"");"
113164,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/HttpsURLConnectionTest.java,59,,"            fail(""No expected IllegalArgumentException"");"
113165,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLContext2Test.java,85,,"            fail(""RuntimeException must be thrown"");"
113166,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLContext2Test.java,87,,"            assertEquals(""Incorrect message"", ""Not initialiazed"", e.getMessage());"
113167,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLContext2Test.java,87,,"            assertEquals(""Incorrect message"", ""Not initialiazed"", e.getMessage());"
113168,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLContext2Test.java,129,,"        assertTrue(""Not null result"",sslE instanceof SSLEngine);"
113169,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLEngineResultTest.java,55,,"            fail(""IllegalArgumentException must be thrown"");"
113170,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLEngineTest.java,73,,"        String host = ""new host"";"
113171,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLEngineTest.java,106,,"        assertTrue(""Not read only byte buffer"", roBb.isReadOnly());"
113172,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLEngineTest.java,164,,"            fail(""SSLException must be thrown"");"
113173,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLEngineTest.java,514,,"            throw new SSLException(""incorrect limits"");"
113174,./TargetProjects/harmony-classlib/modules/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLExceptionTest.java,61,,"            assertNull(""getCause() must return null"", tE.getCause());"
113175,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/javax/net/ssl/DefaultSSLServerSocketFactoryTest.java,38,,"        DefaultSSLServerSocketFactory f = new DefaultSSLServerSocketFactory(""ERROR"");"
113176,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/javax/net/ssl/DefaultSSLSocketFactoryTest.java,40,,"        DefaultSSLSocketFactory f = new DefaultSSLSocketFactory(""ERROR"");"
113177,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/javax/net/ssl/DefaultSSLSocketFactoryTest.java,43,,"            fail(""No expected SocketException"");"
113178,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,128,,"        assertEquals(""RC4"","
113179,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,143,,"        assertEquals(""DES/CBC/NoPadding"","
113180,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,149,,"        assertEquals(""DESede/CBC/NoPadding"","
113181,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,295,,"        assertEquals(""HmacMD5"","
113182,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,298,,"        assertEquals(""HmacSHA1"","
113183,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,381,,"        assertEquals(""MD5"","
113184,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java,384,,"        assertEquals(""SHA-1"","
113185,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/ClientKeyExchangeTest.java,47,,"            assertTrue(""incorrect ClientKeyExchange"", Arrays.equals("
113186,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/ClientKeyExchangeTest.java,61,,"            assertTrue(""Incorrect message decoding"", Arrays.equals("
113187,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/HandshakeProtocolTest.java,90,,"            fail(""No expected AlertException"");"
113188,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java,39,,"        String[] keyType = {""RSA"", ""DSA""};"
113189,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java,68,,"        assertEquals(""ssl_test_store"", al);"
113190,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,148,,"        assertFalse(""Result differs from expected"","
113191,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,150,,"        assertFalse(""Socket did not reset its want client auth state"","
113192,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,188,,"        supported[0] = ""NOT_SUPPORTED_CIPHER_SUITE"";"
113193,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,448,,"        assertEquals(""Incorrect status"", result.getStatus(),"
113194,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,455,,"            fail(""Expected exception was not thrown."");"
113195,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,529,,"            assertEquals(""Unexpected status of operation:"","
113196,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,536,,"                ""The length of the consumed data differs from expected"","
113197,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,539,,"                ""The length of the produced data differs from expected"","
113198,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,568,,"                assertTrue(""Inbound should be closed."","
113199,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java,1071,,"            ""The length of the received data differs from expected"","
113200,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,92,,"                    fail(""Handshake was not started"");"
113201,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,290,,"        supported[0] = ""NOT_SUPPORTED_CIPHER_SUITE"";"
113202,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,294,,"                fail(""Modification of the returned result """
113203,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,295,,"                        + ""causes the modification of the internal state"");"
113204,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,401,,"        supported[0] = ""NOT_SUPPORTED_PROTOCOL"";"
113205,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,516,,"        assertFalse(""Result does not correspond to expected"","
113206,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java,534,,"        assertFalse(""Socket did not reset its want client auth state"","
113207,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSessionImplTest.java,111,,"            fail(""No expected IllegalArgumentException"");"
113208,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSessionImplTest.java,114,,"        assertNull(session.getValue(""abc""));"
113209,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketFactoriesTest.java,137,,"                                new InetSocketAddress(""localhost"","
113210,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketFactoriesTest.java,209,,"        supported[0] = ""NOT_SUPPORTED_CIPHER_SUITE"";"
113211,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketFunctionalTest.java,81,,"                    ? new String[] {""TLS_""+cipher_suites[0]}"
113212,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketFunctionalTest.java,82,,"                    : new String[] {""SSL_""+cipher_suites[0]});"
113213,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,59,,"        return new SSLSocketImpl(""localhost"", port,"
113214,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,105,,"                    fail(""Handshake was not started"");"
113215,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,369,,"        supported[0] = ""NOT_SUPPORTED_CIPHER_SUITE"";"
113216,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,373,,"                fail(""Modification of the returned result """
113217,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,374,,"                        + ""causes the modification of the internal state"");"
113218,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,478,,"        supported[0] = ""NOT_SUPPORTED_PROTOCOL"";"
113219,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,645,,"            assertFalse(""Result does not correspond to expected"","
113220,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,702,,"        assertFalse(""Socket did not reset its want client auth state"","
113221,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,1035,,"            fail(""Expected exception was not thrown"");"
113222,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java,1038,,"                System.out.println(""Trowed exception: ""+e.getMessage());"
113223,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/ServerHelloTest.java,58,,"        assertTrue(""incorrect message decoding"", Arrays.equals("
113224,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/ServerKeyExchangeTest.java,44,,"        assertTrue(""incorrect ServerKeyExchange"", Arrays.equals(message.hash,"
113225,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/ServerKeyExchangeTest.java,61,,"        assertTrue(""incorrect message decoding"", Arrays.equals(message.hash,"
113226,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java,93,,"            tm.checkClientTrusted(null, ""RSA"");"
113227,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java,94,,"            fail(""No expected IllegalArgumentException "");"
113228,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/KeyManagerFactoryImplTest.java,44,,"        String def_keystore = System.getProperty(""javax.net.ssl.keyStore"");"
113229,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/ProtocolVersionTest.java,31,,"                ProtocolVersion.getByName(""SSLv3""));"
113230,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/ProtocolVersionTest.java,33,,"                ProtocolVersion.getByName(""TLSv1""));"
113231,./TargetProjects/harmony-classlib/modules/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/TrustManagerFactoryImplTest.java,44,,"        String def_keystore = System.getProperty(""javax.net.ssl.trustStore"");"
113232,./TargetProjects/harmony-classlib/modules/x-net/src/test/java/javax/net/ssl/MySSLContextSpi.java,49,,"            throw new RuntimeException(""Not initialiazed"");"
113233,./TargetProjects/harmony-classlib/modules/x-net/src/test/java/javax/net/ssl/SSLContextSpiTests.java,55,,"            fail(""RuntimeException must be thrown"");"
113234,./TargetProjects/harmony-classlib/modules/x-net/src/test/java/javax/net/ssl/SSLContextSpiTests.java,57,,"            assertEquals(""Incorrect message"", ""Not initialiazed"", e.getMessage());"
113235,./TargetProjects/harmony-classlib/modules/x-net/src/test/java/javax/net/ssl/SSLContextSpiTests.java,57,,"            assertEquals(""Incorrect message"", ""Not initialiazed"", e.getMessage());"
113236,./TargetProjects/harmony-classlib/modules/x-net/src/test/java/javax/net/ssl/SSLContextSpiTests.java,90,,"        assertNull(""Not null result"", sslConSpi.engineGetSocketFactory());"
113237,./TargetProjects/harmony-classlib/modules/x-net/src/test/support/common/java/org/apache/harmony/xnet/tests/support/MySSLContextSpi.java,56,,"            throw new RuntimeException(""Not initialiazed"");"
113238,./TargetProjects/harmony-classlib/support/src/test/java/org/apache/harmony/testframework/CharWrapperTester.java,109,,"            o.write(""BUT"");"
113239,./TargetProjects/harmony-classlib/support/src/test/java/org/apache/harmony/testframework/CharWrapperTester.java,110,,"            o.write(""TERS"");"
113240,./TargetProjects/harmony-classlib/support/src/test/java/org/apache/harmony/testframework/serialization/SerializationTest.java,491,,"        Assert.assertFalse(""Empty array"", objects.length == 0);"
113241,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_HttpServer.java,305,,"				print(os, ""HTTP/1.1 "" + OK + "" OK\r\n"");"
113242,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_HttpServer.java,305,,"				print(os, ""HTTP/1.1 "" + OK + "" OK\r\n"");"
113243,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_HttpServer.java,306,,"				print(os, ""Content-Length: 5\r\n"");"
113244,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_HttpTests.java,50,,"		final String chunkedTestUrl = ""http://localhost:"" + portNumber"
113245,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_HttpTests.java,104,,"			String result = new String(bout.toByteArray(), ""ISO8859_1"");"
113246,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_StringReader.java,86,,"                    throw new IOException(""StringReader is closed"");"
113247,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_TestProvider.java,60,,"				put(""Alg.Alias.MessageDigest.SHA1"", ""SHA"");"
113248,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_TestProvider.java,73,,"				put(""Alg.Alias.AlgorithmParameters.1.2.840.10040.4.1"", ""DSA"");"
113249,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_TestProvider.java,96,,"				put(""Alg.Alias.Signature.DSA"", ""SHA1withDSA"");"
113250,./TargetProjects/harmony-classlib/support/src/test/java/tests/support/Support_UnmodifiableMapTest.java,50,,"				!map.containsKey(""100""));"
113251,./TargetProjects/harmony-jdktools/modules/jdktools/src/main/java/org/apache/harmony/tools/javap/Clazz.java,527,,"                    result.append("";\t//  "");"
113252,./TargetProjects/harmony-jdktools/modules/jdktools/src/main/java/org/apache/harmony/tools/keytool/ArgumentsParser.java,617,,"                    prompt = ""Enter new key password for <"" + alias + "">: "";"
113253,./TargetProjects/harmony-jdktools/modules/jdktools/src/main/java/org/apache/harmony/tools/keytool/ArgumentsParser.java,694,,"                new StringBuffer(""Unknown""), new StringBuffer(""Unknown""),"
113254,./TargetProjects/harmony-jdktools/modules/jdktools/src/main/java/org/apache/harmony/tools/keytool/KeyCertGenerator.java,207,,"            throw new NoSuchAlgorithmException(""The algorithm "" + keyAlg"
113255,./TargetProjects/harmony-jdktools/modules/jdktools/src/main/java/org/apache/harmony/tools/keytool/KeyCertGenerator.java,212,,"                            + "" is not found in the environment."").initCause(e);"
113256,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/framework/jdwp/JDWPConstants.java,70,,"                return ""<unknown>"";"
113257,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/framework/jdwp/JDWPConstants.java,92,,"            return ""NONE"";"
113258,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ArrayReference/GetValuesTest.java,165,,"        logWriter.println(""==> testGetValues001: checkArrayRegion: arrayID = "" + arrayID"
113259,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ArrayReference/GetValuesTest.java,166,,"                + ""; Expected error = "" + error + ""("" + JDWPConstants.Error.getName(error) + "")"""
113260,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ArrayReference/GetValuesTest.java,170,,"        logWriter.println(""==> PASSED!"");"
113261,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ClassObjectReference/ReflectedTypeTest.java,110,,"                logWriter.println(""==> refTypeId[""+j+""] = "" + typeInitID);"
113262,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ClassType/InvokeMethodTest.java,175,,"        checkReplyPacket(reply, ""ClassType::InvokeMethod command"");"
113263,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ClassType/InvokeMethodTest.java,180,,"        logWriter.println("" ClassType.InvokeMethod: returnValue.getIntValue()="""
113264,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ClassType/InvokeMethodTest.java,189,,"        logWriter.println("" ClassType.InvokeMethod: exception.tag="""
113265,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ClassType/InvokeMethodTest.java,190,,"                + exception.tag + "" exception.objectID="" + exception.objectID);"
113266,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ClassType/SuperClassTest.java,99,,"            asserSuperClassReplyIsValid(reply, ""Ljava/lang/Object;"");"
113267,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/DebuggerOnDemand/OnthrowLaunchDebugger002.java,59,,"            testSynchronizer.sendMessage(""FAIL"");"
113268,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/DebuggerOnDemand/OnthrowLaunchDebugger002.java,69,,"            logWriter.println(""##EXCEPTION: "" + e);"
113269,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEvents002Test.java,77,,"        logWriter.println(""==> "");"
113270,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,88,,"        logWriter.println(""=> debuggeeClassID = "" + debuggeeClassID);"
113271,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,91,,"        logWriter.println(""=> threadID = "" + threadID);"
113272,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,93,,"        long runMethodID = debuggeeWrapper.vmMirror.getMethodID(debuggeeClassID, ""run"");"
113273,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,94,,"        logWriter.println(""=> runMethodID = "" + runMethodID);"
113274,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,97,,"        logWriter.println(""=> Info for tested method '"" + methodForEvents + ""':"");"
113275,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,100,,"            String failureMessage = ""## FAILURE: Can NOT get MethodID for class '"""
113276,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,101,,"                + getDebuggeeClassName() + ""'; Method name = "" + methodForEvents;"
113277,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,104,,"        logWriter.println(""=> testedMethodID = "" + testedMethodID);"
113278,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,109,,"        logWriter.println(""=> Set request for BREAKPOINT event in debuggee: """
113279,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,114,,"            String failureMessage = ""## FAILURE: Can NOT get MethodEntryLocation for method '"""
113280,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,120,,"        logWriter.println(""=> Breakpoint requestID = "" + breakpointRequestID);"
113281,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,123,,"                + getDebuggeeClassName() + "", method: "" + methodForEvents);"
113282,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,130,,"        logWriter.println(""=> Set request for SINGLE_STEP event in class """
113283,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,148,,"        checkReplyPacket(setRequestReply, ""EventRequest::Set command"");"
113284,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,150,,"        logWriter.println(""=> SINGLE_STEP requestID = "" + stepRequestID);"
113285,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,170,,"        checkReplyPacket(clearReply, ""EventRequest::Clear"");"
113286,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,178,,"        logWriter.println(""=> Resume debuggee"");"
113287,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,667,,"            logWriter.println(""=> Event #"" + i + "";"");"
113288,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,668,,"            logWriter.println(""=> EventKind: """
113289,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTest.java,674,,"                    .println(""=> RequestID: "" + parsedEvents[i].getRequestID());"
113290,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/CombinedEventsTestCase.java,58,,"                    + classID + ""; Method name = "" + methodName);"
113291,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/InvokeMethodTest.java,144,,"                + exception.tag + "" exception.objectID="" + exception.objectID);"
113292,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/InvokeMethodTest.java,152,,"        assertTrue(""exception must be != null"", exception != null);"
113293,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/InvokeMethodTest.java,153,,"        assertTrue(""exception.objectID must be == 0"", exception.objectID == 0);"
113294,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/InvokeMethodTest.java,213,,"        checkReplyPacket(reply, ""ObjectReference::InvokeMethod command"");"
113295,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/InvokeMethodTest.java,216,,"        logWriter.println("" ObjectReference.InvokeMethod: returnValue.getIntValue()="""
113296,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/InvokeMethodTest.java,220,,"        logWriter.println("" ObjectReference.InvokeMethod: exception.tag="""
113297,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/MonitorInfoTest.java,153,,"                (""## FAILURE: "" + thisCommandName + "" returns unexpected monitorOwnerThreadID:"" +"
113298,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/SetValues004Debuggee.java,80,,"            logWriter.println(""##> Debuggee: FAILURE: Unexpected value"");"
113299,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/SetValues004Debuggee.java,81,,"            logWriter.println(""##> Expected value = "" + null);"
113300,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/SetValues004Debuggee.java,84,,"            logWriter.println(""--> Debuggee: OK. Expected value"");"
113301,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/SetValuesDebuggee.java,56,,"            logWriter.println(""##> Debuggee: FAILURE: Unexpected value"");"
113302,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ObjectReference/SetValuesDebuggee.java,60,,"            logWriter.println(""--> Debuggee: PASSED: Expected value"");"
113303,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/FieldsTest.java,127,,"                    logWriter.println(""## Field name = "" + returnedFieldName);"
113304,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/FieldsWithGenericTest.java,141,,"                    logWriter.println(""## Field name = "" + returnedFieldName);"
113305,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/MethodsTest.java,135,,"                    logWriter.println(""## Method name = "" + returnedMethodName);"
113306,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/MethodsWithGenericTest.java,145,,"                    logWriter.println(""## Method name = "" + returnedMethodName);"
113307,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/MethodsWithGenericTest.java,149,,"                        returnedMethodName + "";\n"";"
113308,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/Signature002Test.java,130,,"                    + "" returns unexpected ERROR = "" + errorCode "
113309,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ReferenceType/Signature002Test.java,169,,"            (""\n## FAILURE: "" + thisCommandName + "" does NOT return expected error - INVALID_OBJECT"");"
113310,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/StackFrame/GetValuesTest.java,204,,"            logWriter.printError(""Unexpected tag of variable: """
113311,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/StackFrame/PopFrames002Test.java,94,,"        logWriter.println(""=> Wait for breakpoint in "" + breakpointMethodName);"
113312,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/StackFrame/PopFrames002Test.java,163,,"        logWriter.println(""=> Resume debuggee"");"
113313,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/StackFrame/SetValuesTest.java,223,,"            logWriter.printError(""Unexpected tag of variable: """
113314,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/FramesTest.java,75,,"        (""==> testedThreadName = |"" + testedThreadName +""|""); "
113315,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/FramesTest.java,77,,"        logWriter.println(""==> threadID = "" + threadID); "
113316,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/FramesTest.java,82,,"            printErrorAndFail(""Unexpected ERROR = "" + err "
113317,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/FramesTest.java,91,,"            logWriter.println(""\t"" + i + "". frameID="" + frame.frameID"
113318,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/FramesTest.java,92,,"                    + "" - "" + classSignature"
113319,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/ResumeTest.java,152,,"            if ( ! checkReplyPacketWithoutFail(reply, ""ThreadReference.Resume command"") ) {"
113320,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/ResumeTest.java,186,,"            logWriter.println(""==> Send ThreadReference.Status command...""); "
113321,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/ResumeTest.java,192,,"            if ( ! checkReplyPacketWithoutFail(reply, ""ThreadReference.Status command"") ) {"
113322,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/ResumeTest.java,200,,"            logWriter.println(""==> threadStatus = "" + threadStatus + ""("""
113323,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/ResumeTest.java,202,,"            logWriter.println(""==> suspendStatus = "" + suspendStatus + ""("""
113324,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/Status005Debuggee.java,98,,"        parent.logWriter.println(""--> Thread: "" + getName() +  "": started..."");"
113325,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/SuspendCountTest.java,74,,"            synchronizer.sendMessage(""FINISH"");"
113326,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/SuspendCountTest.java,137,,"            logWriter.println(""==> Send ThreadReference.SuspendCount command...""); "
113327,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/SuspendCountTest.java,143,,"            if ( ! checkReplyPacketWithoutFail(reply, ""ThreadReference.SuspendCount command"") ) {"
113328,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/SuspendCountTest.java,147,,"                logWriter.println(""==> ThreadReference.SuspendCount command returns suspendCount = "" + suspendCount); "
113329,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/ThreadReference/SuspendCountTest.java,149,,"                    logWriter.println(""## FAILURE: Unexpected suspendCount for thread = "" + threadName);"
113330,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/RedefineClassesTest.java,120,,"        logWriter.println(""==> "" + thisTestName + "" for "" + thisCommandName + "": START..."");"
113331,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/RedefineClassesTest.java,120,,"        logWriter.println(""==> "" + thisTestName + "" for "" + thisCommandName + "": START..."");"
113332,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/RedefineClassesTest.java,127,,"            (""===> File name = "" + byteCodeToRedefineFile);"
113333,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/RedefineClassesTest.java,129,,"            (""===> Test can NOT be run!"");"
113334,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/RedefineClassesTest.java,130,,"            logWriter.println(""==> "" + thisTestName + "" for "" + thisCommandName + "": FINISH"");"
113335,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/RedefineClassesTest.java,174,,"            logWriter.println(""===> Exception is thrown: "" + thrown);"
113336,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/VirtualMachine/TopLevelThreadGroupsTest.java,105,,"            logWriter.println(""\n==> childThreadID["" + j + ""] = "" + id);"
113337,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/share/JDWPRawTestCase.java,91,,"        logWriter.println(""----------------------------------------"");"
113338,./TargetProjects/harmony-jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/share/debuggee/InvokeMethodDebuggee.java,46,,"            throw new Throwable(""test exception"");"
113339,./TargetProjects/harmony-jdktools/modules/jretools/src/main/java/org/apache/harmony/jretools/keytool/ArgumentsParser.java,617,,"                    prompt = ""Enter new key password for <"" + alias + "">: "";"
113340,./TargetProjects/harmony-jdktools/modules/jretools/src/main/java/org/apache/harmony/jretools/keytool/ArgumentsParser.java,694,,"                new StringBuffer(""Unknown""), new StringBuffer(""Unknown""),"
113341,./TargetProjects/harmony-jdktools/modules/jretools/src/main/java/org/apache/harmony/jretools/keytool/KeyCertGenerator.java,207,,"            throw new NoSuchAlgorithmException(""The algorithm "" + keyAlg"
113342,./TargetProjects/harmony-jdktools/modules/jretools/src/main/java/org/apache/harmony/jretools/keytool/KeyCertGenerator.java,212,,"                            + "" is not found in the environment."").initCause(e);"
113343,./TargetProjects/harmony-jdktools/modules/jretools/src/main/java/org/apache/harmony/jretools/policytool/control/PolicyFileHandler.java,73,,"            JOptionPane.showMessageDialog( dialogParentComponent, ""The file does not exist!"", ""Error"", JOptionPane.ERROR_MESSAGE );"
113344,./TargetProjects/harmony-jdktools/modules/jretools/src/main/java/org/apache/harmony/jretools/policytool/control/PolicyTextParser.java,158,,"                throw new InvalidPolicyTextException( ""Was expecting semicolon but found something else!"" );"
113345,./TargetProjects/hbase/hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutput.java,401,,"      future.completeExceptionally(new IOException(""stream already broken""));"
113346,./TargetProjects/hbase/hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java,804,,"          ""SASL client doing encrypted handshake for addr = "" + addr + "", datanodeId = "" + dnInfo);"
113347,./TargetProjects/hbase/hbase-asyncfs/src/test/java/org/apache/hadoop/hbase/security/HBaseKerberosUtils.java,99,,"    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION, ""kerberos"");"
113348,./TargetProjects/hbase/hbase-backup/src/main/java/org/apache/hadoop/hbase/backup/impl/IncrementalTableBackupClient.java,184,,"                LOG.trace(""copying "" + p + "" to "" + tgt);"
113349,./TargetProjects/hbase/hbase-backup/src/main/java/org/apache/hadoop/hbase/backup/impl/TableBackupClient.java,116,,"    LOG.info(""Backup "" + backupInfo.getBackupId() + "" started at "" + startTs + ""."");"
113350,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,63,,"    String[] args = new String[] { ""describe"", ""-help"" };"
113351,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,63,,"    String[] args = new String[] { ""describe"", ""-help"" };"
113352,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,92,,"    String[] args = new String[] { ""create"", ""full"", ""hdfs://localhost:1020"", ""-t"", ""t1"" };"
113353,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,137,,"    String[] args = new String[] { ""history"", ""-help"" };"
113354,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,159,,"    String[] args = new String[] { ""delete"", ""-help"" };"
113355,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,210,,"    String[] args = new String[] { ""set"", ""-help"" };"
113356,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupCommandLineTool.java,307,,"    String[] args = new String[] { ""create"", ""-xx"" };"
113357,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupMultipleDeletes.java,73,,"      p1.addColumn(famName, qualName, Bytes.toBytes(""val"" + i));"
113358,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,116,,"    table.writeBackupStartCode(code, ""root"");"
113359,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,267,,"    rsTimestampMap.put(""rs1:100"", 100L);"
113360,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,268,,"    rsTimestampMap.put(""rs2:100"", 101L);"
113361,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,269,,"    rsTimestampMap.put(""rs3:100"", 103L);"
113362,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,374,,"      String[] tables = new String[] { ""table1"", ""table2"", ""table3"" };"
113363,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,374,,"      String[] tables = new String[] { ""table1"", ""table2"", ""table3"" };"
113364,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,374,,"      String[] tables = new String[] { ""table1"", ""table2"", ""table3"" };"
113365,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,375,,"      String setName = ""name"";"
113366,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,395,,"      String[] addTables = new String[] { ""table4"", ""table5"", ""table6"" };"
113367,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,395,,"      String[] addTables = new String[] { ""table4"", ""table5"", ""table6"" };"
113368,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestBackupSystemTable.java,395,,"      String[] addTables = new String[] { ""table4"", ""table5"", ""table6"" };"
113369,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestFullRestore.java,62,,"    LOG.info(""backup complete"");"
113370,./TargetProjects/hbase/hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestIncrementalBackup.java,105,,"      LOG.debug(""writing "" + ADD_ROWS + "" rows to "" + table1);"
113371,./TargetProjects/hbase/hbase-balancer/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java,186,,"  @RestrictedApi(explanation = ""Should only be called in tests"", link = """","
113372,./TargetProjects/hbase/hbase-balancer/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java,270,,"    allowedOnPath = "".*(/src/test/.*|StochasticLoadBalancer).java"")"
113373,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/favored/TestFavoredNodeAssignmentHelper.java,78,,"      return ""rack1"";"
113374,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/favored/TestFavoredNodeAssignmentHelper.java,80,,"      return ""rack2"";"
113375,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/favored/TestFavoredNodeAssignmentHelper.java,82,,"      return ""rack3"";"
113376,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/favored/TestFavoredNodeAssignmentHelper.java,95,,"        int i = Integer.parseInt(sn.getHostname().substring(""foo"".length()));"
113377,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/favored/TestFavoredNodeAssignmentHelper.java,468,,"      assertTrue(""Server:"" + sn + "" does not belong to list: "" + servers, servers.contains(sn));"
113378,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/favored/TestFavoredNodeAssignmentHelper.java,480,,"    ServerName skipSN = ServerName.valueOf(""foo1:1234"", ServerName.NON_STARTCODE);"
113379,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/master/balancer/TestBaseLoadBalancer.java,229,,"        .setEndKey(Bytes.toBytes(""key2""))"
113380,./TargetProjects/hbase/hbase-balancer/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRegionHDFSBlockLocationFinder.java,75,,"      distribution.addHostsAndBlockWeight(new String[] { ""host-"" + i }, 1 + rand.nextInt(100));"
113381,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/ClusterMetricsBuilder.java,418,,"          sb.append(""\n  "" + serverName);"
113382,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncRegionLocator.java,139,,"          ""ms) waiting for region locations for "" + tableName + "", row='"" +"
113383,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncRpcRetryingCallerFactory.java,152,,"      checkNotNull(callable, ""action is null"");"
113384,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ColumnFamilyDescriptorBuilder.java,1153,,"          s.append("" => "");"
113385,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java,346,,"    this.appendTracker = new CallTracker(this.registry, ""Mutate"", ""Append"", scope);"
113386,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Put.java,83,,"      throw new IllegalArgumentException(""Timestamp cannot be negative. ts="" + ts);"
113387,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java,942,,"    Preconditions.checkNotNull(columnFamily, ""columnFamily is null."""
113388,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java,2113,,"    Preconditions.checkNotNull(tableNamePattern, ""tableNamePattern is null."""
113389,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Table.java,117,,"    throw new NotImplementedException(""Add an implementation!"");"
113390,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/filter/ParseFilter.java,191,,"        throw new IllegalArgumentException(""Incorrect Filter String"");"
113391,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/IPCUtil.java,190,,"      return (IOException) new ConnectException(""Call to "" + getCallTarget(addr, regionInfo) +"
113392,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/IPCUtil.java,197,,"        "" failed on local exception: "" + error, error);"
113393,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/security/EncryptionUtil.java,92,,"      throw new RuntimeException(""Cipher '"" + algorithm + ""' not available"");"
113394,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java,693,,"        throw new DoNotRetryIOException(""Cell count of "" + cellCount + "" but no cellScanner: "" +"
113395,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java,1613,,"  @SuppressWarnings(""unchecked"")"
113396,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java,1617,,"    String funcName = ""parseFrom"";"
113397,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java,2233,,"      return ""region= "" + getStringForByteString(r.getRegion().getValue()) +"
113398,./TargetProjects/hbase/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ReadOnlyZKClient.java,256,,"      return FutureUtils.failedFuture(new DoNotRetryIOException(""Client already closed""));"
113399,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableTracing.java,334,,"    assertTrace(""getList"");"
113400,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,41,,"    Assert.assertNull(put.getAttribute(""absent""));"
113401,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,48,,"    put.setAttribute(""attribute1"", Bytes.toBytes(""value1""));"
113402,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,48,,"    put.setAttribute(""attribute1"", Bytes.toBytes(""value1""));"
113403,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,55,,"    put.setAttribute(""attribute1"", Bytes.toBytes(""value12""));"
113404,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,62,,"    put.setAttribute(""attribute2"", Bytes.toBytes(""value2""));"
113405,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,62,,"    put.setAttribute(""attribute2"", Bytes.toBytes(""value2""));"
113406,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,140,,"    Assert.assertNull(""Make sure id is null if unset"", get.toMap().get(""id""));"
113407,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAttributes.java,141,,"    get.setId(""myId"");"
113408,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestGet.java,96,,"    get.setAttribute(""attribute1"", Bytes.toBytes(""value1""));"
113409,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestGet.java,96,,"    get.setAttribute(""attribute1"", Bytes.toBytes(""value1""));"
113410,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestGet.java,97,,"    get.setAttribute(""attribute2"", Bytes.toBytes(""value2""));"
113411,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestGet.java,97,,"    get.setAttribute(""attribute2"", Bytes.toBytes(""value2""));"
113412,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestGet.java,103,,"    Assert.assertNull(get2.getAttribute(""absent""));"
113413,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestImmutableScan.java,142,,"      throw new RuntimeException(""Should not reach here"");"
113414,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMetricsConnection.java,93,,"          ClientService.getDescriptor().findMethodByName(""Mutate""),"
113415,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMutation.java,49,,"    Append origin = new Append(Bytes.toBytes(""ROW-01""));"
113416,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMutation.java,51,,"    byte[] family = Bytes.toBytes(""CF-01"");"
113417,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestOperation.java,175,,"      FAMILY_FILTER.getClass().getSimpleName() + "" (EQUAL, value)"";"
113418,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestOperation.java,303,,"    List familyInfo = (List) ((Map) parsedJSON.get(""families"")).get("
113419,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestScan.java,55,,"    scan.setAttribute(""attribute1"", Bytes.toBytes(""value1""));"
113420,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestScan.java,55,,"    scan.setAttribute(""attribute1"", Bytes.toBytes(""value1""));"
113421,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestScan.java,56,,"    scan.setAttribute(""attribute2"", Bytes.toBytes(""value2""));"
113422,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestScan.java,56,,"    scan.setAttribute(""attribute2"", Bytes.toBytes(""value2""));"
113423,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestScan.java,63,,"    Assert.assertNull(scan2.getAttribute(""absent""));"
113424,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestScan.java,83,,"            .setAttribute(""att_v0"", Bytes.toBytes(""att_v0""))"
113425,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/ipc/TestConnectionId.java,43,,"  private User testUser1 = User.createUserForTesting(testConfig, ""test"", new String[]{""testgroup""});"
113426,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/ipc/TestIPCUtil.java,67,,"      return c.newInstance(""error"");"
113427,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaGlobalsSettingsBypass.java,42,,"    QuotaGlobalsSettingsBypass orig = new QuotaGlobalsSettingsBypass(""joe"", null, null, null, true);"
113428,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaGlobalsSettingsBypass.java,65,,"    expectFailure(userBypass, new QuotaGlobalsSettingsBypass(""frank"", null, null, null, false));"
113429,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceLimitSettings.java,50,,"    new SpaceLimitSettings(TableName.valueOf(""foo""), -1, SpaceViolationPolicy.NO_INSERTS);"
113430,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/quotas/TestThrottleSettings.java,51,,"    ThrottleSettings orig = new ThrottleSettings(""joe"", null, null, null, tr1);"
113431,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/security/TestEncryptionUtil.java,118,,"    byte[] wrappedKeyBytes = EncryptionUtil.wrapKey(conf, ""hbase"", key);"
113432,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/shaded/protobuf/TestProtobufUtil.java,101,,"    getBuilder.setRow(ByteString.copyFromUtf8(""row""));"
113433,./TargetProjects/hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/util/TestRoundRobinPoolMap.java,56,,"    String key = ""key"";"
113434,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/ByteBufferKeyOnlyKeyValue.java,173,,"    throw new IllegalArgumentException(""This is a key only Cell"");"
113435,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/ChoreService.java,200,,"  @RestrictedApi(explanation = ""Should only be called in ScheduledChore"", link = """","
113436,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/io/util/BlockIOUtils.java,75,,"              ""Not enough ByteBuffers to read the reminding "" + remain + "" "" + ""bytes"");"
113437,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/io/util/StreamUtils.java,80,,"            throw new IOException(""Malformed varint"");"
113438,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java,807,,"          + "" offset "" + offset + "" in a "" + bytes.length + "" byte array"");"
113439,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java,807,,"          + "" offset "" + offset + "" in a "" + bytes.length + "" byte array"");"
113440,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java,807,,"          + "" offset "" + offset + "" in a "" + bytes.length + "" byte array"");"
113441,./TargetProjects/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/JVM.java,52,,"      System.getProperty(""os.name"") != null &&"
113442,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellComparator.java,183,,"            Bytes.toBytes(TableName.META_TABLE_NAME.getNameAsString()+"",a,,0,1""), now)),"
113443,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellComparator.java,196,,"            Bytes.toBytes(TableName.META_TABLE_NAME.getNameAsString()+"",,1""), now)),"
113444,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java,453,,"    byte[] f = Bytes.toBytes(""cf1"");"
113445,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java,454,,"    byte[] q = Bytes.toBytes(""qual1"");"
113446,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java,243,,"    ScheduledChore chore = new FailInitialChore(""chore"", period, failureThreshold);"
113447,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java,408,,"    assertEquals(""Chores are missing their start time. Should expand core pool size"", 4,"
113448,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java,499,,"    assertEquals(""Scheduled chore mismatch"", 5, service.getNumberOfScheduledChores());"
113449,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java,522,,"    SlowChore sc1 = new SlowChore(""sc1"", period);"
113450,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java,523,,"    SlowChore sc2 = new SlowChore(""sc2"", period);"
113451,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java,524,,"    SlowChore sc3 = new SlowChore(""sc3"", period);"
113452,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestClassFinder.java,154,,"    LOG.info(""Created jar "" + createAndLoadJar("""", classNamePrefix, counter));"
113453,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCompoundConfiguration.java,166,,"    conf2.set(""X"", ""modification"");"
113454,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCompoundConfiguration.java,167,,"    conf2.set(""D"", ""not4"");"
113455,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestHBaseConfiguration.java,64,,"    conf.set(""hbase.security.authentication"", ""kerberos"");"
113456,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestHBaseConfiguration.java,65,,"    conf.set(""hbase.regionserver.kerberos.principal"", ""hbasesource"");"
113457,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestHBaseConfiguration.java,124,,"            conf.getPropertySources(""dfs.client.read.shortcircuit"")[0]);"
113458,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestHDFSBlocksDistribution.java,48,,"    distribution.addHostsAndBlockWeight(new String[] {""test""}, 101);"
113459,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestHDFSBlocksDistribution.java,49,,"    assertEquals(""Should be one host"", 1, distribution.getHostAndWeights().size());"
113460,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestIndividualBytesFieldCell.java,190,,"    new IndividualBytesFieldCell(Bytes.toBytes(""row""), 0, 100,"
113461,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestIndividualBytesFieldCell.java,201,,"            Bytes.toBytes(""family""), 0, 100,"
113462,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestIndividualBytesFieldCell.java,212,,"            Bytes.toBytes(""qualifier""), 0, 100,"
113463,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestIndividualBytesFieldCell.java,234,,"            Bytes.toBytes(""value""), 0, 100,"
113464,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java,103,,"      new KeyValue(Bytes.toBytes(""rk""), Bytes.toBytes(""fam""), null, 1, (byte[]) null),"
113465,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java,210,,"        Bytes.toBytes(TableName.META_TABLE_NAME.getNameAsString()+"",a,,0,1""), now),"
113466,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java,227,,"        Bytes.toBytes(TableName.META_TABLE_NAME.getNameAsString()+"",,1""), now),"
113467,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java,569,,"    KeyValue kvA1 = new KeyValue(Bytes.toBytes(""key""), Bytes.toBytes(""cf""),"
113468,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java,570,,"        Bytes.toBytes(""qualA""), Bytes.toBytes(""1""));"
113469,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java,674,,"      Bytes.toBytesBinary(""\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"""
113470,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestServerName.java,96,,"    ServerName sn = ServerName.valueOf(""www.example.org"", 1234, 5678);"
113471,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestTableName.java,101,,"    new Names(""table1"", ""table1""),"
113472,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/TestTableName.java,102,,"    new Names(""table2"", ""table2""),"
113473,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/io/crypto/TestCipherProvider.java,66,,"      return new String[] { ""TEST"" };"
113474,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedNumeric.java,80,,"        assertEquals(""encodedLength does not match actual, "" + val,"
113475,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStructNullExtension.java,83,,"    assertEquals(""Failed to skip null element with extended struct."", 0, it.skip());"
113476,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/AbstractHBaseToolTest.java,103,,"    String[] args = new String[] { ""--required=foo"", ""--optional=bar"", ""--boolean""};"
113477,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/AbstractHBaseToolTest.java,106,,"    assertEquals(""foo"", tool.requiredValue);"
113478,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/AbstractHBaseToolTest.java,107,,"    assertEquals(""bar"", tool.optionalValue);"
113479,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestBytes.java,388,,"    assertTrue(Bytes.startsWith(Bytes.toBytes(""hello""), Bytes.toBytes(""h"")));"
113480,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestCommonFSUtils.java,93,,"    Path p = new Path(""file:///hbase/root"");"
113481,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestConcatenatedLists.java,51,,"      fail(""Should throw"");"
113482,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,139,,"        assertEquals(""Surprising return value."","
113483,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,141,,"        assertEquals(""Surprising serialized length."", lens[i], buf.getPosition());"
113484,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,142,,"        assertEquals(""Buffer underflow."", 0, a[0]);"
113485,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,143,,"        assertEquals(""Buffer overflow."", 0, a[a.length - 1]);"
113486,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,149,,"        assertEquals(""Did not skip enough bytes."", lens[i], buf.getPosition());"
113487,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,153,,"        assertEquals(""Deserialization failed."", vals[i], OrderedBytes.getVaruint64(buf, comp));"
113488,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,154,,"        assertEquals(""Did not consume enough bytes."", lens[i], buf.getPosition());"
113489,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,179,,"        assertEquals(""Broken test: serialization did not consume entire buffer."","
113490,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,224,,"            ""Encoded representations do not preserve natural order: <%s>, <%s>, %s"","
113491,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestOrderedBytes.java,804,,"    String[] vals = { ""foo"", ""baaaar"", ""bazz"" };"
113492,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestStrings.java,42,,"            new StringBuilder(""foo""), ""bar"", ""baz"").toString());"
113493,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestStrings.java,42,,"            new StringBuilder(""foo""), ""bar"", ""baz"").toString());"
113494,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestStrings.java,42,,"            new StringBuilder(""foo""), ""bar"", ""baz"").toString());"
113495,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestVersionInfo.java,39,,"    assertTrue(VersionInfo.compareVersion(""2.0.0"", ""1.4.0"") > 0);"
113496,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestVersionInfo.java,50,,"    assertTrue(VersionInfo.compareVersion(""1.99.14"", ""2.0.0-alpha-1"") < 0);"
113497,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestVersionInfo.java,59,,"    assertTrue(VersionInfo.compareVersion(""2.any.any"", ""2.0.0"") < 0);"
113498,./TargetProjects/hbase/hbase-common/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKConfig.java,67,,"    testKey(""server"", 2181, ""/hbase"");"
113499,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestBatchCoprocessorEndpoint.java,139,,"      LOG.info(""Got value "" + e.getValue().getSum() + "" for region """
113500,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestBatchCoprocessorEndpoint.java,139,,"      LOG.info(""Got value "" + e.getValue().getSum() + "" for region """
113501,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestBatchCoprocessorEndpoint.java,146,,"    assertEquals(""Invalid result"", expectedResult, sumResult);"
113502,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java,177,,"      .newBuilder(Bytes.toBytes(""test"")).build());"
113503,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java,179,,"    tdb.setValue(""COPROCESSOR$1"", jarFileOnHDFS1 + ""|"" + cpName1"
113504,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java,228,,"    assertTrue(""Class "" + cpName1 + "" was missing on a region"", found1);"
113505,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java,228,,"    assertTrue(""Class "" + cpName1 + "" was missing on a region"", found1);"
113506,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorEndpoint.java,155,,"      LOG.info(""Got value ""+e.getValue()+"" for region ""+Bytes.toStringBinary(e.getKey()));"
113507,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorEndpoint.java,155,,"      LOG.info(""Got value ""+e.getValue()+"" for region ""+Bytes.toStringBinary(e.getKey()));"
113508,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorEndpoint.java,190,,"        TestProtos.EchoRequestProto.newBuilder().setMessage(""hello"").build();"
113509,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestSecureExport.java,282,,"    final Path output = fs.makeQualified(new Path(openDir, ""output""));"
113510,./TargetProjects/hbase/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/regionserver/TestServerCustomProtocol.java,78,,"  static final String WHOAREYOU = ""Who are you?"";"
113511,./TargetProjects/hbase/hbase-examples/src/main/java/org/apache/hadoop/hbase/client/example/AsyncClientExample.java,160,,"                LOG.warn(""get failed for "" + i);"
113512,./TargetProjects/hbase/hbase-examples/src/main/java/org/apache/hadoop/hbase/thrift/DemoClient.java,188,,"    mutations.add(new Mutation(false, ByteBuffer.wrap(bytes(""entry:foo"")),"
113513,./TargetProjects/hbase/hbase-examples/src/main/java/org/apache/hadoop/hbase/thrift/DemoClient.java,246,,"      mutations.add(new Mutation(false, ByteBuffer.wrap(bytes(""entry:num"")),"
113514,./TargetProjects/hbase/hbase-examples/src/main/java/org/apache/hadoop/hbase/thrift/HttpDoAsClient.java,284,,"        options.put(""useKeyTab"", ""true"");"
113515,./TargetProjects/hbase/hbase-examples/src/main/java/org/apache/hadoop/hbase/util/ClientUtils.java,64,,"        options.put(""doNotPrompt"", ""true"");"
113516,./TargetProjects/hbase/hbase-examples/src/test/java/org/apache/hadoop/hbase/security/provider/example/TestShadeSaslAuthenticationProvider.java,165,,"        Collections.singletonMap(""user1"", USER1_PASSWORD));"
113517,./TargetProjects/hbase/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/ipc/MetricsHBaseServerSource.java,61,,"    ""parsed requests waiting in scheduler to be executed"";"
113518,./TargetProjects/hbase/hbase-hadoop-compat/src/main/java/org/apache/hadoop/metrics2/lib/DynamicMetricsRegistry.java,446,,"      throw new MetricsException(""Metric already exists in registry for metric name: "" + gaugeName +"
113519,./TargetProjects/hbase/hbase-hadoop-compat/src/test/java/org/apache/hadoop/hbase/metrics/TestBaseSourceImpl.java,52,,"    bmsi.setGauge(""testset"", 100);"
113520,./TargetProjects/hbase/hbase-hadoop-compat/src/test/java/org/apache/hadoop/hbase/metrics/TestBaseSourceImpl.java,61,,"    bmsi.incGauge(""testincgauge"", 100);"
113521,./TargetProjects/hbase/hbase-hadoop-compat/src/test/java/org/apache/hadoop/hbase/metrics/TestBaseSourceImpl.java,70,,"    bmsi.decGauge(""testdec"", 100);"
113522,./TargetProjects/hbase/hbase-hadoop-compat/src/test/java/org/apache/hadoop/hbase/metrics/TestBaseSourceImpl.java,79,,"    bmsi.incCounters(""testinccounter"", 100);"
113523,./TargetProjects/hbase/hbase-hadoop-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsTableSourceImpl.java,48,,"        ""ONETABLE"", new MetricsTableWrapperStub(""ONETABLE""));"
113524,./TargetProjects/hbase/hbase-hadoop-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsUserSourceImpl.java,46,,"    MetricsUserSource one = fact.createUser(""ONE"");"
113525,./TargetProjects/hbase/hbase-hbtop/src/main/java/org/apache/hadoop/hbase/hbtop/field/FieldValue.java,47,,"        throw new IllegalArgumentException(""invalid type"");"
113526,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecord.java,41,,"    Record actual1 = Record.builder().put(Field.TABLE, ""tableName"")"
113527,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecordFilter.java,50,,"      RecordFilter.newBuilder(Field.REGION).equal(""region1""));"
113528,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecordFilter.java,59,,"      RecordFilter.newBuilder(Field.REGION, true).doubleEquals(""region2""));"
113529,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecordFilter.java,64,,"    testParseAndBuilder(""#REQ/S>100"", false,"
113530,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecordFilter.java,136,,"      ""region1"", ""region2"", ""region3"", ""region4"", ""region5"");"
113531,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecordFilter.java,136,,"      ""region1"", ""region2"", ""region3"", ""region4"", ""region5"");"
113532,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestRecordFilter.java,136,,"      ""region1"", ""region2"", ""region3"", ""region4"", ""region5"");"
113533,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestUtils.java,176,,"          assertRecordInRegionMode(record, ""default"", ""1"", """", ""table1"","
113534,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestUtils.java,177,,"            ""00000000000000000000000000000000"", ""host1:1000"", ""host1.apache.com,1000,1"",0L,"
113535,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestUtils.java,177,,"            ""00000000000000000000000000000000"", ""host1:1000"", ""host1.apache.com,1000,1"",0L,"
113536,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestUtils.java,185,,"            ""00000000000000000000000000000003"", ""host2:1001"", ""host2.apache.com,1001,2"",0L,"
113537,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/TestUtils.java,185,,"            ""00000000000000000000000000000003"", ""host2:1001"", ""host2.apache.com,1001,2"",0L,"
113538,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/field/TestFieldValue.java,42,,"    FieldValue stringFieldValue = new FieldValue(""aaa"", FieldValueType.STRING);"
113539,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/field/TestFieldValue.java,55,,"    integerFieldValue = new FieldValue(""100"", FieldValueType.INTEGER);"
113540,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/screen/top/TestInputModeScreenPresenter.java,91,,"    inOrder.verify(inputModeScreenView).showInput(any(), eq(""abc""), eq(3));"
113541,./TargetProjects/hbase/hbase-hbtop/src/test/java/org/apache/hadoop/hbase/hbtop/screen/top/TestTopScreenModel.java,136,,"    topScreenModel.addFilter(""TABLE==table1"", false);"
113542,./TargetProjects/hbase/hbase-http/src/main/java/org/apache/hadoop/hbase/http/log/LogLevel.java,342,,"            + ""Submitted Log Name: <b>"" + logName + ""</b><br />"");"
113543,./TargetProjects/hbase/hbase-http/src/main/java/org/apache/hadoop/hbase/http/log/LogLevel.java,369,,"        + "" class='btn' />\n"" + ""</td>\n"" + ""<td style='text-align: center;'>\n"""
113544,./TargetProjects/hbase/hbase-http/src/main/java/org/apache/hadoop/hbase/util/JSONBean.java,181,,"              LOG.trace(""Getting attribute "" + prs + "" of "" + oname + "" threw "" + e);"
113545,./TargetProjects/hbase/hbase-http/src/main/java/org/apache/hadoop/hbase/util/JSONBean.java,184,,"            LOG.error(""Getting attribute "" + prs + "" of "" + oname + "" threw an exception"", e);"
113546,./TargetProjects/hbase/hbase-http/src/main/java/org/apache/hadoop/hbase/util/JSONBean.java,190,,"          LOG.error(""getting attribute "" + prs + "" of "" + oname + "" threw an exception"", e);"
113547,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpCookieFlag.java,75,,"      AuthenticationFilter.createAuthCookie(resp, ""token"", null, null, -1,"
113548,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpServer.java,96,,"  @SuppressWarnings(""serial"")"
113549,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpServer.java,196,,"                       readOutput(new URL(baseUrl, ""/echo?a=b&c=d"")));"
113550,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpServer.java,430,,"    MyGroupsProvider.mapping.put(""userA"", Collections.singletonList(""groupA""));"
113551,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpServer.java,431,,"    MyGroupsProvider.mapping.put(""userB"", Collections.singletonList(""groupB""));"
113552,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpServer.java,494,,"    Mockito.doReturn(null).when(request).getParameterValues(""dummy"");"
113553,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestHttpServerLifecycle.java,55,,"  @Ignore (""Hangs on occasion; see HBASE-14430"") @Test"
113554,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/TestProxyUserSpnegoHttpServer.java,113,,"    infoServerKeytab = new File(keytabDir, serverPrincipal.replace('/', '_') + "".keytab"");"
113555,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/jmx/TestJMXJsonServlet.java,83,,"    assertReFind(""\""name\""\\s*:\\s*\""java.lang:type=Memory\"""", result);"
113556,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/jmx/TestJMXJsonServlet.java,87,,"    LOG.info(""/jmx RESULT: ""+result);"
113557,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/jmx/TestJMXJsonServlet.java,95,,"    assertReFind(""\""committed\""\\s*:"", result);"
113558,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/log/TestLogLevel.java,188,,"    assertFalse(validateCommand(new String[] { ""-getlevel"" }));"
113559,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/log/TestLogLevel.java,189,,"    assertFalse(validateCommand(new String[] { ""-setlevel"" }));"
113560,./TargetProjects/hbase/hbase-http/src/test/java/org/apache/hadoop/hbase/http/log/TestLogLevel.java,190,,"    assertFalse(validateCommand(new String[] { ""-getlevel"", ""foo.bar:8080"" }));"
113561,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,205,,"          ""Namespace: "" + nsName + "" in namespaceMap does not exist"","
113562,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,220,,"      Assert.assertTrue(""Table: "" + tableName + "" in enabledTables is not enabled"","
113563,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,304,,"        LOG.warn(""Caught exception in action: "" + this.getClass());"
113564,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,312,,"      String namespaceName = ""itnamespace"" + String.format(""%010d"","
113565,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,470,,"          ""After disable, Table: "" + tableName + "" is not disabled"","
113566,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,615,,"        Assert.assertTrue(""Column family: "" + cfd + "" was not added"","
113567,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,653,,"        LOG.info(""Altering versions of column family: "" + columnDesc + "" to: "" + versions +"
113568,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestDDLMasterFailover.java,654,,"            "" in table: "" + tableName);"
113569,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngest.java,117,,"    long numKeysPerServer = conf.getLong(String.format(""%s.%s"", clazz, NUM_KEYS_PER_SERVER_KEY),"
113570,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithVisibilityLabels.java,39,,"  private static final String[] LABELS = { ""secret"", ""topsecret"", ""confidential"", ""public"","
113571,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithVisibilityLabels.java,39,,"  private static final String[] LABELS = { ""secret"", ""topsecret"", ""confidential"", ""public"","
113572,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithVisibilityLabels.java,40,,"      ""private"" };"
113573,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestRegionReplicaReplication.java,92,,"      String.format(""%s.%s"", TEST_NAME, LoadTestTool.OPT_REGION_REPLICATION),"
113574,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java,302,,"        .path(""api"")"
113575,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java,328,,"      .get(""items"")"
113576,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestLoadCommonCrawl.java,784,,"            LOG.info(""Row "" + Bytes.toStringBinary(row) + "": missing content"");"
113577,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestWithCellVisibilityLoadAndVerify.java,247,,"    System.out.println(""Rows loaded with cell visibility "" + VISIBILITY_EXPS[0] + "" : """
113578,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestWithCellVisibilityLoadAndVerify.java,247,,"    System.out.println(""Rows loaded with cell visibility "" + VISIBILITY_EXPS[0] + "" : """
113579,./TargetProjects/hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestZKAndFSPermissions.java,150,,"    LOG.info(""***********************************************************************************"");"
113580,./TargetProjects/hbase/hbase-logging/src/main/java/org/apache/hadoop/hbase/logging/Log4jUtils.java,48,,"      throw new AssertionError(""should not happen"", e);"
113581,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapred/TableMapReduceUtil.java,109,,"    job.setStrings(""io.serializations"", job.get(""io.serializations""),"
113582,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/CellCounter.java,309,,"    System.err.println(""   -D"" + TableInputFormat.SCAN_ROW_START + ""=<rowkey>"");"
113583,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/ExportUtils.java,67,,"    System.err.println(""   -D "" + FileOutputFormat.COMPRESS + ""=true"");"
113584,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java,839,,"        confValMap.put(Bytes.toBytes(URLDecoder.decode(familySplit[0], ""UTF-8"")),"
113585,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/Import.java,460,,"      LOG.error(""Couldn't instantiate filter!"", e);"
113586,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/Import.java,691,,"    System.err.println(""  -D"" + BULK_OUTPUT_CONF_KEY + ""=/path/for/output"");"
113587,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/ImportTsv.java,681,,"      ""  -D"" + BULK_OUTPUT_CONF_KEY + ""=/path/for/output\n"" +"
113588,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/TableMapReduceUtil.java,210,,"    conf.setStrings(""io.serializations"", conf.get(""io.serializations""),"
113589,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALPlayer.java,380,,"    System.err.println("" -D"" + BULK_OUTPUT_CONF_KEY + ""=/path/for/output"");"
113590,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java,205,,"        srcConf.setBoolean(""fs."" + inputRoot.toUri().getScheme() + "".impl.disable.cache"", true);"
113591,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java,205,,"        srcConf.setBoolean(""fs."" + inputRoot.toUri().getScheme() + "".impl.disable.cache"", true);"
113592,./TargetProjects/hbase/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java,298,,"          LOG.info(""Skip copy "" + inputStat.getPath() + "" to "" + outputPath + "", same file."");"
113593,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,126,,"      fileOpenTimer.elapsed(TimeUnit.MILLISECONDS) + "" ms"");"
113594,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,128,,"    System.out.println(""total bytes: "" + totalBytes + "" bytes ("""
113595,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,128,,"    System.out.println(""total bytes: "" + totalBytes + "" bytes ("""
113596,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,130,,"    System.out.println(""throghput  : "" + StringUtils.humanReadableInt((long)throughput) + ""B/s"");"
113597,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,186,,"    System.out.println(""total time to open scanner: "" +"
113598,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,188,,"    System.out.println(""total time to scan: "" +"
113599,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,195,,"    System.out.println(""throughput  : "" + StringUtils.humanReadableInt((long)throughput) + ""B/s"");"
113600,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,196,,"    System.out.println(""total rows  : "" + numRows);"
113601,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,197,,"    System.out.println(""throughput  : "" + StringUtils.humanReadableInt((long)throughputRows) + "" rows/s"");"
113602,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,198,,"    System.out.println(""total cells : "" + numCells);"
113603,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/ScanPerformanceEvaluation.java,199,,"    System.out.println(""throughput  : "" + StringUtils.humanReadableInt((long)throughputCells) + "" cells/s"");"
113604,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/TestPerformanceEvaluation.java,207,,"    String cmdName = ""sequentialWrite"";"
113605,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestGroupingTableMap.java,60,,"  @SuppressWarnings({ ""deprecation"", ""unchecked"" })"
113606,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestGroupingTableMap.java,75,,"          new KeyValue(row, Bytes.toBytes(""familyA""), Bytes.toBytes(""qualifierA""),"
113607,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestGroupingTableMap.java,75,,"          new KeyValue(row, Bytes.toBytes(""familyA""), Bytes.toBytes(""qualifierA""),"
113608,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestRowCounter.java,56,,"  @SuppressWarnings(""deprecation"")"
113609,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestSplitTable.java,49,,"    TableSplit aTableSplit = new TableSplit(Bytes.toBytes(""tableA""),"
113610,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestSplitTable.java,50,,"        Bytes.toBytes(""aaa""), Bytes.toBytes(""ddd""), ""locationA"");"
113611,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestTableInputFormat.java,130,,"    Put p = new Put(Bytes.toBytes(""aaa""));"
113612,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestTableInputFormat.java,327,,"      new byte[][] { Bytes.toBytes(""columnA""), Bytes.toBytes(""columnB"") });"
113613,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestTableInputFormat.java,327,,"      new byte[][] { Bytes.toBytes(""columnA""), Bytes.toBytes(""columnB"") });"
113614,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapred/TestTableMapReduceUtil.java,173,,"  @SuppressWarnings(""deprecation"")"
113615,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,98,,"      p.addColumn(FAMILY_A, QUALIFIER, now, Bytes.toBytes(""Data11""));"
113616,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,99,,"      p.addColumn(FAMILY_B, QUALIFIER, now + 1, Bytes.toBytes(""Data12""));"
113617,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,100,,"      p.addColumn(FAMILY_A, QUALIFIER, now + 2, Bytes.toBytes(""Data13""));"
113618,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,103,,"      p.addColumn(FAMILY_B, QUALIFIER, now, Bytes.toBytes(""Dat21""));"
113619,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,104,,"      p.addColumn(FAMILY_A, QUALIFIER, now + 1, Bytes.toBytes(""Data22""));"
113620,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,105,,"      p.addColumn(FAMILY_B, QUALIFIER, now + 2, Bytes.toBytes(""Data23""));"
113621,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,110,,"        new FileInputStream(OUTPUT_DIR + File.separator + ""part-r-00000"");"
113622,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,113,,"      assertTrue(data.contains(""Total Families Across all Rows"" + ""\t"" + ""2""));"
113623,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,114,,"      assertTrue(data.contains(""Total Qualifiers across all Rows"" + ""\t"" + ""2""));"
113624,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,115,,"      assertTrue(data.contains(""Total ROWS"" + ""\t"" + ""1""));"
113625,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,116,,"      assertTrue(data.contains(""b;q"" + ""\t"" + ""1""));"
113626,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,117,,"      assertTrue(data.contains(""a;q"" + ""\t"" + ""1""));"
113627,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,118,,"      assertTrue(data.contains(""row1;a;q_Versions"" + ""\t"" + ""1""));"
113628,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCellCounter.java,119,,"      assertTrue(data.contains(""row1;b;q_Versions"" + ""\t"" + ""1""));"
113629,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java,107,,"            copy, new String[] { ""--new.name="" + tableName2.getNameAsString(),"
113630,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java,146,,"        Put p = new Put(Bytes.toBytes(""row"" + i));"
113631,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java,394,,"          runCopy(new String[] { ""--snapshot"", ""--new.name="" + table2, ""--bulkload"", snapshot });"
113632,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,323,,"  @Ignore(""Goes zombie too frequently; needs work. See HBASE-14563"") @Test"
113633,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,469,,"    job.getConfiguration().setStrings(""io.serializations"", conf.get(""io.serializations""),"
113634,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,674,,"    Path testDir = util.getDataTestDirOnTestFS(""testLocalMRIncrementalLoad"");"
113635,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,754,,"          assertEquals(""BulkLoadHFiles should put expected data in table"", expectedRows,"
113636,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,901,,"      familyToCompression.put(""Family1!@#!@#&"", Compression.Algorithm.LZO);"
113637,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,904,,"      familyToCompression.put(""Family2=asdads&!AASD"", Compression.Algorithm.SNAPPY);"
113638,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java,910,,"      familyToCompression.put(""Family3"", Compression.Algorithm.NONE);"
113639,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java,237,,"      ""1000"", // max number of key versions per key to export"
113640,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java,241,,"    final String IMPORT_TABLE = name.getMethodName() + ""import"";"
113641,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportExport.java,611,,"    String prefix = ""row"";"
113642,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithVisibilityLabels.java,170,,"        ""-D"" + ImportTsv.COLUMNS_CONF_KEY + ""=HBASE_ROW_KEY,FAM:A,FAM:B,HBASE_CELL_VISIBILITY"","
113643,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTSVWithVisibilityLabels.java,233,,"    Path hfiles = new Path(util.getDataTestDirOnTestFS(tableName.getNameAsString()), ""hfiles"");"
113644,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java,159,,"    Path hfiles = new Path(util.getDataTestDirOnTestFS(tn.getNameAsString()), ""hfiles"");"
113645,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java,185,,"    args.put(ImportTsv.NO_STRICT_COL_FAMILY, ""true"");"
113646,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsv.java,206,,"    assertEquals(""running test job configuration failed."", 0, ToolRunner.run("
113647,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsvParser.java,82,,"    assertBytesEquals(Bytes.toBytes(""col1""), parser.getFamily(1));"
113648,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsvParser.java,83,,"    assertBytesEquals(Bytes.toBytes(""scol1""), parser.getQualifier(1));"
113649,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestImportTsvParser.java,93,,"    assertBytesEquals(Bytes.toBytes(""scol2""), parser.getQualifier(2));"
113650,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java,244,,"    Put put1 = new Put(Bytes.toBytes(""row_timerange_"" + 1));"
113651,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java,267,,"      ""--starttime="" + 0,"
113652,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestRowCounter.java,268,,"      ""--endtime="" + ts"
113653,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,92,,"    final TableName sourceTableName = TableName.valueOf(name.getMethodName() + ""_source"");"
113654,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,93,,"    final TableName targetTableName = TableName.valueOf(name.getMethodName() + ""_target"");"
113655,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,193,,"      LOG.debug(""SOURCE row: "" + (sourceRow == null ? ""null"" : Bytes.toInt(sourceRow.getRow()))"
113656,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,194,,"          + "" cells:"" + sourceRow);"
113657,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,209,,"        LOG.debug(""Source cells: "" + Arrays.toString(sourceCells));"
113658,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,210,,"        LOG.debug(""Target cells: "" + Arrays.toString(targetCells));"
113659,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestSyncTable.java,211,,"        Assert.fail(""Row "" + Bytes.toInt(sourceRow.getRow())"
113660,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java,128,,"    Put p = new Put(Bytes.toBytes(""aaa""));"
113661,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java,344,,"      new byte[][] { Bytes.toBytes(""columnA""), Bytes.toBytes(""columnB"") });"
113662,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormat.java,344,,"      new byte[][] { Bytes.toBytes(""columnA""), Bytes.toBytes(""columnB"") });"
113663,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java,167,,"    String jobName = ""ScanFromConfig"" + (start != null ? start.toUpperCase(Locale.ROOT) : ""Empty"") +"
113664,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduceUtil.java,54,,"    Job job = new Job(configuration, ""tableName"");"
113665,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableMapReduceUtil.java,56,,"    TableMapReduceUtil.initTableMapperJob(""Table"", new Scan(), Import.Importer.class, Text.class,"
113666,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableSplit.java,50,,"        Bytes.toBytes(""row-start""),"
113667,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableSplit.java,51,,"            Bytes.toBytes(""row-end""), ""location"");"
113668,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableSplit.java,51,,"            Bytes.toBytes(""row-end""), ""location"");"
113669,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java,143,,"    final byte[] ROW = Bytes.toBytes(""row"");"
113670,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,145,,"        Bytes.toBytes(""diff data""));"
113671,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,287,,"    String sourceSnapshotName = ""sourceSnapshot-"" + EnvironmentEdgeManager.currentTime();"
113672,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,294,,"    String peerSnapshotName = ""peerSnapshot-"" + EnvironmentEdgeManager.currentTime();"
113673,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,302,,"    String[] args = new String[] { ""--sourceSnapshotName="" + sourceSnapshotName,"
113674,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,303,,"      ""--sourceSnapshotTmpDir="" + tmpPath1, ""--peerSnapshotName="" + peerSnapshotName,"
113675,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,303,,"      ""--sourceSnapshotTmpDir="" + tmpPath1, ""--peerSnapshotName="" + peerSnapshotName,"
113676,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,304,,"      ""--peerSnapshotTmpDir="" + tmpPath2, ""--peerFSAddress="" + peerFSAddress,"
113677,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,304,,"      ""--peerSnapshotTmpDir="" + tmpPath2, ""--peerFSAddress="" + peerFSAddress,"
113678,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplication.java,305,,"      ""--peerHBaseRootAddress="" + CommonFSUtils.getRootDir(CONF2), UTIL2.getClusterKey(),"
113679,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/replication/TestVerifyReplicationAdjunct.java,133,,"        LOG.info(""Only got "" + res1.length + "" rows"");"
113680,./TargetProjects/hbase/hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java,390,,"              + "" or at least one of -"" + OPT_READ + "", -"" + OPT_WRITE + "", -"" + OPT_UPDATE);"
113681,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestMetricRegistryImpl.java,57,,"    Counter counter = registry.counter(""mycounter"");"
113682,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestMetricRegistryImpl.java,67,,"    registry.register(""mygauge"", new Gauge<Long>() {"
113683,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestRefCountingMap.java,52,,"    map.put(""foo"", () -> ""foovalue"");"
113684,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestRefCountingMap.java,52,,"    map.put(""foo"", () -> ""foovalue"");"
113685,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestRefCountingMap.java,62,,"    String v2 =  map.put(""foo"", () -> ""foovalue2"");"
113686,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestRefCountingMap.java,63,,"    String v3 = map.put(""foo"", () -> ""foovalue3"");"
113687,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestRefCountingMap.java,111,,"    map.put(""bar"", () -> ""foovalue2"");"
113688,./TargetProjects/hbase/hbase-metrics/src/test/java/org/apache/hadoop/hbase/metrics/impl/TestRefCountingMap.java,123,,"    map.put(""baz"", () -> ""foovalue3"");"
113689,./TargetProjects/hbase/hbase-procedure/src/main/java/org/apache/hadoop/hbase/procedure2/ProcedureUtil.java,58,,"        throw new Exception(""the "" + clazz + "" class is not public"");"
113690,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestChildProcedures.java,91,,"    assertTrue(""expected completed proc"", procExecutor.isFinished(procId));"
113691,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestProcedureBypass.java,95,,"    LOG.info(""{} finished"", proc);"
113692,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestProcedureMetrics.java,91,,"    assertNotEquals(""ProcId zero!"", 0, id);"
113693,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestProcedureMetrics.java,95,,"    assertEquals(""beginCount doesn't match!"", beginCount, proc.beginCount);"
113694,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestProcedureMetrics.java,96,,"    assertEquals(""successCount doesn't match!"", successCount, proc.successCount);"
113695,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestProcedureMetrics.java,97,,"    assertEquals(""failedCont doesn't match!"", failedCount, proc.failedCount);"
113696,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/TestProcedureRecovery.java,106,,"      LOG.debug(""execute procedure "" + this + "" step="" + step);"
113697,./TargetProjects/hbase/hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/store/wal/TestWALProcedureStore.java,425,,"      assertTrue(""Procedure id : "" + procId, tracker.isModified(procId));"
113698,./TargetProjects/hbase/hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ZKReplicationQueueStorage.java,177,,"          ""Failed to delete queue (serverName="" + serverName + "", queueId="" + queueId + "")"", e);"
113699,./TargetProjects/hbase/hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ZKReplicationQueueStorage.java,188,,"          + "", queueId="" + queueId + "", fileName="" + fileName + "")"", e);"
113700,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateBasic.java,73,,"    assertTrue(rqs.getWALsInQueue(server1, ""qId1"").isEmpty());"
113701,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateBasic.java,80,,"    rqs.addWAL(server1, ""qId1"", ""trash"");"
113702,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateBasic.java,82,,"    rqs.addWAL(server1,""qId2"", ""filename1"");"
113703,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateBasic.java,93,,"    assertTrue(rqs.getWALsInQueue(ServerName.valueOf(""bogus"", 12345, 12345), ""bogus"").isEmpty());"
113704,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateBasic.java,129,,"    assertEquals(5, rqs.getWALsInQueue(server3, ""qId5"").size());"
113705,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateBasic.java,300,,"      rqs.addWAL(serverName1, queue1, getFileName(""file1"", i));"
113706,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationQueueStorage.java,88,,"    return ServerName.valueOf(""127.0.0.1"", 8000 + i, 10000 + i);"
113707,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationQueueStorage.java,96,,"      STORAGE.addWAL(getServerName(i), queueId, ""file"" + i);"
113708,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationQueueStorage.java,127,,"      STORAGE.addWAL(serverName1, queue1, getFileName(""file1"", i));"
113709,./TargetProjects/hbase/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationQueueStorage.java,128,,"      STORAGE.addWAL(serverName1, queue2, getFileName(""file2"", i));"
113710,./TargetProjects/hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RowResource.java,235,,"              .type(MIMETYPE_TEXT).entity(""Bad request: Column found to be null."" + CRLF)"
113711,./TargetProjects/hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RowResource.java,241,,"              .type(MIMETYPE_TEXT).entity(""Bad request"" + CRLF)"
113712,./TargetProjects/hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RowResource.java,255,,"          LOG.trace(""PUT "" + put.toString());"
113713,./TargetProjects/hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RowResource.java,270,,"        LOG.debug(""Exception received while closing the table"", ioe);"
113714,./TargetProjects/hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RowResource.java,467,,"            .entity(""Bad request: Number of rows specified is not 1."" + CRLF).build();"
113715,./TargetProjects/hbase/hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/client/Client.java,606,,"    headers[0] = new BasicHeader(""Content-Type"", contentType);"
113716,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/RowResourceBase.java,164,,"    assertEquals(Constants.MIMETYPE_XML, response.getHeader(""content-type""));"
113717,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestGZIPResponseWrapper.java,56,,"    wrapper.addHeader(""header"", ""header value"");"
113718,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestGZIPResponseWrapper.java,58,,"    wrapper.addHeader(""content-length"", ""header value2"");"
113719,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestGetAndPutResource.java,265,,"    assertEquals(Constants.MIMETYPE_BINARY, response.getHeader(""content-type""));"
113720,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestGetAndPutResource.java,355,,"    String path = ""/"" + TABLE + ""/fakerow"";  // deliberate nonexistent row"
113721,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestMultiRowResource.java,146,,"    path.append(""/multiget/?row="");"
113722,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestMultiRowResource.java,148,,"    path.append(""&row="");"
113723,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestNamespacesInstanceResource.java,207,,"    String namespacePath = ""/namespaces/"" + nsName;"
113724,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestNamespacesInstanceResource.java,320,,"    conf.set(""hbase.rest.readonly"", ""true"");"
113725,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestNamespacesInstanceResource.java,320,,"    conf.set(""hbase.rest.readonly"", ""true"");"
113726,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestNamespacesInstanceResource.java,330,,"    conf.set(""hbase.rest.readonly"", ""false"");"
113727,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestNamespacesResource.java,116,,"    testNamespacesModel.checkModel(model, ""hbase"", ""default"");"
113728,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestNamespacesResource.java,116,,"    testNamespacesModel.checkModel(model, ""hbase"", ""default"");"
113729,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestRESTServerSSL.java,72,,"    generateTrustStore(""jks"", serverCertificate);"
113730,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestRESTServerSSL.java,108,,"    Response response = sslClient.get(""/version"", Constants.MIMETYPE_TEXT);"
113731,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannerResource.java,140,,"    Response response = client.put(""/"" + TABLE + ""/scanner"","
113732,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannerResource.java,150,,"        assertEquals(Constants.MIMETYPE_PROTOBUF, response.getHeader(""content-type""));"
113733,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannerResource.java,232,,"    conf.set(""hbase.rest.readonly"", ""true"");"
113734,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannerResource.java,232,,"    conf.set(""hbase.rest.readonly"", ""true"");"
113735,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannerResource.java,240,,"    conf.set(""hbase.rest.readonly"", ""false"");"
113736,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannersWithFilters.java,93,,"    Bytes.toBytes(""testRowOne-2""), Bytes.toBytes(""testRowOne-3"")"
113737,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannersWithFilters.java,107,,"    Bytes.toBytes(""testQualifierOne-2""), Bytes.toBytes(""testQualifierOne-3"")"
113738,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannersWithFilters.java,116,,"    Bytes.toBytes(""testValueOne""), Bytes.toBytes(""testValueTwo"")"
113739,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannersWithFilters.java,116,,"    Bytes.toBytes(""testValueOne""), Bytes.toBytes(""testValueTwo"")"
113740,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannersWithFilters.java,250,,"      assertEquals(""Expected "" + expectedKeys + "" keys per row but "" +"
113741,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestScannersWithFilters.java,783,,"        new RegexStringComparator("".+-2""));"
113742,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestSchemaResource.java,122,,"    conf.set(""hbase.rest.readonly"", ""false"");"
113743,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestSchemaResource.java,168,,"    assertEquals(Constants.MIMETYPE_XML, response.getHeader(""content-type""));"
113744,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestSecureRESTServer.java,118,,"  private static final String HOSTNAME = ""localhost"";"
113745,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableResource.java,186,,"    assertEquals(Constants.MIMETYPE_TEXT, response.getHeader(""content-type""));"
113746,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableResource.java,225,,"    Response response = client.get(""/"" + TABLE + ""/regions"", Constants.MIMETYPE_TEXT);"
113747,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableScan.java,145,,"    assertEquals(Constants.MIMETYPE_XML, response.getHeader(""content-type""));"
113748,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableScan.java,173,,"    builder.append(Constants.SCAN_START_ROW + ""=aaa"");"
113749,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableScan.java,175,,"    builder.append(Constants.SCAN_END_ROW + ""=aay"");"
113750,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableScan.java,182,,"    assertEquals(""aaa"", Bytes.toString(startRow.getKey()));"
113751,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestTableScan.java,465,,"    builder.append(Constants.SCAN_FILTER + ""="" + URLEncoder.encode(""PrefixFilter('aab')"", ""UTF-8""));"
113752,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestVersionResource.java,104,,"    Response response = client.get(""/version"", Constants.MIMETYPE_TEXT);"
113753,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestVersionResource.java,106,,"    assertEquals(Constants.MIMETYPE_TEXT, response.getHeader(""content-type""));"
113754,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/client/RemoteAdmin.java,139,,"        throw new IOException(""get request to "" + path.toString()"
113755,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/client/RemoteAdmin.java,140,,"            + "" returned "" + code);"
113756,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/client/RemoteAdmin.java,143,,"    throw new IOException(""get request to "" + path.toString() + "" timed out"");"
113757,./TargetProjects/hbase/hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/client/TestRemoteTable.java,562,,"    headers[0] = new BasicHeader(""header1"", ""value1"");"
113758,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java,113,,"  @SuppressWarnings(""unchecked"")"
113759,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/backup/HFileArchiver.java,166,,"        ""Failed to archive/delete all the files for region:"" + regionDir.getName() + "" into "" +"
113760,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/backup/HFileArchiver.java,167,,"          regionArchiveDir + "". Something is probably awry on the filesystem."","
113761,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/coordination/ZKSplitLogManagerCoordination.java,368,,"      LOG.info(""Task "" + path + "" entered state="" + slt.toString());"
113762,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/coordination/ZKSplitLogManagerCoordination.java,599,,"              + "" remaining retries="" + retry_count);"
113763,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ReadOnlyConfiguration.java,56,,"    throw new UnsupportedOperationException(""Read-only Configuration"");"
113764,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/HFileLink.java,253,,"      throw new IllegalArgumentException(fileName + "" is not a valid HFileLink name!"");"
113765,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java,1554,,"                       pathName + "" at offset "" +"
113766,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java,1555,,"                       offset + "" filesize "" + fileSize +"
113767,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java,464,,"          "". Block offset: "" + curBlock.getOffset() + "", block length: "" +"
113768,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java,464,,"          "". Block offset: "" + curBlock.getOffset() + "", block length: "" +"
113769,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java,466,,"          "", position: "" + this.blockBuffer.position() + "" (without header)."" +"
113770,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java,466,,"          "", position: "" + this.blockBuffer.position() + "" (without header)."" +"
113771,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java,588,,"                  + "", path="" + reader.getPath());"
113772,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java,444,,"        throw new IllegalArgumentException(""Left byte array sorts after right row; left="" + Bytes"
113773,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java,445,,"          .toStringBinary(leftArray, leftOffset, leftLength) + "", right="" + Bytes"
113774,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java,331,,"    Preconditions.checkArgument(acceptableFactor <= 1 && acceptableFactor >= 0, ACCEPT_FACTOR_CONFIG_NAME + "" must be between 0.0 and 1.0"");"
113775,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/AdaptiveLifoCoDelCallQueue.java,212,,"    throw new UnsupportedOperationException(""This class doesn't support anything,"""
113776,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/AdaptiveLifoCoDelCallQueue.java,213,,"      + "" but take() and offer() methods"");"
113777,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallRunner.java,133,,"              (address != null ? address : ""(channel closed)"") + "" is not running yet"");"
113778,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java,317,,"          throw new IOException(""HBase temp directory '"" + tmpdir + ""' creation failure."");"
113779,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java,686,,"          + "" actual: "" + type);"
113780,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java,2842,,"            new UnsupportedOperationException(AccessController.class.getName() + "" is not loaded""));"
113781,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionPlacementMaintainer.java,989,,"          cmd.getOptionValue(""l"").equalsIgnoreCase(""false"")) ||"
113782,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java,367,,"      String message = ""Server "" + serverName + "" has been "" +"
113783,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/SplitTableRegionProcedure.java,395,,"      LOG.warn(""pid="" + getProcId() + "" failed rollback attempt step "" + state +"
113784,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteNamespaceProcedure.java,99,,"        setFailure(""master-delete-namespace"", e);"
113785,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DisableTableProcedure.java,141,,"        setFailure(""master-disable-table"", e);"
113786,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java,128,,"      throw new DoNotRetryIOException(""Replication peer "" + peerId + "" already exists"");"
113787,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/procedure/Procedure.java,204,,"      LOG.debug(""Procedure '"" + procName + ""' starting 'acquire'"");"
113788,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/procedure/ProcedureCoordinator.java,152,,"          LOG.warn(""Procedure "" + procName + "" currently running.  Rejecting new request"");"
113789,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/procedure/ProcedureCoordinator.java,279,,"      LOG.warn(""Member '""+ member +""' is trying to acquire an unknown procedure '""+ procName +""'"");"
113790,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/procedure/Subprocedure.java,167,,"      LOG.debug(""Subprocedure '"" + barrierName + ""' starting 'acquire' stage"");"
113791,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AnnotationReadingPriorityFunction.java,134,,"    if (methodMap.get(""getRegion"") == null) {"
113792,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AnnotationReadingPriorityFunction.java,135,,"      methodMap.put(""hasRegion"", new HashMap<>());"
113793,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ChunkCreator.java,177,,"                ""chunkType must either be INDEX_CHUNK or DATA_CHUNK"");"
113794,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompositeImmutableSegment.java,104,,"    throw new IllegalStateException(""Not supported by CompositeImmutableScanner"");"
113795,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java,2532,,"          String msg = ""NOT flushing "" + this + "" as "" + (writestate.flushing ? ""already flushing"""
113796,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java,2608,,"        LOG.debug(""Flush column family "" + store.getColumnFamilyName() + "" of "" +"
113797,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java,2939,,"        LOG.warn(getRegionInfo().getEncodedName() + "" : """
113798,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java,2946,,"  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""NN_NAKED_NOTIFY"","
113799,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java,5102,,"        this.getRegionInfo() == null ? ""unknown"" : this.getRegionInfo().getEncodedName();"
113800,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java,7997,,"      throw new NotServingRegionException(getRegionInfo().getRegionNameAsString() + "" is closing"");"
113801,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java,509,,"      throw new IOException(""Failed rename of "" + buildPath + "" to "" + dstPath);"
113802,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java,612,,"          throw new IOException(""Failed delete of "" + daughterDir);"
113803,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java,673,,"      throw new IOException(""Failed create of "" + splitdir);"
113804,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java,142,,"      LOG.warn(""Setting "" + MEMSTORE_SIZE_MIN_RANGE_KEY + "" to "" + globalMemStorePercent"
113805,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java,142,,"      LOG.warn(""Setting "" + MEMSTORE_SIZE_MIN_RANGE_KEY + "" to "" + globalMemStorePercent"
113806,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java,143,,"          + "", same value as "" + MemorySizeUtil.MEMSTORE_SIZE_KEY"
113807,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java,187,,"          + MEMSTORE_SIZE_MAX_RANGE_KEY + "" and "" + BLOCK_CACHE_SIZE_MIN_RANGE_KEY"
113808,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java,188,,"          + "" in your configuration. "" + MEMSTORE_SIZE_MAX_RANGE_KEY + "" is """
113809,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java,2832,,"              + "" is in STANDBY state""));"
113810,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/DateTieredCompactionPolicy.java,143,,"        LOG.debug(""Major compaction triggered on store "" + this"
113811,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/DumpReplicationQueues.java,257,,"        sb.append(""    "" + deletedQueue + ""\n"");"
113812,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/PeerProcedureHandlerImpl.java,83,,"        throw new ReplicationException(""Peer with id="" + peerId + "" is not cached."");"
113813,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/DisabledRSGroupInfoManager.java,52,,"    throw new DoNotRetryIOException(""RSGroup is disabled"");"
113814,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java,306,,"      throw new ConstraintException(""RSGroup "" + groupName + "" does not exist"");"
113815,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java,429,,"        LOG.warn(""Server "" + el + "" does not belong to any rsgroup."");"
113816,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/HBasePolicyProvider.java,39,,"    new Service(""security.client.protocol.acl"", ClientService.BlockingInterface.class),"
113817,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessChecker.java,101,,"        result = AuthResult.allow(request, ""Table permission granted"","
113818,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessChecker.java,106,,"        result = AuthResult.deny(request, ""Insufficient permissions"","
113819,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessChecker.java,112,,"      throw new AccessDeniedException(""Insufficient permissions "" + result.toContextString());"
113820,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java,1157,,"    LOG.info(namespace + "" entry deleted in "" + PermissionStorage.ACL_TABLE_NAME + "" table."");"
113821,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java,1436,,"        throw new AccessDeniedException(""Insufficient permissions "" + authResult.toContextString());"
113822,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java,1446,,"        throw new DoNotRetryIOException(""Cell ACLs cannot be persisted"");"
113823,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java,1521,,"            authResult = AuthResult.allow(opType.toString(), ""Covering cell set"","
113824,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/token/ZKSecretWatcher.java,78,,"        LOG.error(HBaseMarkers.FATAL, ""Error reading data from zookeeper"", ke);"
113825,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/ExpressionParser.java,77,,"                throw new ParseException(""invalid escaping with quotes "" + expS + "" at column : """
113826,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/ExpressionParser.java,93,,"            throw new ParseException(""Error parsing expression "" + expS + "" at column : "" + index);"
113827,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java,586,,"      throw new AccessDeniedException(""User '"" + requestUName + ""' is not the scanner owner!"");"
113828,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java,594,,"      throw new VisibilityControllerNotReadyException(""VisibilityController not yet initialized"");"
113829,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java,817,,"          request + ""; user: "" + (user != null ? Bytes.toShort(user) : ""null"") + ""; labels: "" +"
113830,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,36,,"        ""org.apache.hadoop.hbase.coprocessor.ObserverContext"","
113831,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,48,,"        ""java.lang.String"","
113832,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,62,,"        ""org.apache.hadoop.hbase.HTableDescriptor"","
113833,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,63,,"        ""org.apache.hadoop.hbase.HRegionInfo[]"");"
113834,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,72,,"        ""org.apache.hadoop.hbase.TableName"");"
113835,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,84,,"        ""org.apache.hadoop.hbase.HRegionInfo"","
113836,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,85,,"        ""org.apache.hadoop.hbase.ServerName"","
113837,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,147,,"        ""org.apache.hadoop.hbase.HColumnDescriptor"");"
113838,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,187,,"        ""byte[]"");"
113839,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,239,,"        ""long"");"
113840,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,249,,"        ""java.util.List"");"
113841,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,262,,"        ""boolean"");"
113842,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,317,,"        ""org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription"","
113843,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,394,,"        ""org.apache.hadoop.hbase.NamespaceDescriptor"");"
113844,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,444,,"        ""org.apache.hadoop.hbase.protobuf.generated.QuotaProtos.Quotas"");"
113845,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,521,,"        ""java.util.Set"","
113846,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,597,,"        ""org.apache.hadoop.hbase.regionserver.Store"","
113847,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,599,,"        ""org.apache.hadoop.hbase.regionserver.InternalScanner"","
113848,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,633,,"        ""org.apache.hadoop.hbase.regionserver.compactions.CompactionRequest"");"
113849,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,650,,"        ""org.apache.hadoop.hbase.regionserver.ScanType"");"
113850,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,710,,"        ""org.apache.hadoop.hbase.regionserver.Region"","
113851,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,738,,"        ""org.apache.hadoop.hbase.client.Result"");"
113852,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,748,,"        ""org.apache.hadoop.hbase.client.Get"","
113853,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,768,,"        ""org.apache.hadoop.hbase.client.Put"","
113854,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,769,,"        ""org.apache.hadoop.hbase.regionserver.wal.WALEdit"","
113855,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,770,,"        ""org.apache.hadoop.hbase.client.Durability"");"
113856,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,780,,"        ""org.apache.hadoop.hbase.client.Delete"","
113857,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,823,,"        ""org.apache.hadoop.hbase.filter.CompareFilter.CompareOp"","
113858,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,824,,"        ""org.apache.hadoop.hbase.filter.ByteArrayComparable"","
113859,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,971,,"        ""org.apache.hadoop.hbase.regionserver.wal.HLogKey"","
113860,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,977,,"        ""org.apache.hadoop.hbase.wal.WALKey"","
113861,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/coprocessor/Branch1CoprocessorMethods.java,1004,,"        ""org.apache.hadoop.fs.Path"","
113862,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java,979,,"        LOG.warn(""Skipping file {} due to IOException"", p, ioe);"
113863,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java,1167,,"          + path + "" to "" + dst);"
113864,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java,2189,,"      LOG.info(""Region "" + descriptiveName + "" is in META, and in a disabled "" +"
113865,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HbckTableInfo.java,512,,"              + "".  Just continuing... "", ioe);"
113866,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java,346,,"      conf.setBoolean(""split.verify"", false);"
113867,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java,955,,"          ""last row (%s) is configured less than first row (%s)"", lastRow,"
113868,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/hbck/HFileCorruptionChecker.java,171,,"          "" does not exist.  Likely due to concurrent split/compaction. Skipping."");"
113869,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/hbck/HFileCorruptionChecker.java,207,,"          "" does not exist.  Likely the table is deleted. Skipping."");"
113870,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/hbck/HFileCorruptionChecker.java,546,,"        out.print(""      "" + sq);"
113871,./TargetProjects/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/hbck/HFileCorruptionChecker.java,558,,"    String initialState = (corrupted.isEmpty()) ? ""OK"" : ""CORRUPTED"";"
113872,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtil.java,418,,"      ""mapreduce.cluster.local.dir"","
113873,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtil.java,606,,"    Log4jUtils.setLogLevel(org.apache.hadoop.metrics2.util.MBeans.class.getName(), ""ERROR"");"
113874,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/HFilePerformanceEvaluation.java,127,,"    runWriteBenchmark(conf, fs, mf, ""none"", ""none"");"
113875,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/HFilePerformanceEvaluation.java,143,,"    runWriteBenchmark(aesconf, aesfs, aesmf, ""none"", ""aes"");"
113876,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestClientOperationTimeout.java,142,,"      fail(""should not reach here"");"
113877,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestHRegionLocation.java,45,,"    ServerName hsa1 = ServerName.valueOf(""localhost"", 1234, -1L);"
113878,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestInfoServers.java,96,,"    assertContainsContent(new URL(""http://localhost:"" + port + ""/index.html""), ""master-status"");"
113879,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestMultiVersions.java,265,,"      assertEquals(""Number of rows should be 2"", 2, count);"
113880,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestNamespace.java,293,,"    admin.createNamespace(NamespaceDescriptor.create(prefix + ""ns1"").build());"
113881,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestNamespace.java,310,,"          .newBuilder(TableName.valueOf(""non_existing_namespace"", name.getMethodName()));"
113882,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestPartialResultsFromClientSide.java,729,,"    assertTrue(""scannerCount: "" + scannerCount + "" expectedCount: "" + expectedCount,"
113883,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/TestPartialResultsFromClientSide.java,729,,"    assertTrue(""scannerCount: "" + scannerCount + "" expectedCount: "" + expectedCount,"
113884,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/backup/TestHFileArchiving.java,580,,"    Path rootDir = UTIL.getDataTestDirOnTestFS(""testCleaningRace"");"
113885,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestAsyncTableScan.java,61,,"      splitKeys[i / 111 - 1] = Bytes.toBytes(String.format(""%03d"", i));"
113886,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/AbstractTestCITimeout.java,81,,"        throw new IOException(""first call I fail"");"
113887,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,150,,"      delete.addColumn(Bytes.toBytes(""trans-tags""), Bytes.toBytes(""qual2""));"
113888,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,356,,"    assertTrue(""Expected row ["" + Bytes.toString(row) + ""] "" +"
113889,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,357,,"        ""Got row ["" + Bytes.toString(CellUtil.cloneRow(key)) +""]"","
113890,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,359,,"    assertTrue(""Expected family ["" + Bytes.toString(family) + ""] "" +"
113891,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,360,,"        ""Got family ["" + Bytes.toString(CellUtil.cloneFamily(key)) + ""]"","
113892,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,362,,"    assertTrue(""Expected qualifier ["" + Bytes.toString(qualifier) + ""] "" +"
113893,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,363,,"        ""Got qualifier ["" + Bytes.toString(CellUtil.cloneQualifier(key)) + ""]"","
113894,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,365,,"    assertTrue(""Expected value ["" + Bytes.toString(value) + ""] "" +"
113895,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/FromClientSideBase.java,366,,"        ""Got value ["" + Bytes.toString(CellUtil.cloneValue(key)) + ""]"","
113896,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin.java,382,,"    final TableName newTableName = TableName.valueOf(tableName.getNameAsString() + ""_new"");"
113897,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java,107,,"      .setColumnFamily(ColumnFamilyDescriptorBuilder.of(""fam1"")).build();"
113898,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncClusterAdminApi.java,94,,"      assertEquals(1000, conf.getInt(""hbase.custom.config"", 0));"
113899,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNamespaceAdminApi.java,105,,"    admin.createNamespace(NamespaceDescriptor.create(prefix + ""ns1"").build()).join();"
113900,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNamespaceAdminApi.java,122,,"          TableDescriptorBuilder.newBuilder(TableName.valueOf(""non_existing_namespace"","
113901,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncNonMetaRegionLocatorConcurrenyLimit.java,132,,"    SPLIT_KEYS = IntStream.range(1, 256).mapToObj(i -> Bytes.toBytes(String.format(""%02x"", i)))"
113902,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncQuotaAdminApi.java,107,,"    String[] namespaces = new String[] { ""NS0"", ""NS01"", ""NS2"" };"
113903,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncQuotaAdminApi.java,142,,"    assertNumResults(21, new QuotaFilter().setUserFilter(""User.*""));"
113904,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncReplicationAdminApi.java,209,,"    assertTrue(""Should contain t1"", result.containsKey(tableName1));"
113905,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncReplicationAdminApi.java,210,,"    assertTrue(""Should contain t2"", result.containsKey(tableName2));"
113906,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncReplicationAdminApi.java,306,,"    tableCFs.get(tableName2).add(""cf1"");"
113907,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncSnapshotAdminApi.java,179,,"    assertEquals(3, admin.listSnapshots(Pattern.compile(""(.*)"")).get().size());"
113908,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTable.java,163,,"  @SuppressWarnings(""FutureReturnValueIgnored"")"
113909,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableAdminApi.java,330,,"    final TableName newTableName = TableName.valueOf(tableName.getNameAsString() + ""_new"");"
113910,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncTableScanRenewLease.java,70,,"      i -> new Put(Bytes.toBytes(String.format(""%02d"", i))).addColumn(FAMILY, CQ, Bytes.toBytes(i)))"
113911,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java,93,,"  private static byte[] FAMILY = Bytes.toBytes(""testFamily"");"
113912,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java,95,,"  private static byte[] QUALIFIER = Bytes.toBytes(""testQualifier"");"
113913,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java,241,,"      System.out.println(""Flushing cache"");"
113914,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java,379,,"      System.out.println(""Gets should have returned the bloks"");"
113915,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestBlockEvictionFromClient.java,954,,"      assertTrue(""Blocks with non zero ref count should be found "", usedBlocksFound);"
113916,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java,688,,"  @SuppressWarnings(""checkstyle:MethodLength"")"
113917,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java,1480,,"      assertEquals(""Expected 9 keys but received "" + result.size(), 9, result.size());"
113918,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java,1842,,"      assertEquals(""Expected 2 keys but received "" + result.size(), 2, result.size());"
113919,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java,178,,"      byte[] value1 = Bytes.toBytes(""value_1"");"
113920,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide3.java,275,,"    TEST_UTIL.getConfiguration().setInt(""hbase.hstore.compaction.min"", 3);"
113921,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide4.java,735,,"      put.addColumn(FAMILY, qualifier, 1L, Bytes.toBytes(""AAA""));"
113922,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide4.java,739,,"      put.addColumn(FAMILY, qualifier, 2L, Bytes.toBytes(""BBB""));"
113923,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide4.java,759,,"      put.addColumn(FAMILY, qualifier, 1L, Bytes.toBytes(""CCC""));"
113924,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide4.java,764,,"      put.addColumn(FAMILY, qualifier, 2L, Bytes.toBytes(""DDD""));"
113925,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide4.java,954,,"    final byte[] CONTENTS_FAMILY = Bytes.toBytes(""contents"");"
113926,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide4.java,958,,"    final byte[] value = Bytes.toBytes(""abcd"");"
113927,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,150,,"    final byte[] beforeFirstRow = Bytes.toBytes(""row"");"
113928,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,272,,"    final byte [] ROW1 = Bytes.toBytes(""testRow1"");"
113929,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,273,,"    final byte [] ROW2 = Bytes.toBytes(""testRow2"");"
113930,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,331,,"    final byte [] VALUE1 = Bytes.toBytes(""testValue1"");"
113931,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,332,,"    final byte [] VALUE2 = Bytes.toBytes(""testValue2"");"
113932,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,1719,,"        fail(""Negative timestamps should not have been allowed"");"
113933,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,1721,,"        assertTrue(ex.getMessage().contains(""negative""));"
113934,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,2347,,"        Bytes.toBytes(""006""),"
113935,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,2387,,"            assertTrue(""Error scan order, last row= "" + Bytes.toString(lastRow)"
113936,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,2388,,"                            + "",this row="" + Bytes.toString(thisRow),"
113937,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,2406,,"        Bytes.toBytes(""000""), Bytes.toBytes(""002""), Bytes.toBytes(""004""),"
113938,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide5.java,2747,,"      byte[] VALUEA = Bytes.toBytes(""value-a"");"
113939,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestIncrementsFromClientSide.java,190,,"    LOG.info(""Starting "" + this.name.getMethodName());"
113940,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestIncrementsFromClientSide.java,194,,"    final byte[] COLUMN = Bytes.toBytes(""column"");"
113941,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestInvalidMutationDurabilityException.java,78,,"    Put put = new Put(Bytes.toBytes(""row""));"
113942,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMalformedCellFromClient.java,112,,"    batches.add(new Put(Bytes.toBytes(""good"")).addColumn(FAMILY, null, new byte[10]));"
113943,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMalformedCellFromClient.java,115,,"    RowMutations rm = new RowMutations(Bytes.toBytes(""fail""));"
113944,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMalformedCellFromClient.java,124,,"        fail(""Where is the exception? We put the malformed cells!!!"");"
113945,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiRespectsLimits.java,116,,"    long startingExceptions = METRICS_ASSERT.getCounter(""exceptions"", s);"
113946,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiRespectsLimits.java,117,,"    long startingMultiExceptions = METRICS_ASSERT.getCounter(""exceptions.multiResponseTooLarge"", s);"
113947,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java,99,,"    byte [] FAMILY = Bytes.toBytes(""event_log"");"
113948,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java,415,,"        ""row:""+ rowIdx, Bytes.toString(CellUtil.cloneRow(kv)));"
113949,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java,421,,"        ""column:"" + colIdx,"
113950,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestRawAsyncTablePartialScan.java,69,,"            .mapToObj(i -> new Put(Bytes.toBytes(String.format(""%02d"", i)))"
113951,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicaWithCluster.java,147,,"        throw new RegionServerStoppedException(""Server "" + e.getEnvironment().getServerName()"
113952,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestReplicaWithCluster.java,148,,"            + "" not running"");"
113953,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestScannersFromClientSide2.java,93,,"      splitKeys[i / 111 - 1] = Bytes.toBytes(String.format(""%03d"", i));"
113954,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSeparateClientZKCluster.java,120,,"      LOG.debug(""Result: "" + Bytes.toString(result.getValue(family, qualifier)));"
113955,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,172,,"    LOG.debug(""Snapshot1 completed."");"
113956,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,176,,"    LOG.debug(""Snapshot2 completed."");"
113957,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,180,,"    LOG.debug(snapshot3 + "" completed."");"
113958,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,326,,"      String table1Snapshot1 = ""Table1Snapshot1"";"
113959,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,330,,"      String table1Snapshot2 = ""Table1Snapshot2"";"
113960,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,334,,"      String table2Snapshot1 = ""Table2Snapshot1"";"
113961,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotFromClient.java,339,,"          admin.listTableSnapshots(Pattern.compile(""test.*""), MATCH_ALL);"
113962,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTableOperationException.java,90,,"    tableDoNotRetry.get(new Get(Bytes.toBytes(""row"")).addColumn(CF, CQ));"
113963,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTableOperationException.java,95,,"    tableDoNotRetry.put(new Put(Bytes.toBytes(""row"")).addColumn(CF, CQ, Bytes.toBytes(""value"")));"
113964,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTableOperationException.java,153,,"      throw new DoNotRetryIOException(""Call failed and don't retry"");"
113965,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTableOperationException.java,195,,"      throw new IOException(""Call failed and retry"");"
113966,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTimestampsFilter.java,195,,"    p.addColumn(FAMILY, Bytes.toBytes(""column2""), 1L, Bytes.toBytes(""value2-1""));"
113967,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTimestampsFilter.java,199,,"    p.addColumn(FAMILY, Bytes.toBytes(""column4""), 1L, Bytes.toBytes(""value4-1""));"
113968,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTimestampsFilter.java,311,,"                 ""row:""+ rowIdx, Bytes.toString(CellUtil.cloneRow(kv)));"
113969,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestTimestampsFilter.java,317,,"                 ""column:"" + colIdx,"
113970,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestUpdateConfiguration.java,75,,"    int custom = conf.getInt(""hbase.custom.config"", 0);"
113971,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/locking/TestEntityLocks.java,127,,"    EntityLock lock = admin.namespaceLock(""namespace"", ""description"", null);"
113972,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/client/locking/TestEntityLocks.java,127,,"    EntityLock lock = admin.namespaceLock(""namespace"", ""description"", null);"
113973,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java,170,,"      sharedData.putIfAbsent(""test1"", new Object());"
113974,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java,262,,"      sharedData.putIfAbsent(""test2"", new Object());"
113975,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,151,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadDelete"","
113976,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,151,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadDelete"","
113977,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,151,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadDelete"","
113978,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,151,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadDelete"","
113979,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,151,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadDelete"","
113980,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,153,,"            ""hadPostBatchMutateIndispensably"" },"
113981,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,163,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadPreBatchMutate"","
113982,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,164,,"            ""hadPostBatchMutate"", ""hadDelete"", ""hadPostStartRegionOperation"","
113983,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,209,,"        new String[] { ""hadPreGet"", ""hadPostGet"", ""hadPrePut"", ""hadPostPut"", ""hadDeleted"" },"
113984,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,272,,"          ""getPostCheckAndPutWithFilter"", ""getPreCheckAndMutate"","
113985,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,273,,"          ""getPreCheckAndMutateAfterRowLock"", ""getPostCheckAndMutate"" },"
113986,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java,273,,"          ""getPreCheckAndMutateAfterRowLock"", ""getPostCheckAndMutate"" },"
113987,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,90,,"      Bytes.toBytes(""testRowOne-0""), Bytes.toBytes(""testRowOne-1""),"
113988,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,91,,"      Bytes.toBytes(""testRowOne-2""), Bytes.toBytes(""testRowOne-3"")"
113989,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,91,,"      Bytes.toBytes(""testRowOne-2""), Bytes.toBytes(""testRowOne-3"")"
113990,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,95,,"      Bytes.toBytes(""testRowTwo-0""), Bytes.toBytes(""testRowTwo-1""),"
113991,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,96,,"      Bytes.toBytes(""testRowTwo-2""), Bytes.toBytes(""testRowTwo-3"")"
113992,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,110,,"    Bytes.toBytes(""testFamilyOne""), Bytes.toBytes(""testFamilyTwo"")"
113993,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,119,,"    Bytes.toBytes(""testQualifierOne-2""), Bytes.toBytes(""testQualifierOne-3"")"
113994,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,142,,"    Bytes.toBytes(""testValueOne""), Bytes.toBytes(""testValueTwo"")"
113995,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,142,,"    Bytes.toBytes(""testValueOne""), Bytes.toBytes(""testValueTwo"")"
113996,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,305,,"          Bytes.toString(CellUtil.cloneRow(keyValue)).contains(""testRowOne""));"
113997,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,531,,"            ""The WhileMatchFilter should now filter all remaining"","
113998,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,819,,"      .withStopRow(Bytes.toBytes(""testRowTwo""));"
113999,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,1198,,"        new RegexStringComparator("".+-2""));"
