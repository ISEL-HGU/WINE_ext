128000,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/ExternalConfigSupplierRegistryTest.java,37,,"        MyExternalConfigSupplier supplier1 = new MyExternalConfigSupplier(ImmutableMap.of(""mykey"", ""myval1""));"
128001,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/LocalManagementContextTest.java,67,,"        Location location = context.getLocationRegistry().resolve(""localhost"");"
128002,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/LocalManagementContextTest.java,68,,"        assertEquals(location.getDisplayName(), ""myname"");"
128003,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/osgi/OsgiVersionMoreEntityTest.java,72,,"    public static final String BROOKLYN_TEST_OSGI_ENTITIES_URL = ""classpath:""+OsgiTestResources.BROOKLYN_TEST_OSGI_ENTITIES_PATH;"
128004,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/osgi/OsgiVersionMoreEntityTest.java,121,,"            @SuppressWarnings(""unchecked"")"
128005,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/osgi/OsgiVersionMoreEntityTest.java,262,,"        Assert.assertEquals(me.policies().size(), 1, ""Wrong number of policies: ""+MutableList.copyOf(me.policies()));"
128006,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/FileBasedStoreObjectAccessorWriterTest.java,51,,"    @Test(groups=""Integration"")"
128007,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/FileBasedStoreObjectAccessorWriterTest.java,58,,"        accessor.put(""abc"");"
128008,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/PersistenceStoreObjectAccessorWriterTestFixture.java,67,,"        accessor.put(""abc"");"
128009,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,108,,"                ImmutableMap.of(""old.package.name.XmlMementoSerializerTest"", XmlMementoSerializerTest.class.getName()));"
128010,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,155,,"        assertEquals(serializer.fromString(serializedForm), obj, ""serializedForm=""+serializedForm);"
128011,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,172,,"        Set<?> obj = MutableSet.of(""123"");"
128012,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializerTest.java,464,,"                throw new NoSuchElementException(""no entity with id ""+id+""; contenders are ""+entities.keySet());"
128013,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/ActivePartialRebindTest.java,54,,"        Assert.assertTrue(c2 == c1, ""Proxy instance should be the same: ""+c1+"" / ""+c2);"
128014,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/Dumpers.java,142,,"                msg.append(""\t\t""+""type="").append(chainElement.getClass()).append(""; val="").append(chainElementStr).append(""\n"");"
128015,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,113,,"        String symbolicName = ""rebind-yaml-catalog-item-test"";"
128016,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,115,,"                ""name: "" + symbolicName + ""\n"" +"
128017,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,116,,"                ""brooklyn.catalog:\n"" +"
128018,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindCatalogItemTest.java,117,,"                ""  version: "" + TEST_VERSION + ""\n"" +"
128019,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEnricherTest.java,95,,"        newEntity.sensors().set(METRIC1, ""myval"");"
128020,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityDynamicTypeInfoTest.java,49,,"        public static final Effector<String> EFFECTOR = Effectors.effector(String.class, ""say_hi"").description(""says hello"")"
128021,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,145,,"        origApp.createAndManageChild(EntitySpec.create(MyEntity.class).configure(""myconfig"", ""myval""));"
128022,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,145,,"        origApp.createAndManageChild(EntitySpec.create(MyEntity.class).configure(""myconfig"", ""myval""));"
128023,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,244,,"        MyEntity2 origE = origApp.createAndManageChild(EntitySpec.create(MyEntity2.class).configure(""subscribe"", true));"
128024,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,479,,"                .configure(TestEntity.CONF_LIST_PLAIN, ImmutableList.of(""val1"", ""val2""))"
128025,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,479,,"                .configure(TestEntity.CONF_LIST_PLAIN, ImmutableList.of(""val1"", ""val2""))"
128026,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,480,,"                .configure(TestEntity.CONF_MAP_PLAIN, ImmutableMap.of(""akey"", ""aval"")));"
128027,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,480,,"                .configure(TestEntity.CONF_MAP_PLAIN, ImmutableMap.of(""akey"", ""aval"")));"
128028,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,529,,"        origApp.config().set(MyEntity.MY_CONFIG, ""myValInSuper"");"
128029,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,551,,"        assertEquals(origE.getConfigRaw(MyEntity.MY_CONFIG, true).or(""mydefault""), ""mydefault"");"
128030,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,563,,"                .configure(""myunmatchedkey"", ""myunmatchedval""));"
128031,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,563,,"                .configure(""myunmatchedkey"", ""myunmatchedval""));"
128032,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,713,,"        @SuppressWarnings(""unused"")"
128033,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,761,,"                        Entity.class, ""test.config.entityref"", ""Ref to other entity"");"
128034,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindEntityTest.java,765,,"                Location.class, ""test.config.locationref"", ""Ref to other location"");"
128035,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindFailuresTest.java,222,,"        @SetFromFlag(""failOnGenerateMemento"")"
128036,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindFailuresTest.java,225,,"        @SetFromFlag(""failOnRebind"")"
128037,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindFailuresTest.java,231,,"                throw new RuntimeException(""Simulating failure in ""+this+"", which will cause memento-generation to fail"");"
128038,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,57,,"    @SuppressWarnings(""unused"")"
128039,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,95,,"        MyLocationCustomProps origLoc = new MyLocationCustomProps(MutableMap.of(""name"", ""mylocname"", ""myfield"", ""myval""));"
128040,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,95,,"        MyLocationCustomProps origLoc = new MyLocationCustomProps(MutableMap.of(""name"", ""mylocname"", ""myfield"", ""myval""));"
128041,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindLocationTest.java,181,,"        MyLocation.myStaticFieldNotSetFromFlag = ""mynewval"";"
128042,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindPolicyTest.java,70,,"        MyPolicy origPolicy = new MyPolicy(MutableMap.of(""myfield"", ""myFieldVal"", ""myconfigkey"", ""myConfigVal""));"
128043,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/RebindPolicyTest.java,70,,"        MyPolicy origPolicy = new MyPolicy(MutableMap.of(""myfield"", ""myFieldVal"", ""myconfigkey"", ""myConfigVal""));"
128044,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,80,,"            .xmlReplaceItem(""Tag1/text()[.='foo']"", ""bar"")"
128045,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,82,,"        assertSingleXmlTransformation(transformer, ""<Tag1>foo</Tag1>"", ""<Tag1>bar</Tag1>"");"
128046,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,82,,"        assertSingleXmlTransformation(transformer, ""<Tag1>foo</Tag1>"", ""<Tag1>bar</Tag1>"");"
128047,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,83,,"        assertSingleXmlTransformation(transformer, ""<Tag1>baz</Tag1>"", ""<Tag1>baz</Tag1>"");"
128048,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,84,,"        assertSingleXmlTransformation(transformer, ""<Tag2>foo</Tag2>"", ""<Tag2>foo</Tag2>"");"
128049,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,86,,"        assertSingleXmlTransformation(transformer, ""<Tag0><Tag1>foo</Tag1><Tag2/></Tag0>"", ""<Tag0><Tag1>bar</Tag1><Tag2/></Tag0>"");"
128050,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,88,,"        assertSingleXmlTransformation(transformer, ""<Tag1 attr=\""value\"">foo</Tag1>"", ""<Tag1 attr=\""value\"">bar</Tag1>"");"
128051,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,89,,"        assertSingleXmlTransformation(transformer, ""<Tag1>foo<Tag2/></Tag1>"", ""<Tag1>bar<Tag2/></Tag1>"");"
128052,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,212,,"                ""<entity myattrib=\""myval\"">""+NEWLINE+"
128053,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,213,,"                ""  <type myattrib2=\""myval2\"">mytype.Before</type>""+NEWLINE+"
128054,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,220,,"                ""</entity>"";"
128055,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,244,,"                ""  <config>""+NEWLINE+"
128056,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,245,,"                ""    <test.conf1>""+NEWLINE+"
128057,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,249,,"                ""    </test.conf1>""+NEWLINE+"
128058,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,255,,"                ""  </config>""+NEWLINE+"
128059,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerTest.java,346,,"                ""  <config>ignore</config>""+NEWLINE+"
128060,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,49,,"                ""<entity myattrib=\""myval\"">""+NEWLINE+"
128061,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,55,,"                ""  <id>myid</id>""+NEWLINE+"
128062,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,56,,"                ""</entity>"";"
128063,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,75,,"                ""  <type myattrib2=\""myval2\"">mytype.Before</type>""+NEWLINE+"
128064,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,106,,"                ""  <config>""+NEWLINE+"
128065,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,107,,"                ""    <test.conf1>""+NEWLINE+"
128066,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,111,,"                ""    </test.conf1>""+NEWLINE+"
128067,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/rebind/transformer/impl/XsltTransformerTest.java,117,,"                ""  </config>""+NEWLINE+"
128068,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/BasicSpecParameterFromListTest.java,55,,"        String name = ""minRam"";"
128069,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/BasicSpecParameterFromListTest.java,71,,"        SpecParameter<?> input = parse(ImmutableMap.of(""name"", name));"
128070,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/objs/BasicSpecParameterFromListTest.java,94,,"                .put(""type"", inputType)"
128071,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/BasicPolicyTest.java,60,,"        policy.setDisplayName(""Bob"");"
128072,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/BasicPolicyTest.java,61,,"        policy.config().set(MyPolicy.STR_KEY, ""aval"");"
128073,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/PolicyConfigTest.java,50,,"                .put(""strKey"", ""aval"")"
128074,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/policy/basic/PolicySubscriptionTest.java,71,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
128075,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/sensor/StaticSensorTest.java,36,,"                        StaticSensor.SENSOR_NAME, ""myname"","
128076,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/EntityPerformanceTest.java,67,,"    @Test(groups={""Integration"", ""Acceptance""})"
128077,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/EntityPerformanceTest.java,67,,"    @Test(groups={""Integration"", ""Acceptance""})"
128078,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/FilePersistencePerformanceTest.java,52,,"        file = File.createTempFile(""fileBasedStoreObject"", "".txt"");"
128079,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/FilePersistencePerformanceTest.java,70,,"     @Test(groups={""Integration"", ""Acceptance""})"
128080,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/FilePersistencePerformanceTest.java,70,,"     @Test(groups={""Integration"", ""Acceptance""})"
128081,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/test/qa/performance/SubscriptionPerformanceTest.java,73,,"            subscriptionManager.subscribe(MutableMap.<String, Object>of(""subscriber"", i), entity, TestEntity.SEQUENCE, new SensorEventListener<Integer>() {"
128082,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,45,,"    private final static RegisteredType SAMPLE_TYPE = RegisteredTypes.bean(""item.A"", ""1"", new BasicTypeImplementationPlan(""ignore"", null), String.class);"
128083,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,45,,"    private final static RegisteredType SAMPLE_TYPE = RegisteredTypes.bean(""item.A"", ""1"", new BasicTypeImplementationPlan(""ignore"", null), String.class);"
128084,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,135,,"            MutableList.of(""my_a"", ""the_a""));"
128085,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/BasicBrooklynTypeRegistryTest.java,135,,"            MutableList.of(""my_a"", ""the_a""));"
128086,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/JavaClassNameTypePlanTransformerTest.java,30,,"        public String name() { return ""no-arg""; }"
128087,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/RegisteredTypePredicatesTest.java,37,,"        RegisteredType item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
128088,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/RegisteredTypePredicatesTest.java,37,,"        RegisteredType item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
128089,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/typereg/RegisteredTypePredicatesTest.java,38,,"                .plan(""services:\n- type: org.apache.brooklyn.entity.stock.BasicEntity"")"
128090,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/CustomAggregatingEnricherDeprecatedTest.java,62,,"    AttributeSensor<Integer> target = Sensors.newIntegerSensor(""target sensor"");"
128091,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/CustomAggregatingEnricherDeprecatedTest.java,68,,"        producersFlags = ImmutableMap.of(""producers"", ImmutableList.of(producer));"
128092,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/CustomAggregatingEnricherTest.java,79,,"        EntityTestUtils.assertAttributeEqualsContinually(MutableMap.of(""timeout"", 50), entity, target, null);"
128093,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/EnrichersTest.java,157,,"        entity.sensors().set(STR1, ""myval"");"
128094,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/EnrichersTest.java,210,,"        entity.sensors().set(STR1, ""myval2"");"
128095,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherDeprecatedTest.java,57,,"        entity.sensors().set(TestEntity.NAME, ""foo"");"
128096,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,63,,"        entity.sensors().set(TestEntity.NAME, ""foo"");"
128097,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/SensorPropagatingEnricherTest.java,68,,"        EntityTestUtils.assertAttributeEqualsContinually(MutableMap.of(""timeout"", 100), app, TestEntity.SEQUENCE, null);"
128098,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/reducer/ReducerTest.java,74,,"        entity.sensors().set(STR1, ""foo"");"
128099,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/enricher/stock/reducer/ReducerTest.java,77,,"        entity.sensors().set(STR2, ""bar"");"
128100,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,112,,"                    .configure(""factory"", ""error""));"
128101,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,355,,"                .configure(""initialSize"", 2));"
128102,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterTest.java,571,,"                .configure(""quarantineFailedEntities"", true)"
128103,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterWithAvailabilityZonesTest.java,74,,"        loc.addExtension(AvailabilityZoneExtension.class, new SimulatedAvailabilityZoneExtension(mgmt, loc, ImmutableList.of(""zone1"", ""zone2"", ""zone3"", ""zone4"")));"
128104,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicClusterWithAvailabilityZonesTest.java,74,,"        loc.addExtension(AvailabilityZoneExtension.class, new SimulatedAvailabilityZoneExtension(mgmt, loc, ImmutableList.of(""zone1"", ""zone2"", ""zone3"", ""zone4"")));"
128105,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicFabricTest.java,102,,"        assertEquals(fabric.getMembers().size(), locs.size(), ""members=""+fabric.getMembers());"
128106,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicFabricTest.java,128,,"            .configure(""factory"", new EntityFactory<Entity>() {"
128107,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicFabricTest.java,426,,"            assertEquals(childLocs.size(), 1, ""childLocs=""+childLocs);"
128108,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,123,,"        group.setEntityFilter(EntityPredicates.displayNameEqualTo(""myname""));"
128109,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,145,,"        group.setEntityFilter(EntityPredicates.attributeEqualTo(MY_ATTRIBUTE, ""yes""));"
128110,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,225,,"        Asserts.succeedsContinually(MutableMap.of(""timeout"", VERY_SHORT_WAIT_MS), new Runnable() {"
128111,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicGroupTest.java,276,,"                    LOG.error(""Error on event $event"", t);"
128112,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicMultiGroupTest.java,126,,"        child1.sensors().set(SENSOR, ""bucketA"");"
128113,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicMultiGroupTest.java,127,,"        child2.sensors().set(SENSOR, ""bucketB"");"
128114,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/DynamicMultiGroupTest.java,185,,"        child3.sensors().set(SENSOR, ""bucketC"");"
128115,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/GroupTest.java,121,,"                String msg = ""events=""+groupAddedListener.getEvents();"
128116,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/MembershipTrackingPolicyTest.java,146,,"        e1.sensors().set(TestEntity.NAME, ""myname"");"
128117,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/entity/group/zoneaware/ProportionalZoneFailureDetectorTest.java,58,,"        detector.onStartupFailure(loc1, entity1, new Throwable(""simulated failure""));"
128118,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/HttpFeedTest.java,87,,"            server.enqueue(new MockResponse().setResponseCode(200).addHeader(""content-type: application/json"").setBody(""{\""foo\"":\""myfoo\""}""));"
128119,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,38,,"        Navigator<MutableMap<Object, Object>> europe = Jsonya.newInstance().at(""europe"", ""uk"", ""edinburgh"")"
128120,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,39,,"                .put(""population"", 500*1000)"
128121,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,41,,"                .root().at(""europe"").at(""france"").put(""population"", 80*1000*1000)"
128122,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,63,,"            JsonFunctions.walk(""europe"", ""spain"", ""barcelona""),"
128123,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/http/JsonFunctionsTest.java,63,,"            JsonFunctions.walk(""europe"", ""spain"", ""barcelona""),"
128124,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/shell/ShellFeedIntegrationTest.java,84,,"    @Test(groups=""Integration"")"
128125,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/shell/ShellFeedIntegrationTest.java,125,,"                assertTrue(val != null && val.contains(""timed out after 1ms""), ""val="" + val);"
128126,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedIntegrationTest.java,90,,"    @Test(groups=""Integration"")"
128127,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedIntegrationTest.java,106,,"        Assert.assertTrue(val.contains(""hello""), ""val=""+val);"
128128,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedTest.java,90,,"                        .env(ImmutableMap.of(""mykey"", ""myval""))"
128129,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/feed/ssh/SshFeedTest.java,92,,"                        .onSuccess(Functions.constant(""success"")))"
128130,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,97,,"        Map<String, Object> conf = resolve(""byon(hosts=\""1.1.1.1\"")"").config().getBag().getAllConfig();"
128131,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,111,,"        assertEquals(loc.obtain().getAddress(), InetAddress.getByName(""1.1.1.1""));"
128132,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,168,,"        assertByonClusterEquals(resolve(""byon(hosts=\""1.1.1.1,1.1.1.2\"")""), ImmutableSet.of(""1.1.1.1"",""1.1.1.2""));"
128133,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,219,,"                ImmutableSet.of(UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"", 22)));"
128134,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,229,,"                ImmutableSet.of(UserAndHostAndPort.fromParts(""bob"", ""1.1.1.1"", 22)));"
128135,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,242,,"    @SuppressWarnings(""unchecked"")"
128136,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/ByonLocationResolverTest.java,273,,"                ""brooklyn.location.named.foo.privateKeyFile"", ""/tmp/x""));"
128137,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,73,,"    @SuppressWarnings(""unchecked"")"
128138,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,78,,"        machine = mgmt.getLocationManager().createLocation(MutableMap.of(""address"", Inet4Address.getByName(""192.168.144.200"")), SshMachineLocation.class);"
128139,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,78,,"        machine = mgmt.getLocationManager().createLocation(MutableMap.of(""address"", Inet4Address.getByName(""192.168.144.200"")), SshMachineLocation.class);"
128140,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,80,,"                MutableMap.of(""machines"", MutableList.of(machine)),"
128141,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,128,,"                addAddress(""192.168.0.1"")."
128142,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,137,,"        for (int i=3; i<=4; i++) assertUserAndHost(provisioner2.obtain(), ""u1"", ""192.168.0.""+i);"
128143,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,181,,"        provisioner.release(new SshMachineLocation(MutableMap.of(""address"", Inet4Address.getByName(""192.168.144.201""))));"
128144,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,202,,"            fail(""obtained=""+obtained2);"
128145,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,324,,"                mgmt.getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class).configure(""address"", Networking.getInetAddressWithFixedName(""1.1.1.1""))),"
128146,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,513,,"        boolean origContains = machine.config().getBag().getAllConfig().containsKey(""mykey"");"
128147,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/byon/FixedListMachineProvisioningLocationTest.java,514,,"        SshMachineLocation obtained = provisioner.obtain(ImmutableMap.of(""mykey"", ""myNewVal""));"
128148,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,66,,"        brooklynProperties.put(""brooklyn.location.localhost.privateKeyFile"", ""myprivatekeyfile"");"
128149,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,67,,"        brooklynProperties.put(""brooklyn.location.localhost.publicKeyFile"", ""mypublickeyfile"");"
128150,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,68,,"        brooklynProperties.put(""brooklyn.location.localhost.privateKeyData"", ""myprivateKeyData"");"
128151,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,69,,"        brooklynProperties.put(""brooklyn.location.localhost.publicKeyData"", ""myPublicKeyData"");"
128152,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,70,,"        brooklynProperties.put(""brooklyn.location.localhost.privateKeyPassphrase"", ""myprivateKeyPassphrase"");"
128153,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,72,,"        Map<String, Object> conf = resolve(""localhost"").config().getBag().getAllConfig();"
128154,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,74,,"        assertEquals(conf.get(""privateKeyFile""), ""myprivatekeyfile"");"
128155,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,75,,"        assertEquals(conf.get(""publicKeyFile""), ""mypublickeyfile"");"
128156,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/localhost/LocalhostLocationResolverTest.java,76,,"        assertEquals(conf.get(""privateKeyData""), ""myprivateKeyData"");"
128157,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/multi/MultiLocationTest.java,64,,"                .configure(""address"", Networking.getInetAddressWithFixedName(""1.1.1.1"")));"
128158,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationIntegrationTest.java,76,,"    @Test(groups = ""Integration"")"
128159,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationPerformanceTest.java,76,,"    @Test(groups = {""Integration""})"
128160,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationPerformanceTest.java,78,,"        runExecManyCommands(ImmutableList.of(""true""), ""small-cmd"", 10);"
128161,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,62,,"            if (forbidden.get()) throw new IllegalStateException(""forbidden at this time"");"
128162,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,116,,"    @Test(groups = ""Integration"")"
128163,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,118,,"        host.execScript(""mysummary"", ImmutableList.of(""exit""));"
128164,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationReuseIntegrationTest.java,118,,"        host.execScript(""mysummary"", ImmutableList.of(""exit""));"
128165,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationSshToolTest.java,69,,"                .configure(""address"", ""localhost"")"
128166,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationTest.java,93,,"                .configure(""address"", Networking.getLocalHost()));"
128167,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationTest.java,107,,"    @Test(groups = ""Integration"")"
128168,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/location/ssh/SshMachineLocationTest.java,236,,"            Files.write(""abc"", src, Charsets.UTF_8);"
128169,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/BrooklynMavenArtifactsTest.java,41,,"    @Test(groups=""Integration"")"
128170,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ResourceUtilsTest.java,171,,"        assertEquals(utils.getResourceAsString(""data:,hello%20world""), ""hello world"");"
128171,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/config/ConfigBagTest.java,68,,"        bag.put(K2, ""v2a"");"
128172,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/config/ConfigBagTest.java,95,,"        ConfigBag bag2 = ConfigBag.newInstanceCopying(bag1).putAll(MutableMap.of(K2, ""v2b""));"
128173,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveBuilderTest.java,71,,"        Files.write(""abcdef"", new File(tmpDir, ""data01.txt""), Charsets.US_ASCII);"
128174,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveBuilderTest.java,72,,"        Files.write(""123456"", new File(tmpDir, ""data02.txt""), Charsets.US_ASCII);"
128175,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveBuilderTest.java,73,,"        Files.write(""qqqqqq"", new File(tmpDir, ""data03.txt""), Charsets.US_ASCII);"
128176,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/file/ArchiveUtilsTest.java,85,,"    @Test(groups=""Integration"")"
128177,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/flags/MethodCoercionsTest.java,44,,"            singleParameterMethod = TestClass.class.getMethod(""singleParameterMethod"", int.class);"
128178,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/flags/MethodCoercionsTest.java,45,,"            multiParameterMethod = TestClass.class.getMethod(""multiParameterMethod"", boolean.class, int.class);"
128179,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,55,,"    @Test(groups = {""Integration""})"
128180,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,61,,"        assertTrue(new String(result.getContent()).contains(""Hello, World""), ""val=""+new String(result.getContent()));"
128181,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/http/HttpToolIntegrationTest.java,61,,"        assertTrue(new String(result.getContent()).contains(""Hello, World""), ""val=""+new String(result.getContent()));"
128182,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,194,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
128183,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,194,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
128184,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,194,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
128185,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/FlagUtilsTest.java,194,,"        Map<?,?> unused = FlagUtils.setFieldsFromFlags(ImmutableMap.of(""f1"", 9, ""ck1"", ""do-set"", ""ck2"", ""dont-set"", ""c3"", ""do-set""), f);"
128186,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,128,,"        assertCoercionFailsWithErrorMatching(""NaN"", int.class, StringPredicates.containsAllLiterals(""int"", ""NaN""));"
128187,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,203,,"        Assert.assertTrue(Arrays.equals(s, new String[] {""a"", ""b""}), ""result=""+Arrays.toString(s));"
128188,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,217,,"        @SuppressWarnings(""serial"")"
128189,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,218,,"        List<?> s = TypeCoercions.coerce(ImmutableList.of(""java.lang.Integer"", ""java.lang.Double""), new TypeToken<List<Class<?>>>() { });"
128190,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,218,,"        List<?> s = TypeCoercions.coerce(ImmutableList.of(""java.lang.Integer"", ""java.lang.Double""), new TypeToken<List<Class<?>>>() { });"
128191,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,239,,"        Map<?,?> s = TypeCoercions.coerce(ImmutableMap.of(""int"", ""java.lang.Integer"", ""double"", ""java.lang.Double""), new TypeToken<Map<String, Class<?>>>() { });"
128192,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/TypeCoercionsTest.java,326,,"        String s = TypeCoercions.coerce(URI.create(""http://localhost:1234/""), String.class);"
128193,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,103,,"    @Test(groups = {""Integration""})"
128194,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,108,,"        assertTrue(out.contains(""run1""), ""out=""+out);"
128195,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,114,,"        String out = execScript(""export MYPROP=abc"", ""echo val is $MYPROP"");"
128196,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,163,,"        String bigstring = Strings.repeat(""abcdefghij"", 100); // 1KB"
128197,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,179,,"        int exitcode = tool.execScript(ImmutableMap.of(""out"", out), ImmutableList.of(""export MYPROP=myval"", ""acmdthatdoesnotexist"", ""echo val is $MYPROP""));"
128198,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/ShellToolAbstractTest.java,319,,"        tool.execScript(ImmutableMap.of(""out"", out, ""err"", err), ImmutableList.of(nonExistantCmd));"
128199,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,95,,"        return newTool(ImmutableMap.of(""host"", ""localhost"", ""privateKeyFile"", SSH_DEFAULT_KEYFILE));"
128200,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,121,,"        String lsout = execCommands(""ls -l ""+remotePath);"
128201,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,150,,"    @Test(groups = {""Integration""})"
128202,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,152,,"        String contents = ""echo hello world!\n"";"
128203,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractIntegrationTest.java,257,,"        assertEquals(tool.execScript(MutableMap.<String,Object>of(), ImmutableList.of(""date"")), 0);"
128204,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/SshToolAbstractPerformanceTest.java,65,,"    @Test(groups = {""Integration""})"
128205,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/cli/SshCliToolIntegrationTest.java,55,,"    @Test(groups = {""Integration""})"
128206,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,121,,"                new InjectedResult(containsCmd(""# Long poll""), returning(0, ""mystringToStdout"", ""mystringToStderr"")));"
128207,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,121,,"                new InjectedResult(containsCmd(""# Long poll""), returning(0, ""mystringToStdout"", ""mystringToStderr"")));"
128208,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,121,,"                new InjectedResult(containsCmd(""# Long poll""), returning(0, ""mystringToStdout"", ""mystringToStderr"")));"
128209,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolAsyncStubIntegrationTest.java,132,,"                new InjectedResult(containsCmd(""# Retrieve status""), returning(0, ""123"", """")));"
128210,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,66,,"    @Test(enabled = false, groups = {""Integration""})"
128211,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,79,,"        final SshTool localtool = new SshjTool(ImmutableMap.of(""sshTries"", 3, ""host"", ""localhost"", ""privateKeyFile"", ""~/.ssh/id_rsa"")) {"
128212,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjToolIntegrationTest.java,79,,"        final SshTool localtool = new SshjTool(ImmutableMap.of(""sshTries"", 3, ""host"", ""localhost"", ""privateKeyFile"", ""~/.ssh/id_rsa"")) {"
128213,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/mutex/WithMutexesTest.java,39,,"            m.acquireMutex(""foo"", ""something foo"");"
128214,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/mutex/WithMutexesTest.java,39,,"            m.acquireMutex(""foo"", ""something foo"");"
128215,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,133,,"    @Test(groups=""Integration"")"
128216,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,150,,"        assertTrue(outstr.contains(""parsed OK""), ""out=""+outstr+""; err=""+errstr);"
128217,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,150,,"        assertTrue(outstr.contains(""parsed OK""), ""out=""+outstr+""; err=""+errstr);"
128218,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,159,,"        int exitcode = loc.execCommands(ImmutableMap.of(""out"", outStream, ""err"", errStream), ""test"", ImmutableList.of(cmd));"
128219,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,232,,"        assertTrue(t.getStderr().contains(""The requested file""), ""Expected message in: ""+t.getStderr());"
128220,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,232,,"        assertTrue(t.getStderr().contains(""The requested file""), ""Expected message in: ""+t.getStderr());"
128221,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,311,,"        assertTrue(output.contains(""Couldn't find""), ""output=""+output);"
128222,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/ssh/BashCommandsIntegrationTest.java,402,,"        runSetHostname(""br-""+Identifiers.makeRandomId(8).toLowerCase(), null, false);"
128223,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTaskExecutionTest.java,84,,"        Task<Object> t2 = em.submit(MutableMap.of(""tag"", ""A""), t);"
128224,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTaskExecutionTest.java,165,,"        tasks.add(em.submit(MutableMap.of(""tags"", ImmutableList.of(""A"",""B"")), new BasicTask<Integer>(newIncrementCallable(1))));"
128225,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTasksFutureTest.java,92,,"        addFutureListener(t, ""before"");"
128226,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTasksFutureTest.java,106,,"        addFutureListener(t, ""during"");"
128227,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/BasicTasksFutureTest.java,125,,"            addFutureListener(t, ""after"");"
128228,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/DynamicSequentialTaskTest.java,101,,"                messages.add(""main"");"
128229,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/DynamicSequentialTaskTest.java,387,,"        Assert.assertTrue(stopwatch.elapsed(TimeUnit.MILLISECONDS) < TIMEOUT.toMilliseconds(), ""took too long: ""+stopwatch);"
128230,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,56,,"        BasicExecutionManager m = new BasicExecutionManager(""mycontextid"");"
128231,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,58,,"        ScheduledTask t = new ScheduledTask(MutableMap.of(""delay"", 2*PERIOD, ""period"", PERIOD, ""maxIterations"", 5), new Callable<Task<?>>() {"
128232,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,58,,"        ScheduledTask t = new ScheduledTask(MutableMap.of(""delay"", 2*PERIOD, ""period"", PERIOD, ""maxIterations"", 5), new Callable<Task<?>>() {"
128233,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,69,,"        log.info(""submitted {} {}"", t, t.getStatusDetail(false));"
128234,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,71,,"        log.info(""done one ({}) {} {}"", new Object[] {interimResult, t, t.getStatusDetail(false)});"
128235,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,136,,"                        log.info(""task running (""+i+""): ""+Tasks.current()+"" ""+Tasks.current().getStatusDetail(false));"
128236,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ScheduledExecutionTest.java,136,,"                        log.info(""task running (""+i+""): ""+Tasks.current()+"" ""+Tasks.current().getStatusDetail(false));"
128237,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/SingleThreadedSchedulerTest.java,58,,"        em.setTaskSchedulerForTag(""category1"", SingleThreadedScheduler.class);"
128238,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/SingleThreadedSchedulerTest.java,72,,"            em.submit(MutableMap.of(""tag"", ""category1""), new Runnable() {"
128239,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TaskPredicatesTest.java,48,,"                .displayName(""myname"")"
128240,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TasksTest.java,75,,"        app.sensors().set(TestApplication.MY_ATTRIBUTE, ""myval"");"
128241,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/TasksTest.java,82,,"        Map<?,?> orig = ImmutableMap.of(""mykey"", attributeWhenReady(app, TestApplication.MY_ATTRIBUTE));"
128242,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ValueResolverTest.java,69,,"        Maybe<String> result = Tasks.resolving(newSleepTask(Duration.TEN_SECONDS, ""foo"")).as(String.class).context(executionContext).timeout(Duration.ZERO).getMaybe();"
128243,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ssh/SshTasksTest.java,112,,"    @Test(groups=""Integration"")"
128244,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/ssh/SshTasksTest.java,118,,"        Assert.assertEquals(t.getStdout().trim(), ""hello world"");"
128245,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/task/system/SystemTasksTest.java,84,,"    @Test(groups=""Integration"")"
128246,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/DataUriSchemeParserTest.java,33,,"        Assert.assertEquals(new DataUriSchemeParser(""data:,hello"").parse().getDataAsString(), ""hello"");"
128247,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/TemplateProcessorTest.java,58,,"        String result = TemplateProcessor.processTemplateContents(templateContents, app, ImmutableMap.of(""mykey"", ""myval""));"
128248,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/util/core/text/TemplateProcessorTest.java,66,,"        String templateContents = ""${config['""+TestEntity.CONF_NAME.getName()+""']}"";"
128249,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynEntityMirrorIntegrationTest.java,114,,"        serverApp.sensors().set(TestApplication.MY_ATTRIBUTE, ""austria"");"
128250,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynEntityMirrorIntegrationTest.java,130,,"        serverApp.sensors().set(TestApplication.MY_ATTRIBUTE, ""bermuda"");"
128251,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeRestTest.java,108,,"            ((EntityInternal)newApp).sensors().set(TestEntity.NAME, ""foo"");"
128252,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindTestFixture.java,118,,"        assertNotNull(Iterables.find(lastMgmt().getApplications(), EntityPredicates.displayNameEqualTo(""myorig""), null), ""apps=""+lastMgmt().getApplications());"
128253,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherRebindToCloudObjectStoreTest.java,42,,"@Test(groups=""Live"")"
128254,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,85,,"    @Test(groups=""Integration"")"
128255,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,204,,"        props.put(""mykey"", ""myval"");"
128256,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,204,,"        props.put(""mykey"", ""myval"");"
128257,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynLauncherTest.java,239,,"        File globalPropertiesFile = File.createTempFile(""local-brooklyn-properties-test"", "".properties"");"
128258,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/BrooklynWebServerTest.java,114,,"                .put(""keystorePassword"", ""password"")"
128259,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/WebAppRunnerTest.java,109,,"            MutableMap.of(""port"", 8090, ""war"", ""brooklyn.war"", ""wars"", MutableMap.of(""hello"", ""hello-world.war"")) );"
128260,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/WebAppRunnerTest.java,117,,"                ""This is the home page for a sample application"");"
128261,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/blueprints/CouchbaseBlueprintTest.java,25,,"    @Test(groups={""Live""})"
128262,./TargetProjects/incubator-brooklyn/brooklyn-server/launcher/src/test/java/org/apache/brooklyn/launcher/blueprints/MongoDbBlueprintTest.java,27,,"    @Test(groups={""Integration"", ""WIP""})"
128263,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsByonLocationResolver.java,85,,"            throw new IllegalArgumentException(""Invalid location '""+spec+""'; must specify something like jcloudsByon(provider=\""aws-ec2\"",region=\""us-east-1\"",hosts=\""i-f2014593,i-d1234567\"")"");"
128264,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsByonLocationResolver.java,101,,"        String name = argsMap.containsKey(""name"") ? argsMap.get(""name"") : (String)locationFlags.get(""name"");"
128265,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsByonLocationResolver.java,103,,"        String user = argsMap.containsKey(""user"") ? argsMap.get(""user"") : (String)locationFlags.get(""user"");"
128266,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsByonLocationResolver.java,105,,"        String privateKeyFile = argsMap.containsKey(""privateKeyFile"") ? argsMap.get(""privateKeyFile"") : (String)locationFlags.get(""privateKeyFile"");"
128267,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,640,,"        boolean waitForSshable = !""false"".equalsIgnoreCase(setup.get(WAIT_FOR_SSHABLE));"
128268,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,660,,"            LOG.info(""Creating VM ""+setup.getDescription()+"" in ""+this);"
128269,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,994,,"                                ? ""password="" + userCredentials.getOptionalPassword().or(""<absent>"")"
128270,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,1080,,"            LOG.error(""Problem suspending machine "" + rawLocation + "" in "" + this + "", instance id "" + instanceId, e);"
128271,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,1591,,"        sshProps.put(""user"", initialUser);"
128272,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,1592,,"        sshProps.put(""address"", hostAndPort.getHostText());"
128273,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,1596,,"        sshProps.remove(""password"");"
128274,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,1597,,"        sshProps.remove(""privateKeyData"");"
128275,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,1812,,"                        statements.add(org.jclouds.scriptbuilder.statements.ssh.SshStatements.sshdConfig(ImmutableMap.of(""PasswordAuthentication"", ""yes"")));"
128276,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,2371,,"                    ""; ignoring and continuing, """
128277,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,2372,,"                    + (tothrow==null ? ""will throw subsequently"" : ""swallowing due to previous error"")+"": ""+e, e);"
128278,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,2372,,"                    + (tothrow==null ? ""will throw subsequently"" : ""swallowing due to previous error"")+"": ""+e, e);"
128279,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java,3072,,"            throw new IllegalArgumentException(""Invalid type for double: ""+v+"" of type ""+v.getClass());"
128280,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocationConfig.java,76,,"    @SuppressWarnings(""serial"")"
128281,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/BlobStoreTest.java,107,,"        Blob b = context.getBlobStore().blobBuilder(""my-blob-1"").payload(Streams.newInputStreamWithContents(""hello world"")).build();"
128282,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/BlobStoreTest.java,107,,"        Blob b = context.getBlobStore().blobBuilder(""my-blob-1"").payload(Streams.newInputStreamWithContents(""hello world"")).build();"
128283,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/BlobStoreTest.java,118,,"        context.getBlobStore().createDirectory(testContainerName, ""my-dir-1"");"
128284,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/BrooklynMementoPersisterJcloudsObjectStoreTest.java,35,,"@Test(groups={""Live"", ""Live-sanity""})"
128285,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/BrooklynMementoPersisterJcloudsObjectStoreTest.java,35,,"@Test(groups={""Live"", ""Live-sanity""})"
128286,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/HighAvailabilityManagerJcloudsObjectStoreTest.java,31,,"@Test(groups={""Live"", ""Live-sanity""})"
128287,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/HighAvailabilityManagerJcloudsObjectStoreTest.java,31,,"@Test(groups={""Live"", ""Live-sanity""})"
128288,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/JcloudsObjectStoreAccessorWriterTest.java,42,,"@Test(groups={""Live"", ""Live-sanity""})"
128289,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/core/mgmt/persist/jclouds/JcloudsObjectStoreAccessorWriterTest.java,42,,"@Test(groups={""Live"", ""Live-sanity""})"
128290,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/BailOutJcloudsLocation.java,131,,"                .put(IMAGE_ID, ""bogus"")"
128291,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsByonLocationResolverAwsLiveTest.java,52,,"    @BeforeClass(groups=""Live"")"
128292,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsByonLocationResolverSoftlayerLiveTest.java,76,,"        checkSoftlayer(""jcloudsByon:(provider=\""softlayer\"",region=\""""+SOFTLAYER_REGION+""\"",hosts=\""""+slVmInstanceId+""\"",user=\""""+slVmUser+""\"")"");"
128293,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsHardwareProfilesStubbedLiveTest.java,65,,"        assertTrue(template.getHardware().getRam() >= 4096, ""template=""+template);"
128294,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationRegisterMachineLiveTest.java,52,,"    @Test(groups = { ""Live"", ""Live-sanity"" })"
128295,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationRegisterMachineLiveTest.java,55,,"            jcloudsLocation.registerMachine(ImmutableMap.of(""id"", ""incorrectid"", ""hostname"", ""myhostname"", ""user"", ""myusername""));"
128296,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,71,,"        String file = resolve(""jclouds:aws-ec2"").getConfig(JcloudsLocation.LOGIN_USER_PRIVATE_KEY_FILE);"
128297,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,77,,"        brooklynProperties.put(""brooklyn.location.jclouds.aws-ec2.privateKeyFile"", ""myprivatekeyfile"");"
128298,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,78,,"        brooklynProperties.put(""brooklyn.location.jclouds.aws-ec2.publicKeyFile"", ""mypublickeyfile"");"
128299,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,79,,"        brooklynProperties.put(""brooklyn.location.jclouds.aws-ec2.privateKeyData"", ""myprivateKeyData"");"
128300,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,80,,"        brooklynProperties.put(""brooklyn.location.jclouds.aws-ec2.publicKeyData"", ""myPublicKeyData"");"
128301,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,81,,"        brooklynProperties.put(""brooklyn.location.jclouds.aws-ec2.privateKeyPassphrase"", ""myprivateKeyPassphrase"");"
128302,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,84,,"        assertEquals(conf.get(""privateKeyFile""), ""myprivatekeyfile"");"
128303,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,85,,"        assertEquals(conf.get(""publicKeyFile""), ""mypublickeyfile"");"
128304,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,86,,"        assertEquals(conf.get(""privateKeyData""), ""myprivateKeyData"");"
128305,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,87,,"        assertEquals(conf.get(""publicKeyData""), ""myPublicKeyData"");"
128306,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,88,,"        assertEquals(conf.get(""privateKeyPassphrase""), ""myprivateKeyPassphrase"");"
128307,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,170,,"        Assert.assertTrue(resolve(""aws-ec2"") instanceof JcloudsLocation);"
128308,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,192,,"        brooklynProperties.put(""brooklyn.location.jclouds.openstack-nova.endpoint"", ""myendpoint"");"
128309,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,203,,"        brooklynProperties.put(""brooklyn.location.jclouds.openstack-nova.foo"", ""bar"");"
128310,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,233,,"        assertJcloudsEquals(resolve(""jclouds:aws-ec2:us-east-1""), ""aws-ec2"", ""us-east-1"");"
128311,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationResolverTest.java,247,,"        assertEquals(conf.get(""region""), ""was01"");"
128312,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationTemplateOptionsCustomisersLiveTest.java,56,,"                .configure(key, ImmutableMap.of(""iamInstanceProfileName"", (Object)""helloworld""));"
128313,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationTest.java,482,,"            registerJcloudsMachineLocation(""bogus"", result);"
128314,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLocationTest.java,587,,"        Assert.assertTrue(statements.contains(""PermitRootLogin""), ""Error:\n""+statements);"
128315,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,72,,"    private File privateRsaFile = new File(Os.tidyPath(""~/.ssh/id_rsa""));"
128316,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,74,,"    private File privateRsaFileTmp = new File(privateRsaFile.getAbsoluteFile()+"".tmp"");"
128317,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,76,,"    private File publicRsaFile = new File(Os.tidyPath(""~/.ssh/id_rsa.pub""));"
128318,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,85,,"    @Test(groups = {""Live""})"
128319,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,88,,"        brooklynProperties.put(BROOKLYN_PROPERTIES_PREFIX+JcloudsLocationConfig.USER.getName(), ""myname"");"
128320,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,96,,"                .put(""address"", machine.getAddress())"
128321,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,97,,"                .put(""user"", ""myname"")"
128322,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,142,,"            brooklynProperties.put(BROOKLYN_PROPERTIES_PREFIX+JcloudsLocationConfig.PASSWORD.getName(), ""mypassword"");"
128323,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,297,,"            brooklynProperties.put(BROOKLYN_PROPERTIES_PREFIX+JcloudsLocationConfig.USER.getName(), ""root"");"
128324,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,322,,"        machine = createEc2Machine(ImmutableMap.<String,Object>of(""imageId"", AWS_EC2_UBUNTU_10_IMAGE_ID));"
128325,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,413,,"            LOG.info(""Moving {} to {}"", privateRsaFile, privateRsaFileTmp);"
128326,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,414,,"            Runtime.getRuntime().exec(""mv ""+privateRsaFile.getAbsolutePath()+"" ""+privateRsaFileTmp.getAbsolutePath());"
128327,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsLoginLiveTest.java,436,,"            LOG.info(""Restoring {} form {}"", privateRsaFile, privateRsaFileTmp);"
128328,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynPropertiesTest.java,79,,"        Map<String, Object> map = parser.getJcloudsProperties(""openstack-nova"", null, ""cloudfirst"", sampleNamedProps());"
128329,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/JcloudsSuseLiveTest.java,55,,"                JcloudsLocation.USER.getName(), ""myname""));"
128330,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,87,,"    @Test(groups=""Live"")"
128331,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,142,,"        assertTrue(origMachineXml.contains(""NodeMetadataImpl""), origMachineXml);"
128332,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,149,,"        JcloudsSshMachineLocation machine2 = (JcloudsSshMachineLocation) app2.getManagementContext().getLocationManager().getLocation(""aKEcbxKN"");"
128333,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,152,,"        String errmsg = ""loc=""+loc2.toVerboseString()+""; machine=""+machine2.toVerboseString();"
128334,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,152,,"        String errmsg = ""loc=""+loc2.toVerboseString()+""; machine=""+machine2.toVerboseString();"
128335,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,156,,"        assertEquals(machine2.getPrivateAddresses(), ImmutableSet.of(""10.144.66.5""), errmsg);"
128336,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,219,,"        JcloudsWinRmMachineLocation machine2 = (JcloudsWinRmMachineLocation) app2.getManagementContext().getLocationManager().getLocation(""KYSryzW8"");"
128337,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,225,,"        assertEquals(machine2.getAddress().getHostAddress(), ""52.28.153.46"", errmsg);"
128338,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/RebindJcloudsLocationLiveTest.java,228,,"        assertEquals(machine2.getPrivateAddresses(), ImmutableSet.of(""172.31.18.175""), errmsg);"
128339,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,56,,"    @SuppressWarnings(""rawtypes"")"
128340,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,57,,"    @Test(groups=""Live"")"
128341,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,62,,"        Map details = MutableMap.of(""id"", m1.getJcloudsId(), ""hostname"", m1.getAddress().getHostAddress(), ""user"", m1.getUser());"
128342,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,62,,"        Map details = MutableMap.of(""id"", m1.getJcloudsId(), ""hostname"", m1.getAddress().getHostAddress(), ""user"", m1.getUser());"
128343,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,63,,"        log.info(""got machine ""+m1+"" at ""+jcloudsLocation+"": ""+details+""; now trying to rebind"");"
128344,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,63,,"        log.info(""got machine ""+m1+"" at ""+jcloudsLocation+"": ""+details+""; now trying to rebind"");"
128345,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,63,,"        log.info(""got machine ""+m1+"" at ""+jcloudsLocation+"": ""+details+""; now trying to rebind"");"
128346,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,66,,"        result = execWithOutput(m1, Arrays.asList(""echo trying  m1"", ""hostname"", ""date""));"
128347,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,66,,"        result = execWithOutput(m1, Arrays.asList(""echo trying  m1"", ""hostname"", ""date""));"
128348,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,67,,"        Assert.assertTrue(result.contains(""trying m1""));"
128349,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,69,,"        log.info(""now trying rebind ""+m1);"
128350,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,71,,"        result = execWithOutput(m2, Arrays.asList(""echo trying  m2"", ""hostname"", ""date""));"
128351,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,72,,"        Assert.assertTrue(result.contains(""trying m2""));"
128352,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,131,,"            obtainMachine(MutableMap.of(""imageId"", EC2_CENTOS_IMAGE, ""waitForSshable"", 30*1000));"
128353,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,131,,"            obtainMachine(MutableMap.of(""imageId"", EC2_CENTOS_IMAGE, ""waitForSshable"", 30*1000));"
128354,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SimpleJcloudsLocationUserLoginAndConfigLiveTest.java,144,,"                ""loginUser"", ""ec2-user"","
128355,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SingleMachineProvisioningLocationJcloudsLiveTest.java,43,,"    @Test(groups=""Live"")"
128356,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/SingleMachineProvisioningLocationJcloudsLiveTest.java,50,,"        log.info(""GOT ""+m1);"
128357,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/StandaloneJcloudsLiveTest.java,142,,"            LOG.error(""Failed to start VM: ""+e, e);"
128358,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsLocationSecurityGroupCustomizerTest.java,104,,"        JcloudsLocation jcloudsLocationA = new JcloudsLocation(MutableMap.of(""deferConstruction"", true));"
128359,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsLocationSecurityGroupCustomizerTest.java,138,,"        String nodeId = ""node"";"
128360,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsLocationSecurityGroupCustomizerTest.java,142,,"        when(computeService.getContext().unwrap().getId()).thenReturn(""aws-ec2"");"
128361,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsLocationSecurityGroupCustomizerTest.java,210,,"        SecurityGroup uniqueGroup = newGroup(""unique"");"
128362,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsPortForwardingStubbedLiveTest.java,73,,"            HostAndPort result = HostAndPort.fromParts(""1.2.3.4"", nextPublicPort++);"
128363,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsPortForwardingStubbedLiveTest.java,113,,"        assertEquals(nodeCreator.created.size(), 1, ""created=""+nodeCreator.created+""; machine=""+machine);"
128364,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/networking/JcloudsPortForwardingStubbedLiveTest.java,144,,"        pfm.associate(""mypublicip"", publicHostAndPort, machine, 80);"
128365,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/provider/AbstractJcloudsLocationTest.java,150,,"        if (imageOwner != null) builder.put(""imageOwner"", imageOwner);"
128366,./TargetProjects/incubator-brooklyn/brooklyn-server/locations/jclouds/src/test/java/org/apache/brooklyn/location/jclouds/provider/CarrenzaLocationLiveTest.java,72,,"        brooklynProperties.remove(""brooklyn.jclouds.""+PROVIDER+"".image-description-regex"");"
128367,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicy.java,261,,"    @SuppressWarnings(""serial"")"
128368,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicy.java,708,,"                            LOG.error(""Error resizing: ""+e, e);"
128369,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/followthesun/FollowTheSunStrategy.java,131,,"                    LOG.info(""POLICY ""+name+"" detected ""+itemName+"" should be in location ""+highestLocation+"" on ""+optimalContainerInHighest+"" (""+highestMsgRate+"" of ""+total+"" msgs/sec), migrating"");"
128370,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/followthesun/FollowTheSunStrategy.java,131,,"                    LOG.info(""POLICY ""+name+"" detected ""+itemName+"" should be in location ""+highestLocation+"" on ""+optimalContainerInHighest+"" (""+highestMsgRate+"" of ""+total+"" msgs/sec), migrating"");"
128371,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/ha/ServiceReplacer.java,141,,"                        LOG.warn(""ServiceReplacer not running, so not acting on failure detected at ""+entity+"" (""+event.getValue()+"", child of ""+entity+"")"");"
128372,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/loadbalancing/BalancingStrategy.java,151,,"                    ""policy ""+getDataProvider().getName()+"" not balancing ""+questionedNode+""; "" +"
128373,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/loadbalancing/BalancingStrategy.java,253,,"                        ""(""+node+"", workrate {0,number,#.##}), "" +"
128374,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/main/java/org/apache/brooklyn/policy/loadbalancing/BalancingStrategy.java,350,,"                        ""policy ""+getDataProvider().getName()+"" not balancing cold node ""+questionedNode+"" "" +"
128375,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyMetricTest.java,76,,"        Asserts.succeedsContinually(ImmutableMap.of(""timeout"", SHORT_WAIT_MS), currentSizeAsserter(tc, 1));"
128376,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyMetricTest.java,96,,"    @Test(groups=""Integration"")"
128377,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyMetricTest.java,292,,"        assertEquals(tc.getDesiredSizeHistory(), ImmutableList.of(1, 2), ""desired=""+tc.getDesiredSizeHistory());"
128378,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyMetricTest.java,293,,"        assertEquals(tc.getSizeHistory(), ImmutableList.of(0, 1, 2), ""sizes=""+tc.getSizeHistory());"
128379,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyReconfigurationTest.java,69,,"        Asserts.succeedsEventually(ImmutableMap.of(""timeout"", TIMEOUT_MS), currentSizeAsserter(tc, 3));"
128380,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyTest.java,104,,"        Asserts.succeedsEventually(ImmutableMap.of(""timeout"", TIMEOUT_MS), currentSizeAsserter(resizable, targetSize));"
128381,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyTest.java,248,,"    @Test(groups=""Integration"")"
128382,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/autoscaling/AutoScalerPolicyTest.java,434,,"        Asserts.succeedsEventually(MutableMap.of(""period"", 1, ""timeout"", TIMEOUT_MS), new Runnable() {"
128383,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/enricher/HttpLatencyDetectorTest.java,77,,"    @Test(groups=""Integration"")"
128384,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/followthesun/FollowTheSunPolicySoakTest.java,87,,"    @Test(groups={""Integration""}) // takes ~2s"
128385,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ConnectionFailureDetectorTest.java,53,,"@Test(groups=""Integration"")"
128386,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ConnectionFailureDetectorTest.java,144,,"        assertEquals(events.size(), 1, ""events=""+events);"
128387,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceFailureDetectorStabilizationTest.java,102,,"    @Test(groups=""Integration"") // Because slow"
128388,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceFailureDetectorTest.java,94,,"    @Test(groups=""Integration"") // Has a 1 second wait"
128389,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceFailureDetectorTest.java,113,,"        assertEquals(events.size(), 0, ""events=""+events);"
128390,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceFailureDetectorTest.java,131,,"        ServiceProblemsLogic.updateProblemsIndicator(e1, ""test"", ""foo"");"
128391,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceFailureDetectorTest.java,131,,"        ServiceProblemsLogic.updateProblemsIndicator(e1, ""test"", ""foo"");"
128392,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceFailureDetectorTest.java,257,,"        EntityTestUtils.assertAttributeEqualsContinually(ImmutableMap.of(""timeout"", 100), e1, TestEntity.SERVICE_STATE_ACTUAL, Lifecycle.RUNNING);"
128393,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceReplacerTest.java,112,,"        e1.sensors().emit(HASensors.ENTITY_FAILED, new FailureDescriptor(e1, ""simulate failure""));"
128394,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceReplacerTest.java,121,,"                assertEquals(((TestEntity)Iterables.getOnlyElement(newMembers)).getCallHistory(), ImmutableList.of(""start""));"
128395,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/ha/ServiceRestarterTest.java,89,,"        e1.sensors().emit(HASensors.ENTITY_FAILED, new FailureDescriptor(e1, ""simulate failure""));"
128396,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/loadbalancing/ItemsInContainersGroupTest.java,61,,"                                input.getConfig(MockContainerEntity.MOCK_MEMBERSHIP) == ""ingroup"";"
128397,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/loadbalancing/LoadBalancingPolicyConcurrencyTest.java,73,,"            containers.add(newContainer(app, ""container""+i, 10, 30));"
128398,./TargetProjects/incubator-brooklyn/brooklyn-server/policy/src/test/java/org/apache/brooklyn/policy/loadbalancing/LoadBalancingPolicyConcurrencyTest.java,76,,"            newItemWithPeriodicWorkrates(app, containers.get(0), ""item""+i, 20);"
128399,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/ApplicationApi.java,103,,"            @PathParam(""application"") String application);"
128400,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/ApplicationApi.java,114,,"            @ApiResponse(code = 404, message = ""Undefined entity or location""),"
128401,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/ApplicationApi.java,115,,"            @ApiResponse(code = 412, message = ""Application already registered"")"
128402,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,61,,"        @ApiParam(name = ""yaml"", value = ""multipart/form-data file input field"")"
128403,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,81,,"            @QueryParam(""ignoreErrors"")  @DefaultValue(""false"")"
128404,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,90,,"        @ApiResponse(code = 404, message = ""Entity not found"")"
128405,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,93,,"        @ApiParam(name = ""entityId"", value = ""The ID of the entity or template to delete"", required = true)"
128406,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,103,,"        @ApiParam(name = ""symbolicName"", value = ""The symbolic name of the application or template to delete"", required = true)"
128407,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,106,,"        @ApiParam(name = ""version"", value = ""The version identifier of the application or template to delete"", required = true)"
128408,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,129,,"        @ApiParam(name = ""policyId"", value = ""The ID of the policy to delete"", required = true)"
128409,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,142,,"        @ApiParam(name = ""locationId"", value = ""The ID of the location to delete"", required = true)"
128410,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,152,,"            responseContainer = ""List"")"
128411,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,154,,"        @ApiParam(name = ""regex"", value = ""Regular expression to search for"")"
128412,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,154,,"        @ApiParam(name = ""regex"", value = ""Regular expression to search for"")"
128413,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,156,,"        @ApiParam(name = ""fragment"", value = ""Substring case-insensitive to search for"")"
128414,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,156,,"        @ApiParam(name = ""fragment"", value = ""Substring case-insensitive to search for"")"
128415,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,158,,"        @ApiParam(name = ""allVersions"", value = ""Include all versions (defaults false, only returning the best version)"")"
128416,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,158,,"        @ApiParam(name = ""allVersions"", value = ""Include all versions (defaults false, only returning the best version)"")"
128417,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/CatalogApi.java,324,,"        @ApiParam(name = ""itemId"", value = ""ID of catalog item (application, entity, policy, location)"")"
128418,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EffectorApi.java,49,,"            @ApiParam(name = ""application"", value = ""Application name"", required = true)"
128419,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EffectorApi.java,51,,"            @ApiParam(name = ""entity"", value = ""Entity name"", required = true)"
128420,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityApi.java,52,,"            @ApiParam(value = ""Application ID or name"", required = true)"
128421,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityApi.java,53,,"            @PathParam(""application"") final String application) ;"
128422,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityApi.java,60,,"            @ApiResponse(code = 404, message = ""Application or entity missing"")"
128423,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityApi.java,65,,"            @ApiParam(value = ""Entity ID or name"", required = true)"
128424,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityApi.java,66,,"            @PathParam(""entity"") String entity);"
128425,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityConfigApi.java,56,,"            @ApiParam(value = ""Application ID or name"", required = true)"
128426,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityConfigApi.java,57,,"            @PathParam(""application"") final String application,"
128427,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityConfigApi.java,58,,"            @ApiParam(value = ""Entity ID or name"", required = true)"
128428,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityConfigApi.java,59,,"            @PathParam(""entity"") final String entityToken);"
128429,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/EntityConfigApi.java,72,,"            @QueryParam(""raw"") @DefaultValue(""false"") final Boolean raw);"
128430,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,49,,"            @ApiParam(value = ""Application ID or name"", required = true)"
128431,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,50,,"            @PathParam(""application"") final String application,"
128432,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,51,,"            @ApiParam(value = ""Entity ID or name"", required = true)"
128433,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,52,,"            @PathParam(""entity"") final String entityToken);"
128434,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,91,,"            @ApiResponse(code = 404, message = ""Could not find application, entity or policy"")"
128435,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,100,,"            @ApiParam(name = ""policy"", value = ""Policy ID or name"", required = true)"
128436,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyApi.java,100,,"            @ApiParam(name = ""policy"", value = ""Policy ID or name"", required = true)"
128437,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyConfigApi.java,48,,"            @ApiParam(value = ""Application ID or name"", required = true)"
128438,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyConfigApi.java,49,,"            @PathParam(""application"") final String application,"
128439,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyConfigApi.java,50,,"            @ApiParam(value = ""Entity ID or name"", required = true)"
128440,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyConfigApi.java,51,,"            @PathParam(""entity"") final String entityToken,"
128441,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyConfigApi.java,52,,"            @ApiParam(value = ""Policy ID or name"", required = true)"
128442,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/PolicyConfigApi.java,53,,"            @PathParam(""policy"") final String policyToken);"
128443,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,57,,"            @ApiParam(value = ""Application ID or name"", required = true)"
128444,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,58,,"            @PathParam(""application"") final String application,"
128445,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,59,,"            @ApiParam(value = ""Entity ID or name"", required = true)"
128446,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,60,,"            @PathParam(""entity"") final String entityToken);"
128447,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,74,,"    @Path(""/{sensor}"")"
128448,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,77,,"            @ApiResponse(code = 404, message = ""Could not find application, entity or sensor"")"
128449,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,84,,"            @ApiParam(value = ""Sensor name"", required = true)"
128450,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/SensorApi.java,85,,"            @PathParam(""sensor"") String sensorName,"
128451,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/UsageApi.java,58,,"                    name = ""start"","
128452,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/UsageApi.java,64,,"                    name = ""end"","
128453,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/UsageApi.java,65,,"                    value = ""timestamp of end marker for usage reporting in format UTC millis or yyyy-MM-dd'T'HH:mm:ssZ"","
128454,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/api/UsageApi.java,81,,"                    name = ""application"","
128455,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-api/src/main/java/org/apache/brooklyn/rest/domain/ApiError.java,80,,"            this.message = checkNotNull(message, ""message"");"
128456,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-client/src/test/java/org/apache/brooklyn/rest/client/ApplicationResourceIntegrationTest.java,86,,"    @BeforeClass(groups = ""Integration"")"
128457,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-client/src/test/java/org/apache/brooklyn/rest/client/ApplicationResourceIntegrationTest.java,112,,"        assertServiceStateEventually(""redis-app"", entityId, Lifecycle.RUNNING, LONG_WAIT);"
128458,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/resources/CatalogResource.java,142,,"            throw WebResourceUtils.unauthorized(""User '%s' is not authorized to modify catalog"","
128459,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/resources/CatalogResource.java,153,,"        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.MODIFY_CATALOG_ITEM, StringAndArgument.of(entityId, ""delete""))) {"
128460,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/resources/CatalogResource.java,243,,"        @SuppressWarnings(""unchecked"")"
128461,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/resources/CatalogResource.java,256,,"            throw WebResourceUtils.unauthorized(""User '%s' is not authorized to see catalog entry"","
128462,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/resources/SensorResource.java,53,,"    @SuppressWarnings(""rawtypes"")"
128463,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/resources/ServerResource.java,111,,"            throw WebResourceUtils.unauthorized(""User '%s' is not authorized for this operation"", Entitlements.getEntitlementContext().user());"
128464,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/transform/EntityTransformer.java,60,,"        String entityUri = applicationUri + ""/entities/"" + entity.getId();"
128465,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/transform/LocationTransformer.java,83,,"                ImmutableMap.of(""self"", URI.create(""/v1/locations/"" + id)));"
128466,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/main/java/org/apache/brooklyn/rest/transform/PolicyTransformer.java,46,,"                .put(""self"", URI.create(entityUri + ""/policies/"" + policy.getId()))"
128467,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/HaHotCheckTest.java,67,,"        testResourceFetch(""/ha/method/ok"", 200);"
128468,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/HaHotCheckTest.java,68,,"        testResourceFetch(""/ha/method/fail"", 200);"
128469,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/HaHotCheckTest.java,69,,"        testResourceFetch(""/ha/class/fail"", 200);"
128470,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/HaMasterCheckFilterTest.java,73,,"    @Test(groups = ""Integration"")"
128471,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApidocResourceTest.java,113,,"        String data = resource(""/v1/apidoc/swagger.json"").get(String.class);"
128472,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApidocResourceTest.java,133,,"        assertEquals(operations.size(), 2, ""ops=""+operations);"
128473,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceIntegrationTest.java,61,,"    @Test(groups=""Integration"")"
128474,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,116,,"                  new EntitySpec(""simple-ent"", RestMockSimpleEntity.class.getName()),"
128475,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,117,,"                  new EntitySpec(""simple-group"", NameMatcherGroup.class.getName(), ImmutableMap.of(""namematchergroup.regex"", ""simple-ent""))"
128476,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,119,,"          .locations(ImmutableSet.of(""localhost""))"
128477,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,182,,"        assertTrue(response.getStatus() / 100 == 2, ""response is "" + response);"
128478,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,190,,"    @Test(dependsOnMethods = { ""testDeployApplication"", ""testLocatedLocation"" })"
128479,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,190,,"    @Test(dependsOnMethods = { ""testDeployApplication"", ""testLocatedLocation"" })"
128480,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,235,,"        ClientResponse response = client().resource(""/v1/applications"")"
128481,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,236,,"                .entity(yaml, ""application/x-yaml"")"
128482,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,312,,"        Set<EntitySummary> children = client().resource(entity.getLinks().get(""children""))"
128483,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,357,,"            Object name = ((Map) appI).get(""name"");"
128484,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/ApplicationResourceTest.java,465,,"        assertEquals(result, ""foo4"");"
128485,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,89,,"                ""brooklyn.catalog:\n""+"
128486,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,90,,"                ""  id: "" + symbolicName + ""\n""+"
128487,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,91,,"                ""  name: My Catalog App\n""+"
128488,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,92,,"                ""  description: My description\n""+"
128489,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,94,,"                ""  version: "" + TEST_VERSION + ""\n""+"
128490,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,98,,"                ""services:\n""+"
128491,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,101,,"        ClientResponse response = client().resource(""/v1/catalog"")"
128492,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,106,,"        CatalogEntitySummary entityItem = client().resource(""/v1/catalog/entities/""+symbolicName + ""/"" + TEST_VERSION)"
128493,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,175,,"        List<CatalogEntitySummary> entities = client().resource(""/v1/catalog/entities"")"
128494,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,191,,"                .queryParam(""fragment"", ""brOOkLynENTITYmiRrOr"").get(new GenericType<List<CatalogEntitySummary>>() {});"
128495,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,401,,"        addTestCatalogItem(symbolicName, ""template"", TEST_VERSION, serviceType);"
128496,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,402,,"        addTestCatalogItem(symbolicName, ""template"", ""2.0"", serviceType);"
128497,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,404,,"            List<CatalogEntitySummary> applications = client().resource(""/v1/catalog/applications"")"
128498,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,405,,"                    .queryParam(""fragment"", symbolicName).queryParam(""allVersions"", ""true"").get(new GenericType<List<CatalogEntitySummary>>() {});"
128499,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,405,,"                    .queryParam(""fragment"", symbolicName).queryParam(""allVersions"", ""true"").get(new GenericType<List<CatalogEntitySummary>>() {});"
128500,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/CatalogResourceTest.java,414,,"                    .queryParam(""fragment"", ""basicapp"").queryParam(""allVersions"", ""true"").get(new GenericType<List<CatalogEntitySummary>>() {});"
128501,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/DescendantsTest.java,75,,"        descs = client().resource(""/v1/applications/""+application.getApplicationId()+""/descendants"")"
128502,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/DescendantsTest.java,75,,"        descs = client().resource(""/v1/applications/""+application.getApplicationId()+""/descendants"")"
128503,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/DescendantsTest.java,81,,"            + ""?typeRegex=""+StringEscapes.escapeUrlParam("".*\\.RestMockSimpleEntity""))"
128504,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/DescendantsTest.java,81,,"            + ""?typeRegex=""+StringEscapes.escapeUrlParam("".*\\.RestMockSimpleEntity""))"
128505,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/EntityConfigResourceTest.java,69,,"                  entities(ImmutableSet.of(new EntitySpec(""simple-ent"", RestMockSimpleEntity.class.getName(), ImmutableMap.of(""install.version"", ""1.0.0""))))."
128506,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/EntityResourceTest.java,89,,"        entity.tags().addTag(""foo"");"
128507,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/EntityResourceTest.java,161,,"        Assert.assertFalse(raw.contains(entity.getManagementContext().getManagementNodeId()), ""unexpected app tag, includes too much mgmt info: ""+raw);"
128508,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/LocationResourceTest.java,77,,"        assertEquals(location.getSpec(), ""brooklyn.catalog:""+legacyLocationName+"":""+legacyLocationVersion);"
128509,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/LocationResourceTest.java,78,,"        assertTrue(addedLegacyLocationUri.toString().startsWith(""/v1/locations/""));"
128510,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/LocationResourceTest.java,87,,"    @SuppressWarnings(""deprecation"")"
128511,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/PolicyResourceTest.java,103,,"            PolicyConfigSummary summary = client().resource(ENDPOINT + policyId + ""/config/"" + invalidConfigName)"
128512,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/SensorResourceTest.java,121,,"                assertEquals(currentState.get(sensor), ""12345 frogs"");"
128513,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/UsageResourceTest.java,105,,"        response = client().resource(""/v1/usage/applications?start=""+0+""&end=""+(preStart.getTime().getTime()-1)).get(ClientResponse.class);"
128514,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/UsageResourceTest.java,108,,"        assertTrue(Iterables.isEmpty(usages), ""usages=""+usages);"
128515,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/resources/UsageResourceTest.java,164,,"        ClientResponse response = client().resource(""/v1/usage/applications/"" + appId).get(ClientResponse.class);"
128516,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/util/BrooklynRestResourceUtilsTest.java,71,,"                .name(""myname"")"
128517,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/util/BrooklynRestResourceUtilsTest.java,100,,"    @SuppressWarnings(""deprecation"")"
128518,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/util/json/BrooklynJacksonSerializerTest.java,194,,"        Assert.assertFalse(result.toString().contains(""error""), ""Shouldn't have had an error, instead got: ""+result);"
128519,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/util/json/BrooklynJacksonSerializerTest.java,194,,"        Assert.assertFalse(result.toString().contains(""error""), ""Shouldn't have had an error, instead got: ""+result);"
128520,./TargetProjects/incubator-brooklyn/brooklyn-server/rest/rest-server/src/test/java/org/apache/brooklyn/rest/util/json/BrooklynJacksonSerializerTest.java,303,,"            String content = get(client, configUri, ImmutableMap.of(""Accept"", MediaType.TEXT_PLAIN));"
128521,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,108,,"                    .put(""entities"", ItemDescriptors.toItemDescriptors(entityTypes, headingsOnly, ""name""))"
128522,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,108,,"                    .put(""entities"", ItemDescriptors.toItemDescriptors(entityTypes, headingsOnly, ""name""))"
128523,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,109,,"                    .put(""policies"", ItemDescriptors.toItemDescriptors(policyTypes, headingsOnly, ""name""))"
128524,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,110,,"                    .put(""enrichers"", ItemDescriptors.toItemDescriptors(enricherTypes, headingsOnly, ""name""))"
128525,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,111,,"                    .put(""locations"", ItemDescriptors.toItemDescriptors(locationTypes, headingsOnly, ""type""))"
128526,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,111,,"                    .put(""locations"", ItemDescriptors.toItemDescriptors(locationTypes, headingsOnly, ""type""))"
128527,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/main/java/org/apache/brooklyn/cli/ItemLister.java,154,,"                    Files.write(entityHtml, new File(Os.mergePaths(outputFolder, ""entities"", type + "".html"")), Charsets.UTF_8);"
128528,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,118,,"        assertTrue(appBuilder instanceof ApplicationBuilder, ""app=""+appBuilder);"
128529,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,137,,"        assertEquals(entities.size(), 1, ""entities=""+entities);"
128530,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,239,,"        BrooklynCommand command = buildCli().parse(""launch"", "
128531,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,240,,"                ""--app"", ""my.App"", "
128532,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,241,,"                ""--location"", ""localhost"","
128533,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,241,,"                ""--location"", ""localhost"","
128534,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,244,,"                ""--noConsole"", ""--noConsoleSecurity"", ""--stopOnKeyPress"", "
128535,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,308,,"        assertTrue(command instanceof HelpCommand, ""Command is: ""+command);"
128536,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,401,,"        BrooklynCommand command = cli.parse(""generate-password"", ""--user"", ""myname"");"
128537,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,401,,"        BrooklynCommand command = cli.parse(""generate-password"", ""--user"", ""myname"");"
128538,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,401,,"        BrooklynCommand command = cli.parse(""generate-password"", ""--user"", ""myname"");"
128539,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,445,,"        List<String> stdoutLines = runCommand(ImmutableList.of(""info""), """");"
128540,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CliTest.java,448,,"            assertTrue(stdoutLines.contains(line), ""out=""+stdoutLines);"
128541,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,64,,"    @Test(groups={""Live"", ""Live-sanity""})"
128542,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,64,,"    @Test(groups={""Live"", ""Live-sanity""})"
128543,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,66,,"        call(""cloud-compute"", ""list-instances"", ""--location"", ""jclouds:aws-ec2:eu-west-1"");"
128544,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,66,,"        call(""cloud-compute"", ""list-instances"", ""--location"", ""jclouds:aws-ec2:eu-west-1"");"
128545,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,68,,"        String errmsg = ""stdout=""+stdout+""; stderr=""+stderr;"
128546,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,68,,"        String errmsg = ""stdout=""+stdout+""; stderr=""+stderr;"
128547,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,78,,"        call(""cloud-compute"", ""list-images"", ""--location"", ""jclouds:softlayer:ams01"");"
128548,./TargetProjects/incubator-brooklyn/brooklyn-server/server-cli/src/test/java/org/apache/brooklyn/cli/CloudExplorerLiveTest.java,90,,"        assertTrue(imageLines.get(0).matches("".*id=.*providerId=.*os=.*description=.*""), ""line=""+imageLines.get(0)+""; ""+errmsg);"
128549,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeSshDriver.java,348,,"        newScript(ImmutableMap.of(""usePidFile"", "
128550,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/chef/ChefAttributeFeed.java,139,,"        @SuppressWarnings(""unchecked"")"
128551,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java,195,,"            if (Strings.isNonBlank(primary)) runList = ImmutableList.of(primary+""::""+""start"");"
128552,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java,256,,"            throw new IllegalStateException(""The process for ""+entity()+"" appears not to be running (pid file ""+getPidFile()+"")"");"
128553,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/java/JavaAppUtils.java,143,,"                        .attributeName(""HeapMemoryUsage"")"
128554,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/java/VanillaJavaAppSshDriver.java,99,,"            ArchiveUtils.deploy(MutableMap.<String, Object>of(), entry, machine, getRunDir(), Os.mergePaths(getRunDir(), ""lib""), destFile);"
128555,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/machine/pool/ServerPoolLocationResolver.java,105,,"            throw new IllegalArgumentException(""Invalid location '""+spec+""'; illegal args ""+illegalArgs+""; acceptable args are ""+ACCEPTABLE_ARGS);"
128556,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/AbstractSoftwareProcessSshDriver.java,585,,"                            BashCommands.sudoAsUser(processOwner, ""test -f ""+pidFile) + "" || exit 1"","
128557,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/AbstractSoftwareProcessSshDriver.java,585,,"                            BashCommands.sudoAsUser(processOwner, ""test -f ""+pidFile) + "" || exit 1"","
128558,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/AbstractSoftwareProcessSshDriver.java,586,,"                            ""ps -p $("" + BashCommands.sudoAsUser(processOwner, ""cat ""+pidFile) + "")"""
128559,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/AbstractSoftwareProcessSshDriver.java,600,,"                            ""test -n \""$PID\"" || exit 0"","
128560,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/AbstractSoftwareProcessSshDriver.java,602,,"                            BashCommands.sudoAsUser(processOwner, ""kill -9 $PID""),"
128561,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/AbstractSoftwareProcessSshDriver.java,603,,"                            BashCommands.sudoAsUser(processOwner, ""rm -f ""+pidFile)"
128562,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/SoftwareProcess.java,174,,"    @SuppressWarnings(""serial"")"
128563,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/SoftwareProcessDriverLifecycleEffectorTasks.java,60,,"            log.debug(""restart of ""+entity()+"" requested be applied at machine level"");"
128564,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/MachineLifecycleEffectorTasks.java,895,,"            log.debug(""No machine decommissioning necessary for ""+entity()+"" - no locations"");"
128565,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/ScriptHelper.java,69,,"    @SuppressWarnings(""rawtypes"")"
128566,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/main/java/org/apache/brooklyn/entity/software/base/lifecycle/ScriptHelper.java,91,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
128567,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/AbstractEc2LiveTest.java,78,,"        brooklynProperties.remove(""brooklyn.jclouds.""+PROVIDER+"".image-description-regex"");"
128568,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/AbstractEc2LiveTest.java,93,,"    @Test(groups = {""Live""})"
128569,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/AbstractEc2LiveTest.java,96,,"        runTest(ImmutableMap.of(""imageId"", ""us-east-1/ami-5e12dc36"", ""loginUser"", ""admin"", ""hardwareId"", SMALL_HARDWARE_ID));"
128570,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/AbstractEc2LiveTest.java,96,,"        runTest(ImmutableMap.of(""imageId"", ""us-east-1/ami-5e12dc36"", ""loginUser"", ""admin"", ""hardwareId"", SMALL_HARDWARE_ID));"
128571,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/AbstractEc2LiveTest.java,96,,"        runTest(ImmutableMap.of(""imageId"", ""us-east-1/ami-5e12dc36"", ""loginUser"", ""admin"", ""hardwareId"", SMALL_HARDWARE_ID));"
128572,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,121,,"        pseudoBrooklynPropertiesFile = Os.newTempFile(""brooklynnode-test"", "".properties"");"
128573,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,121,,"        pseudoBrooklynPropertiesFile = Os.newTempFile(""brooklynnode-test"", "".properties"");"
128574,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,171,,"    @Test(groups=""Integration"")"
128575,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,175,,"        log.info(""started ""+app+"" containing ""+brooklynNode+"" for ""+JavaClassNames.niceClassAndMethod());"
128576,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,175,,"        log.info(""started ""+app+"" containing ""+brooklynNode+"" for ""+JavaClassNames.niceClassAndMethod());"
128577,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,175,,"        log.info(""started ""+app+"" containing ""+brooklynNode+"" for ""+JavaClassNames.niceClassAndMethod());"
128578,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,187,,"                .configure(BrooklynNode.BROOKLYN_GLOBAL_PROPERTIES_CONTENTS, ""abc=def""));"
128579,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,274,,"        File destDir = new File(new File(tempDir, ""lib""), ""dropins"");"
128580,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,437,,"        String apps = HttpTestUtils.getContent(webConsoleUri.toString()+""/v1/applications"");"
128581,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/BrooklynNodeIntegrationTest.java,438,,"        List<String> appType = parseJsonList(apps, ImmutableList.of(""spec"", ""type""), String.class);"
128582,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/CallbackEntityHttpClient.java,70,,"        throw new IllegalStateException(""Method call not expected"");"
128583,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/brooklynnode/SelectMasterEffectorTest.java,191,,"                    checkRequest(input, HttpPost.METHOD_NAME, ""/v1/server/ha/priority"", ""priority"", ""1"");"
128584,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/chef/mysql/TypedToyMySqlEntityChef.java,37,,"        config().set(CHEF_COOKBOOK_PRIMARY_NAME, ""mysql"");"
128585,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/EntityPollingTest.java,148,,"        jmxService = new JmxService(""localhost"", 40123);"
128586,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/EntityPollingTest.java,149,,"        jmxService.registerMBean(ImmutableMap.of(attributeName, ""myval""), objectName);"
128587,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaOptsTest.java,84,,"            .configure(""main"", ""my.Main"").configure(""useJmx"", false));"
128588,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaOptsTest.java,84,,"            .configure(""main"", ""my.Main"").configure(""useJmx"", false));"
128589,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaOptsTest.java,84,,"            .configure(""main"", ""my.Main"").configure(""useJmx"", false));"
128590,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaOptsTest.java,89,,"        List<String> expectedCmds = ImmutableList.of(String.format(""java $JAVA_OPTS -cp \""%1$s/lib\"" my.Main  >> %1$s/console 2>&1 </dev/null &"", runDir));"
128591,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaOptsTest.java,116,,"        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(""JAVA_OPTS"", expectedJavaOpts);"
128592,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaSoftwareProcessSshDriverIntegrationTest.java,76,,"    @Test(groups = ""Integration"")"
128593,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/JavaSoftwareProcessSshDriverIntegrationTest.java,102,,"        String dir = Os.mergePathsUnix(Os.tmp(), ""/brooklyn-test-""+Strings.makeRandomId(4));"
128594,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/VanillaJavaAppTest.java,109,,"            .configure(""main"", ""my.Main"").configure(""classpath"", ImmutableList.of(""c1"", ""c2""))"
128595,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/VanillaJavaAppTest.java,109,,"            .configure(""main"", ""my.Main"").configure(""classpath"", ImmutableList.of(""c1"", ""c2""))"
128596,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/VanillaJavaAppTest.java,110,,"            .configure(""args"", ImmutableList.of(""a1"", ""a2"")));"
128597,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/VanillaJavaAppTest.java,117,,"    @Test(groups={""WIP"", ""Integration""})"
128598,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/java/VanillaJavaAppTest.java,148,,"        Asserts.succeedsEventually(MutableMap.of(""timeout"", TIMEOUT_MS), new Runnable() {"
128599,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/machine/SetHostnameCustomizerTest.java,65,,"                .configure(""address"", ""4.3.2.1""));"
128600,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/machine/SetHostnameCustomizerTest.java,65,,"                .configure(""address"", ""4.3.2.1""));"
128601,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SameServerDriverLifecycleEffectorTasksTest.java,71,,"                ""expected="" + Iterables.toString(expected) + "", actual="" + Iterables.toString(requiredPorts));"
128602,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SameServerDriverLifecycleEffectorTasksTest.java,71,,"                ""expected="" + Iterables.toString(expected) + "", actual="" + Iterables.toString(requiredPorts));"
128603,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareEffectorTest.java,86,,"    @Test(groups=""Integration"")"
128604,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessEntityLatchTest.java,96,,"        runTestLatchBlocks(SoftwareProcess.INSTALL_RESOURCES_LATCH, ImmutableList.of(""setup""));"
128605,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessEntityLatchTest.java,101,,"        runTestLatchBlocks(SoftwareProcess.INSTALL_LATCH, ImmutableList.of(""setup"", ""copyInstallResources""));"
128606,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessEntityLatchTest.java,106,,"        runTestLatchBlocks(SoftwareProcess.CUSTOMIZE_LATCH, ImmutableList.of(""setup"", ""copyInstallResources"", ""install""));"
128607,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessEntityTest.java,238,,"        Assert.assertEquals(d.events, ImmutableList.of(""setup"", ""copyInstallResources"", ""install"", ""customize"", ""copyRuntimeResources"", ""launch"", ""stop""));"
128608,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessSshDriverIntegrationTest.java,93,,"    @Test(groups=""Integration"")"
128609,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessSshDriverIntegrationTest.java,119,,"        assertTrue(installDir.startsWith(""/tmp/brooklyn-""+Os.user()+""/installs/""), ""installed in ""+installDir);"
128610,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessSshDriverIntegrationTest.java,259,,"                .configure(SoftwareProcess.INSTALL_FILES, MutableMap.of(""classpath://org/apache/brooklyn/entity/software/base/frogs.txt"", ""frogs.txt""))"
128611,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessSubclassTest.java,76,,"            callHistory.add(""doStart"");"
128612,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/SoftwareProcessSubclassTest.java,82,,"            callHistory.add(""doStop"");"
128613,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessAndChildrenIntegrationTest.java,80,,"    @Test(groups = ""Integration"")"
128614,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessAndChildrenIntegrationTest.java,87,,"        Assert.assertTrue(startTime >= PARENT_TASK_SLEEP_LENGTH_SECS*1000 - EARLY_RETURN_GRACE_MS, ""startTime=""+Time.makeTimeStringRounded(startTime));"
128615,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,58,,"    @Test(groups = ""Integration"")"
128616,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,62,,"                .configure(VanillaSoftwareProcess.INSTALL_COMMAND, ""echo installCommand >> ""+runRecord.toAbsolutePath())"
128617,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,75,,"        assertEquals(lines.get(0), ""preInstallCommand"", ""lines=""+lines);"
128618,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,76,,"        assertEquals(lines.get(1), ""installCommand"", ""lines=""+lines);"
128619,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,95,,"        Files.write(downloadArtifact, ""my download artifact"".getBytes());"
128620,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,101,,"                    .configure(VanillaSoftwareProcess.CHECK_RUNNING_COMMAND, ""echo running""));"
128621,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,107,,"            Path installCompletionMarker = FileSystems.getDefault().getPath(entity.getAttribute(VanillaSoftwareProcess.INSTALL_DIR), ""BROOKLYN"");"
128622,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,108,,"            assertTrue(Files.isRegularFile(installCompletionMarker), ""file=""+installCompletionMarker);"
128623,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessIntegrationTest.java,119,,"                .configure(VanillaSoftwareProcess.LAUNCH_COMMAND, ""echo launching"")"
128624,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaSoftwareProcessStreamsIntegrationTest.java,45,,"                .configure(VanillaSoftwareProcess.PRE_INSTALL_COMMAND, ""echo "" + cmds.get(""pre-install-command""))"
128625,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,102,,"    @Test(groups = ""Live"")"
128626,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,152,,"        runExecNonZeroExitCode(""pre-install-command"");"
128627,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,157,,"        runExecNonZeroExitCode(""install-command"");"
128628,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,162,,"        runExecNonZeroExitCode(""post-install-command"");"
128629,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,167,,"        runExecNonZeroExitCode(""customize-command"");"
128630,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,172,,"        runExecNonZeroExitCode(""pre-launch-command"");"
128631,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,177,,"        runExecNonZeroExitCode(""launch-command"");"
128632,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,182,,"        runExecNonZeroExitCode(""is-running-command"");"
128633,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,187,,"        runExecNonZeroExitCode(""stop-command"");"
128634,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,249,,"                if (!(e.toString().contains(""invalid result"") && e.toString().contains(""for ""+phase))) throw e;"
128635,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmExitStatusLiveTest.java,249,,"                if (!(e.toString().contains(""invalid result"") && e.toString().contains(""for ""+phase))) throw e;"
128636,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/VanillaWindowsProcessWinrmStreamsLiveTest.java,93,,"                .configure(VanillaSoftwareProcess.PRE_INSTALL_COMMAND, ""echo "" + getCommands().get(""winrm: pre-install-command.*""))"
128637,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/lifecycle/MyEntityImpl.java,95,,"            newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)"
128638,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/lifecycle/NaiveScriptRunnerTest.java,96,,"        ScriptHelper h = new ScriptHelper(newMockRunner(101), ""mock"");"
128639,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/lifecycle/NaiveScriptRunnerTest.java,126,,"    @Test(groups = ""Integration"")"
128640,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/lifecycle/NaiveScriptRunnerTest.java,149,,"                    ""\nSTDERR:\n""+script.getResultStderr());"
128641,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/core/mgmt/usage/ApplicationUsageTrackingTest.java,99,,"                assertEquals(events.size(), 2, ""events=""+events); // expect STARTING and RUNNING"
128642,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/core/mgmt/usage/LocationUsageTrackingTest.java,84,,"                assertEquals(events.size(), 1, ""events=""+events);"
128643,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/group/DynamicClusterWithAvailabilityZonesMultiLocationTest.java,77,,"        subLoc1 = app.newLocalhostProvisioningLocation(ImmutableMap.of(""displayName"", ""loc1""));"
128644,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/group/DynamicClusterWithAvailabilityZonesMultiLocationTest.java,78,,"        subLoc2 = app.newLocalhostProvisioningLocation(ImmutableMap.of(""displayName"", ""loc2""));"
128645,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,130,,"    @Test(groups=""Live"")"
128646,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,150,,"        String msg = ""statusCode=""+response.getStatusCode()+""; out=""+response.getStdOut()+""; err=""+response.getStdErr();"
128647,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,150,,"        String msg = ""statusCode=""+response.getStatusCode()+""; out=""+response.getStdOut()+""; err=""+response.getStdErr();"
128648,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,150,,"        String msg = ""statusCode=""+response.getStatusCode()+""; out=""+response.getStdOut()+""; err=""+response.getStdErr();"
128649,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,173,,"        assertExecSucceeds(""echo myline"", ""myline"", """");"
128650,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,181,,"    @Test(groups={""Live"", ""WIP""}, enabled=false)"
128651,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,183,,"        assertExecSucceeds(""echo first"" + ""\r\n"" + ""echo second"", ""first""+""\r\n""+""second"", """");"
128652,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,183,,"        assertExecSucceeds(""echo first"" + ""\r\n"" + ""echo second"", ""first""+""\r\n""+""second"", """");"
128653,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,183,,"        assertExecSucceeds(""echo first"" + ""\r\n"" + ""echo second"", ""first""+""\r\n""+""second"", """");"
128654,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,224,,"        String script = ""EXIT /B 0"";"
128655,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,225,,"        String scriptPath = ""C:\\myscript-""+Identifiers.makeRandomId(4)+"".bat"";"
128656,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,225,,"        String scriptPath = ""C:\\myscript-""+Identifiers.makeRandomId(4)+"".bat"";"
128657,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,278,,"                ""Write-Host myline"", "
128658,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,280,,"        String scriptPath = ""C:\\myscript-""+Identifiers.makeRandomId(4)+"".ps1"";"
128659,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,293,,"                ""exit 1"");"
128660,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/location/WinRmMachineLocationLiveTest.java,346,,"        assertExecPsSucceeds(""& '""+scriptPath+""'"", null, """");"
128661,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/entity/software/base/test/mysql/DynamicToyMySqlEntityBuilder.java,111,,"                            ""cd ""+dir(entity),"
128662,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxFeedTest.java,181,,"                new String[] {""myint"", ""mystring"", ""mybool""},    // item names"
128663,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxFeedTest.java,181,,"                new String[] {""myint"", ""mystring"", ""mybool""},    // item names"
128664,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxFeedTest.java,181,,"                new String[] {""myint"", ""mystring"", ""mybool""},    // item names"
128665,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxFeedTest.java,237,,"        Asserts.succeedsEventually(ImmutableMap.of(""timeout"", TIMEOUT_MS), new Runnable() {"
128666,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxHelperTest.java,94,,"        GeneralisedDynamicMBean mbean = jmxService.registerMBean(MutableMap.of(""myattr"", ""myval""), objectName);"
128667,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxHelperTest.java,94,,"        GeneralisedDynamicMBean mbean = jmxService.registerMBean(MutableMap.of(""myattr"", ""myval""), objectName);"
128668,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxHelperTest.java,108,,"        jmxHelper.setAttribute(jmxObjectName, ""myattr"", ""abc"");"
128669,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxValueFunctionsTest.java,46,,"                new String[] {""key1"", ""key2""}, "
128670,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxValueFunctionsTest.java,46,,"                new String[] {""key1"", ""key2""}, "
128671,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxValueFunctionsTest.java,75,,"                ""key1"", ""row1.val1"","
128672,./TargetProjects/incubator-brooklyn/brooklyn-server/software/base/src/test/java/org/apache/brooklyn/feed/jmx/JmxValueFunctionsTest.java,78,,"                ""key1"", ""row2.val1"","
128673,./TargetProjects/incubator-brooklyn/brooklyn-server/software/winrm/src/main/java/org/apache/brooklyn/util/core/internal/winrm/winrm4j/Winrm4jTool.java,152,,"                            + (logCredentials ? ""password="" + password : """")"
128674,./TargetProjects/incubator-brooklyn/brooklyn-server/storage/hazelcast/src/test/java/org/apache/brooklyn/storage/impl/hazelcast/HazelcastStorageTest.java,73,,"        map.put(""foo"", ""bar"");"
128675,./TargetProjects/incubator-brooklyn/brooklyn-server/storage/hazelcast/src/test/java/org/apache/brooklyn/storage/impl/hazelcast/HazelcastStorageTest.java,73,,"        map.put(""foo"", ""bar"");"
128676,./TargetProjects/incubator-brooklyn/brooklyn-server/storage/hazelcast/src/test/java/org/apache/brooklyn/storage/impl/hazelcast/HazelcastStorageTest.java,79,,"        Reference<String> ref = storage.getReference(""someReference"");"
128677,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/main/java/org/apache/brooklyn/test/framework/TestFrameworkAssertions.java,221,,"            null != target ? target : ""null"","
128678,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/InfrastructureDeploymentTestCaseTest.java,187,,"            fail(""Should have thrown execption"");"
128679,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/SimpleShellCommandIntegrationTest.java,67,,"            { ""pwd"", ""pwd.sh"", Boolean.FALSE },"
128680,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/SimpleShellCommandIntegrationTest.java,74,,"    @Test(groups= ""Integration"", dataProvider = ""shouldInsistOnJustOneOfCommandAndScript"")"
128681,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/SimpleShellCommandIntegrationTest.java,126,,"            .withFailMessage(""Service should be up"");"
128682,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/SimpleShellCommandIntegrationTest.java,128,,"            .withFailMessage(""Service should be marked running"");"
128683,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,53,,"                {""some-sensor-value"", Arrays.asList(ImmutableMap.of(""isEqualTo"", ""some-sensor-value""))},"
128684,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,53,,"                {""some-sensor-value"", Arrays.asList(ImmutableMap.of(""isEqualTo"", ""some-sensor-value""))},"
128685,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,55,,"                {""some-sensor-value"", Arrays.asList(ImmutableMap.of(""equals"", ""some-sensor-value""))},"
128686,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,57,,"                {null, Arrays.asList(ImmutableMap.of(""isNull"", Boolean.TRUE))},"
128687,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,58,,"                {""some-non-null-value"", Arrays.asList(ImmutableMap.of(""isNull"", Boolean.FALSE))},"
128688,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,59,,"                {null, Arrays.asList(ImmutableMap.of(""notNull"", Boolean.FALSE))},"
128689,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,61,,"                {""<html><body><h1>Im a H1 tag!</h1></body></html>"", Arrays.asList(ImmutableMap.of(""contains"", ""Im a H1 tag!""))},"
128690,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,63,,"                {"""", Arrays.asList(ImmutableMap.of(""isEmpty"", Boolean.TRUE))},"
128691,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,65,,"                {null, Arrays.asList(ImmutableMap.of(""notEmpty"", Boolean.FALSE))},"
128692,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestFrameworkAssertionsTest.java,67,,"                {""true"", Arrays.asList(ImmutableMap.of(""hasTruthValue"", Boolean.TRUE))},"
128693,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestSensorTest.java,83,,"                .configure(TestSensor.ASSERTIONS, newMapAssertion(""equals"", true)));"
128694,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestSensorTest.java,146,,"            assertThat(assertionError).isNotNull().as(""An assertion error should have been thrown"");"
128695,./TargetProjects/incubator-brooklyn/brooklyn-server/test-framework/src/test/java/org/apache/brooklyn/test/framework/TestSensorTest.java,208,,"                .configure(TestSensor.ASSERTIONS, newListAssertion(""matches"", String.format("".*%s.*"", time))));"
128696,./TargetProjects/incubator-brooklyn/brooklyn-server/test-support/src/main/java/org/apache/brooklyn/test/HttpTestUtils.java,222,,"                    LOG.warn(""CONTENTS OF URL ""+url+"" MISSING TEXT: ""+text+""\n""+contents);"
128697,./TargetProjects/incubator-brooklyn/brooklyn-server/test-support/src/main/java/org/apache/brooklyn/test/HttpTestUtils.java,223,,"                    Assert.fail(""URL ""+url+"" does not contain text: ""+text);"
128698,./TargetProjects/incubator-brooklyn/brooklyn-server/test-support/src/main/java/org/apache/brooklyn/test/performance/PerformanceTestDescriptor.java,74,,"        if (sealed) throw new IllegalStateException(""Should not modify after sealed (e.g. after use)"");"
128699,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/test/Asserts.java,194,,"                fail(""Collections not equal: expected: "" + expected + "" and actual: "" + actual);"
128700,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/test/Asserts.java,760,,"        eventually(supplier, predicate, toDuration(flags.get(""timeout""), null), toDuration(flags.get(""period""), null), errMsg);"
128701,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/test/Asserts.java,760,,"        eventually(supplier, predicate, toDuration(flags.get(""timeout""), null), toDuration(flags.get(""period""), null), errMsg);"
128702,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/test/Asserts.java,1100,,"        if (input==null) fail(""Input is null."");"
128703,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/http/HttpAsserts.java,190,,"                    LOG.warn(""CONTENTS OF URL ""+url+"" MISSING TEXT: ""+text+""\n""+contents);"
128704,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/http/HttpAsserts.java,191,,"                    Asserts.fail(""URL ""+url+"" does not contain text: ""+text);"
128705,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/javalang/Reflections.java,122,,"            throw new ReflectionAccessException(""Failed to create instance of class '"" + classname + ""' using class loader "" + classLoader + "": "" + Exceptions.collapseText(e), e);"
128706,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/javalang/Reflections.java,142,,"    @SuppressWarnings(""unchecked"")"
128707,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/javalang/Reflections.java,218,,"            throw new ReflectionAccessException(""Failed to load constructor of class '"" + clazz + "" with argument types "" + Arrays.asList(argTypes) + "": "" + Exceptions.collapseText(e), e);"
128708,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/javalang/Reflections.java,325,,"            throw new ReflectionNotFoundException(""Failed to invoke method "" + methodName + "" on class "" + clazz + "" with argument types "" + Arrays.asList(argTypes) + "", using class loader "" + clazz.getClassLoader() + "": "" + Exceptions.collapseText(e), e);"
128709,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/javalang/Reflections.java,345,,"            throw new ReflectionAccessException(""Failed to invoke method '"" + methodName + "" on class "" + clazz + "": "" + Exceptions.collapseText(e), e);"
128710,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/javalang/Reflections.java,360,,"            throw new ReflectionAccessException(""Failed to invoke method '"" + method.toGenericString() + "" on class "" + method.getDeclaringClass() + "" with argument values "" + Arrays.asList(argValues) + "": "" + Exceptions.collapseText(e), e);"
128711,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/math/MathFunctions.java,31,,"    @SuppressWarnings(""unused"") @Deprecated "
128712,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/math/MathPredicates.java,29,,"    @SuppressWarnings(""unused"") @Deprecated "
128713,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/os/Os.java,161,,"                    log.debug(""TmpDirFinder: Candidate tmp dir '""+candidate+""' does not exist"");"
128714,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/ssh/BashCommands.java,259,,"        return ""( "" + Strings.join(commands, "" && "") + "" )"";"
128715,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/ssh/BashCommands.java,271,,"        return ""{ "" + Strings.join(commands, "" && "") + "" ; }"";"
128716,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/ssh/BashCommands.java,298,,"        return ""( "" + Strings.join(commands, "" || "") + "" )"";"
128717,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/ssh/BashCommands.java,363,,"        String zypperInstall = formatIfNotNull(""zypper --non-interactive --no-gpg-checks install %s"", getFlag(flags, ""zypper"", packageDefaultName));"
128718,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/ssh/BashCommands.java,461,,"                ""    ""+ (failOnTimeout ?"
128719,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/ssh/BashCommands.java,650,,"        return sudo(String.format(""sed -i.""+tempFileId+"" -e '1i\\\n%s %s' /etc/hosts"", ip, Joiner.on("" "").join(hostnames)));"
128720,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/stream/ReaderInputStream.java,72,,"            throw new IOException(""Stream Closed"");"
128721,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/text/StringEscapes.java,286,,"                    throw new IllegalArgumentException(""String '""+s+""' has invalid separators, should be '""+separator+""'"");"
128722,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/text/StringEscapes.java,398,,"                    throw new IllegalArgumentException(""String '""+s+""' is not a valid ""+mode+"" string (must start with double quote)"");"
128723,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/text/StringFunctions.java,35,,"    @SuppressWarnings(""unused"") @Deprecated "
128724,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/text/StringPredicates.java,56,,"    @SuppressWarnings(""unused"") @Deprecated "
128725,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,483,,"                else if (s.equalsIgnoreCase(""s"") || s.equalsIgnoreCase(""sec"") || s.equalsIgnoreCase(""secs"")"
128726,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,486,,"                else if (s.equalsIgnoreCase(""m"") || s.equalsIgnoreCase(""min"") || s.equalsIgnoreCase(""mins"")"
128727,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,490,,"                    || s.equalsIgnoreCase(""hour"") || s.equalsIgnoreCase(""hours""))"
128728,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,492,,"                else if (s.equalsIgnoreCase(""d"") || s.equalsIgnoreCase(""day"") || s.equalsIgnoreCase(""days""))"
128729,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,611,,"            namedGroup(""year"", DIGIT+DIGIT+DIGIT+DIGIT) +"
128730,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,613,,"            namedGroup(""month"", options(optionally(DIGIT)+DIGIT, anyChar(LETTER)+""+"")) +"
128731,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,765,,"                    return Maybe.absent(""Unknown date format '""+input+""': invalid month '""+monthS+""'; try http://yaml.org/type/timestamp.html format e.g. 2015-06-15 16:00:00 +0000"");"
128732,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/time/Time.java,765,,"                    return Maybe.absent(""Unknown date format '""+input+""': invalid month '""+monthS+""'; try http://yaml.org/type/timestamp.html format e.g. 2015-06-15 16:00:00 +0000"");"
128733,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/yaml/Yamls.java,67,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
128734,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/yaml/Yamls.java,500,,"                    throw new IllegalStateException(""Key ""+key+"" is not a scalar, searching for ""+pathItem+"" at depth ""+pathIndex+"" of ""+Arrays.asList(path));"
128735,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/main/java/org/apache/brooklyn/util/yaml/Yamls.java,500,,"                    throw new IllegalStateException(""Key ""+key+"" is not a scalar, searching for ""+pathItem+"" at depth ""+pathIndex+"" of ""+Arrays.asList(path));"
128736,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/test/AssertsTest.java,100,,"        Asserts.assertStringContains(""hello"", ""hello"", ""he"");"
128737,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/test/AssertsTest.java,102,,"            Asserts.assertStringContains(""hello"", ""goodbye"");"
128738,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/test/AssertsTest.java,109,,"        Asserts.assertStringContainsIgnoreCase(""hello"", ""Hello"");"
128739,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/HttpAssertsTest.java,85,,"        simpleEndpoint = testUri(""/simple"");"
128740,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/HttpAssertsTest.java,96,,"            .handler(""/missing"", new TestHttpRequestHandler().code(HttpStatus.SC_NOT_FOUND).response(""Missing""))"
128741,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/HttpAssertsTest.java,185,,"        HttpAsserts.assertUrlUnreachableEventually(ImmutableMap.of(""timeout"", ""10s""), baseUrlOrig);"
128742,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/HttpAssertsTest.java,270,,"        HttpAsserts.assertContentMatches(simpleEndpoint, ""[Oo][Kk]"");"
128743,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,37,,"        return Jsonya.newInstance().at(""europe"", ""uk"", ""edinburgh"")"
128744,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,37,,"        return Jsonya.newInstance().at(""europe"", ""uk"", ""edinburgh"")"
128745,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,38,,"                .put(""population"", 500*1000)"
128746,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,39,,"                .put(""weather"", ""wet"", ""lighting"", ""dark"")"
128747,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,40,,"                .root().at(""europe"").at(""france"").put(""population"", 80*1000*1000)"
128748,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,55,,"    @SuppressWarnings(""rawtypes"")"
128749,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,58,,"        Navigator<MutableMap<Object, Object>> n = Jsonya.of(europeMap().getRootMap()).at(""asia"")"
128750,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,59,,"            .put(MutableMap.of(""china"", null))"
128751,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,60,,"            .put(MutableMap.of(""japan"", null));"
128752,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,70,,"        n.at(""europe"", ""uk"", ""neighbours"").list().add(""ireland"")"
128753,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,71,,"            .root().at(""europe"", ""france"", ""neighbours"").list().add(""spain"", ""germany"").add(""switzerland"")"
128754,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/JsonyaTest.java,88,,"        MutableMap<Object, Object> map = Jsonya.at(""countries"").list().map().add(""europe"", ""uk"").getRootMap();"
128755,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/TimeWindowedListTest.java,43,,"        TimeWindowedList list = new TimeWindowedList<Object>(MutableMap.of(""timePeriod"", 1L, ""minVals"", 2));"
128756,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/collections/TimeWindowedListTest.java,69,,"        TimeWindowedList list = new TimeWindowedList<Object>(MutableMap.of(""timePeriod"", 1000L, ""minExpiredVals"", 1));"
128757,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/exceptions/ExceptionsTest.java,43,,"        NullPointerException tothrow = new NullPointerException(""simulated"");"
128758,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/exceptions/ExceptionsTest.java,152,,"        RuntimeException e = Exceptions.create(""test1"", MutableSet.of(new IllegalStateException(""test2""), new IllegalStateException(""test3"")));"
128759,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/exceptions/ExceptionsTest.java,152,,"        RuntimeException e = Exceptions.create(""test1"", MutableSet.of(new IllegalStateException(""test2""), new IllegalStateException(""test3"")));"
128760,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/guava/MaybeFunctionsTest.java,30,,"        Maybe<Object> result = MaybeFunctions.wrap().apply(""myval"");"
128761,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/internal/CommandLineUtilTest.java,59,,"        List<String> args = Lists.newArrayList(""k1"", ""vdup"", ""k2"", ""v2"", ""k3"", ""vdup"");"
128762,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/io/FileUtilTest.java,53,,"    @Test(groups=""Integration"")"
128763,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/io/FileUtilTest.java,78,,"            Files.write(""abc"", new File(dir, ""afile""), Charsets.UTF_8);"
128764,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/io/FileUtilTest.java,78,,"            Files.write(""abc"", new File(dir, ""afile""), Charsets.UTF_8);"
128765,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/javalang/EnumsTest.java,31,,"        Assert.assertEquals(Enums.valueOfIgnoreCase(SomeENum.class, ""e_300"").get(), SomeENum.E_300);"
128766,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/javalang/ReflectionsTest.java,119,,"        Assert.assertEquals(m.invoke(null, ""hello"", 1, 2, new int[] { 3, 4}), ""hello10"");"
128767,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/net/CidrTest.java,39,,"        Cidr c = new Cidr(""10.0.0.0/8"");"
128768,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/net/CidrTest.java,64,,"        Assert.assertEquals(c.toString(), ""0.0.0.0/0"");"
128769,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/net/UserAndHostAndPortTest.java,32,,"        assertIt(UserAndHostAndPort.fromParts(""myuser"", ""myhost"", 1234), ""myuser"", HostAndPort.fromParts(""myhost"", 1234));"
128770,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/net/UserAndHostAndPortTest.java,32,,"        assertIt(UserAndHostAndPort.fromParts(""myuser"", ""myhost"", 1234), ""myuser"", HostAndPort.fromParts(""myhost"", 1234));"
128771,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/os/OsTest.java,63,,"        for (String path : ImmutableSet.of(""/a/b"", ""//a///b"", ""/a/b/"", ""/a/b/."", ""/q/../a/b"")) {"
128772,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/repeat/RepeaterTest.java,75,,"        fail(""Expected exception was not thrown"");"
128773,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/ssh/IptablesCommandsFirewalldTest.java,36,,"    private static final String firewalldService = ""( if test \""$UID\"" -eq 0; then ( ( { """
128774,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/stream/StreamGobblerTest.java,64,,"            assertEqualsEventually(out, ""line1"" + NL);"
128775,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/ComparableVersionTest.java,26,,"    ComparableVersion v = new ComparableVersion(""10.5.8"");"
128776,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/QuotedStringTokenizerTest.java,53,,"        testResultingTokens(""foo,bar,baz"", ""\"""", false, "","", false, ""foo"", ""bar"", ""baz"");"
128777,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/QuotedStringTokenizerTest.java,53,,"        testResultingTokens(""foo,bar,baz"", ""\"""", false, "","", false, ""foo"", ""bar"", ""baz"");"
128778,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/QuotedStringTokenizerTest.java,54,,"        testResultingTokens(""\""foo,bar\"",baz"", ""\"""", false, "","", false, ""foo,bar"", ""baz"");"
128779,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringEscapesTest.java,59,,"        Assert.assertEquals(JavaStringEscapes.unwrapJavaString(""\""Hello World\""""), ""Hello World"");"
128780,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringEscapesTest.java,63,,"            Assert.fail(""Should have thrown"");"
128781,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringEscapesTest.java,88,,"        Assert.assertEquals(MutableList.of(""hello"", ""world""),"
128782,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringEscapesTest.java,88,,"        Assert.assertEquals(MutableList.of(""hello"", ""world""),"
128783,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringFunctionsTest.java,31,,"        Assert.assertEquals(StringFunctions.prepend(""Hello "").apply(""World""), ""Hello World"");"
128784,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringFunctionsTest.java,31,,"        Assert.assertEquals(StringFunctions.prepend(""Hello "").apply(""World""), ""Hello World"");"
128785,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringFunctionsTest.java,42,,"        Assert.assertEquals(StringFunctions.formatterForArray(""Hello"").apply(new Object[0]), ""Hello"");"
128786,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringPredicatesTest.java,39,,"        Assert.assertTrue(StringPredicates.containsLiteral(""xx"").apply(""texxxt tessst""));"
128787,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringPredicatesTest.java,59,,"        Assert.assertTrue(StringPredicates.startsWith(""t"").apply(""test""));"
128788,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,41,,"        assertFalse(Strings.isEmpty(""   \t   ""));"
128789,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,42,,"        assertFalse(Strings.isEmpty(""abc""));"
128790,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,43,,"        assertFalse(Strings.isEmpty(""   abc   ""));"
128791,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,65,,"        assertEquals(""abcdef"", Strings.makeValidFilename(""abcdef""));"
128792,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,100,,"        assertEquals(Strings.removeFromEnd("""", ""bar""), """");"
128793,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,103,,"        assertEquals(Strings.removeFromEnd(""foobar"", ""bar""), ""foo"");"
128794,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,103,,"        assertEquals(Strings.removeFromEnd(""foobar"", ""bar""), ""foo"");"
128795,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,118,,"        assertEquals(Strings.removeAllFromEnd(""foobarbaz"", ""bar"", ""baz""), ""foo"");"
128796,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,118,,"        assertEquals(Strings.removeAllFromEnd(""foobarbaz"", ""bar"", ""baz""), ""foo"");"
128797,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,148,,"        assertEquals(Strings.removeFromStart(""xyz"", ""x""), ""yz"");"
128798,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,156,,"        assertEquals(Strings.removeFromEnd(""http://foo.com/"", ""/""), ""http://foo.com"");"
128799,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,185,,"        assertTrue(Strings.containsLiteral(""hello"", ""ell""));"
128800,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,212,,"        Assert.assertEquals(x.toString(), ""hello world"");"
128801,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/StringsTest.java,233,,"            return ""world""+(appendCount?""""+count:"""");"
128802,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/VersionComparatorTest.java,70,,"        assertVersionOrder(""0"", ""0.0"", ""0.1"", ""0.1.0"", ""0.1.1"", ""0.2"", ""0.2.1"", ""1"", ""1.0"", ""2"");"
128803,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/WildcardGlobsTest.java,43,,"        assertTrue(WildcardGlobs.isGlobMatched(""a{,?}{,b}"", ""a""));"
128804,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/WildcardGlobsTest.java,55,,"        assertTrue(newGlobExpander().isGlobMatchedNumeric(""a{1-3,5}"", ""a1""));"
128805,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/WildcardGlobsTest.java,64,,"        assertTrue(newGlobExpander().isGlobMatchedNumeric(""a{01-03,05}"", ""a01""));"
128806,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/WildcardGlobsTest.java,65,,"        assertTrue(newGlobExpander().isGlobMatchedNumeric(""a{ 01  - 03 , 05 }"", ""a01""));"
128807,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/WildcardGlobsTest.java,78,,"        assertEquals(result, Arrays.asList(""a"",""b""), ""Expansion was ""+result);"
128808,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/text/WildcardGlobsTest.java,141,,"            fail(""exception expected"");"
128809,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/time/DurationTest.java,52,,"                Duration.of(""4h 3m 30s"").toMilliseconds());"
128810,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/time/TimeTest.java,220,,"        if (integration) assertDatesParseToEqual(""20150604 BST"", ""2015-06-04 +0100"");"
128811,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/time/TimeTest.java,256,,"        assertDatesParseToEqual(""20150604 08:00:12.345"", ""2015-06-04-080012.345"");"
128812,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/time/TimeTest.java,258,,"        assertDatesParseToEqual(""2015-12-1"", ""2015-12-01-0000"");"
128813,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/time/TimeTest.java,295,,"            assertDatesParseToEqual(""2015-Mar-1"", ""2015-03-01-0000"");"
128814,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/common/src/test/java/org/apache/brooklyn/util/yaml/YamlsTest.java,78,,"        Assert.assertEquals(Yamls.getTextOfYamlAtPath(sample, ""k2"", ""k21"").getMatchedYamlText(),"
128815,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/groovy/src/main/java/org/apache/brooklyn/util/groovy/GroovyJavaMethods.java,56,,"    @SuppressWarnings(""unchecked"")"
128816,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/main/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgent.java,254,,"        if (""true"".equalsIgnoreCase(vv)) return true;"
128817,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/test/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgentSslTest.java,79,,"        caRootSigner = new FluentKeySigner(""ca-root"").selfsign();"
128818,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/test/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgentSslTest.java,84,,"        caChildCert = caRootSigner.newCertificateFor(""ca-child"", caChildKey);"
128819,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/test/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgentSslTest.java,89,,"        grandchildCert = caChildSigner.newCertificateFor(""grandchild"", grandchildKey);"
128820,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/test/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgentSslTest.java,94,,"                newCertificateFor(""child-2"", child2Key);"
128821,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/test/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgentSslTest.java,98,,"                new FluentKeySigner(""self-1"", selfSign1Key)."
128822,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/jmx/jmxmp-ssl-agent/src/test/java/org/apache/brooklyn/util/jmx/jmxmp/JmxmpAgentSslTest.java,153,,"        new JmxmpClient().connect(""service:jmx:jmxmp://localhost:11099"", new LinkedHashMap());"
128823,./TargetProjects/incubator-brooklyn/brooklyn-server/utils/rt-osgi/src/test/java/org/apache/brooklyn/util/osgi/OsgisTest.java,31,,"        assertEquals(OsgiUtils.parseOsgiIdentifier(""a.b"").get(), new VersionedName(""a.b"", null));"
128824,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/core/CoreDataStore.java,178,,"			throw new IOException(""createNode: "" + RpcErrors.messages[fileRes.getError()] + "", name "" + path);"
128825,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/core/CoreDataStore.java,267,,"			LOG.info(""rename: "" + RpcErrors.messages[renameRes.getError()]);"
128826,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/core/CoreDirectory.java,52,,"			throw new Exception(""file type mismatch, type "" + getType());"
128827,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/core/CoreNode.java,88,,"		throw new Exception(""Type of file unclear"");"
128828,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,81,,"		System.out.println(""write, filename "" + filename  + "", size "" + size + "", loop "" + loop + "", storageClass "" + storageClass + "", locationClass "" + locationClass + "", buffered "" + buffered);"
128829,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,81,,"		System.out.println(""write, filename "" + filename  + "", size "" + size + "", loop "" + loop + "", storageClass "" + storageClass + "", locationClass "" + locationClass + "", buffered "" + buffered);"
128830,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,100,,"		System.out.println(""starting benchmark..."");"
128831,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,134,,"		System.out.println(""execution time "" + executionTime);"
128832,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,135,,"		System.out.println(""ops "" + ops);"
128833,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,136,,"		System.out.println(""sumbytes "" + sumbytes);"
128834,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,137,,"		System.out.println(""throughput "" + throughput);"
128835,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,138,,"		System.out.println(""latency "" + latency);"
128836,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,140,,"		fs.getStatistics().print(""close"");"
128837,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,144,,"		System.out.println(""writeAsync, filename "" + filename  + "", size "" + size + "", loop "" + loop + "", batch "" + batch + "", storageClass "" + storageClass + "", locationClass "" + locationClass);"
128838,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,627,,"		System.out.println(""execution time [ms] "" + executionTime);"
128839,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,628,,"		System.out.println(""latency [us] "" + latency);"
128840,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,818,,"			System.out.println(""writing position "" + outputStream.position() + "", value "" + intValue);"
128841,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,839,,"			System.out.print(""reading position "" + inputStream.position() + "", expected "" + inputStream.position()/4 + "" "");"
128842,./TargetProjects/incubator-crail/client/src/main/java/org/apache/crail/tools/CrailBenchmark.java,1079,,"				System.out.println(""experiment "" + i);"
128843,./TargetProjects/incubator-crail/client/src/test/java/org/apache/crail/ClientTest.java,157,,"						System.err.println(""outputBuffer["" + i + ""] = "" + Integer.toHexString(a) + "" != "" +"
128844,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,88,,"			System.out.println(""read size "" + size);"
128845,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,89,,"			System.out.println(""operations "" + loop);"
128846,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,109,,"			System.out.println(""execution time "" + executionTime);"
128847,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,110,,"			System.out.println(""ops "" + ops);"
128848,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,111,,"			System.out.println(""sumbytes "" + sumbytes);"
128849,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,112,,"			System.out.println(""throughput "" + throughput);"
128850,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,113,,"			System.out.println(""latency "" + latency);"
128851,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,114,,"			System.out.println(""closing stream"");"
128852,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,129,,"		System.out.println(""file capacity "" + status.getLen());"
128853,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,336,,"			System.out.println(""execution time [ms] "" + executionTime);"
128854,./TargetProjects/incubator-crail/hdfs/src/main/java/org/apache/crail/hdfs/tools/HdfsIOBenchmark.java,337,,"			System.out.println(""latency [us] "" + latency);"
128855,./TargetProjects/incubator-crail/namenode/src/main/java/org/apache/crail/namenode/LogResponse.java,107,,"				throw new Exception(""Response type not set"");"
128856,./TargetProjects/incubator-crail/rpc-darpc/src/main/java/org/apache/crail/namenode/rpc/darpc/DaRPCNameNodeResponse.java,116,,"				throw new Exception(""Response type not set"");"
128857,./TargetProjects/incubator-dolphinscheduler-maven-plugin/src/test/java/org/apache/dolphinscheduler/maven/SpiDependencyCheckerTest.java,50,,"                .execute(""verify"")"
128858,./TargetProjects/incubator-gobblin/gobblin-api/src/main/java/org/apache/gobblin/configuration/ConfigurationKeys.java,312,,"  public static final String DEFAULT_EXTRACT_IS_FULL = ""false"";"
128859,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/broker/gobblin_scopes/GobblinScopesTest.java,31,,"    JobScopeInstance jobScope = new JobScopeInstance(""myJob"", ""job123"");"
128860,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/converter/ConverterTest.java,47,,"            GlobalMetadata.<String>builder().schema(""schema"").build()).mapRecords(r -> {"
128861,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/dataset/DescriptorTest.java,29,,"    DatasetDescriptor dataset = new DatasetDescriptor(""hdfs"", ""/data/tracking/PageViewEvent"");"
128862,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/password/EncryptedPasswordAuthenticatorTest.java,46,,"    props.put(EncryptedPasswordAuthenticator.AUTHENTICATOR_USERNAME, ""testuser"");"
128863,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/password/PasswordManagerTest.java,52,,"    String password = ""ENC("" + UUID.randomUUID().toString() + "")"";"
128864,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,46,,"    RecordEnvelope<String> record = new RecordEnvelope<>(""test"", new MyWatermark(101));"
128865,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,131,,"    record.setRecordMetadata(""meta1"", ""value1"");"
128866,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,131,,"    record.setRecordMetadata(""meta1"", ""value1"");"
128867,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,142,,"    record.setRecordMetadata(""list"", list);"
128868,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,153,,"    record.setRecordMetadata(""meta2"", ""value2"");"
128869,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,153,,"    record.setRecordMetadata(""meta2"", ""value2"");"
128870,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,154,,"    derived1.setRecordMetadata(""meta3"", ""value3"");"
128871,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,154,,"    derived1.setRecordMetadata(""meta3"", ""value3"");"
128872,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,155,,"    derived2.setRecordMetadata(""meta4"", ""value4"");"
128873,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,155,,"    derived2.setRecordMetadata(""meta4"", ""value4"");"
128874,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,156,,"    derived3.setRecordMetadata(""meta5"", ""value5"");"
128875,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/stream/RecordEnvelopeTest.java,156,,"    derived3.setRecordMetadata(""meta5"", ""value5"");"
128876,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/util/ClassAliasResolverTest.java,33,,"    Assert.assertEquals(resolver.resolve(""abc""), DummyAliasTest.class.getName());"
128877,./TargetProjects/incubator-gobblin/gobblin-api/src/test/java/org/apache/gobblin/util/ClassAliasResolverTest.java,35,,"    Assert.assertEquals(resolver.resolve(""abcd""), ""abcd"");"
128878,./TargetProjects/incubator-gobblin/gobblin-aws/src/main/java/org/apache/gobblin/aws/CloudInitScriptBuilder.java,103,,"    cloudInitCmds.append(""mkdir -p "").append(nfsDir).append(File.separator).append(""1"").append(""\n"");"
128879,./TargetProjects/incubator-gobblin/gobblin-aws/src/main/java/org/apache/gobblin/aws/CloudInitScriptBuilder.java,146,,"        .append("" --"").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)"
128880,./TargetProjects/incubator-gobblin/gobblin-binary-management/src/test/java/org/apache/gobblin/binary_creation/AvroTestToolsTest.java,56,,"            + ""  \""name\"": \""SimpleTest\"",\n"" + ""  \""fields\"": [\n"" + ""    {\n"" + ""      \""name\"": \""memberId\"",\n"""
128881,./TargetProjects/incubator-gobblin/gobblin-binary-management/src/test/java/org/apache/gobblin/binary_creation/AvroTestToolsTest.java,74,,"    builder_0.set(""memberId"", ""1"");"
128882,./TargetProjects/incubator-gobblin/gobblin-binary-management/src/test/java/org/apache/gobblin/binary_creation/AvroTestToolsTest.java,75,,"    builder_0.set(""name"", ""alice"");"
128883,./TargetProjects/incubator-gobblin/gobblin-cluster/src/test/java/org/apache/gobblin/cluster/ClusterEventMetadataGeneratorTest.java,96,,"    Assert.assertEquals(metadata.get(""message""), null);"
128884,./TargetProjects/incubator-gobblin/gobblin-cluster/src/test/java/org/apache/gobblin/cluster/GobblinClusterKillTest.java,196,,"          return FileUtils.listFiles(writerOutputDir, new String[]{""txt""}, true).size() >= 25;"
128885,./TargetProjects/incubator-gobblin/gobblin-cluster/src/test/java/org/apache/gobblin/cluster/TestSingleTask.java,124,,"    final FutureTask<String> cancelTask = new FutureTask<String>(cancelRunnable, ""cancelled"");"
128886,./TargetProjects/incubator-gobblin/gobblin-compaction/src/main/java/org/apache/gobblin/compaction/hive/HiveTable.java,49,,"    @SuppressWarnings(""unchecked"")"
128887,./TargetProjects/incubator-gobblin/gobblin-compaction/src/main/java/org/apache/gobblin/compaction/hive/SerialCompactor.java,157,,"    this.conn.executeStatements(""set "" + MAPREDUCE_JOB_QUEUENAME + ""="""
128888,./TargetProjects/incubator-gobblin/gobblin-compaction/src/main/java/org/apache/gobblin/compaction/hive/SerialCompactor.java,222,,"    String insertStmt = ""INSERT OVERWRITE TABLE "" + mergedDelta.getNameWithJobId(this.jobId) + "" SELECT * FROM """
128889,./TargetProjects/incubator-gobblin/gobblin-compaction/src/main/java/org/apache/gobblin/compaction/hive/SerialCompactor.java,240,,"        + getAttributesInNewSchema() + "" FROM "" + notUpdatedWithNewSchema.getNameWithJobId(this.jobId) + "" UNION ALL """
128890,./TargetProjects/incubator-gobblin/gobblin-compaction/src/main/java/org/apache/gobblin/compaction/parser/CompactionPathParser.java,123,,"        ""Missing required property "" + MRCompactor.COMPACTION_INPUT_DIR);"
128891,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java,78,,"    File jobDir = new File(basePath, ""Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20"");"
128892,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java,84,,"    writeFileWithContent(jobDir, ""file1"", r1, 20);"
128893,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java,85,,"    writeFileWithContent(jobDir, ""file2"", r2, 18);"
128894,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java,161,,"    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(""Identity/MemberAccount/hourly/2017/04/03/10""))));"
128895,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java,339,,"       String path = ""Identity/MemberAccount/minutely/2017/04/03/"" + i + ""/20_30/run_2017-04-03-10-20"";"
128896,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java,343,,"       writeFileWithContent(jobDir, ""file_random"", r1, 20);"
128897,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/KeyDedupReducerTest.java,85,,"    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(keySchema.getField(""key"").schema());"
128898,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/KeyDedupReducerTest.java,103,,"    fullRecordBuilder1.set(""scn"", 123);"
128899,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/KeyDedupReducerTest.java,104,,"    fullRecordBuilder1.set(""scn2"", 100);"
128900,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java,70,,"  final String extensionName = ""orc"";"
128901,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java,125,,"    EmbeddedGobblin embeddedGobblin = TestCompactionTaskUtils.createEmbeddedGobblinCompactionJob(""basic"", basePath.getAbsolutePath())"
128902,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/RenameSourceDirectoryTest.java,54,,"    private static final String RENAME_SRC_DIR_RUN1_FILE = RENAME_SRC_DIR_RUN1_DIR + ""/dummy"";"
128903,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/orc/OrcKeyComparatorTest.java,145,,"    OrcMap orcMap = createSimpleOrcMap(new Text(""key""), new Text(""value""), mapFieldSchema);"
128904,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/orc/OrcKeyComparatorTest.java,145,,"    OrcMap orcMap = createSimpleOrcMap(new Text(""key""), new Text(""value""), mapFieldSchema);"
128905,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/verify/CompactionTimeVerifierTest.java,30,,"    String lb1 = CompactionTimeRangeVerifier.getMachedLookbackTime(""Identity/MemberAccount"", timeString, ""2d"");"
128906,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/verify/CompactionTimeVerifierTest.java,31,,"    Assert.assertEquals(lb1, ""1d2h"");"
128907,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/verify/CompactionTimeVerifierTest.java,32,,"    String lb2 = CompactionTimeRangeVerifier.getMachedLookbackTime(""BizProfile/BizCompany"", timeString, ""2d"");"
128908,./TargetProjects/incubator-gobblin/gobblin-compaction/src/test/java/org/apache/gobblin/compaction/verify/CompactionTimeVerifierTest.java,50,,"    String lb3 = CompactionTimeRangeVerifier.getMachedLookbackTime(""ABC/Unknown"", timeString, ""2d"");"
128909,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-client/src/main/java/org/apache/gobblin/config/client/ConfigClientUtils.java,137,,"    Preconditions.checkNotNull(configKeyURI, ""input can not be null"");"
128910,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-client/src/main/java/org/apache/gobblin/config/client/ConfigStoreFactoryRegister.java,33,,"  @SuppressWarnings(""rawtypes"")"
128911,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-client/src/test/java/org/apache/gobblin/config/client/TestConfigClient.java,147,,"    rootMap.put(""generalKey"", ""generalValue_root""); // keys will be overwrite"
128912,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-core/src/test/java/org/apache/gobblin/config/common/impl/TestCircularDependency.java,64,,"    ConfigKeyPath tag = SingleLinkedListConfigKeyPath.ROOT.createChild(""tag"");"
128913,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-core/src/test/java/org/apache/gobblin/config/common/impl/TestCircularDependency.java,79,,"      Assert.fail(""Did not catch expected CircularDependencyException"");"
128914,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-core/src/test/java/org/apache/gobblin/config/common/impl/TestCircularDependency.java,88,,"    ConfigKeyPath highPriorityTag = tag.createChild(""highPriorityTag"");"
128915,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-core/src/test/java/org/apache/gobblin/config/common/impl/TestInMemoryTopology.java,154,,"    final String generalKey = ""generalKey"";"
128916,./TargetProjects/incubator-gobblin/gobblin-config-management/gobblin-config-core/src/test/java/org/apache/gobblin/config/store/hdfs/SimpleHDFSStoreMetadataTest.java,61,,"    simpleHDFSStoreMetadata.setCurrentVersion(""1.2"");"
128917,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java,53,,"            ""/tmp/foobar"");"
128918,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java,56,,"        ""abracadabra"");"
128919,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java,68,,"        ""any"");"
128920,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java,80,,"    Assert.assertNotNull(parsedProperties, ""Expected parser to only return one record"");"
128921,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/writer/FineGrainedWatermarkTrackerTest.java,66,,"        CheckpointableWatermark checkpointableWatermark = new DefaultCheckpointableWatermark(""default"", new LongWatermark(i));"
128922,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/writer/WatermarkTrackerTest.java,42,,"    commits(watermarkTracker, ""default"", 0, 4, 5, 6);"
128923,./TargetProjects/incubator-gobblin/gobblin-core-base/src/test/java/org/apache/gobblin/writer/WatermarkTrackerTest.java,54,,"    commits(watermarkTracker, ""other"", 1, 3, 5, 7);"
128924,./TargetProjects/incubator-gobblin/gobblin-core/src/main/java/org/apache/gobblin/commit/FsRenameCommitStep.java,88,,"    @SuppressWarnings(""unchecked"")"
128925,./TargetProjects/incubator-gobblin/gobblin-core/src/main/java/org/apache/gobblin/converter/csv/CsvToJsonConverter.java,76,,"            outputRecord.add(outputSchema.get(i).getAsJsonObject().get(""columnName"").getAsString(), JsonNull.INSTANCE);"
128926,./TargetProjects/incubator-gobblin/gobblin-core/src/main/java/org/apache/gobblin/source/extractor/extract/restapi/RestApiExtractor.java,125,,"        throw new SchemaException(""Failed to connect."");"
128927,./TargetProjects/incubator-gobblin/gobblin-core/src/main/java/org/apache/gobblin/source/extractor/extract/restapi/RestApiExtractor.java,127,,"      log.debug(""Connected successfully."");"
128928,./TargetProjects/incubator-gobblin/gobblin-core/src/main/java/org/apache/gobblin/source/extractor/hadoop/HadoopFsHelper.java,79,,"      throw new FileBasedHelperException(""Cannot connect to given URI "" + uri + "" due to "" + e.getMessage(), e);"
128929,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,40,,"    Assert.assertEquals(state.getProp(""string"", ""some string""), ""some string"");"
128930,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,40,,"    Assert.assertEquals(state.getProp(""string"", ""some string""), ""some string"");"
128931,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,41,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(0), ""item1"");"
128932,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,41,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(0), ""item1"");"
128933,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,41,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(0), ""item1"");"
128934,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,42,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(1), ""item2"");"
128935,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,43,,"    Assert.assertEquals(state.getPropAsLong(""long"", Long.MAX_VALUE), Long.MAX_VALUE);"
128936,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,44,,"    Assert.assertEquals(state.getPropAsInt(""int"", Integer.MAX_VALUE), Integer.MAX_VALUE);"
128937,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,45,,"    Assert.assertEquals(state.getPropAsDouble(""double"", Double.MAX_VALUE), Double.MAX_VALUE);"
128938,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,46,,"    Assert.assertEquals(state.getPropAsBoolean(""boolean"", true), true);"
128939,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/StateTest.java,63,,"    state.setProp(""string"", ""some other string"");"
128940,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,47,,"    Assert.assertEquals(state.getProp(""string"", ""some string""), ""some string"");"
128941,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,47,,"    Assert.assertEquals(state.getProp(""string"", ""some string""), ""some string"");"
128942,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,48,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(0), ""item1"");"
128943,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,48,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(0), ""item1"");"
128944,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,48,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(0), ""item1"");"
128945,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,49,,"    Assert.assertEquals(state.getPropAsList(""list"", ""item1,item2"").get(1), ""item2"");"
128946,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,50,,"    Assert.assertEquals(state.getPropAsLong(""long"", Long.MAX_VALUE), Long.MAX_VALUE);"
128947,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,51,,"    Assert.assertEquals(state.getPropAsInt(""int"", Integer.MAX_VALUE), Integer.MAX_VALUE);"
128948,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,52,,"    Assert.assertEquals(state.getPropAsDouble(""double"", Double.MAX_VALUE), Double.MAX_VALUE);"
128949,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,53,,"    Assert.assertEquals(state.getPropAsBoolean(""boolean"", true), true);"
128950,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/configuration/WorkUnitStateTest.java,72,,"    state.setProp(""string"", ""some other string"");"
128951,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/avro/JsonElementConversionFactoryTest.java,114,,"        new RecordConverter(jsonSchema, state, buildNamespace(state.getExtract().getNamespace(), ""something""));"
128952,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/avro/JsonIntermediateToAvroConverterTest.java,95,,"    state.setProp(ConfigurationKeys.CONVERTER_AVRO_DATE_TIMEZONE, ""PST"");"
128953,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/avro/JsonIntermediateToAvroConverterTest.java,125,,"    Assert.assertEquals(jsonRecord.get(""LastModifiedDate"").getAsString(),"
128954,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/avro/JsonIntermediateToAvroConverterTest.java,189,,"    Assert.assertEquals(jsonRecord.getAsJsonObject().get(""metaData"").getAsJsonObject(),"
128955,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/objectstore/ObjectStoreDeleteConverterTest.java,38,,"    wu.setProp(ObjectStoreDeleteConverter.OBJECT_ID_FIELD, ""objectId"");"
128956,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/objectstore/ObjectStoreDeleteConverterTest.java,43,,"            .parse(""{ \""type\"" : \""record\"", \""name\"" : \""test_schema\"", \""namespace\"" : \""com.gobblin.test\"", """
128957,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/converter/string/StringFilterConverterTest.java,46,,"    String test = ""HelloWorld"";"
128958,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/http/TestDefaultHttpClientConfiguration.java,44,,"      Assert.assertEquals(proxyHost.get(), new HttpHost(""localhost"", 12345));"
128959,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/http/TestDefaultHttpClientConfiguration.java,58,,"                                        ConfigValueFactory.fromAnyRef(""host123""));"
128960,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,86,,"    wuState.setProp(ConfigurationKeys.DATA_PUBLISHER_METADATA_STR, ""foobar"");"
128961,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,134,,"    s.setProp(ConfigurationKeys.DATA_PUBLISH_WRITER_METADATA_KEY, ""true"");"
128962,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,236,,"    FsWriterMetrics metrics1 = buildWriterMetrics(""foo1.json"", ""1-2-3-4"", 0, 10);"
128963,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,236,,"    FsWriterMetrics metrics1 = buildWriterMetrics(""foo1.json"", ""1-2-3-4"", 0, 10);"
128964,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,237,,"    FsWriterMetrics metrics2 = buildWriterMetrics(""foo1.json"", ""5-6-7-8"",10, 20);"
128965,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,258,,"      try (FileOutputStream fOs = new FileOutputStream(new File(publishPath, ""metadata.json""))) {"
128966,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,269,,"      s.setProp(ConfigurationKeys.DATA_PUBLISHER_APPEND_EXTRACT_TO_FINAL_DIR, ""false"");"
128967,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,282,,"          new FsWriterMetrics.FileInfo(""foo3.json"", 30),"
128968,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,284,,"          new FsWriterMetrics.FileInfo(""foo4.json"", 55),"
128969,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,554,,"    Assert.assertTrue(state.contains(""gobblin.event.lineage.branch.0.destination""));"
128970,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/publisher/BaseDataPublisherTest.java,555,,"    Assert.assertFalse(state.contains(""gobblin.event.lineage.branch.1.destination""));"
128971,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/qualitychecker/RowCountTaskLevelPolicyTest.java,44,,"    state.setProp(ConfigurationKeys.TASK_LEVEL_POLICY_LIST_TYPE, ""FAIL"");"
128972,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/qualitychecker/RowCountTaskLevelPolicyTest.java,77,,"    state.setProp(ConfigurationKeys.ROW_COUNT_RANGE, ""0.05"");"
128973,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/recordaccess/AvroGenericRecordAccessorTest.java,81,,"    accessor.set(""name"", ""foo"");"
128974,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/recordaccess/AvroGenericRecordAccessorTest.java,82,,"    accessor.set(""favorite_number"", 2);"
128975,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/recordaccess/AvroGenericRecordAccessorTest.java,83,,"    accessor.set(""last_modified"", 100L);"
128976,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/recordaccess/AvroGenericRecordAccessorTest.java,116,,"    Assert.assertEquals(accessor.getAsString(""nestedRecords.1.fieldToEncrypt""), ""val1"");"
128977,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/recordaccess/AvroGenericRecordAccessorTest.java,122,,"    accessor.setStringArray(""favorite_quotes"", quotes);"
128978,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/recordaccess/RecordAccessorProviderFactoryTest.java,38,,"    record.put(""name"", ""foo"");"
128979,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/DatePartitionedAvroFileExtractorTest.java,165,,"    state.setProp(""date.partitioned.source.partition.pattern"", DATE_PATTERN);"
128980,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/DatePartitionedAvroFileExtractorTest.java,166,,"    state.setProp(""date.partitioned.source.min.watermark.value"", DateTimeFormat.forPattern(DATE_PATTERN).print("
128981,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/DatePartitionedAvroFileExtractorTest.java,170,,"    state.setProp(""date.partitioned.source.partition.suffix"", SUFFIX);"
128982,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/extract/QueryBasedSourceTest.java,48,,"    SourceEntity se1 = SourceEntity.fromSourceEntityName(""SourceEntity1"");"
128983,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/extract/QueryBasedSourceTest.java,59,,"    st1.setProp(ConfigurationKeys.SOURCE_ENTITY, ""SourceEntity3"");"
128984,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/extract/QueryBasedSourceTest.java,90,,"      state.setProp(QueryBasedSource.ENTITY_BLACKLIST, ""Table1,BadTable.*"");"
128985,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/extract/QueryBasedSourceTest.java,98,,"      Assert.assertTrue(res.contains(SourceEntity.fromSourceEntityName(""Table3"")),"
128986,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/partition/PartitionerTest.java,124,,"    String startValue = ""20140101000000"";"
128987,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/partition/PartitionerTest.java,133,,"        ""Low watermark should be "" + startValue);"
128988,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/partition/PartitionerTest.java,259,,"        ""High watermark should be "" + endValue);"
128989,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/partition/PartitionerTest.java,279,,"        ""Should not mark as user specified high watermark"");"
128990,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/partition/PartitionerTest.java,375,,"        ""High watermark should be 20161231235959"");"
128991,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/watermark/DateWatermarkTest.java,42,,"    DateWatermark datewm = new DateWatermark(""Datewatermark"", ""test"");"
128992,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/watermark/DateWatermarkTest.java,42,,"    DateWatermark datewm = new DateWatermark(""Datewatermark"", ""test"");"
128993,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/watermark/HourWatermarkTest.java,42,,"    HourWatermark hourwm = new HourWatermark(""Hourwatermark"", ""test"");"
128994,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/watermark/HourWatermarkTest.java,42,,"    HourWatermark hourwm = new HourWatermark(""Hourwatermark"", ""test"");"
128995,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/source/extractor/watermark/SimpleWatermarkTest.java,66,,"      Assert.fail(""Expected java.lang.IllegalArgumentException, but didn't get one"");"
128996,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/writer/CloseOnFlushWriterWrapperTest.java,60,,"    state.getJobState().setProp(CloseOnFlushWriterWrapper.WRITER_CLOSE_ON_FLUSH_KEY, ""true"");"
128997,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/writer/MetadataWriterWrapperTest.java,76,,"    Assert.assertNotNull(writerMetadata, ""Expected there to be metadata"");"
128998,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/writer/http/SalesforceRestWriterTest.java,57,,"    state.appendToSetProp(CONF_PREFIX + STATIC_SVC_ENDPOINT, ""test"");"
128999,./TargetProjects/incubator-gobblin/gobblin-core/src/test/java/org/apache/gobblin/writer/http/SalesforceRestWriterTest.java,90,,"    Assert.assertTrue(request.isPresent(), ""No HttpUriRequest from onNewRecord"");"
