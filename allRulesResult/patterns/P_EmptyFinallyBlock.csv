Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,} finally {,"try {
  reader.close();
}
  finally {
}
",0,0,0,534,
2,} finally {,"try {
  scanner=accumuloClient.createScanner(tablename,new Authorizations());
  scanner.setReadaheadThreshold(Long.MAX_VALUE);
  scanner.setBatchSize(1);
  scanner.setRange(new Range(new Text(Integer.toString(workerIndex)),new Text(""9"")));
  scanner.fetchColumnFamily(new Text(""fam1""));
  for (  Map.Entry<Key,Value> entry : scanner) {
    if (!testInProgress.get()) {
      scanner.clearScanIterators();
      return;
    }
    Text row=entry.getKey().getRow();
    log.debug(""worker {}, row {}"",workerIndex,row);
    if (entry.getValue() != null) {
      Value prevValue=resultsByWorker.put(workerIndex,entry.getValue());
      if (prevValue != null) {
        log.trace(""worker {} values {}"",workerIndex,String.format(""%1$s < %2$s"",prevValue,entry.getValue()));
        assertTrue(prevValue.compareTo(entry.getValue()) > 0);
      }
    }
 else {
      log.info(""Scanner returned null"");
      fail(""Scanner returned unexpected null value"");
    }
  }
  log.debug(""Scanner ran out of data. (info only, not an error) "");
}
 catch (TableNotFoundException e) {
  throw new IllegalStateException(""Initialization failure. Could not create scanner"",e);
}
 finally {
}
",0,0,0,,
3,} finally {,"try (AccumuloClient client=Accumulo.newClient().from(opts.getClientProps()).build()){
  if (opts.trace) {
  }
  verifyIngest(client,opts);
}
  finally {
}
",0,0,0,,
4,} finally {,"try {
  toTest.close();
}
 catch (Exception expected) {
}
 finally {
}
",0,0,0,,
5,} finally {,"try {
  for (int i=0; i < size; i++) {
    consumer.receive();
  }
}
  finally {
}
",0,0,0,,
6,} finally {,"try {
  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
  MessageConsumer consumer=session.createConsumer(new ActiveMQQueue(TEST_QUEUE_NAME));
  message=consumer.receive(45000);
}
 catch (Exception ex) {
  fail(""during consume message received exception "" + ex.getMessage());
}
 finally {
}
",0,0,0,,
7,} finally {,"try {
synchronized (creditsLock) {
    if (sender.getLocalState() == EndpointState.CLOSED) {
      return 0;
    }
    pending.incrementAndGet();
    credits--;
  }
  if (messageReference.getMessage() instanceof AMQPLargeMessage) {
    hasLarge=true;
  }
  if (messageReference instanceof Runnable && consumer.allowReferenceCallback()) {
    messageReference.onDelivery(executeDelivery);
    connection.runNow((Runnable)messageReference);
  }
 else {
    connection.runNow(() -> executeDelivery(messageReference));
  }
  return 1;
}
  finally {
}
",0,0,0,,
8,} finally {,"try {
  QueueConsumer consumer=null;
  int attributes=0;
  if (selector != null) {
    attributes=attributes | SELECTOR_SET;
  }
  if (autoAck) {
    consumer=createConsumer(selector);
  }
 else {
    attributes|=ACKNOWLEDGED;
    consumer=createAcknowledgedConsumer(selector);
  }
  String attributesSegment=""attributes-"" + attributes;
  UriBuilder location=uriInfo.getAbsolutePathBuilder();
  location.path(attributesSegment);
  location.path(consumer.getId());
  Response.ResponseBuilder builder=Response.created(location.build());
  if (autoAck) {
    QueueConsumer.setConsumeNextLink(serviceManager.getLinkStrategy(),builder,uriInfo,uriInfo.getMatchedURIs().get(0) + ""/"" + attributesSegment+ ""/""+ consumer.getId(),""-1"");
  }
 else {
    AcknowledgedQueueConsumer.setAcknowledgeNextLink(serviceManager.getLinkStrategy(),builder,uriInfo,uriInfo.getMatchedURIs().get(0) + ""/"" + attributesSegment+ ""/""+ consumer.getId(),""-1"");
  }
  return builder.build();
}
 catch (ActiveMQException e) {
  throw new RuntimeException(e);
}
 finally {
}
",0,0,0,,
9,} finally {,"try {
  for (int i=0; i < numIts; i++) {
    log.debug(""Iteration "" + i);
    ServerLocator locator=getServerLocator().setBlockOnNonDurableSend(true).setBlockOnDurableSend(true).setReconnectAttempts(30).setRetryInterval(100).setConfirmationWindowSize(10 * 1024 * 1024).setCallTimeout(10000).setCallFailoverTimeout(10000);
    sf=createSessionFactoryAndWaitForTopology(locator,2);
    try {
      ClientSession createSession=sf.createSession(true,true);
      createSession.createQueue(new QueueConfiguration(FailoverTestBase.ADDRESS).setAddress(FailoverTestBase.ADDRESS));
      RemotingConnection conn=((ClientSessionInternal)createSession).getConnection();
      Thread t=new Thread(runnable);
      t.setName(""MainTEST"");
      t.start();
      long randomDelay=(long)(2000 * Math.random());
      log.debug(""Sleeping "" + randomDelay);
      Thread.sleep(randomDelay);
      log.debug(""Failing asynchronously"");
synchronized (lockFail) {
        if (log.isDebugEnabled()) {
          log.debug(""#test crashing test"");
        }
        crash(createSession);
      }
      runnable.setFailed();
      log.debug(""Fail complete"");
      t.join(TimeUnit.SECONDS.toMillis(120));
      if (t.isAlive()) {
        System.out.println(threadDump(""Thread still running from the test""));
        t.interrupt();
        fail(""Test didn't complete successful, thread still running"");
      }
      runnable.checkForExceptions();
      createSession.close();
      Assert.assertEquals(0,sf.numSessions());
      locator.close();
    }
  finally {
      locator.close();
      Assert.assertEquals(0,sf.numConnections());
    }
    if (i != numIts - 1) {
      tearDown();
      runnable.checkForExceptions();
      runnable.reset();
      setUp();
    }
  }
}
  finally {
}
",0,0,0,,
10,} finally {,"try {
  ServerLocator locator=createFactory(isNetty).setClientFailureCheckPeriod(pingPeriod).setRetryInterval(500).setRetryIntervalMultiplier(1d).setReconnectAttempts(-1).setConfirmationWindowSize(1024 * 1024);
  ClientSessionFactoryInternal factory=(ClientSessionFactoryInternal)locator.createSessionFactory();
  final CountDownLatch latchCommit=new CountDownLatch(2);
  final ArrayList<Thread> threadToBeInterrupted=new ArrayList<>();
  factory.addFailureListener(new SessionFailureListener(){
    @Override public void connectionFailed(    ActiveMQException exception,    boolean failedOver){
    }
    @Override public void connectionFailed(    final ActiveMQException me,    boolean failedOver,    String scaleDownTargetNodeID){
      connectionFailed(me,failedOver);
    }
    @Override public void beforeReconnect(    ActiveMQException exception){
      threadToBeInterrupted.add(Thread.currentThread());
      latchCommit.countDown();
    }
  }
);
  final ClientSessionInternal session=(ClientSessionInternal)factory.createSession();
  final AtomicInteger count=new AtomicInteger(0);
  final CountDownLatch latch=new CountDownLatch(1);
  session.addFailureListener(new SessionFailureListener(){
    @Override public void connectionFailed(    final ActiveMQException me,    boolean failedOver){
      count.incrementAndGet();
      latch.countDown();
    }
    @Override public void connectionFailed(    final ActiveMQException me,    boolean failedOver,    String scaleDownTargetNodeID){
      connectionFailed(me,failedOver);
    }
    @Override public void beforeReconnect(    final ActiveMQException exception){
    }
  }
);
  server.stop();
  Thread tcommitt=new Thread(){
    @Override public void run(){
      latchCommit.countDown();
      try {
        session.commit();
      }
 catch (      ActiveMQException e) {
        e.printStackTrace();
      }
    }
  }
;
  tcommitt.start();
  assertTrue(latchCommit.await(10,TimeUnit.SECONDS));
  assertEquals(1,threadToBeInterrupted.size());
  if (interruptMainThread) {
    tcommitt.interrupt();
  }
 else {
    for (    Thread tint : threadToBeInterrupted) {
      tint.interrupt();
    }
  }
  tcommitt.join(5000);
  assertFalse(tcommitt.isAlive());
  locator.close();
}
  finally {
}
",0,0,0,,
11,} finally {,"try {
  admin.stop();
  if (startServer) {
    admin.stopServer();
  }
}
  finally {
}
",0,0,0,,
12,} finally {,"try {
  Optional<String> session=mftConsulClient.getKvClient().getSession(value.getKey());
  if (session.isPresent()) {
    String sessionId=session.get();
    logger.info(""Agent connected in path {} agent id {} session {}"",value.getKey(),agentId,sessionId);
    List<Value> scheduledTransfers=mftConsulClient.getKvClient().getValues(MFTConsulClient.AGENTS_SCHEDULED_PATH + agentId);
    for (    Value v : scheduledTransfers) {
      logger.info(""Found scheduled key {}"",v.getKey());
      try {
        String[] parts=v.getKey().split(""/"");
        if (parts.length == MFTConsulClient.AGENTS_SCHEDULED_PATH.split(""/"").length + 3) {
          String scheduledSession=parts[parts.length - 2];
          String scheduledTransfer=parts[parts.length - 1];
          logger.info(""Scheduled session {} transfer {}"",scheduledSession,scheduledTransfer);
          if (!scheduledSession.equals(sessionId)) {
            logger.info(""Old transfer session found. Re scheduling to agent {}"",agentId);
            mftConsulClient.commandTransferToAgent(agentId,mapper.readValue(v.getValueAsString().get(),TransferCommand.class));
            mftConsulClient.getKvClient().deleteKey(v.getKey());
          }
 else {
            logger.info(""Session {} is already active so skipping scheduled transfer"",scheduledSession);
          }
        }
 else {
          logger.warn(""Invalid schedule key {}"",v.getKey());
        }
      }
 catch (      Exception e) {
        logger.error(""Failed to process schedule key {}"",v.getKey());
      }
    }
  }
}
 catch (Exception e) {
  logger.error(""Errored while processing live agent cache key {}"",agentId,e);
}
 finally {
}
",0,0,0,,
13,} finally {,"try {
  out=charset == null ? new BufferedWriter(new OutputStreamWriter(ps)) : new BufferedWriter(new OutputStreamWriter(ps,charset));
  if (messageSource != null) {
    try (BufferedReader in=new BufferedReader(getReader(messageSource))){
      String line;
      while ((line=in.readLine()) != null) {
        out.write(getProject().replaceProperties(line));
        out.newLine();
      }
    }
   }
 else {
    out.write(getProject().replaceProperties(buffer.substring(0)));
    out.newLine();
  }
  out.flush();
}
  finally {
}
",0,0,0,,
14,} finally {,"try (DataInputStream din=new DataInputStream(in);ByteArrayOutputStream bout=new ByteArrayOutputStream()){
  int data;
  while ((data=din.read()) != -1) {
    bout.write((byte)data);
  }
  log(""Got ByteArray, creating splash"",Project.MSG_DEBUG);
  try {
    ImageIcon img=new ImageIcon(bout.toByteArray());
    splash=new SplashScreen(img,progressRegExp,displayText);
    success=true;
  }
 catch (  Throwable e) {
    logHeadless(e);
  }
}
 catch (Exception e) {
  throw new BuildException(e);
}
 finally {
}
",0,0,0,,
15,finally,"try {
  this.rbacImpl.eraseDatabase();
}
  finally {
}
",0,0,0,,
16,finally,"try {
  observer.observe(event);
}
  finally {
}
",0,0,0,,
17,} finally {,"try {
  TransactionAttribute.REQUIRES_NEW.begin(tm);
}
 catch (SystemException se) {
}
catch (NotSupportedException nse) {
}
catch (Exception thrownE) {
  fail(""TransactionStrategy.REQUIRES_NEW.begin() threw unexpected exception when manager status is "" + managerStatus);
}
 finally {
}
",0,0,0,,
18,} finally {,"try {
  expect(tm.getStatus()).andReturn(allStates[i]);
  requiresNew_assertion(tm,allStates[i]);
  c.replay();
  TransactionToken tranToken=new TransactionToken(t,null,TransactionAttribute.REQUIRES_NEW,true);
  TransactionAttribute.REQUIRES_NEW.finish(tm,tranToken);
}
 catch (Throwable e) {
  e.printStackTrace();
  fail(""TransactionStrategy.REQUIRES_NEW.finish() threw unexpected exception when manager status is "" + allStates[i]);
}
 finally {
}
",0,0,0,,
19,} finally {,"try {
  String objClassFilter=""("" + Constants.OBJECTCLASS + ""=""+ type.getName()+ "")"";
  String flt=filter != null ? ""(&"" + objClassFilter + sanitizeFilter(filter)+ "")"" : objClassFilter;
  Filter osgiFilter=FrameworkUtil.createFilter(flt);
  tracker=new ServiceTracker(bundleContext,osgiFilter,null);
  tracker.open();
  Object svc=type.cast(tracker.waitForService(timeout));
  if (svc == null) {
    throw new IllegalStateException(""Gave up waiting for service "" + flt);
  }
  return type.cast(svc);
}
 catch (InvalidSyntaxException e) {
  throw new IllegalArgumentException(""Invalid filter"",e);
}
catch (InterruptedException e) {
  throw new RuntimeException(e);
}
 finally {
}
",0,0,0,,
20,} finally {,"try {
  return new IOperatorNodePushable(){
    @Override public void setOutputFrameWriter(    int index,    IFrameWriter writer,    RecordDescriptor recordDesc) throws HyracksDataException {
    }
    @Override public void initialize() throws HyracksDataException {
synchronized (CONTINUE_RUNNING) {
        while (!CONTINUE_RUNNING.booleanValue()) {
          try {
            CONTINUE_RUNNING.wait();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
    @Override public IFrameWriter getInputFrameWriter(    int index){
      return null;
    }
    @Override public int getInputArity(){
      return inputArity;
    }
    @Override public String getDisplayName(){
      return WaitingOperatorDescriptor.class.getSimpleName() + "".OperatorNodePushable:"" + partition;
    }
    @Override public void deinitialize() throws HyracksDataException {
    }
  }
;
}
  finally {
}
",0,0,0,,
21,} finally {,"try (FileSystem fs=newFileSystemInstance(conf)){
  targetGlobalFile=new File(String.format(""%s/dt-site-global-%s.xml"",System.getProperty(""java.io.tmpdir""),UserGroupInformation.getLoginUser().getShortUserName()));
  org.apache.hadoop.fs.Path hdfsGlobalPath=new org.apache.hadoop.fs.Path(StramClientUtils.getDTDFSConfigDir(fs,conf),StramClientUtils.DT_SITE_GLOBAL_XML_FILE);
  LOG.debug(""Copying global dt-site.xml from {} to {}"",hdfsGlobalPath,targetGlobalFile.getAbsolutePath());
  fs.copyToLocalFile(hdfsGlobalPath,new org.apache.hadoop.fs.Path(targetGlobalFile.toURI()));
  addDTSiteResources(conf,targetGlobalFile);
  if (!isDevelopmentMode()) {
    addDTSiteResources(conf,new File(StramClientUtils.getConfigDir(),StramClientUtils.DT_SITE_XML_FILE));
  }
  addDTSiteResources(conf,new File(StramClientUtils.getUserDTDirectory(),StramClientUtils.DT_SITE_XML_FILE));
}
 catch (IOException ex) {
  LOG.debug(""Caught exception when loading configuration: {}: moving on..."",ex.getMessage());
}
 finally {
}
",0,0,0,,
22,} finally {,"try {
  rbain.close();
}
  finally {
}
",0,0,0,,
23,finally {,"try {
  outKey.write(""key0"".getBytes());
  outKey.close();
  Assert.fail(""Key is longer than requested."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
24,finally {,"try {
  outValue.write(""value0"".getBytes());
  outValue.close();
  Assert.fail(""Value is shorter than expected."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
25,finally {,"try {
  outKey.write(""key0"".getBytes());
  outKey.close();
  Assert.fail(""Key is shorter than expected."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
26,finally {,"try {
  scanner.entry().getKey(buf,-1);
  Assert.fail(""Failed to handle key negative offset."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
27,finally {,"try {
  scanner.lowerBound(""keyN"".getBytes());
  Assert.fail(""Cannot search in a unsorted TFile!"");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
28,finally {,"try {
  scanner.upperBound(""keyA"".getBytes());
  Assert.fail(""Cannot search higher in a unsorted TFile!"");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
29,finally {,"try {
  scanner.seekTo(""keyM"".getBytes());
  Assert.fail(""Cannot search a unsorted TFile!"");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
30,} finally {,"try {
  MapSerializableRunnable runnable=(MapSerializableRunnable)jobInfo.jobDetail.getDetailsExt().get(""runnable"");
  runnable.restoreFromDetails(jobInfo.jobDetail);
  if (runnable instanceof ContextsAware) {
    ((ContextsAware)runnable).setContexts(_contexts);
  }
  runnable.run();
synchronized (resultsByJobId) {
    resultsByJobId.put(jobInfo.jobName,new PolledRunnableResults(JOB_STATUS.COMPLETED,null));
  }
}
 catch (Exception e) {
  __log.error("""",e);
synchronized (resultsByJobId) {
    resultsByJobId.put(jobInfo.jobName,new PolledRunnableResults(JOB_STATUS.FAILED,e));
  }
}
 finally {
}
",0,0,0,,
31,}finally{,"try {
  if (msgCtx.isServerSide()) {
    message.setProperty(XMPPConstants.IS_SERVER_SIDE,new Boolean(false));
    message.setProperty(XMPPConstants.IN_REPLY_TO,xmppOutTransportInfo.getInReplyTo());
    message.setProperty(XMPPConstants.SEQUENCE_ID,xmppOutTransportInfo.getSequenceID());
  }
 else {
    message.setProperty(XMPPConstants.IS_SERVER_SIDE,new Boolean(true));
    message.setProperty(XMPPConstants.CONTAINS_SOAP_ENVELOPE,new Boolean(true));
    message.setProperty(XMPPConstants.SERVICE_NAME,serviceName);
    String action=options.getAction();
    if (action == null) {
      AxisOperation axisOperation=msgCtx.getAxisOperation();
      if (axisOperation != null) {
        action=axisOperation.getSoapAction();
      }
    }
    if (action != null) {
      message.setProperty(XMPPConstants.ACTION,action);
    }
  }
  if (xmppConnection == null) {
    handleException(""Connection to XMPP Server is not established."");
  }
  ChatManager chatManager=xmppConnection.getChatManager();
  Chat chat=chatManager.createChat(xmppOutTransportInfo.getDestinationAccount(),null);
  boolean waitForResponse=msgCtx.getOperationContext() != null && WSDL2Constants.MEP_URI_OUT_IN.equals(msgCtx.getOperationContext().getAxisOperation().getMessageExchangePattern());
  OMElement msgElement;
  String messageToBeSent="""";
  if (XMPPConstants.XMPP_CONTENT_TYPE_STRING.equals(xmppOutTransportInfo.getContentType())) {
    OMElement soapBodyEle=msgCtx.getEnvelope().getBody();
    OMElement responseEle=soapBodyEle.getFirstElement();
    if (responseEle != null) {
      msgElement=responseEle.getFirstElement();
    }
 else {
      msgElement=responseEle;
    }
  }
 else {
    msgElement=msgCtx.getEnvelope();
  }
  messageToBeSent=msgElement.toString();
  message.setBody(messageToBeSent);
  String key=null;
  if (waitForResponse && !msgCtx.isServerSide()) {
    PacketFilter filter=new PacketTypeFilter(message.getClass());
    xmppConnection.addPacketListener(xmppClientSidePacketListener,filter);
    key=UUID.randomUUID().toString();
    xmppClientSidePacketListener.listenForResponse(key,msgCtx);
    message.setProperty(XMPPConstants.SEQUENCE_ID,key);
  }
  chat.sendMessage(message);
  log.debug(""Sent message :"" + message.toXML());
  if (waitForResponse && !msgCtx.isServerSide()) {
    xmppClientSidePacketListener.waitFor(key);
    log.debug(""Received response sucessfully"");
  }
}
 catch (XMPPException e) {
  log.error(""Error occurred while sending the message : "" + message.toXML(),e);
  handleException(""Error occurred while sending the message : "" + message.toXML(),e);
}
catch (InterruptedException e) {
  log.error(""Error occurred while sending the message : "" + message.toXML(),e);
  handleException(""Error occurred while sending the message : "" + message.toXML(),e);
}
 finally {
}
",0,0,0,,
32,} finally {,"try {
  server.start();
  System.out.print(""Server started on port "" + 8081 + ""....."");
}
  finally {
}
",0,0,0,,
33,} finally {,"try {
  server.start();
  System.out.print(""Server started on port "" + 8081 + ""....."");
}
  finally {
}
",0,0,0,,
34,} finally {,"try {
  server.start();
  System.out.print(""Server started on port "" + 8081 + ""....."");
}
  finally {
}
",0,0,0,,
35,finally{,"try {
  StorageManager storageManager=SandeshaUtil.getSandeshaStorageManager(ctx,ctx.getAxisConfiguration());
  InvokerBeanMgr storageMapMgr=storageManager.getInvokerBeanMgr();
  RMDBeanMgr rmdBeanMgr=storageManager.getRMDBeanMgr();
  RMDBean rMDBean=rmdBeanMgr.retrieve(sequenceID);
  if (rMDBean != null) {
    long firstMessageInOutOfOrderWindow=rMDBean.getNextMsgNoToProcess();
    InvokerBean selector=new InvokerBean();
    selector.setSequenceID(sequenceID);
    Iterator<InvokerBean> stMapIt=storageMapMgr.find(selector).iterator();
    long highestMsgNumberInvoked=0;
    Transaction transaction=null;
    while (stMapIt.hasNext()) {
      try {
        transaction=storageManager.getTransaction();
        InvokerBean invoker=(InvokerBean)stMapIt.next();
        String workId=sequenceID;
        InvokerWorker worker=new InvokerWorker(ctx,invoker);
        worker.forceOutOfOrder();
        worker.setPooled();
        worker.setWorkId(workId);
        Runnable work=worker;
        ContextManager contextMgr=SandeshaUtil.getContextManager(ctx);
        if (contextMgr != null) {
          work=contextMgr.wrapWithContext(work,invoker.getContext());
        }
        worker.getLock().addWork(workId,worker);
        ctx.getThreadPool().execute(work);
        long msgNumber=invoker.getMsgNo();
        if (msgNumber > highestMsgNumberInvoked) {
          highestMsgNumberInvoked=invoker.getMsgNo();
          rMDBean.setNextMsgNoToProcess(highestMsgNumberInvoked + 1);
          if (allowLaterDeliveryOfMissingMessages) {
            Range r=new Range(firstMessageInOutOfOrderWindow,highestMsgNumberInvoked);
            RangeString rangeString=null;
            if (rMDBean.getOutOfOrderRanges() == null) {
              rangeString=new RangeString();
            }
 else {
              rangeString=rMDBean.getOutOfOrderRanges();
            }
            rangeString.addRange(r);
            rMDBean.setOutOfOrderRanges(rangeString);
          }
          rmdBeanMgr.update(rMDBean);
        }
        if (transaction != null && transaction.isActive())         transaction.commit();
        transaction=null;
      }
 catch (      Exception e) {
        if (log.isDebugEnabled())         log.debug(""Exception"",e);
      }
 finally {
        if (transaction != null && transaction.isActive()) {
          transaction.rollback();
          transaction=null;
        }
      }
    }
  }
}
  finally {
}
",0,0,0,,
36,} finally {,"try {
  computeService=getComputeService(config().getBag());
  Set<? extends NodeMetadata> destroyed=computeService.destroyNodesMatching(withIds(instanceId));
  LOG.debug(""Destroyed nodes %s%n"",destroyed);
}
  finally {
}
",0,0,0,,
37,} finally {,"try {
  base.evaluate();
  verify();
}
  finally {
}
",0,0,0,,
38,} finally {,"try {
  stream.close();
}
  finally {
}
",0,0,0,,
39,} finally {,"try {
  stream.close();
}
  finally {
}
",0,0,0,,
40,} finally {,"try {
  int statusCode=client.executeMethod(method);
  if (statusCode != HttpStatus.SC_OK) {
    System.out.println(""Http Error: "" + method.getStatusLine());
  }
  BufferedReader reader=new BufferedReader(new InputStreamReader(method.getResponseBodyAsStream(),method.getResponseCharSet()));
  String json_str="""";
  String str;
  while ((str=reader.readLine()) != null) {
    json_str+=str;
  }
  String cluster=""demo"";
  DatabaseWriter db=new DatabaseWriter(cluster);
  JSONArray json_array=(JSONArray)JSONValue.parse(json_str);
  for (int i=0; i < json_array.size(); i++) {
    JSONObject row_obj=(JSONObject)json_array.get(i);
    String queryString=getDatabaseQuery(table,row_obj);
    Macro m=new Macro(startTime,endTime,queryString);
    ResultSet rs=db.query(m.toString());
    rs.next();
    ResultSetMetaData md=rs.getMetaData();
    Iterator names=row_obj.keySet().iterator();
    while (names.hasNext()) {
      String name=(String)names.next();
      String jsonValue=(String)row_obj.get(name);
      String dbValue=rs.getString(name);
      int dbCol=rs.findColumn(name);
      int dbType=md.getColumnType(dbCol);
      if (dbType == 93) {
        dbValue=Long.toString(rs.getTimestamp(name).getTime());
      }
      assertEquals(dbValue,jsonValue);
    }
  }
  db.close();
}
 catch (SQLException e) {
  System.out.println(""Exception: "" + e.toString() + "":""+ e.getMessage());
  System.out.println(""Exception: "" + e.toString() + "":""+ e.getSQLState());
  System.out.println(""Exception: "" + e.toString() + "":""+ e.getErrorCode());
  fail(""SQL Error:"" + ExceptionUtil.getStackTrace(e));
}
catch (Exception eOther) {
  System.out.println(""Other Exception: "" + eOther.toString());
  eOther.printStackTrace();
  fail(""Error:"" + ExceptionUtil.getStackTrace(eOther));
}
 finally {
}
",0,0,0,,
41,} finally {,"try {
  GlobalLoadBalancerRule gslbRule=_gslbService.createGlobalLoadBalancerRule(this);
  this.setEntityId(gslbRule.getId());
  this.setEntityUuid(gslbRule.getUuid());
  CallContext.current().setEventDetails(""Rule Id: "" + getEntityId());
}
 catch (Exception ex) {
  s_logger.warn(""Exception: "",ex);
  throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage());
}
 finally {
}
",0,0,0,,
42,} finally {,"try {
  VirtualMachineMO vmMo=null;
  if (cleanupMaid.getDatacenterMorValue() != null) {
    DatacenterMO dcMo=new DatacenterMO(context,""Datacenter"",cleanupMaid.getDatacenterMorValue());
    vmMo=dcMo.findVm(cleanupMaid.getVmName());
  }
 else {
    assert (cleanupMaid.getHostMorValue() != null);
    HostMO hostMo=new HostMO(context,""HostSystem"",cleanupMaid.getHostMorValue());
    ClusterMO clusterMo=new ClusterMO(context,hostMo.getHyperHostCluster());
    vmMo=clusterMo.findVmOnHyperHost(cleanupMaid.getVmName());
  }
  if (vmMo != null) {
    s_logger.info(""Found left over dummy VM "" + cleanupMaid.getVmName() + "", destroy it"");
    vmMo.destroy();
  }
}
 catch (Throwable e) {
  s_logger.warn(""Unable to destroy left over dummy VM "" + cleanupMaid.getVmName());
}
 finally {
}
",0,0,0,,
43,} finally {,"try {
  VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  VmwareHypervisorHost hyperHost=getHyperHost(context);
  dcMo=new DatacenterMO(hyperHost.getContext(),hyperHost.getHyperHostDatacenter());
  VirtualMachineMO vmInVcenter=dcMo.checkIfVmAlreadyExistsInVcenter(vmNameOnVcenter,vmInternalCSName);
  if (vmInVcenter != null) {
    vmAlreadyExistsInVcenter=true;
    String msg=""VM with name: "" + vmNameOnVcenter + "" already exists in vCenter."";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  DiskTO[] specDisks=vmSpec.getDisks();
  String guestOsId=getGuestOsIdFromVmSpec(vmSpec,deployAsIs);
  DiskTO[] disks=validateDisks(vmSpec.getDisks());
  assert (disks.length > 0);
  NicTO[] nics=vmSpec.getNics();
  HashMap<String,Pair<ManagedObjectReference,DatastoreMO>> dataStoresDetails=inferDatastoreDetailsFromDiskInfo(hyperHost,context,disks,cmd);
  if ((dataStoresDetails == null) || (dataStoresDetails.isEmpty())) {
    String msg=""Unable to locate datastore details of the volumes to be attached"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  VirtualMachineDiskInfoBuilder diskInfoBuilder=null;
  VirtualDevice[] nicDevices=null;
  VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(vmInternalCSName);
  DiskControllerType systemVmScsiControllerType=DiskControllerType.lsilogic;
  int firstScsiControllerBusNum=0;
  int numScsiControllerForSystemVm=1;
  boolean hasSnapshot=false;
  List<Pair<Integer,ManagedObjectReference>> diskDatastores=null;
  if (vmMo != null) {
    s_logger.info(""VM "" + vmInternalCSName + "" already exists, tear down devices for reconfiguration"");
    if (getVmPowerState(vmMo) != PowerState.PowerOff)     vmMo.safePowerOff(_shutdownWaitMs);
    diskDatastores=vmMo.getAllDiskDatastores();
    diskInfoBuilder=vmMo.getDiskInfoBuilder();
    hasSnapshot=vmMo.hasSnapshot();
    nicDevices=vmMo.getNicDevices();
    tearDownVmDevices(vmMo,hasSnapshot,deployAsIs);
    ensureDiskControllersInternal(vmMo,systemVm,controllerInfo,systemVmScsiControllerType,numScsiControllerForSystemVm,firstScsiControllerBusNum,deployAsIs);
  }
 else {
    ManagedObjectReference morDc=hyperHost.getHyperHostDatacenter();
    assert (morDc != null);
    vmMo=hyperHost.findVmOnPeerHyperHost(vmInternalCSName);
    if (vmMo != null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""Found vm "" + vmInternalCSName + "" at other host, relocate to ""+ hyperHost.getHyperHostName());
      }
      takeVmFromOtherHyperHost(hyperHost,vmInternalCSName);
      if (getVmPowerState(vmMo) != PowerState.PowerOff)       vmMo.safePowerOff(_shutdownWaitMs);
      diskInfoBuilder=vmMo.getDiskInfoBuilder();
      hasSnapshot=vmMo.hasSnapshot();
      diskDatastores=vmMo.getAllDiskDatastores();
      tearDownVmDevices(vmMo,hasSnapshot,deployAsIs);
      ensureDiskControllersInternal(vmMo,systemVm,controllerInfo,systemVmScsiControllerType,numScsiControllerForSystemVm,firstScsiControllerBusNum,deployAsIs);
    }
 else {
      VirtualMachineMO existingVmInDc=dcMo.findVm(vmInternalCSName);
      if (existingVmInDc != null) {
        s_logger.debug(""Found VM: "" + vmInternalCSName + "" on a host in a different cluster. Unregistering the exisitng VM."");
        existingVmName=existingVmInDc.getName();
        existingVmFileInfo=existingVmInDc.getFileInfo();
        existingVmFileLayout=existingVmInDc.getFileLayout();
        existingDatastores=existingVmInDc.getAllDatastores();
        existingVmInDc.unregisterVm();
      }
      if (deployAsIs) {
        vmMo=hyperHost.findVmOnHyperHost(vmInternalCSName);
        if (vmMo == null) {
          s_logger.info(""Cloned deploy-as-is VM "" + vmInternalCSName + "" is not in this host, relocating it"");
          vmMo=takeVmFromOtherHyperHost(hyperHost,vmInternalCSName);
        }
      }
 else {
        DiskTO rootDisk=null;
        for (        DiskTO vol : disks) {
          if (vol.getType() == Volume.Type.ROOT) {
            rootDisk=vol;
          }
        }
        Pair<ManagedObjectReference,DatastoreMO> rootDiskDataStoreDetails=getDatastoreThatDiskIsOn(dataStoresDetails,rootDisk);
        assert (vmSpec.getMinSpeed() != null) && (rootDiskDataStoreDetails != null);
        DatastoreMO dsRootVolumeIsOn=rootDiskDataStoreDetails.second();
        if (dsRootVolumeIsOn == null) {
          String msg=""Unable to locate datastore details of root volume"";
          s_logger.error(msg);
          throw new Exception(msg);
        }
        if (rootDisk.getDetails().get(DiskTO.PROTOCOL_TYPE) != null && rootDisk.getDetails().get(DiskTO.PROTOCOL_TYPE).equalsIgnoreCase(""DatastoreCluster"")) {
          if (diskInfoBuilder != null) {
            DatastoreMO diskDatastoreMofromVM=getDataStoreWhereDiskExists(hyperHost,context,diskInfoBuilder,rootDisk,diskDatastores);
            if (diskDatastoreMofromVM != null) {
              String actualPoolUuid=diskDatastoreMofromVM.getCustomFieldValue(CustomFieldConstants.CLOUD_UUID);
              if (!actualPoolUuid.equalsIgnoreCase(rootDisk.getData().getDataStore().getUuid())) {
                dsRootVolumeIsOn=diskDatastoreMofromVM;
              }
            }
          }
        }
        boolean vmFolderExists=dsRootVolumeIsOn.folderExists(String.format(""[%s]"",dsRootVolumeIsOn.getName()),vmNameOnVcenter);
        String vmxFileFullPath=dsRootVolumeIsOn.searchFileInSubFolders(vmNameOnVcenter + "".vmx"",false,VmwareManager.s_vmwareSearchExcludeFolder.value());
        if (vmFolderExists && vmxFileFullPath != null) {
          registerVm(vmNameOnVcenter,dsRootVolumeIsOn);
          vmMo=hyperHost.findVmOnHyperHost(vmInternalCSName);
          if (vmMo != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""Found registered vm "" + vmInternalCSName + "" at host ""+ hyperHost.getHyperHostName());
            }
          }
          tearDownVm(vmMo);
        }
 else         if (!hyperHost.createBlankVm(vmNameOnVcenter,vmInternalCSName,vmSpec.getCpus(),vmSpec.getMaxSpeed().intValue(),getReservedCpuMHZ(vmSpec),vmSpec.getLimitCpuUse(),(int)(vmSpec.getMaxRam() / ResourceType.bytesToMiB),getReservedMemoryMb(vmSpec),guestOsId,rootDiskDataStoreDetails.first(),false,controllerInfo,systemVm)) {
          throw new Exception(""Failed to create VM. vmName: "" + vmInternalCSName);
        }
      }
    }
    vmMo=hyperHost.findVmOnHyperHost(vmInternalCSName);
    if (vmMo == null) {
      throw new Exception(""Failed to find the newly create or relocated VM. vmName: "" + vmInternalCSName);
    }
  }
  if (deployAsIs) {
    s_logger.info(""Mapping VM disks to spec disks and tearing down datadisks (if any)"");
    mapSpecDisksToClonedDisksAndTearDownDatadisks(vmMo,vmInternalCSName,specDisks);
  }
  int disksChanges=getDisksChangesNumberFromDisksSpec(disks,deployAsIs);
  int totalChangeDevices=disksChanges + nics.length;
  if (deployAsIsInfo != null && deployAsIsInfo.getProperties() != null) {
    totalChangeDevices++;
  }
  DiskTO volIso=null;
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    totalChangeDevices++;
  }
 else {
    volIso=getIsoDiskTO(disks);
    if (volIso == null && !deployAsIs) {
      totalChangeDevices++;
    }
  }
  VirtualMachineConfigSpec vmConfigSpec=new VirtualMachineConfigSpec();
  int i=0;
  int ideUnitNumber=!deployAsIs ? 0 : vmMo.getNextIDEDeviceNumber();
  int scsiUnitNumber=!deployAsIs ? 0 : vmMo.getNextScsiDiskDeviceNumber();
  int ideControllerKey=vmMo.getIDEDeviceControllerKey();
  int scsiControllerKey=vmMo.getScsiDeviceControllerKeyNoException();
  VirtualDeviceConfigSpec[] deviceConfigSpecArray=new VirtualDeviceConfigSpec[totalChangeDevices];
  DiskTO[] sortedDisks=sortVolumesByDeviceId(disks);
  VmwareHelper.setBasicVmConfig(vmConfigSpec,vmSpec.getCpus(),vmSpec.getMaxSpeed(),getReservedCpuMHZ(vmSpec),(int)(vmSpec.getMaxRam() / (1024 * 1024)),getReservedMemoryMb(vmSpec),guestOsId,vmSpec.getLimitCpuUse(),deployAsIs);
  int numCoresPerSocket=1;
  String coresPerSocket=vmSpec.getDetails().get(VmDetailConstants.CPU_CORE_PER_SOCKET);
  if (coresPerSocket != null) {
    String apiVersion=HypervisorHostHelper.getVcenterApiVersion(vmMo.getContext());
    if (apiVersion.compareTo(""5.0"") >= 0) {
      numCoresPerSocket=NumbersUtil.parseInt(coresPerSocket,1);
      vmConfigSpec.setNumCoresPerSocket(numCoresPerSocket);
    }
  }
  vmConfigSpec.setMemoryHotAddEnabled(vmMo.isMemoryHotAddSupported(guestOsId));
  String hostApiVersion=((HostMO)hyperHost).getHostAboutInfo().getApiVersion();
  if (numCoresPerSocket > 1 && hostApiVersion.compareTo(""5.0"") < 0) {
    s_logger.warn(""Dynamic scaling of CPU is not supported for Virtual Machines with multi-core vCPUs in case of ESXi hosts 4.1 and prior. Hence CpuHotAdd will not be"" + "" enabled for Virtual Machine: "" + vmInternalCSName);
    vmConfigSpec.setCpuHotAddEnabled(false);
  }
 else {
    vmConfigSpec.setCpuHotAddEnabled(vmMo.isCpuHotAddSupported(guestOsId));
  }
  configNestedHVSupport(vmMo,vmSpec,vmConfigSpec);
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    Pair<String,Long> secStoreUrlAndId=mgr.getSecondaryStorageStoreUrlAndId(Long.parseLong(_dcId));
    String secStoreUrl=secStoreUrlAndId.first();
    Long secStoreId=secStoreUrlAndId.second();
    if (secStoreUrl == null) {
      String msg=""secondary storage for dc "" + _dcId + "" is not ready yet?"";
      throw new Exception(msg);
    }
    mgr.prepareSecondaryStorageStore(secStoreUrl,secStoreId);
    ManagedObjectReference morSecDs=prepareSecondaryDatastoreOnHost(secStoreUrl);
    if (morSecDs == null) {
      String msg=""Failed to prepare secondary storage on host, secondary store url: "" + secStoreUrl;
      throw new Exception(msg);
    }
    DatastoreMO secDsMo=new DatastoreMO(hyperHost.getContext(),morSecDs);
    deviceConfigSpecArray[i]=new VirtualDeviceConfigSpec();
    Pair<VirtualDevice,Boolean> isoInfo=VmwareHelper.prepareIsoDevice(vmMo,String.format(""[%s] systemvm/%s"",secDsMo.getName(),mgr.getSystemVMIsoFileNameOnDatastore()),secDsMo.getMor(),true,true,ideUnitNumber++,i + 1);
    deviceConfigSpecArray[i].setDevice(isoInfo.first());
    if (isoInfo.second()) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""Prepare ISO volume at new device "" + _gson.toJson(isoInfo.first()));
      deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.ADD);
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""Prepare ISO volume at existing device "" + _gson.toJson(isoInfo.first()));
      deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.EDIT);
    }
    i++;
  }
 else   if (!deployAsIs) {
    if (volIso != null) {
      for (      DiskTO vol : disks) {
        if (vol.getType() == Volume.Type.ISO) {
          configureIso(hyperHost,vmMo,vol,deviceConfigSpecArray,ideUnitNumber++,i);
          i++;
        }
      }
    }
 else {
      deviceConfigSpecArray[i]=new VirtualDeviceConfigSpec();
      Pair<VirtualDevice,Boolean> isoInfo=VmwareHelper.prepareIsoDevice(vmMo,null,null,true,true,ideUnitNumber++,i + 1);
      deviceConfigSpecArray[i].setDevice(isoInfo.first());
      if (isoInfo.second()) {
        if (s_logger.isDebugEnabled())         s_logger.debug(""Prepare ISO volume at existing device "" + _gson.toJson(isoInfo.first()));
        deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.ADD);
      }
 else {
        if (s_logger.isDebugEnabled())         s_logger.debug(""Prepare ISO volume at existing device "" + _gson.toJson(isoInfo.first()));
        deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.EDIT);
      }
      i++;
    }
  }
  int controllerKey;
  if (multipleIsosAtached(sortedDisks) && deployAsIs) {
    sortedDisks=getDisks(sortedDisks);
  }
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO) {
      if (deployAsIs) {
        configureIso(hyperHost,vmMo,vol,deviceConfigSpecArray,ideUnitNumber++,i);
        i++;
      }
      continue;
    }
    if (deployAsIs && vol.getType() == Volume.Type.ROOT) {
      rootDiskTO=vol;
      resizeRootDiskOnVMStart(vmMo,rootDiskTO,hyperHost,context);
      continue;
    }
    VirtualMachineDiskInfo matchingExistingDisk=getMatchingExistingDisk(diskInfoBuilder,vol,hyperHost,context);
    String diskController=getDiskController(vmMo,matchingExistingDisk,vol,controllerInfo,deployAsIs);
    if (DiskControllerType.getType(diskController) == DiskControllerType.osdefault) {
      diskController=vmMo.getRecommendedDiskController(null);
    }
    if (DiskControllerType.getType(diskController) == DiskControllerType.ide) {
      controllerKey=vmMo.getIDEControllerKey(ideUnitNumber);
      if (vol.getType() == Volume.Type.DATADISK) {
        if (vmMo.getNumberOfVirtualDisks() > 3) {
          throw new CloudRuntimeException(""Found more than 3 virtual disks attached to this VM ["" + vmMo.getVmName() + ""]. Unable to implement the disks over ""+ diskController+ "" controller, as maximum number of devices supported over IDE controller is 4 includeing CDROM device."");
        }
      }
    }
 else {
      if (VmwareHelper.isReservedScsiDeviceNumber(scsiUnitNumber)) {
        scsiUnitNumber++;
      }
      controllerKey=vmMo.getScsiDiskControllerKeyNoException(diskController,scsiUnitNumber);
      if (controllerKey == -1) {
        Ternary<Integer,Integer,DiskControllerType> vmScsiControllerInfo=vmMo.getScsiControllerInfo();
        DiskControllerType existingControllerType=vmScsiControllerInfo.third();
        controllerKey=vmMo.getScsiDiskControllerKeyNoException(existingControllerType.toString(),scsiUnitNumber);
      }
    }
    if (!hasSnapshot) {
      deviceConfigSpecArray[i]=new VirtualDeviceConfigSpec();
      VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
      DataStoreTO primaryStore=volumeTO.getDataStore();
      Map<String,String> details=vol.getDetails();
      boolean managed=false;
      String iScsiName=null;
      if (details != null) {
        managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
        iScsiName=details.get(DiskTO.IQN);
      }
      String primaryStoreUuid=primaryStore.getUuid();
      String datastoreName=managed ? VmwareResource.getDatastoreName(iScsiName) : primaryStoreUuid;
      Pair<ManagedObjectReference,DatastoreMO> volumeDsDetails=dataStoresDetails.get(datastoreName);
      assert (volumeDsDetails != null);
      if (volumeDsDetails == null) {
        throw new Exception(""Primary datastore "" + primaryStore.getUuid() + "" is not mounted on host."");
      }
      if (vol.getDetails().get(DiskTO.PROTOCOL_TYPE) != null && vol.getDetails().get(DiskTO.PROTOCOL_TYPE).equalsIgnoreCase(""DatastoreCluster"")) {
        if (diskInfoBuilder != null && matchingExistingDisk != null) {
          String[] diskChain=matchingExistingDisk.getDiskChain();
          if (diskChain != null && diskChain.length > 0) {
            DatastoreFile file=new DatastoreFile(diskChain[0]);
            if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
              if (s_logger.isInfoEnabled())               s_logger.info(""Detected disk-chain top file change on volume: "" + volumeTO.getId() + "" ""+ volumeTO.getPath()+ "" -> ""+ file.getFileBaseName());
              volumeTO.setPath(file.getFileBaseName());
            }
          }
          DatastoreMO diskDatastoreMofromVM=getDataStoreWhereDiskExists(hyperHost,context,diskInfoBuilder,vol,diskDatastores);
          if (diskDatastoreMofromVM != null) {
            String actualPoolUuid=diskDatastoreMofromVM.getCustomFieldValue(CustomFieldConstants.CLOUD_UUID);
            if (actualPoolUuid != null && !actualPoolUuid.equalsIgnoreCase(primaryStore.getUuid())) {
              volumeDsDetails=new Pair<>(diskDatastoreMofromVM.getMor(),diskDatastoreMofromVM);
              if (s_logger.isInfoEnabled())               s_logger.info(""Detected datastore uuid change on volume: "" + volumeTO.getId() + "" ""+ primaryStore.getUuid()+ "" -> ""+ actualPoolUuid);
              ((PrimaryDataStoreTO)primaryStore).setUuid(actualPoolUuid);
            }
          }
        }
      }
      String[] diskChain=syncDiskChain(dcMo,vmMo,vol,matchingExistingDisk,volumeDsDetails.second());
      int deviceNumber=-1;
      if (controllerKey == vmMo.getIDEControllerKey(ideUnitNumber)) {
        deviceNumber=ideUnitNumber % VmwareHelper.MAX_ALLOWED_DEVICES_IDE_CONTROLLER;
        ideUnitNumber++;
      }
 else {
        deviceNumber=scsiUnitNumber % VmwareHelper.MAX_ALLOWED_DEVICES_SCSI_CONTROLLER;
        scsiUnitNumber++;
      }
      VirtualDevice device=VmwareHelper.prepareDiskDevice(vmMo,null,controllerKey,diskChain,volumeDsDetails.first(),deviceNumber,i + 1);
      diskStoragePolicyId=volumeTO.getvSphereStoragePolicyId();
      if (!StringUtils.isEmpty(diskStoragePolicyId)) {
        PbmProfileManagerMO profMgrMo=new PbmProfileManagerMO(context);
        diskProfileSpec=profMgrMo.getProfileSpec(diskStoragePolicyId);
        deviceConfigSpecArray[i].getProfile().add(diskProfileSpec);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(String.format(""Adding vSphere storage profile: %s to virtual disk [%s]"",diskStoragePolicyId,_gson.toJson(device)));
        }
      }
      if (vol.getType() == Volume.Type.ROOT) {
        rootDiskTO=vol;
        vmStoragePolicyId=diskStoragePolicyId;
        vmProfileSpec=diskProfileSpec;
      }
      deviceConfigSpecArray[i].setDevice(device);
      deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.ADD);
      if (s_logger.isDebugEnabled())       s_logger.debug(""Prepare volume at new device "" + _gson.toJson(device));
      i++;
    }
 else {
      if (controllerKey == vmMo.getIDEControllerKey(ideUnitNumber))       ideUnitNumber++;
 else       scsiUnitNumber++;
    }
  }
  if (StringUtils.isNotBlank(guestOsId) && guestOsId.startsWith(""darwin"")) {
    VirtualDevice[] devices=vmMo.getMatchedDevices(new Class<?>[]{VirtualUSBController.class});
    if (devices.length == 0) {
      s_logger.debug(""No USB Controller device on VM Start. Add USB Controller device for Mac OS VM "" + vmInternalCSName);
      VirtualDevice usbControllerDevice=VmwareHelper.prepareUSBControllerDevice();
      deviceConfigSpecArray[i]=new VirtualDeviceConfigSpec();
      deviceConfigSpecArray[i].setDevice(usbControllerDevice);
      deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.ADD);
      if (s_logger.isDebugEnabled())       s_logger.debug(""Prepare USB controller at new device "" + _gson.toJson(deviceConfigSpecArray[i]));
      i++;
    }
 else {
      s_logger.debug(""USB Controller device exists on VM Start for Mac OS VM "" + vmInternalCSName);
    }
  }
  VirtualDevice nic;
  int nicMask=0;
  int nicCount=0;
  if (vmSpec.getType() == VirtualMachine.Type.DomainRouter) {
    int extraPublicNics=mgr.getRouterExtraPublicNics();
    if (extraPublicNics > 0 && vmSpec.getDetails().containsKey(""PeerRouterInstanceName"")) {
      String peerRouterInstanceName=vmSpec.getDetails().get(""PeerRouterInstanceName"");
      VirtualMachineMO peerVmMo=hyperHost.findVmOnHyperHost(peerRouterInstanceName);
      if (peerVmMo == null) {
        peerVmMo=hyperHost.findVmOnPeerHyperHost(peerRouterInstanceName);
      }
      if (peerVmMo != null) {
        String oldMacSequence=generateMacSequence(nics);
        for (int nicIndex=nics.length - extraPublicNics; nicIndex < nics.length; nicIndex++) {
          VirtualDevice nicDevice=peerVmMo.getNicDeviceByIndex(nics[nicIndex].getDeviceId());
          if (nicDevice != null) {
            String mac=((VirtualEthernetCard)nicDevice).getMacAddress();
            if (mac != null) {
              s_logger.info(""Use same MAC as previous RvR, the MAC is "" + mac + "" for extra NIC with device id: ""+ nics[nicIndex].getDeviceId());
              nics[nicIndex].setMac(mac);
            }
          }
        }
        if (!StringUtils.isBlank(vmSpec.getBootArgs())) {
          String newMacSequence=generateMacSequence(nics);
          vmSpec.setBootArgs(replaceNicsMacSequenceInBootArgs(oldMacSequence,newMacSequence,vmSpec));
        }
      }
    }
  }
  VirtualEthernetCardType nicDeviceType;
  NiciraNvpApiVersion.logNiciraApiVersion();
  Map<String,String> nicUuidToDvSwitchUuid=new HashMap<String,String>();
  for (  NicTO nicTo : sortNicsByDeviceId(nics)) {
    s_logger.info(""Prepare NIC device based on NicTO: "" + _gson.toJson(nicTo));
    String adapterTypeStr=deployAsIs ? mapAdapterType(deployAsIsInfo.getNicAdapterMap().get(nicTo.getDeviceId())) : vmSpec.getDetails().get(VmDetailConstants.NIC_ADAPTER);
    nicDeviceType=VirtualEthernetCardType.valueOf(adapterTypeStr);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""VM "" + vmInternalCSName + "" will be started with NIC device type: ""+ nicDeviceType+ "" on NIC device ""+ nicTo.getDeviceId());
    }
    boolean configureVServiceInNexus=(nicTo.getType() == TrafficType.Guest) && (vmSpec.getDetails().containsKey(""ConfigureVServiceInNexus""));
    VirtualMachine.Type vmType=cmd.getVirtualMachine().getType();
    Pair<ManagedObjectReference,String> networkInfo=prepareNetworkFromNicInfo(vmMo.getRunningHost(),nicTo,configureVServiceInNexus,vmType);
    if ((nicTo.getBroadcastType() != BroadcastDomainType.Lswitch) || (nicTo.getBroadcastType() == BroadcastDomainType.Lswitch && NiciraNvpApiVersion.isApiVersionLowerThan(""4.2""))) {
      if (VmwareHelper.isDvPortGroup(networkInfo.first())) {
        String dvSwitchUuid;
        ManagedObjectReference dcMor=hyperHost.getHyperHostDatacenter();
        DatacenterMO dataCenterMo=new DatacenterMO(context,dcMor);
        ManagedObjectReference dvsMor=dataCenterMo.getDvSwitchMor(networkInfo.first());
        dvSwitchUuid=dataCenterMo.getDvSwitchUuid(dvsMor);
        s_logger.info(""Preparing NIC device on dvSwitch : "" + dvSwitchUuid);
        nic=VmwareHelper.prepareDvNicDevice(vmMo,networkInfo.first(),nicDeviceType,networkInfo.second(),dvSwitchUuid,nicTo.getMac(),i + 1,true,true);
        if (nicTo.getUuid() != null) {
          nicUuidToDvSwitchUuid.put(nicTo.getUuid(),dvSwitchUuid);
        }
      }
 else {
        s_logger.info(""Preparing NIC device on network "" + networkInfo.second());
        nic=VmwareHelper.prepareNicDevice(vmMo,networkInfo.first(),nicDeviceType,networkInfo.second(),nicTo.getMac(),i + 1,true,true);
      }
    }
 else {
      nic=VmwareHelper.prepareNicOpaque(vmMo,nicDeviceType,networkInfo.second(),nicTo.getMac(),i + 1,true,true);
    }
    deviceConfigSpecArray[i]=new VirtualDeviceConfigSpec();
    deviceConfigSpecArray[i].setDevice(nic);
    deviceConfigSpecArray[i].setOperation(VirtualDeviceConfigSpecOperation.ADD);
    if (s_logger.isDebugEnabled())     s_logger.debug(""Prepare NIC at new device "" + _gson.toJson(deviceConfigSpecArray[i]));
    if (nicCount < 3)     nicMask|=(1 << nicCount);
    i++;
    nicCount++;
  }
  for (int j=0; j < i; j++)   vmConfigSpec.getDeviceChange().add(deviceConfigSpecArray[j]);
  ArrayList<OptionValue> extraOptions=new ArrayList<OptionValue>();
  configBasicExtraOption(extraOptions,vmSpec);
  if (deployAsIs) {
    setDeployAsIsProperties(vmMo,deployAsIsInfo,vmConfigSpec,hyperHost);
  }
  configNvpExtraOption(extraOptions,vmSpec,nicUuidToDvSwitchUuid);
  configCustomExtraOption(extraOptions,vmSpec);
  VirtualMachine.Type vmType=cmd.getVirtualMachine().getType();
  if (vmType.equals(VirtualMachine.Type.NetScalerVm)) {
    NicTO mgmtNic=vmSpec.getNics()[0];
    OptionValue option=new OptionValue();
    option.setKey(""machine.id"");
    option.setValue(""ip="" + mgmtNic.getIp() + ""&netmask=""+ mgmtNic.getNetmask()+ ""&gateway=""+ mgmtNic.getGateway());
    extraOptions.add(option);
  }
  configureVNC(vmSpec,extraOptions,vmConfigSpec,hyperHost,vmInternalCSName);
  configureVideoCard(vmMo,vmSpec,vmConfigSpec);
  setBootOptions(vmSpec,bootMode,vmConfigSpec);
  if (!StringUtils.isEmpty(vmStoragePolicyId)) {
    vmConfigSpec.getVmProfile().add(vmProfileSpec);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(String.format(""Configuring the VM %s with storage policy: %s"",vmInternalCSName,vmStoragePolicyId));
    }
  }
  if (!vmMo.configureVm(vmConfigSpec)) {
    throw new Exception(""Failed to configure VM before start. vmName: "" + vmInternalCSName);
  }
  if (vmSpec.getType() == VirtualMachine.Type.DomainRouter) {
    hyperHost.setRestartPriorityForVM(vmMo,DasVmPriority.HIGH.value());
  }
  final Map<String,String> vmDetails=cmd.getVirtualMachine().getDetails();
  if (!deployAsIs && rootDiskTO != null && !hasSnapshot && (vmDetails != null && vmDetails.containsKey(ApiConstants.ROOT_DISK_SIZE))) {
    resizeRootDiskOnVMStart(vmMo,rootDiskTO,hyperHost,context);
  }
  vmMo.setCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK,String.valueOf(nicMask));
  postNvpConfigBeforeStart(vmMo,vmSpec);
  Map<String,Map<String,String>> iqnToData=new HashMap<>();
  postDiskConfigBeforeStart(vmMo,vmSpec,sortedDisks,ideControllerKey,scsiControllerKey,iqnToData,hyperHost,context);
  if (!vmMo.powerOn()) {
    throw new Exception(""Failed to start VM. vmName: "" + vmInternalCSName + "" with hostname ""+ vmNameOnVcenter);
  }
  StartAnswer startAnswer=new StartAnswer(cmd);
  startAnswer.setIqnToData(iqnToData);
  if (existingVmName != null && existingVmFileLayout != null) {
    List<String> vmDatastoreNames=new ArrayList<String>();
    for (    DatastoreMO vmDatastore : vmMo.getAllDatastores()) {
      vmDatastoreNames.add(vmDatastore.getName());
    }
    List<String> skipDatastores=new ArrayList<String>();
    for (    DatastoreMO existingDatastore : existingDatastores) {
      if (vmDatastoreNames.contains(existingDatastore.getName())) {
        skipDatastores.add(existingDatastore.getName());
      }
    }
    deleteUnregisteredVmFiles(existingVmFileLayout,dcMo,true,skipDatastores);
  }
  return startAnswer;
}
 catch (Throwable e) {
  if (e instanceof RemoteException) {
    s_logger.warn(""Encounter remote exception to vCenter, invalidate VMware session context"");
    invalidateServiceContext();
  }
  String msg=""StartCommand failed due to "" + VmwareHelper.getExceptionMessage(e);
  s_logger.warn(msg,e);
  StartAnswer startAnswer=new StartAnswer(cmd,msg);
  if (vmAlreadyExistsInVcenter) {
    startAnswer.setContextParam(""stopRetry"",""true"");
  }
  if (existingVmName != null && existingVmFileInfo != null) {
    s_logger.debug(""Since VM start failed, registering back an existing VM: "" + existingVmName + "" that was unregistered"");
    try {
      DatastoreFile fileInDatastore=new DatastoreFile(existingVmFileInfo.getVmPathName());
      DatastoreMO existingVmDsMo=new DatastoreMO(dcMo.getContext(),dcMo.findDatastore(fileInDatastore.getDatastoreName()));
      registerVm(existingVmName,existingVmDsMo);
    }
 catch (    Exception ex) {
      String message=""Failed to register an existing VM: "" + existingVmName + "" due to ""+ VmwareHelper.getExceptionMessage(ex);
      s_logger.warn(message,ex);
    }
  }
  return startAnswer;
}
 finally {
}
",0,0,0,,
44,} finally {,"try {
  vmMo.setCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK,""0"");
  vmMo.setCustomFieldValue(CustomFieldConstants.CLOUD_VM_INTERNAL_NAME,cmd.getVmName());
  if (getVmPowerState(vmMo) != PowerState.PowerOff) {
    String msg=""Stop VM "" + cmd.getVmName() + "" Succeed"";
    boolean success=false;
    if (cmd.isForceStop()) {
      success=vmMo.powerOff();
    }
 else {
      success=vmMo.safePowerOff(_shutdownWaitMs);
    }
    if (!success) {
      msg=""Have problem in powering off VM "" + cmd.getVmName() + "", let the process continue"";
      s_logger.warn(msg);
    }
    return new StopAnswer(cmd,msg,true);
  }
  String msg=""VM "" + cmd.getVmName() + "" is already in stopped state"";
  s_logger.info(msg);
  return new StopAnswer(cmd,msg,true);
}
  finally {
}
",0,0,0,,
45,} finally {,"try {
  if (new File(snapshotFullOVAName).exists()) {
    command=new Script(false,""cp"",wait,s_logger);
    command.add(snapshotFullOVAName);
    command.add(installFullOVAName);
    result=command.execute();
    if (result != null) {
      String msg=""unable to copy snapshot "" + snapshotFullOVAName + "" to ""+ installFullPath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    command=new Script(""tar"",wait,s_logger);
    command.add(""--no-same-owner"");
    command.add(""-xf"",installFullOVAName);
    command.setWorkDir(installFullPath);
    s_logger.info(""Executing command: "" + command.toString());
    result=command.execute();
    if (result != null) {
      String msg=""unable to untar snapshot "" + snapshotFullOVAName + "" to ""+ installFullPath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
  }
 else {
    if (new File(snapshotFullOvfName).exists()) {
      command=new Script(false,""cp"",wait,s_logger);
      command.add(snapshotFullOvfName);
      command.add(installFullPath);
      result=command.execute();
      if (result != null) {
        String msg=""unable to copy snapshot "" + snapshotFullOvfName + "" to ""+ installFullPath;
        s_logger.error(msg);
        throw new Exception(msg);
      }
      s_logger.info(""vmdkfile parent dir: "" + snapshotRoot);
      File snapshotdir=new File(snapshotRoot);
      File[] ssfiles=snapshotdir.listFiles();
      if (ssfiles == null) {
        String msg=""unable to find snapshot vmdk files in "" + snapshotRoot;
        s_logger.error(msg);
        throw new Exception(msg);
      }
      for (int i=0; i < ssfiles.length; i++) {
        String vmdkfile=ssfiles[i].getName();
        s_logger.info(""vmdk file name: "" + vmdkfile);
        if (vmdkfile.toLowerCase().startsWith(backupSSUuid) && vmdkfile.toLowerCase().endsWith("".vmdk"")) {
          snapshotFullVMDKName=snapshotRoot + File.separator + vmdkfile;
          templateVMDKName+=vmdkfile;
          break;
        }
      }
      if (snapshotFullVMDKName != null) {
        command=new Script(false,""cp"",wait,s_logger);
        command.add(snapshotFullVMDKName);
        command.add(installFullPath);
        result=command.execute();
        s_logger.info(""Copy VMDK file: "" + snapshotFullVMDKName);
        if (result != null) {
          String msg=""unable to copy snapshot vmdk file "" + snapshotFullVMDKName + "" to ""+ installFullPath;
          s_logger.error(msg);
          throw new Exception(msg);
        }
      }
    }
 else {
      String msg=""unable to find any snapshot ova/ovf files"" + snapshotFullOVAName + "" to ""+ installFullPath;
      s_logger.error(msg);
      throw new Exception(msg);
    }
  }
  Size size=handleMetadataCreateTemplateFromSnapshot(installFullPath,templateVMDKName,templateId,templateUniqueName,backupSSUuid);
  return new Ternary<>(installPath + ""/"" + templateUniqueName+ "".ova"",size.getPhysicalSize(),size.getVirtualSize());
}
  finally {
}
",0,0,0,,
46,} finally {,"try (Formatter formatter=new Formatter(conditionExpression,Locale.US)){
  if (counterTO.getSource().equals(""snmp"")) {
    counterName=generateSnmpMetricName(counterName);
    if (snmpMetrics.size() == 0) {
      final lbmetrictable metricTable=new lbmetrictable();
      try {
        metricTable.set_metrictable(mtName);
        lbmetrictable.add(_netscalerService,metricTable);
      }
 catch (      final Exception e) {
        if (!isCleanUp) {
          throw e;
        }
      }
      final lbmonitor monitor=new lbmonitor();
      try {
        monitor.set_monitorname(monitorName);
        monitor.set_type(""LOAD"");
        monitor.set_destport(snmpPort);
        monitor.set_snmpcommunity(snmpCommunity);
        monitor.set_metrictable(mtName);
        monitor.set_interval((int)(interval * 0.8));
        lbmonitor.add(_netscalerService,monitor);
      }
 catch (      final Exception e) {
        if (!isCleanUp) {
          throw e;
        }
      }
      final servicegroup_lbmonitor_binding servicegroup_monitor_binding=new servicegroup_lbmonitor_binding();
      try {
        servicegroup_monitor_binding.set_servicegroupname(serviceGroupName);
        servicegroup_monitor_binding.set_monitor_name(monitorName);
        servicegroup_monitor_binding.set_passive(true);
        servicegroup_lbmonitor_binding.add(_netscalerService,servicegroup_monitor_binding);
      }
 catch (      final Exception e) {
        if (!isCleanUp) {
          throw e;
        }
      }
    }
    final boolean newMetric=!snmpMetrics.containsKey(counterName);
    if (newMetric) {
      snmpMetrics.put(counterName,snmpCounterNumber++);
    }
    if (newMetric) {
      final String counterOid=counterTO.getValue();
      final lbmetrictable_metric_binding metrictable_metric_binding=new lbmetrictable_metric_binding();
      try {
        metrictable_metric_binding.set_metrictable(mtName);
        metrictable_metric_binding.set_metric(counterName);
        metrictable_metric_binding.set_Snmpoid(counterOid);
        lbmetrictable_metric_binding.add(_netscalerService,metrictable_metric_binding);
      }
 catch (      final Exception e) {
        if (!isCleanUp) {
          throw e;
        }
      }
      final lbmonitor_metric_binding monitor_metric_binding=new lbmonitor_metric_binding();
      try {
        monitor_metric_binding.set_monitorname(monitorName);
        monitor_metric_binding.set_metric(counterName);
        monitor_metric_binding.set_metricthreshold(Integer.MAX_VALUE);
        lbmonitor_metric_binding.add(_netscalerService,monitor_metric_binding);
      }
 catch (      final Exception e) {
        if (!isCleanUp) {
          throw e;
        }
      }
    }
    final int counterIndex=snmpMetrics.get(counterName);
    formatter.format(""SYS.VSERVER(\""%s\"").SNMP_TABLE(%d).AVERAGE_VALUE.%s(%d)"",nsVirtualServerName,counterIndex,operator,threshold);
  }
 else   if (counterTO.getSource().equals(""netscaler"")) {
    formatter.format(""SYS.VSERVER(\""%s\"").%s.%s(%d)"",nsVirtualServerName,counterTO.getValue(),operator,threshold);
  }
}
  finally {
}
",0,0,0,,
47,} finally {,"try {
  return Transaction.execute(new TransactionCallback<Long>(){
    @Override public Long doInTransaction(    TransactionStatus status){
      VpcDistributedRouterSeqNoVO seqVo=_vpcDrSeqNoDao.findByVpcId(vpcId);
      if (seqVo == null) {
        seqVo=new VpcDistributedRouterSeqNoVO(vpcId);
        _vpcDrSeqNoDao.persist(seqVo);
      }
      seqVo=_vpcDrSeqNoDao.lockRow(seqVo.getId(),true);
      seqVo.incrTopologyUpdateSequenceNo();
      _vpcDrSeqNoDao.update(seqVo.getId(),seqVo);
      return seqVo.getTopologyUpdateSequenceNo();
    }
  }
);
}
  finally {
}
",0,0,0,,
48,} finally {,"try {
  return Transaction.execute(new TransactionCallback<Long>(){
    @Override public Long doInTransaction(    TransactionStatus status){
      VpcDistributedRouterSeqNoVO seqVo=_vpcDrSeqNoDao.findByVpcId(vpcId);
      if (seqVo == null) {
        seqVo=new VpcDistributedRouterSeqNoVO(vpcId);
        _vpcDrSeqNoDao.persist(seqVo);
      }
      seqVo=_vpcDrSeqNoDao.lockRow(seqVo.getId(),true);
      seqVo.incrPolicyUpdateSequenceNo();
      _vpcDrSeqNoDao.update(seqVo.getId(),seqVo);
      return seqVo.getPolicyUpdateSequenceNo();
    }
  }
);
}
  finally {
}
",0,0,0,,
49,} finally {,"try {
  boolean success=applyIpAssociations(network,false);
  if (success) {
    s_logger.debug(""Successfully associated ip address "" + ip.getAddress().addr() + "" to network ""+ network);
  }
 else {
    s_logger.warn(""Failed to associate ip address "" + ip.getAddress().addr() + "" to network ""+ network);
  }
  return ip;
}
  finally {
}
",0,0,0,,
50,} finally {,"try {
  pipeUtil.processToStream(uri,bizdata,out);
}
 catch (Exception e) {
  throw new CascadingRuntimeException(""Cannot process pipeline to '"" + uri + ""'"",e);
}
 finally {
}
",0,0,0,,
51,} finally {,"try {
  try {
    if (!cocoon.process(env)) {
      getLogger().fatalError(""The Cocoon engine failed to process the request."");
      manageException(request,res,env,uri,""Request Processing Failed"",""Cocoon engine failed in process the request"",""The processing engine failed to process the request. This could be due to lack of matching or bugs in the pipeline engine."",null);
      return;
    }
  }
 catch (  ResourceNotFoundException rse) {
    if (getLogger().isWarnEnabled()) {
      getLogger().warn(""The resource was not found"",rse);
    }
    manageException(request,res,env,uri,""Resource Not Found"",""Resource Not Found"",""The requested portlet could not be found"",rse);
    return;
  }
catch (  ConnectionResetException e) {
    if (getLogger().isDebugEnabled()) {
      getLogger().debug(e.getMessage(),e);
    }
 else     if (getLogger().isWarnEnabled()) {
      getLogger().warn(e.getMessage());
    }
  }
catch (  IOException e) {
    if (getLogger().isDebugEnabled()) {
      getLogger().debug(e.getMessage(),e);
    }
 else     if (getLogger().isWarnEnabled()) {
      getLogger().warn(e.getMessage());
    }
  }
catch (  Exception e) {
    if (getLogger().isErrorEnabled()) {
      getLogger().error(""Internal Cocoon Problem"",e);
    }
    manageException(request,res,env,uri,""Internal Server Error"",null,null,e);
    return;
  }
  long end=System.currentTimeMillis();
  String timeString=processTime(end - start);
  if (getLogger().isInfoEnabled()) {
    getLogger().info(""'"" + uri + ""' ""+ timeString);
  }
  res.setProperty(""X-Cocoon-Time"",timeString);
  if (contentType != null && contentType.equals(""text/html"")) {
    String showTime=request.getParameter(Constants.SHOWTIME_PARAM);
    boolean show=this.showTime;
    if (showTime != null) {
      show=!showTime.equalsIgnoreCase(""no"");
    }
    if (show) {
      boolean hide=this.hiddenShowTime;
      if (showTime != null) {
        hide=showTime.equalsIgnoreCase(""hide"");
      }
      PrintStream out=new PrintStream(res.getPortletOutputStream());
      out.print((hide) ? ""<!-- "" : ""<p>"");
      out.print(timeString);
      out.println((hide) ? "" -->"" : ""</p>\n"");
    }
  }
}
  finally {
}
",0,0,0,,
52,} finally {,"try {
  final Node file=getOrAddNode(parent,name,NodeType_NT_FILE);
  final Node content=getOrAddNode(file,Node_JCR_CONTENT,NodeType_NT_RESOURCE);
  content.setProperty(Property_JCR_MIMETYPE,mime);
  final String[] parameters=mime.split("";"");
  for (int i=1; i < parameters.length; i++) {
    final int equals=parameters[i].indexOf('=');
    if (equals != -1) {
      final String parameter=parameters[i].substring(0,equals);
      if (""charset"".equalsIgnoreCase(parameter.trim())) {
        content.setProperty(Property_JCR_ENCODING,parameters[i].substring(equals + 1).trim());
      }
    }
  }
  content.setProperty(Property_JCR_LAST_MODIFIED,date);
  content.setProperty(Property_JCR_DATA,binary);
  return file;
}
  finally {
}
",0,0,0,,
53,} finally {,"try {
  final Node file=getOrAddNode(parent,name,NodeType_NT_FILE);
  final Node content=getOrAddNode(file,Node_JCR_CONTENT,NodeType_NT_RESOURCE);
  content.setProperty(Property_JCR_MIMETYPE,mime);
  final String[] parameters=mime.split("";"");
  for (int i=1; i < parameters.length; i++) {
    final int equals=parameters[i].indexOf('=');
    if (equals != -1) {
      final String parameter=parameters[i].substring(0,equals);
      if (""charset"".equalsIgnoreCase(parameter.trim())) {
        content.setProperty(Property_JCR_ENCODING,parameters[i].substring(equals + 1).trim());
      }
    }
  }
  content.setProperty(Property_JCR_LAST_MODIFIED,date);
  content.setProperty(Property_JCR_DATA,binary);
  return file;
}
  finally {
}
",0,0,0,,
54,} finally {,"try {
  final InputStream inputStream;
  try {
    if (!getType().hasContent()) {
      throw new FileSystemException(""vfs.provider/read-not-file.error"",getName());
    }
    inputStream=channel.get(relPath);
  }
 catch (  final SftpException e) {
    if (e.id == ChannelSftp.SSH_FX_NO_SUCH_FILE) {
      throw new FileNotFoundException(getName());
    }
    throw new FileSystemException(e);
  }
  return new SftpInputStream(channel,inputStream,bufferSize);
}
  finally {
}
",0,0,0,,
55,finally {,"try {
  beginTransaction();
  getPM().setIgnoreCache(false);
  Extent ex=getPM().getExtent(Employee.class,true);
  Iterator it1=ex.iterator();
  deleteEmployee((Employee)it1.next());
  Iterator it2=ex.iterator();
  int count=countIterator(it2);
  rollbackTransaction();
  beginTransaction();
  Iterator it3=ex.iterator();
  int count3=countIterator(it3);
  commitTransaction();
  if (count != 1) {
    fail(ASSERTION_FAILED,""counted "" + count + "" after delete; should be 1"");
  }
  if (count3 != 2) {
    fail(ASSERTION_FAILED,""counted "" + count3 + ""after rollback; should be 2"");
  }
}
  finally {
}
",0,0,0,,
56,finally {,"try {
  beginTransaction();
  getPM().setIgnoreCache(false);
  Extent ex=getPM().getExtent(Employee.class,true);
  addEmployee();
  Iterator it=ex.iterator();
  int count=countIterator(it);
  rollbackTransaction();
  beginTransaction();
  Iterator it2=ex.iterator();
  int count2=countIterator(it2);
  commitTransaction();
  if (count != 3) {
    fail(ASSERTION_FAILED,""Iterator: "" + count + "" should be 3"");
  }
  if (count2 != 2) {
    fail(ASSERTION_FAILED,""Iterator2: "" + count2 + ""should be 2"");
  }
}
  finally {
}
",0,0,0,,
57,finally {,"try {
  beginTransaction();
  Extent ex=getPM().getExtent(Employee.class,true);
  Iterator it1=ex.iterator();
  deleteEmployee((Employee)it1.next());
  Iterator it2=ex.iterator();
  addEmployee();
  Iterator it3=ex.iterator();
  ex.close(it1);
  ex.close(it2);
  ex.close(it3);
  rollbackTransaction();
  beginTransaction();
  Iterator it4=ex.iterator();
  int count4=countIterator(it4);
  rollbackTransaction();
  if (debug)   logger.debug(""Iterator4 after rollback: "" + count4);
  if (it1.hasNext()) {
    fail(ASSERTION_FAILED,""iterator1.hasNext(): "" + it1.hasNext());
  }
  if (it2.hasNext()) {
    fail(ASSERTION_FAILED,""iterator2.hasNext(): "" + it2.hasNext());
  }
  if (it3.hasNext()) {
    fail(ASSERTION_FAILED,""iterator3.hasNext(): "" + it3.hasNext());
  }
  if (count4 != 2) {
    fail(ASSERTION_FAILED,""Iterator "" + count4 + "" should be 2"");
  }
}
  finally {
}
",0,0,0,,
58,finally {,"try {
  it.remove();
  fail(ASSERTION_FAILED,""extent.iterator().remove() should throw UnsupportedOperationException"");
}
 catch (UnsupportedOperationException expected) {
  if (debug)   logger.debug(""expected exception "" + ex);
}
 finally {
}
",0,0,0,,
59,} finally {,"try {
  FormatableBitSet validColumns=rowSource.getValidColumns();
  int numberFields=0;
  if (validColumns != null) {
    for (int i=validColumns.size() - 1; i >= 0; i--) {
      if (validColumns.get(i)) {
        numberFields=i + 1;
        break;
      }
    }
  }
  DataValueDescriptor[] row=rowSource.getNextRowFromRowSource();
  while (row != null) {
    if (SanityManager.DEBUG) {
      SanityManager.ASSERT(row != null,""RowSource returned null"");
    }
    int arrayPosition=-1;
    for (int i=0; i < numberFields; i++) {
      if (validColumns.get(i)) {
        arrayPosition++;
        DataValueDescriptor column=row[arrayPosition];
        if (param == 1) {
          try {
            Storable sColumn=(Storable)column;
            if (!sColumn.isNull()) {
              sColumn.writeExternal(logicalDataOut);
              out.reset();
            }
          }
 catch (          IOException ioe) {
            throw T_Fail.exceptionFail(ioe);
          }
        }
      }
    }
    row=rowSource.getNextRowFromRowSource();
  }
}
  finally {
}
",0,0,0,,
60,finally,"try {
  long clockSkew=1000;
  ReplayCacheImpl cache=new ReplayCacheImpl(clockSkew);
  List<Triple<KerberosPrincipal,KerberosPrincipal,KerberosTime>> triples=new ArrayList<>();
  for (int i=0; i < 4; i++) {
    KerberosPrincipal serverPrincipal=new KerberosPrincipal(""server"" + i + ""@APACHE.ORG"",PrincipalNameType.KRB_NT_PRINCIPAL.getValue());
    KerberosPrincipal clientPrincipal=new KerberosPrincipal(""client"" + i + ""@APACHE.ORG"",PrincipalNameType.KRB_NT_PRINCIPAL.getValue());
    KerberosTime clientTime=new KerberosTime(System.currentTimeMillis());
    cache.save(serverPrincipal,clientPrincipal,clientTime,0);
    triples.add(Triple.of(serverPrincipal,clientPrincipal,clientTime));
  }
  Set<String> keys=cache.cache.asMap().keySet();
  assertEquals(4,keys.size());
  assertEquals(4L,cache.cache.estimatedSize());
  Thread.sleep(200L);
  for (  String key : keys) {
    assertNotNull(cache.cache.getIfPresent(key));
  }
  for (  Triple<KerberosPrincipal,KerberosPrincipal,KerberosTime> triple : triples) {
    boolean isReplay=cache.isReplay(triple.getLeft(),triple.getMiddle(),triple.getRight(),0);
    assertTrue(isReplay);
  }
  Thread.sleep(1000L);
  for (  Triple<KerberosPrincipal,KerberosPrincipal,KerberosTime> triple : triples) {
    boolean isReplay=cache.isReplay(triple.getLeft(),triple.getMiddle(),triple.getRight(),0);
    assertFalse(isReplay);
  }
  for (  String key : keys) {
    assertNull(cache.cache.getIfPresent(key));
  }
  cache.cache.cleanUp();
  assertEquals(0L,cache.cache.estimatedSize());
}
  finally {
}
",0,0,0,,
61,finally,"try {
  ctx=(LdapContext)getWiredContext(getLdapServer()).lookup(BASE);
  ctx.setRequestControls(JndiUtils.toJndiControls(codec,ctxCtls));
  isReady=true;
  LOG.debug(""PSearchListener is ready and about to issue persistent search request."");
  list=ctx.search("""",""objectClass=*"",null);
  LOG.debug(""PSearchListener search request returned."");
  EntryChange ecControl=null;
  while (list.hasMore()) {
    LOG.debug(""PSearchListener search request got an item."");
    javax.naming.ldap.Control[] controls;
    SearchResult sresult=list.next();
    if (sresult instanceof HasControls) {
      controls=((HasControls)sresult).getControls();
      if (controls != null) {
        for (        javax.naming.ldap.Control jndiControl : controls) {
          if (jndiControl.getID().equals(EntryChange.OID)) {
            ecControl=(EntryChange)JndiUtils.fromJndiResponseControl(codec,jndiControl);
            factory.decodeValue(ecControl,jndiControl.getEncodedValue());
          }
        }
      }
    }
    result=new PSearchNotification(sresult,ecControl);
    break;
  }
  LOG.debug(""PSearchListener broke out of while loop."");
}
 catch (Exception e) {
  e.printStackTrace();
  LOG.error(""PSearchListener encountered error"",e);
}
 finally {
}
",0,0,0,,
62,} finally {,"try {
  test(defaultHavingIndexPlan + "";"");
  PlanTestBase.testPlanWithAttributesMatchingPatterns(query,new String[]{""Limit(.*[\n\r])+.*Project.*CONVERT_FROMJSON(.*[\n\r])+.*Scan""},new String[]{});
}
  finally {
}
",0,0,0,,
63,} finally {,"try {
  List<OperationResponse> responses=session.flush();
  for (  OperationResponse response : responses) {
    if (response.hasRowError()) {
      throw new IOException(response.getRowError().toString());
    }
  }
}
 catch (Exception e) {
  throw new IOException(e);
}
 finally {
}
",0,0,0,,
64,} finally {,"try {
  PageHeader pageHeader=Util.readPageHeader(parent.dataReader);
  int compressedSize=pageHeader.getCompressed_page_size();
  if (parent.parentColumnReader.isShuttingDown) {
    return null;
  }
  pageData=parent.dataReader.getNext(compressedSize);
  bytesRead=compressedSize;
synchronized (parent) {
    PageType type=pageHeader.getType() == null ? PageType.DATA_PAGE : pageHeader.getType();
switch (type) {
case DICTIONARY_PAGE:
      readStatus.setIsDictionaryPage(true);
    valuesRead+=pageHeader.getDictionary_page_header().getNum_values();
  break;
case DATA_PAGE_V2:
valuesRead+=pageHeader.getData_page_header_v2().getNum_values();
parent.totalPageValuesRead+=valuesRead;
break;
case DATA_PAGE:
valuesRead+=pageHeader.getData_page_header().getNum_values();
parent.totalPageValuesRead+=valuesRead;
break;
default :
throw UserException.unsupportedError().message(""Page type is not supported yet: "" + type).build(logger);
}
long timeToRead=timer.elapsed(TimeUnit.NANOSECONDS);
readStatus.setPageHeader(pageHeader);
readStatus.setPageData(pageData);
readStatus.setBytesRead(bytesRead);
readStatus.setValuesRead(valuesRead);
readStatus.setDiskScanTime(timeToRead);
assert (totalValuesRead <= totalValuesCount);
}
synchronized (parent.pageQueueSyncronize) {
queue.put(readStatus);
if (!parentColumnReader.isShuttingDown && queue.remainingCapacity() > 0) {
asyncPageRead.offer(ExecutorServiceUtil.submit(parent.threadPool,new AsyncPageReaderTask(debugName,queue)));
}
}
}
 catch (InterruptedException e) {
if (pageData != null) {
pageData.release();
}
Thread.currentThread().interrupt();
}
catch (Exception e) {
if (pageData != null) {
pageData.release();
}
parent.handleAndThrowException(e,""Exception occurred while reading from disk."");
}
 finally {
}
",0,0,0,,
65,} finally {,"try {
  try (final RootAllocator rootAllocator=new RootAllocator(MAX_ALLOCATION)){
    final DrillBuf drillBuf=rootAllocator.buffer(512);
    assertNotNull(""allocation failed"",drillBuf);
  }
 }
  finally {
}
",0,0,0,,
66,} finally {,"try {
  try (final RootAllocator rootAllocator=new RootAllocator(MAX_ALLOCATION)){
    final BufferAllocator childAllocator=rootAllocator.newChildAllocator(""createChildDontClose"",0,MAX_ALLOCATION);
    final DrillBuf drillBuf=childAllocator.buffer(512);
    assertNotNull(""allocation failed"",drillBuf);
  }
 }
  finally {
}
",0,0,0,,
67,} finally {,"try {
  if (RpcConstants.EXTRA_DEBUGGING) {
    logger.debug(""Encoding outbound message {}"",msg);
  }
  RpcHeader header=RpcHeader.newBuilder().setMode(msg.mode).setCoordinationId(msg.coordinationId).setRpcType(msg.rpcType).build();
  int headerLength=header.getSerializedSize();
  int protoBodyLength=msg.pBody.getSerializedSize();
  int rawBodyLength=msg.getRawBodySize();
  int fullLength=HEADER_TAG_LENGTH + getRawVarintSize(headerLength) + headerLength+ PROTOBUF_BODY_TAG_LENGTH+ getRawVarintSize(protoBodyLength)+ protoBodyLength;
  if (rawBodyLength > 0) {
    fullLength+=(RAW_BODY_TAG_LENGTH + getRawVarintSize(rawBodyLength) + rawBodyLength);
  }
  ByteBuf buf=ctx.alloc().buffer();
  OutputStream os=new ByteBufOutputStream(buf);
  CodedOutputStream cos=CodedOutputStream.newInstance(os);
  cos.writeRawVarint32(fullLength);
  cos.writeRawVarint32(HEADER_TAG);
  cos.writeRawVarint32(headerLength);
  header.writeTo(cos);
  cos.writeRawVarint32(PROTOBUF_BODY_TAG);
  cos.writeRawVarint32(protoBodyLength);
  msg.pBody.writeTo(cos);
  if (msg.getRawBodySize() > 0) {
    if (RpcConstants.EXTRA_DEBUGGING) {
      logger.debug(""Writing raw body of size {}"",msg.getRawBodySize());
    }
    cos.writeRawVarint32(RAW_BODY_TAG);
    cos.writeRawVarint32(rawBodyLength);
    cos.flush();
    final CompositeByteBuf cbb=ctx.alloc().compositeBuffer(msg.dBodies.length + 1);
    cbb.addComponent(buf);
    int bufLength=buf.readableBytes();
    for (    ByteBuf b : msg.dBodies) {
      cbb.addComponent(b);
      bufLength+=b.readableBytes();
    }
    cbb.writerIndex(bufLength);
    out.add(cbb);
  }
 else {
    cos.flush();
    out.add(buf);
  }
  if (RpcConstants.SOME_DEBUGGING) {
    logger.debug(""Wrote message length {}:{} bytes (head:body).  Message: "" + msg,getRawVarintSize(fullLength),fullLength);
  }
  if (RpcConstants.EXTRA_DEBUGGING) {
    logger.debug(""Sent message.  Ending writer index was {}."",buf.writerIndex());
  }
}
  finally {
}
",0,0,0,,
68,finally {,"try {
  boolean shouldFinalize=QueryContexts.isFinalize(query,true);
  boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));
  final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);
  Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException {
      Exception e=null;
      CountingOutputStream os=new CountingOutputStream(outputStream);
      try {
        jsonWriter.writeValue(os,yielder);
        os.flush();
        os.close();
      }
 catch (      Exception ex) {
        e=ex;
        log.noStackTrace().error(ex,""Unable to send query response."");
        throw new RuntimeException(ex);
      }
 finally {
        Thread.currentThread().setName(currThreadName);
        queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());
        if (e == null) {
          successfulQueryCount.incrementAndGet();
        }
 else {
          failedQueryCount.incrementAndGet();
        }
      }
    }
  }
,ioReaderWriter.getResponseWriter().getResponseType()).header(""X-Druid-Query-Id"",queryId);
  Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);
  if (entityTag != null) {
    responseBuilder.header(HEADER_ETAG,entityTag);
  }
  DirectDruidClient.removeMagicResponseContextFields(responseContext);
  final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());
  if (serializationResult.isTruncated()) {
    final String logToPrint=StringUtils.format(""Response Context truncated for id [%s]. Full context is [%s]."",queryId,serializationResult.getFullResult());
    if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {
      log.error(logToPrint);
      throw new QueryInterruptedException(new TruncatedResponseContextException(""Serialized response context exceeds the max size[%s]"",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());
    }
 else {
      log.warn(logToPrint);
    }
  }
  return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();
}
 catch (QueryException e) {
  yielder.close();
  throw e;
}
catch (Exception e) {
  yielder.close();
  throw new RuntimeException(e);
}
 finally {
}
",0,0,0,,
69,} finally {,"try {
  asyncResult=filter.invoke(nextNode,invocation);
}
 catch (Exception e) {
  if (filter instanceof ListenableFilter) {
    ListenableFilter listenableFilter=((ListenableFilter)filter);
    try {
      Filter.Listener listener=listenableFilter.listener(invocation);
      if (listener != null) {
        listener.onError(e,originalInvoker,invocation);
      }
    }
  finally {
      listenableFilter.removeListener(invocation);
    }
  }
 else   if (filter instanceof FILTER.Listener) {
    FILTER.Listener listener=(FILTER.Listener)filter;
    listener.onError(e,originalInvoker,invocation);
  }
  throw e;
}
 finally {
}
",0,0,0,,
70,} finally {,"try {
  ApplicationConfig applicationConfig=new ApplicationConfig();
  DubboBootstrap.getInstance().application(applicationConfig).initialize();
  Assertions.assertEquals(owner,applicationConfig.getOwner());
  Assertions.assertEquals(""1.2.3"",applicationConfig.getVersion());
}
  finally {
}
",0,0,0,,
71,} finally {,"try {
  ApplicationConfig applicationConfig=new ApplicationConfig();
  applicationConfig.setId(""demo-app"");
  DubboBootstrap.getInstance().application(applicationConfig).initialize();
  Assertions.assertEquals(""demo-app"",applicationConfig.getId());
  Assertions.assertEquals(""demo-app"",applicationConfig.getName());
  Assertions.assertEquals(owner,applicationConfig.getOwner());
  Assertions.assertEquals(""1.2.3"",applicationConfig.getVersion());
}
  finally {
}
",0,0,0,,
72,} finally {,"try {
  ApplicationConfig applicationConfig=new ApplicationConfig();
  applicationConfig.setName(""demo-app"");
  DubboBootstrap.getInstance().application(applicationConfig).initialize();
  Assertions.assertEquals(owner,applicationConfig.getOwner());
  Assertions.assertEquals(""1.2.3"",applicationConfig.getVersion());
}
  finally {
}
",0,0,0,,
73,} finally {,"try {
  DubboBootstrap.getInstance().initialize();
  ApplicationConfig applicationConfig=DubboBootstrap.getInstance().getApplication();
  Assertions.assertEquals(""demo-app"",applicationConfig.getId());
  Assertions.assertEquals(""demo-app"",applicationConfig.getName());
  Assertions.assertEquals(owner,applicationConfig.getOwner());
  Assertions.assertEquals(""1.2.3"",applicationConfig.getVersion());
}
  finally {
}
",0,0,0,,
74,} finally {,"try {
  DubboBootstrap.getInstance().initialize();
  ApplicationConfig applicationConfig=DubboBootstrap.getInstance().getApplication();
  Assertions.assertEquals(false,applicationConfig.getQosEnable());
  Assertions.assertEquals(""127.0.0.1"",applicationConfig.getQosHost());
  Assertions.assertEquals(2345,applicationConfig.getQosPort());
  Assertions.assertEquals(""demo-app"",applicationConfig.getName());
}
  finally {
}
",0,0,0,,
75,} finally {,"try {
  ReferenceConfig referenceConfig=new ReferenceConfig();
  referenceConfig.setInterface(DemoService.class);
  DubboBootstrap.getInstance().application(""demo-app"").reference(referenceConfig).initialize();
  Assertions.assertEquals(""demo"",referenceConfig.getGroup());
  Assertions.assertEquals(1234,referenceConfig.getTimeout());
  Assertions.assertEquals(false,referenceConfig.isInit());
  Assertions.assertEquals(false,referenceConfig.isCheck());
}
  finally {
}
",0,0,0,,
76,} finally {,"try {
  ProtocolConfig protocolConfig=new ProtocolConfig();
  DubboBootstrap.getInstance().application(""test-app"").protocol(protocolConfig).initialize();
  Assertions.assertEquals(""rest"",protocolConfig.getName());
  Assertions.assertEquals(port,protocolConfig.getPort());
}
  finally {
}
",0,0,0,,
77,} finally {,"try {
  ProtocolConfig protocolConfig=new ProtocolConfig();
  protocolConfig.setName(""rest"");
  DubboBootstrap.getInstance().application(""test-app"").protocol(protocolConfig).initialize();
  Assertions.assertEquals(""rest"",protocolConfig.getName());
  Assertions.assertEquals(port,protocolConfig.getPort());
}
  finally {
}
",0,0,0,,
78,} finally {,"try {
  ProtocolConfig protocolConfig=new ProtocolConfig();
  protocolConfig.setName(""xxx"");
  protocolConfig.setId(""rest1"");
  DubboBootstrap.getInstance().application(""test-app"").protocol(protocolConfig).initialize();
  Assertions.assertEquals(""rest"",protocolConfig.getName());
  Assertions.assertEquals(port,protocolConfig.getPort());
}
  finally {
}
",0,0,0,,
79,} finally {,"try {
  DubboBootstrap bootstrap=DubboBootstrap.getInstance();
  bootstrap.application(""test-app"").initialize();
  ConfigManager configManager=bootstrap.getConfigManager();
  Collection<ProtocolConfig> protocols=configManager.getProtocols();
  Assertions.assertEquals(1,protocols.size());
  ProtocolConfig protocol=configManager.getProtocol(""rest1"").get();
  Assertions.assertEquals(""rest"",protocol.getName());
  Assertions.assertEquals(port1,protocol.getPort());
}
  finally {
}
",0,0,0,,
80,} finally {,"try {
  DubboBootstrap bootstrap=DubboBootstrap.getInstance();
  bootstrap.application(""test-app"").initialize();
  ConfigManager configManager=bootstrap.getConfigManager();
  Collection<ProtocolConfig> protocols=configManager.getProtocols();
  Assertions.assertEquals(1,protocols.size());
  ProtocolConfig protocol=configManager.getProtocol(""rest"").get();
  Assertions.assertEquals(""rest"",protocol.getName());
  Assertions.assertEquals(port1,protocol.getPort());
}
  finally {
}
",0,0,0,,
81,} finally {,"try {
  ServiceConfig<DemoService> service=new ServiceConfig<DemoService>();
  service.setInterface(DemoService.class);
  service.setRef(new DemoServiceImpl());
  ProtocolConfig protocolConfig=new ProtocolConfig(""injvm"");
  ReferenceConfig<DemoService> reference=new ReferenceConfig<DemoService>();
  reference.setInterface(DemoService.class);
  reference.setInjvm(true);
  reference.setRetries(2);
  DubboBootstrap.getInstance().application(new ApplicationConfig(""testSystemPropertyOverrideReferenceConfig"")).registry(new RegistryConfig(RegistryConfig.NO_AVAILABLE)).protocol(protocolConfig).service(service).reference(reference).start();
  assertEquals(Integer.valueOf(5),reference.getRetries());
  assertEquals(false,reference.shouldCheck());
  ConsumerConfig defaultConsumer=ApplicationModel.getConfigManager().getDefaultConsumer().get();
  assertEquals(1234,defaultConsumer.getTimeout());
  assertEquals(false,defaultConsumer.isCheck());
}
  finally {
}
",0,0,0,,
82,} finally {,"try {
  ServiceConfig<DemoService> serviceConfig=new ServiceConfig<DemoService>();
  serviceConfig.setInterface(DemoService.class);
  serviceConfig.setRef(new DemoServiceImpl());
  DubboBootstrap bootstrap=DubboBootstrap.getInstance().service(serviceConfig).start();
  try {
    assertEquals(""sysover"",serviceConfig.getApplication().getName());
    assertEquals(""sysowner"",serviceConfig.getApplication().getOwner());
    assertEquals(""N/A"",serviceConfig.getRegistry().getAddress());
    assertEquals(""dubbo"",serviceConfig.getProtocol().getName());
    assertEquals(20834,serviceConfig.getProtocol().getPort().intValue());
  }
  finally {
    bootstrap.stop();
  }
}
  finally {
}
",0,0,0,,
83,} finally {,"try {
  ApplicationConfig application=new ApplicationConfig();
  application.setName(""aaa"");
  RegistryConfig registry=new RegistryConfig();
  registry.setAddress(""127.0.0.1"");
  ProtocolConfig protocol=new ProtocolConfig();
  protocol.setName(""rmi"");
  protocol.setPort(1099);
  ServiceConfig<DemoService> service=new ServiceConfig<DemoService>();
  service.setInterface(DemoService.class);
  service.setRef(new DemoServiceImpl());
  service.setApplication(application);
  service.setRegistry(registry);
  service.setProtocol(protocol);
  DubboBootstrap bootstrap=DubboBootstrap.getInstance().application(application).registry(registry).protocol(protocol).service(service).start();
  try {
    URL url=service.getExportedUrls().get(0);
    assertEquals(""sysover"",url.getParameter(""application""));
    assertEquals(""sysowner"",url.getParameter(""owner""));
    assertEquals(""dubbo"",url.getProtocol());
    assertEquals(20834,url.getPort());
  }
  finally {
    bootstrap.stop();
  }
}
  finally {
}
",0,0,0,,
84,} finally {,"try {
  if (server != null)   server.close();
}
  finally {
}
",0,0,0,,
85,} finally {,"try {
  List<Feature> features;
  try {
    features=RouteGuideUtil.parseFeatures(RouteGuideUtil.getDefaultFeaturesFile());
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return;
  }
  streamClient.getFeature(409146138,-746188906);
  streamClient.getFeature(0,0);
  streamClient.listFeatures(400000000,-750000000,420000000,-730000000);
  streamClient.recordRoute(features,10);
  CountDownLatch finishLatch=streamClient.routeChat();
  if (!finishLatch.await(1,TimeUnit.MINUTES)) {
    streamClient.warning(""routeChat can not finish within 1 minutes"");
  }
}
  finally {
}
",0,0,0,,
86,} finally {,"try {
  Iterator<String> iter=curator.getChildren().forPath(jobPath).iterator();
  while (iter.hasNext()) {
    String appId=iter.next();
    String path=jobPath + ""/"" + appId;
    if (curator.checkExists().forPath(path) != null) {
      if (new String(curator.getData().forPath(path)).equals(ZKStateConstant.AppStatus.INIT.toString())) {
        apps.add(appId);
      }
    }
    if (apps.size() == limit) {
      break;
    }
  }
  return apps;
}
 catch (Exception e) {
  LOG.error(""fail to read unprocessed jobs"",e);
  throw new RuntimeException(e);
}
 finally {
}
",0,0,0,,
87,} finally {,"try {
  System.out.println(""Running Query:"");
  System.out.println(cmd.getSelect());
  System.out.println(""---------------------------------"");
switch (type) {
case BeanList:
    DBRecordCallbackHandler readerImpl=new DBRecordCallbackHandler(){
      public void processRecord(      DBRecordData reader){
        System.out.println(reader.getString(EMP.EMPLOYEE_ID) + ""\t"" + reader.getString(EMPLOYEE_FULLNAME)+ ""\t""+ EMP.GENDER.getOptions().get(reader.getString(EMP.GENDER))+ ""\t""+ reader.getString(PHONE_EXT_NUMBER)+ ""\t""+ reader.getString(DEP.NAME));
      }
    }
;
  getEmpireTemplate().query(cmd,readerImpl);
break;
case Reader:
DBReaderExtractor<List<SampleBean>> beanListImpl=new DBReaderExtractor<List<SampleBean>>(){
public List<SampleBean> process(DBReader reader){
  return reader.getBeanList(SampleBean.class);
}
}
;
List<SampleBean> beanList=getEmpireTemplate().query(cmd,beanListImpl);
System.out.println(String.valueOf(beanList.size()) + "" SampleBeans returned from Query."");
for (SampleBean b : beanList) {
System.out.println(b.toString());
}
break;
case XmlDocument:
XmlDocumentExtractor xmlImpl=new XmlDocumentExtractor();
Document doc=getEmpireTemplate().query(cmd,xmlImpl);
XMLWriter.debug(doc);
break;
}
}
  finally {
}
",0,0,0,,
88,} finally {,"try {
  JobGraph jobGraph=createJobGraphWithOperatorState(parallelism,maxParallelism,checkpointMethod);
  StateSourceBase.canFinishLatch=new CountDownLatch(1);
  final JobID jobID=jobGraph.getJobID();
  client.submitJob(jobGraph).get();
  waitForAllTaskRunning(cluster.getMiniCluster(),jobGraph.getJobID());
  StateSourceBase.workStartedLatch.await();
  CompletableFuture<String> savepointPathFuture=FutureUtils.retryWithDelay(() -> client.triggerSavepoint(jobID,null),(int)deadline.timeLeft().getSeconds() / 10,Time.seconds(10),(throwable) -> true,TestingUtils.defaultScheduledExecutor());
  final String savepointPath=savepointPathFuture.get(deadline.timeLeft().toMillis(),TimeUnit.MILLISECONDS);
  StateSourceBase.canFinishLatch.countDown();
  client.cancel(jobID).get();
  while (!getRunningJobs(client).isEmpty()) {
    Thread.sleep(50);
  }
  JobGraph scaledJobGraph=createJobGraphWithOperatorState(parallelism2,maxParallelism,checkpointMethod);
  scaledJobGraph.setSavepointRestoreSettings(SavepointRestoreSettings.forPath(savepointPath));
  submitJobAndWaitForResult(client,scaledJobGraph,getClass().getClassLoader());
  int sumExp=0;
  int sumAct=0;
  if (checkpointMethod == OperatorCheckpointMethod.CHECKPOINTED_FUNCTION) {
    for (    int c : PartitionedStateSource.checkCorrectSnapshot) {
      sumExp+=c;
    }
    for (    int c : PartitionedStateSource.checkCorrectRestore) {
      sumAct+=c;
    }
  }
 else   if (checkpointMethod == OperatorCheckpointMethod.CHECKPOINTED_FUNCTION_BROADCAST) {
    for (    int c : PartitionedStateSource.checkCorrectSnapshot) {
      sumExp+=c;
    }
    for (    int c : PartitionedStateSource.checkCorrectRestore) {
      sumAct+=c;
    }
    sumExp*=parallelism2;
  }
 else {
    for (    int c : PartitionedStateSourceListCheckpointed.checkCorrectSnapshot) {
      sumExp+=c;
    }
    for (    int c : PartitionedStateSourceListCheckpointed.checkCorrectRestore) {
      sumAct+=c;
    }
  }
  assertEquals(sumExp,sumAct);
}
  finally {
}
",0,0,0,,
89,} finally {,"try {
  while (!doneReading && in.readable()) {
    b=in.readByte();
    if (b == '\n') {
      doneReading=true;
    }
 else {
      baos.write(b);
    }
  }
  e=EventBuilder.withBody(baos.toByteArray(),headers);
}
  finally {
}
",0,0,0,,
90,} finally {,"try {
  while (!doneReading && in.readable()) {
    b=in.readByte();
switch (m) {
case START:
      if (b == '<') {
        baos.write(b);
        m=Mode.PRIO;
      }
 else       if (b == '\n') {
        logger.debug(""Delimiter found while in START mode, ignoring.."");
      }
 else {
        isBadEvent=true;
        baos.write(b);
        m=Mode.DATA;
      }
    break;
case PRIO:
  baos.write(b);
if (b == '>') {
  if (prio.length() == 0) {
    isBadEvent=true;
  }
  m=Mode.DATA;
}
 else {
  char ch=(char)b;
  prio.append(ch);
  if (!Character.isDigit(ch) || prio.length() > 3) {
    isBadEvent=true;
    m=Mode.DATA;
  }
}
break;
case DATA:
if (b == '\n') {
e=buildEvent();
doneReading=true;
}
 else {
baos.write(b);
}
if (baos.size() == this.maxSize && !doneReading) {
isIncompleteEvent=true;
e=buildEvent();
doneReading=true;
}
break;
}
}
if (e == null && isUdp) {
doneReading=true;
e=buildEvent();
}
}
  finally {
}
",0,0,0,,
91,} finally {,"try {
  threadPoolExecutor.awaitTermination(5000,TimeUnit.MILLISECONDS);
}
 catch (InterruptedException e) {
}
 finally {
}
",0,0,0,,
92,} finally {,"try {
  final PartitionedRegion pr=(PartitionedRegion)getRootRegion(name);
  assertNotNull(pr);
  return pr.entryCount(false);
}
  finally {
}
",0,0,0,,
93,} finally {,"try {
  final PartitionedRegion pr=(PartitionedRegion)getRootRegion(name);
  assertNotNull(pr);
  return pr.entryCount(pr.getDataStore().getAllLocalPrimaryBucketIds());
}
  finally {
}
",0,0,0,,
94,} finally {,"try {
  final PartitionedRegion pr=(PartitionedRegion)getRootRegion(name);
  assertNotNull(pr);
  long entriesEvicted=0;
  for (final Iterator i=pr.getDataStore().getAllLocalBuckets().iterator(); i.hasNext(); ) {
    final Map.Entry entry=(Map.Entry)i.next();
    final BucketRegion bucketRegion=(BucketRegion)entry.getValue();
    if (bucketRegion == null) {
      continue;
    }
    assertTrue(bucketRegion.getAttributes().getEvictionAttributes().getAlgorithm().isLRUMemory());
    assertTrue(bucketRegion.getAttributes().getEvictionAttributes().getAction().isLocalDestroy());
  }
  entriesEvicted=pr.getTotalEvictions();
  return new Long(entriesEvicted);
}
  finally {
}
",0,0,0,,
95,} finally {,"try {
  final PartitionedRegion pr=(PartitionedRegion)getRootRegion(name);
  assertNotNull(pr);
  for (final Iterator i=pr.getDataStore().getAllLocalBuckets().iterator(); i.hasNext(); ) {
    final Map.Entry entry=(Map.Entry)i.next();
    final BucketRegion bucketRegion=(BucketRegion)entry.getValue();
    if (bucketRegion == null) {
      continue;
    }
    assertTrue(bucketRegion.getAttributes().getEvictionAttributes().getAlgorithm().isLRUEntry());
    assertTrue(bucketRegion.getAttributes().getEvictionAttributes().getAction().isLocalDestroy());
  }
  return pr.getTotalEvictions();
}
  finally {
}
",0,0,0,,
96,} finally {,"try {
  InternalCache cache=(InternalCache)new CacheFactory(props).create();
  try {
    PdxValue pdxValue=new PdxValue(1,2L);
    byte[] pdxValueBytes=BlobHelper.serializeToBlob(pdxValue);
{
      PdxValue deserializedPdxValue=(PdxValue)BlobHelper.deserializeBlob(pdxValueBytes);
      assertEquals(1,deserializedPdxValue.value);
      assertEquals(2L,deserializedPdxValue.fieldToDelete);
    }
    PdxType pt;
    cache.setPdxReadSerializedOverride(true);
    try {
      PdxInstanceImpl pi=(PdxInstanceImpl)BlobHelper.deserializeBlob(pdxValueBytes);
      pt=pi.getPdxType();
      assertEquals(1,pi.getField(""value""));
      assertEquals(2L,pi.getField(""fieldToDelete""));
    }
  finally {
      cache.setPdxReadSerializedOverride(false);
    }
    assertEquals(PdxValue.class.getName(),pt.getClassName());
    PdxField field=pt.getPdxField(""fieldToDelete"");
    pt.setHasDeletedField(true);
    field.setDeleted(true);
    assertEquals(null,pt.getPdxField(""fieldToDelete""));
    assertEquals(2,pt.getFieldCount());
{
      PdxValue deserializedPdxValue=(PdxValue)BlobHelper.deserializeBlob(pdxValueBytes);
      assertEquals(1,deserializedPdxValue.value);
      assertEquals(0L,deserializedPdxValue.fieldToDelete);
    }
    cache.setPdxReadSerializedOverride(true);
    try {
      PdxInstance pi=(PdxInstance)BlobHelper.deserializeBlob(pdxValueBytes);
      assertEquals(1,pi.getField(""value""));
      assertEquals(false,pi.hasField(""fieldToDelete""));
      assertEquals(null,pi.getField(""fieldToDelete""));
      assertSame(pt,((PdxInstanceImpl)pi).getPdxType());
      PdxValue deserializedPdxValue=(PdxValue)pi.getObject();
      assertEquals(1,deserializedPdxValue.value);
      assertEquals(0L,deserializedPdxValue.fieldToDelete);
    }
  finally {
      cache.setPdxReadSerializedOverride(false);
    }
    TypeRegistry tr=((GemFireCacheImpl)cache).getPdxRegistry();
    tr.testClearLocalTypeRegistry();
{
      PdxInstanceFactory piFactory=cache.createPdxInstanceFactory(PdxValue.class.getName());
      piFactory.writeInt(""value"",1);
      PdxInstance pi=piFactory.create();
      assertEquals(1,pi.getField(""value""));
      assertEquals(null,pi.getField(""fieldToDelete""));
      PdxType pt2=((PdxInstanceImpl)pi).getPdxType();
      assertEquals(null,pt2.getPdxField(""fieldToDelete""));
      assertEquals(1,pt2.getFieldCount());
    }
  }
  finally {
    if (!cache.isClosed()) {
      cache.close();
    }
  }
}
  finally {
}
",0,0,0,,
97,} finally {,"try {
  this.rollingEnabledRecoverValuesFalsePersistOnly();
}
  finally {
}
",0,0,0,,
98,} finally {,"try {
  this.rollingEnabledRecoverValuesTruePersistOnly();
}
  finally {
}
",0,0,0,,
99,} finally {,"try {
  this.rollingEnabledRecoverValuesFalsePersistWithOverFlow();
}
  finally {
}
",0,0,0,,
100,} finally {,"try {
  this.rollingEnabledRecoverValuesTruePersistWithOverFlow();
}
  finally {
}
",0,0,0,,
101,} finally {,"try {
  if (isDebugEnabled_DLS) {
    logger.trace(LogMarker.DLS_VERBOSE,""LockGrantorDestroyedException respondWithNotGrantor to {}"",request);
  }
  request.respondWithNotGrantor();
}
  finally {
}
",0,0,0,,
102,} finally {,"try {
  if (isDebugEnabled_DLS) {
    logger.trace(LogMarker.DLS_VERBOSE,""LockServiceDestroyedException respondWithNotGrantor to {}"",request);
  }
  request.respondWithNotGrantor();
}
  finally {
}
",0,0,0,,
103,} finally {,"try {
  handlePermittedLockRequest(request);
}
 catch (LockGrantorDestroyedException e) {
  try {
    if (isDebugEnabled_DLS) {
      logger.trace(LogMarker.DLS_VERBOSE,""LockGrantorDestroyedException respondWithNotGrantor to {}"",request);
    }
    request.respondWithNotGrantor();
  }
  finally {
  }
}
catch (LockServiceDestroyedException e) {
  try {
    if (isDebugEnabled_DLS) {
      logger.trace(LogMarker.DLS_VERBOSE,""LockServiceDestroyedException respondWithNotGrantor to {}"",request);
    }
    request.respondWithNotGrantor();
  }
  finally {
  }
}
catch (RuntimeException e) {
  logger.error(""Processing of postRemoteReleaseLock threw unexpected RuntimeException"",e);
  request.respondWithException(e);
}
 finally {
}
",0,0,0,,
104,} finally {,"try {
  base.evaluate();
}
  finally {
}
",0,0,0,,
105,} finally {,"try {
  initMocks(false);
  mockRequestToServer(eq(new HostAndPort(""localhost"",12346)));
  GMSMembershipView view=createView();
  JoinResponseMessage jrm=new JoinResponseMessage(mockMembers[0],view,0);
  gmsJoinLeave.setJoinResponseMessage(jrm);
  assertThatThrownBy(gmsJoinLeave::join).isInstanceOf(MembershipConfigurationException.class);
}
  finally {
}
",0,0,0,,
106,} finally {,"try {
  Object[] args=method.readArguments(_input);
  Object result=invoke_method(m,args);
  org.omg.CORBA.portable.OutputStream _out=response.createReply();
  method.writeResult(_out,result);
  logger.finer(debug_name(m) + "": returning normally"");
  return _out;
}
 catch (org.omg.CORBA.SystemException ex) {
  logger.throwing(RMIServant.class.getName(),""_invoke"",ex);
  logger.warning(ex.getMessage());
  throw ex;
}
catch (java.lang.reflect.UndeclaredThrowableException ex) {
  logger.throwing(RMIServant.class.getName(),""_invoke"",ex.getUndeclaredThrowable());
  throw new org.omg.CORBA.portable.UnknownException(ex.getUndeclaredThrowable());
}
catch (RuntimeException ex) {
  logger.log(Level.FINER,debug_name(m) + "": RuntimeException "" + ex.getMessage(),ex);
  return method.writeException(response,ex);
}
catch (java.rmi.RemoteException ex) {
  logger.log(Level.FINER,debug_name(m) + "": RemoteException "" + ex.getMessage(),ex);
  throw UtilImpl.mapRemoteException(ex);
}
catch (Throwable ex) {
  logger.log(Level.FINER,debug_name(m) + "": Throwable "" + ex.getMessage(),ex);
  return method.writeException(response,ex);
}
 finally {
}
",0,0,0,,
107,} finally {,"try {
  javax.rmi.PortableRemoteObject.exportObject(remote);
}
  finally {
}
",0,0,0,,
108,} finally {,"try {
  javax.rmi.PortableRemoteObject.unexportObject(remote);
}
  finally {
}
",0,0,0,,
109,} finally {,"try {
  int count;
  while ((count=is.read(buf)) != -1) {
    os.write(buf,0,count);
  }
}
  finally {
}
",0,0,0,,
110,} finally {,"try {
  int count;
  while ((count=reader.read(buf)) != -1) {
    writer.write(buf,0,count);
  }
}
  finally {
}
",0,0,0,,
111,finally {,"try {
  outKey.write(""key0"".getBytes());
  outKey.close();
  fail(""Key is longer than requested."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
112,finally {,"try {
  outValue.write(""value0"".getBytes());
  outValue.close();
  fail(""Value is shorter than expected."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
113,finally {,"try {
  outKey.write(""key0"".getBytes());
  outKey.close();
  fail(""Key is shorter than expected."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
114,finally {,"try {
  scanner.entry().getKey(buf,-1);
  fail(""Failed to handle key negative offset."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
115,} finally {,"try {
switch (opts.getCommand()) {
case CHECKPOINT:
    long count=countUncheckpointedTxns();
  if (count > checkpointConf.getTxnCount() || opts.shouldForceCheckpoint()) {
    doCheckpoint();
  }
 else {
    System.err.println(""EditLog size "" + count + "" transactions is ""+ ""smaller than configured checkpoint ""+ ""interval ""+ checkpointConf.getTxnCount()+ "" transactions."");
    System.err.println(""Skipping checkpoint."");
  }
break;
case GETEDITSIZE:
long uncheckpointed=countUncheckpointedTxns();
System.out.println(""NameNode has "" + uncheckpointed + "" uncheckpointed transactions"");
break;
default :
throw new AssertionError(""bad command enum: "" + opts.getCommand());
}
}
 catch (RemoteException e) {
exitCode=1;
try {
String[] content;
content=e.getLocalizedMessage().split(""\n"");
LOG.error(cmd + "": "" + content[0]);
}
 catch (Exception ex) {
LOG.error(cmd + "": "" + ex.getLocalizedMessage());
}
}
catch (IOException e) {
exitCode=1;
LOG.error(cmd + "": "" + e.getLocalizedMessage());
}
 finally {
}
",0,0,0,,
116,} finally {,"try {
  FileUtil.fullyDelete(nn2Dir);
  FileUtil.copy(nn1Dir,FileSystem.getLocal(conf).getRaw(),new Path(nn2Dir.getAbsolutePath()),false,conf);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageNameDfsDirs(false).checkExitOnShutdown(false).build();
  cluster.getFileSystem().mkdirs(TEST_PATH);
  Configuration conf2=new Configuration();
  conf2.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nn2Dir.getAbsolutePath());
  conf2.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI(""myjournal"").toString());
  MiniDFSCluster cluster2=new MiniDFSCluster.Builder(conf2).numDataNodes(0).format(false).manageNameDfsDirs(false).build();
  try {
    assertTrue(cluster2.getFileSystem().exists(TEST_PATH));
  }
  finally {
    cluster2.shutdown();
  }
  try {
    cluster.getFileSystem().mkdirs(new Path(""/x""));
    fail(""Did not abort trying to write to a fenced NN"");
  }
 catch (  RemoteException re) {
    GenericTestUtils.assertExceptionContains(""Could not sync enough journals to persistent storage"",re);
  }
}
  finally {
}
",0,0,0,,
117,} finally {,"try {
  while (loadStatus.overloaded()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Updating the overload status."");
    }
    try {
      checkLoadAndGetSlotsToBackfill();
    }
 catch (    IOException ioe) {
      LOG.warn(""[STRESS] Check failed!"",ioe);
      return;
    }
    if (loadStatus.overloaded()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""[STRESS] Cluster overloaded in run! Sleeping..."");
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
        LOG.warn(""[STRESS] Interrupted while sleeping! Exiting."",ie);
        return;
      }
    }
  }
  while (!loadStatus.overloaded()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""[STRESS] Cluster underloaded in run! Stressing..."");
    }
    try {
      final JobStory job=getNextJobFiltered();
      if (null == job) {
        LOG.warn(""[STRESS] Finished consuming the input trace. "" + ""Exiting.."");
        return;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(""Job Selected: "" + job.getJobID());
      }
      UserGroupInformation ugi=UserGroupInformation.createRemoteUser(job.getUser());
      UserGroupInformation tgtUgi=userResolver.getTargetUgi(ugi);
      GridmixJob tJob=jobCreator.createGridmixJob(conf,0L,job,scratch,tgtUgi,sequence.getAndIncrement());
      submitter.add(tJob);
      int incompleteMapTasks=(int)calcEffectiveIncompleteMapTasks(loadStatus.getMapCapacity(),job.getNumberMaps(),0.0f);
      loadStatus.decrementMapLoad(incompleteMapTasks);
      int incompleteReduceTasks=(int)calcEffectiveIncompleteReduceTasks(loadStatus.getReduceCapacity(),job.getNumberReduces(),0.0f);
      loadStatus.decrementReduceLoad(incompleteReduceTasks);
      loadStatus.decrementJobLoad(1);
    }
 catch (    IOException e) {
      LOG.error(""[STRESS] Error while submitting the job "",e);
      error=e;
      return;
    }
  }
}
  finally {
}
",0,0,0,,
118,} finally {,"try {
  server.init(conf);
  server.start();
  return server.getPort();
}
  finally {
}
",0,0,0,,
119,finally {,"try {
  outKey.write(""key0"".getBytes());
  outKey.close();
  Assert.fail(""Key is longer than requested."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
120,finally {,"try {
  outValue.write(""value0"".getBytes());
  outValue.close();
  Assert.fail(""Value is shorter than expected."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
121,finally {,"try {
  outKey.write(""key0"".getBytes());
  outKey.close();
  Assert.fail(""Key is shorter than expected."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
122,finally {,"try {
  scanner.entry().getKey(buf,-1);
  Assert.fail(""Failed to handle key negative offset."");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
123,finally {,"try {
  scanner.lowerBound(""keyN"".getBytes());
  Assert.fail(""Cannot search in a unsorted TFile!"");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
124,finally {,"try {
  scanner.upperBound(""keyA"".getBytes());
  Assert.fail(""Cannot search higher in a unsorted TFile!"");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
125,finally {,"try {
  scanner.seekTo(""keyM"".getBytes());
  Assert.fail(""Cannot search a unsorted TFile!"");
}
 catch (Exception e) {
}
 finally {
}
",0,0,0,,
126,} finally {,"try {
switch (opts.getCommand()) {
case CHECKPOINT:
    long count=countUncheckpointedTxns();
  if (count > checkpointConf.getTxnCount() || opts.shouldForceCheckpoint()) {
    doCheckpoint();
  }
 else {
    System.err.println(""EditLog size "" + count + "" transactions is ""+ ""smaller than configured checkpoint ""+ ""interval ""+ checkpointConf.getTxnCount()+ "" transactions."");
    System.err.println(""Skipping checkpoint."");
  }
break;
case GETEDITSIZE:
long uncheckpointed=countUncheckpointedTxns();
System.out.println(""NameNode has "" + uncheckpointed + "" uncheckpointed transactions"");
break;
default :
throw new AssertionError(""bad command enum: "" + opts.getCommand());
}
}
 catch (RemoteException e) {
exitCode=1;
try {
String[] content;
content=e.getLocalizedMessage().split(""\n"");
LOG.error(cmd + "": "" + content[0]);
}
 catch (Exception ex) {
LOG.error(cmd + "": "" + ex.getLocalizedMessage());
}
}
catch (IOException e) {
exitCode=1;
LOG.error(cmd + "": "" + e.getLocalizedMessage());
}
 finally {
}
",0,0,0,,
127,} finally {,"try {
  FileUtil.fullyDelete(nn2Dir);
  FileUtil.copy(nn1Dir,FileSystem.getLocal(conf).getRaw(),new Path(nn2Dir.getAbsolutePath()),false,conf);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageNameDfsDirs(false).checkExitOnShutdown(false).build();
  cluster.getFileSystem().mkdirs(TEST_PATH);
  Configuration conf2=new Configuration();
  conf2.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nn2Dir.getAbsolutePath());
  conf2.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,mjc.getQuorumJournalURI(""myjournal"").toString());
  MiniDFSCluster cluster2=new MiniDFSCluster.Builder(conf2).numDataNodes(0).format(false).manageNameDfsDirs(false).build();
  try {
    assertTrue(cluster2.getFileSystem().exists(TEST_PATH));
  }
  finally {
    cluster2.shutdown();
  }
  try {
    cluster.getFileSystem().mkdirs(new Path(""/x""));
    fail(""Did not abort trying to write to a fenced NN"");
  }
 catch (  RemoteException re) {
    GenericTestUtils.assertExceptionContains(""Could not sync enough journals to persistent storage"",re);
  }
}
  finally {
}
",0,0,0,,
128,} finally {,"try {
  while (loadStatus.overloaded()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Updating the overload status."");
    }
    try {
      checkLoadAndGetSlotsToBackfill();
    }
 catch (    IOException ioe) {
      LOG.warn(""[STRESS] Check failed!"",ioe);
      return;
    }
    if (loadStatus.overloaded()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""[STRESS] Cluster overloaded in run! Sleeping..."");
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
        LOG.warn(""[STRESS] Interrupted while sleeping! Exiting."",ie);
        return;
      }
    }
  }
  while (!loadStatus.overloaded()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""[STRESS] Cluster underloaded in run! Stressing..."");
    }
    try {
      final JobStory job=getNextJobFiltered();
      if (null == job) {
        LOG.warn(""[STRESS] Finished consuming the input trace. "" + ""Exiting.."");
        return;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(""Job Selected: "" + job.getJobID());
      }
      UserGroupInformation ugi=UserGroupInformation.createRemoteUser(job.getUser());
      UserGroupInformation tgtUgi=userResolver.getTargetUgi(ugi);
      GridmixJob tJob=jobCreator.createGridmixJob(conf,0L,job,scratch,tgtUgi,sequence.getAndIncrement());
      submitter.add(tJob);
      int incompleteMapTasks=(int)calcEffectiveIncompleteMapTasks(loadStatus.getMapCapacity(),job.getNumberMaps(),0.0f);
      loadStatus.decrementMapLoad(incompleteMapTasks);
      int incompleteReduceTasks=(int)calcEffectiveIncompleteReduceTasks(loadStatus.getReduceCapacity(),job.getNumberReduces(),0.0f);
      loadStatus.decrementReduceLoad(incompleteReduceTasks);
      loadStatus.decrementJobLoad(1);
    }
 catch (    IOException e) {
      LOG.error(""[STRESS] Error while submitting the job "",e);
      error=e;
      return;
    }
  }
}
  finally {
}
",0,0,0,,
129,} finally {,"try {
  if (""-checkpoint"".equals(cmd)) {
    long size=namenode.getEditLogSize();
    if (size >= checkpointSize || argv.length == 2 && ""force"".equals(argv[i])) {
      doCheckpoint();
    }
 else {
      System.err.println(""EditLog size "" + size + "" bytes is ""+ ""smaller than configured checkpoint ""+ ""size ""+ checkpointSize+ "" bytes."");
      System.err.println(""Skipping checkpoint."");
    }
  }
 else   if (""-geteditsize"".equals(cmd)) {
    long size=namenode.getEditLogSize();
    System.out.println(""EditLog size is "" + size + "" bytes"");
  }
 else {
    exitCode=-1;
    LOG.error(cmd.substring(1) + "": Unknown command"");
    printUsage("""");
  }
}
 catch (RemoteException e) {
  exitCode=-1;
  try {
    String[] content;
    content=e.getLocalizedMessage().split(""\n"");
    LOG.error(cmd.substring(1) + "": "" + content[0]);
  }
 catch (  Exception ex) {
    LOG.error(cmd.substring(1) + "": "" + ex.getLocalizedMessage());
  }
}
catch (IOException e) {
  exitCode=-1;
  LOG.error(cmd.substring(1) + "": "" + e.getLocalizedMessage());
}
 finally {
}
",0,0,0,,
130,} finally {,"try {
  if (""-showConfig"".equals(cmd)) {
    initializeRpc(conf,RaidNode.getAddress(conf));
    exitCode=showConfig(cmd,argv,i);
  }
 else   if (""-recover"".equals(cmd)) {
    initializeRpc(conf,RaidNode.getAddress(conf));
    exitCode=recoverAndPrint(cmd,argv,i);
  }
 else   if (""-recoverBlocks"".equals(cmd)) {
    initializeLocal(conf);
    recoverBlocks(argv,i);
    exitCode=0;
  }
 else   if (""-fsck"".equals(cmd)) {
    if (argv.length == 1) {
      exitCode=fsck(""/"");
    }
 else {
      exitCode=fsck(argv[1]);
    }
  }
 else {
    exitCode=-1;
    System.err.println(cmd.substring(1) + "": Unknown command"");
    printUsage("""");
  }
}
 catch (IllegalArgumentException arge) {
  exitCode=-1;
  System.err.println(cmd.substring(1) + "": "" + arge.getLocalizedMessage());
  printUsage(cmd);
}
catch (RemoteException e) {
  exitCode=-1;
  try {
    String[] content;
    content=e.getLocalizedMessage().split(""\n"");
    System.err.println(cmd.substring(1) + "": "" + content[0]);
  }
 catch (  Exception ex) {
    System.err.println(cmd.substring(1) + "": "" + ex.getLocalizedMessage());
  }
}
catch (IOException e) {
  exitCode=-1;
  System.err.println(cmd.substring(1) + "": "" + e.getLocalizedMessage());
}
catch (Exception re) {
  exitCode=-1;
  System.err.println(cmd.substring(1) + "": "" + re.getLocalizedMessage());
}
 finally {
}
",0,0,0,,
131,} finally {,"try {
  while (running && !staleState && !shuttingDown&& !denied) {
    try {
      State osState=offerService();
      if (osState == State.STALE) {
        staleState=true;
      }
 else       if (osState == State.DENIED) {
        denied=true;
      }
    }
 catch (    Exception e) {
      if (!shuttingDown) {
        LOG.info(""Lost connection to BSP Master ["" + bspMasterAddr + ""].  Retrying..."",e);
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException ie) {
        }
      }
    }
  }
}
  finally {
}
",0,0,0,,
132,} finally {,"try {
  return this.future.get().get();
}
 catch (Exception e) {
  LOG.error(""Error while fetching exit status from BSPTask"",e);
}
 finally {
}
",0,0,0,,
133,} finally {,"try {
  if (fs.exists(new Path(baseDir))) {
    fs.delete(new Path(baseDir),true);
  }
  HashMap<Integer,Writable> inputMatrix=new HashMap<Integer,Writable>();
  SparseVectorWritable vector0=new SparseVectorWritable();
  vector0.setSize(size);
  vector0.addCell(0,1);
  vector0.addCell(2,6);
  SparseVectorWritable vector1=new SparseVectorWritable();
  vector1.setSize(size);
  vector1.addCell(1,4);
  SparseVectorWritable vector2=new SparseVectorWritable();
  vector2.setSize(size);
  vector2.addCell(1,2);
  vector2.addCell(2,3);
  SparseVectorWritable vector3=new SparseVectorWritable();
  vector3.setSize(size);
  vector3.addCell(0,3);
  vector3.addCell(3,5);
  inputMatrix.put(0,vector0);
  inputMatrix.put(1,vector1);
  inputMatrix.put(2,vector2);
  inputMatrix.put(3,vector3);
  writeMatrix(matrixPath,conf,inputMatrix);
  HashMap<Integer,Writable> inputVector=new HashMap<Integer,Writable>();
  DenseVectorWritable vector=new DenseVectorWritable();
  vector.setSize(size);
  vector.addCell(0,2);
  vector.addCell(1,3);
  vector.addCell(2,6);
  vector.addCell(3,1);
  inputVector.put(0,vector);
  writeMatrix(vectorPath,conf,inputVector);
  SpMV.main(new String[]{matrixPath,vectorPath,outputPath,""4""});
  String resultPath=SpMV.getResultPath();
  DenseVectorWritable result=new DenseVectorWritable();
  SpMV.readFromFile(resultPath,result,conf);
  LOG.info(""result is a file: "" + fs.isFile(new Path(resultPath)));
  double expected[]={38,12,24,11};
  if (result.getSize() != size)   throw new Exception(""Incorrect size of output vector"");
  for (int i=0; i < result.getSize(); i++)   if ((result.get(i) - expected[i]) < 0.01)   expected[i]=0;
  for (int i=0; i < expected.length; i++)   if (expected[i] != 0)   throw new Exception(""Result doesn't meets expectations"");
  fs.delete(new Path(baseDir),true);
}
 catch (Exception e) {
  e.printStackTrace();
  fail(e.getLocalizedMessage());
}
 finally {
}
",0,0,0,,
134,finally {,"try {
  DelayQueue q=new DelayQueue();
  for (int i=0; i < SIZE; ++i) {
    PDelay I=new PDelay(i);
    q.put(I);
    assertTrue(q.contains(I));
  }
  assertEquals(SIZE,q.size());
}
  finally {
}
",0,0,0,,
135,} finally {,"try {
  q.put(new PDelay(0));
  ++added;
  q.put(new PDelay(0));
  ++added;
  q.put(new PDelay(0));
  ++added;
  q.put(new PDelay(0));
  ++added;
  threadAssertTrue(added == 4);
}
  finally {
}
",0,0,0,,
136,finally {,"try {
  PriorityBlockingQueue q=new PriorityBlockingQueue(SIZE);
  for (int i=0; i < SIZE; ++i) {
    Integer I=new Integer(i);
    q.put(I);
    assertTrue(q.contains(I));
  }
  assertEquals(SIZE,q.size());
}
  finally {
}
",0,0,0,,
137,} finally {,"try {
  q.put(new Integer(0));
  ++added;
  q.put(new Integer(0));
  ++added;
  q.put(new Integer(0));
  ++added;
  q.put(new Integer(0));
  ++added;
  threadAssertTrue(added == 4);
}
  finally {
}
",0,0,0,,
138,} finally {,"try {
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  assertEquals(1,s.availablePermits());
}
  finally {
}
",0,0,0,,
139,} finally {,"try {
  s.release(1);
  s.acquireUninterruptibly(1);
  s.release(2);
  s.acquireUninterruptibly(2);
  s.release(3);
  s.acquireUninterruptibly(3);
  s.release(4);
  s.acquireUninterruptibly(4);
  s.release(5);
  s.acquireUninterruptibly(5);
  assertEquals(1,s.availablePermits());
}
  finally {
}
",0,0,0,,
140,} finally {,"try {
  Support_Resources.copyFile(resources,null,""hyts_htmltest.html"");
  u=new URL(""file"","""",resources.getAbsolutePath() + ""/hyts_htmltest.html"");
  u.openConnection();
  is=(InputStream)u.getContent();
  is.read(ba=new byte[4096]);
  s=new String(ba);
  assertTrue(""Incorrect content "" + u + "" does not contain: \"" A Seemingly Non Important String \"""",s.indexOf(""A Seemingly Non Important String"") >= 0);
}
 catch (IOException e) {
  fail(""IOException thrown : "" + e.getMessage());
}
 finally {
}
",0,0,0,,
141,} finally {,"try {
  result=m.invoke(obj,args);
}
 catch (Exception e) {
  e.printStackTrace();
}
 finally {
}
",0,0,0,,
142,finally {,"try {
  DelayQueue q=new DelayQueue();
  for (int i=0; i < SIZE; ++i) {
    PDelay I=new PDelay(i);
    q.put(I);
    assertTrue(q.contains(I));
  }
  assertEquals(SIZE,q.size());
}
  finally {
}
",0,0,0,,
143,} finally {,"try {
  q.put(new PDelay(0));
  ++added;
  q.put(new PDelay(0));
  ++added;
  q.put(new PDelay(0));
  ++added;
  q.put(new PDelay(0));
  ++added;
  threadAssertTrue(added == 4);
}
  finally {
}
",0,0,0,,
144,finally {,"try {
  PriorityBlockingQueue q=new PriorityBlockingQueue(SIZE);
  for (int i=0; i < SIZE; ++i) {
    Integer I=new Integer(i);
    q.put(I);
    assertTrue(q.contains(I));
  }
  assertEquals(SIZE,q.size());
}
  finally {
}
",0,0,0,,
145,} finally {,"try {
  q.put(new Integer(0));
  ++added;
  q.put(new Integer(0));
  ++added;
  q.put(new Integer(0));
  ++added;
  q.put(new Integer(0));
  ++added;
  threadAssertTrue(added == 4);
}
  finally {
}
",0,0,0,,
146,} finally {,"try {
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  s.acquireUninterruptibly();
  s.release();
  assertEquals(1,s.availablePermits());
}
  finally {
}
",0,0,0,,
147,} finally {,"try {
  s.release(1);
  s.acquireUninterruptibly(1);
  s.release(2);
  s.acquireUninterruptibly(2);
  s.release(3);
  s.acquireUninterruptibly(3);
  s.release(4);
  s.acquireUninterruptibly(4);
  s.release(5);
  s.acquireUninterruptibly(5);
  assertEquals(1,s.availablePermits());
}
  finally {
}
",0,0,0,,
148,} finally {,"try {
  Support_Resources.copyFile(resources,null,""hyts_htmltest.html"");
  u=new URL(""file"","""",resources.getAbsolutePath() + ""/hyts_htmltest.html"");
  u.openConnection();
  is=(InputStream)u.getContent();
  is.read(ba=new byte[4096]);
  s=new String(ba);
  assertTrue(""Incorrect content "" + u + "" does not contain: \"" A Seemingly Non Important String \"""",s.indexOf(""A Seemingly Non Important String"") >= 0);
}
 catch (IOException e) {
  fail(""IOException thrown : "" + e.getMessage());
}
 finally {
}
",0,0,0,,
149,} finally {,"try {
  result=m.invoke(obj,args);
}
 catch (Exception e) {
  e.printStackTrace();
}
 finally {
}
",0,0,0,,
150,} finally {,"try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(PermissionStorage.ACL_TABLE_NAME)){
  t.put(new Put(TEST_ROW).addColumn(PermissionStorage.ACL_LIST_FAMILY,TEST_QUALIFIER,TEST_VALUE));
  return null;
}
  finally {
}
",0,0,0,,
151,} finally {,"try {
  for (int i=0; i < args.length; ++i) {
    if (args[i] == null) {
      continue;
    }
 else     if (args[i].equals(""-count"")) {
      count=Integer.parseInt(args[++i]);
    }
 else {
      file=args[i];
    }
  }
  boolean isLocalFS=true;
  PerformTestRCFileAndSeqFile testcase=new PerformTestRCFileAndSeqFile(isLocalFS,file);
  boolean checkCorrect=true;
  CompressionCodec codec=new DefaultCodec();
  testcase.columnMaxSize=30;
  testcase.testWithColumnNumber(count,40,checkCorrect,codec);
}
  finally {
}
",0,0,0,,
152,} finally {,"try {
  JDBCThinDriver j=new JDBCThinDriver();
  j.ssl();
}
 catch (Exception e) {
  e.printStackTrace();
  System.exit(1);
}
 finally {
}
",0,0,0,,
153,} finally {,"try {
  computeService=getConfig(COMPUTE_SERVICE_REGISTRY).findComputeService(config().getBag(),true);
  computeService.destroyNode(instanceId);
}
  finally {
}
",0,0,0,,
154,} finally {,"try {
  ExampleTestUtil.ensureOutputValidity(fileBasePath,outputFileName,expectedSlidingWindowOutputFileName);
}
  finally {
}
",0,0,0,,
155,} finally {,"try {
  ExampleTestUtil.ensureOutputValidity(ExampleTestArgs.getFileBasePath(),outputFileName,expectedSlidingWindowOutputFileName);
}
  finally {
}
",0,0,0,,
156,finally {,"try {
  session.close();
}
  finally {
}
",0,0,0,,
157,} finally {,"try {
  json=MessageWrapper.serialize(type,sequenceNo,message);
}
 catch (Exception e) {
  Log.e(TAG,""Error serializing message "",e);
}
 finally {
}
",0,0,0,,
158,} finally {,"try {
  EventHandler handler=eventDispatchers.get(type);
  if (handler != null) {
    handler.handle(event);
  }
 else {
    throw new Exception(""No handler for registered for "" + type);
  }
}
 catch (Throwable t) {
  LOG.fatal(""Error in dispatcher thread:"" + event.getType(),t);
  if (exitOnDispatchException && (ShutdownHookManager.get().isShutdownInProgress()) == false) {
    LOG.info(""Exiting, bye.."");
    System.exit(-1);
  }
}
 finally {
}
",0,0,0,,
159,finally {,"try {
  URL url=new URL(xmlFileUrl);
  con=url.openConnection();
  con.setConnectTimeout(4000);
  ret=readDescriptionsFromStream(con.getInputStream());
}
 catch (IOException ioe) {
  logger.error(""Problem retrieving from "" + xmlFileUrl);
  logger.error(ioe);
  throw ioe;
}
 finally {
}
",0,0,0,,
160,} finally {,"try {
  val propertyEditDto=PropertySetterOrClearFacetForDomainEventAbstract.this.getInteractionDtoServiceInternal().asPropertyEditDto(owningProperty,head.getOwner(),newValueAdapterMutatable);
  currentExecution.setDto(propertyEditDto);
  val oldValuePojo=getterFacet.getProperty(head.getTarget(),interactionInitiatedBy);
  val newValuePojo=UnwrapUtil.single(newValueAdapterMutatable);
  val propertyDomainEvent=domainEventHelper.postEventForProperty(AbstractDomainEvent.Phase.EXECUTING,PropertySetterOrClearFacetForDomainEventAbstract.this.getEventType(),null,PropertySetterOrClearFacetForDomainEventAbstract.this.getFacetHolder(),head,oldValuePojo,newValuePojo);
  val newValuePojoPossiblyUpdated=propertyDomainEvent.getNewValue();
  if (!Objects.equals(newValuePojoPossiblyUpdated,newValuePojo)) {
    newValueAdapterMutatable=newValuePojoPossiblyUpdated != null ? PropertySetterOrClearFacetForDomainEventAbstract.this.getObjectManager().adapt(newValuePojoPossiblyUpdated) : null;
  }
  currentExecution.setEvent(propertyDomainEvent);
  style.invoke(PropertySetterOrClearFacetForDomainEventAbstract.this,owningProperty,head.getTarget(),newValueAdapterMutatable,interactionInitiatedBy);
  val actualNewValue=getterFacet.getProperty(head.getTarget(),interactionInitiatedBy);
  if (!Objects.equals(oldValuePojo,actualNewValue)) {
    domainEventHelper.postEventForProperty(AbstractDomainEvent.Phase.EXECUTED,PropertySetterOrClearFacetForDomainEventAbstract.this.getEventType(),uncheckedCast(propertyDomainEvent),PropertySetterOrClearFacetForDomainEventAbstract.this.getFacetHolder(),head,oldValuePojo,actualNewValue);
  }
  val targetManagedObjectPossiblyCloned=PropertySetterOrClearFacetForDomainEventAbstract.this.cloneIfViewModelCloneable(head.getTarget());
  return targetManagedObjectPossiblyCloned.getPojo();
}
  finally {
}
",0,0,0,,
161,} finally {,"try {
  Set<String> initAdd=add(tracker,range(0,10000));
  ScheduledFuture<?> scheduledFuture=scheduler.schedule(tracker.new SnapshotJob(),0,TimeUnit.MILLISECONDS);
  scheduledFuture.get();
  Set<String> retrieved=retrieveFile(tracker,folder);
  assertTrue(retrieved.isEmpty());
  retrieved=retrieve(tracker);
  assertTrue(retrieved.isEmpty());
}
  finally {
}
",0,0,0,,
162,} finally {,"try {
  return super.release(checkpoint);
}
  finally {
}
",0,0,0,,
163,} finally {,"try {
  Principal testPrincipal=principalManager.getPrincipal(principalName);
  assertNotNull(testPrincipal);
  Set<String> groupNames=Sets.newHashSet(""myGroup"",EveryonePrincipal.NAME);
  PrincipalIterator groups=principalManager.getGroupMembership(testPrincipal);
  while (groups.hasNext()) {
    groupNames.remove(groups.nextPrincipal().getName());
  }
  assertTrue(groupNames.isEmpty());
}
  finally {
}
",0,0,0,,
164,} finally {,"try {
  Privilege[] testPrivileges=new Privilege[]{customAbstractPriv,customAggrPriv};
  Set<Principal> testPrincipals=ImmutableSet.of(EveryonePrincipal.getInstance(),getTestUser().getPrincipal());
  boolean hasPrivilege=getAccessControlManager(root).hasPrivileges(""/"",testPrincipals,testPrivileges);
  assertTrue(hasPrivilege);
}
  finally {
}
",0,0,0,,
165,} finally {,"try {
  NodeStateEntry root=new NodeStateEntry(EmptyNodeState.EMPTY_NODE,""/"");
  NodeStateEntry e1Byte=new NodeStateEntry(EmptyNodeState.EMPTY_NODE,""/a/b"",1);
  NodeStateEntry e1MB=new NodeStateEntry(EmptyNodeState.EMPTY_NODE,""/a"",1 * 1024 * 1024);
  NodeStateEntry e100MB=new NodeStateEntry(EmptyNodeState.EMPTY_NODE,""/a"",100 * 1024 * 1024);
{
    int mb=100;
    List<NodeStateEntry> list=Lists.newArrayList(root,e100MB,e1Byte);
    FlatFileStoreIterator fitr=newInMemoryFlatFileStore(list.iterator(),ImmutableSet.of(),mb);
    NodeState rootNS=fitr.next().getNodeState();
    NodeState aNS=rootNS.getChildNode(""a"");
    try {
      aNS.getChildNode(""b"");
      fail(""Reading beyond default 100MB must fail"");
    }
 catch (    IllegalStateException ise) {
    }
  }
{
    int mb=1;
    System.setProperty(BUFFER_MEM_LIMIT_CONFIG_NAME,""1"");
    List<NodeStateEntry> list=Lists.newArrayList(root,e1MB,e1Byte);
    FlatFileStoreIterator fitr=newInMemoryFlatFileStore(list.iterator(),ImmutableSet.of(),mb);
    NodeState rootNS=fitr.next().getNodeState();
    NodeState aNS=rootNS.getChildNode(""a"");
    try {
      aNS.getChildNode(""b"");
      fail(""Reading beyond configured 1MB must fail"");
    }
 catch (    IllegalStateException ise) {
    }
  }
{
    int mb=-1;
    List<NodeStateEntry> list=Lists.newArrayList(root,e100MB,e1Byte);
    FlatFileStoreIterator fitr=newInMemoryFlatFileStore(list.iterator(),ImmutableSet.of(),mb);
    NodeState rootNS=fitr.next().getNodeState();
    NodeState aNS=rootNS.getChildNode(""a"");
    aNS.getChildNode(""b"");
  }
}
  finally {
}
",0,0,0,,
166,} finally {,"try {
  for (  Service service : serviceApi.list().concat().toList()) {
    System.out.println(""Delete service "" + service.getId());
    serviceApi.delete(service.getId());
  }
}
  finally {
}
",0,0,0,,
167,} finally {,"try {
  Service serviceList=serviceApi.list().concat().toSet().iterator().next();
  System.out.println(""Purging assets for "" + serviceList.getId());
}
  finally {
}
",0,0,0,,
168,} finally {,"try {
  Service serviceList=serviceApi.list().concat().toSet().iterator().next();
  System.out.println(""Update service "" + serviceList.getId());
  System.out.println(""Status: "" + serviceList.getStatus());
  org.jclouds.openstack.poppy.v1.domain.UpdateService updated=serviceList.toUpdatableService().name(""updated_name"").build();
  serviceApi.update(serviceList.getId(),serviceList,updated);
}
  finally {
}
",0,0,0,,
169,} finally {,"try {
  while (!next.equals(nil)) {
    Statement elt[]=new Statement[list == null ? 2 : 3];
    if (next instanceof Literal)     return null;
    Resource res=(Resource)next;
    if (!isGenuineAnon(res))     return null;
    if (seen.contains(next))     return null;
    seen.add(next);
    StmtIterator ss=res.listProperties();
    try {
      while (ss.hasNext()) {
        Statement s=ss.nextStatement();
        Property p=s.getPredicate();
        int ix;
        RDFNode obj=s.getObject();
        if (doneSet.contains(s))         return null;
        if (!(obj instanceof Resource)) {
          return null;
        }
        if (p.equals(RDF.type)) {
          ix=2;
          if (!obj.equals(list))           return null;
        }
 else         if (p.equals(first)) {
          ix=0;
        }
 else         if (p.equals(rest)) {
          ix=1;
          next=obj;
        }
 else {
          return null;
        }
        if (elt[ix] != null)         return null;
        elt[ix]=s;
      }
    }
  finally {
      ss.close();
    }
    for (    Statement anElt : elt) {
      if (anElt == null) {
        return null;
      }
    }
    rslt.add(elt);
  }
  if (rslt.size() == 0)   return null;
}
  finally {
}
",0,0,0,,
170,} finally {,"try {
  checkPropURI(""_:aa"",null,null,BadURI);
}
  finally {
}
",0,0,0,,
171,} finally {,"try {
  checkPropURI(""_:aa"",""allowBadURIs"",""true"",NoError);
}
  finally {
}
",0,0,0,,
172,} finally {,"try {
  @SuppressWarnings(""unused"") TModelDetail saveTModel=publication.saveTModel(st);
  Assert.fail(""request should have been rejected"");
}
 catch (ValueNotAllowedException ex) {
  HandleException(ex);
  throw ex;
}
 finally {
}
",0,0,0,,
173,} finally {,"try {
  System.out.println(""Registering tModel"");
  clerk.register(createKeyGenator);
  System.out.println(""Registering destination type tmodel"");
  clerk.register(destinationType);
  System.out.println(""Registering destination name tmodel"");
  clerk.register(destinationName);
  System.out.println(""Registering business with callback definition"");
  clerk.register(be);
  Properties p=new Properties();
  p.setProperty(""java.naming.factory.initial"",""org.apache.qpid.jndi.PropertiesFileInitialContextFactory"");
  p.setProperty(""connectionfactory.qpidConnectionfactory"",amqpURL);
  p.setProperty(""destination."" + TOPIC,""amq.topic"");
  System.out.println(""Connecting to AMQP at "" + amqpURL);
  Context context=new InitialContext(p);
  ConnectionFactory connectionFactory=(ConnectionFactory)context.lookup(""qpidConnectionfactory"");
  Connection connection=connectionFactory.createConnection();
  connection.start();
  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
  Destination destination=(Destination)context.lookup(TOPIC);
  MessageConsumer consumer=session.createConsumer(destination);
  consumer.setMessageListener(this);
  System.out.println(""Connected and listening..."");
  Subscription sub=new Subscription();
  sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
  sub.setBindingKey(base + ""binding"");
  sub.setSubscriptionKey(base + ""sub-fb"");
  sub.setSubscriptionFilter(new SubscriptionFilter());
  sub.getSubscriptionFilter().setFindBusiness(new FindBusiness());
  sub.getSubscriptionFilter().getFindBusiness().setFindQualifiers(new FindQualifiers());
  sub.getSubscriptionFilter().getFindBusiness().getFindQualifiers().getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
  sub.getSubscriptionFilter().getFindBusiness().getName().add(new Name(UDDIConstants.WILDCARD,null));
  Subscription subscriptionBiz=clerk.register(sub,clerk.getUDDINode().getApiNode());
  System.out.println(""Registered FindBusiness subscription key: "" + (subscriptionBiz.getSubscriptionKey()) + "" bindingkey: ""+ subscriptionBiz.getBindingKey());
  sub=new Subscription();
  sub.setSubscriptionKey(base + ""sub-fs"");
  sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
  sub.setBindingKey(base + ""binding"");
  sub.setSubscriptionFilter(new SubscriptionFilter());
  sub.getSubscriptionFilter().setFindService(new FindService());
  sub.getSubscriptionFilter().getFindService().setFindQualifiers(new FindQualifiers());
  sub.getSubscriptionFilter().getFindService().getFindQualifiers().getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
  sub.getSubscriptionFilter().getFindService().getName().add(new Name(UDDIConstants.WILDCARD,null));
  Subscription subscriptionSvc=clerk.register(sub,clerk.getUDDINode().getApiNode());
  System.out.println(""Registered FindService subscription key: "" + (subscriptionSvc.getSubscriptionKey()) + "" bindingkey: ""+ subscriptionSvc.getBindingKey());
  sub=new Subscription();
  sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
  sub.setBindingKey(base + ""binding"");
  sub.setSubscriptionKey(base + ""sub-ft"");
  sub.setSubscriptionFilter(new SubscriptionFilter());
  sub.getSubscriptionFilter().setFindTModel(new FindTModel());
  sub.getSubscriptionFilter().getFindTModel().setFindQualifiers(new FindQualifiers());
  sub.getSubscriptionFilter().getFindTModel().getFindQualifiers().getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
  sub.getSubscriptionFilter().getFindTModel().setName(new Name(UDDIConstants.WILDCARD,null));
  Subscription subscriptionTM=clerk.register(sub,clerk.getUDDINode().getApiNode());
  System.out.println(""Registered FindTModel subscription key: "" + (subscriptionTM.getSubscriptionKey()) + "" bindingkey: ""+ subscriptionTM.getBindingKey());
  System.out.println(""Waiting for callbacks. Now would be a good time to launch either another program or juddi-gui to make some changes. Press any key to stop!"");
  System.out.println(""Listening, press any key to quit"");
  System.in.read();
  connection.close();
}
 catch (Exception ex) {
  ex.printStackTrace();
}
 finally {
}
",0,0,0,,
174,} finally {,"try {
  @SuppressWarnings(""unused"") TModelDetail saveTModel=publicationJoe.saveTModel(st);
  Assert.fail(""request should have been rejected"");
}
 catch (SOAPFaultException ex) {
  HandleException(ex);
  throw ex;
}
 finally {
}
",0,0,0,,
175,} finally {,"try {
  TModel tm=new TModel();
  tm.setCategoryBag(new CategoryBag());
  tm.setName(new Name(""My Custom validated key"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.IS_DERIVED_FROM,"""",""uddi:juddi.apache.org:"" + UUID.randomUUID().toString()));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
176,} finally {,"try {
  TModel tm=new TModel();
  tm.setCategoryBag(new CategoryBag());
  tm.setName(new Name(""My Custom validated key"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.ENTITY_KEY_VALUES,"""",""asdasdasd""));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
177,} finally {,"try {
  BusinessEntity be=new BusinessEntity();
  be.getName().add(new Name(""test"",""en""));
  be.setCategoryBag(new CategoryBag());
  be.getCategoryBag().getKeyedReference().add(new KeyedReference(""uddi:uddi.org:categorization:nodes"","""",""asdasd""));
  SaveBusiness sb=new SaveBusiness();
  sb.setAuthInfo(authInfoJoe);
  sb.getBusinessEntity().add(be);
  BusinessDetail saveBusiness=publicationJoe.saveBusiness(sb);
  deleteBusiness(authInfoJoe,saveBusiness.getBusinessEntity().get(0).getBusinessKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
178,} finally {,"try {
  BusinessEntity be=new BusinessEntity();
  be.getName().add(new Name(""test"",""en""));
  be.setBusinessServices(new BusinessServices());
  BusinessService bs=new BusinessService();
  bs.setCategoryBag(new CategoryBag());
  bs.getCategoryBag().getKeyedReference().add(new KeyedReference(""uddi:uddi.org:categorization:nodes"","""",""asdasd""));
  be.getBusinessServices().getBusinessService().add(bs);
  be.setCategoryBag(new CategoryBag());
  SaveBusiness sb=new SaveBusiness();
  sb.setAuthInfo(authInfoJoe);
  sb.getBusinessEntity().add(be);
  BusinessDetail saveBusiness=publicationJoe.saveBusiness(sb);
  deleteBusiness(authInfoJoe,saveBusiness.getBusinessEntity().get(0).getBusinessKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
179,} finally {,"try {
  Assume.assumeTrue(TckPublisher.isEnabled());
  Assume.assumeTrue(TckPublisher.isValueSetAPIEnabled());
  BusinessEntity be=new BusinessEntity();
  be.getName().add(new Name(""test"",""en""));
  be.setCategoryBag(new CategoryBag());
  be.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.OWNING_BUSINESS,"""",""uddi:juddi.apache.org:"" + UUID.randomUUID().toString()));
  SaveBusiness sb=new SaveBusiness();
  sb.setAuthInfo(authInfoJoe);
  sb.getBusinessEntity().add(be);
  BusinessDetail saveBusiness=publicationJoe.saveBusiness(sb);
  deleteBusiness(authInfoJoe,saveBusiness.getBusinessEntity().get(0).getBusinessKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
180,} finally {,"try {
  TModel tm=new TModel();
  tm.setCategoryBag(new CategoryBag());
  tm.setName(new Name(""My Custom validated key"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.OWNING_BUSINESS,"""",""uddi:juddi.apache.org:"" + UUID.randomUUID().toString()));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
181,} finally {,"try {
  TModel tm=new TModel();
  tm.setCategoryBag(new CategoryBag());
  tm.setName(new Name(""My Custom validated key"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(""uddi:uddi.org:categorization:types"","""",""wsdlDeployment""));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
182,} finally {,"try {
  BusinessEntity be=new BusinessEntity();
  be.getName().add(new Name(""test"",""en""));
  be.setBusinessServices(new BusinessServices());
  be.getBusinessServices().getBusinessService().add(new BusinessService());
  be.getBusinessServices().getBusinessService().get(0).getName().add(new Name(""test"",""en""));
  SaveBusiness sb=new SaveBusiness();
  sb.setAuthInfo(authInfoJoe);
  saveBusiness=publicationJoe.saveBusiness(sb);
  SaveBinding sbb=new SaveBinding();
  sbb.setAuthInfo(authInfoJoe);
  BindingTemplate bt=new BindingTemplate();
  bt.setServiceKey(saveBusiness.getBusinessEntity().get(0).getBusinessServices().getBusinessService().get(0).getServiceKey());
  bt.setAccessPoint(new AccessPoint(""http://test"",""endPoint""));
  bt.setCategoryBag(new CategoryBag());
  bt.getCategoryBag().getKeyedReference().add(new KeyedReference(""uddi:uddi.org:categorization:types"","""",""namespace""));
  publicationJoe.saveBinding(sbb);
  deleteBusiness(authInfoJoe,saveBusiness.getBusinessEntity().get(0).getBusinessKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
183,} finally {,"try {
  TModel tm=new TModel();
  tm.setName(new Name(""My new tmodel"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.setCategoryBag(new CategoryBag());
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.IS_REPLACED_BY,"""",TckTModel.JOE_PUBLISHER_KEY_PREFIX + UUID.randomUUID().toString()));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
184,} finally {,"try {
  TModel tm=new TModel();
  tm.setName(new Name(""My new tmodel"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.setCategoryBag(new CategoryBag());
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.IS_REPLACED_BY,"""",""uddi:juddi.apache.org:node1""));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
185,} finally {,"try {
  TModel tm=new TModel();
  tm.setCategoryBag(new CategoryBag());
  tm.setName(new Name(""My Custom validated key"",""en""));
  tm.getDescription().add(new Description(""valid values include 'one', 'two', 'three'"",""en""));
  tm.getCategoryBag().getKeyedReference().add(new KeyedReference(UDDIConstants.RELATIONSHIPS,"""",""asdasdasd""));
  SaveTModel stm=new SaveTModel();
  stm.setAuthInfo(authInfoJoe);
  stm.getTModel().add(tm);
  TModelDetail saveTModel=publicationJoe.saveTModel(stm);
  deleteTModel(authInfoJoe,saveTModel.getTModel().get(0).getTModelKey(),publicationJoe);
  Assert.fail(""unexpected success"");
}
 catch (Exception ex) {
  logger.info(""Expected failure "" + ex.getMessage());
  logger.debug(""Expected failure "" + ex.getMessage(),ex);
}
 finally {
}
",0,0,0,,
186,} finally {,"try {
  server.start();
  System.out.print(""Server started on port "" + 8081 + ""....."");
}
  finally {
}
",0,0,0,,
187,} finally {,"try {
  server.start();
  System.out.print(""Server started on port "" + 8081 + ""....."");
}
  finally {
}
",0,0,0,,
188,} finally {,"try {
  server.start();
  System.out.print(""Server started on port "" + 8081 + ""....."");
}
  finally {
}
",0,0,0,,
189,finally,"try {
  HttpResponse httpResponse=client.execute(method);
  int resultCode=httpResponse.getStatusLine().getStatusCode();
  String resultJSON=sp.convertToString(httpResponse);
  result.setReference(new VariableResult(resultCode,resultJSON));
  return false;
}
  finally {
}
",0,0,0,,
190,finally,"try {
  HttpResponse httpResponse=client.execute(method);
  int resultCode=httpResponse.getStatusLine().getStatusCode();
  String resultJSON=sp.convertToString(httpResponse);
  result.setReference(new VariableResult(resultCode,resultJSON));
  return false;
}
  finally {
}
",0,0,0,,
191,finally,"try {
  method.setEntity(new StringEntity(json,ContentType.create(""text/plain"",StandardCharsets.UTF_8)));
  HttpResponse httpResponse=client.execute(method);
  int resultCode=httpResponse.getStatusLine().getStatusCode();
  String resultJSON=sp.convertToString(httpResponse);
  result.setReference(new VariableResult(resultCode,resultJSON));
  return false;
}
  finally {
}
",0,0,0,,
192,finally,"try {
  method.setEntity(new StringEntity(json,ContentType.create(""text/plain"",StandardCharsets.UTF_8)));
  HttpResponse httpResponse=client.execute(method);
  int resultCode=httpResponse.getStatusLine().getStatusCode();
  String resultJSON=sp.convertToString(httpResponse);
  result.setReference(new VariableResult(resultCode,resultJSON));
  return false;
}
  finally {
}
",0,0,0,,
193,} finally {,"try {
synchronized (this) {
    if (watchService == null) {
      watchService=FileSystems.getDefault().newWatchService();
    }
  }
  pathTable.clear();
  if (recursive) {
    registerAll(watchService,root);
  }
 else {
    register(watchService,root);
  }
  log.debug(""watching..."");
  while (true) {
    try {
      final WatchKey key=watchService.take();
      final Path parent=pathTable.get(key);
      if (parent == null) {
        log.warn(""WatchKey not recognized: {}, ignoring event"",key);
        continue;
      }
      try {
        for (        WatchEvent<?> event : key.pollEvents()) {
          final WatchEvent.Kind<?> kind=event.kind();
          if (kind == OVERFLOW) {
            log.trace(""overflow event for {}"",parent);
            continue;
          }
          @SuppressWarnings(""unchecked"") final WatchEvent<Path> pathEvent=(WatchEvent<Path>)event;
          final Path localPath=pathEvent.context();
          if (localPath == null) {
            log.warn(""Could not get context for %s in %s"",kind,parent);
            continue;
          }
          final Path target=parent.resolve(localPath);
          if (kind == ENTRY_CREATE) {
            if (Files.isDirectory(target)) {
              log.trace(""created dir: {}"",target);
              onDirectoryCreated(target);
              if (recursive) {
                registerAll(watchService,target);
              }
            }
 else {
              log.trace(""created file: {}"",target);
              onFileCreated(target);
            }
            log.trace(""new child in {}: {}"",parent,localPath);
            onChildCreated(parent,target);
          }
 else           if (kind == ENTRY_MODIFY) {
            log.trace(""modified file: {}"",target);
            onFileModified(target);
          }
 else           if (kind == ENTRY_DELETE) {
            log.trace(""deleted child in {}: {}"",parent,localPath);
            onChildDeleted(parent,target);
          }
 else {
            log.error(""Unexpected event type: {}"",kind);
          }
        }
      }
  finally {
        if (!key.reset()) {
          pathTable.remove(key);
        }
      }
    }
 catch (    InterruptedException|ClosedWatchServiceException e) {
      log.trace(""shutting down..."");
      break;
    }
  }
  watchService.close();
  watchService=null;
  log.info(""file-system watcher on {} ({}) stopped."",root,recursive ? ""recursive"" : ""non-recursive"");
}
 catch (IOException e) {
  log.error(""file-system watcher on {} ({}) died: {}"",root,recursive ? ""recursive"" : ""non-recursive"",e.getMessage());
}
 finally {
}
",0,0,0,,
194,finally,"try {
  ByteArrayOutputStream xmlOut=new ByteArrayOutputStream();
  QueryResultIO.writeBoolean(value,BooleanQueryResultFormat.SPARQL,xmlOut);
  byte[] queryResult=xmlOut.toByteArray();
  String server_uri=CDIContext.getInstance(ConfigurationService.class).getServerUri();
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(out));
  Source input=new StreamSource(new ByteArrayInputStream(queryResult));
  Source s_stylesheet=new StreamSource(SPARQLBooleanHTMLWriter.class.getResourceAsStream(""style.xsl""));
  Templates stylesheet=TransformerFactory.newInstance().newTemplates(s_stylesheet);
  Transformer transformer=stylesheet.newTransformer();
  transformer.setParameter(""serverurl"",server_uri);
  JDOMResult result=new JDOMResult();
  transformer.transform(input,result);
  Document output=result.getDocument();
  XMLOutputter printer=new XMLOutputter(Format.getPrettyFormat());
  printer.output(output,writer);
  writer.flush();
}
 catch (TransformerConfigurationException e) {
  log.error(""could not compile stylesheet for rendering SPARQL results; result display not available!"");
  throw new QueryResultHandlerException(""could not compile stylesheet for rendering SPARQL results; result display not available!"",e);
}
catch (Exception ex) {
  throw new QueryResultHandlerException(""error while transforming XML results to HTML"",ex);
}
 finally {
}
",0,0,0,,
195,finally,"try {
  DefaultMavenExecutionRequest req=new DefaultMavenExecutionRequest();
  req.setBaseDirectory(project.getBasedir());
  req.setInteractiveMode(false);
  req.setGoals(projectGoals);
  req.setProperties(buildProperties);
  maven.execute(req);
  getLog().info(""...SUCCESS."");
}
  finally {
}
",0,0,0,,
196,} finally {,"try {
  for (  String name : serviceDiscovery.queryForNames()) {
    for (    ServiceInstance<ModelEndpoint> endpoint : serviceDiscovery.queryForInstances(name)) {
      ModelEndpoint ep=endpoint.getPayload();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""Found model endpoint "" + ep);
      }
      String currentVersion=modelToVersion.getOrDefault(ep.getName(),ep.getVersion());
      currentVersion=currentVersion.compareTo(ep.getVersion()) < 0 ? ep.getVersion() : currentVersion;
      modelToVersion.put(ep.getName(),currentVersion);
      containerToEndpoint.put(ep.getContainerId(),endpoint);
      Model model=new Model(ep.getName(),ep.getVersion());
      List<ModelEndpoint> endpoints=state.get(model);
      if (endpoints == null) {
        endpoints=new ArrayList<>();
        state.put(model,endpoints);
      }
      endpoints.add(ep);
    }
  }
  rwLock.writeLock().lock();
  try {
    this.modelToCurrentVersion=modelToVersion;
    this.state=state;
    this.containerToEndpoint=containerToEndpoint;
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Containers found: "" + containerToEndpoint);
    }
  }
  finally {
    rwLock.writeLock().unlock();
  }
}
 catch (Exception e) {
  LOG.error(e.getMessage(),e);
}
 finally {
}
",0,0,0,,
197,finally {,"try {
  serviceDiscovery=ServiceDiscoveryBuilder.builder(ModelEndpoint.class).client(client).basePath(config.getServiceRoot()).serializer(serializer).build();
}
  finally {
}
",0,0,0,,
198,finally {,"try (CuratorFramework client=CuratorFrameworkFactory.newClient(getZookeeperConnectString(),retryPolicy)){
  client.start();
  String root=""/storm/leader-lock"";
  Stat exists=client.checkExists().forPath(root);
  if (exists == null) {
    client.create().creatingParentsIfNeeded().forPath(root);
  }
}
 catch (Exception e) {
  LOG.error(""Unable to create leaderlock"",e);
}
 finally {
}
",0,0,0,,
199,} finally {,"try {
  bootstrap=new ServerBootstrap();
  bootstrap.option(ChannelOption.SO_RCVBUF,128 * 1024);
  bootstrap.option(ChannelOption.TCP_NODELAY,true);
  bootstrap.group(new NioEventLoopGroup(),new NioEventLoopGroup());
  bootstrap.channel(NioServerSocketChannel.class);
  bootstrap.localAddress(port);
  bootstrap.childHandler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel channel) throws Exception {
      channel.pipeline().addLast(new TestServerHandler());
    }
  }
);
  ChannelFuture bindFuture=bootstrap.bind();
}
  finally {
}
",0,0,0,,
200,} finally {,"try {
  threadPoolExecutor.awaitTermination(5000,TimeUnit.MILLISECONDS);
}
 catch (InterruptedException e) {
}
 finally {
}
",0,0,0,,
201,finally,"try {
  facesContext.setCurrentPhaseId(PhaseId.RENDER_RESPONSE);
  flash.doPrePhaseActions(facesContext);
  Method doPrePhaseActionsMethod=phaseExecutor.getClass().getMethod(""doPrePhaseActions"",FacesContext.class);
  if (!(doPrePhaseActionsMethod.isAccessible())) {
    doPrePhaseActionsMethod.setAccessible(true);
  }
  doPrePhaseActionsMethod.invoke(phaseExecutor,facesContext);
  Method informPhaseListenersBeforeMethod=phaseManager.getClass().getDeclaredMethod(""informPhaseListenersBefore"",PhaseId.class);
  if (!(informPhaseListenersBeforeMethod.isAccessible())) {
    informPhaseListenersBeforeMethod.setAccessible(true);
  }
  informPhaseListenersBeforeMethod.invoke(phaseManager,PhaseId.RENDER_RESPONSE);
  if (facesContext.getResponseComplete()) {
    return;
  }
}
 catch (Throwable e) {
  ExceptionQueuedEventContext context=new ExceptionQueuedEventContext(facesContext,e,null,PhaseId.RENDER_RESPONSE);
  facesContext.getApplication().publishEvent(facesContext,ExceptionQueuedEvent.class,context);
}
 finally {
}
",0,0,0,,
202,finally,"try {
  facesContext.setCurrentPhaseId(PhaseId.RENDER_RESPONSE);
  flash.doPrePhaseActions(facesContext);
  Method doPrePhaseActionsMethod=phaseExecutor.getClass().getMethod(""doPrePhaseActions"",FacesContext.class);
  if (!(doPrePhaseActionsMethod.isAccessible())) {
    doPrePhaseActionsMethod.setAccessible(true);
  }
  doPrePhaseActionsMethod.invoke(phaseExecutor,facesContext);
  Method informPhaseListenersBeforeMethod=phaseManager.getClass().getDeclaredMethod(""informPhaseListenersBefore"",PhaseId.class);
  if (!(informPhaseListenersBeforeMethod.isAccessible())) {
    informPhaseListenersBeforeMethod.setAccessible(true);
  }
  informPhaseListenersBeforeMethod.invoke(phaseManager,PhaseId.RENDER_RESPONSE);
  if (facesContext.getResponseComplete()) {
    return;
  }
}
 catch (Throwable e) {
  ExceptionQueuedEventContext context=new ExceptionQueuedEventContext(facesContext,e,null,PhaseId.RENDER_RESPONSE);
  facesContext.getApplication().publishEvent(facesContext,ExceptionQueuedEvent.class,context);
}
 finally {
}
",0,0,0,,
203,finally,"try {
  OpenWebBeansContainerControl container=(OpenWebBeansContainerControl)CdiContainerLoader.getCdiContainer();
  container.init();
  container.getContextControl(req.getServletContext(),req.getSession()).stopContexts();
  container.shutdown(new ServletContextEvent(req.getServletContext()));
  CdiContainerLoader.getCdiContainer().boot(new ServletContextEvent(req.getServletContext()));
  container.getContextControl(req.getServletContext(),req.getSession()).startContexts();
}
  finally {
}
",0,0,0,,
204,finally,"try {
  testResults=test.getOutput().toString();
  out.write(testResults);
}
  finally {
}
",0,0,0,,
205,} finally {,"try {
  arch.resolveArtifacts(hndl);
  Map<String,String> props=arch.loadRequiredProperties();
  String def=props.get(""netbeansVersion"");
  final List<String> versions3=new ArrayList<String>();
  if (def != null) {
    versions3.add(def);
  }
  versions3.add(NbmWizardIterator.SNAPSHOT_VERSION);
  if (result.isPartial()) {
    versions3.add(SEARCHING);
  }
  EventQueue.invokeLater(new Runnable(){
    public @Override void run(){
      versionCombo.setModel(new DefaultComboBoxModel(versions3.toArray()));
      versionComboActionPerformed(null);
    }
  }
);
}
 catch (ArtifactResolutionException ex) {
  Exceptions.printStackTrace(ex);
}
catch (ArtifactNotFoundException ex) {
  Exceptions.printStackTrace(ex);
}
 finally {
}
",0,0,0,,
206,} finally {,"try {
  Util.sleep(SLEEP);
  ServerInstance inst=ServerRegistry.getInstance().getServerInstance(""["" + Util._V3_LOCATION + ""]deployer:gfv3ee6:localhost:4848"");
  boolean wasRunning=inst.isRunning();
  inst.remove();
  if (wasRunning) {
    Util.sleep(SLEEP);
  }
  try {
    ServerRegistry.getInstance().checkInstanceExists(""["" + Util._V3_LOCATION + ""]deployer:gfv3ee6:localhost:4848"");
  }
 catch (  Exception e) {
    if (wasRunning && inst.isRunning()) {
      fail(""remove did not stop the instance"");
    }
    String instances[]=ServerRegistry.getInstance().getInstanceURLs();
    if (null != instances) {
      if (instances.length > 0) {
        fail(""too many instances"");
      }
    }
    return;
  }
  fail(""Sjsas instance still exists !"");
}
  finally {
}
",0,0,0,,
207,} finally {,"try {
  scan(f,v,roots,true);
}
 catch (Exception e) {
  ret[0]=e;
}
 finally {
}
",0,0,0,,
208,} finally {,"try {
  if (conns.isEmpty()) {
    JDBCDriver drivers[]=JDBCDriverManager.getDefault().getDrivers(DerbyOptions.DRIVER_CLASS_NET);
    if (drivers.length == 0) {
      showDriverNotFoundDialog();
      return;
    }
    final DatabaseConnection dbconn=DatabaseConnection.create(drivers[0],""jdbc:derby://localhost:"" + RegisterDerby.getDefault().getPort() + ""/""+ dbname,DerbyDatabasesImpl.getDefault().getUser(dbname),DerbyDatabasesImpl.getDefault().getSchema(dbname),DerbyDatabasesImpl.getDefault().getPassword(dbname),true);
    ConnectionManager.getDefault().addConnectionListener(new ConnectionListener(){
      @Override public void connectionsChanged(){
        ConnectionManager.getDefault().showConnectionDialog(dbconn);
        ConnectionManager.getDefault().removeConnectionListener(this);
      }
    }
);
    ConnectionManager.getDefault().addConnection(dbconn);
  }
 else {
    ConnectionManager.getDefault().showConnectionDialog(conns.get(0));
  }
}
 catch (DatabaseException dbe) {
  LOGGER.log(Level.INFO,dbe.getMessage(),dbe);
}
 finally {
}
",0,0,0,,
209,} finally {,"try {
  reformat.reformat(0,doc.getLength());
}
  finally {
}
",0,0,0,,
210,} finally {,"try {
  indent.reindent(0);
}
  finally {
}
",0,0,0,,
211,} finally {,"try {
  LOG.info(""indent1 locked"");
  indent2Thread.start();
  try {
    indent2Thread.join(joinTimeout);
  }
 catch (  InterruptedException ex) {
  }
  assertFalse(indentPerformer.lockAcquired);
  assertFalse(indentPerformer.indentFinished);
  indent.reindent(0);
}
  finally {
}
",0,0,0,,
212,} finally {,"try {
  lockAcquired=true;
  indent.reindent(0);
}
 catch (BadLocationException ex) {
  fail();
}
 finally {
}
",0,0,0,,
213,} finally {,"try {
  node.putBoolean(key,value);
}
  finally {
}
",0,0,0,,
214,} finally {,"try {
  for (Iterator it=elements.iterator(); it.hasNext(); i++) {
    final RefactoringElement e=(RefactoringElement)it.next();
    TreeElement treeElement=null;
    if (callback != null || filtersManager == null || e.include(filtersManager)) {
      treeElement=TreeElementFactory.getTreeElement(e);
      createNode(treeElement,nodes,root);
    }
 else {
      hidden++;
    }
    final int occurrences=i + (treeElement instanceof ExpandableTreeElement ? ((ExpandableTreeElement)treeElement).estimateChildCount() : 1);
    final int hiddenOccurrences=hidden;
    size.set(occurrences);
    sizeIsApproximate.compareAndSet(false,treeElement instanceof ExpandableTreeElement);
    if (isQuery && showParametersPanel) {
      if (cancelRequest.get()) {
        break;
      }
      final boolean finished=session != null ? APIAccessor.DEFAULT.isFinished(session) : true;
      final boolean last=!it.hasNext();
      if ((occurrences % 10 == 0 && !finished) || last) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (tree != null) {
              root.setNodeLabel(description + getErrorDesc(0,occurrences,hiddenOccurrences,isQuery && sizeIsApproximate.get()));
              if (last) {
                tree.repaint();
              }
            }
          }
        }
);
      }
    }
    fileObjects.add(e.getParentFile());
    if (!isQuery) {
      if (i % 10 == 0) {
        progressHandle.progress(i / 10);
      }
    }
  }
}
  finally {
}
",0,0,0,,
215,} finally {,"try {
  Node current=activatedNodes[0];
  CatalogRootNode me=current.getCookie(CatalogRootNode.class);
  CatalogMounter newType=me.new CatalogMounter();
  newType.create();
}
 catch (IOException ex) {
}
 finally {
}
",0,0,0,,
216,} finally {,"try {
  if (doc == null) {
    if (Util.THIS.isLoggable())     Util.THIS.debug(""\tbefore REMOVE : "" + getDocumentRoot());
    removeTreeDocumentCookie();
    if (rep != null) {
    }
    if (getDocumentRoot() != null) {
      ((TreeObject)getDocumentRoot()).removePropertyChangeListener(treeListener);
      treeListener=null;
    }
    tree=null;
  }
 else   if (tree == null) {
    if (Util.THIS.isLoggable())     Util.THIS.debug(""\tbefore ADD : "" + getDocumentRoot());
    tree=new TreeReference(doc);
    treeListener=new TreeListener();
    ((TreeObject)getDocumentRoot()).addPropertyChangeListener(treeListener);
    addTreeDocumentCookie();
  }
 else {
    if (Util.THIS.isLoggable())     Util.THIS.debug(""\tbefore MERGE : "" + getDocumentRoot());
    TreeObject root=(TreeObject)getDocumentRoot();
    root.removePropertyChangeListener(treeListener);
    root.merge((TreeObject)doc);
    root.addPropertyChangeListener(treeListener);
  }
  if (rep == null) {
    if (xmlDO instanceof XMLDataObject) {
      rep=new XMLTreeRepresentation(this,xmlDO.getSyncInterface());
    }
 else {
      rep=new DTDTreeRepresentation(this,xmlDO.getSyncInterface());
    }
    xmlDO.getSyncInterface().addRepresentation(rep);
  }
}
 catch (CannotMergeException exc) {
  if (Util.THIS.isLoggable())   Util.THIS.debug(""MERGE FATAL ERROR:"");
  exc.printStackTrace();
}
 finally {
}
",0,0,0,,
217,} finally {,"try {
  List<TokenIndent> tags=getTags(doc,startOffset,endOffset);
  for (int i=tags.size() - 1; i >= 0; i--) {
    TokenIndent ti=tags.get(i);
    if (ti.isPreserveIndent()) {
      continue;
    }
    changePrettyText(doc,ti);
  }
}
 catch (BadLocationException ble) {
}
catch (IOException iox) {
}
 finally {
}
",0,0,0,,
218,} finally {,"try {
  File selectedFile=getFileFromChooser(getXSL());
  if (selectedFile == null)   return;
  FileObject fo=FileUtil.toFileObject(selectedFile);
  DataObject dObj=fo == null ? null : DataObject.find(fo);
  if (dObj == null || !TransformUtil.isXSLTransformation(dObj)) {
    NotifyDescriptor desc=new NotifyDescriptor.Message(NbBundle.getMessage(TransformPanel.class,""MSG_notXslFile"",selectedFile.getName()),NotifyDescriptor.ERROR_MESSAGE);
    DialogDisplayer.getDefault().notify(desc);
    return;
  }
  setXSL(TransformUtil.getURLName(fo));
  if ((userSetOutput == false) && (xmlHistory != null)) {
    setOutput(xmlHistory.getXSLOutput(data.xsl));
  }
  if (userSetProcess == false) {
    setProcessOutput(null);
  }
  updateXSLComboBoxModel(data.xsl);
  updateComponents();
  setCaretPosition(transformComboBox);
}
 catch (IOException exc) {
}
 finally {
}
",0,0,0,,
219,} finally {,"try {
  File selectedFile=getFileFromChooser(getInput());
  if (selectedFile == null)   return;
  FileObject fo=FileUtil.toFileObject(selectedFile);
  DataObject dObj=fo == null ? null : DataObject.find(fo);
  if (dObj == null || dObj.getCookie(TransformableCookie.class) == null) {
    NotifyDescriptor desc=new NotifyDescriptor.Message(NbBundle.getMessage(TransformPanel.class,""MSG_notXmlFile"",selectedFile.getName()),NotifyDescriptor.ERROR_MESSAGE);
    DialogDisplayer.getDefault().notify(desc);
    return;
  }
  setInput(TransformUtil.getURLName(fo));
  if ((userSetOutput == false) && (xslHistory != null)) {
    setOutput(xslHistory.getXMLOutput(data.xml));
  }
  if (userSetProcess == false) {
    setProcessOutput(null);
  }
  updateXMLComboBoxModel(data.xml);
  updateComponents();
  setCaretPosition(inputComboBox);
}
 catch (IOException exc) {
}
 finally {
}
",0,0,0,,
220,} finally {,"try {
switch (index) {
case 0:
    completeTable(parsedNN,nnattr,result,false);
  break;
case 5:
case 1:
completeTable(parsedNN,nnattr,result,true);
break;
case 2:
completeColumn(ctx,parsedNN,nnattr,result);
break;
case 3:
completePrimaryKeyJoinColumn(ctx,parsedNN,nnattr,result);
break;
case 4:
completeJoinColumn(ctx,parsedNN,nnattr,result);
break;
case 8:
completeManyToMany(ctx,parsedNN,nnattr,result);
case 9:
completeIndex(ctx,parsedNN,nnattr,result);
}
}
  finally {
}
",0,0,0,,
221,} finally {,"try {
  runImpl();
}
 catch (IOException e) {
  Logger.getLogger(JavaPersistenceGenerator.class.getName()).log(Level.INFO,""IOException, remove generated."");
  for (  FileObject generatedFO : generatedFOs) {
    generatedFO.delete();
  }
  throw e;
}
 finally {
}
",0,0,0,,
222,finally {,"try {
  int _type=T__7;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('-');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
223,finally {,"try {
  int _type=T__8;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('=');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
224,finally {,"try {
  int _type=T__9;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('\'');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
225,finally {,"try {
  int _type=T__10;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('\""');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
226,finally {,"try {
  int _type=WS;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    int cnt1=0;
    loop1:     do {
      int alt1=2;
      int LA1_0=input.LA(1);
      if (((LA1_0 >= '\t' && LA1_0 <= '\n') || (LA1_0 >= '\f' && LA1_0 <= '\r') || LA1_0 == ' ')) {
        alt1=1;
      }
switch (alt1) {
case 1:
{
          if ((input.LA(1) >= '\t' && input.LA(1) <= '\n') || (input.LA(1) >= '\f' && input.LA(1) <= '\r') || input.LA(1) == ' ') {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    if (cnt1 >= 1)     break loop1;
  EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
227,finally {,"try {
  int _type=TEXT;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    mLETTER();
    loop2:     do {
      int alt2=2;
      int LA2_0=input.LA(1);
      if ((LA2_0 == '!' || (LA2_0 >= '#' && LA2_0 <= '&') || LA2_0 == '+' || (LA2_0 >= '-' && LA2_0 <= ';') || (LA2_0 >= 'A' && LA2_0 <= 'Z') || LA2_0 == '\\' || LA2_0 == '_' || (LA2_0 >= 'a' && LA2_0 <= '{') || (LA2_0 >= '}' && LA2_0 <= '~') || (LA2_0 >= '\u00C0' && LA2_0 <= '\u00D6') || (LA2_0 >= '\u00D8' && LA2_0 <= '\u00F6') || (LA2_0 >= '\u00F8' && LA2_0 <= '\u1FFF') || (LA2_0 >= '\u3040' && LA2_0 <= '\u318F') || (LA2_0 >= '\u3300' && LA2_0 <= '\u337F') || (LA2_0 >= '\u3400' && LA2_0 <= '\u3D2D') || (LA2_0 >= '\u4E00' && LA2_0 <= '\u9FFF') || (LA2_0 >= '\uF900' && LA2_0 <= '\uFAFF'))) {
        alt2=1;
      }
switch (alt2) {
case 1:
{
          if (input.LA(1) == '!' || (input.LA(1) >= '#' && input.LA(1) <= '&') || input.LA(1) == '+' || (input.LA(1) >= '-' && input.LA(1) <= ';') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '\\' || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= '{') || (input.LA(1) >= '}' && input.LA(1) <= '~') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00D6') || (input.LA(1) >= '\u00D8' && input.LA(1) <= '\u00F6') || (input.LA(1) >= '\u00F8' && input.LA(1) <= '\u1FFF') || (input.LA(1) >= '\u3040' && input.LA(1) <= '\u318F') || (input.LA(1) >= '\u3300' && input.LA(1) <= '\u337F') || (input.LA(1) >= '\u3400' && input.LA(1) <= '\u3D2D') || (input.LA(1) >= '\u4E00' && input.LA(1) <= '\u9FFF') || (input.LA(1) >= '\uF900' && input.LA(1) <= '\uFAFF')) {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    break loop2;
}
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
228,finally {,"try {
{
    if (input.LA(1) == '!' || (input.LA(1) >= '#' && input.LA(1) <= '&') || input.LA(1) == '+' || (input.LA(1) >= '.' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '\\' || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || input.LA(1) == '~' || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00D6') || (input.LA(1) >= '\u00D8' && input.LA(1) <= '\u00F6') || (input.LA(1) >= '\u00F8' && input.LA(1) <= '\u1FFF') || (input.LA(1) >= '\u3040' && input.LA(1) <= '\u318F') || (input.LA(1) >= '\u3300' && input.LA(1) <= '\u337F') || (input.LA(1) >= '\u3400' && input.LA(1) <= '\u3D2D') || (input.LA(1) >= '\u4E00' && input.LA(1) <= '\u9FFF') || (input.LA(1) >= '\uF900' && input.LA(1) <= '\uFAFF')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
229,finally {,"try {
{
    loop2:     do {
      int alt2=2;
      int LA2_0=input.LA(1);
      if ((LA2_0 == WS)) {
        int LA2_1=input.LA(2);
        if ((LA2_1 == TEXT || LA2_1 == 7)) {
          alt2=1;
        }
      }
 else       if ((LA2_0 == TEXT || LA2_0 == 7)) {
        alt2=1;
      }
switch (alt2) {
case 1:
{
          int alt1=2;
          int LA1_0=input.LA(1);
          if ((LA1_0 == WS)) {
            alt1=1;
          }
switch (alt1) {
case 1:
{
              WS1=(Token)match(input,WS,FOLLOW_WS_in_vmOptions75);
              stream_WS.add(WS1);
            }
          break;
      }
      pushFollow(FOLLOW_option_in_vmOptions77);
      option2=option();
      state._fsp--;
      stream_option.add(option2.getTree());
    }
  break;
default :
break loop2;
}
}
 while (true);
int alt3=2;
int LA3_0=input.LA(1);
if ((LA3_0 == WS)) {
alt3=1;
}
switch (alt3) {
case 1:
{
WS3=(Token)match(input,WS,FOLLOW_WS_in_vmOptions80);
stream_WS.add(WS3);
}
break;
}
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
while (stream_option.hasNext()) {
adaptor.addChild(root_0,stream_option.nextTree());
}
stream_option.reset();
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
",0,0,0,,
230,finally {,"try {
  int alt4=2;
  int LA4_0=input.LA(1);
  if ((LA4_0 == 7)) {
    alt4=1;
  }
 else   if ((LA4_0 == TEXT)) {
    alt4=2;
  }
 else {
    NoViableAltException nvae=new NoViableAltException("""",4,0,input);
    throw nvae;
  }
switch (alt4) {
case 1:
{
      char_literal4=(Token)match(input,7,FOLLOW_7_in_option95);
      stream_7.add(char_literal4);
      pushFollow(FOLLOW_switchOption_in_option97);
      switchOption5=switchOption();
      state._fsp--;
      stream_switchOption.add(switchOption5.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
        adaptor.addChild(root_0,stream_switchOption.nextTree());
      }
      retval.tree=root_0;
    }
  break;
case 2:
{
  pushFollow(FOLLOW_nonSwitchOption_in_option107);
  nonSwitchOption6=nonSwitchOption();
  state._fsp--;
  stream_nonSwitchOption.add(nonSwitchOption6.getTree());
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
    adaptor.addChild(root_0,stream_nonSwitchOption.nextTree());
  }
  retval.tree=root_0;
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
",0,0,0,,
231,finally {,"try {
  int alt5=10;
  alt5=dfa5.predict(input);
switch (alt5) {
case 1:
{
      if (!((switchOptions.contains(input.LT(1).getText())))) {
        throw new FailedPredicateException(input,""switchOption"",""switchOptions.contains(input.LT(1).getText())"");
      }
      t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption135);
      stream_TEXT.add(t);
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
        adaptor.addChild(root_0,new SwitchNode(t));
      }
      retval.tree=root_0;
    }
  break;
case 2:
{
  if (!((VERBOSE.equals(input.LT(1).getText()) || input.LT(1).getText().startsWith(VERBOSE + ':')))) {
    throw new FailedPredicateException(input,""switchOption"",""VERBOSE.equals(input.LT(1).getText()) || input.LT(1).getText().startsWith(VERBOSE+':')"");
  }
  t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption166);
  stream_TEXT.add(t);
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
    adaptor.addChild(root_0,new SwitchNode(t));
  }
  retval.tree=root_0;
}
break;
case 3:
{
if (!((VERSION.equals(input.LT(1).getText()) || input.LT(1).getText().startsWith(VERSION + ':')))) {
throw new FailedPredicateException(input,""switchOption"",""VERSION.equals(input.LT(1).getText()) || input.LT(1).getText().startsWith(VERSION+':')"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption186);
stream_TEXT.add(t);
index=t.getText().indexOf(':');
if (index > 0) {
name=t.getText().substring(0,index);
value=(index + 1) == t.getText().length() ? """" : t.getText().substring(index + 1);
}
 else {
name=t.getText();
}
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,index < 0 ? new SwitchNode(t) : new ParametrizedNode(t,name,"":"",value));
}
retval.tree=root_0;
}
break;
case 4:
{
if (!((input.LT(1).getText().startsWith(XSHARE + ':')))) {
throw new FailedPredicateException(input,""switchOption"",""input.LT(1).getText().startsWith(XSHARE+':')"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption203);
stream_TEXT.add(t);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new SwitchNode(t));
}
retval.tree=root_0;
}
break;
case 5:
{
if (!((input.LT(1).getText().startsWith(XCJNI + ':')))) {
throw new FailedPredicateException(input,""switchOption"",""input.LT(1).getText().startsWith(XCJNI+':')"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption218);
stream_TEXT.add(t);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new SwitchNode(t));
}
retval.tree=root_0;
}
break;
case 6:
{
if (!((input.LT(1).getText().charAt(0) == 'D'))) {
throw new FailedPredicateException(input,""switchOption"",""input.LT(1).getText().charAt(0) == 'D'"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption235);
stream_TEXT.add(t);
char_literal7=(Token)match(input,8,FOLLOW_8_in_switchOption237);
stream_8.add(char_literal7);
pushFollow(FOLLOW_eText_in_switchOption239);
eText8=eText();
state._fsp--;
stream_eText.add(eText8.getTree());
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new UserPropertyNode(t,(eText8 != null ? input.toString(eText8.start,eText8.stop) : null),(t != null ? t.getCharPositionInLine() : 0)));
}
retval.tree=root_0;
}
break;
case 7:
{
if (!((isParamOption(input.LT(1).getText())))) {
throw new FailedPredicateException(input,""switchOption"",""isParamOption(input.LT(1).getText())"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption257);
stream_TEXT.add(t);
index=t.getText().indexOf(':');
if (index > 0) {
name=t.getText().substring(0,index);
value=(index + 1) == t.getText().length() ? """" : t.getText().substring(index + 1);
}
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new ParametrizedNode(t,name,"":"",value));
}
retval.tree=root_0;
}
break;
case 8:
{
if (!((memOptions.matcher(input.LT(1).getText()).matches()))) {
throw new FailedPredicateException(input,""switchOption"",""memOptions.matcher(input.LT(1).getText()).matches()"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption274);
stream_TEXT.add(t);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new ParametrizedNode(t,3));
}
retval.tree=root_0;
}
break;
case 9:
{
if (!((CLASSPATH.equals(input.LT(1).getText()) || CLASSPATH_LONG.equals(input.LT(1).getText())))) {
throw new FailedPredicateException(input,""switchOption"",""CLASSPATH.equals(input.LT(1).getText()) || CLASSPATH_LONG.equals(input.LT(1).getText())"");
}
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption291);
stream_TEXT.add(t);
WS9=(Token)match(input,WS,FOLLOW_WS_in_switchOption293);
stream_WS.add(WS9);
pushFollow(FOLLOW_eText_in_switchOption295);
eText10=eText();
state._fsp--;
stream_eText.add(eText10.getTree());
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new ParametrizedNode(t,"" "",(eText10 != null ? input.toString(eText10.start,eText10.stop) : null),false));
}
retval.tree=root_0;
}
break;
case 10:
{
t=(Token)match(input,TEXT,FOLLOW_TEXT_in_switchOption307);
stream_TEXT.add(t);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,new UnrecognizedOption(t));
}
retval.tree=root_0;
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
",0,0,0,,
232,finally {,"try {
  int alt6=3;
switch (input.LA(1)) {
case 9:
{
      alt6=1;
    }
  break;
case 10:
{
  alt6=2;
}
break;
case TEXT:
{
alt6=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("""",6,0,input);
throw nvae;
}
switch (alt6) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
char_literal11=(Token)match(input,9,FOLLOW_9_in_eText324);
char_literal11_tree=(CommonTree)adaptor.create(char_literal11);
adaptor.addChild(root_0,char_literal11_tree);
TEXT12=(Token)match(input,TEXT,FOLLOW_TEXT_in_eText326);
TEXT12_tree=(CommonTree)adaptor.create(TEXT12);
adaptor.addChild(root_0,TEXT12_tree);
char_literal13=(Token)match(input,9,FOLLOW_9_in_eText328);
char_literal13_tree=(CommonTree)adaptor.create(char_literal13);
adaptor.addChild(root_0,char_literal13_tree);
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
char_literal14=(Token)match(input,10,FOLLOW_10_in_eText333);
char_literal14_tree=(CommonTree)adaptor.create(char_literal14);
adaptor.addChild(root_0,char_literal14_tree);
TEXT15=(Token)match(input,TEXT,FOLLOW_TEXT_in_eText335);
TEXT15_tree=(CommonTree)adaptor.create(TEXT15);
adaptor.addChild(root_0,TEXT15_tree);
char_literal16=(Token)match(input,10,FOLLOW_10_in_eText338);
char_literal16_tree=(CommonTree)adaptor.create(char_literal16);
adaptor.addChild(root_0,char_literal16_tree);
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
TEXT17=(Token)match(input,TEXT,FOLLOW_TEXT_in_eText347);
TEXT17_tree=(CommonTree)adaptor.create(TEXT17);
adaptor.addChild(root_0,TEXT17_tree);
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
",0,0,0,,
233,finally {,"try {
{
    t=(Token)match(input,TEXT,FOLLOW_TEXT_in_nonSwitchOption359);
    stream_TEXT.add(t);
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,""rule retval"",retval != null ? retval.tree : null);
    root_0=(CommonTree)adaptor.nil();
{
      adaptor.addChild(root_0,new UnknownOption(t));
    }
    retval.tree=root_0;
  }
  retval.stop=input.LT(-1);
  retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
  retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
",0,0,0,,
234,} finally {,"try {
  new FileReader("""");
}
 catch (IOException ioe) {
  ioe.printStackTrace();
}
 finally {
}
",0,0,0,,
235,} finally {,"try (BufferedReader br=new BufferedReader(null)){
  throw new IOException(""message"");
}
 catch (IOException exception) {
}
 finally {
}
",0,0,0,,
236,} finally {,"try {
  handle.progress(FileUtil.getFileDisplayName(cc.getFileObject()));
  if (cc.toPhase(JavaSource.Phase.RESOLVED).compareTo(JavaSource.Phase.RESOLVED) < 0) {
    return;
  }
  handle.progress(f.incrementAndGet());
  eds.addAll(new HintsInvoker(hintsSettings,new AtomicBoolean()).computeHints(cc));
}
  finally {
}
",0,0,0,,
237,} finally {,"try {
  final NBLog l=NBLog.instance(ctx);
  l.startPartialReparse(cu.getSourceFile());
  final JavaFileObject prevLogged=l.useSource(cu.getSourceFile());
  JCTree.JCBlock block;
  try {
    DiagnosticListener dl=ci.getDiagnosticListener();
    assert dl instanceof CompilationInfoImpl.DiagnosticListenerImpl;
    ((CompilationInfoImpl.DiagnosticListenerImpl)dl).startPartialReparse(origStartPos,origEndPos);
    long start=System.currentTimeMillis();
    Map<JCTree,Object> docComments=new HashMap<>();
    block=reparseMethodBody(ctx,cu,orig,newBody + "" "",docComments);
    final EndPosTable endPos=((JCTree.JCCompilationUnit)cu).endPositions;
    LOGGER.log(Level.FINER,""Reparsed method in: {0}"",fo);
    if (block == null) {
      LOGGER.log(Level.FINER,""Skeep reparse method, invalid position, newBody: "",newBody);
      return false;
    }
    final int newEndPos=(int)jt.getSourcePositions().getEndPosition(cu,block);
    if (newEndPos != origStartPos + newBody.length()) {
      return false;
    }
    fav.reset();
    fav.scan(block,null);
    final int newNoInner=fav.noInner;
    if (fav.hasLocalClass || noInner != newNoInner) {
      if (LOGGER.isLoggable(Level.FINER)) {
        LOGGER.log(Level.FINER,""Skeep reparse method (new local classes): {0}"",fo);
      }
      return false;
    }
    Map<JCTree,Object> docCommentsTable=(Map<JCTree,Object>)lazyDocCommentsTable.get(((JCTree.JCCompilationUnit)cu).docComments);
    docCommentsTable.keySet().removeAll(fav.docOwners);
    docCommentsTable.putAll(docComments);
    long end=System.currentTimeMillis();
    if (fo != null) {
      JavacParser.logTime(fo,Phase.PARSED,(end - start));
    }
    final int delta=newEndPos - origEndPos;
    final TranslatePositionsVisitor tpv=new TranslatePositionsVisitor(orig,endPos,delta);
    tpv.scan(cu,null);
    if (unenter != null) {
      unenter.invoke(Enter.instance(ctx),cu,((JCTree.JCMethodDecl)orig).body);
    }
    ((JCTree.JCMethodDecl)orig).body=block;
    if (Phase.RESOLVED.compareTo(currentPhase) <= 0) {
      start=System.currentTimeMillis();
      reattrMethodBody(ctx,methodScope,orig,block);
      if (LOGGER.isLoggable(Level.FINER)) {
        LOGGER.log(Level.FINER,""Resolved method in: {0}"",fo);
      }
      if (!((CompilationInfoImpl.DiagnosticListenerImpl)dl).hasPartialReparseErrors()) {
        final JavacFlowListener fl=JavacFlowListener.instance(ctx);
        if (fl != null && fl.hasFlowCompleted(fo)) {
          if (LOGGER.isLoggable(Level.FINER)) {
            final List<? extends Diagnostic> diag=ci.getDiagnostics();
            if (!diag.isEmpty()) {
              LOGGER.log(Level.FINER,""Reflow with errors: {0} {1}"",new Object[]{fo,diag});
            }
          }
          TreePath tp=TreePath.getPath(cu,orig);
          Tree t=tp.getParentPath().getLeaf();
          reflowMethodBody(ctx,cu,(ClassTree)t,orig);
          if (LOGGER.isLoggable(Level.FINER)) {
            LOGGER.log(Level.FINER,""Reflowed method in: {0}"",fo);
          }
        }
      }
      end=System.currentTimeMillis();
      if (fo != null) {
        JavacParser.logTime(fo,Phase.ELEMENTS_RESOLVED,0L);
        JavacParser.logTime(fo,Phase.RESOLVED,(end - start));
      }
    }
    long startM=System.currentTimeMillis();
    char[] chars=snapshot.getText().toString().toCharArray();
    if (lineMapBuild != null) {
      lineMapBuild.invoke(cu.getLineMap(),chars,chars.length);
    }
    LOGGER.log(Level.FINER,""Rebuilding LineMap took: {0}"",System.currentTimeMillis() - startM);
    ((CompilationInfoImpl.DiagnosticListenerImpl)dl).endPartialReparse(delta);
  }
  finally {
    l.endPartialReparse(cu.getSourceFile());
    l.useSource(prevLogged);
  }
  ci.update(snapshot);
}
  finally {
}
",0,0,0,,
238,} finally {,"try {
  ald.runAtomic(() -> {
    writingResponse=true;
    try {
      int offset=getInputOffset();
      if (offset == -1) {
        offset=document.getLength();
      }
      getProtectionBypass().insertString(offset,text,null);
      textAppended(offset);
    }
 catch (    BadLocationException ex) {
    }
 finally {
      writingResponse=saveResponse;
    }
  }
);
}
  finally {
}
",0,0,0,,
239,} finally {,"try {
  if (cmd != null) {
    toExec.add(cmd);
  }
 else {
    consoleDocument.render(this);
  }
  if (toExec.isEmpty()) {
    return;
  }
  Rng[] ranges=cmd == null ? exec.getAllSnippetBounds() : null;
  int index=0;
  execOffset=0;
  Subscription sub=null;
  JShell sh=null;
  try {
    for (    String s : toExec) {
      launcher.ensureLive();
      if (!launcher.isLive()) {
        RemoteJShellService ec=ShellSession.this.exec;
        if (ec != null) {
          ExecutionControlException ee=ec.getBrokenException();
          if (ee != null) {
            throw ee;
          }
        }
        break;
      }
      sh=launcher.getJShell();
      if (sub == null) {
        String t=s.trim();
        if (!t.isEmpty() && t.charAt(0) != '/') {
          sub=sh.onSnippetEvent(this);
        }
      }
      if (ranges != null) {
        execOffset=exec.offsetToContents(ranges[index].start,true);
      }
      launcher.evaluate(s,index == toExec.size() - 1);
      if (erroneous) {
        break;
      }
      index++;
    }
  }
 catch (  IllegalStateException|ExecutionControlException ex) {
    reportShellMessage(Bundle.MSG_JShellCannotExecute());
  }
catch (  RuntimeException|IOException ex) {
    reportErrorMessage(ex);
    reportShellMessage(Bundle.MSG_ErrorExecutingCommand());
  }
 finally {
    if (sh != null && sub != null) {
      sh.unsubscribe(sub);
    }
    ensureInputSectionAvailable();
  }
}
  finally {
}
",0,0,0,,
240,} finally {,"try {
  close();
  closeAllModal();
}
 catch (Exception e) {
  e.printStackTrace(getLog());
  getScreenshot(""measure"");
  if (exceptionDuringMeasurement == null) {
    exceptionDuringMeasurement=e;
  }
}
 finally {
}
",0,0,0,,
241,} finally {,"try {
  shutdown();
  closeAllDialogs();
}
 catch (Exception e) {
  e.printStackTrace(getLog());
  getScreenshot(""shutdown"");
  if (exceptionDuringMeasurement == null) {
    exceptionDuringMeasurement=e;
  }
}
 finally {
}
",0,0,0,,
242,} finally {,"try {
  close();
  closeAllModal();
  waitNoEvent(WAIT_AFTER_CLOSE);
}
 catch (Exception e) {
  e.printStackTrace(getLog());
  getScreenshot(""exception_during_close"");
  exceptionDuringMeasurement=e;
}
 finally {
}
",0,0,0,,
243,} finally {,"try {
  shutdown();
  closeAllDialogs();
}
 catch (Exception e) {
  e.printStackTrace(getLog());
  exceptionDuringMeasurement=e;
}
 finally {
}
",0,0,0,,
244,} finally {,"try {
  Map<String,String> templates=getBean().getArtifactTemplates(Constants.DropFileType.RESOURCE.prefix());
  for (  Map.Entry e : templates.entrySet()) {
    String id=(String)e.getKey();
    String template=(String)e.getValue();
    Util.createDataObjectFromTemplate(template,getSaasServiceFolder(),id);
  }
}
  finally {
}
",0,0,0,,
245,} finally {,"try {
  Properties retval=new Properties();
  InputStream is=inputStream();
  if (is != null) {
    try {
      retval.load(is);
    }
  finally {
      if (is != null)       is.close();
    }
  }
  return retval;
}
  finally {
}
",0,0,0,,
246,} finally {,"try {
  Map<String,String> templates=getBean().getArtifactTemplates(Constants.DropFileType.PHP.prefix());
  for (  Map.Entry e : templates.entrySet()) {
    String id=(String)e.getKey();
    String template=(String)e.getValue();
    Util.createDataObjectFromTemplate(template,getSaasServiceFolder(),id);
  }
}
  finally {
}
",0,0,0,,
247,} finally {,"try {
  Application app=Application.getApplication();
  NbApplicationAdapterJDK8 al=new NbApplicationAdapterJDK8();
  app.setAboutHandler(al);
  app.setOpenFileHandler(al);
  app.setPreferencesHandler(al);
  app.setQuitHandler(al);
}
 catch (Throwable ex) {
  ErrorManager.getDefault().notify(ErrorManager.WARNING,ex);
}
 finally {
}
",0,0,0,,
248,} finally {,"try {
  Desktop app=Desktop.getDesktop();
  NbApplicationAdapterJDK9 al=new NbApplicationAdapterJDK9();
  app.setAboutHandler(al);
  app.setOpenFileHandler(al);
  app.setPreferencesHandler(al);
  app.setQuitHandler(al);
}
 catch (Throwable ex) {
  ErrorManager.getDefault().notify(ErrorManager.WARNING,ex);
}
 finally {
}
",0,0,0,,
249,} finally {,"try {
  performerImpl();
}
  finally {
}
",0,0,0,,
250,} finally {,"try {
  fo.getOutputStream(fo.lock());
  fail();
}
 catch (IOException e) {
}
 finally {
}
",0,0,0,,
251,} finally {,"try {
  FileObject obj=FileUtil.createData(folder1,""my/sub/children/children.java"");
  FileObject sub=obj.getParent().getParent();
class L implements FileChangeListener {
    StringBuilder sb=new StringBuilder();
    public void fileFolderCreated(    FileEvent fe){
      sb.append(""FolderCreated"");
    }
    public void fileDataCreated(    FileEvent fe){
      sb.append(""DataCreated"");
    }
    public void fileChanged(    FileEvent fe){
      sb.append(""Changed"");
    }
    public void fileDeleted(    FileEvent fe){
      sb.append(""Deleted"");
    }
    public void fileRenamed(    FileRenameEvent fe){
      sb.append(""Renamed"");
    }
    public void fileAttributeChanged(    FileAttributeEvent fe){
      sb.append(""AttributeChanged"");
    }
    public void assertMessages(    String txt,    String msg){
      assertEquals(txt,msg,sb.toString());
      sb.setLength(0);
    }
  }
  L recursive=new L();
  L flat=new L();
  sub.addFileChangeListener(flat);
  sub.addRecursiveListener(recursive);
  FileObject fo=obj.getParent().createData(""sibling.java"");
  flat.assertMessages(""No messages in flat mode"","""");
  recursive.assertMessages(""Creation"",""DataCreated"");
  fo.setAttribute(""jarda"",""hello"");
  flat.assertMessages(""No messages in flat mode"","""");
  recursive.assertMessages(""attr"",""AttributeChanged"");
  final OutputStream os=fo.getOutputStream();
  os.write(10);
  os.close();
  flat.assertMessages(""No messages in flat mode"","""");
  recursive.assertMessages(""written"",""Changed"");
  fo.delete();
  flat.assertMessages(""No messages in flat mode"","""");
  recursive.assertMessages(""gone"",""Deleted"");
  FileObject subdir=sub.createFolder(""testFolder"");
  flat.assertMessages(""Direct Folder notified"",""FolderCreated"");
  recursive.assertMessages(""Direct Folder notified"",""FolderCreated"");
  subdir.createData(""subchild.txt"");
  recursive.assertMessages(""SubFolder's change notified"",""DataCreated"");
  flat.assertMessages(""SubFolder's change not important"","""");
  sub.getParent().createData(""unimportant.txt"");
  flat.assertMessages(""No messages in flat mode"","""");
  recursive.assertMessages(""No messages in recursive mode"","""");
  sub.removeRecursiveListener(recursive);
  sub.createData(""test.data"");
  flat.assertMessages(""Direct file notified"",""DataCreated"");
  recursive.assertMessages(""No longer active"","""");
  WeakReference<L> ref=new WeakReference<L>(recursive);
  recursive=null;
  assertGC(""Listener can be GCed"",ref);
}
 catch (IOException iex) {
  if (fs.isReadOnly() || root.isReadOnly())   return;
  throw iex;
}
 finally {
}
",0,0,0,,
252,} finally {,"try {
  FileObject obj=FileUtil.createData(folder1,""my/sub/children/children.java"");
  final FileObject children=obj.getParent();
  final FileObject sub=children.getParent();
  final FileObject my=sub.getParent();
class L implements FileChangeListener {
    StringBuilder sb=new StringBuilder();
    public void fileFolderCreated(    FileEvent fe){
      sb.append(""FolderCreated"");
    }
    public void fileDataCreated(    FileEvent fe){
      sb.append(""DataCreated"");
    }
    public void fileChanged(    FileEvent fe){
      sb.append(""Changed"");
    }
    public void fileDeleted(    FileEvent fe){
      sb.append(""Deleted"");
    }
    public void fileRenamed(    FileRenameEvent fe){
      sb.append(""Renamed"");
    }
    public void fileAttributeChanged(    FileAttributeEvent fe){
      sb.append(""AttributeChanged"");
    }
    public void assertMessages(    String txt,    String msg){
      assertEquals(txt,msg,sb.toString());
      sb.setLength(0);
    }
  }
  L recursive=new L();
  my.addRecursiveListener(recursive);
  sub.addRecursiveListener(recursive);
  children.addRecursiveListener(recursive);
  FileObject fo=obj.getParent().createData(""sibling.java"");
  recursive.assertMessages(""3x of Creation"",""DataCreatedDataCreatedDataCreated"");
  FileObject[] removalOrder={my,sub,children};
  if (reverse) {
    Collections.reverse(Arrays.asList(removalOrder));
  }
  removalOrder[0].removeRecursiveListener(recursive);
  FileLock lck=fo.lock();
  fo.rename(lck,""ibling"",""stava"");
  lck.releaseLock();
  recursive.assertMessages(""2x renames"",""RenamedRenamed"");
  removalOrder[1].removeRecursiveListener(recursive);
  lck=fo.lock();
  fo.rename(lck,""dibling"",""trava"");
  lck.releaseLock();
  recursive.assertMessages(""1x rename"",""Renamed"");
  removalOrder[2].removeRecursiveListener(recursive);
  fo.delete();
  recursive.assertMessages(""Nothing"","""");
}
 catch (IOException iex) {
  if (fs.isReadOnly() || root.isReadOnly())   return;
  throw iex;
}
 finally {
}
",0,0,0,,
253,} finally {,"try {
  FileObject obj=FileUtil.createData(folder1,""my/sub/children/children.java"");
  FileObject fo=folder1.getFileObject(""my"");
  assertNotNull(fo);
  assertTrue(fo.isValid());
  assertTrue(fo.isFolder());
  assertTrue(obj.isValid());
  fo.delete();
  assertFalse(""Not valid anymore"",fo.isValid());
  assertFalse(""Neither the data file"",obj.isValid());
  FileObject newObj=FileUtil.createData(folder1,""my/sub/children/children.java"");
  assertTrue(""old data file is not valid"",!obj.isValid() || obj == newObj);
  assertTrue(""New one is "",newObj.isValid());
  assertEquals(""They have the same name"",newObj.getPath(),obj.getPath());
}
 catch (IOException iex) {
  if (fs.isReadOnly() || root.isReadOnly())   return;
  throw iex;
}
 finally {
}
",0,0,0,,
254,} finally {,"try {
  if (serverTimeout == 0) {
    System.out.println(MessageFormat.format(WAITING_ON_PORT_MSG,new Object[]{"""" + serverPort,"""" + CURRENT_AGENT_VERSION}));
  }
 else {
    System.out.println(MessageFormat.format(WAITING_ON_PORT_TIMEOUT_MSG,new Object[]{"""" + serverPort,"""" + serverTimeout,"""" + CURRENT_AGENT_VERSION}));
  }
  serverSocket=new ServerSocket(serverPort);
  serverSocket.setSoTimeout(serverTimeout * 1000);
  createInfoFile();
  clientSocket=serverSocket.accept();
  clientSocket.setTcpNoDelay(true);
  socketIn=new ObjectInputStream(clientSocket.getInputStream());
  socketOut=new ObjectOutputStream(clientSocket.getOutputStream());
  wireIO=new WireIO(socketOut,socketIn);
  connectionOpen=true;
  System.out.println(CONNECTION_MSG);
  return true;
}
 catch (SocketTimeoutException ex) {
  System.err.println(CONNECTION_TIMEOUT_MSG);
  connectionFailed=true;
}
catch (IOException ex) {
  System.err.println(MessageFormat.format(CONNECTION_EXCEPTION_MSG,new Object[]{ex}));
  if (ex instanceof BindException)   System.err.println(CONNECTION_EXCEPTION_BIND_MSG);
  connectionFailed=true;
}
 finally {
}
",0,0,0,,
255,finally,"try {
  for (  Map.Entry<ModuleWrapper,Artifact> elem : tobePopulated.entrySet()) {
    ModuleWrapper man=elem.getKey();
    Artifact art=elem.getValue();
    index=index + 1;
    getLog().info(""Processing "" + index + ""/""+ count);
    File pom=createMavenProject(man,wrapperList,externals);
    ArtifactMetadata metadata=new ProjectArtifactMetadata(art,pom);
    art.addMetadata(metadata);
    File javadoc=null;
    Artifact javadocArt=null;
    if (javadocRoot != null) {
      File zip=new File(javadocRoot,art.getArtifactId() + "".zip"");
      if (zip.exists()) {
        javadoc=zip;
        javadocArt=createAttachedArtifact(art,javadoc,""jar"",""javadoc"");
      }
    }
    File source=null;
    Artifact sourceArt=null;
    if (sourceRoot != null) {
      File zip=new File(sourceRoot,art.getArtifactId() + "".zip"");
      if (zip.exists()) {
        source=zip;
        sourceArt=createAttachedArtifact(art,source,""jar"",""sources"");
      }
    }
    File nbm=null;
    Artifact nbmArt=null;
    if (nbmRoot != null) {
      File zip=new File(nbmRoot,art.getArtifactId() + "".nbm"");
      if (!zip.exists()) {
        zip=new File(nbmRoot,man.getCluster() + File.separator + art.getArtifactId()+ "".nbm"");
      }
      if (zip.exists()) {
        nbm=zip;
        nbmArt=createAttachedArtifact(art,nbm,""nbm-file"",null);
        if (nbmArt.getArtifactHandler().getExtension().equals(""nbm-file"")) {
          nbmArt=createAttachedArtifact(art,nbm,""nbm"",null);
        }
        assert nbmArt.getArtifactHandler().getExtension().equals(""nbm"");
      }
    }
    File moduleJar=man.getFile();
    File moduleJarMinusCP=null;
    if (!man.getModuleManifest().getClasspath().isEmpty()) {
      try {
        moduleJarMinusCP=File.createTempFile(man.getArtifact(),"".jar"");
        moduleJarMinusCP.deleteOnExit();
        InputStream is=new FileInputStream(moduleJar);
        try {
          OutputStream os=new FileOutputStream(moduleJarMinusCP);
          try {
            JarInputStream jis=new JarInputStream(is);
            Manifest mani=new Manifest(jis.getManifest());
            mani.getMainAttributes().remove(Attributes.Name.CLASS_PATH);
            if (!man.deps.isEmpty()) {
              StringBuilder b=new StringBuilder();
              for (              Dependency dep : man.deps) {
                if (b.length() > 0) {
                  b.append(' ');
                }
                b.append(dep.getGroupId()).append(':').append(dep.getArtifactId()).append(':').append(dep.getVersion());
                if (dep.getClassifier() != null) {
                  b.append("":"").append(dep.getClassifier());
                }
              }
              mani.getMainAttributes().putValue(""Maven-Class-Path"",b.toString());
            }
 else {
              getLog().warn(""did not find any external artifacts for "" + man.getModule());
            }
            JarOutputStream jos=new JarOutputStream(os,mani);
            JarEntry entry;
            while ((entry=jis.getNextJarEntry()) != null) {
              if (entry.getName().matches(""META-INF/.+[.]SF"")) {
                throw new IOException(""cannot handle signed JARs"");
              }
              jos.putNextEntry(entry);
              byte[] buf=new byte[(int)entry.getSize()];
              int read=jis.read(buf,0,buf.length);
              if (read != buf.length) {
                throw new IOException(""read wrong amount"");
              }
              jos.write(buf);
            }
            jos.close();
          }
  finally {
            os.close();
          }
        }
  finally {
          is.close();
        }
      }
 catch (      IOException x) {
        getLog().warn(""Could not process "" + moduleJar + "": ""+ x,x);
        moduleJarMinusCP.delete();
        moduleJarMinusCP=null;
      }
    }
    try {
      if (!skipLocalInstall) {
        install(moduleJarMinusCP != null ? moduleJarMinusCP : moduleJar,art);
        if (javadoc != null) {
          install(javadoc,javadocArt);
        }
        if (source != null) {
          install(source,sourceArt);
        }
        if (nbm != null) {
          install(nbm,nbmArt);
        }
      }
      try {
        if (deploymentRepository != null) {
          artifactDeployer.deploy(moduleJarMinusCP != null ? moduleJarMinusCP : moduleJar,art,deploymentRepository,localRepository);
          if (javadoc != null) {
            artifactDeployer.deploy(javadoc,javadocArt,deploymentRepository,localRepository);
          }
          if (source != null) {
            artifactDeployer.deploy(source,sourceArt,deploymentRepository,localRepository);
          }
          if (nbm != null) {
            artifactDeployer.deploy(nbm,nbmArt,deploymentRepository,localRepository);
          }
        }
      }
 catch (      ArtifactDeploymentException ex) {
        throw new MojoExecutionException(""Error Deploying artifact"",ex);
      }
    }
  finally {
      if (moduleJarMinusCP != null) {
        moduleJarMinusCP.delete();
      }
    }
  }
}
  finally {
}
",0,0,0,,
256,finally {,"try {
  int _type=T__25;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""package"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
257,finally {,"try {
  int _type=T__26;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(';');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
258,finally {,"try {
  int _type=T__27;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""import"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
259,finally {,"try {
  int _type=T__28;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""static"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
260,finally {,"try {
  int _type=T__29;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('.');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
261,finally {,"try {
  int _type=T__30;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('*');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
262,finally {,"try {
  int _type=T__31;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""public"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
263,finally {,"try {
  int _type=T__32;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""protected"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
264,finally {,"try {
  int _type=T__33;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""private"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
265,finally {,"try {
  int _type=T__34;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""abstract"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
266,finally {,"try {
  int _type=T__35;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""final"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
267,finally {,"try {
  int _type=T__36;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""strictfp"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
268,finally {,"try {
  int _type=T__37;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""class"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
269,finally {,"try {
  int _type=T__38;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""extends"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
270,finally {,"try {
  int _type=T__39;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""implements"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
271,finally {,"try {
  int _type=T__40;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('<');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
272,finally {,"try {
  int _type=T__41;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(',');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
273,finally {,"try {
  int _type=T__42;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('>');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
274,finally {,"try {
  int _type=T__43;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('&');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
275,finally {,"try {
  int _type=T__44;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('{');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
276,finally {,"try {
  int _type=T__45;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('}');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
277,finally {,"try {
  int _type=T__46;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""interface"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
278,finally {,"try {
  int _type=T__47;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""void"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
279,finally {,"try {
  int _type=T__48;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('[');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
280,finally {,"try {
  int _type=T__49;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(']');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
281,finally {,"try {
  int _type=T__50;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""throws"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
282,finally {,"try {
  int _type=T__51;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('=');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
283,finally {,"try {
  int _type=T__52;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""native"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
284,finally {,"try {
  int _type=T__53;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""synchronized"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
285,finally {,"try {
  int _type=T__54;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""transient"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
286,finally {,"try {
  int _type=T__55;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""volatile"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
287,finally {,"try {
  int _type=T__56;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""boolean"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
288,finally {,"try {
  int _type=T__57;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""char"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
289,finally {,"try {
  int _type=T__58;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""byte"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
290,finally {,"try {
  int _type=T__59;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""short"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
291,finally {,"try {
  int _type=T__60;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""int"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
292,finally {,"try {
  int _type=T__61;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""long"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
293,finally {,"try {
  int _type=T__62;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""float"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
294,finally {,"try {
  int _type=T__63;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""double"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
295,finally {,"try {
  int _type=T__64;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('?');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
296,finally {,"try {
  int _type=T__65;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""super"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
297,finally {,"try {
  int _type=T__66;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('(');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
298,finally {,"try {
  int _type=T__67;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(')');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
299,finally {,"try {
  int _type=T__68;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""..."");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
300,finally {,"try {
  int _type=T__69;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""this"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
301,finally {,"try {
  int _type=T__70;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""null"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
302,finally {,"try {
  int _type=T__71;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""true"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
303,finally {,"try {
  int _type=T__72;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""false"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
304,finally {,"try {
  int _type=T__73;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('@');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
305,finally {,"try {
  int _type=T__74;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""default"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
306,finally {,"try {
  int _type=T__75;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(':');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
307,finally {,"try {
  int _type=T__76;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""if"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
308,finally {,"try {
  int _type=T__77;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""else"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
309,finally {,"try {
  int _type=T__78;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""for"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
310,finally {,"try {
  int _type=T__79;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""while"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
311,finally {,"try {
  int _type=T__80;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""do"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
312,finally {,"try {
  int _type=T__81;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""try"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
313,finally {,"try {
  int _type=T__82;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""finally"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
314,finally {,"try {
  int _type=T__83;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""switch"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
315,finally {,"try {
  int _type=T__84;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""return"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
316,finally {,"try {
  int _type=T__85;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""throw"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
317,finally {,"try {
  int _type=T__86;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""break"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
318,finally {,"try {
  int _type=T__87;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""continue"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
319,finally {,"try {
  int _type=T__88;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""catch"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
320,finally {,"try {
  int _type=T__89;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""case"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
321,finally {,"try {
  int _type=T__90;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""+="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
322,finally {,"try {
  int _type=T__91;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""-="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
323,finally {,"try {
  int _type=T__92;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""*="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
324,finally {,"try {
  int _type=T__93;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""/="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
325,finally {,"try {
  int _type=T__94;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""&="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
326,finally {,"try {
  int _type=T__95;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""|="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
327,finally {,"try {
  int _type=T__96;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""^="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
328,finally {,"try {
  int _type=T__97;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""%="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
329,finally {,"try {
  int _type=T__98;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""||"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
330,finally {,"try {
  int _type=T__99;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""&&"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
331,finally {,"try {
  int _type=T__100;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('|');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
332,finally {,"try {
  int _type=T__101;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('^');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
333,finally {,"try {
  int _type=T__102;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""=="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
334,finally {,"try {
  int _type=T__103;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""!="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
335,finally {,"try {
  int _type=T__104;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""instanceof"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
336,finally {,"try {
  int _type=T__105;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('+');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
337,finally {,"try {
  int _type=T__106;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('-');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
338,finally {,"try {
  int _type=T__107;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('/');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
339,finally {,"try {
  int _type=T__108;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('%');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
340,finally {,"try {
  int _type=T__109;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""++"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
341,finally {,"try {
  int _type=T__110;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""--"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
342,finally {,"try {
  int _type=T__111;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('~');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
343,finally {,"try {
  int _type=T__112;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('!');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
344,finally {,"try {
  int _type=T__113;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""new"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
345,finally {,"try {
  int _type=HexLiteral;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('0');
    if (input.LA(1) == 'X' || input.LA(1) == 'x') {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
    int cnt1=0;
    loop1:     do {
      int alt1=2;
      int LA1_0=input.LA(1);
      if (((LA1_0 >= '0' && LA1_0 <= '9') || (LA1_0 >= 'A' && LA1_0 <= 'F') || (LA1_0 >= 'a' && LA1_0 <= 'f'))) {
        alt1=1;
      }
switch (alt1) {
case 1:
{
          mHexDigit();
        }
      break;
default :
    if (cnt1 >= 1)     break loop1;
  EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
int alt2=2;
int LA2_0=input.LA(1);
if ((LA2_0 == 'L' || LA2_0 == 'l')) {
alt2=1;
}
switch (alt2) {
case 1:
{
mIntegerTypeSuffix();
}
break;
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
346,finally {,"try {
  int _type=DecimalLiteral;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    int alt4=2;
    int LA4_0=input.LA(1);
    if ((LA4_0 == '0')) {
      alt4=1;
    }
 else     if (((LA4_0 >= '1' && LA4_0 <= '9'))) {
      alt4=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("""",4,0,input);
      throw nvae;
    }
switch (alt4) {
case 1:
{
        match('0');
      }
    break;
case 2:
{
    matchRange('1','9');
    loop3:     do {
      int alt3=2;
      int LA3_0=input.LA(1);
      if (((LA3_0 >= '0' && LA3_0 <= '9'))) {
        alt3=1;
      }
switch (alt3) {
case 1:
{
          matchRange('0','9');
        }
      break;
default :
    break loop3;
}
}
 while (true);
}
break;
}
int alt5=2;
int LA5_0=input.LA(1);
if ((LA5_0 == 'L' || LA5_0 == 'l')) {
alt5=1;
}
switch (alt5) {
case 1:
{
mIntegerTypeSuffix();
}
break;
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
347,finally {,"try {
  int _type=OctalLiteral;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('0');
    int cnt6=0;
    loop6:     do {
      int alt6=2;
      int LA6_0=input.LA(1);
      if (((LA6_0 >= '0' && LA6_0 <= '7'))) {
        alt6=1;
      }
switch (alt6) {
case 1:
{
          matchRange('0','7');
        }
      break;
default :
    if (cnt6 >= 1)     break loop6;
  EarlyExitException eee=new EarlyExitException(6,input);
throw eee;
}
cnt6++;
}
 while (true);
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == 'L' || LA7_0 == 'l')) {
alt7=1;
}
switch (alt7) {
case 1:
{
mIntegerTypeSuffix();
}
break;
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
348,finally {,"try {
{
    if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
349,finally {,"try {
{
    if (input.LA(1) == 'L' || input.LA(1) == 'l') {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
350,finally {,"try {
  int _type=FloatingPointLiteral;
  int _channel=DEFAULT_TOKEN_CHANNEL;
  int alt18=4;
  alt18=dfa18.predict(input);
switch (alt18) {
case 1:
{
      int cnt8=0;
      loop8:       do {
        int alt8=2;
        int LA8_0=input.LA(1);
        if (((LA8_0 >= '0' && LA8_0 <= '9'))) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            matchRange('0','9');
          }
        break;
default :
      if (cnt8 >= 1)       break loop8;
    EarlyExitException eee=new EarlyExitException(8,input);
  throw eee;
}
cnt8++;
}
 while (true);
match('.');
loop9: do {
int alt9=2;
int LA9_0=input.LA(1);
if (((LA9_0 >= '0' && LA9_0 <= '9'))) {
alt9=1;
}
switch (alt9) {
case 1:
{
  matchRange('0','9');
}
break;
default :
break loop9;
}
}
 while (true);
int alt10=2;
int LA10_0=input.LA(1);
if ((LA10_0 == 'E' || LA10_0 == 'e')) {
alt10=1;
}
switch (alt10) {
case 1:
{
mExponent();
}
break;
}
int alt11=2;
int LA11_0=input.LA(1);
if ((LA11_0 == 'D' || LA11_0 == 'F' || LA11_0 == 'd' || LA11_0 == 'f')) {
alt11=1;
}
switch (alt11) {
case 1:
{
mFloatTypeSuffix();
}
break;
}
}
break;
case 2:
{
match('.');
int cnt12=0;
loop12: do {
int alt12=2;
int LA12_0=input.LA(1);
if (((LA12_0 >= '0' && LA12_0 <= '9'))) {
alt12=1;
}
switch (alt12) {
case 1:
{
matchRange('0','9');
}
break;
default :
if (cnt12 >= 1) break loop12;
EarlyExitException eee=new EarlyExitException(12,input);
throw eee;
}
cnt12++;
}
 while (true);
int alt13=2;
int LA13_0=input.LA(1);
if ((LA13_0 == 'E' || LA13_0 == 'e')) {
alt13=1;
}
switch (alt13) {
case 1:
{
mExponent();
}
break;
}
int alt14=2;
int LA14_0=input.LA(1);
if ((LA14_0 == 'D' || LA14_0 == 'F' || LA14_0 == 'd' || LA14_0 == 'f')) {
alt14=1;
}
switch (alt14) {
case 1:
{
mFloatTypeSuffix();
}
break;
}
}
break;
case 3:
{
int cnt15=0;
loop15: do {
int alt15=2;
int LA15_0=input.LA(1);
if (((LA15_0 >= '0' && LA15_0 <= '9'))) {
alt15=1;
}
switch (alt15) {
case 1:
{
matchRange('0','9');
}
break;
default :
if (cnt15 >= 1) break loop15;
EarlyExitException eee=new EarlyExitException(15,input);
throw eee;
}
cnt15++;
}
 while (true);
mExponent();
int alt16=2;
int LA16_0=input.LA(1);
if ((LA16_0 == 'D' || LA16_0 == 'F' || LA16_0 == 'd' || LA16_0 == 'f')) {
alt16=1;
}
switch (alt16) {
case 1:
{
mFloatTypeSuffix();
}
break;
}
}
break;
case 4:
{
int cnt17=0;
loop17: do {
int alt17=2;
int LA17_0=input.LA(1);
if (((LA17_0 >= '0' && LA17_0 <= '9'))) {
alt17=1;
}
switch (alt17) {
case 1:
{
matchRange('0','9');
}
break;
default :
if (cnt17 >= 1) break loop17;
EarlyExitException eee=new EarlyExitException(17,input);
throw eee;
}
cnt17++;
}
 while (true);
mFloatTypeSuffix();
}
break;
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
351,finally {,"try {
{
    if (input.LA(1) == 'E' || input.LA(1) == 'e') {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
    int alt19=2;
    int LA19_0=input.LA(1);
    if ((LA19_0 == '+' || LA19_0 == '-')) {
      alt19=1;
    }
switch (alt19) {
case 1:
{
        if (input.LA(1) == '+' || input.LA(1) == '-') {
          input.consume();
        }
 else {
          MismatchedSetException mse=new MismatchedSetException(null,input);
          recover(mse);
          throw mse;
        }
      }
    break;
}
int cnt20=0;
loop20: do {
  int alt20=2;
  int LA20_0=input.LA(1);
  if (((LA20_0 >= '0' && LA20_0 <= '9'))) {
    alt20=1;
  }
switch (alt20) {
case 1:
{
      matchRange('0','9');
    }
  break;
default :
if (cnt20 >= 1) break loop20;
EarlyExitException eee=new EarlyExitException(20,input);
throw eee;
}
cnt20++;
}
 while (true);
}
}
  finally {
}
",0,0,0,,
352,finally {,"try {
{
    if (input.LA(1) == 'D' || input.LA(1) == 'F' || input.LA(1) == 'd' || input.LA(1) == 'f') {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
353,finally {,"try {
  int _type=CharacterLiteral;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('\'');
    int alt21=2;
    int LA21_0=input.LA(1);
    if ((LA21_0 == '\\')) {
      alt21=1;
    }
 else     if (((LA21_0 >= '\u0000' && LA21_0 <= '&') || (LA21_0 >= '(' && LA21_0 <= '[') || (LA21_0 >= ']' && LA21_0 <= '\uFFFF'))) {
      alt21=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("""",21,0,input);
      throw nvae;
    }
switch (alt21) {
case 1:
{
        mEscapeSequence();
      }
    break;
case 2:
{
    if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
break;
}
match('\'');
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
354,finally {,"try {
  int _type=StringLiteral;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('\""');
    loop22:     do {
      int alt22=3;
      int LA22_0=input.LA(1);
      if ((LA22_0 == '\\')) {
        alt22=1;
      }
 else       if (((LA22_0 >= '\u0000' && LA22_0 <= '!') || (LA22_0 >= '#' && LA22_0 <= '[') || (LA22_0 >= ']' && LA22_0 <= '\uFFFF'))) {
        alt22=2;
      }
switch (alt22) {
case 1:
{
          mEscapeSequence();
        }
      break;
case 2:
{
      if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
    }
  break;
default :
break loop22;
}
}
 while (true);
match('\""');
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
355,finally {,"try {
  int alt23=3;
  int LA23_0=input.LA(1);
  if ((LA23_0 == '\\')) {
switch (input.LA(2)) {
case '\""':
case '\'':
case '\\':
case 'b':
case 'f':
case 'n':
case 'r':
case 't':
{
        alt23=1;
      }
    break;
case 'u':
{
    alt23=2;
  }
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
{
alt23=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("""",23,1,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("""",23,0,input);
throw nvae;
}
switch (alt23) {
case 1:
{
match('\\');
if (input.LA(1) == '\""' || input.LA(1) == '\'' || input.LA(1) == '\\' || input.LA(1) == 'b' || input.LA(1) == 'f' || input.LA(1) == 'n' || input.LA(1) == 'r' || input.LA(1) == 't') {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
case 2:
{
mUnicodeEscape();
}
break;
case 3:
{
mOctalEscape();
}
break;
}
}
  finally {
}
",0,0,0,,
356,finally {,"try {
  int alt24=3;
  int LA24_0=input.LA(1);
  if ((LA24_0 == '\\')) {
    int LA24_1=input.LA(2);
    if (((LA24_1 >= '0' && LA24_1 <= '3'))) {
      int LA24_2=input.LA(3);
      if (((LA24_2 >= '0' && LA24_2 <= '7'))) {
        int LA24_5=input.LA(4);
        if (((LA24_5 >= '0' && LA24_5 <= '7'))) {
          alt24=1;
        }
 else {
          alt24=2;
        }
      }
 else {
        alt24=3;
      }
    }
 else     if (((LA24_1 >= '4' && LA24_1 <= '7'))) {
      int LA24_3=input.LA(3);
      if (((LA24_3 >= '0' && LA24_3 <= '7'))) {
        alt24=2;
      }
 else {
        alt24=3;
      }
    }
 else {
      NoViableAltException nvae=new NoViableAltException("""",24,1,input);
      throw nvae;
    }
  }
 else {
    NoViableAltException nvae=new NoViableAltException("""",24,0,input);
    throw nvae;
  }
switch (alt24) {
case 1:
{
      match('\\');
{
        matchRange('0','3');
      }
{
        matchRange('0','7');
      }
{
        matchRange('0','7');
      }
    }
  break;
case 2:
{
  match('\\');
{
    matchRange('0','7');
  }
{
    matchRange('0','7');
  }
}
break;
case 3:
{
match('\\');
{
matchRange('0','7');
}
}
break;
}
}
  finally {
}
",0,0,0,,
357,finally {,"try {
{
    match('\\');
    match('u');
    mHexDigit();
    mHexDigit();
    mHexDigit();
    mHexDigit();
  }
}
  finally {
}
",0,0,0,,
358,finally {,"try {
  int _type=ENUM;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""enum"");
    if (!enumIsKeyword)     _type=Identifier;
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
359,finally {,"try {
  int _type=ASSERT;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""assert"");
    if (!assertIsKeyword)     _type=Identifier;
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
360,finally {,"try {
  int _type=Identifier;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    mLetter();
    loop25:     do {
      int alt25=2;
      int LA25_0=input.LA(1);
      if ((LA25_0 == '$' || (LA25_0 >= '0' && LA25_0 <= '9') || (LA25_0 >= 'A' && LA25_0 <= 'Z') || LA25_0 == '_' || (LA25_0 >= 'a' && LA25_0 <= 'z') || (LA25_0 >= '\u00C0' && LA25_0 <= '\u00D6') || (LA25_0 >= '\u00D8' && LA25_0 <= '\u00F6') || (LA25_0 >= '\u00F8' && LA25_0 <= '\u1FFF') || (LA25_0 >= '\u3040' && LA25_0 <= '\u318F') || (LA25_0 >= '\u3300' && LA25_0 <= '\u337F') || (LA25_0 >= '\u3400' && LA25_0 <= '\u3D2D') || (LA25_0 >= '\u4E00' && LA25_0 <= '\u9FFF') || (LA25_0 >= '\uF900' && LA25_0 <= '\uFAFF'))) {
        alt25=1;
      }
switch (alt25) {
case 1:
{
          if (input.LA(1) == '$' || (input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00D6') || (input.LA(1) >= '\u00D8' && input.LA(1) <= '\u00F6') || (input.LA(1) >= '\u00F8' && input.LA(1) <= '\u1FFF') || (input.LA(1) >= '\u3040' && input.LA(1) <= '\u318F') || (input.LA(1) >= '\u3300' && input.LA(1) <= '\u337F') || (input.LA(1) >= '\u3400' && input.LA(1) <= '\u3D2D') || (input.LA(1) >= '\u4E00' && input.LA(1) <= '\u9FFF') || (input.LA(1) >= '\uF900' && input.LA(1) <= '\uFAFF')) {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    break loop25;
}
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
361,finally {,"try {
{
    if (input.LA(1) == '$' || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00D6') || (input.LA(1) >= '\u00D8' && input.LA(1) <= '\u00F6') || (input.LA(1) >= '\u00F8' && input.LA(1) <= '\u1FFF') || (input.LA(1) >= '\u3040' && input.LA(1) <= '\u318F') || (input.LA(1) >= '\u3300' && input.LA(1) <= '\u337F') || (input.LA(1) >= '\u3400' && input.LA(1) <= '\u3D2D') || (input.LA(1) >= '\u4E00' && input.LA(1) <= '\u9FFF') || (input.LA(1) >= '\uF900' && input.LA(1) <= '\uFAFF')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
362,finally {,"try {
{
    if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= '\u0660' && input.LA(1) <= '\u0669') || (input.LA(1) >= '\u06F0' && input.LA(1) <= '\u06F9')|| (input.LA(1) >= '\u0966' && input.LA(1) <= '\u096F')|| (input.LA(1) >= '\u09E6' && input.LA(1) <= '\u09EF')|| (input.LA(1) >= '\u0A66' && input.LA(1) <= '\u0A6F')|| (input.LA(1) >= '\u0AE6' && input.LA(1) <= '\u0AEF')|| (input.LA(1) >= '\u0B66' && input.LA(1) <= '\u0B6F')|| (input.LA(1) >= '\u0BE7' && input.LA(1) <= '\u0BEF')|| (input.LA(1) >= '\u0C66' && input.LA(1) <= '\u0C6F')|| (input.LA(1) >= '\u0CE6' && input.LA(1) <= '\u0CEF')|| (input.LA(1) >= '\u0D66' && input.LA(1) <= '\u0D6F')|| (input.LA(1) >= '\u0E50' && input.LA(1) <= '\u0E59')|| (input.LA(1) >= '\u0ED0' && input.LA(1) <= '\u0ED9')|| (input.LA(1) >= '\u1040' && input.LA(1) <= '\u1049')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
363,finally {,"try {
  int _type=WS;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    if ((input.LA(1) >= '\t' && input.LA(1) <= '\n') || (input.LA(1) >= '\f' && input.LA(1) <= '\r') || input.LA(1) == ' ') {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
    _channel=HIDDEN;
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
364,finally {,"try {
  int _type=COMMENT;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""/*"");
    loop26:     do {
      int alt26=2;
      int LA26_0=input.LA(1);
      if ((LA26_0 == '*')) {
        int LA26_1=input.LA(2);
        if ((LA26_1 == '/')) {
          alt26=2;
        }
 else         if (((LA26_1 >= '\u0000' && LA26_1 <= '.') || (LA26_1 >= '0' && LA26_1 <= '\uFFFF'))) {
          alt26=1;
        }
      }
 else       if (((LA26_0 >= '\u0000' && LA26_0 <= ')') || (LA26_0 >= '+' && LA26_0 <= '\uFFFF'))) {
        alt26=1;
      }
switch (alt26) {
case 1:
{
          matchAny();
        }
      break;
default :
    break loop26;
}
}
 while (true);
match(""*/"");
_channel=HIDDEN;
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
365,finally {,"try {
  int _type=LINE_COMMENT;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""//"");
    loop27:     do {
      int alt27=2;
      int LA27_0=input.LA(1);
      if (((LA27_0 >= '\u0000' && LA27_0 <= '\t') || (LA27_0 >= '\u000B' && LA27_0 <= '\f') || (LA27_0 >= '\u000E' && LA27_0 <= '\uFFFF'))) {
        alt27=1;
      }
switch (alt27) {
case 1:
{
          if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFF')) {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    break loop27;
}
}
 while (true);
int alt28=2;
int LA28_0=input.LA(1);
if ((LA28_0 == '\r')) {
alt28=1;
}
switch (alt28) {
case 1:
{
  match('\r');
}
break;
}
match('\n');
_channel=HIDDEN;
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
366,} finally {,"try {
  EntityManager em=thread.get();
  if (em != null && em.getTransaction().isActive()) {
    em.getTransaction().rollback();
    em.close();
  }
  thread.set(null);
  emf.close();
}
  finally {
}
",0,0,0,,
367,finally {,"try {
  saveArrayInternal(array,primitive,lob);
}
 catch (Exception|Error e) {
  throw e;
}
 finally {
}
",0,0,0,,
368,} finally {,"try {
  pm.getTransaction().commit();
  fail(""Committed with ref to deleted dependent object"");
}
 catch (Exception je) {
  rollbackTx(pm);
}
 finally {
}
",0,0,0,,
369,} finally {,"try {
  conn.createStatement().execute(CREATE_DATA_TABLE);
  conn.createStatement().execute(CREATE_INDEX_1);
  conn.createStatement().execute(CREATE_INDEX_2);
  conn.createStatement().execute(CREATE_INDEX_3);
  conn.commit();
  mutateRandomly(UPSERT_INTO_DATA_TABLE,fullTableName,nThreads,nRows,nIndexValues,batchSize,doneSignal);
  Thread.sleep(200);
  unassignRegionAsync(fullIndexName1);
  assertTrue(""Ran out of time"",doneSignal.await(120,TimeUnit.SECONDS));
}
  finally {
}
",0,0,0,,
370,finally,"try {
  _executor.stopImmediately();
}
  finally {
}
",0,0,0,,
371,finally,"try {
  try {
    _taskExecutor.stopImmediately();
  }
  finally {
    if (_virtualHost != null) {
      _virtualHost.close();
    }
  }
}
  finally {
}
",0,0,0,,
372,finally,"try {
  if (_brokerImpl != null) {
    _brokerImpl.close();
  }
  if (_taskExecutor != null) {
    _taskExecutor.stopImmediately();
  }
}
  finally {
}
",0,0,0,,
373,finally,"try {
  if (_port != null) {
    _port.close();
  }
}
  finally {
}
",0,0,0,,
374,finally,"try {
  for (  File f : _testPwdFiles) {
    File oldPwdFile=new File(f.getAbsolutePath() + "".old"");
    if (oldPwdFile.exists()) {
      oldPwdFile.delete();
    }
    f.delete();
  }
}
  finally {
}
",0,0,0,,
375,finally,"try {
  if (_passwordFile.exists()) {
    _passwordFile.delete();
  }
}
  finally {
}
",0,0,0,,
376,finally,"try {
  if (_server != null) {
    _server.stop();
  }
}
  finally {
}
",0,0,0,,
377,finally,"try {
  _store.close();
  FileUtils.delete(_storeFile,true);
}
  finally {
}
",0,0,0,,
378,finally,"try {
  _taskExecutor.stopImmediately();
  _virtualHost.close();
}
  finally {
}
",0,0,0,,
379,finally,"try {
  _taskExecutor.stopImmediately();
}
  finally {
}
",0,0,0,,
380,finally,"try {
  _taskExecutor.stopImmediately();
}
  finally {
}
",0,0,0,,
381,finally,"try {
  _taskExecutor.stopImmediately();
}
  finally {
}
",0,0,0,,
382,finally,"try {
  _buffer.dispose();
  QpidByteBuffer.deinitialisePool();
}
  finally {
}
",0,0,0,,
383,finally,"try {
  if (_logger != null) {
    _logger.close();
    _logger.stopLogging();
  }
  _taskExecutor.stopImmediately();
  if (_baseFolder != null && _baseFolder.exists()) {
    FileUtils.delete(_baseFolder,true);
  }
}
  finally {
}
",0,0,0,,
384,finally,"try {
  _brokerLogger.delete();
  _taskExecutor.stopImmediately();
}
  finally {
}
",0,0,0,,
385,finally,"try {
  _taskExecutor.stopImmediately();
}
  finally {
}
",0,0,0,,
386,finally,"try {
  _taskExecutor.stopImmediately();
}
  finally {
}
",0,0,0,,
387,finally,"try {
  TestFileUtils.delete(_tempDbDirectory,true);
}
  finally {
}
",0,0,0,,
388,} finally {,"try {
  for (  String topic : ((SinkDbConnectorConfig)this.dbConnectorConfig).getWhiteList()) {
    List<BrokerData> brokerList=Utils.examineBrokerData(this.srcMQAdminExt,topic,srcCluster);
    Set<String> brokerNameSet=new HashSet<String>();
    for (    BrokerData b : brokerList) {
      brokerNameSet.add(b.getBrokerName());
    }
    TopicRouteData topicRouteData=srcMQAdminExt.examineTopicRouteInfo(topic);
    if (!topicRouteMap.containsKey(topic)) {
      topicRouteMap.put(topic,new HashSet<>(16));
    }
    for (    QueueData qd : topicRouteData.getQueueDatas()) {
      if (brokerNameSet.contains(qd.getBrokerName())) {
        for (int i=0; i < qd.getReadQueueNums(); i++) {
          TaskTopicInfo taskTopicInfo=new TaskTopicInfo(topic,qd.getBrokerName(),i,null);
          topicRouteMap.get(topic).add(taskTopicInfo);
        }
      }
    }
  }
}
 catch (Exception e) {
  log.error(""Fetch topic list error."",e);
}
 finally {
}
",0,0,0,,
389,finally {,"try {
  Enumeration<NetworkInterface> enumeration=NetworkInterface.getNetworkInterfaces();
  ArrayList<String> ipv4Result=new ArrayList<String>();
  ArrayList<String> ipv6Result=new ArrayList<String>();
  while (enumeration.hasMoreElements()) {
    final NetworkInterface networkInterface=enumeration.nextElement();
    final Enumeration<InetAddress> en=networkInterface.getInetAddresses();
    while (en.hasMoreElements()) {
      final InetAddress address=en.nextElement();
      if (!address.isLoopbackAddress()) {
        if (address instanceof Inet6Address) {
          ipv6Result.add(normalizeHostAddress(address));
        }
 else {
          ipv4Result.add(normalizeHostAddress(address));
        }
      }
    }
  }
  if (!ipv4Result.isEmpty()) {
    for (    String ip : ipv4Result) {
      if (ip.startsWith(""127.0"") || ip.startsWith(""192.168"")) {
        continue;
      }
      return ip;
    }
    return ipv4Result.get(ipv4Result.size() - 1);
  }
 else   if (!ipv6Result.isEmpty()) {
    return ipv6Result.get(0);
  }
  final InetAddress localHost=InetAddress.getLocalHost();
  return normalizeHostAddress(localHost);
}
 catch (SocketException e) {
  e.printStackTrace();
}
catch (UnknownHostException e) {
  e.printStackTrace();
}
 finally {
}
",0,0,0,,
390,} finally {,"try {
  IExpressionEvaluator eval=new DebuggerExpressionEvaluator();
  DebuggerValue value=eval.evaluate(context,m_programNode);
  if (isLookupMembers()) {
    return context.lookupMembers(value.debuggerValue);
  }
 else {
    return value.debuggerValue;
  }
}
 catch (Exception e) {
  if (e.getCause() instanceof NumberFormatException) {
    throw (NumberFormatException)e.getCause();
  }
 else   if (e.getCause() instanceof NoSuchVariableException) {
    throw (NoSuchVariableException)e.getCause();
  }
 else   if (e.getCause() instanceof PlayerFaultException) {
    throw (PlayerFaultException)e.getCause();
  }
 else   if (e.getCause() instanceof PlayerDebugException) {
    throw (PlayerDebugException)e.getCause();
  }
 else {
    e.printStackTrace();
    throw new PlayerDebugException(e.getLocalizedMessage());
  }
}
 finally {
}
",0,0,0,,
391,finally{,"try {
  StorageManager storageManager=SandeshaUtil.getSandeshaStorageManager(ctx,ctx.getAxisConfiguration());
  InvokerBeanMgr storageMapMgr=storageManager.getInvokerBeanMgr();
  RMDBeanMgr rmdBeanMgr=storageManager.getRMDBeanMgr();
  RMDBean rMDBean=rmdBeanMgr.retrieve(sequenceID);
  if (rMDBean != null) {
    long firstMessageInOutOfOrderWindow=rMDBean.getNextMsgNoToProcess();
    InvokerBean selector=new InvokerBean();
    selector.setSequenceID(sequenceID);
    Iterator<InvokerBean> stMapIt=storageMapMgr.find(selector).iterator();
    long highestMsgNumberInvoked=0;
    Transaction transaction=null;
    while (stMapIt.hasNext()) {
      try {
        transaction=storageManager.getTransaction();
        InvokerBean invoker=(InvokerBean)stMapIt.next();
        String workId=sequenceID;
        InvokerWorker worker=new InvokerWorker(ctx,invoker);
        worker.forceOutOfOrder();
        worker.setPooled();
        worker.setWorkId(workId);
        Runnable work=worker;
        ContextManager contextMgr=SandeshaUtil.getContextManager(ctx);
        if (contextMgr != null) {
          work=contextMgr.wrapWithContext(work,invoker.getContext());
        }
        worker.getLock().addWork(workId,worker);
        ctx.getThreadPool().execute(work);
        long msgNumber=invoker.getMsgNo();
        if (msgNumber > highestMsgNumberInvoked) {
          highestMsgNumberInvoked=invoker.getMsgNo();
          rMDBean.setNextMsgNoToProcess(highestMsgNumberInvoked + 1);
          if (allowLaterDeliveryOfMissingMessages) {
            Range r=new Range(firstMessageInOutOfOrderWindow,highestMsgNumberInvoked);
            RangeString rangeString=null;
            if (rMDBean.getOutOfOrderRanges() == null) {
              rangeString=new RangeString();
            }
 else {
              rangeString=rMDBean.getOutOfOrderRanges();
            }
            rangeString.addRange(r);
            rMDBean.setOutOfOrderRanges(rangeString);
          }
          rmdBeanMgr.update(rMDBean);
        }
        if (transaction != null && transaction.isActive())         transaction.commit();
        transaction=null;
      }
 catch (      Exception e) {
        if (log.isDebugEnabled())         log.debug(""Exception"",e);
      }
 finally {
        if (transaction != null && transaction.isActive()) {
          transaction.rollback();
          transaction=null;
        }
      }
    }
  }
}
  finally {
}
",0,0,0,,
392,} finally {,"try {
  doStop();
}
  finally {
}
",0,0,0,,
393,} finally {,"try {
  getLogger().fine(new org.apache.cxf.common.i18n.Message(""DISPATCH.TO.SU"",getLogger()).toString());
  dispatch(exchange);
}
  finally {
}
",0,0,0,,
394,} finally {,"try {
  documentBuilder=factory.newDocumentBuilder();
  result=(Document)documentBuilder.parse(testPlanFile);
  root=result.getDocumentElement();
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath xpath=xpathFactory.newXPath();
  String resultCollectorXpath=""//jmeterTestPlan/hashTree/hashTree/hashTree/hashTree/ResultCollector"";
  NodeList nodeList=(NodeList)xpath.evaluate(resultCollectorXpath,root,XPathConstants.NODESET);
  Element resultCollectorElement=(Element)nodeList.item(1);
  String stringPropXpath=""./stringProp"";
  Element stringPropElement=(Element)xpath.evaluate(stringPropXpath,resultCollectorElement,XPathConstants.NODE);
  String outputPath=stringPropElement.getTextContent();
  outputPath=outputPath.replace(""/export/shardingsphere-benchmark/result"",outPutBasePath);
  stringPropElement.setTextContent(outputPath);
  if (testPlanFile.getName().contains(""insertupdatedelete"") || testPlanFile.getName().contains(""select"")) {
    String jmeterLoopXpath=""//jmeterTestPlan/hashTree/hashTree/ThreadGroup/elementProp/stringProp"";
    String jmeterConcurrencyXpath=""//jmeterTestPlan/hashTree/hashTree/ThreadGroup/stringProp[@name='ThreadGroup.num_threads']"";
    Element jmeterLoopElement=(Element)xpath.evaluate(jmeterLoopXpath,root,XPathConstants.NODE);
    Element jmeterConcurrencyElement=(Element)xpath.evaluate(jmeterConcurrencyXpath,root,XPathConstants.NODE);
    jmeterLoopElement.setTextContent("""" + jmeterLoopCount);
    jmeterConcurrencyElement.setTextContent("""" + jmeterConcurrencyCount);
  }
}
 catch (ParserConfigurationException ex) {
  ex.printStackTrace();
}
catch (IOException ex) {
  ex.printStackTrace();
}
catch (XPathExpressionException ex) {
  ex.printStackTrace();
}
catch (SAXException ex) {
  ex.printStackTrace();
}
 finally {
}
",0,0,0,,
395,} finally {,"try {
  for (int i=0; i < yamlFileList.size(); i++) {
    yamlFile=yamlFileList.get(i);
    StringBuffer bufAll=new StringBuffer();
    BufferedReader br=new BufferedReader(new FileReader(yamlFile));
    while ((line=br.readLine()) != null) {
      if (line.contains(""${0..2}.sbtest${0..99}"")) {
        line=line.replace(""${0..2}.sbtest${0..99}"",""${0.."" + (shardingDbCount - 1) + ""}.sbtest${0..""+ (shardingTableCount - 1)+ ""}"");
      }
      if (line.contains(""maximumPoolSize: 200"")) {
        line=line.replaceAll(""maximumPoolSize: 200"",""maximumPoolSize: "" + maxConnectionCount);
      }
      if (line.contains(""{id % 3}"")) {
        line=line.replace(""{id % 3}"",""{id % "" + shardingDbCount + ""}"");
      }
      if (line.contains(""{k % 100}"")) {
        line=line.replace(""{k % 100}"",""{k % "" + shardingTableCount + ""}"");
      }
      if (line.contains(""max.connections.size.per.query: 2"")) {
        line=line.replace(""max.connections.size.per.query: 2"",""max.connections.size.per.query: "" + maxConnectionPerQuery);
      }
      if (line.contains(""maxPoolSize: 200"")) {
        line=line.replaceAll(""maxPoolSize: 200"",""maxPoolSize: "" + maxConnectionCount);
      }
      if (line.contains(""minPoolSize: 200"")) {
        line=line.replaceAll(""minPoolSize: 200"",""minPoolSize: "" + minConnectionCount);
      }
      bufAll.append(line);
      bufAll.append(System.getProperty(""line.separator""));
    }
    br.close();
    BufferedWriter bw=new BufferedWriter(new FileWriter(yamlFile));
    bw.write(bufAll.toString());
    bw.close();
  }
}
 catch (IOException ex) {
  ex.printStackTrace();
}
 finally {
}
",0,0,0,,
396,} finally {,"try {
  connection1=dataSource1.getConnection();
  Statement stat1=connection1.createStatement();
  stat1.executeUpdate(createdDatabaseSql);
  stat1.close();
  connection1.close();
  DataSource createdDataSource1=JDBCDataSourceUtil.initDb(createdResultDatabaseName,host,(int)dbConfig.get(""jdbc.benchmark.fullrouting.encrypt.ds0.port""),(String)dbConfig.get(""jdbc.benchmark.fullrouting.encrypt.ds0.username""),(String)dbConfig.get(""jdbc.benchmark.fullrouting.encrypt.ds0.password""));
  Connection createdConnection1=createdDataSource1.getConnection();
  Statement createdStat1=createdConnection1.createStatement();
  createdStat1.executeUpdate(createdAvgResultTableSql);
  createdStat1.close();
  createdConnection1.close();
  createdDataSource1=JDBCDataSourceUtil.initDb(createdResultDatabaseName,host,(int)dbConfig.get(""jdbc.benchmark.fullrouting.encrypt.ds0.port""),(String)dbConfig.get(""jdbc.benchmark.fullrouting.encrypt.ds0.username""),(String)dbConfig.get(""jdbc.benchmark.fullrouting.encrypt.ds0.password""));
  createdConnection1=createdDataSource1.getConnection();
  createdStat1=createdConnection1.createStatement();
  createdStat1.executeUpdate(createdResultTableSql);
  createdStat1.close();
  createdConnection1.close();
}
 catch (SQLException throwables) {
  throwables.printStackTrace();
}
 finally {
}
",0,0,0,,
397,} finally {,"try {
  inputChannel=Channels.newChannel(input);
  float[] histogram=new float[257];
  histogram[0]=1;
  ByteBuffer buf=ByteBuffer.allocate(1024 * 5);
  int bytesRead=inputChannel.read(buf);
  float max=-1;
  while (bytesRead != -1) {
    ((Buffer)buf).flip();
    while (buf.hasRemaining()) {
      byte byt=buf.get();
      int idx=byt;
      idx++;
      if (byt < 0) {
        idx=256 + idx;
        histogram[idx]++;
      }
 else {
        histogram[idx]++;
      }
      max=Math.max(max,histogram[idx]);
    }
    buf.clear();
    bytesRead=inputChannel.read(buf);
  }
  int i;
  for (i=1; i < histogram.length; i++) {
    histogram[i]/=max;
    histogram[i]=(float)Math.sqrt(histogram[i]);
  }
  return histogram;
}
  finally {
}
",0,0,0,,
398,} finally {,"try {
  msg.setReturnNullOnMissingChunk(true);
  try {
    metadata.set(Office.MAPI_MESSAGE_CLASS,msg.getMessageClassEnum().name());
  }
 catch (  ChunkNotFoundException e) {
  }
  if (msg.has7BitEncodingStrings()) {
    guess7BitEncoding(msg);
  }
  String subject=msg.getSubject();
  Map<String,String[]> headers=normalizeHeaders(msg.getHeaders());
  String from=msg.getDisplayFrom();
  handleFromTo(headers,metadata);
  metadata.set(TikaCoreProperties.TITLE,subject);
  metadata.set(TikaCoreProperties.DESCRIPTION,msg.getConversationTopic());
  try {
    for (    String recipientAddress : msg.getRecipientEmailAddressList()) {
      if (recipientAddress != null) {
        metadata.add(Metadata.MESSAGE_RECIPIENT_ADDRESS,recipientAddress);
      }
    }
  }
 catch (  ChunkNotFoundException he) {
  }
  for (  Map.Entry<String,String[]> e : headers.entrySet()) {
    String headerKey=e.getKey();
    for (    String headerValue : e.getValue()) {
      metadata.add(Metadata.MESSAGE_RAW_HEADER_PREFIX + headerKey,headerValue);
    }
  }
  if (msg.getMessageDate() != null) {
    metadata.set(TikaCoreProperties.CREATED,msg.getMessageDate().getTime());
    metadata.set(TikaCoreProperties.MODIFIED,msg.getMessageDate().getTime());
  }
 else {
    if (headers != null && headers.size() > 0) {
      for (      Map.Entry<String,String[]> header : headers.entrySet()) {
        String headerKey=header.getKey();
        if (headerKey.toLowerCase(Locale.ROOT).startsWith(""date:"")) {
          String date=headerKey.substring(headerKey.indexOf(':') + 1).trim();
          try {
            Date d=MailDateParser.parseDate(date);
            metadata.set(TikaCoreProperties.CREATED,d);
            metadata.set(TikaCoreProperties.MODIFIED,d);
          }
 catch (          ParseException e) {
            metadata.set(TikaCoreProperties.CREATED,date);
            metadata.set(TikaCoreProperties.MODIFIED,date);
          }
          break;
        }
      }
    }
  }
  xhtml.element(""h1"",subject);
  xhtml.startElement(""dl"");
  if (from != null) {
    header(xhtml,""From"",from);
  }
  header(xhtml,""To"",msg.getDisplayTo());
  header(xhtml,""Cc"",msg.getDisplayCC());
  header(xhtml,""Bcc"",msg.getDisplayBCC());
  try {
    header(xhtml,""Recipients"",msg.getRecipientEmailAddress());
  }
 catch (  ChunkNotFoundException e) {
  }
  xhtml.endElement(""dl"");
  Chunk htmlChunk=null;
  Chunk rtfChunk=null;
  Chunk textChunk=null;
  for (  Chunk chunk : msg.getMainChunks().getChunks()) {
    if (chunk.getChunkId() == MAPIProperty.BODY_HTML.id) {
      htmlChunk=chunk;
    }
    if (chunk.getChunkId() == MAPIProperty.RTF_COMPRESSED.id) {
      rtfChunk=chunk;
    }
    if (chunk.getChunkId() == MAPIProperty.BODY.id) {
      textChunk=chunk;
    }
  }
  handleBodyChunks(htmlChunk,rtfChunk,textChunk,xhtml);
  for (  AttachmentChunks attachment : msg.getAttachmentFiles()) {
    xhtml.startElement(""div"",""class"",""attachment-entry"");
    String filename=null;
    if (attachment.getAttachLongFileName() != null) {
      filename=attachment.getAttachLongFileName().getValue();
    }
 else     if (attachment.getAttachFileName() != null) {
      filename=attachment.getAttachFileName().getValue();
    }
    if (filename != null && filename.length() > 0) {
      xhtml.element(""h1"",filename);
    }
    if (attachment.getAttachData() != null) {
      handleEmbeddedResource(TikaInputStream.get(attachment.getAttachData().getValue()),filename,null,null,xhtml,true);
    }
    if (attachment.getAttachmentDirectory() != null) {
      handleEmbeddedOfficeDoc(attachment.getAttachmentDirectory().getDirectory(),xhtml);
    }
    xhtml.endElement(""div"");
  }
}
 catch (ChunkNotFoundException e) {
  throw new TikaException(""POI MAPIMessage broken - didn't return null on missing chunk"",e);
}
 finally {
}
",0,0,0,,
399,} finally {,"try {
  AUTO_DETECT_PARSER.parse(Files.newInputStream(injected),xhtml,new Metadata(),parseContext);
}
  finally {
}
",0,0,0,,
400,} finally {,"try {
  beforeProcessing(graph,context);
  try {
    traversal.applyStrategies();
    handleIterator(context,new TraverserIterator(traversal),graph);
  }
 catch (  Exception ex) {
    Throwable t=ex;
    if (ex instanceof UndeclaredThrowableException)     t=t.getCause();
    final Optional<Throwable> possibleTemporaryException=determineIfTemporaryException(ex);
    if (possibleTemporaryException.isPresent()) {
      context.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.SERVER_ERROR_TEMPORARY).statusMessage(possibleTemporaryException.get().getMessage()).statusAttributeException(possibleTemporaryException.get()).create());
    }
 else     if (t instanceof InterruptedException || t instanceof TraversalInterruptedException) {
      final String errorMessage=String.format(""A timeout occurred during traversal evaluation of [%s] - consider increasing the limit given to evaluationTimeout"",msg);
      logger.warn(errorMessage);
      context.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.SERVER_ERROR_TIMEOUT).statusMessage(errorMessage).statusAttributeException(ex).create());
    }
 else {
      logger.warn(String.format(""Exception processing a Traversal on iteration for request [%s]."",msg.getRequestId()),ex);
      context.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.SERVER_ERROR).statusMessage(ex.getMessage()).statusAttributeException(ex).create());
    }
    onError(graph,context);
  }
}
 catch (Exception ex) {
  final Optional<Throwable> possibleTemporaryException=determineIfTemporaryException(ex);
  if (possibleTemporaryException.isPresent()) {
    context.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.SERVER_ERROR_TEMPORARY).statusMessage(possibleTemporaryException.get().getMessage()).statusAttributeException(possibleTemporaryException.get()).create());
  }
 else {
    logger.warn(String.format(""Exception processing a Traversal on request [%s]."",msg.getRequestId()),ex);
    context.writeAndFlush(ResponseMessage.build(msg).code(ResponseStatusCode.SERVER_ERROR).statusMessage(ex.getMessage()).statusAttributeException(ex).create());
  }
  onError(graph,context);
}
 finally {
}
",0,0,0,,
401,} finally {,"try {
  svc=svc & Channel.DEFAULT;
  if (startLevel == 0)   return;
  if (svc == 0)   return;
  boolean valid=false;
  if (Channel.SND_RX_SEQ == (svc & Channel.SND_RX_SEQ)) {
    clusterReceiver.stop();
    clusterReceiver.setMessageListener(null);
    valid=true;
  }
  if (Channel.SND_TX_SEQ == (svc & Channel.SND_TX_SEQ)) {
    clusterSender.stop();
    valid=true;
  }
  if (Channel.MBR_RX_SEQ == (svc & Channel.MBR_RX_SEQ)) {
    membershipService.stop(MembershipService.MBR_RX);
    membershipService.setMembershipListener(null);
    valid=true;
  }
  if (Channel.MBR_TX_SEQ == (svc & Channel.MBR_TX_SEQ)) {
    valid=true;
    membershipService.stop(MembershipService.MBR_TX);
  }
  if (!valid) {
    throw new IllegalArgumentException(""Invalid start level, valid levels are:SND_RX_SEQ,SND_TX_SEQ,MBR_TX_SEQ,MBR_RX_SEQ"");
  }
  startLevel=(startLevel & (~svc));
}
 catch (Exception x) {
  throw new ChannelException(x);
}
 finally {
}
",0,0,0,,
402,}finally {,"try {
  if (membership == null)   setupMembership();
  if (membership.memberAlive((MemberImpl)member))   super.memberAdded(member);
  try {
    fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_MBR_ADD,this,""Member add("" + member.getName() + "")""));
    if (started && elect)     startElection(false);
  }
 catch (  ChannelException x) {
    log.error(""Unable to start election when member was added."",x);
  }
}
  finally {
}
",0,0,0,,
403,}finally {,"try {
  membership.removeMember((MemberImpl)member);
  super.memberDisappeared(member);
  try {
    fireInterceptorEvent(new CoordinationEvent(CoordinationEvent.EVT_MBR_DEL,this,""Member remove("" + member.getName() + "")""));
    if (started && (isCoordinator() || isHighest()))     startElection(true);
  }
 catch (  ChannelException x) {
    log.error(""Unable to start election when member was removed."",x);
  }
}
  finally {
}
",0,0,0,,
404,} finally {,"try {
  ObjectReader reader=(ObjectReader)key.attachment();
  if (reader == null) {
    if (log.isTraceEnabled())     log.trace(""No object reader, cancelling:"" + key);
    cancelKey(key);
  }
 else {
    if (log.isTraceEnabled())     log.trace(""Draining channel:"" + key);
    drainChannel(key,reader);
  }
}
 catch (Exception e) {
  if (e instanceof CancelledKeyException) {
  }
 else   if (e instanceof IOException) {
    if (log.isDebugEnabled())     log.debug(""IOException in replication worker, unable to drain channel. Probable cause: Keep alive socket closed["" + e.getMessage() + ""]."",e);
 else     log.warn(""IOException in replication worker, unable to drain channel. Probable cause: Keep alive socket closed["" + e.getMessage() + ""]."");
  }
 else   if (log.isErrorEnabled()) {
    log.error(""Exception caught in TcpReplicationThread.drainChannel."",e);
  }
  cancelKey(key);
}
 finally {
}
",0,0,0,,
405,} finally {,"try {
  connecting=false;
  setConnected(false);
  if (socketChannel != null) {
    try {
      try {
        socketChannel.socket().close();
      }
 catch (      Exception x) {
      }
      try {
        socketChannel.close();
      }
 catch (      Exception x) {
      }
    }
  finally {
      socketChannel=null;
    }
  }
}
 catch (Exception x) {
  log.error(""Unable to disconnect NioSender. msg="" + x.getMessage());
  if (log.isDebugEnabled())   log.debug(""Unable to disconnect NioSender. msg="" + x.getMessage(),x);
}
 finally {
}
",0,0,0,,
406,} finally {,"try {
  HttpConnector testServer=TestMain.getTestServer();
  tr=new ThreadRunner(thr,cnt){
    public void makeRequest(    int i) throws Exception {
      try {
        BBuffer out=BBuffer.allocate();
        String url=ssl ? ""https://localhost:8443/hello"" : ""http://localhost:8802/hello"";
        HttpURLConnection con=TestMain.getUrl(url,out);
        if (con.getResponseCode() != 200) {
          errors.incrementAndGet();
        }
        if (!""Hello world"".equals(out.toString())) {
          errors.incrementAndGet();
          System.err.println(""bad result "" + out);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        errors.incrementAndGet();
      }
    }
  }
;
  tr.run();
  Assert.assertEquals(0,tr.errors.get());
  long time=(System.currentTimeMillis() - t0);
  System.err.println(""====== "" + test + "" threads: ""+ thr+ "", req: ""+ (thr * cnt)+ "", time: ""+ time+ "", avg: ""+ (time / (thr * cnt)));
}
  finally {
}
",0,0,0,,
407,} finally {,"try {
  if (object instanceof Serializable && !object.getClass().isArray()) {
    try {
      object=copyObj(Thread.currentThread().getContextClassLoader(),object);
    }
 catch (    Exception e) {
      throw new UnknownException(e);
    }
  }
  if (type == Object.class || type == Serializable.class) {
    javax.rmi.CORBA.Util.writeAny(out,object);
  }
 else   if (org.omg.CORBA.Object.class.isAssignableFrom(type)) {
    out.write_Object((org.omg.CORBA.Object)object);
  }
 else   if (Remote.class.isAssignableFrom(type)) {
    javax.rmi.CORBA.Util.writeRemoteObject(out,object);
  }
 else   if (type.isInterface() && Serializable.class.isAssignableFrom(type)) {
    javax.rmi.CORBA.Util.writeAbstractObject(out,object);
  }
 else {
    out.write_value((Serializable)object,type);
  }
}
  finally {
}
",0,0,0,,
408,} finally {,"try {
  for (  Bundle bundle : context.getBundles()) {
    final URL url=bundle.getEntry(serviceName);
    if (url == null) {
      continue;
    }
    if (debug) {
      logger.fine(""Reading service provider file: "" + url.toExternalForm());
    }
    try {
      InputStream is;
      try {
        is=AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>(){
          public InputStream run() throws IOException {
            return url.openStream();
          }
        }
);
      }
 catch (      PrivilegedActionException e) {
        throw (IOException)e.getException();
      }
      BufferedReader reader=null;
      try {
        reader=new BufferedReader(new InputStreamReader(is));
        int count=0;
        while (true) {
          String line=reader.readLine();
          if (line == null)           break;
          line=line.trim();
          if (!line.startsWith(""#"") && !"""".equals(line)) {
            String reg=line.trim();
            if (debug) {
              logger.fine(""Registering service provider: "" + reg);
            }
            Map<String,String> attributes=parseServiceDeclaration(reg);
            String className=attributes.get(""class"");
            if (className == null) {
              className=""_class_"" + count;
              count++;
            }
            ServiceDeclarationImpl descriptor=new ServiceDeclarationImpl(bundle,url,className,attributes);
            descriptors.add(descriptor);
            if (firstOnly) {
              return descriptors;
            }
          }
        }
      }
  finally {
        if (reader != null) {
          try {
            reader.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
 catch (    IOException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
}
  finally {
}
",0,0,0,,
409,} finally {,"try {
  HttpResponse response=httpclient.execute(post);
  int result=response.getStatusLine().getStatusCode();
  Assert.assertEquals(201,result);
  Header header=response.getFirstHeader(""Location"");
  Assert.assertNotNull(header);
  Assert.assertNotNull(header.getValue());
  header=response.getFirstHeader(""Content-Location"");
  Assert.assertNotNull(header);
  Assert.assertNotNull(header.getValue());
  header=response.getFirstHeader(""Content-Type"");
  Assert.assertNotNull(header);
  Assert.assertNotNull(header.getValue());
  header=response.getFirstHeader(""Content-Length"");
  Assert.assertNotNull(header);
  Assert.assertNotNull(header.getValue());
  Document<Entry> document=abderaParser.parse(response.getEntity().getContent());
  Entry entry=document.getRoot();
  String title=entry.getTitle();
  Assert.assertNotNull(title);
  IRI id=entry.getId();
  Assert.assertNotNull(id);
  mediaId=id.toString();
  Assert.assertNotNull(mediaId);
  Date updated=entry.getUpdated();
  Assert.assertNotNull(updated);
  String summary=entry.getSummary();
  Assert.assertNotNull(summary);
  IRI contentSrc=entry.getContentSrc();
  Assert.assertNotNull(contentSrc);
  Link editLink=entry.getEditLink();
  Assert.assertNotNull(editLink);
  Assert.assertNotNull(editLink.getRel());
  Assert.assertNotNull(editLink.getHref());
  Link editMediaLink=entry.getEditMediaLink();
  Assert.assertNotNull(editMediaLink);
  Assert.assertNotNull(editMediaLink.getRel());
  Assert.assertNotNull(editMediaLink.getHref());
}
  finally {
}
",0,0,0,,
410,} finally {,"try {
  HttpResponse response=httpclient.execute(put);
  response.getEntity().consumeContent();
  int result=response.getStatusLine().getStatusCode();
  Assert.assertEquals(200,result);
}
  finally {
}
",0,0,0,,
411,} finally {,"try {
  HttpResponse response=httpclient.execute(put);
  int result=response.getStatusLine().getStatusCode();
  Assert.assertEquals(404,result);
}
  finally {
}
",0,0,0,,
412,} finally {,"try {
  if (object instanceof Serializable && !object.getClass().isArray()) {
    try {
      object=copyObj(Thread.currentThread().getContextClassLoader(),object);
    }
 catch (    Exception e) {
      throw new UnknownException(e);
    }
  }
  if (type == Object.class || type == Serializable.class) {
    javax.rmi.CORBA.Util.writeAny(out,object);
  }
 else   if (org.omg.CORBA.Object.class.isAssignableFrom(type)) {
    out.write_Object((org.omg.CORBA.Object)object);
  }
 else   if (Remote.class.isAssignableFrom(type)) {
    javax.rmi.CORBA.Util.writeRemoteObject(out,object);
  }
 else   if (type.isInterface() && Serializable.class.isAssignableFrom(type)) {
    javax.rmi.CORBA.Util.writeAbstractObject(out,object);
  }
 else {
    out.write_value((Serializable)object,type);
  }
}
  finally {
}
",0,0,0,,
413,} finally {,"try {
  String msgID=((CallbackServiceReferenceImpl)callableReference).getMsgID();
  return invoke(method,chain,args,wire,msgID);
}
 catch (InvocationTargetException e) {
  Throwable t=e.getCause();
  throw t;
}
 finally {
}
",0,0,0,,
414,} finally {,"try {
  ProcessStateUpdate processStateUpdate=new ProcessStateUpdate(process.getProcessState(),process.getPID(),process.getDuccId().getUnique());
  ProcessStateUpdateDuccEvent event=new ProcessStateUpdateDuccEvent(processStateUpdate);
  if (process.getPID() != null && super.getContext().getRoute(process.getPID()) != null) {
    try {
      super.getContext().stopRoute(process.getPID());
    }
 catch (    Exception e) {
      logger.error(methodName,null,""....Unable to stop Camel route for PID:"" + process.getPID());
    }
    super.getContext().removeRoute(process.getPID());
    StringBuilder sb=new StringBuilder(""\n"");
    logger.info(methodName,null,""Removed Camel Route from Context for PID:"" + process.getPID());
    for (    Route route : super.getContext().getRoutes()) {
      sb.append(""Camel Context - RouteId:"" + route.getId() + ""\n"");
    }
    logger.info(methodName,null,sb.toString());
  }
  updateProcessStatus(event);
}
 catch (Exception e) {
  logger.error(methodName,null,e);
}
 finally {
}
",0,0,0,,
415,} finally {,"try {
  Socket client=serviceStateUpdateServer.accept();
  ServiceUpdateWorkerThread worker=new ServiceUpdateWorkerThread(client,l);
  worker.start();
}
 catch (SocketException e) {
}
catch (Exception e) {
  logger.error(""startAPServiceStateUpdateSocketServer"",null,e);
}
 finally {
}
",0,0,0,,
416,} finally {,"try {
  doExec(pb,cmd,isKillCommand(cmdLine));
}
 catch (Exception e) {
  throw e;
}
 finally {
}
",0,0,0,,
417,finally {,"try {
  trans.setResponseHints(new ArrayList<Hint>());
  TaskConsumer taskConsumer=new WiTaskConsumer(trans);
  MessageBuffer mb=new MessageBuffer();
  mb.append(Standardize.Label.remote.get() + taskConsumer.toString());
  mb.append(Standardize.Label.type.get() + trans.getType());
  Type type=trans.getType();
switch (type) {
case Get:
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""---- Driver handling GET Request - Requestor:"" + taskConsumer.toString());
    }
  handleMetaTaskTransationGet(trans,taskConsumer);
break;
case Ack:
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""---- Driver handling ACK Request - Requestor:"" + taskConsumer.toString());
}
handleMetaTaskTransationAck(trans,taskConsumer);
break;
case End:
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""---- Driver handling END Request - Requestor:"" + taskConsumer.toString());
}
handleMetaTaskTransationEnd(trans,taskConsumer);
break;
case InvestmentReset:
break;
default :
break;
}
IMetaTask metaCas=trans.getMetaTask();
if (metaCas != null) {
metaCas.setPerformanceMetrics(null);
metaCas.setUserSpaceException(null);
}
}
 catch (Exception e) {
logger.log(Level.WARNING,""Error"",e);
}
 finally {
}
",0,0,0,,
418,} finally {,"try {
  trans.setResponseHints(new ArrayList<Hint>());
  TaskConsumer taskConsumer=new WiTaskConsumer(trans);
  MessageBuffer mb=new MessageBuffer();
  mb.append(Standardize.Label.remote.get() + taskConsumer.toString());
  mb.append(Standardize.Label.type.get() + trans.getType());
  Type type=trans.getType();
switch (type) {
case Get:
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""---- Driver handling GET Request - Requestor:"" + taskConsumer.toString());
    }
  handleMetaTaskTransationGet(trans,taskConsumer);
break;
case Ack:
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""---- Driver handling ACK Request - Requestor:"" + taskConsumer.toString());
}
handleMetaTaskTransationAck(trans,taskConsumer);
break;
case End:
if (logger.isLoggable(Level.FINE)) {
logger.log(Level.FINE,""---- Driver handling END Request - Requestor:"" + taskConsumer.toString());
}
handleMetaTaskTransationEnd(trans,taskConsumer);
break;
case InvestmentReset:
break;
default :
break;
}
IMetaTask metaCas=trans.getMetaTask();
if (metaCas != null) {
metaCas.setPerformanceMetrics(null);
metaCas.setUserSpaceException(null);
}
}
 catch (Exception e) {
logger.log(Level.WARNING,""Error"",e);
}
 finally {
}
",0,0,0,,
419,} finally {,"try {
  Socket client=serviceStateUpdateServer.accept();
  ServiceUpdateWorkerThread worker=new ServiceUpdateWorkerThread(client);
  worker.start();
}
 catch (SocketException e) {
  break;
}
catch (Exception e) {
  e.printStackTrace();
  break;
}
 finally {
}
",0,0,0,,
420,} finally {,"try {
  major=IdGenerator.addAndGet(1);
  minor=0;
  transaction=getWork(postMethod,major,minor);
  if (!duccComponent.isRunning()) {
    logger.info(""run"",null,""Thread:"" + Thread.currentThread().getId() + "" Process is Stopping - Terminating This Thread"");
    break;
  }
  if (!logConnectionToJD) {
    logConnectionToJD=true;
    logger.info(""run"",null,""T["" + Thread.currentThread().getId() + ""] - Regained Connection to JD"");
  }
  if (transaction.getMetaTask() == null || transaction.getMetaTask().getUserSpaceTask() == null) {
    logger.info(""run"",null,""Client is out of work - will retry quietly every"",duccComponent.getThreadSleepTime() / 1000,""secs."");
synchronized (HttpWorkerThread.class) {
      while (duccComponent.isRunning()) {
        transaction=getWork(postMethod,major,++minor);
        if (transaction.getMetaTask() != null && transaction.getMetaTask().getUserSpaceTask() != null) {
          logger.info(""run"",null,""Thread:"" + Thread.currentThread().getId() + "" work flow has restarted"");
          break;
        }
        waitAwhile(duccComponent.getThreadSleepTime());
      }
    }
  }
  if (duccComponent.isRunning()) {
    boolean workItemFailed=false;
    try {
      String key=(String)getKeyMethod.invoke(processorInstance,transaction.getMetaTask().getUserSpaceTask());
      if (key != null) {
        transactionMap.put(key,transaction);
      }
      if (!duccComponent.isRunning()) {
        break;
      }
      List<Properties> metrics=(List<Properties>)processMethod.invoke(processorInstance,transaction.getMetaTask().getUserSpaceTask());
      if (key != null) {
        transactionMap.remove(key);
      }
      logger.debug(""run"",null,""Thread:"" + Thread.currentThread().getId() + "" process() completed"");
      IServiceResultSerializer deserializer=new UimaResultDefaultSerializer();
      List<PerformanceMetrics> pmList=new ArrayList<PerformanceMetrics>();
      for (      Properties p : metrics) {
        PerformanceMetrics pm=new PerformanceMetrics(p.getProperty(""name""),p.getProperty(""uniqueName""),Long.parseLong(p.getProperty(""analysisTime"")),0);
        pmList.add(pm);
      }
      transaction.getMetaTask().setPerformanceMetrics(deserializer.serialize(pmList));
    }
 catch (    InvocationTargetException ee) {
      logger.error(""run"",null,ee);
      workItemFailed=true;
      if (!duccComponent.isRunning()) {
        break;
      }
      IMetaTask mc=transaction.getMetaTask();
      Method getLastSerializedErrorMethod=processorInstance.getClass().getDeclaredMethod(""getLastSerializedError"");
      byte[] serializedException=(byte[])getLastSerializedErrorMethod.invoke(processorInstance);
      mc.setUserSpaceException(serializedException);
      logger.info(""run"",null,""Work item processing failed - returning serialized exception to the JD"");
    }
catch (    Exception ee) {
      workItemFailed=true;
      if (!duccComponent.isRunning()) {
        logger.info(""run"",null,""Work item processing failed - terminating thread - ignore any AE errors that may happen beyond this point"");
        break;
      }
      byte[] serializedException=serializeException(ee);
      logger.error(""run"",null,ee);
      transaction.getMetaTask().setUserSpaceException(serializedException);
    }
    transaction.getMetaTask().setUserSpaceTask(null);
    transaction.setType(Type.End);
    minor++;
    TransactionId tid=new TransactionId(major,minor++);
    transaction.setTransactionId(tid);
    if (!duccComponent.isRunning()) {
      break;
    }
    httpClient.execute(transaction,postMethod);
    if (!duccComponent.isRunning()) {
      logger.info(""run"",null,""Thread:"" + Thread.currentThread().getId() + "" Process is Stopping - Terminating This Thread"");
      break;
    }
    String wid=null;
    try {
      wid=transaction.getMetaTask().getSystemKey();
    }
 catch (    Exception e) {
    }
    logger.info(""run"",null,""Thread:"" + Thread.currentThread().getId() + "" sent END for WI:""+ wid);
    if (exitOnProcessFailure && workItemFailed) {
      if (wid != null) {
        logger.warn(""run"",null,""Worker thread exiting due to error while processing WI:"" + wid);
      }
 else {
        logger.warn(""run"",null,""Worker thread exiting due to error while processing a WI"");
      }
      logger.info(""run"",null,""JP Terminating Due to WI Error - Notify Agent"");
      duccComponent.setState(ProcessState.Stopping,ReasonForStoppingProcess.ExceededErrorThreshold.toString());
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
      }
      logger.warn(""run"",null,""Terminating Job Process - Work Item Failed"");
      Runtime.getRuntime().halt(-1);
      break;
    }
    maxFrameworkFailures.set(maxFrameworkErrors);
  }
}
 catch (InterruptedException e) {
  logger.error(""run"",null,""WorkerThread Interrupted - Terminating Thread "" + Thread.currentThread().getId());
  return;
}
catch (Exception e) {
  logger.error(""run"",null,e);
  if (maxFrameworkFailures.decrementAndGet() <= 0) {
    logger.error(""run"",null,""The Job Process Terminating Due To a Framework Error"");
    Runtime.getRuntime().halt(-1);
  }
}
 finally {
}
",0,0,0,,
421,} finally {,"try {
  r.run();
}
 catch (Throwable e) {
  return;
}
 finally {
}
",0,0,0,,
422,} finally {,"try {
  if (brokerInstance == null) {
    Logger logger=UIMAFramework.getLogger();
    logger.log(Level.INFO,""UIMA-AS Version::"" + UimaAsVersion.getFullVersionString());
    deployBroker(duccHome);
    brokerRunning=true;
    uimaASClient=new BaseUIMAAsynchronousEngine_impl();
    int i=0;
    for (    String dd : deploymentDescriptors) {
      ids[i]=deployService(dd);
    }
    initializeUimaAsClient();
  }
}
 catch (Throwable e) {
  Logger logger=UIMAFramework.getLogger();
  logger.log(Level.WARNING,""UimaProcessContainer"",e);
  throw new RuntimeException(e);
}
 finally {
}
",0,0,0,,
423,} finally {,"try {
synchronized (UimaASProcessContainer.class) {
    if (brokerRunning) {
      Logger logger=UIMAFramework.getLogger();
      logger.log(Level.INFO,""Stopping UIMA_AS Client"");
      try {
        System.setProperty(""dontKill"",""true"");
        uimaASClient.stop();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""doStop"",e);
      }
      Method stopMethod=classToLaunch.getMethod(""stop"");
      stopMethod.invoke(brokerInstance);
      Method waitMethod=classToLaunch.getMethod(""waitUntilStopped"");
      waitMethod.invoke(brokerInstance);
      brokerRunning=false;
    }
  }
}
  finally {
}
",0,0,0,,
424,} finally {,"try {
  AnalysisEngine ae=instanceMap.checkout();
  if (ae != null) {
    ae.destroy();
  }
}
 catch (Exception e) {
  Logger logger=UIMAFramework.getLogger();
  logger.log(Level.WARNING,""doStop"",e);
}
 finally {
}
",0,0,0,,
425,} finally {,"try {
  index=Integer.valueOf(split[1]);
}
  finally {
}
",0,0,0,,
426,finally {,"try {
  int _type=T__16;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('<');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
427,finally {,"try {
  int _type=T__17;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""<="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
428,finally {,"try {
  int _type=T__18;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('=');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
429,finally {,"try {
  int _type=T__19;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('>');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
430,finally {,"try {
  int _type=T__20;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match("">="");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
431,finally {,"try {
  int _type=T__21;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""in"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
432,finally {,"try {
  int _type=T__22;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""eq"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
433,finally {,"try {
  int _type=T__23;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""lt"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
434,finally {,"try {
  int _type=T__24;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""gt"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
435,finally {,"try {
  int _type=T__25;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""lte"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
436,finally {,"try {
  int _type=T__26;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""gte"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
437,finally {,"try {
  int _type=T__27;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""contains"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
438,finally {,"try {
  int _type=T__28;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""within"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
439,finally {,"try {
  int _type=T__29;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(',');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
440,finally {,"try {
  int _type=T__30;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""of"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
441,finally {,"try {
  int _type=T__31;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(':');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
442,finally {,"try {
  int _type=T__32;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""asc"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
443,finally {,"try {
  int _type=T__33;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""desc"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
444,finally {,"try {
  int _type=T__34;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('*');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
445,finally {,"try {
  int _type=T__35;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('{');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
446,finally {,"try {
  int _type=T__36;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('}');
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
447,finally {,"try {
  int _type=T__37;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""select"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
448,finally {,"try {
  int _type=T__38;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""where"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
449,finally {,"try {
  int _type=T__39;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""and"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
450,finally {,"try {
  int _type=T__40;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match(""order by"");
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
451,finally {,"try {
  int _type=ID;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    if ((input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
    loop1:     do {
      int alt1=2;
      int LA1_0=input.LA(1);
      if ((LA1_0 == '.' || (LA1_0 >= '0' && LA1_0 <= '9') || (LA1_0 >= 'A' && LA1_0 <= 'Z') || LA1_0 == '_' || (LA1_0 >= 'a' && LA1_0 <= 'z'))) {
        alt1=1;
      }
switch (alt1) {
case 1:
{
          if (input.LA(1) == '.' || (input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    break loop1;
}
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
452,finally {,"try {
  int _type=INT;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    int alt2=2;
    int LA2_0=input.LA(1);
    if ((LA2_0 == '-')) {
      alt2=1;
    }
switch (alt2) {
case 1:
{
        match('-');
      }
    break;
}
int cnt3=0;
loop3: do {
  int alt3=2;
  int LA3_0=input.LA(1);
  if (((LA3_0 >= '0' && LA3_0 <= '9'))) {
    alt3=1;
  }
switch (alt3) {
case 1:
{
      matchRange('0','9');
    }
  break;
default :
if (cnt3 >= 1) {
  break loop3;
}
EarlyExitException eee=new EarlyExitException(3,input);
throw eee;
}
cnt3++;
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
453,finally {,"try {
  int _type=FLOAT;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    int alt4=2;
    int LA4_0=input.LA(1);
    if ((LA4_0 == '-')) {
      alt4=1;
    }
switch (alt4) {
case 1:
{
        match('-');
      }
    break;
}
int alt11=3;
alt11=dfa11.predict(input);
switch (alt11) {
case 1:
{
    int cnt5=0;
    loop5:     do {
      int alt5=2;
      int LA5_0=input.LA(1);
      if (((LA5_0 >= '0' && LA5_0 <= '9'))) {
        alt5=1;
      }
switch (alt5) {
case 1:
{
          matchRange('0','9');
        }
      break;
default :
    if (cnt5 >= 1) {
      break loop5;
    }
  EarlyExitException eee=new EarlyExitException(5,input);
throw eee;
}
cnt5++;
}
 while (true);
match('.');
loop6: do {
int alt6=2;
int LA6_0=input.LA(1);
if (((LA6_0 >= '0' && LA6_0 <= '9'))) {
alt6=1;
}
switch (alt6) {
case 1:
{
matchRange('0','9');
}
break;
default :
break loop6;
}
}
 while (true);
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == 'E' || LA7_0 == 'e')) {
alt7=1;
}
switch (alt7) {
case 1:
{
mEXPONENT();
}
break;
}
}
break;
case 2:
{
match('.');
int cnt8=0;
loop8: do {
int alt8=2;
int LA8_0=input.LA(1);
if (((LA8_0 >= '0' && LA8_0 <= '9'))) {
alt8=1;
}
switch (alt8) {
case 1:
{
matchRange('0','9');
}
break;
default :
if (cnt8 >= 1) {
break loop8;
}
EarlyExitException eee=new EarlyExitException(8,input);
throw eee;
}
cnt8++;
}
 while (true);
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == 'E' || LA9_0 == 'e')) {
alt9=1;
}
switch (alt9) {
case 1:
{
mEXPONENT();
}
break;
}
}
break;
case 3:
{
int cnt10=0;
loop10: do {
int alt10=2;
int LA10_0=input.LA(1);
if (((LA10_0 >= '0' && LA10_0 <= '9'))) {
alt10=1;
}
switch (alt10) {
case 1:
{
matchRange('0','9');
}
break;
default :
if (cnt10 >= 1) {
break loop10;
}
EarlyExitException eee=new EarlyExitException(10,input);
throw eee;
}
cnt10++;
}
 while (true);
mEXPONENT();
}
break;
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
454,finally {,"try {
  int _type=STRING;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    match('\'');
    loop12:     do {
      int alt12=3;
      int LA12_0=input.LA(1);
      if ((LA12_0 == '\\')) {
        alt12=1;
      }
 else       if (((LA12_0 >= '\u0000' && LA12_0 <= '&') || (LA12_0 >= '(' && LA12_0 <= '[') || (LA12_0 >= ']' && LA12_0 <= '\uFFFF'))) {
        alt12=2;
      }
switch (alt12) {
case 1:
{
          mESC_SEQ();
        }
      break;
case 2:
{
      if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
    }
  break;
default :
break loop12;
}
}
 while (true);
match('\'');
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
455,finally {,"try {
{
    int alt13=2;
    int LA13_0=input.LA(1);
    if ((LA13_0 == 't')) {
      alt13=1;
    }
 else     if ((LA13_0 == 'f')) {
      alt13=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("""",13,0,input);
      throw nvae;
    }
switch (alt13) {
case 1:
{
        match(""true"");
      }
    break;
case 2:
{
    match(""false"");
  }
break;
}
}
}
  finally {
}
",0,0,0,,
456,finally {,"try {
  int _type=UUID;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    match('-');
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    match('-');
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    match('-');
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    match('-');
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
  }
  state.type=_type;
  state.channel=_channel;
}
  finally {
}
",0,0,0,,
457,finally {,"try {
{
    if (input.LA(1) == 'E' || input.LA(1) == 'e') {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
    int alt14=2;
    int LA14_0=input.LA(1);
    if ((LA14_0 == '+' || LA14_0 == '-')) {
      alt14=1;
    }
switch (alt14) {
case 1:
{
        if (input.LA(1) == '+' || input.LA(1) == '-') {
          input.consume();
        }
 else {
          MismatchedSetException mse=new MismatchedSetException(null,input);
          recover(mse);
          throw mse;
        }
      }
    break;
}
int cnt15=0;
loop15: do {
  int alt15=2;
  int LA15_0=input.LA(1);
  if (((LA15_0 >= '0' && LA15_0 <= '9'))) {
    alt15=1;
  }
switch (alt15) {
case 1:
{
      matchRange('0','9');
    }
  break;
default :
if (cnt15 >= 1) {
  break loop15;
}
EarlyExitException eee=new EarlyExitException(15,input);
throw eee;
}
cnt15++;
}
 while (true);
}
}
  finally {
}
",0,0,0,,
458,finally {,"try {
{
    if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
}
  finally {
}
",0,0,0,,
459,finally {,"try {
  int alt16=3;
  int LA16_0=input.LA(1);
  if ((LA16_0 == '\\')) {
switch (input.LA(2)) {
case '\""':
case '\'':
case '\\':
case 'b':
case 'f':
case 'n':
case 'r':
case 't':
{
        alt16=1;
      }
    break;
case 'u':
{
    alt16=2;
  }
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
{
alt16=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("""",16,1,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("""",16,0,input);
throw nvae;
}
switch (alt16) {
case 1:
{
match('\\');
if (input.LA(1) == '\""' || input.LA(1) == '\'' || input.LA(1) == '\\' || input.LA(1) == 'b' || input.LA(1) == 'f' || input.LA(1) == 'n' || input.LA(1) == 'r' || input.LA(1) == 't') {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
case 2:
{
mUNICODE_ESC();
}
break;
case 3:
{
mOCTAL_ESC();
}
break;
}
}
  finally {
}
",0,0,0,,
460,finally {,"try {
  int alt17=3;
  int LA17_0=input.LA(1);
  if ((LA17_0 == '\\')) {
    int LA17_1=input.LA(2);
    if (((LA17_1 >= '0' && LA17_1 <= '3'))) {
      int LA17_2=input.LA(3);
      if (((LA17_2 >= '0' && LA17_2 <= '7'))) {
        int LA17_4=input.LA(4);
        if (((LA17_4 >= '0' && LA17_4 <= '7'))) {
          alt17=1;
        }
 else {
          alt17=2;
        }
      }
 else {
        alt17=3;
      }
    }
 else     if (((LA17_1 >= '4' && LA17_1 <= '7'))) {
      int LA17_3=input.LA(3);
      if (((LA17_3 >= '0' && LA17_3 <= '7'))) {
        alt17=2;
      }
 else {
        alt17=3;
      }
    }
 else {
      NoViableAltException nvae=new NoViableAltException("""",17,1,input);
      throw nvae;
    }
  }
 else {
    NoViableAltException nvae=new NoViableAltException("""",17,0,input);
    throw nvae;
  }
switch (alt17) {
case 1:
{
      match('\\');
{
        matchRange('0','3');
      }
{
        matchRange('0','7');
      }
{
        matchRange('0','7');
      }
    }
  break;
case 2:
{
  match('\\');
{
    matchRange('0','7');
  }
{
    matchRange('0','7');
  }
}
break;
case 3:
{
match('\\');
{
matchRange('0','7');
}
}
break;
}
}
  finally {
}
",0,0,0,,
461,finally {,"try {
{
    match('\\');
    match('u');
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
    mHEX_DIGIT();
  }
}
  finally {
}
",0,0,0,,
462,finally {,"try {
  int _type=WS;
  int _channel=DEFAULT_TOKEN_CHANNEL;
{
    int cnt18=0;
    loop18:     do {
      int alt18=2;
      int LA18_0=input.LA(1);
      if (((LA18_0 >= '\t' && LA18_0 <= '\n') || (LA18_0 >= '\f' && LA18_0 <= '\r') || LA18_0 == ' ')) {
        alt18=1;
      }
switch (alt18) {
case 1:
{
          if ((input.LA(1) >= '\t' && input.LA(1) <= '\n') || (input.LA(1) >= '\f' && input.LA(1) <= '\r') || input.LA(1) == ' ') {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    if (cnt18 >= 1) {
      break loop18;
    }
  EarlyExitException eee=new EarlyExitException(18,input);
throw eee;
}
cnt18++;
}
 while (true);
_channel=HIDDEN;
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
",0,0,0,,
463,finally {,"try {
{
{
      match(input,ID,FOLLOW_ID_in_property597);
    }
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
464,finally {,"try {
{
    if ((input.LA(1) >= 16 && input.LA(1) <= 28)) {
      input.consume();
      state.errorRecovery=false;
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      throw mse;
    }
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
465,finally {,"try {
{
    if (input.LA(1) == INT || input.LA(1) == FLOAT || (input.LA(1) >= STRING && input.LA(1) <= BOOLEAN) || input.LA(1) == UUID) {
      input.consume();
      state.errorRecovery=false;
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      throw mse;
    }
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
466,finally {,"try {
{
    if (input.LA(1) == INT || input.LA(1) == FLOAT || (input.LA(1) >= STRING && input.LA(1) <= BOOLEAN) || input.LA(1) == UUID) {
      input.consume();
      state.errorRecovery=false;
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      throw mse;
    }
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
467,finally {,"try {
{
    if (input.LA(1) == INT || input.LA(1) == FLOAT || (input.LA(1) >= STRING && input.LA(1) <= BOOLEAN) || input.LA(1) == UUID) {
      input.consume();
      state.errorRecovery=false;
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      throw mse;
    }
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
468,finally {,"try {
{
    pushFollow(FOLLOW_property_in_filter759);
    property1=property();
    state._fsp--;
    pushFollow(FOLLOW_operator_in_filter761);
    operator2=operator();
    state._fsp--;
    pushFollow(FOLLOW_value_in_filter763);
    value3=value();
    state._fsp--;
    int alt2=2;
    int LA2_0=input.LA(1);
    if (((LA2_0 >= 29 && LA2_0 <= 30))) {
      alt2=1;
    }
switch (alt2) {
case 1:
{
        if ((input.LA(1) >= 29 && input.LA(1) <= 30)) {
          input.consume();
          state.errorRecovery=false;
        }
 else {
          MismatchedSetException mse=new MismatchedSetException(null,input);
          throw mse;
        }
        pushFollow(FOLLOW_second_value_in_filter774);
        second_value4=second_value();
        state._fsp--;
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == 29)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            match(input,29,FOLLOW_29_in_filter778);
            pushFollow(FOLLOW_third_value_in_filter780);
            third_value5=third_value();
            state._fsp--;
          }
        break;
    }
  }
break;
}
String property=(property1 != null ? input.toString(property1.start,property1.stop) : null);
String operator=(operator2 != null ? input.toString(operator2.start,operator2.stop) : null);
String value=(value3 != null ? input.toString(value3.start,value3.stop) : null);
String second_value=(second_value4 != null ? input.toString(second_value4.start,second_value4.stop) : null);
String third_value=(third_value5 != null ? input.toString(third_value5.start,third_value5.stop) : null);
filter=new FilterPredicate(property,operator,value,second_value,third_value);
match(input,EOF,FOLLOW_EOF_in_filter789);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
",0,0,0,,
469,finally {,"try {
{
    match(input,ID,FOLLOW_ID_in_select_subject800);
    query.addSelect(input.toString(retval.start,input.LT(-1)));
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
470,finally {,"try {
{
    match(input,ID,FOLLOW_ID_in_select_assign_target812);
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
471,finally {,"try {
{
    match(input,ID,FOLLOW_ID_in_select_assign_source823);
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
472,finally {,"try {
{
    pushFollow(FOLLOW_select_assign_target_in_select_assign836);
    select_assign_target7=select_assign_target();
    state._fsp--;
    match(input,31,FOLLOW_31_in_select_assign838);
    pushFollow(FOLLOW_select_assign_source_in_select_assign840);
    select_assign_source6=select_assign_source();
    state._fsp--;
    query.addSelect((select_assign_source6 != null ? input.toString(select_assign_source6.start,select_assign_source6.stop) : null),(select_assign_target7 != null ? input.toString(select_assign_target7.start,select_assign_target7.stop) : null));
  }
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
473,finally {,"try {
{
{
      pushFollow(FOLLOW_property_in_where855);
      property8=property();
      state._fsp--;
      pushFollow(FOLLOW_operator_in_where857);
      operator9=operator();
      state._fsp--;
      pushFollow(FOLLOW_value_in_where859);
      value10=value();
      state._fsp--;
      int alt4=2;
      int LA4_0=input.LA(1);
      if (((LA4_0 >= 29 && LA4_0 <= 30))) {
        alt4=1;
      }
switch (alt4) {
case 1:
{
          if ((input.LA(1) >= 29 && input.LA(1) <= 30)) {
            input.consume();
            state.errorRecovery=false;
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
          pushFollow(FOLLOW_second_value_in_where870);
          second_value11=second_value();
          state._fsp--;
          int alt3=2;
          int LA3_0=input.LA(1);
          if ((LA3_0 == 29)) {
            alt3=1;
          }
switch (alt3) {
case 1:
{
              match(input,29,FOLLOW_29_in_where874);
              pushFollow(FOLLOW_third_value_in_where876);
              third_value12=third_value();
              state._fsp--;
            }
          break;
      }
    }
  break;
}
String property=(property8 != null ? input.toString(property8.start,property8.stop) : null);
String operator=(operator9 != null ? input.toString(operator9.start,operator9.stop) : null);
String value=(value10 != null ? input.toString(value10.start,value10.stop) : null);
int value_type=(value10 != null ? ((Token)value10.start) : null) != null ? (value10 != null ? ((Token)value10.start) : null).getType() : 0;
String second_value=(second_value11 != null ? input.toString(second_value11.start,second_value11.stop) : null);
int second_value_type=(second_value11 != null ? ((Token)second_value11.start) : null) != null ? (second_value11 != null ? ((Token)second_value11.start) : null).getType() : 0;
String third_value=(third_value12 != null ? input.toString(third_value12.start,third_value12.stop) : null);
int third_value_type=(third_value12 != null ? ((Token)third_value12.start) : null) != null ? (third_value12 != null ? ((Token)third_value12.start) : null).getType() : 0;
FilterPredicate filter=new FilterPredicate(property,operator,value,value_type,second_value,second_value_type,third_value,third_value_type);
query.addFilter(filter);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
",0,0,0,,
474,finally {,"try {
{
    if ((input.LA(1) >= 32 && input.LA(1) <= 33)) {
      input.consume();
      state.errorRecovery=false;
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      throw mse;
    }
  }
  retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
  reportError(re);
  recover(input,re);
}
 finally {
}
",0,0,0,,
475,finally {,"try {
{
{
      pushFollow(FOLLOW_property_in_order909);
      property13=property();
      state._fsp--;
      int alt5=2;
      int LA5_0=input.LA(1);
      if (((LA5_0 >= 32 && LA5_0 <= 33))) {
        alt5=1;
      }
switch (alt5) {
case 1:
{
          pushFollow(FOLLOW_direction_in_order911);
          direction14=direction();
          state._fsp--;
        }
      break;
  }
}
String property=(property13 != null ? input.toString(property13.start,property13.stop) : null);
String direction=(direction14 != null ? input.toString(direction14.start,direction14.stop) : null);
SortPredicate sort=new SortPredicate(property,direction);
query.addSort(sort);
System.out.println(""Parsed query order: "" + property + "" ""+ direction);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
",0,0,0,,
476,finally {,"try {
{
    int alt8=3;
switch (input.LA(1)) {
case 34:
{
        alt8=1;
      }
    break;
case ID:
{
    alt8=2;
  }
break;
case 35:
{
alt8=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("""",8,0,input);
throw nvae;
}
switch (alt8) {
case 1:
{
match(input,34,FOLLOW_34_in_select_expr925);
}
break;
case 2:
{
pushFollow(FOLLOW_select_subject_in_select_expr929);
select_subject();
state._fsp--;
loop6: do {
int alt6=2;
int LA6_0=input.LA(1);
if ((LA6_0 == 29)) {
alt6=1;
}
switch (alt6) {
case 1:
{
match(input,29,FOLLOW_29_in_select_expr932);
pushFollow(FOLLOW_select_subject_in_select_expr934);
select_subject();
state._fsp--;
}
break;
default :
break loop6;
}
}
 while (true);
}
break;
case 3:
{
match(input,35,FOLLOW_35_in_select_expr941);
pushFollow(FOLLOW_select_assign_in_select_expr943);
select_assign();
state._fsp--;
loop7: do {
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == 29)) {
alt7=1;
}
switch (alt7) {
case 1:
{
match(input,29,FOLLOW_29_in_select_expr946);
pushFollow(FOLLOW_select_assign_in_select_expr948);
select_assign();
state._fsp--;
}
break;
default :
break loop7;
}
}
 while (true);
match(input,36,FOLLOW_36_in_select_expr953);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
",0,0,0,,
477,finally {,"try {
{
    match(input,37,FOLLOW_37_in_ql970);
    pushFollow(FOLLOW_select_expr_in_ql972);
    select_expr();
    state._fsp--;
    int alt10=2;
    int LA10_0=input.LA(1);
    if ((LA10_0 == 38)) {
      alt10=1;
    }
switch (alt10) {
case 1:
{
        match(input,38,FOLLOW_38_in_ql975);
        pushFollow(FOLLOW_where_in_ql977);
        where();
        state._fsp--;
        loop9:         do {
          int alt9=2;
          int LA9_0=input.LA(1);
          if ((LA9_0 == 39)) {
            alt9=1;
          }
switch (alt9) {
case 1:
{
              match(input,39,FOLLOW_39_in_ql980);
              pushFollow(FOLLOW_where_in_ql982);
              where();
              state._fsp--;
            }
          break;
default :
        break loop9;
    }
  }
 while (true);
}
break;
}
int alt12=2;
int LA12_0=input.LA(1);
if ((LA12_0 == 40)) {
alt12=1;
}
switch (alt12) {
case 1:
{
match(input,40,FOLLOW_40_in_ql989);
pushFollow(FOLLOW_order_in_ql991);
order();
state._fsp--;
loop11: do {
int alt11=2;
int LA11_0=input.LA(1);
if ((LA11_0 == 29)) {
  alt11=1;
}
switch (alt11) {
case 1:
{
    match(input,29,FOLLOW_29_in_ql994);
    pushFollow(FOLLOW_order_in_ql996);
    order();
    state._fsp--;
  }
break;
default :
break loop11;
}
}
 while (true);
}
break;
}
q=query;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
",0,0,0,,
478,} finally {,"try {
  Id owner=table.lookupOwner(res.getApplicationScope(),res.getOwner().getType(),res.getField());
  if (owner != null && owner.equals(res.getOwner())) {
    getSender().tell(new Response(Response.Status.IS_UNIQUE,res.getConsistentHashKey()),getSender());
    return;
  }
 else   if (owner != null && !owner.equals(res.getOwner())) {
    getSender().tell(new Response(Response.Status.NOT_UNIQUE,res.getConsistentHashKey()),getSender());
    return;
  }
  table.reserve(res.getApplicationScope(),res.getOwner(),res.getOwnerVersion(),res.getField());
  getSender().tell(new Response(Response.Status.IS_UNIQUE,res.getConsistentHashKey()),getSender());
  if (uniqueValuesFig.getSkipRemoteRegions()) {
    actorSystemManager.publishToLocalRegion(""content"",new Reservation(res),getSelf());
  }
 else {
    actorSystemManager.publishToAllRegions(""content"",new Reservation(res),getSelf());
  }
}
 catch (Throwable t) {
  getSender().tell(new Response(Response.Status.ERROR,res.getConsistentHashKey()),getSender());
  logger.error(""Error processing request"",t);
}
 finally {
}
",0,0,0,,
479,} finally {,"try {
  Id owner=table.lookupOwner(con.getApplicationScope(),con.getOwner().getType(),con.getField());
  if (owner != null && !owner.equals(con.getOwner())) {
    Response response=new Response(Response.Status.NOT_UNIQUE,con.getConsistentHashKey());
    getSender().tell(response,getSender());
    if (uniqueValuesFig.getSkipRemoteRegions()) {
      actorSystemManager.publishToLocalRegion(""content"",response,getSelf());
    }
 else {
      actorSystemManager.publishToAllRegions(""content"",response,getSelf());
    }
    return;
  }
 else   if (owner == null) {
    Response response=new Response(Response.Status.BAD_REQUEST,con.getConsistentHashKey());
    getSender().tell(response,getSender());
    if (uniqueValuesFig.getSkipRemoteRegions()) {
      actorSystemManager.publishToLocalRegion(""content"",response,getSelf());
    }
 else {
      actorSystemManager.publishToAllRegions(""content"",response,getSelf());
    }
    return;
  }
  table.confirm(con.getApplicationScope(),con.getOwner(),con.getOwnerVersion(),con.getField());
  Response response=new Response(Response.Status.IS_UNIQUE,con.getConsistentHashKey());
  getSender().tell(response,getSender());
  if (uniqueValuesFig.getSkipRemoteRegions()) {
    actorSystemManager.publishToLocalRegion(""content"",response,getSelf());
  }
 else {
    actorSystemManager.publishToAllRegions(""content"",response,getSelf());
  }
}
 catch (Throwable t) {
  getSender().tell(new Response(Response.Status.ERROR,con.getConsistentHashKey()),getSender());
  logger.error(""Error processing request"",t);
}
 finally {
}
",0,0,0,,
480,} finally {,"try {
  notificationWaitForComplete(notification);
}
  finally {
}
",0,0,0,,
481,} finally {,"try {
  File upload=WidgetFileUtils.dealWithDroppedFile(UPLOADFOLDER,f);
  W3CWidgetFactory fac=W3CWidgetFactoryUtils.createW3CWidgetFactory(context,configuration,localizedMessages);
  W3CWidget model=fac.parse(upload);
  WidgetJavascriptSyntaxAnalyzer jsa=new WidgetJavascriptSyntaxAnalyzer(fac.getUnzippedWidgetDirectory());
  if (WidgetMetadataService.Factory.getInstance().getWidget(model.getIdentifier()) == null) {
    WidgetFactory.addNewWidget(model,upload,true);
    String message=model.getLocalName(""en"") + ""' - "" + localizedMessages.getString(""WidgetAdminServlet.19"");
    _logger.info(message);
  }
 else {
    String message=model.getLocalName(""en"") + ""' - "" + localizedMessages.getString(""WidgetAdminServlet.20"");
    WidgetFactory.update(model,WidgetMetadataService.Factory.getInstance().getWidget(model.getIdentifier()),true,upload);
    _logger.info(message);
  }
  NewWidgetBroadcaster.broadcast(configuration,model.getIdentifier());
}
 catch (IOException e) {
  String error=f.getName() + "":"" + localizedMessages.getString(""WidgetHotDeploy.1"")+ "" - ""+ e.getLocalizedMessage();
  _logger.error(error,e);
}
catch (BadWidgetZipFileException e) {
  String error=f.getName() + "":"" + localizedMessages.getString(""WidgetHotDeploy.2"")+ "" - ""+ e.getLocalizedMessage();
  _logger.error(error,e);
}
catch (BadManifestException e) {
  String error=f.getName() + "":"" + localizedMessages.getString(""WidgetHotDeploy.3"")+ "" - ""+ e.getLocalizedMessage();
  _logger.error(error,e);
}
catch (Exception e) {
  String error=f.getName() + "":"" + e.getLocalizedMessage();
  _logger.error(error,e);
}
 finally {
}
",0,0,0,,
482,} finally {,"try {
  if (retryChainInvocation) {
    response.reset();
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException ie) {
    }
  }
  chain.doFilter(request,response);
  retryChainInvocation=false;
}
 catch (ServletException se) {
  throw se;
}
catch (IOException ioe) {
  throw ioe;
}
catch (Throwable t) {
  throw new RuntimeException(""Exception caught for transaction: "" + t,t);
}
 finally {
}
",0,0,0,,
483,} finally {,"try {
  logger.info(""Checking for updates"");
  if (!onlyUseHttps)   logger.warn(""checking for updates using non-secure method"");
  IWidget[] widgets=WidgetMetadataService.Factory.getInstance().getAllWidgets();
  W3CWidgetFactory factory=W3CWidgetFactoryUtils.createW3CWidgetFactory(context);
  for (  IWidget widget : widgets) {
    try {
      W3CWidget updatedWidget=UpdateUtils.getUpdate(factory,widget.getIdentifier(),widget.getUpdateLocation(),widget.getVersion(),onlyUseHttps);
      if (updatedWidget != null && WidgetMetadataService.Factory.getInstance().getWidget(widget.getIdentifier()) != null) {
        WidgetFactory.update(updatedWidget,widget,false,null);
        logger.info(""Successfully updated "" + widget.getIdentifier() + "" to version ""+ updatedWidget.getVersion());
      }
    }
 catch (    Exception e) {
      logger.warn(e.getMessage(),e);
    }
  }
}
 catch (Exception e) {
  logger.error(""Problem with automatic update"",e);
}
 finally {
}
",0,0,0,,
484,finally{,"try {
  AuthToken authToken=AuthTokenUtils.decryptAuthToken(bean.getId_key());
  PropertiesController.updatePreference(authToken,bean.getKey(),bean.getValue());
}
 catch (Exception ex) {
  logger.error(""("" + queueIdentifer + "" to ""+ bean.getValue()+ "")(Error setting preference: ""+ ex,ex);
}
 finally {
}
",0,0,0,,
485,finally{,"try {
  AuthToken authToken=AuthTokenUtils.decryptAuthToken(bean.getId_key());
  if (authToken != null) {
    new SharedContext(authToken).updateSharedData(bean.getKey(),bean.getValue(),bean.append());
  }
}
 catch (Exception ex) {
  logger.error(""("" + queueIdentifer + "" to ""+ bean.getValue()+ "")(Error setting SharedData: ""+ ex,ex);
}
 finally {
}
",0,0,0,,
486,finally,"try {
  String contentType=null;
  contentType=getContentType(templates);
  if (contentType != null)   ;
  response.setContentType(contentType);
  if (transformer instanceof TransformerImpl) {
    TransformerImpl transformerImpl=(TransformerImpl)transformer;
    transformerImpl.setQuietConflictWarnings(ourDefaultParameters.isNoCW(request));
  }
  setStylesheetParams(transformer,request);
  transformer.transform(xmlSource,new StreamResult(response.getOutputStream()));
  if (debug)   writeLog(listener.getMessage(),response.SC_OK);
}
 catch (Exception exc) {
  ApplyXSLTException axe=new ApplyXSLTException(""Exception occurred during Transformation:"" + EOL + listener.getMessage()+ EOL+ exc.getMessage(),exc,response.SC_INTERNAL_SERVER_ERROR);
  if (debug)   writeLog(axe);
  displayException(response,axe,debug);
}
 finally {
}
",0,0,0,,
487,finally{,"try {
  if (m_parentNode instanceof Stylesheet)   df=transformer.transformToGlobalRTF(this);
 else   df=transformer.transformToRTF(this);
}
  finally {
}
",0,0,0,,
488,finally,"try {
  String contentType=null;
  contentType=getContentType(templates);
  if (contentType != null)   ;
  response.setContentType(contentType);
  if (transformer instanceof TransformerImpl) {
    TransformerImpl transformerImpl=(TransformerImpl)transformer;
    transformerImpl.setQuietConflictWarnings(ourDefaultParameters.isNoCW(request));
  }
  setStylesheetParams(transformer,request);
  transformer.transform(xmlSource,new StreamResult(response.getOutputStream()));
  if (debug)   writeLog(listener.getMessage(),response.SC_OK);
}
 catch (Exception exc) {
  ApplyXSLTException axe=new ApplyXSLTException(""Exception occurred during Transformation:"" + EOL + listener.getMessage()+ EOL+ exc.getMessage(),exc,response.SC_INTERNAL_SERVER_ERROR);
  if (debug)   writeLog(axe);
  displayException(response,axe,debug);
}
 finally {
}
",0,0,0,,
489,finally{,"try {
  if (m_parentNode instanceof Stylesheet)   df=transformer.transformToGlobalRTF(this);
 else   df=transformer.transformToRTF(this);
}
  finally {
}
",0,0,0,,
490,} finally {,"try {
  fireEvent(startedDispatcher,ev);
  if (isHalted()) {
    fireEvent(cancelledDispatcher,ev);
    return;
  }
  GVTBuilder builder=null;
  if (bridgeContext.isDynamic()) {
    builder=new DynamicGVTBuilder();
  }
 else {
    builder=new GVTBuilder();
  }
  GraphicsNode gvtRoot=builder.build(bridgeContext,svgDocument);
  if (isHalted()) {
    fireEvent(cancelledDispatcher,ev);
    return;
  }
  ev=new GVTTreeBuilderEvent(this,gvtRoot);
  fireEvent(completedDispatcher,ev);
}
 catch (InterruptedBridgeException e) {
  fireEvent(cancelledDispatcher,ev);
}
catch (BridgeException e) {
  exception=e;
  ev=new GVTTreeBuilderEvent(this,e.getGraphicsNode());
  fireEvent(failedDispatcher,ev);
}
catch (Exception e) {
  exception=e;
  fireEvent(failedDispatcher,ev);
}
catch (ThreadDeath td) {
  exception=new Exception(td.getMessage());
  fireEvent(failedDispatcher,ev);
  throw td;
}
catch (Throwable t) {
  t.printStackTrace();
  exception=new Exception(t.getMessage());
  fireEvent(failedDispatcher,ev);
}
 finally {
}
",0,0,0,,
491,} finally {  },"try (InputStream in=request.getResponseBodyAsStream();RandomAccessFile out=new RandomAccessFile(file,""rw"")){
  out.seek(localFileSize);
  s_logger.info(""Starting download from "" + downloadUrl + "" to ""+ toFile+ "" remoteSize=""+ toHumanReadableSize(remoteSize)+ "" , max size=""+ toHumanReadableSize(maxTemplateSizeInBytes));
  if (copyBytes(file,in,out))   return 0;
  Date finish=new Date();
  checkDowloadCompletion();
  downloadTime+=finish.getTime() - start.getTime();
}
  finally {
}
",43,43,1,,"Block(),
"
