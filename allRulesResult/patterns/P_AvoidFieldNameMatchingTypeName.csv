Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,private static final boolean DEBUG = false;,"private static final boolean DEBUG=false;
",0,104,6,2484,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
2,"private List<Map<String, List<ConsumeStats>>> consumeStatsList = new ArrayList<Map<String, List<ConsumeStats>>>();","private List<Map<String,List<ConsumeStats>>> consumeStatsList=new ArrayList<Map<String,List<ConsumeStats>>>();
",0,416,12,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
3,"private static Object[][] partData = {{new Integer(1), ""Engine"", new Integer(1), null},","private static Object[][] partData={{new Integer(1),""Engine"",new Integer(1),null},{new Integer(2),""Block"",new Integer(1),new Integer(1)},{new Integer(3),""Cam Shaft"",new Integer(2),new Integer(1)},{new Integer(4),""Piston"",new Integer(8),new Integer(1)},{new Integer(5),""Piston Ring"",new Integer(2),new Integer(4)}};
",0,137,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
4,"private final Table<StateNamespace, Equivalence.Wrapper<StateTag>, State> stateTable =","private final Table<StateNamespace,Equivalence.Wrapper<StateTag>,State> stateTable=HashBasedTable.create();
",0,28,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
5,"private static final Map<Class<?>, Queue<Listener<?>>> listeners = Maps.newConcurrentMap();","private static final Map<Class<?>,Queue<Listener<?>>> listeners=Maps.newConcurrentMap();
",0,37,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
6,"private final LRUMap<ProblemReport,Long> problemReports = new LRUMap<>(1000);","private final LRUMap<ProblemReport,Long> problemReports=new LRUMap<>(1000);
",0,2,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
7,"private Map<Class<?>, Converter<?>> converters = new HashMap<Class<?>, Converter<?>>();","private Map<Class<?>,Converter<?>> converters=new HashMap<Class<?>,Converter<?>>();
",0,24,12,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
8,"private static final String VERSION = getVersion(Version.class, """");","private static final String VERSION=getVersion(Version.class,"""");
",0,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
9,private long size = -1;,"private long size=-1;
",0,1,4,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
10,"public static final IRI ENHANCER = new IRI(NamespaceEnum.enhancer+""Enhancer"");","public static final IRI ENHANCER=new IRI(NamespaceEnum.enhancer + ""Enhancer"");
",0,3,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
11,private static final ServiceLoader<Platform> platforms = ServiceLoader.load(Platform.class);,"private static final ServiceLoader<Platform> platforms=ServiceLoader.load(Platform.class);
",0,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
12,@JsonProperty private final long bidsPerSession;,"@JsonProperty private final long bidsPerSession;
",0,1,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
13,"private final Map<String,Map<FileObject,ClassPath>> classpaths = new HashMap<String,Map<FileObject,ClassPath>>();","/** 
 * Map from classpath types to maps from package roots to classpaths.
 */
private final Map<String,Map<FileObject,ClassPath>> classpaths=new HashMap<String,Map<FileObject,ClassPath>>();
",0,8,13,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
"
14,"private final Map<CacheItem,Collection<? extends T>> dataCache = new HashMap<>();","private final Map<CacheItem,Collection<? extends T>> dataCache=new HashMap<>();
",0,7,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
15,"private final Map<String, Operator> operators = new java.util.HashMap<>();","private final Map<String,Operator> operators=new java.util.HashMap<>();
",0,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
16,private static final String PAIR = Pair.class.getName();,"private static final String PAIR=Pair.class.getName();
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
17,private final static org.slf4j.Logger LOGGER = LoggerFactory.getLogger(Logger.class);,"private final static org.slf4j.Logger LOGGER=LoggerFactory.getLogger(Logger.class);
",0,2,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
18,private final @NonNull String xref = xref();,"@Getter(lazy=true) private final @NonNull String xref=xref();
",0,1,6,,"Modifier(),
Modifier(),
SimpleName(MarkerAnnotation-typeName, ),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
"
19,"private final Map<Class<?>, Optional<Class<?>>> unwrappedCache = new ConcurrentHashMap<>();","private final Map<Class<?>,Optional<Class<?>>> unwrappedCache=new ConcurrentHashMap<>();
",0,6,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
20,"@Nonnull private final Map<String, Set<Expr>> equiconditions;","@Nonnull private final Map<String,Set<Expr>> equiconditions;
",0,3,8,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
21,"final OptionSimple uncertainty = new OptionSimple(""err<"", ""0\\.[0-9]+"", ""0.02"", ""Run until the standard error of the mean is below this fraction"", false);","final OptionSimple uncertainty=new OptionSimple(""err<"",""0\\.[0-9]+"",""0.02"",""Run until the standard error of the mean is below this fraction"",false);
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
22,protected ArrayList<Attributes.Attribute> attributes = null;,"protected ArrayList<Attributes.Attribute> attributes=null;
",0,6,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
23,private final Queue<Iterator<? extends E>> iteratorChain = new LinkedList<>();,"/** 
 * The chain of iterators 
 */
private final Queue<Iterator<? extends E>> iteratorChain=new LinkedList<>();
",0,1,7,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
"
24,"private static final Map<String, String[]> testData = new HashMap<>();","private static final Map<String,String[]> testData=new HashMap<>();
",0,3,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
25,@Multiline private static String transposeTest;,"/** 
 * define Transpose datafu.pig.util.TransposeTupleToBag(); data = LOAD 'input' using PigStorage(',') AS (testcase:INT,val1:INT,val2:INT,val3:INT); data2 = FOREACH data GENERATE testcase, Transpose(val1 .. val3) as transposed; describe data2; data3 = FOREACH data2 GENERATE testcase, transposed; STORE data3 INTO 'output';
 */
@Multiline private static String transposeTest;
",0,1,5,,"SimpleName(MarkerAnnotation-typeName, ),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
"
26,"private final static List<String> PREFIXES = Arrays.asList(""edge"", ""property"", ""value"");","private final static List<String> PREFIXES=Arrays.asList(""edge"",""property"",""value"");
",0,2,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
27,"private static final String os = System.getProperty(""os.name"")","private static final String os=System.getProperty(""os.name"").toLowerCase();
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
28,Class<? extends Collection<?>> collectionType;,"Class<? extends Collection<?>> collectionType;
",0,0,4,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
29,private final String[] log = new String[1000];,"private final String[] log=new String[1000];
",0,2,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
30,"private final ConcurrentHashMap<Class<?>,ConcurrentHashMap<ContextProperties,Context>> contextCache = new ConcurrentHashMap<>();","private final ConcurrentHashMap<Class<?>,ConcurrentHashMap<ContextProperties,Context>> contextCache=new ConcurrentHashMap<>();
",0,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
31,"private static CustomerIDPartitionResolver<Object, Object> customerIDPartitionResolver = null;","private static CustomerIDPartitionResolver<Object,Object> customerIDPartitionResolver=null;
",0,5,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
32,"public final static EnumSet<JndiScope> MODULE = EnumSet.of(JndiScope.global, JndiScope.app, JndiScope.module);","public final static EnumSet<JndiScope> MODULE=EnumSet.of(JndiScope.global,JndiScope.app,JndiScope.module);
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
33,"private Map<Priority, Map<String, Map<ExecutionType, TreeMap<Resource,","private Map<Priority,Map<String,Map<ExecutionType,TreeMap<Resource,ResourceRequestInfo>>>> remoteRequestsTable=new HashMap<>();
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
"
34,"private static Object[][] productData = {{new Integer(1), ""XYZSoap""}, {new Integer(2), ""ABCOil""}, {new Integer(3), ""PQRPen""}};","private static Object[][] productData={{new Integer(1),""XYZSoap""},{new Integer(2),""ABCOil""},{new Integer(3),""PQRPen""}};
",0,5,15,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
35,private final ArrayList<byte[]> writeBuffers = new ArrayList<byte[]>(1);,"private final ArrayList<byte[]> writeBuffers=new ArrayList<byte[]>(1);
",0,9,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
36,"private static final ImmutableMap<Type.PrimitiveType, Comparator<?>> COMPARATORS = ImmutableMap","private static final ImmutableMap<Type.PrimitiveType,Comparator<?>> COMPARATORS=ImmutableMap.<Type.PrimitiveType,Comparator<?>>builder().put(Types.BooleanType.get(),Comparator.naturalOrder()).put(Types.IntegerType.get(),Comparator.naturalOrder()).put(Types.LongType.get(),Comparator.naturalOrder()).put(Types.FloatType.get(),Comparator.naturalOrder()).put(Types.DoubleType.get(),Comparator.naturalOrder()).put(Types.DateType.get(),Comparator.naturalOrder()).put(Types.TimeType.get(),Comparator.naturalOrder()).put(Types.TimestampType.withZone(),Comparator.naturalOrder()).put(Types.TimestampType.withoutZone(),Comparator.naturalOrder()).put(Types.StringType.get(),Comparators.charSequences()).put(Types.UUIDType.get(),Comparator.naturalOrder()).put(Types.BinaryType.get(),Comparators.unsignedBytes()).build();
",0,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
37,"static final Map<Integer, double[]> data = new HashMap<>();","/** 
 */
static final Map<Integer,double[]> data=new HashMap<>();
",0,0,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
"
38,"private static final int[] PRIMES = {3, 5, 7, 13, 19, 31, 43, 61, 73, 89, 103, 109, 139, 151,","private static final int[] PRIMES={3,5,7,13,19,31,43,61,73,89,103,109,139,151,181,193,199,229,241,271,283,313,349,421,433,463,523,571,601,619,661,823,859,883,1021,1063,1093,1153,1231,1321,1429,1489,1621,1699,1789,1873,1951,2029,2131,2143,2311,2383,2593,2731,2803,3001,3121,3259,3391,3583,3673,3919,4093,4273,4423,4651,4801,5023,5281,5521,5743,5881,6301,6571,6871,7129,7489,7759,8089,8539,8863,9283,9721,10141,10531,11071,11551,12073,12613,13009,13759,14323,14869,15649,16363,17029,17839,18541,19471,20233,21193,22159,23059,24181,25171,26263,27541,28753,30013,31321,32719,34213,35731,37309,38923,40639,42463,44281,46309,48313,50461,52711,55051,57529,60091,62299,65521,68281,71413,74611,77713,81373,84979,88663,92671,96739,100801,105529,109849,115021,120079,125509,131011,136861,142873,149251,155863,162751,169891,177433,185071,193381,202129,211063,220021,229981,240349,250969,262111,273643,285841,298411,311713,325543,339841,355009,370663,386989,404269,422113,440809,460081,480463,501829,524221,547399,571603,596929,623353,651019,679909,709741,741343,774133,808441,844201,881539,920743,961531,1004119,1048573,1094923,1143283,1193911,1246963,1302181,1359733,1420039,1482853,1548541,1616899,1688413,1763431,1841293,1922773,2008081,2097133,2189989,2286883,2388163,2493853,2604013,2719669,2840041,2965603,3097123,3234241,3377191,3526933,3682363,3845983,4016041,4193803,4379719,4573873,4776223,4987891,5208523,5439223,5680153,5931313,6194191,6468463,6754879,7053331,7366069,7692343,8032639,8388451,8759953,9147661,9552733,9975193,10417291,10878619,11360203,11863153,12387841,12936529,13509343,14107801,14732413,15384673,16065559,16777141,17519893,18295633,19105483,19951231,20834689,21757291,22720591,23726449,24776953,25873963,27018853,28215619,29464579,30769093,32131711,33554011,35039911,36591211,38211163,39903121,41669479,43514521,45441199,47452879,49553941,51747991,54039079,56431513,58930021,61539091,64263571,67108669,70079959,73182409,76422793,79806229,83339383,87029053,90881083,94906249,99108043,103495879,108077731,112863013,117860053,123078019,128526943,134217439,140159911,146365159,152845393,159612601,166679173,174058849,181765093,189812341,198216103,206991601,216156043,225726379,235720159,246156271,257054491,268435009,280319203,292730833,305691181,319225021,333358513,348117151,363529759,379624279,396432481,413983771,432312511,451452613,471440161,492312523,514109251,536870839,560640001,585461743,611382451,638450569,666717199,696235363,727060069,759249643,792864871,827967631,864625033,902905501,942880663,984625531,1028218189,1073741719,1121280091,1170923713,1222764841,1276901371,1333434301,1392470281,1454120779,1518500173,1585729993,1655935399,1729249999,1805811253,1885761133,1969251079,2056437379,2147482951,Integer.MAX_VALUE};
",0,0,20,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
39,"private static final Property<Line> LINE = Property.immutable(""line"");","/** 
 * Property used to attack line metadata to the elements. 
 */
private static final Property<Line> LINE=Property.immutable(""line"");
",0,0,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
40,"private static Map<String, Consumer<String[]>> cmds;","private static Map<String,Consumer<String[]>> cmds;
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
41,"protected static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,","/** 
 * The first 512 prime numbers. <p> It contains all primes smaller or equal to the cubic square of Integer.MAX_VALUE. As a result, <code>int</code> numbers which are not reduced by those primes are guaranteed to be either prime or semi prime.
 */
protected static final int[] PRIMES={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671};
",0,0,198,,"Modifier(),
Modifier(),
Modifier(),
PrimitiveType(ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
"
42,"private static final Properties truffleProperties = Properties.getDefault().getProperties(""debugger.options.Truffle"");","private static final Properties truffleProperties=Properties.getDefault().getProperties(""debugger.options.Truffle"");
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
43,private static final List<Parser> PARSERS = Arrays.<Parser>asList(,"private static final List<Parser> PARSERS=Arrays.<Parser>asList(new CliParser());
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
44,"private Image captcha = new Image(""captcha"", captchaImageResource);","private Image captcha=new Image(""captcha"",captchaImageResource);
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
45,private static final int zigZag[] =,"private static final int zigZag[]={0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63};
",0,3,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
"
46,private final List<ParseContext> stack = Lists.newArrayListWithExpectedSize(5);,"private final List<ParseContext> stack=Lists.newArrayListWithExpectedSize(5);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
47,"private final Pair<T, byte[]> dataTypePair;","private final Pair<T,byte[]> dataTypePair;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
48,"private static final String[] ROMAN = {""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""};","private static final String[] ROMAN={""M"",""CM"",""D"",""CD"",""C"",""XC"",""L"",""XL"",""X"",""IX"",""V"",""IV"",""I""};
",0,0,19,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
49,"private static final CartesianCS LEGACY = new DefaultCartesianCS(singletonMap(NAME_KEY, ""Legacy geocentric""),","/** 
 * A three-dimensional Cartesian CS with the legacy set of geocentric axes. OGC 01-009 defines the default geocentric axes as: {@preformat wktAXIS[“X”,OTHER], AXIS[“Y”,EAST], AXIS[“Z”,NORTH]}where the  {@code OTHER} axis is toward prime meridian. Those directions and axis names are different thanthe ISO 19111's ones (ISO names are ""Geocentric X"", ""Geocentric Y"" and ""Geocentric Z""). This constant uses the invalid names and directions for WKT 1 parsing/formatting purposes.
 */
private static final CartesianCS LEGACY=new DefaultCartesianCS(singletonMap(NAME_KEY,""Legacy geocentric""),new DefaultCoordinateSystemAxis(singletonMap(NAME_KEY,""X""),""X"",AxisDirection.OTHER,Units.METRE),new DefaultCoordinateSystemAxis(singletonMap(NAME_KEY,""Y""),""Y"",AxisDirection.EAST,Units.METRE),new DefaultCoordinateSystemAxis(singletonMap(NAME_KEY,""Z""),""Z"",AxisDirection.NORTH,Units.METRE));
",0,0,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
50,"private static final char[] PREFIXES = {'E','G','M','P','T','Y','Z','a','c','d','f','h','k','m','n','p','y','z','µ','μ','㍲'};","/** 
 * The SI prefixes in increasing order. The only two-letters prefix – “da” – is encoded using the JCK compatibility character “㍲”. The Greek letter μ is repeated twice: the U+00B5 character for micro sign (this is the character that Apache SIS uses in unit symbols) and the U+03BC character for the Greek small letter “mu” (the later is the character that appears when decomposing JCK compatibility characters with  {@link java.text.Normalizer}). Both characters have same appearance but different values. <p>For each prefix at index <var>i</var>, the multiplication factor is given by 10 raised to power  {@code POWERS[i]}.</p>
 */
private static final char[] PREFIXES={'E','G','M','P','T','Y','Z','a','c','d','f','h','k','m','n','p','y','z','µ','μ','㍲'};
",0,0,27,,"Modifier(),
Modifier(),
Modifier(),
PrimitiveType(ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
CharacterLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
"
51,private long lastInsert = System.currentTimeMillis();,"private long lastInsert=System.currentTimeMillis();
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
52,private final Predicate<String> fetchRequest = Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE::equalsIgnoreCase;,"private final Predicate<String> fetchRequest=Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE::equalsIgnoreCase;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(ExpressionMethodReference-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ExpressionMethodReference-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
53,"private static Object[][] employeeData = {{""John Jones"", ""E0001"", Boolean.valueOf(false)},","private static Object[][] employeeData={{""John Jones"",""E0001"",Boolean.valueOf(false)},{""Mary Smith"",""E0002"",Boolean.valueOf(true)},{""Jane Doe"",""E0003"",Boolean.valueOf(false)},{""Al Smith"",""E0004"",Boolean.valueOf(true)},{""John Smith"",""E0005"",Boolean.valueOf(false)}};
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
54,"protected static Object[][] orderDetailsData = {{new Integer(1), new Integer(1), new Float(1.1)},","protected static Object[][] orderDetailsData={{new Integer(1),new Integer(1),new Float(1.1)},{new Integer(1),new Integer(2),new Float(1.2)},{new Integer(2),new Integer(1),new Float(2.1)},{new Integer(2),new Integer(2),new Float(2.2)}};
",0,0,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
55,"private static Object[][] songData = {{null, ""ABCD"", new Integer(1)},","private static Object[][] songData={{null,""ABCD"",new Integer(1)},{new Integer(20),""Lamb"",new Integer(1)},{new Integer(30),""La ra ra"",new Integer(2)}};
",0,0,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
56,private int group = -1;,"/** 
 * The capturing group that this Group is bound to. 
 */
private int group=-1;
",0,0,4,,"Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, ),
"
57,private int[] palette = null;,"private int[] palette=null;
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
58,"public static final QName ERROR = new QName(NS, ""error"");","public static final QName ERROR=new QName(NS,""error"");
",1,1238,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
59,"private static final Map<String, Provider.Service> services = new HashMap<String, Provider.Service>(512);","private static final Map<String,Provider.Service> services=new HashMap<String,Provider.Service>(512);
",1,115,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
60,"final OptionSimple count = new OptionSimple(""n="", ""[0-9]+[bmk]?"", null, ""Number of operations to perform"", true);","final OptionSimple count=new OptionSimple(""n="",""[0-9]+[bmk]?"",null,""Number of operations to perform"",true);
",1,8,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
61,public final TiffElement.DataElement[] tiles;,"public final TiffElement.DataElement[] tiles;
",1,1,5,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
62,protected final List<L> locations = new ArrayList<L>(3);,"/** 
 * The locations of the replicas of the block. 
 */
protected final List<L> locations=new ArrayList<L>(3);
",1,1,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
63,"public int a = 1, b = 2;","public int a=1, b=2;
",1,1,6,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
64,private final RankedList<Binding<T>>.Itr itr = bindings.iterator();,"private final RankedList<Binding<T>>.Itr itr=bindings.iterator();
",1,3,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, QualifiedType-qualifier, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, QualifiedType-qualifier, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, QualifiedType-qualifier, FieldDeclaration-type, ),
SimpleName(QualifiedType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
65,"private final Map<Dependency.Type,List<Dependency>> dependencies = new EnumMap<>(Dependency.Type.class);","/** 
 * Bower dependencies - maps the type of dependency to the list of dependencies of this type. 
 */
private final Map<Dependency.Type,List<Dependency>> dependencies=new EnumMap<>(Dependency.Type.class);
",1,1,9,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
QualifiedName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
66,"private Map<String, String[]> metadata = null;","/** 
 * A map of all metadata attributes.
 */
private Map<String,String[]> metadata=null;
",1,1,7,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
NullLiteral(VariableDeclarationFragment-initializer, ),
"
67,public final TiffElement.DataElement tiles[];,"public final TiffElement.DataElement tiles[];
",1,1,5,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
"
68,"public static final int CATALOG  = CatalogEntry.addEntryType(""CATALOG"", 1);","/** 
 * The CATALOG Catalog Entry type. 
 */
public static final int CATALOG=CatalogEntry.addEntryType(""CATALOG"",1);
",1,1,9,,"Modifier(),
Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
69,private char[] message = new char[500];,"private char[] message=new char[500];
",2,162,7,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
70,static private final int cliVersion = Version.cliVersion;,"static private final int cliVersion=Version.cliVersion;
",2,3,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
71,private final String tokenizedPattern[];,"private final String tokenizedPattern[];
",2,4,5,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
"
72,private SortedSet rights = new TreeSet(new RightComparator());,"/** 
 * The set of Rights contained in this instance.  This is a TreeSet so that we can create the string value more consistently.
 */
private SortedSet rights=new TreeSet(new RightComparator());
",2,2,5,,"Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
73,"private static final Option P1 = Option.withoutArgument(Option.NO_SHORT_NAME, ""p1"");","private static final Option P1=Option.withoutArgument(Option.NO_SHORT_NAME,""p1"");
",3,3,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
74,"public static final AppliesToFilter GETTERS = new OrAppliesToFilter( GET, IS, HAS );","public static final AppliesToFilter GETTERS=new OrAppliesToFilter(GET,IS,HAS);
",4,4,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
75,public static boolean status = false;,"/** 
 * the field should be modified by jvmti agent to determine test result. 
 */
public static boolean status=false;
",9,9,5,,"Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
BooleanLiteral(VariableDeclarationFragment-initializer, ),
"
