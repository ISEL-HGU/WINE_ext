137000,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/UserTest.java,64,,"        String oldPw = getHelper().getProperty(""javax.jcr.tck.superuser.pwd"");"
137001,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/AddMoveTest.java,74,,"        Node fooNode = session.getNode(""/foo"");"
137002,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/CachingHierarchyManagerTest.java,92,,"        Path path = toPath(""/a/b"");"
137003,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/CachingHierarchyManagerTest.java,148,,"        assertEquals(toPath(""/a/b[2]""), path);"
137004,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemoveMoveTest.java,36,,"        session.move(testRoot + ""/A/B"", testRoot + ""/C/B"");"
137005,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemoveMoveTest.java,36,,"        session.move(testRoot + ""/A/B"", testRoot + ""/C/B"");"
137006,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemoveMoveTest.java,43,,"            fail(""must not throw exception"");"
137007,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemoveMoveTest.java,49,,"        session.move(testRoot + ""/C"", testRoot + ""/A/C"");"
137008,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemovePropertyTest.java,31,,"        n.setProperty(propertyName1, ""foo"");"
137009,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemovePropertyTest.java,32,,"        session.getNode(testRoot).getNode(nodeName1).setProperty(propertyName2, ""bar"");"
137010,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentAddRemovePropertyTest.java,37,,"            fail(""must not throw InvalidItemStateException"");"
137011,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,158,,"            attrs.addAttribute(Name.NS_SV_URI, ""name"", ""sv:name"", ""CDATA"", name);"
137012,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,158,,"            attrs.addAttribute(Name.NS_SV_URI, ""name"", ""sv:name"", ""CDATA"", name);"
137013,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,158,,"            attrs.addAttribute(Name.NS_SV_URI, ""name"", ""sv:name"", ""CDATA"", name);"
137014,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,165,,"            handler.startElement(Name.NS_SV_URI, ""property"", ""sv:property"", attrs);"
137015,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,165,,"            handler.startElement(Name.NS_SV_URI, ""property"", ""sv:property"", attrs);"
137016,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,166,,"            handler.startElement(Name.NS_SV_URI, ""value"", ""sv:value"", EMPTY_ATTRS);"
137017,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentImportTest.java,166,,"            handler.startElement(Name.NS_SV_URI, ""value"", ""sv:value"", EMPTY_ATTRS);"
137018,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentModificationWithSNSTest.java,43,,"            fail(""must not throw InvalidItemStateException"");"
137019,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningTest.java,49,,"                    Node n = test.addNode(""test"" + i);"
137020,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningWithTransactionsTest.java,82,,"                        final String nodeName = ""test"" + i;"
137021,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ConcurrentVersioningWithTransactionsTest.java,94,,"                            throw new RepositoryException(threadName + "", i="" + i + "":"" + e.getClass().getName(), e);"
137022,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/LockTest.java,80,,"                                    log.println(""Thread"" + threadNumber"
137023,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/LockTest.java,121,,"        counter.setProperty(""value"", 0);"
137024,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/MoveTest.java,38,,"        if (session1.itemExists(""/foo"")) {"
137025,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/MoveTest.java,46,,"        assertTrue(session1.itemExists(""/libs/foo/install""));"
137026,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NPEandCMETest.java,45,,"        session.getRootNode().addNode(""test"");"
137027,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NodeImplTest.java,176,,"        n.addMixin(""mix:title"");"
137028,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NodeImplTest.java,178,,"        Property p = n.setProperty(""jcr:title"", 123);"
137029,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/NodeImplTest.java,272,,"        nodeP1.addMixin(""mix:referenceable"");"
137030,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ReferencesTest.java,59,,"        getTestRootNode(session1).getNode(""C"").setProperty(""ref to B"", bses1);"
137031,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ReferencesTest.java,95,,"        getTestRootNode(session2).getNode(""C"").setProperty(""ref"", bses2);"
137032,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RemoveAddNodeWithUUIDTest.java,38,,"            test.setProperty(""prop"", 1);"
137033,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/ReplacePropertyWhileOthersReadTest.java,75,,"        final Property prop = test.setProperty(""prop"", getRandomValue());"
137034,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RepositoryCopierTest.java,105,,"            registry.registerNamespace(""test"", ""http://www.example.org/"");"
137035,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RepositoryCopierTest.java,109,,"            template.setName(""test:unstructured"");"
137036,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RepositoryCopierTest.java,124,,"                properties.setProperty(""binary"", binary);"
137037,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RepositoryCopierTest.java,132,,"            properties.setProperty(""reference"", referenceable);"
137038,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RetentionRegistryImplTest.java,124,,"            assertTrue(re.hasEffectiveHold(resolver.getQPath(childNPath + ""/somechild""), false));"
137039,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/RetentionRegistryImplTest.java,205,,"            assertFalse(re.hasEffectiveHold(resolver.getQPath(childN3Path + ""/child""), false));"
137040,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/UserPerWorkspaceSecurityManagerTest.java,120,,"            u = ((JackrabbitSession) superuser).getUserManager().createUser(""testUser"", ""testUser"");"
137041,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,126,,"            Node node = session.getRootNode().addNode(""testNode"");"
137042,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,198,,"            fail(""New node not visible after save()"");"
137043,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,218,,"            fail(""Committed node not visible in this session"");"
137044,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,698,,"            assertTrue(""Node.getReferences() must reflect references that have "" +"
137045,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,699,,"                    ""been saved but not yet committed"", target.getReferences().hasNext());"
137046,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,780,,"            n.setProperty(propertyName1, ""foo"");"
137047,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,836,,"            assertFalse(""Node not locked in session 1"", n.isLocked());"
137048,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,837,,"            assertFalse(""Node not locked in session 2"", nOther.isLocked());"
137049,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,845,,"            assertTrue(""Node locked in session 1"", n.isLocked());"
137050,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,853,,"            assertTrue(""Node locked in session 2"", nOther.isLocked());"
137051,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,933,,"        assertTrue(""Node not locked"", n.isLocked());"
137052,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,939,,"        assertTrue(""session must hold lock token"", containsLockToken(superuser, lockToken));"
137053,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,946,,"        assertTrue(""freshly obtained lock token must either be null or the same as the one returned earlier"","
137054,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,1567,,"        check(v1_1, phase, ""jcr:rootVersion"", 0);"
137055,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,1583,,"        check(v1_2, phase, ""1.0"", 0);"
137056,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,1633,,"        check(v2_3, phase, ""1.1"", 0);"
137057,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java,1662,,"        check(v1_3, phase, ""1.0.0"", 0);"
137058,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/ClusterRecordTest.java,189,,"        ntd.setName(NameFactoryImpl.getInstance().create("""", ""test""));"
137059,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/DbClusterTest.java,58,,"        Session s1 = rep1.login(new SimpleCredentials(""admin"", ""admin"".toCharArray()));"
137060,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/cluster/FailUpdateOnJournalExceptionTest.java,61,,"        Session s = repo.login(new SimpleCredentials(""admin"", ""admin"".toCharArray()));"
137061,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/RepositoryConfigTest.java,230,,"        System.setProperty(""cluster.syncDelay"", Long.toString(syncDelay));"
137062,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,118,,"        assertEquals(""admin"", options.getProperty(""adminId""));"
137063,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,311,,"            ""    <Security appName=\""Jackrabbit\"">"" +"
137064,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,314,,"            ""    </Security>"";"
137065,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,318,,"            ""        <SecurityManager class=\""org.apache.jackrabbit.core.DefaultSecurityManager\"" workspaceName=\""security\"">"" +"
137066,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,319,,"            ""        </SecurityManager>"" +"
137067,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,320,,"            ""        <AccessManager class=\""org.apache.jackrabbit.core.security.DefaultAccessManager\"">"" +"
137068,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,321,,"            ""        </AccessManager>"" +"
137069,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,322,,"            ""        <LoginModule class=\""org.apache.jackrabbit.core.security.authentication.DefaultLoginModule\"">"" +"
137070,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,323,,"            ""           <param name=\""anonymousId\"" value=\""anonymous\""/>"" +"
137071,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,324,,"            ""           <param name=\""adminId\"" value=\""admin\""/>"" +"
137072,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,326,,"            ""        </LoginModule>\n"" +"
137073,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,336,,"            ""           </UserManager>"" +"
137074,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/SecurityConfigTest.java,337,,"            ""           <UserIdClass class=\""org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal\""/>"" +"
137075,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/WorkspaceConfigTest.java,149,,"            "" <Workspace><Import>\n"" +"
137076,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/config/WorkspaceConfigTest.java,152,,"                    "" </Import></Workspace>"";"
137077,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ConsistencyCheckerImplTest.java,91,,"        ConsistencyCheckerImpl checker = new ConsistencyCheckerImpl(pm, null, null, master.createUpdateChannel(""default""));"
137078,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ConsistencyCheckerImplTest.java,116,,"        assertNotNull(""Cluster node did not receive update event"", listener.changes);"
137079,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ConsistencyCheckerImplTest.java,141,,"        assertFalse(""Double check removed valid error"", checker.getReport().getItems().isEmpty());"
137080,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ConsistencyCheckerImplTest.java,144,,"        bundle1.addChildNodeEntry(nameFactory.create("""", ""test""), bundle2.getId());"
137081,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ConsistencyCheckerImplTest.java,148,,"        assertTrue(""Double check didn't remove invalid error"", checker.getReport().getItems().isEmpty());"
137082,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/CopyValueTest.java,63,,"        n.setProperty(""data"", vf.createBinary(new ByteArrayInputStream(data)));"
137083,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ExportImportTest.java,68,,"            Node test = root.addNode(""testText"");"
137084,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ExportImportTest.java,76,,"            Node test2 = root.addNode(""testText2"");"
137085,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ExportImportTest.java,77,,"            Node test3 = root.addNode(""testText3"");"
137086,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ExportImportTest.java,118,,"            Node test = root.addNode(""testBinary"");"
137087,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ExportImportTest.java,129,,"            Node test2 = root.addNode(""testBinary2"");"
137088,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/ExportImportTest.java,130,,"            Node test3 = root.addNode(""testBinary3"");"
137089,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/GCSubtreeMoveTest.java,167,,"            sessionGarbageCollector = repository.login(new SimpleCredentials(""admin"", ""admin"".toCharArray()));"
137090,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/GarbageCollectorTest.java,147,,"        n.setProperty(""test"", b);"
137091,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,55,,"        fs.createFolder(""/folder"");"
137092,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,65,,"        createFile(""/folder/file"", sampleBytes);"
137093,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,76,,"        fs.createFolder(""/folder2/subfolder"");"
137094,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,77,,"        createFile(""/folder2/file2"", sampleBytes);"
137095,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,82,,"        list = fs.list(""/folder2"");"
137096,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,85,,"        assertEquals(""file2"", list[0]);"
137097,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,141,,"        fs.createFolder(""/missing/subfolder"");"
137098,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java,142,,"        assertTrue(fs.exists(""/missing""));"
137099,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/id/NodeIdFactoryTest.java,46,,"        System.setProperty(NodeIdFactory.SEQUENTIAL_NODE_ID, ""true"");"
137100,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/ConcurrentQueryTest.java,87,,"                        Node n = testRootNode.addNode(""node"" + i);"
137101,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,41,,"        Node n1 = testRootNode.addNode(""node1"");"
137102,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,42,,"        Node n2 = testRootNode.addNode(""node2"");"
137103,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,43,,"        Node n3 = testRootNode.addNode(""node3"");"
137104,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,136,,"        Node file1 = addFile(testRootNode, ""file1.txt"", SAMPLE_CONTENT);"
137105,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,139,,"        checkResultWithRetries(stmt, ""jcr:content"", new Node[]{file1});"
137106,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,147,,"        n1.setProperty(""text"", ""let's go"");"
137107,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/GQLTest.java,267,,"        n1.setProperty(""jcr:title"", ""a"");"
137108,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/ItemSequenceTest.java,84,,"        nodes.addNode(""key"", NodeType.NT_UNSTRUCTURED);"
137109,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/ItemSequenceTest.java,237,,"                    assertTrue(""Node "" + node + "" should have at least "" + minChildren + "" child nodes"","
137110,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/NodeImplTest.java,54,,"            node.setProperty(""test"", new Value[0], PropertyType.LONG);"
137111,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/SessionImplTest.java,69,,"        credentials.setAttribute(""test"", ""attribute"");"
137112,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/UtilsGetPathTest.java,61,,"        Mockito.when(mockedSession.getRootNode()).thenThrow(new AccessDeniedException(""access denied""));"
137113,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/UtilsGetPathTest.java,66,,"        Node result = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);"
137114,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/VersioningTest.java,129,,"        assertSuccessors(""1.2"", v11);"
137115,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/VersioningTest.java,151,,"        assertSuccessors(""1.2.1"", v120);"
137116,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/VersioningTest.java,184,,"                fail(""Version "" + version.getName()"
137117,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/benchmark/SimpleBench.java,63,,"        if (session.getRootNode().hasNode(""test"")) {"
137118,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/nodetype/MixinTest.java,55,,"        testRootNode.addMixin(""test:mixinNode_protectedchild"");"
137119,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/nodetype/xml/TestAll.java,238,,"        QNodeTypeDefinition def = getNodeType(""itemNodeType"");"
137120,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/nodetype/xml/TestAll.java,392,,"        QNodeTypeDefinition def = getNodeType(""propertyNodeType"");"
137121,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/nodetype/xml/TestAll.java,593,,"        QNodeTypeDefinition def = getNodeType(""childNodeType"");"
137122,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/observation/MixinTest.java,44,,"            testRootNode.getNode(nodeName1).setProperty(propertyName1, ""test"");"
137123,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/observation/VersionEventsTest.java,60,,"        assertTrue(""missing 'node added' event: "" + v.getPath(), paths.contains(v.getPath()));"
137124,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/observation/VersionEventsTest.java,126,,"        assertTrue(""missing 'node removed' event: "" + versionPath, paths.contains(versionPath));"
137125,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,69,,"        Node test = root.addNode(""test"");"
137126,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,70,,"        Node missing = test.addNode(""missing"");"
137127,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,71,,"        missing.addMixin(""mix:referenceable"");"
137128,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,122,,"            assertTrue(""Report should have reported broken nodes"", !report.getItems().isEmpty());"
137129,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,146,,"                .getProperty(""org.apache.jackrabbit.version.recovery"");"
137130,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,152,,"            test.addMixin(""mix:versionable"");"
137131,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,166,,"            destroyBundle(destroy, ""version"");"
137132,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/AutoFixCorruptNode.java,184,,"            System.setProperty(""org.apache.jackrabbit.version.recovery"", ""true"");"
137133,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/util/BundleBindingTest.java,138,,"                new InternalValue[] { InternalValue.create(""test"") });"
137134,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/persistence/util/BundleBindingTest.java,299,,"        bundle.addChildNodeEntry(factory.create(""ns1"", ""test""), NodeId.randomId());"
137135,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java,42,,"        executeXPathQuery(base + "" = 1]"", new Node[]{testRootNode});"
137136,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java,44,,"        executeXPathQuery(base + "" = 3]"", new Node[]{testRootNode});"
137137,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java,109,,"        level1.setProperty(propertyName1, ""foo"");"
137138,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java,167,,"        executeXPathQuery(base + nodeName1 + ""/@"" + propertyName1 + "", 'lazy')"" +"
137139,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ChildAxisQueryTest.java,168,,"                "" and "" + nodeName1 + ""/"" + nodeName2 + ""/"" + nodeName3 + ""/@"" + propertyName2 + "" = 2]"","
137140,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/DerefTest.java,76,,"        andrew.setProperty(""worksfor"", sun);"
137141,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,50,,"                ""jackrabbit"");"
137142,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,115,,"        n.setProperty(""text"", text);"
137143,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,116,,"        n.setProperty(""other"", ""foo"");"
137144,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,116,,"        n.setProperty(""other"", ""foo"");"
137145,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,123,,"        String ex = rows.nextRow().getValue(""rep:excerpt(text)"").getString();"
137146,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,124,,"        assertEquals(""Expected "" + excerpt + "", but got "", excerpt, ex);"
137147,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,124,,"        assertEquals(""Expected "" + excerpt + "", but got "", excerpt, ex);"
137148,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ExcerptTest.java,144,,"        checkExcerpt(""one two three four"","
137149,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FnNameQueryTest.java,37,,"        String base = testPath + ""/*[@"" + propertyName1;"
137150,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FnNameQueryTest.java,45,,"                ""' or fn:name() = '"" + nodeName2 + ""')]"", new Node[]{n1, n2});"
137151,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,38,,"        Node foo = testRootNode.addNode(""foo"");"
137152,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,39,,"        foo.setProperty(""mytext"", new String[]{""the quick brown fox jumps over the lazy dog.""});"
137153,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,39,,"        foo.setProperty(""mytext"", new String[]{""the quick brown fox jumps over the lazy dog.""});"
137154,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,43,,"        String sql = ""SELECT * FROM nt:unstructured"""
137155,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,66,,"        Node n = testRootNode.addNode(""node1"");"
137156,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,67,,"        n.setProperty(""title"", new String[]{""test text""});"
137157,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,67,,"        n.setProperty(""title"", new String[]{""test text""});"
137158,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,70,,"        n = testRootNode.addNode(""node2"");"
137159,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,71,,"        n.setProperty(""title"", new String[]{""other text""});"
137160,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,77,,"                + "" WHERE \""jcr:path\"" LIKE '"" + testRoot + ""/%"""
137161,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,143,,"        n.setProperty(""title"", new String[]{""tEst text""});"
137162,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,144,,"        n.setProperty(""mytext"", new String[]{""The quick brown Fox jumps over the lazy dog.""});"
137163,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/FulltextQueryTest.java,167,,"        n.setProperty(""mytext"", new String[]{""text text""});"
137164,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/JoinTest.java,35,,"        node = testRootNode.addNode(""jointest"", ""nt:unstructured"");"
137165,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/JoinTest.java,39,,"        n1a.setProperty(""type"", ""parent"");"
137166,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/JoinTest.java,44,,"        n1b.setProperty(""testJoinWithOR4"", ""testJoinWithOR4"");"
137167,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/JoinTest.java,116,,"                ""SELECT a.* FROM [nt:unstructured] AS a"");"
137168,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/JoinTest.java,118,,"        join.append(""  WHERE  "");"
137169,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,38,,"        Node n1 = testRootNode.addNode(""node1"");"
137170,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,39,,"        Node n2 = testRootNode.addNode(""node2"");"
137171,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,40,,"        Node n3 = testRootNode.addNode(""node3"");"
137172,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,42,,"        n1.setProperty(""text"", ""aaa"");"
137173,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,42,,"        n1.setProperty(""text"", ""aaa"");"
137174,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,166,,"        n2.addNode(""a"").addNode(""b"").addNode(""c"").setProperty(""prop"", ""a"");"
137175,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/OrderByTest.java,183,,"        n1.addNode(""child"").setProperty(""prop"", ""a"");"
137176,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ParentNodeTest.java,41,,"        base.addNode(""child"").setProperty(""foo2"", ""bar2"");"
137177,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ParentNodeTest.java,51,,"        assertEquals(""Wrong size of NodeIterator in result"","
137178,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/QueryResultTest.java,37,,"            testRootNode.addNode(""node"" + i).setProperty(propertyName1, i);"
137179,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/QueryResultTest.java,45,,"            String stmt = testPath + ""/*[@"" + propertyName1 + "" < 1000]"";"
137180,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/QueryResultTest.java,45,,"            String stmt = testPath + ""/*[@"" + propertyName1 + "" < 1000]"";"
137181,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/QueryResultTest.java,47,,"            assertEquals(""Wrong size of NodeIterator in result"","
137182,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/QueryResultTest.java,121,,"                fail(""must throw NoSuchElementException"");"
137183,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/QueryResultTest.java,165,,"            assertEquals(""Wrong position"", 0, it.getPosition());"
137184,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,56,,"        Node n1 = testRootNode.addNode(""node1"");"
137185,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,57,,"        Node n2 = testRootNode.addNode(""node2"");"
137186,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,58,,"        Node n3 = testRootNode.addNode(""node3"");"
137187,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,60,,"        n1.setProperty(""text"", ""aaa"");"
137188,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,60,,"        n1.setProperty(""text"", ""aaa"");"
137189,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,61,,"        n1.setProperty(""value"", 3);"
137190,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,72,,"        QueryResult qr = executeSQL2Query(""SELECT * FROM [nt:base] WHERE ISCHILDNODE(["""
137191,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OrderByTest.java,216,,"        Node n1 = testRootNode.addNode(""node1"", ""nt:unstructured"");"
137192,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OuterJoinTest.java,47,,"        if (!manager.hasNodeType(""test:SamplePage"")) {"
137193,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2OuterJoinTest.java,60,,"        n1.setProperty(""n1prop1"", ""page1"");"
137194,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2PathEscapingTest.java,104,,"        Source source1 = qomf.selector(NodeType.NT_BASE, ""selector"");"
137195,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SQL2TooManyClausesTest.java,43,,"        a = testRootNode.addNode(""teacher"", ""nt:unstructured"");"
137196,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SelectClauseTest.java,31,,"        n.setProperty(""myvalue"", ""foo"");"
137197,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SelectClauseTest.java,31,,"        n.setProperty(""myvalue"", ""foo"");"
137198,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SelectClauseTest.java,39,,"        String sql = ""SELECT myvalue FROM "" + ntBase + "" WHERE "" +"
137199,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ShareableNodeTest.java,42,,"        String stmt = testPath + ""/"" + nodeName1 + ""/*[@"" + propertyName1 + ""='value']"";"
137200,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ShareableNodeTest.java,42,,"        String stmt = testPath + ""/"" + nodeName1 + ""/*[@"" + propertyName1 + ""='value']"";"
137201,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ShareableNodeTest.java,44,,"        assertEquals(""wrong result size"", 1, nodes.getSize());"
137202,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ShareableNodeTest.java,46,,"        assertTrue(""wrong node"", s.isSame(nodes.nextNode()));"
137203,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ShareableNodeTest.java,54,,"        stmt = testPath + ""//*[@"" + propertyName1 + ""='value']"";"
137204,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,34,,"        Node foo = testRootNode.addNode(""foo"");"
137205,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,35,,"        foo.setProperty(""bla"", new String[]{""bla""});"
137206,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,56,,"                "" WHERE jcr:path LIKE '"" + testRoot + ""/%'"""
137207,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,106,,"        String sql = ""SELECT * FROM nt:base WHERE jcr:path LIKE '"" + testRoot + ""/%' AND birth > TIMESTAMP '1976-01-01T00:00:00.000+01:00'"";"
137208,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,118,,"        Node n = testRootNode.addNode(""node1"");"
137209,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,119,,"        n.setProperty(""value"", new Value[]{superuser.getValueFactory().createValue(1.9928375d)});"
137210,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,120,,"        n = testRootNode.addNode(""node2"");"
137211,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,122,,"        n = testRootNode.addNode(""node3"");"
137212,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,338,,"        n.setProperty(""value"", new String[]{""bar""});"
137213,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,353,,"        foo.setProperty(""mytext"", ""the quick brown fox jumps over the lazy dog."");"
137214,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,355,,"        bar.setProperty(""text"", ""the quick brown fox jumps over the lazy dog."");"
137215,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,370,,"        xpath = ""/jcr:root"" + testRoot + ""/*[@jcr:primaryType='nt:unstructured' and fn:not(@mytext)]"";"
137216,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SimpleQueryTest.java,466,,"                ""and jcr:path LIKE '"" + testRoot + ""/%'"";"
137217,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SkipDeletedNodesTest.java,61,,"        Node n1 = testRootNode.addNode(""node1"");"
137218,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SkipDeletedNodesTest.java,62,,"        testRootNode.addNode(""node2"");"
137219,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SkipDeletedNodesTest.java,63,,"        testRootNode.addNode(""node3"");"
137220,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SkipDeletedNodesTest.java,75,,"        log.println(""Result nodes:"");"
137221,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SkipDeletedNodesTest.java,78,,"            assertEquals(""Wrong value for getPosition()."", count++, it.getPosition());"
137222,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/SkipDeletedNodesTest.java,83,,"                log.println(""Invalid: <deleted>"");"
137223,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,39,,"        check(new String[]{""foo"", ""Foo"", ""fOO"", ""FOO"", ""fooBar"", ""fo"", ""fooo""},"
137224,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,39,,"        check(new String[]{""foo"", ""Foo"", ""fOO"", ""FOO"", ""fooBar"", ""fo"", ""fooo""},"
137225,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,39,,"        check(new String[]{""foo"", ""Foo"", ""fOO"", ""FOO"", ""fooBar"", ""fo"", ""fooo""},"
137226,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,39,,"        check(new String[]{""foo"", ""Foo"", ""fOO"", ""FOO"", ""fooBar"", ""fo"", ""fooo""},"
137227,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,39,,"        check(new String[]{""foo"", ""Foo"", ""fOO"", ""FOO"", ""fooBar"", ""fo"", ""fooo""},"
137228,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,49,,"        check(new String[]{""foo"", ""FOO"", ""FoO"", ""fOo"", ""FON"", ""fon"", ""fo"", ""FO""},"
137229,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,49,,"        check(new String[]{""foo"", ""FOO"", ""FoO"", ""fOo"", ""FON"", ""fon"", ""fo"", ""FO""},"
137230,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,49,,"        check(new String[]{""foo"", ""FOO"", ""FoO"", ""fOo"", ""FON"", ""fon"", ""fo"", ""FO""},"
137231,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/UpperLowerCaseQueryTest.java,100,,"        check(new String[]{""fooo"", ""FOoo"", ""Fop"", ""fOpo"", ""FOP"", ""fOo "", ""fp"", ""G""},"
137232,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/XPathAxisTest.java,67,,"        String xpath = ""/jcr:root"" + testRoot + ""/*"";"
137233,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingAggregateTest.java,50,,"        Writer writer = new OutputStreamWriter(out, ""UTF-8"");"
137234,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingAggregateTest.java,55,,"        Node resource = file.addNode(""jcr:content"", ""nt:resource"");"
137235,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingAggregateTest.java,56,,"        resource.setProperty(""jcr:lastModified"", Calendar.getInstance());"
137236,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingAggregateTest.java,59,,"        resource.setProperty(""jcr:data"", new ByteArrayInputStream(out.toByteArray()));"
137237,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,39,,"        node1.setProperty(""rule"", ""regexp"");"
137238,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,40,,"        node1.setProperty(""Text"", ""foo"");"
137239,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,48,,"        String stmt = ""/jcr:root"" + testRootNode.getPath() +"
137240,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,56,,"        node1.setProperty(""text"", TEXT);"
137241,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,96,,"        node.setProperty(""rule"", ""excerpt"");"
137242,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,97,,"        node.setProperty(""title"", ""Apache Jackrabbit"");"
137243,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,105,,"        assertTrue(""No results returned"", rows.hasNext());"
137244,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,106,,"        Value excerpt = rows.nextRow().getValue(""rep:excerpt(.)"");"
137245,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,107,,"        assertNotNull(""No excerpt created"", excerpt);"
137246,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,108,,"        assertTrue(""Title must not be present in excerpt"","
137247,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/IndexingRuleTest.java,109,,"                excerpt.getString().indexOf(""Apache"") == -1);"
137248,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,88,,"        Writer writer = new OutputStreamWriter(out, ""UTF-8"");"
137249,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,89,,"        writer.write(""the quick brown fox jumps over the lazy dog."");"
137250,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,92,,"        Node folderRoot = testRootNode.addNode(""myFolder"", ""nt:folder"");"
137251,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,113,,"        Node resource = file.addNode(""jcr:content"", ""nt:resource"");"
137252,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,113,,"        Node resource = file.addNode(""jcr:content"", ""nt:resource"");"
137253,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,114,,"        resource.setProperty(""jcr:lastModified"", Calendar.getInstance());"
137254,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,115,,"        resource.setProperty(""jcr:encoding"", ""UTF-8"");"
137255,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,116,,"        resource.setProperty(""jcr:mimeType"", ""text/plain"");"
137256,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,116,,"        resource.setProperty(""jcr:mimeType"", ""text/plain"");"
137257,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,117,,"        resource.setProperty(""jcr:data"", session.getValueFactory()"
137258,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest.java,285,,"        String sqlParent = sqlBase + "" AND ISCHILDNODE(["" + testRoot + ""])"";"
137259,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SQL2IndexingAggregateTest2.java,68,,"        Writer writer = new OutputStreamWriter(out, ""UTF-8"");"
137260,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SearchIndexConsistencyCheckTest.java,57,,"        Node foo = testRootNode.addNode(""foo"");"
137261,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SearchIndexConsistencyCheckTest.java,68,,"        assertEquals(""Expected 1 index consistency error"", 1, errors.size());"
137262,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/lucene/SearchIndexConsistencyCheckTest.java,75,,"        assertTrue(""Index was not repaired properly"", searchIndexContainsNode(searchIndex, fooId));"
137263,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/DefaultLoginModuleTest.java,73,,"    private SimpleCredentials simpleCredentials = new SimpleCredentials(""admin"", ""admin"".toCharArray());"
137264,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/CompatTokenProviderTest.java,97,,"        privateAttributes.put("".token_exp"", ""value"");"
137265,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedAuthenticationCompatTest.java,145,,"        tokenNode.setProperty(TokenBasedAuthentication.TOKEN_ATTRIBUTE +"".any"", ""correct"");"
137266,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedAuthenticationCompatTest.java,145,,"        tokenNode.setProperty(TokenBasedAuthentication.TOKEN_ATTRIBUTE +"".any"", ""correct"");"
137267,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedAuthenticationCompatTest.java,167,,"        tokenNode.setProperty(""informative"",""value"");"
137268,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedAuthenticationTest.java,67,,"        sc.setAttribute(TokenBasedAuthentication.TOKEN_ATTRIBUTE+"".any"", ""correct"");"
137269,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedAuthenticationTest.java,68,,"        sc.setAttribute(""informative"", ""value"");"
137270,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedLoginTest.java,106,,"        creds.setAttribute(TOKEN_ATTRIBUTE + "".any"", ""any"");"
137271,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenBasedLoginTest.java,108,,"        creds.setAttribute(""attr"", ""attr"");"
137272,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authentication/token/TokenProviderTest.java,101,,"        privateAttributes.put("".token_exp"", ""value"");"
137273,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/AbstractNodeTypeManagementTest.java,148,,"            fail(""Missing privilege jcr:nodeTypeManagement."");"
137274,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/AbstractNodeTypeManagementTest.java,181,,"            fail(""Missing write privilege."");"
137275,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/AbstractRepositoryOperationTest.java,227,,"            fail(""Node type registration should be denied."");"
137276,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/AbstractWriteTest.java,199,,"        assertTrue(superuser.itemExists(tmpl.getPath() + ""/rep:policy""));"
137277,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/AbstractWriteTest.java,644,,"            fail(""Move requires add and remove permission."");"
137278,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/CustomPrivilegeTest.java,68,,"        FileSystemResource resource = new FileSystemResource(fs, ""/privileges/custom_privileges.xml"");"
137279,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/CustomPrivilegeTest.java,79,,"            if (fs.exists(""/privileges"") && fs.isFolder(""/privileges"")) {"
137280,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/CustomPrivilegeTest.java,139,,"        Name test = nf.create(Name.NS_DEFAULT_URI, ""test"");"
137281,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/CustomPrivilegeTest.java,231,,"        newAggregates.put(resolver.getQName(""newAggregate""), createNameSet(resolver.getQName(""unknownPrivilege"")));"
137282,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/CustomPrivilegeTest.java,251,,"        newCustomPrivs.put(resolver.getQName(""new""), Collections.<Name>emptySet());"
137283,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,39,,"        GlobPattern gp = GlobPattern.create(""/a/b/c"");"
137284,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,43,,"        tests.put(""/a/b/c/d"", true);"
137285,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,44,,"        tests.put(""/a/b/c/d/e"", true);"
137286,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,45,,"        tests.put(""/a/b/c/d/e/f"", true);"
137287,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,49,,"        tests.put(""/b/c"", false);"
137288,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,81,,"        tests.put(""/a/b/c/e"", true);      // descendant with name segment 'e'"
137289,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,98,,"        tests.put(""/a/b/c/d/f/e/f"", false);"
137290,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,100,,"        tests.put(""/a/b/c/d/f/f"", false);"
137291,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,102,,"        tests.put(""/a/b/ce/"", false);"
137292,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,147,,"        tests.put(""/a/b/ce/f/g/h"", false);"
137293,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/GlobPatternTest.java,148,,"        tests.put(""/a/b/ce/d/e/f"", false);"
137294,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/PrivilegeBitsTest.java,97,,"                fail(""UnsupportedOperation expected"");"
137295,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/PrivilegeManagerImplTest.java,149,,"            fail(""Should throw AccessControlException"");"
137296,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/MoveTest.java,101,,"        String movedChildNPath = path + ""/movedNode"";"
137297,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/AuthorizableImplTest.java,318,,"            user.setProperty(""someProp"", v);"
137298,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/IndexNodeResolverTest.java,70,,"        Value vs = superuser.getValueFactory().createValue(""value ' with apostrophe"");"
137299,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/NodeCreationTest.java,99,,"        assertEquals(usersPath + ""/z/zz/z"", u.getNode().getPath());"
137300,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/NodeCreationTest.java,138,,"        m.put(""zzz"",    ""/z/zz/zzz"");"
137301,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/NodeCreationTest.java,202,,"        m.put(""z*rich"", ""/z/"" + zu + ""/"" + Text.escapeIllegalJcrChars(""z*rich""));"
137302,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/NodeCreationTest.java,220,,"        GroupImpl gr = (GroupImpl) uMgr.createGroup(new TestPrincipal(""z[x]""));"
137303,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/NodeResolverTest.java,163,,"                superuser.getValueFactory().createValue(""blub""),"
137304,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/NodeResolverTest.java,164,,"                superuser.getValueFactory().createValue(""blib"")"
137305,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/PasswordUtilityTest.java,124,,"        pwHash = PasswordUtility.buildPasswordHash(pw, ""md5"", 0, 5);"
137306,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImplTest.java,103,,"        u.setProperty(""Email"", new StringValue(""tu@security.test""));"
137307,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImplTest.java,137,,"        String sha1Hash = ""{"" +SecurityConstants.DEFAULT_DIGEST+ ""}"" + Text.digest(SecurityConstants.DEFAULT_DIGEST, ""abc"".getBytes());"
137308,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,201,,"        String xml = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" +"
137309,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,202,,"                ""<sv:node sv:name=\""t\"" xmlns:mix=\""http://www.jcp.org/jcr/mix/1.0\"" xmlns:nt=\""http://www.jcp.org/jcr/nt/1.0\"" xmlns:fn_old=\""http://www.w3.org/2004/10/xpath-functions\"" xmlns:fn=\""http://www.w3.org/2005/xpath-functions\"" xmlns:xs=\""http://www.w3.org/2001/XMLSchema\"" xmlns:sv=\""http://www.jcp.org/jcr/sv/1.0\"" xmlns:rep=\""internal\"" xmlns:jcr=\""http://www.jcp.org/jcr/1.0\"">"" +"
137310,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,203,,"                ""   <sv:property sv:name=\""jcr:primaryType\"" sv:type=\""Name\""><sv:value>rep:User</sv:value></sv:property>"" +"
137311,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,204,,"                ""   <sv:property sv:name=\""jcr:uuid\"" sv:type=\""String\""><sv:value>e358efa4-89f5-3062-b10d-d7316b65649e</sv:value></sv:property>"" +"
137312,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,205,,"                ""   <sv:property sv:name=\""rep:password\"" sv:type=\""String\""><sv:value>{sha1}8efd86fb78a56a5145ed7739dcb00c78581c5375</sv:value></sv:property>"" +"
137313,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,206,,"                ""   <sv:property sv:name=\""rep:principalName\"" sv:type=\""String\""><sv:value>t</sv:value></sv:property>"" +"
137314,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,208,,"                ""</sv:node>"";"
137315,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,249,,"                ""<sv:node sv:name=\""g\"" xmlns:mix=\""http://www.jcp.org/jcr/mix/1.0\"" xmlns:nt=\""http://www.jcp.org/jcr/nt/1.0\"" xmlns:fn_old=\""http://www.w3.org/2004/10/xpath-functions\"" xmlns:fn=\""http://www.w3.org/2005/xpath-functions\"" xmlns:xs=\""http://www.w3.org/2001/XMLSchema\"" xmlns:sv=\""http://www.jcp.org/jcr/sv/1.0\"" xmlns:rep=\""internal\"" xmlns:jcr=\""http://www.jcp.org/jcr/1.0\"">"" +"
137316,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,250,,"                ""   <sv:property sv:name=\""jcr:primaryType\"" sv:type=\""Name\""><sv:value>rep:Group</sv:value></sv:property>"" +"
137317,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,251,,"                ""   <sv:property sv:name=\""jcr:uuid\"" sv:type=\""String\""><sv:value>b2f5ff47-4366-31b6-a533-d8dc3614845d</sv:value></sv:property>"" +"
137318,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,252,,"                ""   <sv:property sv:name=\""rep:principalName\"" sv:type=\""String\""><sv:value>g</sv:value></sv:property>"" +"
137319,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,320,,"                fail(""Import must be incomplete. Saving changes must fail."");"
137320,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,341,,"        String xml = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"" +"
137321,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,344,,"                ""   <sv:property sv:name=\""jcr:uuid\"" sv:type=\""String\""><sv:value>"" +mismatchUUID+ ""</sv:value></sv:property>"" +"
137322,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,344,,"                ""   <sv:property sv:name=\""jcr:uuid\"" sv:type=\""String\""><sv:value>"" +mismatchUUID+ ""</sv:value></sv:property>"" +"
137323,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,412,,"                ""   <sv:property sv:name=\""jcr:uuid\"" sv:type=\""String\""><sv:value>0120a4f9-196a-3f9e-b9f5-23f31f914da7</sv:value></sv:property>"" +"
137324,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,617,,"                ""   <sv:property sv:name=\""jcr:primaryType\"" sv:type=\""Name\""><sv:value>rep:AuthorizableFolder</sv:value></sv:property>"" +"
137325,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,666,,"                ""<sv:node sv:name=\""gFolder\"" xmlns:mix=\""http://www.jcp.org/jcr/mix/1.0\"" xmlns:nt=\""http://www.jcp.org/jcr/nt/1.0\"" xmlns:fn_old=\""http://www.w3.org/2004/10/xpath-functions\"" xmlns:fn=\""http://www.w3.org/2005/xpath-functions\"" xmlns:xs=\""http://www.w3.org/2001/XMLSchema\"" xmlns:sv=\""http://www.jcp.org/jcr/sv/1.0\"" xmlns:rep=\""internal\"" xmlns:jcr=\""http://www.jcp.org/jcr/1.0\"">"" +"
137326,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,678,,"                ""   <sv:property sv:name=\""rep:principalName\"" sv:type=\""String\""><sv:value>g1</sv:value></sv:property>"" +"
137327,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,702,,"            if (target.hasNode(""gFolder"")) {"
137328,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,715,,"                ""       <sv:property sv:name=\""jcr:primaryType\"" sv:type=\""Name\""><sv:value>rep:Group</sv:value></sv:property>"" +"
137329,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,719,,"                ""   </sv:node>"" +"
137330,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,808,,"                        ""<sv:node sv:name=\""g1\""><sv:property sv:name=\""jcr:primaryType\"" sv:type=\""Name\""><sv:value>rep:Group</sv:value></sv:property>"" +"
137331,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,811,,"                        ""   <sv:property sv:name=\""rep:members\"" sv:type=\""WeakReference\""><sv:value>"" +id+ ""</sv:value></sv:property>"" +"
137332,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserImporterTest.java,823,,"                    fail(""'g1' was not imported as Group."");"
137333,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserManagerImplTest.java,294,,"            	fail(""Principal "" + p.getName() + "" is already in use -> must throw AuthorizableExistsException."");"
137334,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserManagerImplTest.java,549,,"            assertTrue(""expected result"", result.hasNext());"
137335,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,66,,"        testNode = testRootNode.addNode(nodeName1, ""nt:unstructured"");"
137336,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,90,,"        testNode.setProperty(propertyName2, ""value"");"
137337,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,135,,"        assertFalse(testNode.hasProperty(""jcr:mixinTypes""));"
137338,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,155,,"        testNode.addMixin(""test:mixinProp_1"");"
137339,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,156,,"        testNode.setProperty(""test:prop_double"", 124);"
137340,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,232,,"        testNodeB.setProperty(propertyName1, ""anyValue"");"
137341,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,282,,"        testNode.addMixin(""test:mixinProp_5""); // has an autocreated property"
137342,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,284,,"        testNodeB.setProperty(""test:prop_long_p"", ""conflict"");"
137343,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,385,,"            testNode.addMixin(""test:mixinProp_"" + i);"
137344,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,544,,"        testNodeB.addMixin(""test:mixinProp_2"");"
137345,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/NodeStateMergerTest.java,671,,"        testNodeB.addMixin(""test:mixinNode_1"");"
137346,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/util/db/ConnectionFactoryTest.java,60,,"        DataSource ds1 = connectionFactory.getDataSource(DRIVER, DERBY_URL, ""user"", ""password"");"
137347,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/util/db/ConnectionFactoryTest.java,60,,"        DataSource ds1 = connectionFactory.getDataSource(DRIVER, DERBY_URL, ""user"", ""password"");"
137348,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/util/db/ConnectionFactoryTest.java,68,,"        assertEquals(""select 1"", ((BasicDataSource) ds1).getValidationQuery());"
137349,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/value/PathTest.java,57,,"        assertEquals(prop.getString(), new String(bytes, ""UTF-8""));"
137350,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,60,,"    private static final String XML_POLICY_TREE   = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"" +"
137351,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,62,,"                ""<sv:property sv:name=\""jcr:primaryType\"" sv:type=\""Name\"">"" +"
137352,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,64,,"                ""</sv:property>"" +"
137353,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,86,,"                        ""<sv:value>rep:ACL</sv:value>"" +"
137354,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,88,,"                    ""<sv:node sv:name=\""allow\"">"" +"
137355,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,90,,"                            ""<sv:value>rep:GrantACE</sv:value>"" +"
137356,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,92,,"                        ""<sv:property sv:name=\""rep:principalName\"" sv:type=\""String\"">"" +"
137357,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,95,,"                        ""<sv:property sv:name=\""rep:privileges\"" sv:type=\""Name\"">"" +"
137358,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,96,,"                            ""<sv:value>jcr:write</sv:value>"" +"
137359,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,98,,"                    ""</sv:node>"" +"
137360,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,103,,"            ""<sv:node sv:name=\""rep:policy\"" "" +"
137361,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,104,,"            ""xmlns:mix=\""http://www.jcp.org/jcr/mix/1.0\"" xmlns:nt=\""http://www.jcp.org/jcr/nt/1.0\"" xmlns:fn_old=\""http://www.w3.org/2004/10/xpath-functions\"" xmlns:fn=\""http://www.w3.org/2005/xpath-functions\"" xmlns:xs=\""http://www.w3.org/2001/XMLSchema\"" xmlns:sv=\""http://www.jcp.org/jcr/sv/1.0\"" xmlns:rep=\""internal\"" xmlns:jcr=\""http://www.jcp.org/jcr/1.0\"">"" +"
137362,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,143,,"                        ""<sv:value>admin</sv:value>"" +"
137363,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,248,,"            InputStream in = new ByteArrayInputStream(XML_POLICY_ONLY.getBytes(""UTF-8""));"
137364,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,261,,"                NodeIterator it = superuser.getRootNode().getNodes(""test"");"
137365,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,351,,"            target.addMixin(""rep:AccessControllable"");"
137366,./TargetProjects/jackrabbit/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/xml/AccessControlImporterTest.java,632,,"            assertTrue(target.hasNode(""rep:repoPolicy""));"
137367,./TargetProjects/jackrabbit/jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/AsyncUploadCache.java,100,,"            LOG.debug(""AsyncUploadCache size=[{}] and entries =[{}]"","
137368,./TargetProjects/jackrabbit/jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/CachingDataStore.java,726,,"                + identifier + ""], file ["" + file.getAbsolutePath() + ""]"", ie);"
137369,./TargetProjects/jackrabbit/jackrabbit-data/src/main/java/org/apache/jackrabbit/core/util/db/ConnectionFactory.java,366,,"            return ""select 1"";"
137370,./TargetProjects/jackrabbit/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestCaseBase.java,118,,"            LOG.info(""Testcase: "" + this.getClass().getName()"
137371,./TargetProjects/jackrabbit/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestCaseBase.java,123,,"                + (System.currentTimeMillis() - start) + ""]ms"");"
137372,./TargetProjects/jackrabbit/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestCaseBase.java,125,,"            LOG.error(""error:"", e);"
137373,./TargetProjects/jackrabbit/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java,84,,"            LOG.error(""error:"", e);"
137374,./TargetProjects/jackrabbit/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java,256,,"            File f = File.createTempFile(""test"", ""tmp"", tempDir);"
137375,./TargetProjects/jackrabbit/jackrabbit-data/src/test/java/org/apache/jackrabbit/core/data/TestLocalCache.java,256,,"            File f = File.createTempFile(""test"", ""tmp"", tempDir);"
137376,./TargetProjects/jackrabbit/jackrabbit-it-osgi/src/test/java/org/apache/jackrabbit/oak/osgi/OSGiIT.java,59,,"                mavenBundle(""org.apache.felix"", ""org.apache.felix.scr"", ""2.0.12""),"
137377,./TargetProjects/jackrabbit/jackrabbit-jca/src/main/java/org/apache/jackrabbit/jca/JCASessionHandle.java,147,,"    @SuppressWarnings(""deprecation"")"
137378,./TargetProjects/jackrabbit/jackrabbit-jcr-client/src/test/java/org/apache/jackrabbit/client/RepositoryFactoryImplTest.java,93,,"                ""org.apache.jackrabbit.spi.RepositoryServiceFactory"","
137379,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/JcrUtils.java,285,,"            @Override @SuppressWarnings(""unchecked"")"
137380,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/cnd/CompactNodeTypeDefReader.java,291,,"                    lexer.fail(""Error setting super type of "" + ntd.getName() + "" to "" + currentToken, e);"
137381,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/flat/BTreeManager.java,160,,"    @SuppressWarnings(""deprecation"")"
137382,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/jackrabbit/user/AuthorizableQueryManager.java,360,,"                    throw new IOException(""Unexpected: '"" + currentKey + ':' + s + '\'');"
137383,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/jackrabbit/user/AuthorizableQueryManager.java,593,,"                } else if (""value"".equals(currentKey)) {"
137384,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/jackrabbit/user/AuthorizableQueryManager.java,710,,"                if (""bound"".equals(currentKey)) {"
137385,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/json/JsonParser.java,137,,"                            throw new IOException(""Invalid json format"");"
137386,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/observation/EventTracker.java,51,,"            listener.warn(""Event listener "" + listener + "" is trying"""
137387,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/observation/EventTracker.java,51,,"            listener.warn(""Event listener "" + listener + "" is trying"""
137388,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/xml/SystemViewExporter.java,90,,"        startElement(SV, ""property"");"
137389,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Base64.java,91,,"        if (data.startsWith(""{base64}"")) {"
137390,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/ISO8601.java,93,,"            throw new IllegalArgumentException(""argument can not be null"");"
137391,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/LockedWrapper.java,37,,"    @SuppressWarnings(""unchecked"")"
137392,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/DateValue.java,127,,"            throw new ValueFormatException(""empty value"");"
137393,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/DecimalValue.java,109,,"            throw new ValueFormatException(""empty value"");"
137394,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/DoubleValue.java,119,,"            throw new ValueFormatException(""empty value"");"
137395,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/LongValue.java,119,,"            throw new ValueFormatException(""empty value"");"
137396,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/ValueHelper.java,255,,"                    throw new ValueFormatException(""conversion failed: """
137397,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/ValueHelper.java,256,,"                            + PropertyType.nameFromValue(srcType) + "" to """
137398,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/value/ValueHelper.java,389,,"                        throw new IllegalArgumentException(""not a valid type constant: "" + srcType);"
137399,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/json/JsonParserTest.java,123,,"        obj.put(""string"", ""abc"");"
137400,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/json/JsonParserTest.java,123,,"        obj.put(""string"", ""abc"");"
137401,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/json/JsonUtilTest.java,33,,"        m.put(""abc"", ""abc"");"
137402,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/query/GQLTest.java,30,,"                        ""name:test"", null, ""assets""));"
137403,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/SerializingContentHandlerTest.java,34,,"        handler.startPrefixMapping(""p"", ""uri"");"
137404,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/SerializingContentHandlerTest.java,35,,"        handler.startElement(""uri"", ""a"", ""p:a"", new AttributesImpl());"
137405,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/SerializingContentHandlerTest.java,37,,"        attributes.addAttribute(""uri"", ""foo"", ""p:foo"", ""CDATA"", ""bar"");"
137406,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/SerializingContentHandlerTest.java,37,,"        attributes.addAttribute(""uri"", ""foo"", ""p:foo"", ""CDATA"", ""bar"");"
137407,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/SerializingContentHandlerTest.java,39,,"        handler.characters(""abc"".toCharArray(), 0, 3);"
137408,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/SerializingContentHandlerTest.java,43,,"        handler.characters(""xyz"".toCharArray(), 0, 3);"
137409,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/ToXmlContentHandlerTest.java,30,,"        handler.startElement("""", ""test"", ""test"", new AttributesImpl());"
137410,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/ToXmlContentHandlerTest.java,40,,"        attributes.addAttribute("""", ""foo"", ""foo"", ""CDATA"", ""bar"");"
137411,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/ToXmlContentHandlerTest.java,40,,"        attributes.addAttribute("""", ""foo"", ""foo"", ""CDATA"", ""bar"");"
137412,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/ToXmlContentHandlerTest.java,40,,"        attributes.addAttribute("""", ""foo"", ""foo"", ""CDATA"", ""bar"");"
137413,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/XmlnsContentHandlerTest.java,31,,"        handler.startPrefixMapping(""foo"", ""http://x.y.z/"");"
137414,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/XmlnsContentHandlerTest.java,33,,"        handler.startElement("""", ""test"", ""test"", new AttributesImpl());"
137415,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/commons/xml/XmlnsContentHandlerTest.java,35,,"        handler.startElement("""", ""tset"", ""tset"", new AttributesImpl());"
137416,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/Base64Test.java,49,,"        assertEquals(""test"", new String(data, ""US-ASCII""));"
137417,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,62,,"        assertEquals(""1970-01-01T00:00:00.000Z"", ISO8601.format(c));"
137418,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,71,,"        assertEquals(""1973-11-29T21:33:09.012Z"", ISO8601.format(c));"
137419,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,86,,"        assertEquals(""1970-01-01T00:00:00Z"", ISO8601.SHORT.format(c));"
137420,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,95,,"        assertEquals(""1973-11-29T21:33:09Z"", ISO8601.SHORT.format(c));"
137421,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,110,,"        assertEquals(""1970-01-01T01:23:00.000+01:23"", ISO8601.format(c));"
137422,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,117,,"        assertEquals(""1973-11-29T22:56:09.012+01:23"", ISO8601.format(c));"
137423,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,126,,"        assertEquals(""1969-12-31T21:58:00.000-02:02"", ISO8601.format(c));"
137424,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO8601Test.java,133,,"        assertEquals(""1973-11-29T19:31:09.012-02:02"", ISO8601.format(c));"
137425,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO9075Test.java,41,,"                ""StringWith$inside"", ISO9075.decode(""StringWith$inside""));"
137426,./TargetProjects/jackrabbit/jackrabbit-jcr-commons/src/test/java/org/apache/jackrabbit/util/ISO9075Test.java,47,,"                ""StringWith\\inside"", ISO9075.decode(""StringWith\\inside""));"
137427,./TargetProjects/jackrabbit/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/client/ClientNodeTypeManager.java,99,,"        throw new UnsupportedRepositoryOperationException(""TODO: JCR-3206"");"
137428,./TargetProjects/jackrabbit/jackrabbit-jcr-rmi/src/main/java/org/apache/jackrabbit/rmi/value/StringValue.java,90,,"                throw new ValueFormatException(""Not a date: "" + value);"
137429,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/io/DirListingExportHandler.java,169,,"                        writer.print(""\"">"");"
137430,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandler.java,356,,"            attrs.addAttribute(uri, ""name"", prefix + ""name"", ""CDATA"", nodeName);"
137431,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandler.java,356,,"            attrs.addAttribute(uri, ""name"", prefix + ""name"", ""CDATA"", nodeName);"
137432,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandler.java,363,,"            attrs.addAttribute(uri, ""type"", prefix + ""type"", ""CDATA"", PropertyType.nameFromValue(PropertyType.NAME));"
137433,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/main/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandler.java,365,,"            ch.startElement(uri, ""value"", prefix + ""value"", new AttributesImpl());"
137434,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/BatchReadConfigTest.java,32,,"        assertEquals(cnf.getDefaultDepth(), cnf.getDepth(""nt:base""));"
137435,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/BatchReadConfigTest.java,53,,"        cnf.setDepth(""nt:file"", 15);"
137436,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/DiffParserTest.java,38,,"            String diff = ""^/a/prop : "" + value;"
137437,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/DiffParserTest.java,43,,"                    assertEquals(targetPath, ""/a/prop"");"
137438,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/DiffParserTest.java,151,,"                assertTrue(""abc"".equals(targetPath) || ""jkl"".equals(targetPath));"
137439,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/DiffParserTest.java,174,,"        l.add(new String[] {""+/a/b : 134"", ""/a/b"",""134""});"
137440,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/DiffParserTest.java,195,,"        l.add(new String[] {""+/a   /b : 123"", ""/a   /b"",""123""});"
137441,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/DiffParserTest.java,202,,"        l.add(new String[] {""++abc+ : val"", ""+abc+"",""val""});"
137442,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandlerImportTest.java,43,,"            + ""\""rep:principalName\"" : \""everyone\"","""
137443,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandlerImportTest.java,122,,"            assertTrue(testRootNode.hasNode(""rep:policy""));"
137444,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandlerTest.java,49,,"        m.put(""."", ""/reqPath"");"
137445,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/server/remoting/davex/JsonDiffHandlerTest.java,56,,"        m.put(""abc/../def/.."", ""/reqPath"");"
137446,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,87,,"            put.setEntity(new StringEntity(""foo"", ContentType.create(""text/plain"", ""UTF-8"")));"
137447,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,87,,"            put.setEntity(new StringEntity(""foo"", ContentType.create(""text/plain"", ""UTF-8"")));"
137448,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,87,,"            put.setEntity(new StringEntity(""foo"", ContentType.create(""text/plain"", ""UTF-8"")));"
137449,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,94,,"            assertTrue(""status: "" + status, status == 200 || status == 201);"
137450,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,149,,"        String subcol1 = testcol + ""bindtest1/"";"
137451,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,150,,"        String testres1 = subcol1 + ""res1"";"
137452,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,151,,"        String subcol2 = testcol + ""bindtest2/"";"
137453,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,152,,"        String testres2 = subcol2 + ""res2"";"
137454,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/BindTest.java,191,,"            put.setEntity(new StringEntity(""bar"", ContentType.create(""text/plain"", ""UTF-8"")));"
137455,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/ConditionalsTest.java,59,,"                etag = response.getFirstHeader(""etag"");"
137456,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/ConditionalsTest.java,67,,"                get.setHeader(""If-Modified-Since"", lm.getValue());"
137457,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/ConditionalsTest.java,134,,"                put.setHeader(""If-Unmodified-Since"", lm.getValue());"
137458,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/ContentCodingTest.java,61,,"            entity.setContentEncoding(new BasicHeader(""Content-Encoding"", ""qux""));"
137459,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/ContentCodingTest.java,81,,"            entity.setContentEncoding(new BasicHeader(""Content-Encoding"", ""gzip""));"
137460,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/RFC4918DestinationHeaderTest.java,47,,"            assertTrue(""status: "" + status, status == 200 || status == 201 || status == 204);"
137461,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/RFC4918IfHeaderTest.java,50,,"            assertEquals(""status: "" + status, 412, status);"
137462,./TargetProjects/jackrabbit/jackrabbit-jcr-server/src/test/java/org/apache/jackrabbit/webdav/server/WebDAVTestBase.java,142,,"            httpConnector.setHost(""localhost"");"
137463,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/AbstractJCRTest.java,320,,"            fail(""Property '"" + RepositoryStub.PROP_TESTROOT + ""' is not defined."");"
137464,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/AbstractJCRTest.java,320,,"            fail(""Property '"" + RepositoryStub.PROP_TESTROOT + ""' is not defined."");"
137465,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/BinaryPropertyTest.java,136,,"                        ""should throw a ValueFormatException."");"
137466,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/BinaryPropertyTest.java,183,,"                        ""return different values."", b, b2);"
137467,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/BinaryPropertyTest.java,464,,"            assertTrue(""unexpected result of Value.getBinary.read()"", -1 != bin.read(buf, 0));"
137468,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/BooleanPropertyTest.java,62,,"                        ""should throw a ValueFormatException."");"
137469,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/DatePropertyTest.java,61,,"                        ""should throw a ValueFormatException."");"
137470,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/DocumentViewImportTest.java,178,,"            assertEquals(""Value "" + attributeValue + "" of attribute "" +"
137471,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/DoublePropertyTest.java,63,,"                        ""should throw a ValueFormatException."");"
137472,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ExportDocViewTest.java,287,,"                fail(""Node "" + node.getPath() + "" is not exported."");"
137473,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/GetWeakReferencesTest.java,52,,"        assertTrue(""no weak references returned"", it.hasNext());"
137474,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/GetWeakReferencesTest.java,54,,"        assertEquals(""wrong weak reference property"", referring.getProperty(propertyName1).getPath(), p.getPath());"
137475,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/GetWeakReferencesTest.java,55,,"        assertFalse(""no more weak references expected"", it.hasNext());"
137476,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/LongPropertyTest.java,62,,"                        ""should throw a ValueFormatException."");"
137477,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NamePropertyTest.java,74,,"                    ""should throw a ValueFormatException."");"
137478,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NameTest.java,57,,"        assertEquals(nameValue.getString(), vf.createValue(""jcr:versionStorage"", PropertyType.NAME).getString());"
137479,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeAddMixinTest.java,52,,"            throw new NotExecutableException(""No testable mixin node type found"");"
137480,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeDiscoveringNodeTypesTest.java,160,,"        assertTrue(""isNodeType(String nodeTypeName) must return true if "" +"
137481,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeOrderableChildNodesTest.java,78,,"        checkOrderableNodeType(getProperty(""nodetype2""));"
137482,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeOrderableChildNodesTest.java,129,,"        Node firstNode = parentNode.addNode(nodeName2, getProperty(""nodetype3""));"
137483,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeOrderableChildNodesTest.java,165,,"        assertTrue(""Child nodes are not added in proper order after Node.orderBefore()!"", firstNode.isSame(initialSecondNode));"
137484,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,291,,"            throw new NotExecutableException(""Workspace does not have sufficient content for this test. "" +"
137485,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,292,,"                    ""Root node must have at least one child node."");"
137486,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,345,,"        String assertString1 = ""node.getNodes(\"""" + pattern1 + ""\""): "";"
137487,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,345,,"        String assertString1 = ""node.getNodes(\"""" + pattern1 + ""\""): "";"
137488,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,348,,"        assertEquals(assertString1 + ""number of nodes found: "","
137489,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,359,,"            assertEquals(assertString2 + ""name comparison failed: "","
137490,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,412,,"                assertTrue(assertString4 + ""name comparison failed: *"" +"
137491,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,413,,"                        shortenName + ""* not found in "" + n.getName(),"
137492,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,635,,"        String assertString1 = ""node.getProperties(\"""" + pattern1 + ""\""): "";"
137493,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeReadMethodsTest.java,637,,"        assertEquals(assertString1 + ""number of properties found: "","
137494,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeRemoveMixinTest.java,52,,"            throw new NotExecutableException(""No testable mixin node type found"");"
137495,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/NodeTest.java,194,,"        testNode.setProperty(propertyName1, ""test"");"
137496,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/PathPropertyTest.java,70,,"                    ""should throw a ValueFormatException."");"
137497,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ReferencePropertyTest.java,111,,"                    ""should throw a ValueFormatException."");"
137498,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ReferencesTest.java,47,,"        assertTrue(""test node should be mix:referenceable"", n1.isNodeType(mixReferenceable));"
137499,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ReferencesTest.java,62,,"            assertEquals(""Wrong referer"", iter.nextProperty().getPath(), p1.getPath());"
137500,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ReferencesTest.java,79,,"                fail(""too many referers: "" + p.getPath());"
137501,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ReferencesTest.java,151,,"        assertEquals(""wrong number of references reported"", 2, results.size());"
137502,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ReferencesTest.java,152,,"        assertTrue(""missing reference property: "" + p1.getPath(), results.contains(p1.getPath()));"
137503,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/RepositoryDescriptorTest.java,125,,"                assertNotNull(""Required descriptor is missing: "" + descName,"
137504,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyAssumeTypeTest.java,122,,"        assertEquals(""setProperty(String, Value, int) of a property of type undefined "" +"
137505,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyAssumeTypeTest.java,123,,"                     ""must assume the property type of the type parameter."","
137506,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyAssumeTypeTest.java,308,,"        assertEquals(""setProperty(String, Value) of a property of type undefined "" +"
137507,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyAssumeTypeTest.java,309,,"                     ""must assume the property type of the supplied value object."","
137508,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyConstraintViolationExceptionTest.java,61,,"                    ""testable value constraints has been found"");"
137509,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyConstraintViolationExceptionTest.java,79,,"            throw new NotExecutableException(""Not able to create required test items."");"
137510,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyConstraintViolationExceptionTest.java,87,,"                    ""ConstraintViolationException if the change would violate a "" +"
137511,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyConstraintViolationExceptionTest.java,88,,"                    ""node type constraint either immediately or on save"");"
137512,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetPropertyConstraintViolationExceptionTest.java,156,,"            fail(""setProperty(String name, Value value) must throw a "" +"
137513,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,61,,"                    ""testable value constraints has been found"");"
137514,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,75,,"            throw new NotExecutableException(""The value constraints do not allow any value."");"
137515,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,89,,"            throw new NotExecutableException(""Not able to create required test items."");"
137516,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,98,,"                    ""if the change would violate a node type constraint "" +"
137517,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,99,,"                    ""either immediately or on save"");"
137518,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,110,,"            fail(""setValue(Value value) must throw a ConstraintViolationException "" +"
137519,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,400,,"            throw new NotExecutableException(""No reference property def with "" +"
137520,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueConstraintViolationExceptionTest.java,534,,"            fail(""setValue(Value[] values) must throw a ConstraintViolationException "" +"
137521,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueStringTest.java,134,,"            fail(""The property should not exist anymore, as a null Value has been assigned"");"
137522,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueStringTest.java,237,,"        assertEquals(""Node property not saved"", Arrays.asList(mv2), Arrays.asList(property2.getValues()));"
137523,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueValueFormatExceptionTest.java,54,,"                    ""immediately if a conversion fails."");"
137524,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueVersionExceptionTest.java,115,,"                 ""immediately or on save if the parent node of this property "" +"
137525,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SetValueVersionExceptionTest.java,116,,"                 ""is checked-in."");"
137526,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ShareableNodeTest.java,117,,"                a2.getPath() + ""/b2"", false);"
137527,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ShareableNodeTest.java,660,,"        File tmpFile = File.createTempFile(""test"", null);"
137528,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ShareableNodeTest.java,1302,,"        assertFalse(""Saving share-ancestor should save share-descendants"","
137529,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/StringPropertyTest.java,92,,"                        ""should throw a ValueFormatException."");"
137530,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SysViewContentHandler.java,437,,"                        checkCondition(""Property "" + prop.getName() + "" of node """
137531,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ValueFactoryTest.java,146,,"                    assertTrue(""Type of created value not correct: Expected: """
137532,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ValueFactoryTest.java,148,,"                        + "" but was: "" + PropertyType.nameFromValue(type),"
137533,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ValueFactoryTest.java,258,,"                        fail(""Conversion from String "" + dateValueFail"
137534,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ValueFactoryTest.java,259,,"                                + "" to a "" + PropertyType.nameFromValue(types[i])"
137535,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/ValueFactoryTest.java,260,,"                                + "" value should throw ValueFormatException."");"
137536,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/lock/AbstractLockTest.java,357,,"        assertFalse(""Child node below a locked node must never be lock holder"","
137537,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/lock/AbstractLockTest.java,376,,"            assertTrue(""Lock.getNode() must return the lock holding node"", lockedNode.isSame(lock.getNode()));"
137538,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/lock/LockTest.java,598,,"        testRootNode.orderBefore(nodeName1 + ""[3]"", nodeName1 + ""[1]"");"
137539,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanAddChildNodeCallWithNodeTypeTest.java,92,,"        assertTrue(""NodeType.canAddChildNode(String childNodeName, String nodeTypeName) "" +"
137540,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanAddChildNodeCallWithNodeTypeTest.java,109,,"            throw new NotExecutableException(""No testable node type found."");"
137541,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanAddChildNodeCallWithoutNodeTypeTest.java,78,,"        assertTrue(""NodeType.canAddChildNode(String childNodeName) must return "" +"
137542,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanRemoveItemTest.java,76,,"            throw new NotExecutableException(""No mandatory property def found."");"
137543,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanRemoveItemTest.java,107,,"        assertFalse(""NodeType.canRemoveItem(String itemName) must return false "" +"
137544,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyBinaryTest.java,83,,"        assertTrue(""canSetProperty(String propertyName, Value value) must return "" +"
137545,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyBinaryTest.java,145,,"        assertTrue(""canSetProperty(String propertyName, Value[] values) must return "" +"
137546,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyBinaryTest.java,203,,"                    ""testable value constraints has been found"");"
137547,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyBooleanTest.java,83,,"        assertTrue(""canSetProperty(String propertyName, Value value) must return "" +"
137548,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyBooleanTest.java,147,,"        assertTrue(""canSetProperty(String propertyName, Value[] values) must return "" +"
137549,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyBooleanTest.java,205,,"                    ""testable value constraints has been found"");"
137550,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyDateTest.java,83,,"        assertFalse(""canSetProperty(String propertyName, Value value) must return "" +"
137551,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyDateTest.java,163,,"        assertFalse(""canSetProperty(String propertyName, Value[] values) must return "" +"
137552,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyDateTest.java,239,,"                    ""testable value constraints has been found"");"
137553,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyDoubleTest.java,83,,"        assertFalse(""canSetProperty(String propertyName, Value value) must return "" +"
137554,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyDoubleTest.java,161,,"        assertFalse(""canSetProperty(String propertyName, Value[] values) must return "" +"
137555,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyDoubleTest.java,237,,"                    ""testable value constraints has been found"");"
137556,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyLongTest.java,83,,"        assertFalse(""canSetProperty(String propertyName, Value value) must return "" +"
137557,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyLongTest.java,161,,"        assertFalse(""canSetProperty(String propertyName, Value[] values) must return "" +"
137558,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyLongTest.java,237,,"                    ""testable value constraints has been found"");"
137559,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyNameTest.java,82,,"        Value nameStringValue = superuser.getValueFactory().createValue(""abc"");"
137560,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyNameTest.java,83,,"        assertTrue(""canSetProperty(String propertyName, Value value) must return "" +"
137561,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyNameTest.java,88,,"        Value noNameStringValue = superuser.getValueFactory().createValue(""a:b:c"");"
137562,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyNameTest.java,166,,"        assertTrue(""canSetProperty(String propertyName, Value[] values) must return "" +"
137563,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyNameTest.java,248,,"                    ""testable value constraints has been found"");"
137564,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyPathTest.java,82,,"        Value pathStringValue = superuser.getValueFactory().createValue(""abc"");"
137565,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyPathTest.java,83,,"        assertTrue(""canSetProperty(String propertyName, Value value) must return "" +"
137566,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyPathTest.java,88,,"        Value noPathStringValue = superuser.getValueFactory().createValue(""a:b:c"");"
137567,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyPathTest.java,164,,"        assertTrue(""canSetProperty(String propertyName, Value[] values) must return "" +"
137568,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyPathTest.java,238,,"                    ""testable value constraints has been found"");"
137569,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyStringTest.java,84,,"        assertTrue(""canSetProperty(String propertyName, Value value) must return "" +"
137570,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyStringTest.java,145,,"        assertTrue(""canSetProperty(String propertyName, Value[] values) must return "" +"
137571,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/CanSetPropertyStringTest.java,205,,"                    ""testable value constraints has been found"");"
137572,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/NodeTypeTest.java,277,,"            assertTrue(""isNodeType(String nodeTypeName) must return true if "" +"
137573,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java,64,,"        SUPERTYPES.put(""mix:referenceable"", new String[]{});"
137574,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java,69,,"        SUPERTYPES.put(""nt:activity"", new String[]{""nt:base""});"
137575,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/PredefinedNodeTypeTest.java,74,,"        SUPERTYPES.put(""nt:file"", new String[]{""nt:hierarchyNode""});"
137576,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/PropertyDefTest.java,245,,"                                assertTrue(""Value constraint does not match "" +"
137577,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/AddEventListenerTest.java,83,,"        n1.setProperty(propertyName1, ""foo"");"
137578,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/EventIteratorTest.java,78,,"        assertEquals(""Wrong value for getPosition()"", 1, events.getPosition());"
137579,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/NodeReorderTest.java,188,,"        testRootNode.orderBefore(nodeName1 + ""[3]"", nodeName1 + ""[2]"");"
137580,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/NodeReorderTest.java,188,,"        testRootNode.orderBefore(nodeName1 + ""[3]"", nodeName1 + ""[2]"");"
137581,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/PropertyChangedTest.java,48,,"        node.setProperty(propertyName1, ""foo"");"
137582,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/PropertyChangedTest.java,52,,"        node.getProperty(propertyName1).setValue(""foobar"");"
137583,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/ElementTest.java,116,,"        String query = ""/"" + jcrRoot + testRoot + ""/element("" + nodeName1 + "")"";"
137584,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/GetLanguageTest.java,63,,"        assertEquals(""Query returns wrong language."", qsXPATH, q.getLanguage());"
137585,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/OrderByDateTest.java,77,,"        Calendar c2 = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
137586,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/PredicatesTest.java,79,,"            xpathRoot + ""/*[@"" + jcrPrimaryType + ""='"" + nodeTypeName + ""']"";"
137587,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/PredicatesTest.java,84,,"            fail(""invalid statement syntax for '"" + stmt + ""'"");"
137588,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/QueryResultNodeIteratorTest.java,52,,"        NodeIterator it = execute(xpathRoot + ""//*"", qsXPATH).getNodes();"
137589,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java,57,,"        StringBuffer query = new StringBuffer(""SELECT * FROM "");"
137590,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java,59,,"        query.append("" WHERE "");"
137591,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java,61,,"        query.append("" = "");"
137592,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java,63,,"        query.append("" AND "").append(jcrPath).append("" LIKE "");"
137593,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java,63,,"        query.append("" AND "").append(jcrPath).append("" LIKE "");"
137594,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java,64,,"        query.append(""'"").append(testRoot).append(""/%'"");"
137595,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/TextNodeTest.java,62,,"        text1.setProperty(jcrXMLCharacters, ""foo"");"
137596,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/LengthTest.java,57,,"        node.setProperty(propertyName1, ""abc"");"
137597,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/NodeNameTest.java,67,,"            String stmt = ""SELECT * FROM ["" + testNodeType + ""] AS s "" +"
137598,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/NodeNameTest.java,67,,"            String stmt = ""SELECT * FROM ["" + testNodeType + ""] AS s "" +"
137599,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/NodeNameTest.java,93,,"                    ""WHERE NAME(s) = CAST('"" + literal.getString() + ""' AS DATE)"";"
137600,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,122,,"        assertTrue(""Not a PropertyExistence constraint"","
137601,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,152,,"        assertEquals(""Wrong path"", testRootNode.getPath(), childNode.getParentPath());"
137602,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,153,,"        assertEquals(""Wrong selector name"", SELECTOR_NAME1, childNode.getSelectorName());"
137603,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,180,,"        assertEquals(""Wrong property name"", propertyName1, col.getPropertyName());"
137604,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,232,,"        assertTrue(""Not a selector source"", qom.getSource() instanceof Selector);"
137605,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,234,,"        assertEquals(""Wrong size of orderings"", 0, qom.getOrderings().length);"
137606,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,235,,"        assertEquals(""Wrong size of columns"", 0, qom.getColumns().length);"
137607,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/QueryObjectModelFactoryTest.java,244,,"        assertTrue(""Not a property existence constraint"", qom.getConstraint() instanceof PropertyExistence);"
137608,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/RowTest.java,58,,"        assertEquals(""unexpected result node"", expectedPath, r.getNode().getPath());"
137609,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/UpperLowerCaseTest.java,38,,"        node.setProperty(propertyName1, ""abc"");"
137610,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/UpperLowerCaseTest.java,39,,"        node.setProperty(propertyName2, ""ABC"");"
137611,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/UpperLowerCaseTest.java,102,,"                new String[]{""abc"", ""Abc"", ""aBc"", ""abC"", ""ABC""},"
137612,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/UpperLowerCaseTest.java,102,,"                new String[]{""abc"", ""Abc"", ""aBc"", ""abC"", ""ABC""},"
137613,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/UpperLowerCaseTest.java,102,,"                new String[]{""abc"", ""Abc"", ""aBc"", ""abC"", ""ABC""},"
137614,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/retention/HoldEffectTest.java,43,,"        Value v = getJcrValue(superuser, RepositoryStub.PROP_PROP_VALUE1, RepositoryStub.PROP_PROP_TYPE1, ""test"");                "
137615,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/util/Text.java,70,,"            return md5(data, ""utf-8"");"
137616,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/AbstractMergeTest.java,82,,"            fail(""Property '"" + PROP_VERSIONABLE_NODE_TYPE + ""' is not defined."");"
137617,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/ActivitiesTest.java,54,,"            an = vm.createActivity(""foobar"");"
137618,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckinTest.java,46,,"    @SuppressWarnings(""deprecation"")"
137619,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckoutTest.java,51,,"    @SuppressWarnings(""deprecation"")"
137620,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/ConfigurationsTest.java,67,,"        if (node.hasProperty(""jcr:configuration"")) {"
137621,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/FrozenNodeTest.java,57,,"        versionableNode.addNode(""child"");"
137622,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeNodeTest.java,66,,"    @SuppressWarnings(""deprecation"")"
137623,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeSubNodeTest.java,57,,"    @SuppressWarnings(""deprecation"")"
137624,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeSubNodeTest.java,80,,"        assertTrue(""clonedNode has different version UUID than expected, it should be updated with the newNode version UUID"", originalBaseVersionUUID.equals(clonedBaseVersionUUID));"
137625,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,100,,"    @SuppressWarnings(""deprecation"")"
137626,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,229,,"        assertFalse(""Restoring a node sets the jcr:isCheckedOut property to false"", versionableNode.isCheckedOut());"
137627,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,281,,"        assertEquals(""Restoring a node must set the correct property."", propertyValue1, value);"
137628,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,337,,"        assertTrue(""Restoring a node must set node's base version in order to point to the restored version."", version.isSame(baseV));"
137629,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,396,,"            fail(""InvalidItemStateException must be thrown on attempt to restore a node having any unsaved changes pending."");"
137630,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,679,,"                throw new NotExecutableException(""Child nodes must have OPV COPY or VERSION in order to be able to test Node.restore with uuid conflict."");"
137631,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,688,,"            fail(""Node.restore( Version, boolean ): An ItemExistsException must be thrown if the node to be restored already exsits and removeExisting was set to false."");"
137632,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,795,,"        versionableNode.addNode(""child1"");"
137633,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,802,,"        assertTrue(""Node.restore('1.2') must not remove child node."", versionableNode.hasNode(""child1""));"
137634,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,805,,"        assertFalse(""Node.restore('1.0') must remove child node."", versionableNode.hasNode(""child1""));"
137635,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,810,,"            fail(""Node.restore('1.3') must fail."");"
137636,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,933,,"        versionableNode.getVersionHistory().addVersionLabel(version.getName(), ""test"", true);"
137637,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,1060,,"        Node testRoot = versionableNode.addNode(nodeName4, ""nt:unstructured"");"
137638,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,1085,,"        assertTrue(testRoot.getName() + "" should have 2 child nodes."", iter.hasNext());"
137639,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/RestoreTest.java,1091,,"        assertEquals(""Invalid child node ordering"", orderOk, order);"
137640,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionHistoryTest.java,187,,"    @SuppressWarnings(""deprecation"")"
137641,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionHistoryTest.java,994,,"            vHistory.restore(""abc"", true);"
137642,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionLabelTest.java,134,,"    @SuppressWarnings(""deprecation"")"
137643,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionLabelTest.java,257,,"                fail(""If 'moveLabel' is true, an existing version label must be moved to the indicated version."");"
137644,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionTest.java,726,,"            version.restore(""abc"", true);"
137645,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/WorkspaceRestoreTest.java,160,,"    @SuppressWarnings(""deprecation"")"
137646,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/CheckinTest.java,50,,"    @SuppressWarnings(""deprecation"")"
137647,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/FrozenNodeTest.java,63,,"        versionableNode.addNode(""child"");"
137648,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,104,,"    @SuppressWarnings(""deprecation"")"
137649,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,158,,"            fail(""VersionManager.restore(String, Version, boolean) must fail on existing nodes."");"
137650,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,245,,"        assertFalse(""Restoring a node sets the jcr:isCheckedOut property to false"", versionableNode.isCheckedOut());"
137651,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,303,,"        assertEquals(""Restoring a node must set the correct property."", propertyValue1, value);"
137652,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,368,,"            fail(""InvalidItemStateException must be thrown on attempt to restore a node having any unsaved changes pending."");"
137653,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,651,,"                throw new NotExecutableException(""Child nodes must have OPV COPY or VERSION in order to be able to test Node.restore with uuid conflict."");"
137654,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,660,,"            fail(""Node.restore( Version, boolean ): An ItemExistsException must be thrown if the node to be restored already exsits and removeExisting was set to false."");"
137655,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,768,,"        versionableNode.addNode(""child1"");"
137656,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,775,,"        assertTrue(""Node.restore('1.2') must not remove child node."", versionableNode.hasNode(""child1""));"
137657,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,778,,"        assertFalse(""Node.restore('1.0') must remove child node."", versionableNode.hasNode(""child1""));"
137658,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,783,,"            fail(""Node.restore('1.3') must fail."");"
137659,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,874,,"        versionableNode.getVersionHistory().addVersionLabel(version.getName(), ""test"", true);"
137660,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,985,,"        Node testRoot = versionableNode.addNode(nodeName4, ""nt:unstructured"");"
137661,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,1010,,"        assertTrue(testRoot.getName() + "" should have 2 child nodes."", iter.hasNext());"
137662,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,1016,,"        assertEquals(""Invalid child node ordering"", orderOk, order);"
137663,./TargetProjects/jackrabbit/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/RestoreTest.java,1412,,"        assertEquals(""Node.restore() on simple versioning must create a new version."","
137664,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NodeImpl.java,207,,"            throw new ItemNotFoundException(""Node "" + safeGetJCRPath() + "" has no child node with name "" + srcChildRelPath);"
137665,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NodeImpl.java,1270,,"        throw new UnsupportedRepositoryOperationException(""JCR-1104"");"
137666,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/NodeImpl.java,1693,,"                throw new RepositoryException(""Invalid relative path: "" + relativePath);"
137667,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/nodetype/DefinitionValidator.java,479,,"                        buf.append(""--> "");"
137668,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/xml/TargetImportHandler.java,248,,"                throw new IOException(""this instance has already been disposed"");"
137669,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/AddPropertyTest.java,61,,"        Property p1 = testNode.setProperty(propertyName1, ""value1"");"
137670,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/AddPropertyTest.java,64,,"        Property p2 = testNode.setProperty(propertyName1, ""value2"");"
137671,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/AddPropertyTest.java,67,,"        Property p3 = testNode.setProperty(propertyName1, ""value3"");"
137672,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/BinaryTest.java,62,,"        Node test = testRootNode.addNode(""test"");"
137673,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/BinaryTest.java,63,,"        Property p = test.setProperty(""prop"", generateValue());"
137674,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/CopyMoveToJsonTest.java,36,,"        createJsonNode(""test.json"");"
137675,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/CopyMoveToJsonTest.java,42,,"            assertEquals(jsondata, IOUtils.toString(p.getBinary().getStream(), ""UTF-8""));"
137676,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java,120,,"        Property p3 = n2.setProperty(propertyName1, ""test"");"
137677,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,39,,"        Property p = n.setProperty(propertyName1, ""anyvalue"");"
137678,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,73,,"        Node n = testRootNode.addNode(""aFile"", ""nt:file"");"
137679,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,73,,"        Node n = testRootNode.addNode(""aFile"", ""nt:file"");"
137680,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,74,,"        n = n.addNode(""jcr:content"", ""nt:resource"");"
137681,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,74,,"        n = n.addNode(""jcr:content"", ""nt:resource"");"
137682,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,75,,"        n.setProperty(""jcr:lastModified"", Calendar.getInstance());"
137683,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,76,,"        n.setProperty(""jcr:mimeType"", ""text/plain"");"
137684,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,76,,"        n.setProperty(""jcr:mimeType"", ""text/plain"");"
137685,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,77,,"        Property jcrData = n.setProperty(""jcr:data"", ""abc"", PropertyType.BINARY);"
137686,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,77,,"        Property jcrData = n.setProperty(""jcr:data"", ""abc"", PropertyType.BINARY);"
137687,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/IsSameTest.java,291,,"        Property p = n.setProperty(propertyName1, ""anyValue"");"
137688,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/MoveNewTreeTest.java,50,,"        assertTrue(""Moving a node must move all child items as well."", ancestor.isSame(destParentNode));"
137689,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/MoveSNSTest.java,107,,"            assertTrue(""A moved SNS node must be 'replaced' but is successor sibling."", item.isSame(sourceSibling));"
137690,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/MoveSNSTest.java,146,,"                assertTrue(""Moved node must be appended to list of SNSs."", destSibling.isSame(n));"
137691,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/MoveTreeTest.java,46,,"        assertTrue(""Moving a node must move all child items as well."", ancestor.isSame(destParentNode));"
137692,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/MultiValuedPropertyTest.java,46,,"            throw new NotExecutableException(""No multivalued property found."");"
137693,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/SNSIndexTest.java,158,,"            assertTrue(""4 SNSs have been added -> but iterator size is "" + size + ""."", size == 4);"
137694,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/UpdateTest.java,153,,"        testRootNode.setProperty(propertyName2, ""test"");"
137695,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/lock/OpenScopedLockTest.java,201,,"            assertFalse(""Lock has been release by another session."", lockedNode.holdsLock());"
137696,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/AddMixinTest.java,126,,"        assertTrue(""Adding 2 mixins at once -> both must be present."", node.isNodeType(mixReferenceable) && node.isNodeType(mixLockable));"
137697,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/AddMixinTest.java,179,,"        ntd.setName(""testMixin"");"
137698,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/AddMixinTest.java,182,,"        nodeDef.setName(""child"");"
137699,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/AddMixinTest.java,183,,"        nodeDef.setRequiredPrimaryTypeNames(new String[] {""nt:folder""});"
137700,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/NodeTypeManagerImplTest.java,52,,"        test.setName(""testNodeType"");"
137701,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/NodeTypeManagerImplTest.java,81,,"        test.setName(""testNodeType2"");"
137702,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/nodetype/RemoveMixinTest.java,94,,"        assertFalse(""Adding + Removing a mixin within the same batch must have not effect."", node.isNodeType(mixReferenceable));"
137703,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/security/authorization/jackrabbit/acl/AccessControlManagerImplTest.java,152,,"            if (testRootNode.hasNode(""rep:policy"")) {"
137704,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java,74,,"        attrs.addAttribute(svuri, ""name"", svprefix + ""name"", ""CDATA"", nodeName1);"
137705,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java,74,,"        attrs.addAttribute(svuri, ""name"", svprefix + ""name"", ""CDATA"", nodeName1);"
137706,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java,81,,"        attrs.addAttribute(svuri, ""type"", svprefix + ""type"", ""CDATA"", PropertyType.nameFromValue(PropertyType.NAME));"
137707,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java,83,,"            ch.startElement(svuri, ""value"", svprefix + ""value"", new AttributesImpl());"
137708,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java,138,,"                ""    </sv:property>\n"" +"
137709,./TargetProjects/jackrabbit/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/xml/SessionImportTest.java,225,,"                ""</sv:property>"" +"
137710,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/PathParser.java,331,,"                        throw new MalformedPathException(""'"" + jcrPath + ""' is not a valid path. '"" + c + ""' not a valid name character."");"
137711,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/conversion/PathParser.java,331,,"                        throw new MalformedPathException(""'"" + jcrPath + ""' is not a valid path. '"" + c + ""' not a valid name character."");"
137712,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/iterator/Iterators.java,52,,"    @SuppressWarnings(""unchecked"")"
137713,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/Slf4jLogWriter.java,57,,"            log.debug(""ENTER("" + systemTime() + "") | "" + methodName + ""("" + formatArgs(args) + "")"");"
137714,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/SpiLoggerFactory.java,100,,"            throw new IllegalArgumentException(""LogWriterProvider must not be null"");"
137715,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/WriterLogWriter.java,60,,"        print(""ENTER("" + systemTime() + "") | "" + methodName + ""("" + formatArgs(args) + "")"");"
137716,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/DateConstraint.java,115,,"                            + "" does not satisfy the constraint '"""
137717,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/constraint/NumericConstraint.java,103,,"                            + "" does not satisfy the constraint '"""
137718,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/QueryTreeDump.java,130,,"        buffer.append("" Value="").append(node.getValue());"
137719,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/qom/QueryObjectModelFactoryImpl.java,797,,"            throw new RepositoryException(""Unknown DynamicOperand implementation"");"
137720,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/JCRSQLParser.java,91,,"    throw new Error(""Missing return statement in function"");"
137721,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/sql/QueryFormat.java,309,,"                sb.append("" LIKE '"");"
137722,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathConstants.java,329,,"    ""\""*\"""","
137723,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathQueryBuilder.java,683,,"                    exceptions.add(new InvalidQueryException(""Illegal name: "" + child.getValue()));"
137724,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathTokenManager.java,13002,,"""\144\151\166"", ""\151\144\151\166"", ""\155\157\144"", ""\52"", ""\151\156"", null, null, null, "
137725,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/value/AbstractQValueFactory.java,78,,"            throw new IllegalArgumentException(""Cannot create QValue from null value."");"
137726,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,50,,"                .addNode(""/my/path/MyNode"")"
137727,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,64,,"                .addNode(""/my"")"
137728,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,65,,"                .addNode(""/my/path"")"
137729,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,68,,"                .addNode(""/my/path2"")"
137730,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,101,,"                .addProp(""/my/path/Prop"", ""hello"", PropertyType.STRING)"
137731,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,101,,"                .addProp(""/my/path/Prop"", ""hello"", PropertyType.STRING)"
137732,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,122,,"                .movItem(""/my/path"", ""my/path2"")"
137733,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,168,,"                .mixNode(""/my"", ""MyMixin"")"
137734,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,196,,"                .setValu(""/my/path/Prop"", ""hello2"", PropertyType.STRING)"
137735,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,216,,"                .setValu(""/my/path/Prop"", ""hello3"", PropertyType.STRING)"
137736,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,275,,"                .mixNode(""/my"", ""mix"")"
137737,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,296,,"                .addNode(""/my2"")"
137738,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,304,,"                .setValu(""/my/Prop"", ""value"", PropertyType.STRING)"
137739,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/batch/ConsolidatedBatchTest.java,304,,"                .setValu(""/my/Prop"", ""value"", PropertyType.STRING)"
137740,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,98,,"        valid.add(new String[] {""abc:{c}"", ""abc"", ""{c}""});"
137741,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,101,,"        valid.add(new String[] {""{ab"", """", ""{ab""});"
137742,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,102,,"        valid.add(new String[] {""ab}"", """", ""ab}""});"
137743,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,103,,"        valid.add(new String[] {""a}bc"", """", ""a}bc""});"
137744,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,107,,"        valid.add(new String[] {""abc{abc}"", """", ""abc{abc}""});"
137745,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,108,,"        valid.add(new String[] {""{{abc}"", """", ""{{abc}""});"
137746,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,109,,"        valid.add(new String[] {""{abc{abc}"", """", ""{abc{abc}""});"
137747,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,110,,"        valid.add(new String[] {""abc {"", """", ""abc {""});"
137748,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,111,,"        valid.add(new String[] {""abc { }"", """", ""abc { }""});"
137749,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,113,,"        valid.add(new String[] {""{ }abc"", """", ""{ }abc""});"
137750,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/NameParserTest.java,115,,"        valid.add(new String[] {""{test}abc"", """", ""{test}abc""});"
137751,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,117,,"        paths.add(PathParser.parse(""/foo"", resolver, factory));"
137752,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,132,,"        paths.add(PathParser.parse(""/foo/.."", resolver, factory));"
137753,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,136,,"        paths.add(PathParser.parse(""./foo"", resolver, factory));"
137754,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,137,,"        paths.add(PathParser.parse(""foo/.."", resolver, factory));"
137755,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,138,,"        paths.add(PathParser.parse(""../foo/.."", resolver, factory));"
137756,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,139,,"        paths.add(PathParser.parse(""../foo/."", resolver, factory));"
137757,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/conversion/PathParserTest.java,223,,"        paths.put(""/a:foo/.{.}/a:c"",PathParser.parse(""/a:foo/.{.}/a:c"", resolver, factory));"
137758,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/ElementTest.java,48,,"        Element element = new IdentifierPath(""test"");"
137759,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/JcrName.java,35,,"        list.add(new JcrName(""name"", """", ""name""));"
137760,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/JcrName.java,36,,"        list.add(new JcrName(""na me"", """", ""na me""));"
137761,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/JcrName.java,37,,"        list.add(new JcrName(""prefix:name"", ""prefix"", ""name""));"
137762,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/MatcherTest.java,36,,"            assertEquals(""Match @ "" + k, k, result.getMatchPos());"
137763,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathBuilderTest.java,64,,"                    assertEquals(""\"""" + t.path + ""\"".isAbsolute()"", t.isAbsolute(), p.isAbsolute());"
137764,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,563,,"            list.add(new JcrPathAndAncestor(""../../a/b/c/d"", ""../../a/b/c"", 1));"
137765,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,564,,"            list.add(new JcrPathAndAncestor("".."", ""../.."", 1));"
137766,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,565,,"            list.add(new JcrPathAndAncestor(""a/b"", ""."", 2));"
137767,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,569,,"            list.add(new JcrPathAndAncestor(""../a"", ""../.."", 2));"
137768,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,585,,"            list.add(new JcrPathAndAncestor(""../a/b/../../../../f"", ""../a/b/../../../../f"", 0));"
137769,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,632,,"            list.add(new NotAncestor(""../../b"", ""../../../a""));"
137770,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,633,,"            list.add(new NotAncestor(""../../a"", ""../../../a""));"
137771,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/name/PathTest.java,653,,"            list.add(new NotAncestor(""../../a"", ""a/..""));"
137772,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/query/xpath/XPathOrderByTest.java,53,,"        checkName(Name.NS_DEFAULT_URI, ""bar"", specs[0].getProperty());"
137773,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/value/QValueTest.java,66,,"            factory.create(""any"", 54);"
137774,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/value/QValueTest.java,398,,"            factory.create(""abc"", PropertyType.NAME);"
137775,./TargetProjects/jackrabbit/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/value/ValueFormatTest.java,109,,"        URI uri = new URI(""http://jackrabbit.apache.org"");"
137776,./TargetProjects/jackrabbit/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueFactoryTest.java,65,,"            factory.create(""any"", 54);"
137777,./TargetProjects/jackrabbit/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueFactoryTest.java,296,,"            factory.create(""abc"", PropertyType.NAME);"
137778,./TargetProjects/jackrabbit/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueTest.java,60,,"            factory.create(""any"", 54);"
137779,./TargetProjects/jackrabbit/jackrabbit-spi/src/test/java/org/apache/jackrabbit/spi/QValueTest.java,283,,"            factory.create(""abc"", PropertyType.NAME);"
137780,./TargetProjects/jackrabbit/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/RepositoryServiceImpl.java,1909,,"            throw new UnsupportedOperationException(""JCR-2104: JSR 283 Versioning. Implementation missing"");"
137781,./TargetProjects/jackrabbit/jackrabbit-spi2dav/src/test/java/org/apache/jackrabbit/spi2dav/ConnectionTest.java,63,,"        repositoryService.obtain(new SimpleCredentials(""admin"", ""admin"".toCharArray()), null);"
137782,./TargetProjects/jackrabbit/jackrabbit-spi2dav/src/test/java/org/apache/jackrabbit/spi2dav/DavPropertyTest.java,63,,"    private final String testPath = ""/test"";"
137783,./TargetProjects/jackrabbit/jackrabbit-spi2dav/src/test/java/org/apache/jackrabbit/spi2davex/BatchTest.java,341,,"        assertEquals(""abc"", pi.getValues()[0].getString());"
137784,./TargetProjects/jackrabbit/jackrabbit-spi2dav/src/test/java/org/apache/jackrabbit/spi2davex/BatchTest.java,386,,"        assertEquals(""ghi"", vs[2].getString());"
137785,./TargetProjects/jackrabbit/jackrabbit-spi2dav/src/test/java/org/apache/jackrabbit/spi2davex/ExtensionTest.java,127,,"        createTestNode(""/test"");"
137786,./TargetProjects/jackrabbit/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/Main.java,96,,"        options.addOption(""c"", ""conf"", true, ""repository configuration file"");"
137787,./TargetProjects/jackrabbit/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/cli/CommandLine.java,104,,"            return bundle.getString(""cmd."" + this.name);"
137788,./TargetProjects/jackrabbit/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/cli/JcrClient.java,353,,"        options.addOption(""lang"", ""code"", true, ""Language code"");"
137789,./TargetProjects/jackrabbit/jackrabbit-standalone-components/src/main/java/org/apache/jackrabbit/standalone/cli/JcrClient.java,354,,"        options.addOption(""country"", ""code"", true, ""Country code"");"
137790,./TargetProjects/jackrabbit/jackrabbit-webapp/src/test/java/org/apache/jackrabbit/j2ee/TomcatIT.java,53,,"        for (File f : new File(""target"").listFiles()) {"
137791,./TargetProjects/jackrabbit/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/client/methods/BaseDavRequest.java,89,,"                throw new DavException(response.getStatusLine().getStatusCode(), ""no response body"");"
137792,./TargetProjects/jackrabbit/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/lock/LockDiscovery.java,160,,"            throw new UnsupportedOperationException(""Not implemented"");"
137793,./TargetProjects/jackrabbit/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java,303,,"                    webdavResponse.setHeader(""Accept-Encoding"", ""identity"");"
137794,./TargetProjects/jackrabbit/jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/server/AbstractWebdavServlet.java,637,,"                acceptsGzipEncoding(request) ? Collections.singletonList(""gzip"") : Collections.emptyList());"
137795,./TargetProjects/jackrabbit/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/lock/ActiveLockTest.java,40,,"        lock.setLockroot(""lockroot"");"
137796,./TargetProjects/jackrabbit/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/util/CSRFUtilTest.java,129,,"        assertFalse(""no referrer"", util.isValidRequest(createRequest(null, POST, ""text/plain"")));"
137797,./TargetProjects/jackrabbit/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/xml/NamespaceTest.java,43,,"        m.put(""foo"", ""http://foo.org/ns/foo"");"
137798,./TargetProjects/jackrabbit/jackrabbit-webdav/src/test/java/org/apache/jackrabbit/webdav/xml/ParserTest.java,54,,"        InputStream is = new ByteArrayInputStream(testBody.getBytes(""UTF-8""));"
137799,./TargetProjects/jackrabbit/test/performance/base/src/main/java/org/apache/jackrabbit/performance/ThreeWayJoinTest.java,51,,"        root = session.getRootNode().addNode(""testroot"", ""nt:unstructured"");"
137800,./TargetProjects/jackrabbit/test/performance/base/src/main/java/org/apache/jackrabbit/performance/ThreeWayJoinTest.java,54,,"            Node foo = root.addNode(""node"" + i, ""nt:unstructured"");"
137801,./TargetProjects/jackrabbit-filevault/vault-cli/src/main/java/org/apache/jackrabbit/vault/cli/CmdPut.java,75,,"            throw new ExecutionException(""Error while uploading file: "" + e);"
137802,./TargetProjects/jackrabbit-filevault/vault-cli/src/main/java/org/apache/jackrabbit/vault/util/console/util/Table.java,107,,"                ""                                                             ""+"
137803,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/api/FilterSet.java,100,,"            throw new UnsupportedOperationException(""FilterSet is sealed."");"
137804,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/config/ConfigHelper.java,108,,"                throw new ConfigurationException(""Error while creating instance for "" + elem.getNodeName(), e);"
137805,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/config/ConfigHelper.java,181,,"            throw new ConfigurationException(""Unable to set "" + setter + "" of "" + obj , e);"
137806,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/config/SimpleCredentialsConfig.java,122,,"            SecretKey key = KeyGenerator.getInstance(""DES"").generateKey();"
137807,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/impl/AggregateManagerImpl.java,222,,"            throw new IllegalArgumentException(""Internal error while parsing config."", e);"
137808,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/impl/TransactionImpl.java,147,,"            String parentExt = parentPath.endsWith("".dir"") ? "".dir"" : """";"
137809,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/impl/io/JackrabbitACLImporter.java,316,,"                addPathIfExists(paths, ""/rep:policy"");"
137810,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/fs/impl/io/JcrSysViewTransformer.java,158,,"        attrs.addAttribute(Name.NS_SV_URI, ""name"", ""sv:name"", ""CDATA"", ni.name);"
137811,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageDefinitionImpl.java,169,,"            return defNode.hasProperty(""unwrapped"")"
137812,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageImpl.java,324,,"                File tmpFile = File.createTempFile(""vaultpack"", "".zip"");"
137813,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/JcrWorkspaceFilter.java,96,,"                    if (""include"".equals(type)) {"
137814,./TargetProjects/jackrabbit-filevault/vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/registry/impl/JcrPackageRegistry.java,282,,"            String[] exts = new String[]{"""", "".zip"", "".jar""};"
137815,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/PathMappingTest.java,30,,"        PathMapping map = new SimplePathMapping(""/tmp"", ""/content"");"
137816,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/PathMappingTest.java,30,,"        PathMapping map = new SimplePathMapping(""/tmp"", ""/content"");"
137817,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/PathMappingTest.java,33,,"        assertEquals(""/foo"", map.map(""/foo""));"
137818,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/PathMappingTest.java,47,,"        map.link(""/source/tree/a"", ""/dest/1"");"
137819,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/PathMappingTest.java,47,,"        map.link(""/source/tree/a"", ""/dest/1"");"
137820,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,34,,"        assertEquals(""scheme"", ""url"", ra.getSpecificURI().getScheme());"
137821,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,34,,"        assertEquals(""scheme"", ""url"", ra.getSpecificURI().getScheme());"
137822,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,35,,"        assertEquals(""host"", ""localhost"", ra.getSpecificURI().getHost());"
137823,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,35,,"        assertEquals(""host"", ""localhost"", ra.getSpecificURI().getHost());"
137824,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,36,,"        assertEquals(""port"", 1234, ra.getSpecificURI().getPort());"
137825,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,37,,"        assertEquals(""prefix"", ""/"", ra.getSpecificURI().getPath());"
137826,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,38,,"        assertEquals(""workspace"", null, ra.getWorkspace());"
137827,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,39,,"        assertEquals(""path"", ""/"", ra.getPath());"
137828,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,40,,"        assertEquals(""toString"", ""url://localhost:1234/-/jcr:root"", ra.toString());"
137829,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,89,,"        assertEquals(""scheme"", ""http"", ra.getSpecificURI().getScheme());"
137830,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,92,,"        assertEquals(""prefix"", ""/pfx1/pfx2"", ra.getSpecificURI().getPath());"
137831,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,95,,"        assertEquals(""toString"", ""http://localhost:1234/pfx1/pfx2/workspace/jcr:root"", ra.toString());"
137832,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,121,,"        RepositoryAddress ra = new RepositoryAddress(""http://localhost:1234/pfx1/pfx2/workspace/jcr:root/foo/bar"");"
137833,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/api/RepositoryAddressTest.java,127,,"        assertEquals(""path"", ""/foo/bar"", ra.getPath());"
137834,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/DefaultPathFilterTest.java,45,,"        test(""^.*/bar\\.[^/]*$"", ""/foo/bar.txt"", true);"
137835,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/DefaultPathFilterTest.java,66,,"        test(""/foo(/.*)?"", ""/foo"", true);"
137836,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/FilterSetTest.java,36,,"        FilterSet f1 = new PathFilterSet(""/foo"").seal();"
137837,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/FilterSetTest.java,70,,"        f1.addInclude(new DefaultPathFilter(""/foo/bar(/.*)?""));"
137838,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/WorkspaceFilterTest.java,49,,"        PathFilterSet set1 = new PathFilterSet(""/foo"");"
137839,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/WorkspaceFilterTest.java,51,,"        PathFilterSet set2 = new PathFilterSet(""/tmp"");"
137840,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/WorkspaceFilterTest.java,74,,"        PathMapping map = new SimplePathMapping(""/tmp/stage"", ""/content/geometrixx/en"");"
137841,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/filter/WorkspaceFilterTest.java,121,,"        try (InputStream input = getClass().getResourceAsStream(""workspacefilters/items.xml"")) {"
137842,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/fs/impl/io/DocViewSaxFormatterIT.java,60,,"        JcrUtils.getOrCreateByPath(""/testroot"", NodeType.NT_UNSTRUCTURED, admin);"
137843,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/DependencyTest.java,29,,"        assertEquals(""group"", d.getGroup());"
137844,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/DependencyTest.java,30,,"        assertEquals(""name"", d.getName());"
137845,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/DependencyTest.java,112,,"        Dependency[] d = Dependency.parse(""n1,g2:n2,g3:n3:1,g4:n4:[1,2]"");"
137846,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/PackageIdTest.java,28,,"        PackageId packId = new PackageId(""group"", ""name"", ""version"");"
137847,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/PackageIdTest.java,28,,"        PackageId packId = new PackageId(""group"", ""name"", ""version"");"
137848,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/PackageIdTest.java,28,,"        PackageId packId = new PackageId(""group"", ""name"", ""version"");"
137849,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/PackageIdTest.java,45,,"        PackageId packId = new PackageId(""/etc/packages/apache/jackrabbit/hotfix/name.zip"", ""1.0"");"
137850,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/SubPackageHandlingTest.java,29,,"        assertEquals(SubPackageHandling.Option.INSTALL, sp.getOption(PackageId.fromString(""foo:bar"")));"
137851,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/SubPackageHandlingTest.java,48,,"        sp.getEntries().add(new SubPackageHandling.Entry(""foo"", ""*"", SubPackageHandling.Option.ADD));"
137852,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/SubPackageHandlingTest.java,56,,"        sp.getEntries().add(new SubPackageHandling.Entry(""*"", ""bar"", SubPackageHandling.Option.ADD));"
137853,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/SubPackageHandlingTest.java,81,,"        assertEquals(""*:bar"", SubPackageHandling.fromString(""*:bar"").getString());"
137854,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/VersionTest.java,42,,"        assertEquals(""1.0.0"", Version.create(""1.0.0"").toString());"
137855,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/VersionTest.java,75,,"        compare(""6.1.58"", ""6.1.58-FP3"", -1);"
137856,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/VersionTest.java,76,,"        compare(""6.1.58"", ""6.1.58.FP3"", -1);"
137857,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/DefaultPackageInfoTest.java,41,,"        assertNotNull(""PackageInfo"", info);"
137858,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImplIT.java,69,,"        String path = ""/etc/packages"";"
137859,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImplIT.java,125,,"        JcrPackageManagerImpl jcrPackageManager = new JcrPackageManagerImpl(admin, new String[]{""/var/packages"", ""/etc/packages""});"
137860,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImplIT.java,219,,"        packMgr.create(""foo"", ""test-package"");"
137861,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImplIT.java,220,,"        assertEquals(""package list contains 2 elements"", 2, packMgr.listPackages().size());"
137862,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/JcrPackageManagerImplIT.java,254,,"        assertTrue(""contains new packages"", ids.contains(TEST_PACKAGE_A_10_ID));"
137863,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,47,,"    private final static String NAME_TEST_USER = ""testuser"";"
137864,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,62,,"        if (admin.nodeExists(""/testroot"")) {"
137865,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,84,,"        extractVaultPackage(""/test-packages/mode_ac_test_a.zip"");"
137866,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,87,,"        assertNodeExists(""/testroot/node_a"");"
137867,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,88,,"        assertPermission(""/testroot/secured"", false, new String[]{""jcr:all""}, ""everyone"", null);"
137868,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,88,,"        assertPermission(""/testroot/secured"", false, new String[]{""jcr:all""}, ""everyone"", null);"
137869,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,88,,"        assertPermission(""/testroot/secured"", false, new String[]{""jcr:all""}, ""everyone"", null);"
137870,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,94,,"        assertNodeExists(""/testroot/node_b"");"
137871,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,96,,"        assertPermission(""/testroot/secured"", true, new String[]{""jcr:read""}, ""everyone"", ""*/foo/*"");"
137872,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,96,,"        assertPermission(""/testroot/secured"", true, new String[]{""jcr:read""}, ""everyone"", ""*/foo/*"");"
137873,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ACLAndMergeIT.java,350,,"        int idx2 = hasPermission(""/testroot/secured"", true, new String[]{""jcr:all""}, ""testuser1"", Collections.<String, String[]>emptyMap());"
137874,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ArchiveExtractionIT.java,85,,"        Archive a = getFileArchive(""/test-packages/tmp.zip"");"
137875,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ArchiveExtractionIT.java,94,,"        long size = admin.getProperty(getInstallationPath(TMP_PACKAGE_ID) + ""/jcr:content/jcr:data"").getLength();"
137876,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/BinarylessExportIT.java,82,,"        Binary bigBin = admin.getValueFactory().createBinary(IOUtils.toInputStream(BIG_TEXT, ""UTF-8""));"
137877,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,93,,"       assertNodeExists(testRoot, ""node_with_cug"");"
137878,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,95,,"       assertProperty(nodeWithCug, ""jcr:mixinTypes"", asSet(""rep:CugMixin""));"
137879,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,95,,"       assertProperty(nodeWithCug, ""jcr:mixinTypes"", asSet(""rep:CugMixin""));"
137880,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,96,,"       assertNodeMissing(nodeWithCug, ""rep:cugPolicy"");"
137881,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,112,,"        assertProperty(cugNode, ""jcr:primaryType"", ""rep:CugPolicy"");"
137882,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,112,,"        assertProperty(cugNode, ""jcr:primaryType"", ""rep:CugPolicy"");"
137883,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,113,,"        assertProperty(cugNode,""rep:principalNames"", asSet(""principal-1"", ""principal-2"", ""principal-3""));"
137884,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,113,,"        assertProperty(cugNode,""rep:principalNames"", asSet(""principal-1"", ""principal-2"", ""principal-3""));"
137885,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,113,,"        assertProperty(cugNode,""rep:principalNames"", asSet(""principal-1"", ""principal-2"", ""principal-3""));"
137886,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/CugHandlingTest.java,113,,"        assertProperty(cugNode,""rep:principalNames"", asSet(""principal-1"", ""principal-2"", ""principal-3""));"
137887,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EmptyPackageIT.java,44,,"        JcrPackage pack = packMgr.upload(getStream(""/test-packages/tmp.zip""), false);"
137888,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EmptyPackageIT.java,47,,"        assertNodeExists(""/tmp/foo/bar/tobi"");"
137889,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EmptyPackageIT.java,53,,"        assertNodeMissing(""/tmp"");"
137890,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EmptyPackageIT.java,72,,"        assertNodeMissing(""/tmp/foo"");"
137891,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EmptyPackageIT.java,91,,"        assertNodeMissing(""/tmp/foo/bar"");"
137892,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EmptyPackageIT.java,197,,"        assertNodeExists(""/tmp/foo/bar/test.txt"");"
137893,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EnforcedDependenciesIT.java,89,,"        assertProperty(""/tmp/a/version"", ""1.0"");"
137894,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EnforcedDependenciesIT.java,89,,"        assertProperty(""/tmp/a/version"", ""1.0"");"
137895,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EnforcedDependenciesIT.java,93,,"        assertProperty(""/tmp/b/version"", ""1.0"");"
137896,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EnforcedDependenciesIT.java,95,,"        assertProperty(""/tmp/c/version"", ""1.0"");"
137897,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/EnforcedDependenciesIT.java,160,,"        assertNodeMissing(""/tmp/c/"");"
137898,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ExecutionPlanIT.java,150,,"        assertFalse(""package A is not installed"", registry.open(idA).isInstalled());"
137899,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ExecutionPlanIT.java,151,,"        assertFalse(""package B is not installed"", registry.open(idB).isInstalled());"
137900,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ExecutionPlanIT.java,152,,"        assertFalse(""package C is not installed"", registry.open(idC).isInstalled());"
137901,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ExecutionPlanIT.java,159,,"        assertTrue(""plan is finished"", plan.isExecuted());"
137902,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ExecutionPlanIT.java,160,,"        assertFalse(""plan has no errors"", plan.hasErrors());"
137903,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ExportWithQuotedPatternIT.java,103,,"        Node tmp = root.addNode(""tmp"", ""nt:folder"");"
137904,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FilteredPropertyExportIT.java,56,,"        filter.add(new PathFilterSet(""/tmp""));"
137905,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FilteredPropertyExportIT.java,65,,"            assertPropertiesExist(""/tmp/foo"", ""p1"", ""p2"", ""p3"");"
137906,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FilteredPropertyExportIT.java,66,,"            assertPropertiesExist(""/tmp/foo/bar"", ""p1"", ""p2"", ""p3"");"
137907,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FilteredPropertyExportIT.java,94,,"        properties.addExclude(new DefaultPathFilter(""/tmp/foo/p1""));"
137908,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FilteredPropertyExportIT.java,143,,"        properties.addExclude(new DefaultPathFilter(""/tmp/foo/p.*""));"
137909,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FolderArtifactHandlerIT.java,43,,"        Node testNode = rootNode.addNode(""testroot"", ""nt:unstructured"");"
137910,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FolderArtifactHandlerIT.java,47,,"        try (VaultPackage vltPackage = extractVaultPackageStrict(""/test-packages/folder-without-docview-element.zip"")) {"
137911,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FolderArtifactHandlerIT.java,50,,"            assertNodeHasPrimaryType(""/testroot/foo"", ""nt:folder"");"
137912,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FolderArtifactHandlerIT.java,75,,"        assertNodeHasPrimaryType(""/var/foo"", ""nt:unstructured"");"
137913,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/FolderArtifactHandlerIT.java,113,,"        homeNode.addNode(""groups"", ""rep:AuthorizableFolder"");"
137914,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/GroupMergePackageIT.java,47,,"        removeAuthorizable(mgr, ""test-group"");"
137915,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/GroupMergePackageIT.java,48,,"        removeAuthorizable(mgr, ""test-user-a"");"
137916,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/GroupMergePackageIT.java,49,,"        removeAuthorizable(mgr, ""test-user-b"");"
137917,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/GroupMergePackageIT.java,50,,"        removeAuthorizable(mgr, ""test-user-c"");"
137918,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/GroupMergePackageIT.java,61,,"        assertNull(""test-group must not exist"", mgr.getAuthorizable(""test-group""));"
137919,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportIT.java,69,,"        try (Archive archive = getFileArchive(""/test-packages/tmp.zip"")) {"
137920,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportIT.java,76,,"            assertNodeExists(""/tmp/foo/bar/tobi"");"
137921,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportIT.java,303,,"        AccessControlUtils.addAccessControlEntry(admin, ""/"", principal1, new String[]{""jcr:all""}, false);"
137922,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,46,,"        foo.addNode(""old"");"
137923,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,48,,"        assertNodeExists(""/tmp/foo/old"");"
137924,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,49,,"        assertNodeMissing(""/tmp/foo/bar"");"
137925,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,56,,"        assertProperty(""/tmp/foo/bar/testProperty"", ""new"");"
137926,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,71,,"        assertNodeMissing(""/tmp/foo/new"");"
137927,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,108,,"        Node parent = admin.getRootNode().addNode(""testroot"");"
137928,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,109,,"        setUpNode(parent, ""replace"");"
137929,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,112,,"        setUpNode(parent, ""merge_properties"");"
137930,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,113,,"        setUpNode(parent, ""update_properties"");"
137931,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,116,,"        assertProperty(""/testroot/replace/propertyold"", ""old"");"
137932,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,117,,"        assertProperty(""/testroot/replace/propertyupdate"", ""old"");"
137933,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,118,,"        assertNodeExists(""/testroot/replace/old"");"
137934,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,119,,"        assertProperty(""/testroot/replace/existing/propertyold"", ""old"");"
137935,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/ImportModeIT.java,247,,"        assertProperty(""/testroot/replace/jcr:content/jcr:data"", ""test"");"
137936,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/IntegrationTestBase.java,136,,"    public static final PackageId TMP_PACKAGE_ID = new PackageId(""my_packages"", ""tmp"", """");"
137937,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/IntegrationTestBase.java,201,,"            Session admin = repository.login(new SimpleCredentials(""admin"", ""admin"".toCharArray()));"
137938,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/IntegrationTestBase.java,571,,"            restrictions.put(""rep:glob"", new String[]{globRest});"
137939,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/MappedImportIT.java,41,,"        JcrPackage pack = packMgr.upload(getStream(""/test-packages/tmp_foo.zip""), false);"
137940,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/MappedImportIT.java,45,,"        mapping.link(""/tmp/foo"", ""/tmp/mapped"");"
137941,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/MappedImportIT.java,45,,"        mapping.link(""/tmp/foo"", ""/tmp/mapped"");"
137942,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/NamespaceImportTest.java,75,,"        i1.getRootNode().addNode(""tmp"").setProperty(""{"" + URI1 + ""}prop1"", ""value1"");"
137943,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/NamespaceImportTest.java,157,,"            admin = repository.login(new SimpleCredentials(""admin"", ""admin"".toCharArray()));"
137944,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageCreationIT.java,32,,"    public static String[] GROUP_NAMES = {""foo"", ""foo-zoo"", ""foo.zoo"", ""jcr:foo"", ""foo/zoo""};"
137945,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageCreationIT.java,35,,"    public static String[] PACKAGE_NAMES = {""bar"", ""bar.zar"", ""bar-zar"", ""jcr:bar""};"
137946,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageCreationIT.java,58,,"        packMgr.create(""foo"", ""bar"", ""3.1.2"");"
137947,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,78,,"        JcrPackage pack = packMgr.upload(getStream(""/test-packages/tmp.zip""), false);"
137948,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,114,,"        assertNodeExists(""/tmp/foo"");"
137949,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,215,,"        if (admin.nodeExists(""/testroot"")) {"
137950,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,218,,"        admin.getRootNode().addNode(""testroot"", ""nt:unstructured"").addNode(""testnode"", ""nt:unstructured"");"
137951,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,218,,"        admin.getRootNode().addNode(""testroot"", ""nt:unstructured"").addNode(""testnode"", ""nt:unstructured"");"
137952,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,220,,"        JcrPackage pack = packMgr.upload(getStream(""/test-packages/test_hook.zip""), false);"
137953,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,239,,"        String userId = ""user1"";"
137954,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,240,,"        String userPwd = ""pwd1"";"
137955,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,245,,"        AccessControlUtils.addAccessControlEntry(admin, null, principal1, new String[]{""jcr:namespaceManagement"",""jcr:nodeTypeDefinitionManagement""}, true);"
137956,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,245,,"        AccessControlUtils.addAccessControlEntry(admin, null, principal1, new String[]{""jcr:namespaceManagement"",""jcr:nodeTypeDefinitionManagement""}, true);"
137957,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,246,,"        AccessControlUtils.addAccessControlEntry(admin, ""/"", principal1, new String[]{""jcr:all""}, true);"
137958,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,477,,"        assertNodeExists(""/tmp/foo/bar/tobi"");"
137959,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,600,,"        assertProperty(""/tmp/test"", ""123"");"
137960,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,603,,"        if (admin.itemExists(""/root-binary-property"")) {"
137961,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,658,,"        assertProperty(""/testroot/a/test"", ""123"");"
137962,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,659,,"        assertProperty(""/testroot/a/jcr:isCheckedOut"", ""false"");"
137963,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageInstallIT.java,659,,"        assertProperty(""/testroot/a/jcr:isCheckedOut"", ""false"");"
137964,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,64,,"        assertFalse(""package must not exist"", registry.contains(TMP_PACKAGE_ID));"
137965,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,73,,"        PackageId id = registry.register(getStream(""/test-packages/tmp.zip""), false);"
137966,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,74,,"        assertEquals(""package id"", TMP_PACKAGE_ID, id);"
137967,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,202,,"        JcrPackageRegistry multiReg = new JcrPackageRegistry(admin, ""/var/packages"" , ""/etc/packages"");"
137968,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,202,,"        JcrPackageRegistry multiReg = new JcrPackageRegistry(admin, ""/var/packages"" , ""/etc/packages"");"
137969,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,249,,"        assertEquals(""resolved dependencies"", """", PackageId.toString(report.getResolvedDependencies()));"
137970,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageRegistryIT.java,250,,"        assertEquals(""unresolved dependencies"", ""my_packages:test_b,my_packages:test_c:[1.0,2.0)"", Dependency.toString(report.getUnresolvedDependencies()));"
137971,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageScopedInstallIT.java,47,,"        assertNodeMissing(""/libs/foo"");"
137972,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PackageScopedInstallIT.java,48,,"        assertNodeMissing(""/tmp/foo"");"
137973,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/PrincipalBasedIT.java,211,,"        extractVaultPackage(""/test-packages/principalbased.zip"", opts);"
137974,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,103,,"        JcrPackage pack = packMgr.upload(getStream(""/test-packages/subtest.zip""), false);"
137975,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,119,,"        assertNodeMissing(""/tmp/a"");"
137976,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,120,,"        assertNodeMissing(""/tmp/b"");"
137977,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,126,,"        assertEquals(""has 1 dependency"", 1, p1.getDefinition().getDependencies().length);"
137978,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,127,,"        assertEquals(""has dependency to parent package"", expected, p1.getDefinition().getDependencies()[0].toString());"
137979,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,287,,"        JcrPackage packNewer = packMgr.upload(getStream(""/test-packages/subtest_extract_contains_newer_version.zip""), false);"
137980,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/SubPackagesIT.java,430,,"        assertEquals(""Package Id"", ids[0], PACKAGE_ID_SUB_A);"
137981,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/UserContentPackageIT.java,122,,"        assertProperty(authPath + ""/"" + NAME_PROFILE_FULLNAME, ""Test User"");"
137982,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/UserContentPackageIT.java,129,,"        assertNull(""test-user-a must not exist"", mgr.getAuthorizable(ID_TEST_USER_A));"
137983,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/UserContentPackageIT.java,137,,"        assertNotNull(""test-user-a must exist"", user);"
137984,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/integration/UserContentPackageIT.java,268,,"        File tmpFile = createPackage(""test"", ""test"", u.getPath());"
137985,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/CompositePackageRegistryTest.java,39,,"    private static final PackageId PACKAGE2 = PackageId.fromString(""my.group:package1:2.0"");"
137986,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,116,,"        assertFalse(""package must not exist"", registry.contains(TMP_PACKAGE_ID));"
137987,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,125,,"        PackageId id = registry.register(getStream(""/test-packages/tmp.zip""), false);"
137988,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,126,,"        assertEquals(""package id"", TMP_PACKAGE_ID, id);"
137989,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,129,,"            assertEquals(""package id of registered is correct"", TMP_PACKAGE_ID, pkg.getId());"
137990,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,130,,"            assertFalse(""Package is not installed"", pkg.isInstalled());"
137991,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,144,,"            fail(""registering the package twice should fail"");"
137992,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,147,,"            assertEquals(""colliding pid must be correct"", id, e.getId());"
137993,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,315,,"                log.info(""{} {}"", action, path);"
137994,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,319,,"                log.info(""E {} {}"", path, e.toString());"
137995,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,455,,"        assertEquals(""resolved dependencies"", """", PackageId.toString(report.getResolvedDependencies()));"
137996,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/registry/impl/FSPackageRegistryIT.java,456,,"        assertEquals(""unresolved dependencies"", ""my_packages:test_b,my_packages:test_c:[1.0,2.0)"","
137997,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/util/DocViewPropertyTest.java,37,,"        DocViewProperty p = DocViewProperty.parse(""foo"", ""hello"");"
137998,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/util/DocViewPropertyTest.java,37,,"        DocViewProperty p = DocViewProperty.parse(""foo"", ""hello"");"
137999,./TargetProjects/jackrabbit-filevault/vault-core/src/test/java/org/apache/jackrabbit/vault/util/DocViewPropertyTest.java,86,,"        assertEquals(p, true, PropertyType.UNDEFINED, ""hello"", ""world"");"
