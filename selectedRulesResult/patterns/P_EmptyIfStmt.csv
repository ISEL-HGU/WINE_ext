Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,if (val.longValue() == -1 || (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE)) {,"if (val.longValue() == -1 || (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE)) {
}
 else {
  throw ActiveMQMessageBundle.BUNDLE.inRangeOfPositiveIntThanMinusOne(name,val);
}
",0,126,9,1020,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
2,if (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE) {,"if (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE) {
}
 else {
  throw ActiveMQMessageBundle.BUNDLE.inRangeOfPositiveInt(name,val);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
3,if (val.intValue() >= Thread.MIN_PRIORITY && val.intValue() <= Thread.MAX_PRIORITY) {,"if (val.intValue() >= Thread.MIN_PRIORITY && val.intValue() <= Thread.MAX_PRIORITY) {
}
 else {
  throw ActiveMQMessageBundle.BUNDLE.mustbeBetween(name,Thread.MIN_PRIORITY,Thread.MAX_PRIORITY,value);
}
",0,10,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
4,} else {,"if (pageInfo != null) {
  pageInfo.decrementPendingTX();
}
 else {
}
",0,0,0,,
5,"if (email == null || """".equals(email)) {","if (email == null || """".equals(email)) {
}
 else {
  PrintWriter out=resp.getWriter();
  BloggingService service=JNDIHelper.getBloggingService();
  BlogAuthor author=service.getBlogAuthor(email);
  HTMLOutput.writeHTMLHeaderPartOne(out,author.getName());
  HTMLOutput.writeHTMLHeaderPartTwo(out);
  out.println(""<h3>Name</h3>"");
  out.print(""<div class=\""text\"">"");
  out.print(author.getFullName());
  out.println(""</div>"");
  out.println(""<h3>Nick Name</h3>"");
  out.print(""<div class=\""text\"">"");
  out.print(author.getName());
  out.println(""</div>"");
  out.println(""<h3>Email</h3>"");
  out.print(""<div class=\""text\"">"");
  out.print(author.getEmailAddress());
  out.println(""</div>"");
  out.println(""<h3>DOB</h3>"");
  out.print(""<div class=\""text\"">"");
  out.print(author.getDateOfBirth());
  out.println(""</div>"");
  out.println(""<h3>Bio</h3>"");
  out.print(""<div class=\""text\"">"");
  out.print(author.getBio());
  out.println(""</div>"");
  out.print(""<a href=\""EditAuthorForm?email="");
  out.print(author.getEmailAddress());
  out.println(""\"">Edit Author Information</a>"");
  HTMLOutput.writeHTMLFooter(out);
}
",0,101,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
6,paramTypes[i] == Object[].class && params[i].getClass() == Object[].class) {,"if (paramTypes[i].isAssignableFrom(params[i].getClass()) || paramTypes[i] == Long.TYPE && params[i].getClass() == Integer.class || paramTypes[i] == Double.TYPE && params[i].getClass() == Integer.class || paramTypes[i] == Long.TYPE && params[i].getClass() == Long.class || paramTypes[i] == Double.TYPE && params[i].getClass() == Double.class || paramTypes[i] == Integer.TYPE && params[i].getClass() == Integer.class || paramTypes[i] == Boolean.TYPE && params[i].getClass() == Boolean.class || paramTypes[i] == Object[].class && params[i].getClass() == Object[].class) {
}
 else {
  match=false;
  break;
}
",0,0,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, ArrayType-elementType, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
Dimension(ArrayType-dimensions, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(SimpleType-name, ArrayType-elementType, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, ),
Dimension(ArrayType-dimensions, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, ),
"
7,} else {,"if (deleteTempQueue) {
  replyTo.delete();
}
 else {
}
",0,0,0,,
8,} else {,"if (inflightMessageCount == 0 || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) {
  assertEquals(""connected to master"",master.getBrokerName(),((ActiveMQConnection)sendConnection).getBrokerName());
}
 else {
}
",0,0,0,,
9,if (first.equals(member) || first.equals(member.getAttribute(FIRST))) {,"if (first.equals(member) || first.equals(member.getAttribute(FIRST))) {
}
 else {
  ((EntityLocal)member).sensors().set(FIRST_MEMBER,false);
  ((EntityLocal)member).sensors().set(FIRST,first);
}
",0,65,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
10,} else {,"if (s != null) {
  super.doOpenCompletion();
}
 else {
}
",0,0,0,,
11,} else {,"if (t != null) {
  super.doOpenCompletion();
}
 else {
}
",0,0,0,,
12,if (returnType.isPrimitive() || returnType.isArray() || Object.class.equals(returnType)) {,"if (returnType.isPrimitive() || returnType.isArray() || Object.class.equals(returnType)) {
}
 else if (returnType.isAssignableFrom(ByteBuffer.class)) {
  result=null;
}
 else if (returnType.isAssignableFrom(Map.class)) {
  result=Collections.unmodifiableMap((Map<?,?>)result);
}
 else if (isProtonType(returnType) && returnType.isInterface()) {
  if (!returnType.getName().equals(""org.apache.qpid.proton.amqp.transport.Source"") && !returnType.getName().equals(""org.apache.qpid.proton.amqp.messaging.Source"") && !returnType.getName().equals(""org.apache.qpid.proton.amqp.transport.Target"")&& !returnType.getName().equals(""org.apache.qpid.proton.amqp.messaging.Target"")) {
    result=wrap(returnType,result);
  }
}
",0,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
13,} else {,"if (!isSharedStore()) {
  configuration.setBindingsDirectory(getBindingsDir(i,false));
  configuration.setJournalDirectory(getJournalDir(i,false));
  configuration.setPagingDirectory(getPageDir(i,false));
  configuration.setLargeMessagesDirectory(getLargeMessagesDir(i,false));
}
 else {
}
",0,0,0,,
14,} else {,"if (!isSharedStore()) {
  configuration.setBindingsDirectory(getBindingsDir(i,true));
  configuration.setJournalDirectory(getJournalDir(i,true));
  configuration.setPagingDirectory(getPageDir(i,true));
  configuration.setLargeMessagesDirectory(getLargeMessagesDir(i,true));
}
 else {
}
",0,0,0,,
15,} else {,"if (bundle.getHeaders().get(Constants.FRAGMENT_HOST) == null) {
  bundle.start(Bundle.START_ACTIVATION_POLICY);
}
 else {
}
",0,0,0,,
16,"if (id.startsWith(""blueprint"") && !(component instanceof PassThroughMetadataImpl)) {","if (id.startsWith(""blueprint"") && !(component instanceof PassThroughMetadataImpl)) {
}
",0,13,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
17,if (Modifier.isPublic(init_cons.getModifiers()) || Modifier.isProtected(init_cons.getModifiers())) {,"if (Modifier.isPublic(init_cons.getModifiers()) || Modifier.isProtected(init_cons.getModifiers())) {
}
 else if (!samePackage(type,initClass)) {
  logger.warning(""Class "" + type.getName() + "" is not properly serializable.  ""+ ""The default constructor of its first ""+ ""non-serializable super-class (""+ initClass.getName()+ "") is not accessible."");
}
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
18,if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {,"if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
}
 else if (LbStickinessMethod.StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
  String tablesize=""200k"";
  String expire=""30m"";
  for (  final Pair<String,String> paramKV : paramsList) {
    final String key=paramKV.first();
    final String value=paramKV.second();
    if (""tablesize"".equalsIgnoreCase(key)) {
      tablesize=value;
    }
    if (""expire"".equalsIgnoreCase(key)) {
      expire=value;
    }
  }
  if (expire != null && !containsOnlyNumbers(expire,timeEndChar)) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: expire is not in timeformat: ""+ expire);
  }
  if (tablesize != null && !containsOnlyNumbers(tablesize,""kmg"")) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: tablesize is not in size format: ""+ tablesize);
  }
}
 else if (LbStickinessMethod.StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
  String length=null;
  String holdTime=null;
  for (  final Pair<String,String> paramKV : paramsList) {
    final String key=paramKV.first();
    final String value=paramKV.second();
    if (""length"".equalsIgnoreCase(key)) {
      length=value;
    }
    if (""holdtime"".equalsIgnoreCase(key)) {
      holdTime=value;
    }
  }
  if (length != null && !containsOnlyNumbers(length,null)) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: length is not a number: ""+ length);
  }
  if (holdTime != null && !containsOnlyNumbers(holdTime,timeEndChar) && !containsOnlyNumbers(holdTime,null)) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: holdtime is not in timeformat: ""+ holdTime);
  }
}
",0,7,5,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
19,{,"if (otherArgNull) {
}
 else if (otherArgClazz) {
}
 else {
  return false;
}
",0,0,0,,
20,{,"if (otherArgClazz) {
}
 else {
  return false;
}
",0,0,0,,
21,{,"if (thisArgClazz) {
}
 else {
  return false;
}
",0,0,0,,
22,{,"if (otherArgClass.equals(Class.class) || thisArgClass.equals(Class.class)) {
}
 else if (!(otherArgClass.isAssignableFrom(thisArgClass) || thisArgClass.isAssignableFrom(otherArgClass))) {
  return false;
}
",0,0,0,,
23,if (args[i] instanceof Class && args[i].equals(parms[i])) {,"if (args[i] instanceof Class && args[i].equals(parms[i])) {
}
 else if (parms[i].isInstance(args[i])) {
}
 else {
  continue methods;
}
",0,1,8,,"SimpleName(ArrayAccess-array, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
24,} else {,"if (unusedBagNames.remove(k)) {
  Object transformed=new SpecialFlagsTransformer(loader,encounteredRegisteredTypeIds).apply(bag.getStringKey(k));
  transformed=convertConfig(Maybe.of(transformed),TypeToken.of(Object.class)).get();
  spec.configure(ConfigKeys.newConfigKey(Object.class,k),transformed);
  keyNamesUsed.add(k);
}
 else {
}
",0,0,0,,
25,} else {,"if (planData.toString().contains(""brooklyn.catalog"")) {
  message=""CAMP blueprint for type definition looks like a catalog file"";
}
 else {
}
",0,0,0,,
26,} else {,"if (entity() != null && entity().getApplication() != null) {
  Set<Entity> toVisit=MutableSet.of(entity().getApplication()), visited=MutableSet.of(entity().getApplication());
  while (!toVisit.isEmpty()) {
    Set<Entity> visiting=MutableSet.copyOf(toVisit);
    toVisit.clear();
    visiting.forEach(e -> {
      e.getChildren().forEach(ec -> {
        if (visited.add(ec))         toVisit.add(ec);
      }
);
    }
);
  }
  entitiesToSearch=visited;
}
 else {
}
",0,0,0,,
27,} else {,"if (required) {
  throw new IllegalStateException(""Catalog BOM must define bundle name and version or include version as part of the id '"" + bundle + ""' (eg '""+ bundle+ "":1.0')"");
}
 else {
}
",0,0,0,,
28,if (format==null && (t instanceof Map || t instanceof Collection)) {,"if (format == null && (t instanceof Map || t instanceof Collection)) {
}
 else {
  catalogItemType=CatalogItemType.BEAN;
}
",0,6,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
29,} else {,"if (specError == null) {
  throw new IllegalStateException(""Guesser resolved but TypeRegistry couldn't create"");
}
 else {
}
",0,0,0,,
30,} else {,"if (maybeValue.isPresent()) {
  ReferenceWithError<?> validation=validateValue((ConfigKey<Object>)configKey,maybeValue.get());
  if (validation.hasError()) {
    violating.put(configKey,validation.getError());
  }
}
 else {
}
",0,0,0,,
31,}  else {,"if (m1id != null) {
  primarilySame=true;
}
 else {
}
",0,0,0,,
32,} else if (interfaces.contains(k.field.getDeclaringClass())) {,"if (interfaces.contains(k.field.getDeclaringClass())) {
}
 else {
  configKeysAll.remove(k.value.getName(),k);
}
",0,12,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
33,"if (unwrapped instanceof IllegalStateException && unwrapped.getMessage() != null && (unwrapped.getMessage().contains(""is not Startable""))) {","if (unwrapped instanceof IllegalStateException && unwrapped.getMessage() != null && (unwrapped.getMessage().contains(""is not Startable""))) {
}
 else {
  throw e;
}
",0,20,9,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
34,} else {,"if (mode.wasNotLoaded()) {
  return false;
}
 else {
}
",0,0,0,,
35,} else {,"if (isInitialManagementContextReal()) {
  initialManagementContext.terminate();
}
 else {
}
",0,0,0,,
36,} else {,"if (catalogItemId != null) {
  String transformedCatalogItemId=null;
  Maybe<RegisteredType> contextRegisteredType=managementContext.getTypeRegistry().getMaybe(catalogItemId,null);
  if (contextRegisteredType.isAbsent()) {
    transformedCatalogItemId=CatalogUpgrades.getTypeUpgradedIfNecessary(managementContext,catalogItemId);
    if (!transformedCatalogItemId.equals(catalogItemId)) {
      logRebindingInfo(""Upgrading "" + bType.getSimpleName().toLowerCase() + "" ""+ contextSuchAsId+ "" stored catalog item context on rebind""+ "" from ""+ catalogItemId+ "" to ""+ transformedCatalogItemId);
      contextRegisteredType=managementContext.getTypeRegistry().getMaybe(transformedCatalogItemId,null);
    }
 else {
      transformedCatalogItemId=null;
    }
  }
  if (contextRegisteredType.isPresent()) {
    transformedCatalogItemId=contextRegisteredType.get().getId();
  }
 else {
    CatalogItem<?,?> catalogItem=findCatalogItemInReboundCatalog(bType,catalogItemId,contextSuchAsId);
    if (catalogItem != null) {
      transformedCatalogItemId=catalogItem.getCatalogItemId();
    }
  }
  if (transformedCatalogItemId != null) {
    try {
      BrooklynClassLoadingContextSequential loader=new BrooklynClassLoadingContextSequential(managementContext);
      loader.add(newClassLoadingContextForCatalogItems(managementContext,transformedCatalogItemId,reboundSearchPath));
      return new LoadedClass<T>(loader.loadClass(jType,bType),transformedCatalogItemId,reboundSearchPath);
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      warnings.add(""unable to load class "" + jType + "" for resovled context type ""+ transformedCatalogItemId);
    }
  }
 else {
    warnings.add(""unable to resolve context type "" + catalogItemId);
  }
}
 else {
}
",0,0,0,,
37,} else {,"if (proxy == null) {
  proxy=createEntityProxy(interfaces,entity);
}
 else {
}
",0,0,0,,
38,if(linaex.getComponent() != null && PromptFormAbstract.ID_CANCEL_BUTTON.equals(linaex.getComponent().getId())) {,"if (linaex.getComponent() != null && PromptFormAbstract.ID_CANCEL_BUTTON.equals(linaex.getComponent().getId())) {
}
 else {
  addMessage(null);
}
",0,4,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
39,} else {,"if (!Objects.equal(cv,dv)) {
  LOG.warn(""SshTool detected deprecated key '"" + deprecatedKey + ""' with different value (""+ dv+ "") ""+ ""than new key '""+ correctKey+ ""' (""+ cv+ ""); ambiguous which will be used"");
}
 else {
}
",0,0,0,,
40,} else {,"if (task.isBegun()) {
  return;
}
 else {
}
",0,0,0,,
41,} else if (AnyoneSecurityProvider.class.getName().equals(provider)) {,"if (AnyoneSecurityProvider.class.getName().equals(provider)) {
}
 else {
  log.warn(""Server told to skip security with unexpected security provider: "" + provider);
}
",0,0,4,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
42,"if (e.getCode() == 500 && e.getMessage().contains(""Message: resourceVersion may not be set on objects to be created"")) {","if (e.getCode() == 500 && e.getMessage().contains(""Message: resourceVersion may not be set on objects to be created"")) {
}
 else {
  throw Throwables.propagate(e);
}
",0,3,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
43,} else {,"if (options.waitForConnectable()) {
  String setupScript=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);
  List<String> setupScripts=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL_LIST);
  Collection<String> allScripts=new MutableList<String>().appendIfNotNull(setupScript).appendAll(setupScripts);
  for (  String setupScriptItem : allScripts) {
    if (Strings.isNonBlank(setupScriptItem)) {
      customisationForLogging.add(""custom setup script "" + setupScriptItem);
      String setupVarsString=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);
      Map<String,String> substitutions=(setupVarsString != null) ? Splitter.on("","").withKeyValueSeparator("":"").split(setupVarsString) : ImmutableMap.<String,String>of();
      String scriptContent=ResourceUtils.create(this).getResourceAsString(setupScriptItem);
      String script=TemplateProcessor.processTemplateContents(scriptContent,getManagementContext(),substitutions);
      if (windows) {
        WinRmToolResponse resp=((WinRmMachineLocation)machineLocation).executeCommand(ImmutableList.copyOf((script.replace(""\r"","""").split(""\n""))));
        if (resp.getStatusCode() != 0) {
          throw new IllegalStateException(""Command 'Customizing node "" + this + ""' failed with exit code ""+ resp.getStatusCode()+ "" for location ""+ machineLocation);
        }
      }
 else {
        executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Customizing node "" + this,ImmutableList.of(script));
      }
    }
  }
  Boolean dontRequireTtyForSudo=setup.get(JcloudsLocationConfig.DONT_REQUIRE_TTY_FOR_SUDO);
  if (Boolean.TRUE.equals(dontRequireTtyForSudo) || (dontRequireTtyForSudo == null && setup.get(DONT_CREATE_USER))) {
    if (windows) {
      LOG.warn(""Ignoring flag DONT_REQUIRE_TTY_FOR_SUDO on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""patch /etc/sudoers to disable requiretty"");
      queueLocationTask(""patch /etc/sudoers to disable requiretty"",SshTasks.dontRequireTtyForSudo((SshMachineLocation)machineLocation,true).newTask().asTask());
    }
  }
  if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM)) {
    if (windows) {
      LOG.warn(""Ignoring flag MAP_DEV_RANDOM_TO_DEV_URANDOM on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""point /dev/random to urandom"");
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""using urandom instead of random"",Arrays.asList(BashCommands.sudo(""mv /dev/random /dev/random-real""),BashCommands.sudo(""ln -s /dev/urandom /dev/random"")));
    }
  }
  if (setup.get(GENERATE_HOSTNAME)) {
    if (windows) {
      LOG.warn(""Ignoring flag GENERATE_HOSTNAME on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""configure hostname"");
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Generate hostname "" + node.getName(),ImmutableList.of(BashCommands.chainGroup(String.format(""echo '127.0.0.1 %s' | ( %s )"",node.getName(),BashCommands.sudo(""tee -a /etc/hosts"")),""{ "" + BashCommands.sudo(""sed -i \""s/HOSTNAME=.*/HOSTNAME="" + node.getName() + ""/g\"" /etc/sysconfig/network"") + "" || true ; }"",BashCommands.sudo(""hostname "" + node.getName()))));
    }
  }
  if (setup.get(OPEN_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag OPEN_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      Iterable<Integer> inboundPorts=Ints.asList(template.getOptions().getInboundPorts());
      if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {
        LOG.info(""No ports to open in iptables (no inbound ports) for {} at {}"",machineLocation,this);
      }
 else {
        customisationForLogging.add(""open iptables"");
        List<String> iptablesRules=Lists.newArrayList();
        if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
          for (          Integer port : inboundPorts) {
            iptablesRules.add(IptablesCommands.addFirewalldRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
          }
        }
 else {
          iptablesRules=Lists.newArrayList();
          for (          Integer port : inboundPorts) {
            iptablesRules.add(IptablesCommands.insertIptablesRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
          }
          iptablesRules.add(IptablesCommands.saveIptablesRules());
        }
        List<String> batch=Lists.newArrayList();
        for (        String rule : iptablesRules) {
          batch.add(rule);
          if (batch.size() == 50) {
            executeCommandWarningOnError((SshMachineLocation)machineLocation,""Inserting iptables rules, 50 command batch"",batch);
            batch.clear();
          }
        }
        if (batch.size() > 0) {
          executeCommandWarningOnError((SshMachineLocation)machineLocation,""Inserting iptables rules"",batch);
        }
        executeCommandWarningOnError((SshMachineLocation)machineLocation,""List iptables rules"",ImmutableList.of(IptablesCommands.listIptablesRule()));
      }
    }
  }
  if (setup.get(STOP_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag STOP_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      customisationForLogging.add(""stop iptables"");
      List<String> cmds=ImmutableList.<String>of();
      if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
        cmds=ImmutableList.of(IptablesCommands.firewalldServiceStop(),IptablesCommands.firewalldServiceStatus());
      }
 else {
        cmds=ImmutableList.of(IptablesCommands.iptablesServiceStop(),IptablesCommands.iptablesServiceStatus());
      }
      executeCommandWarningOnError((SshMachineLocation)machineLocation,""Stopping iptables"",cmds);
    }
  }
  List<String> extraKeyUrlsToAuth=setup.get(EXTRA_PUBLIC_KEY_URLS_TO_AUTH);
  if (extraKeyUrlsToAuth != null && !extraKeyUrlsToAuth.isEmpty()) {
    if (windows) {
      LOG.warn(""Ignoring flag EXTRA_PUBLIC_KEY_URLS_TO_AUTH on Windows location"",machineLocation);
    }
 else {
      List<String> extraKeyDataToAuth=MutableList.of();
      for (      String keyUrl : extraKeyUrlsToAuth) {
        extraKeyDataToAuth.add(ResourceUtils.create().getResourceAsString(keyUrl));
      }
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Authorizing ssh keys from URLs"",ImmutableList.of(new AuthorizeRSAPublicKeys(extraKeyDataToAuth).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
    }
  }
  String extraKeyDataToAuth=setup.get(EXTRA_PUBLIC_KEY_DATA_TO_AUTH);
  if (extraKeyDataToAuth != null && !extraKeyDataToAuth.isEmpty()) {
    if (windows) {
      LOG.warn(""Ignoring flag EXTRA_PUBLIC_KEY_DATA_TO_AUTH on Windows location"",machineLocation);
    }
 else {
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Authorizing ssh keys from data"",ImmutableList.of(new AuthorizeRSAPublicKeys(Collections.singletonList(extraKeyDataToAuth)).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
    }
  }
}
 else {
}
",0,0,0,,
44,} else {,"if (((PortableTemplateBuilder<?>)templateBuilder).imageChooser() == null) {
  Function<Iterable<? extends Image>,Image> chooser=getImageChooser(computeService,config);
  templateBuilder.imageChooser(chooser);
}
 else {
}
",0,0,0,,
45,} else {,"if (valsSummary.max > maxAllowedPoolSize) {
  if (LOG.isTraceEnabled())   LOG.trace(""{} re-scheduling max-reached check for {}, as unbounded size not stable (min {}, max {}, latest {})"",new Object[]{this,poolEntity,valsSummary.min,valsSummary.max,valsSummary.latest});
  scheduleResize(reason);
}
 else {
}
",0,0,0,,
46,} else {,"if (w.entity.equals(currentActive)) {
  bestLive=w;
}
 else {
}
",0,0,0,,
47,} else if (state == null || state == Lifecycle.CREATED || state == Lifecycle.STARTING) {,"if (state == null || state == Lifecycle.CREATED || state == Lifecycle.STARTING) {
}
 else if (state == Lifecycle.STOPPING || state == Lifecycle.STOPPED || state == Lifecycle.DESTROYED) {
  entity.sensors().set(ServiceStateLogic.SERVICE_NOT_UP_DIAGNOSTICS,ImmutableMap.<String,Object>of());
}
 else {
  ((SoftwareProcess)entity).populateServiceNotUpDiagnostics();
}
",0,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
48,} else {,"if (trustSelfSigned) {
  TrustStrategy trustStrategy=new TrustSelfSignedStrategy();
  X509HostnameVerifier hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
  socketFactory=new SSLSocketFactory(trustStrategy,hostnameVerifier);
}
 else {
}
",0,0,0,,
49,} else {,"if (Math.abs(x) < 1 && useEForSmallNumbers) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
50,} else {,"if (Math.abs(x) < 1) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
51,} else {,"if (bodyParameters.isEmpty()) {
  if (Exchange.class.isAssignableFrom(parameterType)) {
    expression=ExpressionBuilder.exchangeExpression();
  }
 else {
    expression=ExpressionBuilder.mandatoryBodyExpression(parameterType,true);
  }
  LOG.trace(""Parameter #{} is the body parameter using expression {}"",i,expression);
  parameterInfo.setExpression(expression);
  bodyParameters.add(parameterInfo);
}
 else {
}
",0,0,0,,
52,"if (""DELETE"".equals(httpMethod) && cxfRsEndpoint.isIgnoreDeleteMethodMessageBody()) {","if (""DELETE"".equals(httpMethod) && cxfRsEndpoint.isIgnoreDeleteMethodMessageBody()) {
}
 else {
  body=binding.bindCamelMessageBodyToRequestBody(inMessage,exchange);
  if (LOG.isTraceEnabled()) {
    LOG.trace(""Request body = {}"",body);
  }
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
53,} else {,"if (tok != null && tok.trim().length() > 0) {
  list.add(new OID(tok.trim()));
}
 else {
}
",0,0,0,,
54,} else {,"if (parent != null) {
  Files.createDirectories(parent);
  Files.copy(file.toPath(),dest,StandardCopyOption.REPLACE_EXISTING);
}
 else {
}
",0,0,0,,
55,} else {,"if (parent != null) {
  Files.createDirectories(parent);
  Files.write(dest,buffer,StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING);
}
 else {
}
",0,0,0,,
56,if (answer.getRoute().getId().equals(otherId)) {,"if (answer.getRoute().getId().equals(otherId)) {
}
 else if (answer.getStartupOrder() == order.getStartupOrder()) {
  throw new FailedToStartRouteException(answer.getRoute().getId(),""startupOrder clash. Route "" + otherId + "" already has startupOrder ""+ answer.getStartupOrder()+ "" configured which this route have as well. Please correct startupOrder to be unique among all your routes."");
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
57,} else {,"if (exception != null) {
  exchange.setException(new CamelExchangeException(""Error creating new instance of "" + exception.getClass(),exchange,e));
}
 else {
}
",0,0,0,,
58,"if (getException(NoSuchComponentException.class, e) != null) {","if (getException(NoSuchComponentException.class,e) != null) {
}
 else if (getException(ComponentDefinitionException.class,e) != null) {
  LOG.warn(""Problem looking up bean: "" + name + "" due: ""+ e.getMessage(),e);
}
 else {
  LOG.trace(""Ignored error looking up bean: "" + name + "" due: ""+ e.getMessage(),e);
}
",0,0,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
59,if (javaClass.isPrimitive() && value instanceof Number && ((Number) value).intValue() == 0) {,"if (javaClass.isPrimitive() && value instanceof Number && ((Number)value).intValue() == 0) {
}
 else {
  idMap.put(dbAttrName,value);
  continue;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
60,} else {,"if (attribute.isUsedForLocking() && dbAttribute.getEntity() == dbRow.getEntity()) {
  dbRow.getQualifier().addAdditionalQualifier(dbAttribute,diff.getSnapshotValue(property.getName()),true);
}
 else {
}
",0,0,0,,
61,} else {,"if ((System.currentTimeMillis() - lastTimeStamp) < (2 * CHECK_PERIOD)) {
  if (!(textFeld.getText().trim().equals(lastText.trim()))) {
    lastText=textFeld.getText();
    EventQueue.invokeLater(new Runnable(){
      public void run(){
        setFilter();
      }
    }
);
  }
}
 else {
}
",0,0,0,,
62,{,"if (!focusOnAction.isEnabled()) {
  setFocusOnSelected(false);
}
 else {
}
",0,0,0,,
63,{,"if (hiddenSet.contains(logger)) {
  style=style | Font.ITALIC;
}
 else {
}
",0,0,0,,
64,} else {,"if (!isPaused() && !isClosed()) {
  if ((receiver != null)) {
    receiver.doPost(event);
  }
 else {
    remoteLogger=repository.getLogger(event.getLoggerName());
    if (event.getLevel().isGreaterOrEqual(remoteLogger.getEffectiveLevel())) {
      remoteLogger.callAppenders(event);
    }
  }
}
 else {
}
",0,0,0,,
65,"if (e.getLocalizedMessage().indexOf(""src-resolve.4.2"") > -1)  {","if (e.getLocalizedMessage().indexOf(""src-resolve.4.2"") > -1) {
}
 else {
  throw new ToolException(""Schema Error : "" + e.getLocalizedMessage(),e);
}
",0,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
66,} else {,"if (valid) {
  ChukwaRecord record=new ChukwaRecord();
  record.setTime(timestamp);
  record.add(""offset"","""" + offset);
  record.add(Record.bodyField,data[1]);
  record.add(Record.sourceField,dataSource);
  records.add(record);
  listSize=records.size();
  if (listSize > maxRows) {
    records.remove(0);
  }
}
 else {
}
",0,0,0,,
67,} else {,"if (svc.equalsIgnoreCase(service.getName())) {
  capabilityMap.put(capability,capabilityValue);
}
 else {
}
",0,0,0,,
68,} else {,"if (isLocalAddress(transportAddress)) {
  TransportEndpointSite endpointSite=null;
synchronized (this) {
    endpointSite=_endpointMap.get(transportAddress.getEndpointId());
  }
  if (endpointSite != null)   endpointSite.addOutputPdu(pdu);
}
 else {
}
",0,0,0,,
69,if (profileInfo.major == 1 && profileInfo.minor == 0) {,"if (profileInfo.major == 1 && profileInfo.minor == 0) {
}
 else {
  for (int i=0; i < profileInfo.components.length; i++)   components.addElement(profileInfo.components[i]);
}
",0,2,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
70,} else {,"if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
  pool.create(0);
}
 else {
}
",0,0,0,,
71,} else {,"if (!NetworkDevice.NetscalerSDXLoadBalancer.getName().equalsIgnoreCase(deviceName)) {
  if (capacity != null) {
    lbDeviceVo.setCapacity(capacity);
  }
}
 else {
}
",0,0,0,,
72,if (typeArguments[0].equals(LdapUserResponse.class)) {,"if (typeArguments[0].equals(LdapUserResponse.class)) {
}
 else {
  msg=new String(""list of return type contains "" + typeArguments[0].getTypeName());
}
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, IfStatement-expression, ),
"
73,if ((entryTime != null) && (duration != null)) {,"if ((entryTime != null) && (duration != null)) {
}
 else {
  eventPair=_eventJoinDao.searchAndCount(sc,searchFilter);
}
",0,1,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
74,} else {,"if (capability != null && capability.equalsIgnoreCase(""true"")) {
  rules=_lbDao.listByNetworkIdAndScheme(network.getId(),scheme);
  if (rules != null && rules.size() > 0) {
    List<LoadBalancingRule> lbrules=new ArrayList<LoadBalancingRule>();
    for (    LoadBalancerVO lb : rules) {
      List<LbDestination> dstList=getExistingDestinations(lb.getId());
      List<LbHealthCheckPolicy> hcPolicyList=getHealthCheckPolicies(lb.getId());
      Ip sourceIp=getSourceIp(lb);
      LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,null,hcPolicyList,sourceIp,null,lb.getLbProtocol());
      lbrules.add(loadBalancing);
    }
    if (lbrules.size() > 0) {
      isHandled=false;
      for (      LoadBalancingServiceProvider lbElement : _lbProviders) {
        stateRules=lbElement.updateHealthChecks(network,lbrules);
        if (stateRules != null && stateRules.size() > 0) {
          for (          LoadBalancerTO lbto : stateRules) {
            LoadBalancerVO ulb=_lbDao.findByUuid(lbto.getUuid());
            List<LoadBalancerVMMapVO> lbVmMaps=_lb2VmMapDao.listByLoadBalancerId(ulb.getId());
            for (            LoadBalancerVMMapVO lbVmMap : lbVmMaps) {
              UserVm vm=_vmDao.findById(lbVmMap.getInstanceId());
              Nic nic=_nicDao.findByInstanceIdAndNetworkIdIncludingRemoved(ulb.getNetworkId(),vm.getId());
              String dstIp=lbVmMap.getInstanceIp() == null ? nic.getIPv4Address() : lbVmMap.getInstanceIp();
              for (int i=0; i < lbto.getDestinations().length; i++) {
                LoadBalancerTO.DestinationTO des=lbto.getDestinations()[i];
                if (dstIp.equalsIgnoreCase(lbto.getDestinations()[i].getDestIp())) {
                  lbVmMap.setState(des.getMonitorState());
                  _lb2VmMapDao.persist(lbVmMap);
                  s_logger.debug(""Updating the LB VM Map table with the service state"");
                }
              }
            }
          }
          isHandled=true;
        }
        if (isHandled) {
          break;
        }
      }
    }
  }
}
 else {
}
",0,0,0,,
75,if (compressed && (flags & NO_BITMAP_COMPRESSION_HDR) == 0) {,"if (compressed && (flags & NO_BITMAP_COMPRESSION_HDR) == 0) {
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
76,{,"if (buf.length != length) {
}
",0,0,0,,
77,if (endVals[chgi] == null) {,"if (endVals[chgi] == null) {
}
 else if (endVals[chgi].toString().contains(""val: null"")) {
  Element stateElement=(Element)endVals[chgi];
  if (stateElement != null && stateElement.getFirstChild() != null) {
    stateVal=stateElement.getFirstChild().getTextContent();
    reached=expctdval.toString().equalsIgnoreCase(stateVal) || reached;
  }
}
 else {
  reached=expctdval.equals(endVals[chgi]) || reached;
  stateVal=""filtervals"";
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
78,} else {,"if (!clas.startsWith(""java/"") && allClasses.get(clas) == null) {
  dependents.put(clas,from);
}
 else {
}
",0,0,0,,
79,}else{,"if (!(value instanceof ReferenceType)) {
  constraintViolated(o,""The 'value' is not of a ReferenceType but of type "" + value + ""."");
}
 else {
}
",0,0,0,,
80,"} else if (System.getProperty(""java.vendor"").equals(""IBM Corporation"") && (jar.equals(""bcel-5.2.jar"") || jar.equals(""jaka rta-regexp-1.4.jar"") || jar.equals(""xalan-2.7.0.jar"") || jar.equals(""xml-apis-1.0.b2.jar""))) {","if (System.getProperty(""java.vendor"").equals(""IBM Corporation"") && (jar.equals(""bcel-5.2.jar"") || jar.equals(""jaka rta-regexp-1.4.jar"") || jar.equals(""xalan-2.7.0.jar"")|| jar.equals(""xml-apis-1.0.b2.jar""))) {
}
 else {
  badJars.add(jar);
}
",0,4,17,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
81,{,"if (t instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown NoSuchMethodException, threw "" + t);
}
",0,0,0,,
82,{,"if (msg.indexOf(""badprop"") >= 0) {
}
 else {
  fail(""Unexpected parse exception:"" + e.getMessage());
}
",0,0,0,,
83,{,"if (e instanceof NoSuchMethodException) {
}
 else if (e instanceof SAXException) {
  final Exception ee=((SAXException)e).getException();
  if (ee != null) {
    if (ee instanceof NoSuchMethodException) {
    }
 else {
      fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
    }
  }
 else {
    fail(""Should have thrown NoSuchMethodException, threw "" + e.getClass().getName());
  }
}
 else {
  fail(""Should have thrown NoSuchMethodException, threw "" + e);
}
",0,0,0,,
84,{,"if (ee instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
}
",0,0,0,,
85,{,"if (e instanceof NoSuchMethodException) {
}
 else if (e instanceof InvocationTargetException) {
  final Throwable t=((InvocationTargetException)e).getTargetException();
  if (t instanceof NoSuchMethodException) {
  }
 else {
    fail(""Should have thrown ITE->NoSuchMethodException, threw "" + t);
  }
}
 else if (e instanceof SAXException) {
  final Exception ee=((SAXException)e).getException();
  if (ee != null) {
    if (ee instanceof NoSuchMethodException) {
    }
 else {
      fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
    }
  }
 else {
    fail(""Should have thrown NoSuchMethodException, threw "" + e.getClass().getName());
  }
}
 else {
  fail(""Should have thrown NoSuchMethodException, threw "" + e);
}
",0,0,0,,
86,{,"if (t instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown ITE->NoSuchMethodException, threw "" + t);
}
",0,0,0,,
87,{,"if (ee instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
}
",0,0,0,,
88,} else if (c == ' ' || c == '\t' || c == '\r' || c == '\n') {,"if (c == ' ' || c == '\t' || c == '\r' || c == '\n') {
}
 else {
  throw new ImageReadException(""Unhandled/invalid character '"" + ((char)c) + ""' found in XPM file"");
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
89,{,"if (element != null) {
}
 else {
}
",0,0,0,,
90,{,"if (element != null) {
}
 else {
}
",0,0,0,,
91,{,"if (element != null) {
}
 else {
}
",0,0,0,,
92,{,"if (element != null) {
}
 else {
}
",0,0,0,,
93,{,"if (res == null) {
}
",0,0,0,,
94,{,"if (task.equalsIgnoreCase(""stats"")) {
}
 else {
  if (key != null) {
    if (key.toUpperCase().equals(""ALL"")) {
      cache.removeAll();
      if (log.isDebugEnabled()) {
        log.debug(""Removed all elements from "" + hashtableName);
      }
      out.println(""key = "" + key);
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""key = "" + key);
      }
      out.println(""key = "" + key);
      StringTokenizer toke=new StringTokenizer(key,""_"");
      while (toke.hasMoreElements()) {
        String temp=(String)toke.nextElement();
        cache.remove(key);
        if (log.isDebugEnabled()) {
          log.debug(""Removed "" + temp + "" from ""+ hashtableName);
        }
      }
    }
  }
 else {
    out.println(""key is null"");
  }
}
",0,0,0,,
95,{,"if (ice == null) {
}
",0,0,0,,
96,{,"if (T1.size() + T2.size() + B1.size()+ B2.size() >= 2 * maxSize) {
  temp=(ElementDescriptor)B2.removeLast();
  if (temp != null) {
    map.remove(temp.key);
  }
}
 else {
}
",0,0,0,,
97,{,"if (T1.size() + T2.size() + B1.size()+ B2.size() >= maxSize) {
  if (T1.size() + T2.size() + B1.size()+ B2.size() >= 2 * maxSize) {
    temp=(ElementDescriptor)B2.removeLast();
    if (temp != null) {
      map.remove(temp.key);
    }
  }
 else {
  }
  replace(temp);
}
 else {
}
",0,0,0,,
98,{,"if (!_isMvel) {
  _expression=(SimpleNode)Ognl.parseExpression(expressionString);
  _compiledExpression=(SimpleNode)Ognl.compileExpression(_context,_root,expressionString);
  Ognl.getValue(_expression,_context,_root);
  _context.put(""contextValue"",""cvalue"");
}
 else {
}
",0,0,0,,
99,{,"if (!_isMvel) {
  if (compiled)   Ognl.getValue(_compiledExpression.getAccessor(),_context,_root);
 else   Ognl.getValue(_expression,_context,_root);
}
 else {
}
",0,0,0,,
100,if (!idleQueue.offerFirst(this)) {,"if (!idleQueue.offerFirst(this)) {
}
",0,0,3,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
101,"if (!invoker.invokeProtocolHandlersHandleFault(isRequestor(message), context)) {","if (!invoker.invokeProtocolHandlersHandleFault(isRequestor(message),context)) {
}
",0,3,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
102,} else {,"if (s.getInputStream() instanceof DelegatingInputStream) {
  cache((DelegatingInputStream)s.getInputStream());
}
 else {
}
",0,0,0,,
103,} else {,"if (this.origErrorHandler != null) {
  this.origErrorHandler.warning(exception);
}
 else {
}
",0,0,0,,
104,"} else if (""insecure"".equals(args[1])) {","if (""insecure"".equals(args[1])) {
}
 else {
  System.out.println(""arg1 needs to be either secure or insecure"");
  System.exit(1);
}
",0,0,4,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
"
105,} else if (beanClass == Object.class || beanClass == Throwable.class) {,"if (beanClass == Object.class || beanClass == Throwable.class) {
}
 else if (RuntimeException.class.isAssignableFrom(beanClass)) {
  beanInfo=Introspector.getBeanInfo(beanClass,RuntimeException.class);
}
 else if (Exception.class.isAssignableFrom(beanClass) && !Exception.class.equals(beanClass)) {
  beanInfo=Introspector.getBeanInfo(beanClass,Exception.class);
}
 else if (Throwable.class.isAssignableFrom(beanClass)) {
  beanInfo=Introspector.getBeanInfo(beanClass,Throwable.class);
}
 else {
  beanInfo=Introspector.getBeanInfo(beanClass,Object.class);
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
106,} else {,"if (range == null) {
  IOUtils.copyAndCloseInput(is,os,bufferSize);
}
 else {
}
",0,0,0,,
107,} else {,"if (rb == null) {
  rb=Response.ok();
}
 else {
}
",0,0,0,,
108,} else {,"if (!requestor) {
}
 else {
}
",0,0,0,,
109,} else {,"if (!requestor) {
  handleAbort(message,null);
}
 else {
}
",0,0,0,,
110,} else {,"if (requestor) {
  message.getInterceptorChain().abort();
  if (!message.getExchange().isOneWay()) {
    Endpoint e=message.getExchange().getEndpoint();
    Message responseMsg=new MessageImpl();
    responseMsg.setExchange(message.getExchange());
    responseMsg=e.getBinding().createMessage(responseMsg);
    MessageObserver observer=message.getExchange().get(MessageObserver.class);
    if (observer != null) {
      responseMsg.setContent(XMLStreamReader.class,message.getContent(XMLStreamReader.class));
      message.getExchange().setInMessage(responseMsg);
      responseMsg.put(InterceptorChain.STARTING_AT_INTERCEPTOR_ID,LogicalHandlerInInterceptor.class.getName());
      observer.onMessage(responseMsg);
    }
    return;
  }
}
 else {
}
",0,0,0,,
111,} else {,"if (!getInvoker(message).isOutbound()) {
}
 else {
}
",0,0,0,,
112,} else {,"if (!getInvoker(message).isOutbound()) {
  message.getInterceptorChain().abort();
  Endpoint e=message.getExchange().getEndpoint();
  if (!message.getExchange().isOneWay()) {
    Message responseMsg=new MessageImpl();
    responseMsg.setExchange(message.getExchange());
    responseMsg=e.getBinding().createMessage(responseMsg);
    message.getExchange().setOutMessage(responseMsg);
    SOAPMessage soapMessage=((SOAPMessageContext)context).getMessage();
    responseMsg.setContent(SOAPMessage.class,soapMessage);
    InterceptorChain chain=OutgoingChainInterceptor.getOutInterceptorChain(message.getExchange());
    responseMsg.setInterceptorChain(chain);
    chain.doInterceptStartingAfter(responseMsg,SoapPreProtocolOutInterceptor.class.getName());
  }
}
 else {
}
",0,0,0,,
113,if (storedUser != null || storedPassword != null) {,"if (storedUser != null || storedPassword != null) {
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
114,} else {,"if (consumer != null) {
  boolean secretAvailable=!StringUtils.isEmpty(consumer.getClientSecret());
  if (setAuthorizationHeader && secretAvailable) {
    accessTokenService.replaceHeader(HttpHeaders.AUTHORIZATION,DefaultBasicAuthSupplier.getBasicAuthHeader(consumer.getClientId(),consumer.getClientSecret()));
  }
 else {
    form.param(OAuthConstants.CLIENT_ID,consumer.getClientId());
    if (secretAvailable) {
      form.param(OAuthConstants.CLIENT_SECRET,consumer.getClientSecret());
    }
  }
}
 else {
}
",0,0,0,,
115,} else {,"if (socketFactory == null) {
  final SSLContext ctx;
  if (tlsClientParameters.getSslContext() != null) {
    ctx=tlsClientParameters.getSslContext();
  }
 else {
    ctx=org.apache.cxf.transport.https.SSLUtils.getSSLContext(tlsClientParameters);
  }
  String[] cipherSuites=SSLUtils.getCiphersuitesToInclude(tlsClientParameters.getCipherSuites(),tlsClientParameters.getCipherSuitesFilter(),ctx.getSocketFactory().getDefaultCipherSuites(),SSLUtils.getSupportedCipherSuites(ctx),LOG);
  String protocol=tlsClientParameters.getSecureSocketProtocol() != null ? tlsClientParameters.getSecureSocketProtocol() : ctx.getProtocol();
  socketFactory=new SSLSocketFactoryWrapper(ctx.getSocketFactory(),cipherSuites,protocol);
  lastTlsHash=tlsClientParameters.hashCode();
}
 else {
}
",0,0,0,,
116,} else if (o instanceof byte[]) {,"if (o instanceof byte[]) {
}
",0,0,3,,"SimpleName(InstanceofExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(ArrayType-elementType, InstanceofExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
117,if (this.xPaths == null || this.xPaths.isEmpty()) {,"if (this.xPaths == null || this.xPaths.isEmpty()) {
}
",0,0,6,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
118,} else {,"if (token instanceof SamlToken) {
  SamlAssertionWrapper assertionWrapper=addSamlToken((SamlToken)token);
  if (assertionWrapper != null) {
    Element envelope=saaj.getSOAPPart().getEnvelope();
    envelope=(Element)DOMUtils.getDomElement(envelope);
    addSupportingElement(assertionWrapper.toDOM(envelope.getOwnerDocument()));
  }
}
 else {
}
",0,0,0,,
119,} else {,"if (validateTarget.getState().equals(STATE.VALID)) {
  processValidToken(providerParameters,validateTarget,tokenResponse);
}
 else {
}
",0,0,0,,
120,} else {,"if (outboundProperty.booleanValue()) {
}
 else {
}
",0,0,0,,
121,} else {,"if (outboundProperty.booleanValue()) {
}
 else {
}
",0,0,0,,
122,"if (""main"".equals(stackTraceElements[frame0].getMethodName())) {","if (""main"".equals(stackTraceElements[frame0].getMethodName())) {
}
",0,3,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
123,} else {,"if (msg != null) {
  cm.add(msg);
}
 else {
}
",0,0,0,,
124,} else {,"if (!mapper.containsExcludedModule(moduleScope.toString(ToolCorbaConstants.MODULE_SEPARATOR))) {
  DefinitionVisitor definitionVisitor=new DefinitionVisitor(moduleScope,definition,schema,wsdlVisitor);
  definitionVisitor.visit(definitionNode);
}
 else {
}
",0,0,0,,
125,} else {,"if (node2 != null && node2.getType() == IDLTokenTypes.LITERAL_long) {
  AST node3=node2.getNextSibling();
  if (node3 != null && node3.getType() == IDLTokenTypes.LITERAL_long) {
    result=CorbaConstants.NT_CORBA_ULONGLONG;
  }
 else {
    result=CorbaConstants.NT_CORBA_ULONG;
  }
}
 else {
}
",0,0,0,,
126,} else {,"if (type instanceof Struct) {
  Struct struct=(Struct)type;
  String[] testResult;
  if (""X.op_a"".equals(struct.getName())) {
    testResult=new String[]{""X.op_a"",""X.op_a"",""p1"",""X.S"",""p2"",""X.S""};
  }
 else   if (""X.op_aResult"".equals(struct.getName())) {
    testResult=new String[]{""X.op_aResult"",""X.op_aResult"",""return"",""X.S"",""p2"",""X.S""};
  }
 else {
    testResult=new String[]{""X.S"",""X.S"",""str"",""X._1_S"",""fx"",""X._2_S""};
  }
  assertEquals(""Name is incorrect for Anon Array Type"",testResult[0],struct.getName());
  assertEquals(""Type is incorrect for Struct Type"",testResult[1],struct.getType().getLocalPart());
  assertEquals(""Name for first Struct Member Type is incorrect"",testResult[2],struct.getMember().get(0).getName());
  assertEquals(""Idltype for first Struct Member Type is incorrect"",testResult[3],struct.getMember().get(0).getIdltype().getLocalPart());
  assertEquals(""Name for second Struct Member Type is incorrect"",testResult[4],struct.getMember().get(1).getName());
  assertEquals(""Idltype for second Struct Member Type is incorrect"",testResult[5],struct.getMember().get(1).getIdltype().getLocalPart());
}
 else {
}
",0,0,0,,
127,} else {,"if (version == WSDLConstants.WSDLVersion.WSDL11) {
  AbstractWSDLBuilder builder=frontend.getWSDLBuilder();
  builder.setContext(context);
  builder.setBus(getBus());
  context.put(Bus.class,getBus());
  wsdlURL=URIParserUtil.getAbsoluteURI(wsdlURL);
  builder.build(wsdlURL);
  builder.customize();
  Definition definition=builder.getWSDLModel();
  context.put(Definition.class,definition);
  builder.validate(definition);
  WSDLServiceBuilder serviceBuilder=new WSDLServiceBuilder(getBus());
  if (context.isVerbose()) {
    serviceBuilder.setUnwrapLogLevel(Level.INFO);
  }
  serviceBuilder.setIgnoreUnknownBindings(true);
  String allowRefs=(String)context.get(ToolConstants.CFG_ALLOW_ELEMENT_REFS);
  if (!StringUtils.isEmpty(allowRefs) || context.optionSet(ToolConstants.CFG_ALLOW_ELEMENT_REFS)) {
    if (allowRefs.length() > 0 && allowRefs.charAt(0) == '=') {
      allowRefs=allowRefs.substring(1);
    }
    if (StringUtils.isEmpty(allowRefs)) {
      allowRefs=""true"";
    }
    serviceBuilder.setAllowElementRefs(Boolean.valueOf(allowRefs));
  }
  String serviceName=(String)context.get(ToolConstants.CFG_SERVICENAME);
  if (serviceName != null) {
    List<ServiceInfo> services=serviceBuilder.buildServices(definition,getServiceQName(definition));
    serviceList.addAll(services);
  }
 else   if (definition.getServices().size() > 0) {
    serviceList=serviceBuilder.buildServices(definition);
  }
 else {
    serviceList=serviceBuilder.buildMockServices(definition);
  }
  getBus().getExtension(WSDLManager.class).removeDefinition(definition);
}
 else {
}
",0,0,0,,
128,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
129,} else {,"if (taskMonitor.getNumRunningTasks() < maxNumConcurrentSubTasks) {
  submitNewTask(taskMonitor,subTaskSpecIterator.next());
}
 else {
}
",0,0,0,,
130,&& actual.getShardSpec().getClass() == LinearShardSpec.class) {,"if (expected.getShardSpec().getClass() == LinearShardSpec.class && actual.getShardSpec().getClass() == LinearShardSpec.class) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, ),
"
131,else {,"if (index > sequenceNumber) {
  IMAPMessage message=(IMAPMessage)messageCache.get(key);
  message.setSequenceNumber(index - 1);
  newCache.put(new Integer(index - 1),message);
}
 else {
}
",0,0,0,,
132,else {,"if (index > sequenceNumber) {
  IMAPMessage message=(IMAPMessage)messageCache.get(key);
  message.setSequenceNumber(index - 1);
  newCache.put(new Integer(index - 1),message);
}
 else {
}
",0,0,0,,
133,else {,"if (index > sequenceNumber) {
  IMAPMessage message=(IMAPMessage)messageCache.get(key);
  message.setSequenceNumber(index - 1);
  newCache.put(new Integer(index - 1),message);
}
 else {
}
",0,0,0,,
134,} else {,"if (!(expectedValue instanceof ContextUtil.Node)) {
  assertEquals(""list of "" + name + "" on ""+ contextName+ "" for value for ""+ expectedName,expectedValue.getClass().getName(),actualValue);
}
 else {
}
",0,0,0,,
135,else {,"if (processExited.getCount() != 0) {
  e.printStackTrace();
  throw new Error(e);
}
 else {
}
",0,0,0,,
136,} else {,"if (_servant == null) {
  super._servant_postinvoke(servant);
}
 else {
}
",0,0,0,,
137,if (obj instanceof org.omg.CORBA.Object || obj instanceof Serializable) {,"if (obj instanceof org.omg.CORBA.Object || obj instanceof Serializable) {
}
 else if (obj instanceof Remote) {
  org.omg.CORBA.Object objref=null;
  try {
    objref=(org.omg.CORBA.Object)PortableRemoteObject.toStub((Remote)obj);
  }
 catch (  java.rmi.NoSuchObjectException ex) {
  }
  if (objref == null) {
    try {
      PortableRemoteObject.exportObject((Remote)obj);
      objref=(org.omg.CORBA.Object)PortableRemoteObject.toStub((Remote)obj);
    }
 catch (    RemoteException ex) {
      throw (MARSHAL)new MARSHAL(""unable to export object"").initCause(ex);
    }
  }
  obj=objref;
}
",0,0,4,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
138,".summary(""check whether ""+altInstallDir+"" is set up"")).asTask().getUnchecked()==0) {","if (DynamicTasks.queue(SshEffectorTasks.ssh(""ls "" + altInstallDir + ""/pg_ctl"").allowingNonZeroExitCode().summary(""check whether "" + altInstallDir + "" is set up"")).asTask().getUnchecked() == 0) {
}
 else {
  DynamicTasks.queue(SshEffectorTasks.ssh(""mkdir -p "" + altInstallDir,""rm -rf '"" + altInstallDir + ""'"",""mv "" + getInstallDir() + "" ""+ altInstallDir,""rm -rf '"" + getInstallDir() + ""'"",""ln -s "" + altInstallDir + "" ""+ getInstallDir(),""mkdir -p "" + newRunDir,""chown -R postgres:postgres "" + altTarget).runAsRoot().requiringExitCodeZero().summary(""move install dir from user to postgres owned space""));
}
",0,0,7,,"SimpleName(),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(),
SimpleName(),
NumberLiteral(),
"
139,"if (flags.containsKey(CassandraNode.TOKENS) || flags.containsKey(""tokens"") || flags.containsKey(""cassandra.tokens"")) {","if (flags.containsKey(CassandraNode.TOKENS) || flags.containsKey(""tokens"") || flags.containsKey(""cassandra.tokens"")) {
}
 else if (!useVnodes()) {
  BigInteger token=getTokenGenerator().newToken();
  if (token != null) {
    allflags.put(CassandraNode.TOKENS,ImmutableSet.of(token));
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
140,"if ((flags.containsKey(CassandraNode.NUM_TOKENS_PER_NODE) || flags.containsKey(""numTokensPerNode""))) {","if ((flags.containsKey(CassandraNode.NUM_TOKENS_PER_NODE) || flags.containsKey(""numTokensPerNode""))) {
}
 else if (useVnodes()) {
  Integer numTokensPerNode=getConfig(NUM_TOKENS_PER_NODE);
  allflags.put(CassandraNode.NUM_TOKENS_PER_NODE,numTokensPerNode);
}
 else {
  allflags.put(CassandraNode.NUM_TOKENS_PER_NODE,1);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
141,"if (protos != null && hasProtocol(protos, ""https"")) {","if (protos != null && hasProtocol(protos,""https"")) {
}
 else {
  log.warn(""Misconfiguration for "" + this + "": ENABLED_PROTOCOLS='""+ protos+ ""' for ""+ s+ "" but sslConfig=""+ sslConfig);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
142,} else {,"if (extension.matches("".AR"")) {
  result=result.substring(0,result.length() - 4);
  if (result.equalsIgnoreCase(""/ROOT""))   result=""/"";
}
 else {
}
",0,0,0,,
143,} else {,"if (mode.wasNotLoaded()) {
  return false;
}
 else {
}
",0,0,0,,
144,} else {,"if (isInitialManagementContextReal()) {
  initialManagementContext.terminate();
}
 else {
}
",0,0,0,,
145,} else {,"if (proxy == null) {
  proxy=createEntityProxy(interfaces,entity);
}
 else {
}
",0,0,0,,
146,} else {,"if (!Objects.equal(cv,dv)) {
  LOG.warn(""SshTool detected deprecated key '"" + deprecatedKey + ""' with different value (""+ dv+ "") ""+ ""than new key '""+ correctKey+ ""' (""+ cv+ ""); ambiguous which will be used"");
}
 else {
}
",0,0,0,,
147,} else {,"if (machine instanceof JcloudsSshMachineLocation) {
  customize(location,computeService,(JcloudsSshMachineLocation)machine);
}
 else {
}
",0,0,0,,
148,} else {,"if (machine instanceof JcloudsSshMachineLocation) {
  preRelease((JcloudsSshMachineLocation)machine);
}
 else {
}
",0,0,0,,
149,} else {,"if (machine instanceof JcloudsSshMachineLocation) {
  postRelease((JcloudsSshMachineLocation)machine);
}
 else {
}
",0,0,0,,
150,} else {,"if (waitForSshable) {
  String setupScript=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);
  List<String> setupScripts=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL_LIST);
  Collection<String> allScripts=new MutableList<String>().appendIfNotNull(setupScript).appendAll(setupScripts);
  for (  String setupScriptItem : allScripts) {
    if (Strings.isNonBlank(setupScriptItem)) {
      customisationForLogging.add(""custom setup script "" + setupScriptItem);
      String setupVarsString=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);
      Map<String,String> substitutions=(setupVarsString != null) ? Splitter.on("","").withKeyValueSeparator("":"").split(setupVarsString) : ImmutableMap.<String,String>of();
      String scriptContent=ResourceUtils.create(this).getResourceAsString(setupScriptItem);
      String script=TemplateProcessor.processTemplateContents(scriptContent,getManagementContext(),substitutions);
      if (windows) {
        ((WinRmMachineLocation)machineLocation).executeCommand(ImmutableList.copyOf((script.replace(""\r"","""").split(""\n""))));
      }
 else {
        ((SshMachineLocation)machineLocation).execCommands(""Customizing node "" + this,ImmutableList.of(script));
      }
    }
  }
  if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM)) {
    if (windows) {
      LOG.warn(""Ignoring flag MAP_DEV_RANDOM_TO_DEV_URANDOM on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""point /dev/random to urandom"");
      ((SshMachineLocation)machineLocation).execCommands(""using urandom instead of random"",Arrays.asList(""sudo mv /dev/random /dev/random-real"",""sudo ln -s /dev/urandom /dev/random""));
    }
  }
  if (setup.get(GENERATE_HOSTNAME)) {
    if (windows) {
      LOG.warn(""Ignoring flag GENERATE_HOSTNAME on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""configure hostname"");
      ((SshMachineLocation)machineLocation).execCommands(""Generate hostname "" + node.getName(),Arrays.asList(""sudo hostname "" + node.getName(),""sudo sed -i \""s/HOSTNAME=.*/HOSTNAME="" + node.getName() + ""/g\"" /etc/sysconfig/network"",""sudo bash -c \""echo 127.0.0.1   `hostname` >> /etc/hosts\""""));
    }
  }
  if (setup.get(OPEN_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag OPEN_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      @SuppressWarnings(""unchecked"") Iterable<Integer> inboundPorts=(Iterable<Integer>)setup.get(INBOUND_PORTS);
      if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {
        LOG.info(""No ports to open in iptables (no inbound ports) for {} at {}"",machineLocation,this);
      }
 else {
        customisationForLogging.add(""open iptables"");
        List<String> iptablesRules=Lists.newArrayList();
        if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
          for (          Integer port : inboundPorts) {
            iptablesRules.add(IptablesCommands.addFirewalldRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
          }
        }
 else {
          iptablesRules=createIptablesRulesForNetworkInterface(inboundPorts);
          iptablesRules.add(IptablesCommands.saveIptablesRules());
        }
        List<String> batch=Lists.newArrayList();
        for (        String rule : iptablesRules) {
          batch.add(rule);
          if (batch.size() == 50) {
            ((SshMachineLocation)machineLocation).execCommands(""Inserting iptables rules, 50 command batch"",batch);
            batch.clear();
          }
        }
        if (batch.size() > 0) {
          ((SshMachineLocation)machineLocation).execCommands(""Inserting iptables rules"",batch);
        }
        ((SshMachineLocation)machineLocation).execCommands(""List iptables rules"",ImmutableList.of(IptablesCommands.listIptablesRule()));
      }
    }
  }
  if (setup.get(STOP_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag STOP_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      customisationForLogging.add(""stop iptables"");
      List<String> cmds=ImmutableList.<String>of();
      if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
        cmds=ImmutableList.of(IptablesCommands.firewalldServiceStop(),IptablesCommands.firewalldServiceStatus());
      }
 else {
        cmds=ImmutableList.of(IptablesCommands.iptablesServiceStop(),IptablesCommands.iptablesServiceStatus());
      }
      ((SshMachineLocation)machineLocation).execCommands(""Stopping iptables"",cmds);
    }
  }
  List<String> extraKeyUrlsToAuth=setup.get(EXTRA_PUBLIC_KEY_URLS_TO_AUTH);
  if (extraKeyUrlsToAuth != null && !extraKeyUrlsToAuth.isEmpty()) {
    if (windows) {
      LOG.warn(""Ignoring flag EXTRA_PUBLIC_KEY_URLS_TO_AUTH on Windows location"",machineLocation);
    }
 else {
      List<String> extraKeyDataToAuth=MutableList.of();
      for (      String keyUrl : extraKeyUrlsToAuth) {
        extraKeyDataToAuth.add(ResourceUtils.create().getResourceAsString(keyUrl));
      }
      ((SshMachineLocation)machineLocation).execCommands(""Authorizing ssh keys"",ImmutableList.of(new AuthorizeRSAPublicKeys(extraKeyDataToAuth).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
    }
  }
}
 else {
}
",0,0,0,,
151,} else {,"if (((PortableTemplateBuilder<?>)templateBuilder).imageChooser() == null) {
  Function<Iterable<? extends Image>,Image> chooser=config.get(JcloudsLocationConfig.IMAGE_CHOOSER);
  chooser=BrooklynImageChooser.cloneFor(chooser,computeService);
  templateBuilder.imageChooser(chooser);
}
 else {
}
",0,0,0,,
152,} else {,"if (valsSummary.max > maxAllowedPoolSize) {
  if (LOG.isTraceEnabled())   LOG.trace(""{} re-scheduling max-reached check for {}, as unbounded size not stable (min {}, max {}, latest {})"",new Object[]{this,poolEntity,valsSummary.min,valsSummary.max,valsSummary.latest});
  scheduleResize();
}
 else {
}
",0,0,0,,
153,} else {,"if (trustSelfSigned) {
  TrustStrategy trustStrategy=new TrustSelfSignedStrategy();
  X509HostnameVerifier hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
  socketFactory=new SSLSocketFactory(trustStrategy,hostnameVerifier);
}
 else {
}
",0,0,0,,
154,} else {,"if (Math.abs(x) < 1 && useEForSmallNumbers) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
155,} else {,"if (Math.abs(x) < 1) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
156,if (this.getRepository() != null) {,"if (this.getRepository() != null) {
}
",0,0,3,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
157,} else {,"if (textBytes[fieldId] != null) {
  try {
    values[fieldId]=serializeDeserialize.deserialize(schema.getColumn(fieldId),textBytes[fieldId],0,textBytes[fieldId].length,nullBytes);
  }
 catch (  Exception e) {
    values[fieldId]=NullDatum.get();
  }
  textBytes[fieldId]=null;
}
 else {
}
",0,0,0,,
158,} else {,"if (objAsCommandDto != null) {
  commandsDto.getCommandDto().add(objAsCommandDto);
}
 else {
}
",0,0,0,,
159,} else {,"if (rightFacet.isPresent()) {
  reportFacetNotInOther(diffModel,RIGHT_SYMBOL,typeOrMemberId,rightFacet.get());
}
 else {
}
",0,0,0,,
160,} else {,"if (submitCallback.test(pendingArgs.getParamValues())) {
  close();
}
 else {
}
",0,0,0,,
161,} else {,"if (vaadinAuthenticationHandler.loginToSession(authenticationRequest)) {
  getUI().ifPresent(ui -> ui.navigate(MainViewVaa.class));
}
 else {
}
",0,0,0,,
162,&& !existingFacet.getPrecedence().isFallback()) {,"if (existingFacet != null && !existingFacet.getPrecedence().isFallback()) {
}
 else {
  addFacet(new BigDecimalFacetFallback(holder));
}
",0,0,3,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
"
163,if (part.getRelationshipsPart(false) == null) {,"if (part.getRelationshipsPart(false) == null) {
}
 else {
  traverseRelationships(opcPackage,part.getRelationshipsPart(false),sb,indent + ""    "");
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
164,} else {,"if (property != null) {
  final OneToOneAssociation otoa=property.getOneToOneAssociation();
  final Object value=cellMarshaller.getCellValue(cell,otoa);
  if (value != null) {
    if (imported == null) {
      imported=_Casts.uncheckedCast(factory.create());
      if (ExcelMetaDataEnabled.class.isAssignableFrom(cls)) {
        ExcelMetaDataEnabled importedEnhanced=(ExcelMetaDataEnabled)imported;
        importedEnhanced.setExcelRowNumber(row.getRowNum());
        importedEnhanced.setExcelSheetName(sheetName);
        imported=_Casts.uncheckedCast(importedEnhanced);
      }
      templateAdapter=this.objectManager.adapt(imported);
    }
    final ManagedObject valueAdapter=this.objectManager.adapt(value);
    otoa.set(templateAdapter,valueAdapter,InteractionInitiatedBy.USER);
  }
}
 else {
}
",0,0,0,,
165,|| repositoryService.getEntityState(object).isAttachedOrRemoved()) {,"if (object instanceof ViewModel || repositoryService.getEntityState(object).isAttachedOrRemoved()) {
}
 else {
switch (getNonPersistedObjectsStrategy()) {
case PERSIST:
    transactionService.flushTransaction();
  break;
case IGNORE:
return null;
default :
throw _Exceptions.unmatchedCase(getNonPersistedObjectsStrategy());
}
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
166,} else {,"if (serviceInjector != null) {
  instance=this.cacheInstance(type,instance);
  serviceInjector.injectServicesInto(instance);
}
 else {
}
",0,0,0,,
167,} else {,"if (!pathNode.getKey().isEmpty()) {
  format=getFormatValueIfAnyFrom(jsonNode);
  jsonNode=jsonNode.path(pathNode.getKey());
}
 else {
}
",0,0,0,,
168,} else {,"if (isEntity) {
  ManagedObjects.stringify(adapter).ifPresent(oidStr -> PageParameterNames.OBJECT_OID.addStringTo(pageParameters,oidStr));
}
 else {
}
",0,0,0,,
169,} else {,"if (activeThemeProvider.getClass() == SessionThemeProvider.class) {
  initializeActiveThemeFromCookie();
}
 else {
}
",0,0,0,,
170,} else {,"if (addedNodes.put(nodeId,e) == null) {
  removedNodes.add(nodeId);
}
 else {
}
",0,0,0,,
171,} else {,"if (walker.enterElement(Constants.REQUIREDPRIMARYTYPES_ELEMENT)) {
  List<Name> types=new ArrayList<Name>();
  while (walker.iterateElements(Constants.REQUIREDPRIMARYTYPE_ELEMENT)) {
    types.add(resolver.getQName(walker.getContent()));
  }
  def.setRequiredPrimaryTypes(types.toArray(new Name[types.size()]));
  walker.leaveElement();
}
 else {
}
",0,0,0,,
172,} else {,"if (it.hasNext()) {
  long time=System.currentTimeMillis();
  listener.onEvent(it);
  time=System.currentTimeMillis() - time;
  if (log.isDebugEnabled()) {
    log.debug(""listener {} processed events in {} ms."",listener.getClass().getName(),time);
  }
}
 else {
}
",0,0,0,,
173,} else {,"if (name != null) {
  if (!name.equals(PARENT_ELEMENT_NAME)) {
    Query nameTest=new NameQuery(name,indexFormatVersion,nsMappings);
    BooleanQuery and=new BooleanQuery();
    and.add(query,Occur.MUST);
    and.add(nameTest,Occur.MUST);
    query=and;
  }
 else {
    query=new ChildAxisQuery(sharedItemMgr,query,null,indexFormatVersion,nsMappings);
    selectParent=false;
  }
}
 else {
}
",0,0,0,,
174,} else if (++currentScorer < scorers.length) {,"if (++currentScorer < scorers.length) {
}
 else {
  currentDoc=NO_MORE_DOCS;
}
",0,0,2,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
175,} else {,"if (!keepChanges) {
  context.getItemStateManager().disposeAllTransientItemStates();
}
 else {
}
",0,0,0,,
176,} else {,"if (!roSession.hasCapability(""addNode"",testRoot,args)) {
  try {
    testRoot.addNode(""foo"");
    roSession.save();
    fail(""Node.addNode() should fail according to Session.hasCapability()"");
  }
 catch (  RepositoryException e) {
  }
}
 else {
}
",0,0,0,,
177,else {,"if (node.hasProperties()) {
  if (skipBinary) {
    PropertyIterator iter=node.getProperties();
    while (iter.hasNext()) {
      Property prop=iter.nextProperty();
      checkCondition(""Property "" + prop.getName() + "" of node ""+ node.getPath()+ "" is not exported."",prop.getType() == PropertyType.BINARY);
    }
  }
 else {
    checkCondition(""One or more properties of node "" + node.getPath() + "" are not exported."",false);
  }
}
 else {
}
",0,0,0,,
178,} else {,"if (qNode.getDefinition().allowsSameNameSiblings()) {
  fail(""Query.storeAsNode() must not throw ItemExistsException "" + ""when same name siblings are allowed"");
}
 else {
}
",0,0,0,,
179,if (tmp[1] != null) {,"if (tmp[1] != null) {
}
 else {
  createPathQuery(value[0].getValue(),parent.getType());
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
180,} else {,"if (node.getNameTest().getLocalName().length() > 0) {
  try {
    sb.append(resolver.getJCRName(node.getNameTest()));
  }
 catch (  NamespaceException e) {
    exceptions.add(e);
  }
  if (node.getIndex() == LocationStepQueryNode.NONE) {
    sb.append(""[%]"");
  }
 else   if (node.getIndex() == 1) {
  }
 else {
    sb.append('[').append(node.getIndex()).append(']');
  }
}
 else {
}
",0,0,0,,
181,&& organization.getPrimaryContact().getPersonName().getFullName() != null) {,"if (organization.getPrimaryContact() != null && organization.getPrimaryContact().getPersonName() != null && organization.getPrimaryContact().getPersonName().getFullName() != null) {
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
182,{,"if (retAssocs.size() == 0) {
}
 else {
  Iterator iterAss=retAssocs.iterator();
  while (iterAss.hasNext()) {
    Association assc=(Association)iterAss.next();
    if (assc.getKey().getId().equals(associationID)) {
      System.out.println(""found: "" + associationID);
      fail(""Deleted Association found"");
    }
  }
}
",0,0,0,,
183,} else{,"if (!backendURI.isPresent()) {
  haProvider.makeNextActiveURLAvailable(getServiceRole());
}
 else {
}
",0,0,0,,
184,} else {,"if (!ks.isCredentialStoreForClusterAvailable(GATEWAY_CREDENTIAL_STORE_NAME)) {
  ks.createCredentialStoreForCluster(GATEWAY_CREDENTIAL_STORE_NAME);
}
 else {
}
",0,0,0,,
185,else {,"if (!ks.isKeystoreForGatewayAvailable()) {
  ks.createKeystoreForGateway();
}
 else {
}
",0,0,0,,
186,"else if (args.get(0).equalsIgnoreCase(""list"")) {","if (args.get(0).equalsIgnoreCase(""list"")) {
}
 else if (args.get(0).equalsIgnoreCase(""select"")) {
  if (dataSources == null || dataSources.isEmpty()) {
    return ""No datasources to select from."";
  }
  KnoxDataSource dsValue=dataSources.get(args.get(1));
  Connection conn=getConnectionFromSession(dsValue);
  try {
    if (conn == null || conn.isClosed()) {
      String username=null;
      char[] pass=null;
      if (dsValue.getAuthnType().equalsIgnoreCase(""basic"")) {
        CredentialCollector dlg;
        try {
          dlg=login();
        }
 catch (        CredentialCollectionException e) {
          e.printStackTrace();
          return ""Error: Credential collection failure."";
        }
        username=dlg.name();
        pass=dlg.chars();
      }
      try {
        getConnection(dsValue,username,new String(pass));
      }
 catch (      Exception e) {
        e.printStackTrace();
        return ""Error: Connection creation failure."";
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (dataSources.containsKey(args.get(1))) {
    getVariables().put(KNOXDATASOURCE,args.get(1));
  }
  KnoxShellTable datasource=new KnoxShellTable();
  datasource.title(""Knox DataSource Selected"");
  datasource.header(""Name"").header(""Connect String"").header(""Driver"").header(""Authn Type"");
  datasource.row().value(dsValue.getName()).value(dsValue.getConnectStr()).value(dsValue.getDriver()).value(dsValue.getAuthnType());
  return datasource;
}
 else {
  return ""ERROR: unknown datasources command."";
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
187,} else {,"if (extra == null) {
  extra=new Query(queryName,paramName,valuePattern,literal);
}
 else {
}
",0,0,0,,
188,} else {,"if (extra == null) {
  extra=new Query(queryName,token);
}
 else {
}
",0,0,0,,
189,} else {,"if (!isPaused() && !isClosed()) {
  if ((receiver != null)) {
    receiver.doPost(event);
  }
 else {
    remoteLogger=repository.getLogger(event.getLoggerName());
    if (event.getLevel().isGreaterOrEqual(remoteLogger.getEffectiveLevel())) {
      remoteLogger.callAppenders(event);
    }
  }
}
 else {
}
",0,0,0,,
190,} else {,"if ((System.currentTimeMillis() - lastTimeStamp) < (2 * CHECK_PERIOD)) {
  if (!(textFeld.getText().trim().equals(lastText.trim()))) {
    lastText=textFeld.getText();
    EventQueue.invokeLater(DelayedTextDocumentListener.this::setFilter);
  }
}
 else {
}
",0,0,0,,
191,} else {,"if (!focusOnAction.isEnabled()) {
  setFocusOnSelected(false);
}
 else {
}
",0,0,0,,
192,} else {,"if (hiddenSet.contains(logger)) {
  style=style | Font.ITALIC;
}
 else {
}
",0,0,0,,
193,if (!Constants.ENABLE_DIRECT_ENCODERS || !Constants.ENABLE_THREADLOCALS) {,"if (!Constants.ENABLE_DIRECT_ENCODERS || !Constants.ENABLE_THREADLOCALS) {
}
",0,0,2,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
194,{,"if (token.equals("""")) {
}
 else if (token.equals("".."")) {
  if (pathElements.isEmpty()) {
  }
 else {
    pathElements.removeLast();
  }
}
 else {
  pathElements.addLast(token);
}
",0,0,0,,
195,{,"if (pathElements.isEmpty()) {
}
 else {
  pathElements.removeLast();
}
",0,0,0,,
196,{,"if (!mavenUserConfigurationDirectory.mkdirs()) {
}
",0,0,0,,
197,{,"if (tch.exists()) {
  MavenToolchainsXpp3Reader reader=new MavenToolchainsXpp3Reader();
  InputStreamReader in=null;
  try {
    in=new InputStreamReader(new BufferedInputStream(new FileInputStream(tch)));
    return reader.read(in);
  }
 catch (  Exception ex) {
    throw new MisconfiguredToolchainException(""Cannot read toolchains file at "" + tch.getAbsolutePath(),ex);
  }
 finally {
    IOUtil.close(in);
  }
}
 else {
}
",0,0,0,,
198,{,"if (repository.isIncludeMetadata()) {
}
",0,0,0,,
199,{,"if (currentFile == null || !file.exists()) {
}
 else if (currentFile.equals(file) && file.canRead()) {
  modified=(file.lastModified() != resource.getLastModified());
}
",0,0,0,,
200,{,"if (System.getProperty(""true"") != null) {
}
",0,0,0,,
201,{,"if (mainModuleDescriptor.exists()) {
}
 else {
  throw new UnsupportedOperationException(""Can't compile test sources "" + ""when main sources are missing a module descriptor"");
}
",0,0,0,,
202,{,"if (remoteRepo.exists()) {
}
",0,0,0,,
203,{,"if (role.contains(getLowerCaseString(i18n,""doap.emeritus""))) {
}
 else {
  if (!returnMap.get(""unknowns"").contains(contributor)) {
    returnMap.get(""unknowns"").add(contributor);
  }
}
",0,0,0,,
204,{,"if (mAnchor.group(2).startsWith(""#"")) {
}
",0,0,0,,
205,{,"if (!decryptionResult.getProblems().isEmpty()) {
}
",0,0,0,,
206,{,"if (script != null) {
  engine=getScriptEngine(engineName);
  if (engine == null) {
    throw new MojoFailureException(""Missing scriptEngine"");
  }
}
 else {
}
",0,0,0,,
207,{,"if (generateMultiPage(locale,multiPageSinkFactory,mainSink)) {
}
 else {
  report.generate(mainSink,locale);
}
",0,0,0,,
208,{,"if (profiles != null) {
}
",0,0,0,,
209,{,"if (text.isMonospaced()) {
}
",0,0,0,,
210,{,"if (expectedRemoteRepos == actualRemoteRepos) {
}
 else if (expectedRemoteRepos.size() != actualRemoteRepos.size()) {
  remoteRepoMatch=false;
}
 else {
  for (int i=0; i < expectedRemoteRepos.size(); i++) {
    ArtifactRepository expectedRepo=(ArtifactRepository)expectedRemoteRepos.get(i);
    ArtifactRepository actualRepo=(ArtifactRepository)actualRemoteRepos.get(i);
    if (expectedRepo.getUrl().equals(actualRepo.getUrl())) {
      remoteRepoMatch=false;
      break;
    }
  }
}
",0,0,0,,
211,{,"if (generateMultiPage(locale,multiPageSinkFactory,mainSink)) {
}
 else {
  report.generate(mainSink,locale);
}
",0,0,0,,
212,} else {,"if (ContainerExitStatus.ABORTED != exitStatus) {
}
 else {
}
",0,0,0,,
213,} else {,"if (defaultValue.isPresent()) {
  measurement.withProfileValue(defaultValue.get());
  values.add(measurement);
}
 else {
}
",0,0,0,,
214,} else {,"if (dc.getDocument().isPresent()) {
  Document d=dc.getDocument().get();
  if (latestDocument == null || latestDocument.getTimestamp() < d.getTimestamp()) {
    latestDocument=d;
  }
}
 else {
}
",0,0,0,,
215,} else {,"if (incomingRequest.getMethod() != HttpMethod.POST && incomingRequest.getMethod() != HttpMethod.PUT) {
  sendResponse(session,incomingRequest);
}
 else {
}
",0,0,0,,
216,} else {,"if (incomingRequest.getMethod() != HttpMethod.POST && incomingRequest.getMethod() != HttpMethod.PUT) {
  sendResponse(session,incomingRequest);
}
 else {
}
",0,0,0,,
217,{,"if (isRequired() && shouldAlwaysPerformValidationWhenRequiredTrue(context)) {
}
 else {
  return;
}
",0,0,0,,
218,{,"if (!_isSetConverter() && _converter != null && !(_converter instanceof StateHolder)) {
}
 else {
  converterSaved=saveAttachedState(facesContext,_converter);
  nullDelta=false;
}
",0,0,0,,
219,{,"if (oldRowIndex == rowIndex) {
}
 else if (oldRowIndex > rowIndex) {
}
",0,0,0,,
220,{,"if (oldRowIndex > rowIndex) {
}
",0,0,0,,
221,{,"if (isHintSet(searchExpressionContext,SearchExpressionHint.IGNORE_NO_RESULT)) {
}
 else {
  throw new ComponentNotFoundException(""Cannot find component for expression \"""" + expression + ""\"" referenced from \""""+ searchExpressionContext.getSource().getClientId(facesContext)+ ""\""."");
}
",0,0,0,,
222,{,"if (isHintSet(searchExpressionContext,SearchExpressionHint.IGNORE_NO_RESULT)) {
}
 else {
  throw new ComponentNotFoundException(""Cannot find component for expression \"""" + expressions + ""\"" referenced from \""""+ searchExpressionContext.getSource().getClientId(facesContext)+ ""\""."");
}
",0,0,0,,
223,{,"if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == separatorChar) {
}
 else {
  isValid=false;
}
",0,0,0,,
224,{,"if (validators != null && validators.length > 0) {
}
 else {
  super.addValidator(new WholeBeanValidator());
}
",0,0,0,,
225,{,"if ("""".equals(duplicateFlow.getDefiningDocumentId())) {
}
 else {
  _flowMapById.put(id,toAdd);
}
",0,0,0,,
226,{,"if (serverHost.equals(host) && matchPort && path.contains(appContextPath)) {
}
 else {
  return false;
}
",0,0,0,,
227,{,"if (serverHost.equals(host) && matchPort && !isStrictJsf2OriginHeaderAppPath) {
}
 else {
  return false;
}
",0,0,0,,
228,{,"if (logicalViewId != null) {
  return true;
}
 else {
}
",0,0,0,,
229,{,"if (!_useStraightXml && isEmptyElement(elementName)) {
}
 else {
  if (isScript() && (_isXhtmlContentType || _wrapScriptContentWithXmlCommentTag)) {
    writeScriptContent();
    _currentWriter=_outputWriter;
  }
 else   if (isStyle() && _isXhtmlContentType) {
    writeStyleContent();
    _currentWriter=_outputWriter;
  }
  writeEndTag(elementName);
}
",0,0,0,,
230,{,"if (group != null && group.length() > 0) {
}
 else {
  writer.endElement(HTML.TD_ELEM);
  if (pageDirectionLayout) {
    writer.endElement(HTML.TR_ELEM);
  }
}
",0,0,0,,
231,{,"if (component instanceof UIOutput) {
}
 else {
  throw new IllegalArgumentException(""Unsupported component class "" + component.getClass().getName());
}
",0,0,0,,
232,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  app=percentEncode(context,c,UTF8);
}
",0,0,0,,
233,{,"if (c == '?' || c == '#') {
  if (i + 1 < length) {
    app=c + encodeURIQuery(context,string.substring(i + 1),characterEncoding);
    endLoop=true;
  }
}
 else {
}
",0,0,0,,
234,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  app=percentEncode(context,c,characterEncoding);
}
",0,0,0,,
235,{,"if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
}
 else {
  app=""&amp;"";
}
",0,0,0,,
236,{,"if (c == '&') {
  if (i + 4 < length) {
    if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
    }
 else {
      app=""&amp;"";
    }
  }
 else {
    app=""&amp;"";
  }
}
 else {
}
",0,0,0,,
237,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  if (start < i) {
    writer.write(string,start,i - start);
  }
  start=i + 1;
  percentEncode(writer,c,UTF8);
}
",0,0,0,,
238,{,"if (c == '?' || c == '#') {
  if (i + 1 < length) {
    if (start < i) {
      writer.write(string,start,i - start);
    }
    start=i + 1;
    writer.write(c);
    encodeURIQuery(writer,string,i + 1,characterEncoding);
    endLoop=true;
  }
}
 else {
}
",0,0,0,,
239,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  if (start < i) {
    writer.write(string,start,i - start);
  }
  start=i + 1;
  percentEncode(writer,c,characterEncoding);
}
",0,0,0,,
240,{,"if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
}
 else {
  app=""&amp;"";
}
",0,0,0,,
241,{,"if (c == '&') {
  if (i + 4 < length) {
    if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
    }
 else {
      app=""&amp;"";
    }
  }
 else {
    app=""&amp;"";
  }
}
 else {
}
",0,0,0,,
242,{,"if (mapping.isExactMapping()) {
}
 else if (mapping.isExtensionMapping()) {
  resourceBasePath=externalContext.getRequestServletPath();
  int stripPoint=resourceBasePath.lastIndexOf('.');
  if (stripPoint > 0) {
    resourceBasePath=resourceBasePath.substring(0,stripPoint);
  }
}
 else {
  resourceBasePath=externalContext.getRequestPathInfo();
}
",0,0,0,,
243,{,"if (paths == null) {
}
 else {
  for (  String p : paths) {
    if (p.startsWith(""/WEB-INF"") && isTopLevelViewsOnly(options)) {
    }
 else     if (p.startsWith(""/META-INF"") && isTopLevelViewsOnly(options)) {
    }
 else {
      if (stack == null) {
        stack=new LinkedList<>();
      }
      stack.add(p);
    }
  }
}
",0,0,0,,
244,{,"if (p.startsWith(""/WEB-INF"") && isTopLevelViewsOnly(options)) {
}
 else if (p.startsWith(""/META-INF"") && isTopLevelViewsOnly(options)) {
}
 else {
  if (stack == null) {
    stack=new LinkedList<>();
  }
  stack.add(p);
}
",0,0,0,,
245,{,"if (p.startsWith(""/META-INF"") && isTopLevelViewsOnly(options)) {
}
 else {
  if (stack == null) {
    stack=new LinkedList<>();
  }
  stack.add(p);
}
",0,0,0,,
246,{,"if (name.equals(""value"") && comp instanceof ValueHolder) {
}
 else if (!IGNORE_ATTRIBUTES.contains(name)) {
  try {
    Object value=comp.getAttributes().get(name);
    printAttribute(stream,name,value);
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,e.getMessage(),e);
    printAttribute(stream,name,null);
  }
}
",0,0,0,,
247,{,"if (view != null && FaceletViewDeclarationLanguageBase.isDynamicComponentRefreshTransientBuildActive(context,view)) {
}
 else {
  return;
}
",0,0,0,,
248,{,"if (!usePartialStateSavingOnThisView || refreshTransientBuildOnPSS) {
}
",0,0,0,,
249,{,"if (id != null) {
}
 else {
  Object[] rdk=(Object[])child.getAttributes().get(RequestViewMetadata.RESOURCE_DEPENDENCY_KEY);
  if (rdk != null) {
    boolean found=false;
    String library=(String)rdk[0];
    String name=(String)rdk[1];
    if (resourceDependencyList != null) {
      for (      ResourceDependency resource : resourceDependencyList) {
        if (library == null && resource.library() == null) {
          if (name != null && name.equals(resource.name())) {
            found=true;
            break;
          }
        }
 else {
          if (library != null && library.equals(resource.library()) && name != null && name.equals(resource.name())) {
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      component.getChildren().remove(i);
      i--;
      childCount--;
    }
  }
 else {
    if (child.getChildCount() > 0 || !child.getFacets().isEmpty()) {
      clearTransientAndNonFaceletComponents(context,child);
    }
  }
}
",0,0,0,,
250,{,"if (""facelet-taglib"".equals(qName)) {
}
 else if (""library-class"".equals(qName)) {
  getLibraryImpl().setLibraryClass(this.captureBuffer());
}
 else if (""short-name"".equals(qName)) {
  getLibraryImpl().setShortName(this.captureBuffer());
}
 else if (""namespace"".equals(qName)) {
  getLibraryImpl().setNamespace(this.captureBuffer());
}
 else if (""composite-library-name"".equals(qName)) {
  getLibraryImpl().setCompositeLibraryName(this.captureBuffer());
}
 else if (""component-type"".equals(qName)) {
  this.componentType=this.captureBuffer();
}
 else if (""renderer-type"".equals(qName)) {
  this.rendererType=this.captureBufferEmptyNull();
}
 else if (""tag-name"".equals(qName)) {
  this.tagName=this.captureBuffer();
}
 else if (""function-name"".equals(qName)) {
  this.functionName=this.captureBuffer();
}
 else if (""function-class"".equals(qName)) {
  this.functionClass=this.captureBuffer();
}
 else if (""description"".equals(qName)) {
}
 else if (""display-name"".equals(qName)) {
}
 else if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
251,{,"if (""description"".equals(qName)) {
}
 else if (""display-name"".equals(qName)) {
}
 else if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
252,{,"if (""display-name"".equals(qName)) {
}
 else if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
253,{,"if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
254,{,"if (viewResource != null) {
}
 else {
  _relativePaths.put(path,url);
}
",0,0,0,,
255,{,"if (viewResource != null) {
}
 else {
  Map<String,URL> newLoc=new HashMap<>(_relativeLocations);
  newLoc.put(uri,url);
  _relativeLocations=newLoc;
}
",0,0,0,,
256,{,"if (viewResource != null) {
}
 else {
  Map<String,URL> newLoc=new HashMap<>(_relativeLocations);
  newLoc.put(uri,url);
  _relativeLocations=newLoc;
}
",0,0,0,,
257,{,"if (viewResource != null) {
}
 else {
  Map<String,URL> newLoc=new HashMap<>(_relativeLocations);
  newLoc.put(uri,url);
  _relativeLocations=newLoc;
}
",0,0,0,,
258,{,"if (step == 0) {
}
 else if (step == 1) {
  applyNextHandlerIfNotAppliedDynamically(ctx,c);
  applyCompositeComponentFacelet(ctx,c);
  applyFinalInitializationSteps(ctx,mctx,c);
  c.getAttributes().put(CREATE_CC_ON_POST_ADD_TO_VIEW,2);
}
 else {
  applyCompositeComponentFacelet(ctx,c);
}
",0,0,0,,
259,{,"if ('a' == value.charAt(i + 1) && 'm' == value.charAt(i + 2) && 'p' == value.charAt(i + 3) && ';' == value.charAt(i + 4)) {
}
 else {
  app=""&amp;"";
}
",0,0,0,,
260,{,"if (""testResource.js"".equals(component.getAttributes().get(""name""))) {
}
 else {
  Assert.fail(""Not expected resource found"" + component.getAttributes().get(""name""));
}
",0,0,0,,
261,{,"if (""testResource.js"".equals(component.getAttributes().get(""name""))) {
}
 else {
  Assert.fail(""Not expected resource found"" + component.getAttributes().get(""name""));
}
",0,0,0,,
262,{,"if (""testResource.js"".equals(component.getAttributes().get(""name""))) {
}
 else {
  Assert.fail(""Not expected resource found"" + component.getAttributes().get(""name""));
}
",0,0,0,,
263,{,"if (JsfVersion.supports12()) {
  viewHandler.initView(facesContext);
}
 else {
}
",0,0,0,,
264,{,"if (lastIndex < (clientId.length() - 1)) {
  id=clientId.substring(lastIndex + 1);
}
 else {
}
",0,0,0,,
265,{,"if (parent != null) {
  flattenValidator(parent);
  validator.merge(parent);
}
 else {
}
",0,0,0,,
266,{,"if (parent != null) {
  flattenConverter(parent);
  converter.merge(parent);
}
 else {
}
",0,0,0,,
267,{,"if (parent != null) {
  flattenBehavior(parent);
  behavior.merge(parent);
}
 else {
}
",0,0,0,,
268,{,"if (parent != null) {
  flattenFaceletTag(parent);
  faceletTag.merge(parent);
}
 else {
}
",0,0,0,,
269,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
270,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
271,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
272,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
273,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
274,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
275,} else {,"if (!oldExpanded && newExpanded) {
  ((TreeExpansionListener)facesListener).treeExpanded(this);
}
 else {
}
",0,0,0,,
276,} else {,"if (!oldSelected && newSelected) {
  ((TreeSelectedListener)facesListener).treeSelected(this);
}
 else {
}
",0,0,0,,
277,} else {,"if (!containsElement(components,element)) {
  addFacets(componentTag,namespace,element);
  final List<org.jdom2.Element> attributes=new ArrayList<>();
  final List<org.jdom2.Element> properties=new ArrayList<>();
  addAttributes(typeElement,attributes,properties,namespace);
  if (!attributes.isEmpty()) {
    attributes.sort(Comparator.comparing(d -> d.getChildText(ATTRIBUTE_NAME,namespace)));
    element.addContent(attributes);
  }
  if (!properties.isEmpty()) {
    properties.sort(Comparator.comparing(d -> d.getChildText(PROPERTY_NAME,namespace)));
    element.addContent(properties);
  }
  element.addContent(createElementExtension(typeElement,componentTag,namespace));
  components.add(element);
}
 else {
}
",0,0,0,,
278,{,"if (map == null) {
  map=myMap;
  reqMap.put(_STATE_MAP,map);
}
 else {
}
",0,0,0,,
279,{,"if (base == null) {
}
 else {
  if (property != null) {
    context.setPropertyResolved(true);
    if (property instanceof Number)     _pr.setValue(base,((Number)property).intValue(),value);
    _pr.setValue(base,property,value);
  }
}
",0,0,0,,
280,{,"if (!_isStyleClassTerminator(c)) {
}
 else {
  startSubstringIndex=i + 1;
}
",0,0,0,,
281,{,"if ((background == null) && (entry.styleClass != null)) {
}
",0,0,0,,
282,{,"if (art.getId().contains(groupIdPrefix + "".modules:org-netbeans-modules-maven-embedder"")) {
}
 else {
  getLog().info(ex.getModule() + "" added by "" + art.getId()+ """"+ classpathFile);
  wrappedBundleCNBs.add(ex.getModule());
}
",0,0,0,,
283,{,"if (dest != null && fl.exists()) {
  FileUtils.copyFile(fl,dest);
}
 else {
}
",0,0,0,,
284,{,"if (res.isOSGiBundle()) {
}
",0,0,0,,
285,{,"if (!ks.exists()) {
  throw new MojoFailureException(""Cannot find keystore file at "" + ks.getAbsolutePath());
}
 else {
}
",0,0,0,,
286,{,"if (specialManifest != null && specialManifest.exists()) {
  examinator.setManifestFile(specialManifest);
  examinator.checkFile();
}
 else {
}
",0,0,0,,
287,"if (""ANOTHER CUSTOM VALUE"".equals(response.getFirstHeader(""ANOTHER_CUSTOM_HEADER""))) {","if (""ANOTHER CUSTOM VALUE"".equals(response.getFirstHeader(""ANOTHER_CUSTOM_HEADER""))) {
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
288,{,"if (qualifiers == null || qualifiers.length == 0) {
}
",0,0,0,,
289,{,"if (""info"".equals(action)) {
}
 else if (""invalidateSession"".equals(action)) {
  request.getSession().invalidate();
}
 else if (""invalidateSessionAfterBeanAccess"".equals(action)) {
  shoppingCart.getContent();
  request.getSession().invalidate();
}
 else if (""set"".equals(action)) {
  String content=request.getParameter(""content"");
  shoppingCart.setContent(content);
}
 else if (""begin"".equals(action)) {
  shoppingCart.getConversation().begin();
}
 else if (""end"".equals(action)) {
  shoppingCart.getConversation().end();
}
 else if (""setUser"".equals(action)) {
  String name=request.getParameter(""name"");
  sessionUser.setName(name);
}
 else {
  response.getWriter().append(""error - unknown command"");
  response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
}
",0,0,0,,
290,} else {,"if (evaluatorId2ContextId2ContextMap.containsKey(value.getEvaluatorId()) && evaluatorId2ContextId2ContextMap.get(value.getEvaluatorId()).containsKey(value.getId())) {
  evaluatorId2ContextId2ContextMap.get(value.getEvaluatorId()).remove(value.getEvaluatorId());
}
 else {
}
",0,0,0,,
291,if(result == null || result.length() == 0){,"if (result == null || result.length() == 0) {
}
 else {
  try {
    Class clazz=Class.forName(result);
    Object attr=clazz.newInstance();
    if (!(attr instanceof Entry)) {
      JOptionPane.showMessageDialog(AttributeTreePanel.this,""Does not implement Entry interface"",""Unacceptable Class"",JOptionPane.WARNING_MESSAGE);
    }
 else     if (attr instanceof net.jini.lookup.entry.ServiceControlled) {
      JOptionPane.showMessageDialog(AttributeTreePanel.this,""Implements ServiceControlled interface"",""Unacceptable Class"",JOptionPane.WARNING_MESSAGE);
    }
 else {
      cancelNotify();
      ((JoinAdmin)admin).addLookupAttributes(new Entry[]{(Entry)attr});
      ObjectNode node=new ObjectNode(attr,true);
      root.add(node);
      recursiveObjectTree(node);
      setupNotify();
      model.nodesWereInserted(root,new int[]{model.getIndexOfChild(root,node)});
    }
  }
 catch (  ClassNotFoundException e) {
    JOptionPane.showMessageDialog(AttributeTreePanel.this,e.getMessage(),""Class Not Found"",JOptionPane.WARNING_MESSAGE);
  }
catch (  Throwable t) {
    logger.log(Level.INFO,""adding attribute failed"",t);
    JOptionPane.showMessageDialog(AttributeTreePanel.this,t.getMessage(),t.getClass().getName(),JOptionPane.WARNING_MESSAGE);
  }
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
292,} else {,"if (!commonDirectory.isDirectory()) {
}
 else {
}
",0,0,0,,
293,} else {,"if (part.isMimeType(MailContentType.TEXT_HTML.getMimeType()) || part.isMimeType(MailContentType.TEXT_XML.getMimeType())) {
  try {
    content.put(KEY_BODY_HTML,(String)part.getContent());
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(""Unable to decode the mail because charset is not supported."",e);
  }
}
 else {
}
",0,0,0,,
294,} else {,"if (tok != null && tok.trim().length() > 0) {
  list.add(new OID(tok.trim()));
}
 else {
}
",0,0,0,,
295,} else {,"if (""reply"".equals(todo)) {
  NormalizedMessage out=exchange.createMessage();
  exchange.setMessage(out,""out"");
  MessageUtil.transfer(exchange.getMessage(""in""),out);
  channel.send(exchange);
}
 else {
}
",0,0,0,,
296,if (parts[i].getStatus() == ExchangeStatus.DONE) {,"if (parts[i].getStatus() == ExchangeStatus.DONE) {
}
 else if (parts[i].getStatus() == ExchangeStatus.ERROR) {
  if (reportErrors) {
    fail(exchange,parts[i].getError());
    return;
  }
}
 else if (parts[i].getFault() != null) {
  if (reportErrors) {
    MessageUtil.transferToFault(MessageUtil.copyFault(parts[i]),exchange);
    done(parts[i]);
    sendSync(exchange);
    return;
  }
 else {
    done(parts[i]);
  }
}
 else {
  throw new IllegalStateException(""Exchange status is "" + ExchangeStatus.ACTIVE + "" but has no Fault message"");
}
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
297,} else {,"if (WSAddressingConstants.EL_TO.equals(qname.getLocalPart())) {
  to=getHeaderText(value);
  String[] parts=URIResolver.split3(to);
  context.setProperty(Context.SERVICE,new QName(parts[0],parts[1]));
  context.setProperty(Context.ENDPOINT,parts[2]);
}
 else {
}
",0,0,0,,
298,} else {,"if (WSAddressingConstants.EL_TO.equals(qname.getLocalPart())) {
  String to=getHeaderText(message.getSoapHeaders().get(qname));
  String[] parts=URIResolver.split3(to);
  svc=new QName(parts[0],parts[1]);
  ep=parts[2];
}
 else {
}
",0,0,0,,
299,} else {,"if (element instanceof SOAPAddress) {
  SOAPAddress soapAddress=(SOAPAddress)element;
  binding.setLocationURI(soapAddress.getLocationURI());
}
 else {
}
",0,0,0,,
300,} else {,"if (element instanceof SOAPBinding) {
  SOAPBinding soapBinding=(SOAPBinding)element;
  binding.setTransportURI(soapBinding.getTransportURI());
  binding.setStyle(getStyle(soapBinding.getStyle()));
}
 else {
}
",0,0,0,,
301,} else {,"if (element instanceof SOAP12Address) {
  SOAP12Address soapAddress=(SOAP12Address)element;
  binding.setLocationURI(soapAddress.getLocationURI());
}
 else {
}
",0,0,0,,
302,} else {,"if (element instanceof SOAP12Binding) {
  SOAP12Binding soapBinding=(SOAP12Binding)element;
  binding.setTransportURI(soapBinding.getTransportURI());
  binding.setStyle(getStyle(soapBinding.getStyle()));
}
 else {
}
",0,0,0,,
303,} else {,"if (reader.hasMoreChildren()) {
  Map<String,String> innerMap=Maps.newHashMap();
  while (reader.hasMoreChildren()) {
    reader.moveDown();
    String k=null;
    String v=null;
    while (reader.hasMoreChildren()) {
      reader.moveDown();
      if (""key"".equals(elname)) {
        k=reader.getValue();
      }
 else       if (""value"".equals(elname)) {
        v=reader.getValue();
      }
      reader.moveUp();
    }
    innerMap.put(k,v);
    reader.moveUp();
  }
  ov=innerMap;
}
 else {
}
",0,0,0,,
304,} else {,"if (token.type != CssTokenType.SPACE && token.type != CssTokenType.PUNCTUATION) {
  inImport=false;
  builder.append(token.text);
}
 else {
}
",0,0,0,,
305,"if (this.oauthAuthorizeAction.startsWith(""http"")) {","if (this.oauthAuthorizeAction.startsWith(""http"")) {
}
 else {
  servletRequest.setAttribute(""OAUTH_DATASTORE"",dataStore);
  servletRequest.setAttribute(""OAUTH_ENTRY"",entry);
  servletRequest.setAttribute(""CALLBACK"",callback);
  servletRequest.setAttribute(""TOKEN"",entry.getToken());
  servletRequest.setAttribute(""CONSUMER"",consumer);
  servletRequest.getRequestDispatcher(oauthAuthorizeAction).forward(servletRequest,servletResponse);
}
",0,0,4,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
306,"if (valueBuffer.length() == 0 && isKeyValueSeparatorChar(c) && !isCharEscaped(line, i)) {","if (valueBuffer.length() == 0 && isKeyValueSeparatorChar(c) && !isCharEscaped(line,i)) {
}
 else {
  valueBuffer.append(c);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
307,} else {,"if (IPV4_PATTERN.matcher(wildcardsReplaced).matches()) {
  authorizedIps.put(host,wildcardsReplaced);
}
 else {
}
",0,0,0,,
308,} else {,"if (authMethod == AuthMethod.DIGEST) {
  try {
    LOG.debug(""Adding SaslStormClientHandler to pacemaker client pipeline."");
    pipeline.addLast(SASL_HANDLER,new SaslStormClientHandler(client));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
 else {
}
",0,0,0,,
309,} else {,"if (!Datum.abortWhenDivideByZero) {
  fail(op + "" throws DivideByZeroException"");
}
 else {
}
",0,0,0,,
310,} else {,"if (e instanceof OutOfMemoryError) {
  try {
    System.err.println(""Halting due to Out Of Memory Error..."");
  }
 catch (  Throwable err) {
  }
  ExitUtil.halt(-1);
}
 else {
}
",0,0,0,,
311,if (response.getMaxRowNum() < 0 && queryId.equals(QueryIdFactory.NULL_QUERY_ID)) {,"if (response.getMaxRowNum() < 0 && queryId.equals(QueryIdFactory.NULL_QUERY_ID)) {
}
 else {
  res=TajoClientUtil.createResultSet(tajoClient,response,sizeLimit);
  MakeResultText(res,desc);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
312,} else {,"if (textBytes[fieldId] != null) {
  try {
    values[fieldId]=serializeDeserialize.deserialize(fieldId,textBytes[fieldId],0,textBytes[fieldId].length,nullBytes);
  }
 catch (  Exception e) {
    values[fieldId]=NullDatum.get();
  }
  textBytes[fieldId]=null;
}
 else {
}
",0,0,0,,
313,} else {,"if ((""name"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final java.lang.String nameOrOthersItem1=elementReader.getElementAsString();
  if (nameOrOthers == null) {
    nameOrOthers=facesAbsoluteOrdering.nameOrOthers;
    if (nameOrOthers != null) {
      nameOrOthers.clear();
    }
 else {
      nameOrOthers=new ArrayList<Object>();
    }
  }
  nameOrOthers.add(nameOrOthersItem1);
}
 else {
}
",0,0,0,,
314,} else {,"if ((""default-validators"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesValidator defaultValidatorsItem=readFacesValidator(elementReader,context);
  if (defaultValidators == null) {
    defaultValidators=facesApplication.defaultValidators;
    if (defaultValidators != null) {
      defaultValidators.clear();
    }
 else {
      defaultValidators=new ArrayList<FacesValidator>();
    }
  }
  defaultValidators.add(defaultValidatorsItem);
}
 else {
}
",0,0,0,,
315,} else {,"if ((""behavior-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesBehaviorExtension behaviorExtensionItem=readFacesBehaviorExtension(elementReader,context);
  if (behaviorExtension == null) {
    behaviorExtension=facesBehavior.behaviorExtension;
    if (behaviorExtension != null) {
      behaviorExtension.clear();
    }
 else {
      behaviorExtension=new ArrayList<FacesBehaviorExtension>();
    }
  }
  behaviorExtension.add(behaviorExtensionItem);
}
 else {
}
",0,0,0,,
316,} else {,"if ((""component-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesComponentExtension componentExtensionItem=readFacesComponentExtension(elementReader,context);
  if (componentExtension == null) {
    componentExtension=facesComponent.componentExtension;
    if (componentExtension != null) {
      componentExtension.clear();
    }
 else {
      componentExtension=new ArrayList<FacesComponentExtension>();
    }
  }
  componentExtension.add(componentExtensionItem);
}
 else {
}
",0,0,0,,
317,} else {,"if ((""converter-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesConverterExtension converterExtensionItem=readFacesConverterExtension(elementReader,context);
  if (converterExtension == null) {
    converterExtension=facesConverter.converterExtension;
    if (converterExtension != null) {
      converterExtension.clear();
    }
 else {
      converterExtension=new ArrayList<FacesConverterExtension>();
    }
  }
  converterExtension.add(converterExtensionItem);
}
 else {
}
",0,0,0,,
318,} else {,"if ((""factory-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesFactoryExtension factoryExtensionItem=readFacesFactoryExtension(elementReader,context);
  if (factoryExtension == null) {
    factoryExtension=facesFactory.factoryExtension;
    if (factoryExtension != null) {
      factoryExtension.clear();
    }
 else {
      factoryExtension=new ArrayList<FacesFactoryExtension>();
    }
  }
  factoryExtension.add(factoryExtensionItem);
}
 else {
}
",0,0,0,,
319,} else {,"if ((""lifecycle-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesLifecycleExtension lifecycleExtensionItem=readFacesLifecycleExtension(elementReader,context);
  if (lifecycleExtension == null) {
    lifecycleExtension=facesLifecycle.lifecycleExtension;
    if (lifecycleExtension != null) {
      lifecycleExtension.clear();
    }
 else {
      lifecycleExtension=new ArrayList<FacesLifecycleExtension>();
    }
  }
  lifecycleExtension.add(lifecycleExtensionItem);
}
 else {
}
",0,0,0,,
320,} else {,"if ((""navigation-rule-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesNavigationRuleExtension navigationRuleExtensionItem=readFacesNavigationRuleExtension(elementReader,context);
  if (navigationRuleExtension == null) {
    navigationRuleExtension=facesNavigationRule.navigationRuleExtension;
    if (navigationRuleExtension != null) {
      navigationRuleExtension.clear();
    }
 else {
      navigationRuleExtension=new ArrayList<FacesNavigationRuleExtension>();
    }
  }
  navigationRuleExtension.add(navigationRuleExtensionItem);
}
 else {
}
",0,0,0,,
321,} else {,"if ((""before"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesOrderingOrdering before=readFacesOrderingOrdering(elementReader,context);
  facesOrdering.before=before;
}
 else {
}
",0,0,0,,
322,} else {,"if ((""referenced-bean-class"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final String referencedBeanClassRaw=elementReader.getElementAsString();
  final String referencedBeanClass;
  try {
    referencedBeanClass=Adapters.collapsedStringAdapterAdapter.unmarshal(referencedBeanClassRaw);
  }
 catch (  final Exception e) {
    context.xmlAdapterError(elementReader,CollapsedStringAdapter.class,String.class,String.class,e);
    continue;
  }
  facesReferencedBean.referencedBeanClass=referencedBeanClass;
}
 else {
}
",0,0,0,,
323,} else {,"if ((""render-kit-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesRenderKitExtension renderKitExtensionItem=readFacesRenderKitExtension(elementReader,context);
  if (renderKitExtension == null) {
    renderKitExtension=facesRenderKit.renderKitExtension;
    if (renderKitExtension != null) {
      renderKitExtension.clear();
    }
 else {
      renderKitExtension=new ArrayList<FacesRenderKitExtension>();
    }
  }
  renderKitExtension.add(renderKitExtensionItem);
}
 else {
}
",0,0,0,,
324,} else {,"if ((""validator-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesValidatorExtension validatorExtensionItem=readFacesValidatorExtension(elementReader,context);
  if (validatorExtension == null) {
    validatorExtension=facesValidator.validatorExtension;
    if (validatorExtension != null) {
      validatorExtension.clear();
    }
 else {
      validatorExtension=new ArrayList<FacesValidatorExtension>();
    }
  }
  validatorExtension.add(validatorExtensionItem);
}
 else {
}
",0,0,0,,
325,} else {,"if (s.getInputStream() instanceof DelegatingInputStream) {
  cache((DelegatingInputStream)s.getInputStream());
}
 else {
}
",0,0,0,,
326,} else {,"if (socketFactory == null) {
  final SSLContext ctx;
  if (tlsClientParameters.getSslContext() != null) {
    ctx=tlsClientParameters.getSslContext();
  }
 else {
    ctx=org.apache.cxf.transport.https.SSLUtils.getSSLContext(tlsClientParameters);
  }
  String[] cipherSuites=SSLUtils.getCiphersuitesToInclude(tlsClientParameters.getCipherSuites(),tlsClientParameters.getCipherSuitesFilter(),ctx.getSocketFactory().getDefaultCipherSuites(),SSLUtils.getSupportedCipherSuites(ctx),LOG);
  String protocol=tlsClientParameters.getSecureSocketProtocol() != null ? tlsClientParameters.getSecureSocketProtocol() : ctx.getProtocol();
  socketFactory=new SSLSocketFactoryWrapper(ctx.getSocketFactory(),cipherSuites,protocol);
  lastTlsHash=tlsClientParameters.hashCode();
}
 else {
}
",0,0,0,,
327,} else {,"if (particle instanceof XmlSchemaGroupBase && !(particle instanceof XmlSchemaChoice)) {
  XmlSchemaGroupBase groupBase=(XmlSchemaGroupBase)particle;
  for (Iterator iterator=groupBase.getItems().getIterator(); iterator.hasNext(); ) {
    XmlSchemaParticle child=(XmlSchemaParticle)iterator.next();
    if (child instanceof XmlSchemaElement) {
      XmlSchemaElement element=(XmlSchemaElement)child;
      elements.add(element);
    }
  }
}
 else {
}
",0,0,0,,
328,} else {,"if (wsdlReturnValueMapping.getWsdlMessagePartName() != null) {
  String wsdlMessagePartName=wsdlReturnValueMapping.getWsdlMessagePartName();
  if (outParamNames.contains(wsdlMessagePartName)) {
    throw new OpenEJBException(""output message part "" + wsdlMessagePartName + "" has both an INOUT or OUT mapping and a return value mapping for operation ""+ operationName);
  }
  if (bindingStyle.isWrapped()) {
    Part outPart=getWrappedPart(outputMessage);
    XmlElementInfo returnParticle=getWrapperChild(outPart,wsdlMessagePartName);
    returnQName=new QName("""",returnParticle.qname.getLocalPart());
    returnXmlType=returnParticle.xmlType;
  }
 else   if (bindingStyle.isRpc()) {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=new QName("""",part.getName());
    returnXmlType=part.getTypeName();
  }
 else {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=getPartName(part);
    returnXmlType=returnQName;
  }
  outParamNames.add(wsdlMessagePartName);
}
 else {
}
",0,0,0,,
329,} else {,"if (inMessage instanceof SoapMessage) {
  try {
    reserialize((SoapMessage)inMessage);
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Failed to reserialize soap message"",e);
  }
}
 else {
}
",0,0,0,,
330,} else {,"if (token != null || HttpRequest.Method.GET.name().equals(request.getMethod())) {
  httpListener.onMessage(request,response);
}
 else {
}
",0,0,0,,
331,} else {,"if (sourceType.getFeedType().equals(""rss"")) {
  alerts=rssChecker.getNewAlerts(sourceType.getFeedAddress(),sourceType.getLastChecked());
}
 else {
}
",0,0,0,,
332,} else {,"if (!componentType.isUnresolved()) {
  implementation.getServices().addAll(componentType.getServices());
  implementation.getReferences().addAll(componentType.getReferences());
  implementation.getProperties().addAll(componentType.getProperties());
}
 else {
}
",0,0,0,,
333,} else {,"if (endpointsRequireAutomaticResolution) {
  for (  Endpoint endpoint : endpoints) {
    endpointBuilder.build(endpoint);
  }
  componentReference.getBindings().clear();
  if (componentReference.getCallback() != null) {
    componentReference.getCallback().getBindings().clear();
  }
  for (  Endpoint endpoint : endpoints) {
    if (endpoint.isUnresolved() == false) {
      componentReference.getBindings().add(endpoint.getSourceBinding());
      if (componentReference.getCallback() != null) {
        componentReference.getCallback().getBindings().add(endpoint.getSourceCallbackBinding());
      }
    }
  }
}
 else {
}
",0,0,0,,
334,} else {,"if (!msg.getRecipientName().equals(MessageHelper.RPC_MBOX) && nodeElement.getBinding().isMbox()) {
  handleMsg(msg);
}
 else {
}
",0,0,0,,
335,} else {,"if (BasicAuthenticationPolicy.class.isInstance(p)) {
  basicAuthenticationPolicy=(BasicAuthenticationPolicy)p;
}
 else {
}
",0,0,0,,
336,} else {,"if (BasicAuthenticationPolicy.class.isInstance(p)) {
  basicAuthenticationPolicy=(BasicAuthenticationPolicy)p;
}
 else {
}
",0,0,0,,
337,} else {,"if (RemoteBindingHelper.isTargetRemote() || ((serviceURI != null) && (serviceURI.isAbsolute()))) {
  distributedBinding=new DistributedSCABindingImpl();
  distributedBinding.setSCABinding(binding);
  distributedProvider=distributedProviderFactory.createServiceBindingProvider(component,service,distributedBinding);
}
 else {
}
",0,0,0,,
338,} else {,"if (distributedProviderFactory != null) {
  URI serviceURI=null;
  try {
    serviceURI=new URI(binding.getURI());
  }
 catch (  Exception ex) {
  }
  if (RemoteBindingHelper.isTargetRemote() || ((serviceURI != null) && (serviceURI.isAbsolute()))) {
    distributedBinding=new DistributedSCABindingImpl();
    distributedBinding.setSCABinding(binding);
    distributedProvider=distributedProviderFactory.createServiceBindingProvider(component,service,distributedBinding);
  }
 else {
  }
}
 else {
}
",0,0,0,,
339,}else {,"if (Axis2HeaderPolicy.class.isInstance(p)) {
  axis2HeaderPolicies.add((Axis2HeaderPolicy)p);
}
 else {
}
",0,0,0,,
340,} else {,"if (Axis2HeaderPolicy.class.isInstance(p)) {
  axis2HeaderPolicies.add((Axis2HeaderPolicy)p);
}
 else {
}
",0,0,0,,
341,} else {,"if (wsdlProvidedByUser) {
  WSDLFactory factory=null;
  try {
    factory=WSDLFactory.newInstance();
  }
 catch (  WSDLException e) {
    throw new WSDLGenerationException(e);
  }
  Definition newDef=factory.newDefinition();
  String nsName=component.getName() + ""/"" + contractName;
  String namespaceURI=null;
  try {
    URI userTNS=new URI(def.getTargetNamespace());
    namespaceURI=userTNS.resolve(""/"" + nsName).toString();
  }
 catch (  URISyntaxException e1) {
    throw new WSDLGenerationException(e1);
  }
catch (  IllegalArgumentException e2) {
    throw new WSDLGenerationException(e2);
  }
  String defsName=component.getName() + ""."" + contractName;
  newDef.setQName(new QName(namespaceURI,defsName));
  newDef.setTargetNamespace(namespaceURI);
  newDef.addNamespace(""tns"",namespaceURI);
  newDef.addNamespace(""wsdl"",""http://schemas.xmlsoap.org/wsdl/"");
  List<WSDLDefinition> imports=new ArrayList<WSDLDefinition>();
  Interface interfaze=wsBinding.getBindingInterfaceContract().getInterface();
  if (interfaze instanceof WSDLInterface) {
    PortType portType=((WSDLInterface)interfaze).getPortType();
    boolean ok=importPortType(portType,wsdlDefinition,newDef,imports);
    if (!ok) {
      error(monitor,""PortTypeNotFound"",wsBinding,portType.getQName().toString(),component.getName(),contract.getName());
    }
  }
  Binding binding=wsBinding.getBinding();
  if (binding != null) {
    boolean ok=importBinding(binding,wsdlDefinition,newDef,imports);
    if (ok) {
      boolean ok2=importPortType(binding.getPortType(),wsdlDefinition,newDef,imports);
      if (!ok2) {
        error(monitor,""PortTypeNotFound"",wsBinding,binding.getPortType().getQName().toString(),component.getName(),contract.getName());
      }
    }
 else {
      error(monitor,""BindingNotFound"",wsBinding,binding.getQName().toString(),component.getName(),contract.getName());
    }
  }
  QName serviceQName=wsBinding.getServiceName();
  String portName=wsBinding.getPortName();
  if (serviceQName != null) {
    Service service=def.getService(serviceQName);
    if (portName != null) {
      Port port=service.getPort(portName);
      Port newPort=copyPort(newDef,port,wsBinding);
      if (newPort != null) {
        importBinding(port.getBinding(),wsdlDefinition,newDef,imports);
        ports.add(newPort);
      }
 else {
        error(monitor,""InvalidPort"",wsBinding,serviceQName.toString(),portName,component.getName(),contract.getName());
      }
    }
 else {
      for (      Object port : service.getPorts().values()) {
        Port newPort=copyPort(newDef,(Port)port,wsBinding);
        if (newPort != null) {
          importBinding(((Port)port).getBinding(),wsdlDefinition,newDef,imports);
          ports.add(newPort);
        }
 else {
          warning(monitor,""IgnoringPort"",wsBinding,serviceQName.toString(),((Port)port).getName(),component.getName(),contract.getName());
        }
      }
      if (ports.size() == 0) {
        error(monitor,""NoValidPorts"",wsBinding,serviceQName.toString(),component.getName(),contract.getName());
      }
    }
  }
  def=newDef;
}
 else {
}
",0,0,0,,
342,} else {,"if (!spaceFound) {
  sb.append(c);
  spaceFound=true;
}
 else {
}
",0,0,0,,
343,if (callback != null && !(callback instanceof CallableReference)) {,"if (callback != null && !(callback instanceof CallableReference)) {
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
344,} else {,"if (pValue != null) {
  int i1=Array.getLength(pValue);
  for (int j=0; j < i1; j++) {
    Object o=Array.get(pValue,j);
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
345,} else {,"if (objList != null && objList.size() > 0) {
  for (Iterator j=objList.iterator(); j.hasNext(); ) {
    Object o=j.next();
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
346,} else {,"if (pValue != null) {
  int i1=Array.getLength(pValue);
  for (int j=0; j < i1; j++) {
    Object o=Array.get(pValue,j);
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
347,} else {,"if (objList != null && objList.size() > 0) {
  for (Iterator j=objList.iterator(); j.hasNext(); ) {
    Object o=j.next();
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
348,} else {,"if (actual > less || actual == '&' || actual == '#' || actual == '\'' || actual == ' ' || actual == '%' || actual == ':' || actual == '(' || actual == ')' || actual == '""') {
  sb.append(actual);
}
 else {
}
",0,0,0,,
349,if (endpoint.isUnresolved() != true){,"if (endpoint.isUnresolved() != true) {
}
 else {
}
",0,0,3,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
350,} else {,"if (endpoint.isUnresolved() != true) {
}
 else {
}
",0,0,0,,
351,if (ctor.getParameterTypes().length == sites) {,"if (ctor.getParameterTypes().length == sites) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
352,if (scope.equals(Scope.SYSTEM) || scope.equals(Scope.COMPOSITE)) {,"if (scope.equals(Scope.SYSTEM) || scope.equals(Scope.COMPOSITE)) {
}
 else {
  if (runtimeComponent instanceof ScopedRuntimeComponent) {
    ScopedRuntimeComponent component=(ScopedRuntimeComponent)runtimeComponent;
    ScopeContainer oldScopeContainer=component.getScopeContainer();
    component.setScopeContainer(null);
    ScopeContainer scopeContainer=scopeRegistry.getScopeContainer(runtimeComponent);
    if (oldScopeContainer != null && oldScopeContainer.getLifecycleState() == ScopeContainer.RUNNING) {
      scopeContainer.start();
    }
    component.setScopeContainer(scopeContainer);
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
353,if (event.getType() == ServiceEvent.UNREGISTERING && reference.getBundle() == bundle) {,"if (event.getType() == ServiceEvent.UNREGISTERING && reference.getBundle() == bundle) {
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
354,} else {,"if (vm != null) {
  try {
    vm.stop();
  }
 catch (  InterruptedException e) {
    throw new ServiceRuntimeException(e);
  }
  nodeVMs.remove(vm);
}
 else {
}
",0,0,0,,
355,"if (((String)pkg).startsWith(""org.osgi"")) {","if (((String)pkg).startsWith(""org.osgi"")) {
}
 else if (!version.matches("".*\\..*\\."")) {
  Version curVersion=new Version(version);
  Version nextVersion=new Version(curVersion.getMajor(),curVersion.getMinor() + 1,0);
  version='[' + version + ','+ nextVersion+ ')';
}
 else version='[' + version + ','+ version+ ']';
",0,0,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
356,} else {,"if (id != null && id.length() > 0) {
  requestMessage.setBody(new Object[]{id});
}
 else {
}
",0,0,0,,
357,} else {,"if (!spaceFound) {
  sb.append(c);
  spaceFound=true;
}
 else {
}
",0,0,0,,
358,} else {,"if (invoker instanceof InterceptorAsync) {
  ((InterceptorAsync)invoker).setPrevious(asyncResponseInvoker);
}
 else {
}
",0,0,0,,
359,} else {,"if (serviceBindingProvider instanceof EndpointAsyncProvider) {
  EndpointAsyncProvider asyncEndpointProvider=(EndpointAsyncProvider)serviceBindingProvider;
  InvokerAsyncResponse asyncResponseInvoker=asyncEndpointProvider.createAsyncResponseInvoker();
  for (  InvocationChain chain : getInvocationChains()) {
    Invoker invoker=chain.getHeadInvoker();
    if (invoker instanceof InterceptorAsync) {
      ((InterceptorAsync)invoker).setPrevious(asyncResponseInvoker);
    }
 else {
    }
  }
}
 else {
}
",0,0,0,,
360,} else {,"if (chain.getHeadInvoker() instanceof InterceptorAsync) {
  ((InterceptorAsync)chain.getHeadInvoker()).setPrevious(asyncResponseInvoker);
}
 else {
}
",0,0,0,,
361,} else {,"if (xmlString instanceof WSDLInfo) {
  WSDLDefinition wsdlDefinition=((WSDLInfo)xmlString).getWsdlDefintion();
  for (  Map.Entry<String,List<javax.wsdl.Import>> entry : ((Map<String,List<javax.wsdl.Import>>)wsdlDefinition.getDefinition().getImports()).entrySet()) {
    for (    javax.wsdl.Import imp : entry.getValue()) {
      String wsdlName=imp.getDefinition().getDocumentBaseURI();
      WSDLInfo wsdlInfo=(WSDLInfo)xmlMap.get(getFilenameWithoutPath(wsdlName));
      wsdlDefinition.getImportedDefinitions().add(wsdlInfo.getWsdlDefintion());
    }
  }
  Types types=wsdlDefinition.getDefinition().getTypes();
  if (types != null) {
    int index=0;
    for (    Object ext : types.getExtensibilityElements()) {
      ExtensibilityElement extElement=(ExtensibilityElement)ext;
      Element element=null;
      if (extElement instanceof Schema) {
        element=((Schema)extElement).getElement();
      }
      if (element != null) {
        XSDefinition xsDefinition=xsdFactory.createXSDefinition();
        xsDefinition.setUnresolved(true);
        xsDefinition.setNamespace(element.getAttribute(""targetNamespace""));
        xsDefinition.setDocument(element.getOwnerDocument());
        XmlSchema schema=schemaCollection.read(element,null);
        xsDefinition.setSchema(schema);
        xsDefinition.setLocation(URI.create(xmlString.getBaseURI() + ""#"" + index));
        wsdlDefinition.getXmlSchemas().add(xsDefinition);
        index++;
      }
    }
  }
}
 else {
}
",0,0,0,,
362,} else {,"if (callbackHandler.getCallbackTargetURI() != null) {
  epr.getBinding().setURI(callbackHandler.getCallbackTargetURI());
}
 else {
}
",0,0,0,,
363,} else {,"if (pValue != null) {
  int i1=Array.getLength(pValue);
  for (int j=0; j < i1; j++) {
    Object o=Array.get(pValue,j);
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
364,} else {,"if (objList != null && objList.size() > 0) {
  for (Iterator j=objList.iterator(); j.hasNext(); ) {
    Object o=j.next();
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
365,} else {,"if (type != null) {
  if (mapper.isSimpleXSDType(type)) {
    String NS_URI=bpelDOM.getDocumentElement().getNamespaceURI();
    String valueText=getPropertyValueText(property.getValue());
    Element literalElement=bpelDOM.createElementNS(NS_URI,""literal"");
    literalElement.setTextContent(valueText);
    Element fromElement=bpelDOM.createElementNS(NS_URI,""from"");
    fromElement.appendChild(literalElement);
    Element toElement=bpelDOM.createElementNS(NS_URI,""to"");
    Attr variableAttribute=bpelDOM.createAttribute(""variable"");
    variableAttribute.setValue(property.getName());
    toElement.setAttributeNode(variableAttribute);
    Element copyElement=bpelDOM.createElementNS(NS_URI,""copy"");
    copyElement.appendChild(fromElement);
    copyElement.appendChild(toElement);
    Element assignElement=bpelDOM.createElementNS(NS_URI,""assign"");
    assignElement.appendChild(copyElement);
    return assignElement;
  }
}
 else {
}
",0,0,0,,
366,} else {,"if (!wsdl.isUnresolved()) {
  bpelImport.setWSDLDefinition(wsdl);
}
 else {
}
",0,0,0,,
367,} else {,"if (myData.value == null) {
  myData.value=new Order();
  myData.value.setStatus(Status.REJECTED);
}
 else {
}
",0,0,0,,
368,} else {,"if (xmlString instanceof WSDLInfo) {
  wsdlDefinition=((WSDLInfo)xmlString).getWsdlDefintion();
  for (  Map.Entry<String,List<javax.wsdl.Import>> entry : ((Map<String,List<javax.wsdl.Import>>)wsdlDefinition.getDefinition().getImports()).entrySet()) {
    for (    javax.wsdl.Import imp : entry.getValue()) {
      String wsdlName=imp.getDefinition().getDocumentBaseURI();
      WSDLInfo wsdlInfo=(WSDLInfo)xmlMap.get(getFilenameWithoutPath(wsdlName));
      wsdlDefinition.getImportedDefinitions().add(wsdlInfo.getWsdlDefintion());
    }
  }
  Types types=wsdlDefinition.getDefinition().getTypes();
  if (types != null) {
    for (int i=0; i < types.getExtensibilityElements().size(); i++) {
      String schemaName=xmlString.getBaseURI() + ""#"" + i++;
      XSDInfo xsdInfo=(XSDInfo)xmlMap.get(getFilenameWithoutPath(schemaName));
      wsdlDefinition.getXmlSchemas().add(xsdInfo.getXsdDefinition());
    }
  }
}
 else {
}
",0,0,0,,
369,} else {,"if (schemaEl.getAttributeNode(""targetNamespace"") != null) {
  String contain=schemaEl.getAttribute(""targetNamespace"");
  schema.setTargetNamespace(contain);
}
 else {
}
",0,0,0,,
370,} else {,"if (arg1 instanceof Assertion) {
  return compare((Assertion)arg1,(Assertion)arg2);
}
 else {
}
",0,0,0,,
371,} else {,"if (schemaEl.getAttributeNode(""targetNamespace"") != null) {
  String contain=schemaEl.getAttribute(""targetNamespace"");
  schema.setTargetNamespace(contain);
}
 else {
}
",0,0,0,,
372,"if (e.toString().toLowerCase().matches("".*(problem|failure)(s?) rebinding.*"")) {","if (e.toString().toLowerCase().matches("".*(problem|failure)(s?) rebinding.*"")) {
}
 else {
  throw Exceptions.propagate(e);
}
",1,91,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
373,if (pathExceptionSuppressed && e.getCause() instanceof org.apache.cayenne.reflect.UnresolvablePathException) {,"if (pathExceptionSuppressed && e.getCause() instanceof org.apache.cayenne.reflect.UnresolvablePathException) {
}
 else {
  throw e;
}
",1,9,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
374,} else if (key.equals(RESIZE_UP_ITERATION_INCREMENT) || key.equals(RESIZE_UP_ITERATION_MAX) || key.equals(RESIZE_DOWN_ITERATION_INCREMENT) || key.equals(RESIZE_DOWN_ITERATION_MAX)) {,"if (key.equals(RESIZE_UP_ITERATION_INCREMENT) || key.equals(RESIZE_UP_ITERATION_MAX) || key.equals(RESIZE_DOWN_ITERATION_INCREMENT)|| key.equals(RESIZE_DOWN_ITERATION_MAX)) {
}
 else if (key.equals(MIN_POOL_SIZE)) {
  int newMin=(Integer)val;
  if (newMin > getConfig(MAX_POOL_SIZE)) {
    throw new IllegalArgumentException(""Min pool size "" + val + "" must not be greater than max pool size ""+ getConfig(MAX_POOL_SIZE));
  }
  onPoolSizeLimitsChanged(newMin,getConfig(MAX_POOL_SIZE));
}
 else if (key.equals(MAX_POOL_SIZE)) {
  int newMax=(Integer)val;
  if (newMax < getConfig(MIN_POOL_SIZE)) {
    throw new IllegalArgumentException(""Min pool size "" + val + "" must not be greater than max pool size ""+ getConfig(MAX_POOL_SIZE));
  }
  onPoolSizeLimitsChanged(getConfig(MIN_POOL_SIZE),newMax);
}
 else if (key.equals(INSUFFICIENT_CAPACITY_HIGH_WATER_MARK)) {
  Integer newVal=(Integer)val;
  Integer oldVal=config().get(INSUFFICIENT_CAPACITY_HIGH_WATER_MARK);
  if (oldVal != null && (newVal == null || newVal > oldVal)) {
    LOG.info(""{} resetting {} to {}, which will enable resizing above previous level of {}"",new Object[]{AutoScalerPolicy.this,INSUFFICIENT_CAPACITY_HIGH_WATER_MARK.getName(),newVal,oldVal});
  }
}
 else {
  throw new UnsupportedOperationException(""reconfiguring "" + key + "" unsupported for ""+ this);
}
",1,4,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
375,"if(! (key.equals(""Import-Package"") || key.equals(""Export-Package"")) ){","if (!(key.equals(""Import-Package"") || key.equals(""Export-Package""))) {
}
",1,6,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
376,if (Character.isJavaIdentifierPart(c)) ;,"if (Character.isJavaIdentifierPart(c)) ;
 else if ("".:"".indexOf(c) >= 0) ;
 else break;
",1,6,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
377,"else if ("".:"".indexOf(c)>=0) ;","if ("".:"".indexOf(c) >= 0) ;
 else break;
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
378,if ((overwritten instanceof EffectorWithBody) && !(overwritten instanceof MethodEffector<?>)) {,"if ((overwritten instanceof EffectorWithBody) && !(overwritten instanceof MethodEffector<?>)) {
}
 else {
  result.put(eff.getName(),eff);
  Method overwrittenMethodSource=methodSources.put(eff.getName(),m);
  Field overwrittenFieldSource=fieldSources.remove(eff.getName());
  LOG.trace(""multiple definitions for effector {} on {}; preferring {} from {} to {} from {}"",new Object[]{eff.getName(),(optionalEntity != null ? optionalEntity : clazz),eff,m,overwritten,(overwrittenMethodSource != null ? overwrittenMethodSource : overwrittenFieldSource)});
}
",1,1,5,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
379,if (constraint.getExpectedJavaSuperType().isAssignableFrom(BrooklynObjectInternal.class)) {,"if (constraint.getExpectedJavaSuperType().isAssignableFrom(BrooklynObjectInternal.class)) {
}
 else {
  @SuppressWarnings(""unchecked"") Class<? extends AbstractBrooklynObjectSpec<?,?>> specType=RegisteredTypeLoadingContexts.lookupSpecTypeForTarget((Class<? extends BrooklynObject>)constraint.getExpectedJavaSuperType());
  if (specType == null) {
    Maybe.absent(object + "" is returned as spec for unexpected java supertype "" + constraint.getExpectedJavaSuperType());
  }
  if (!specType.isAssignableFrom(object.getClass())) {
    Maybe.absent(object + "" is not a spec of the expected java supertype "" + constraint.getExpectedJavaSuperType());
  }
}
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, IfStatement-expression, ),
"
380,if (Tasks.isSubmitted(task) && getTaskQueuingContext()==null) {,"if (Tasks.isSubmitted(task) && getTaskQueuingContext() == null) {
}
 else {
  queue(task);
}
",1,3,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
381,"if (unwrapped != null && unwrapped.getMessage().contains(""failed to get to initial size"")) {","if (unwrapped != null && unwrapped.getMessage().contains(""failed to get to initial size"")) {
}
 else {
  throw e;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
382,if ((t.toString().contains(BailOutJcloudsLocation.ERROR_MESSAGE))) {,"if ((t.toString().contains(BailOutJcloudsLocation.ERROR_MESSAGE))) {
}
 else {
  Exceptions.propagate(t);
}
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
"
383,if (i == 0 && ch == '-') {,"if (i == 0 && ch == '-') {
}
 else if (!Character.isDigit(ch)) {
  return false;
}
",1,3,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
384,(System.currentTimeMillis() - lastTimeStamp) < CHECK_PERIOD) {,"if ((System.currentTimeMillis() - lastTimeStamp) < CHECK_PERIOD) {
}
 else if ((System.currentTimeMillis() - lastTimeStamp) < (2 * CHECK_PERIOD)) {
  if (!(textFeld.getText().trim().equals(lastText.trim()))) {
    lastText=textFeld.getText();
    EventQueue.invokeLater(new Runnable(){
      public void run(){
        setFilter();
      }
    }
);
  }
}
 else {
}
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
"
385,"if (osName.toLowerCase(Locale.ENGLISH).startsWith(""mac"")) {","if (osName.toLowerCase(Locale.ENGLISH).startsWith(""mac"")) {
}
 else if (osName.toLowerCase(Locale.ENGLISH).startsWith(""windows"")) {
  lookAndFeelClassName=""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"";
  model.setLookAndFeelClassName(lookAndFeelClassName);
}
 else if (osName.toLowerCase(Locale.ENGLISH).startsWith(""linux"")) {
  lookAndFeelClassName=""com.sun.java.swing.plaf.gtk.GTKLookAndFeel"";
  model.setLookAndFeelClassName(lookAndFeelClassName);
}
",1,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
386,if (getInvoker(message).isOutbound()) {,"if (getInvoker(message).isOutbound()) {
}
 else {
  onCompletion(message);
}
",1,1,3,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
387,"|| (('0' <= c) && (c <= '9')) || (c == '_') || (c == '.') || (c == '""')) {","if ((('a' <= c) && (c <= 'z')) || (('A' <= c) && (c <= 'Z')) || (('0' <= c) && (c <= '9'))|| (c == '_')|| (c == '.')|| (c == '""')) {
}
 else {
  throw parseException(""Expected identifier. -"" + c);
}
",1,1,10,,"CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
388,&& steps[1].getNameTest() == null) {,"if (steps.length == 2 && steps[1].getIncludeDescendants() && steps[1].getNameTest() == null) {
}
 else if (steps.length == 1 && steps[0].getIncludeDescendants() && steps[0].getNameTest() == null) {
}
 else {
  if (predicates.length > 0) {
    sb.append("" AND "");
  }
 else {
    sb.append("" WHERE "");
  }
  node.getLocationNode().accept(this,sb);
}
",1,1,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
389,"if( ""$"".equals( token ) || ""("".equals( token ) || "")"".equals( token ) || ""["".equals( token ) || ""]"".equals( token ) ) {","if (""$"".equals(token) || ""("".equals(token) || "")"".equals(token)|| ""["".equals(token)|| ""]"".equals(token)) {
}
 else {
  paramName=token;
  return;
}
",1,2,15,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
390,((XmlSchemaImport)obj).getNamespace().equals(toNamespace)){,"if (obj instanceof XmlSchemaImport && ((XmlSchemaImport)obj).getNamespace().equals(toNamespace)) {
}
 else {
  toItems.add(obj);
  movedItems.add(obj);
}
",1,1,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
"
391,if (pos + contentLength + 1 > data) {,"if (pos + contentLength + 1 > data) {
}
 else {
  content=new byte[contentLength];
  System.arraycopy(workingBuffer,pos,content,0,contentLength);
  pos+=contentLength + 1;
}
",2,2,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
392,if (cache != null && cache.getZipFile() == z) {,"if (cache != null && cache.getZipFile() == z) {
}
 else {
  try {
    z.close();
  }
 catch (  IOException e) {
    throw new IORuntimeException(""IOException in ZipFileImpl.closeZipFile"",e);
  }
}
",2,2,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
393,if (constraint.getAlreadyEncounteredTypes().contains(type.getSymbolicName())) {,"if (constraint.getAlreadyEncounteredTypes().contains(type.getSymbolicName())) {
}
",2,2,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
394,if (secsS.indexOf('.')>=0) {,"if (secsS.indexOf('.') >= 0) {
}
 else if (secsS.length() == 5) {
  s=s/=1000;
}
 else {
  return Maybe.absent(""Unknown date format '"" + input + ""': invalid seconds '""+ secsS+ ""'; try http://yaml.org/type/timestamp.html format e.g. 2015-06-15 16:00:00 +0000"");
}
",2,2,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
395,} else if (schemaList.get(docBaseURI) != null && schemaList.containsValue(schemaEle)) {,"if (schemaList.get(docBaseURI) != null && schemaList.containsValue(schemaEle)) {
}
 else {
  String tns=schema.getDocumentBaseURI() + ""#"" + schema.getElement().getAttribute(""targetNamespace"");
  if (schemaList.get(tns) == null) {
    schemaList.put(tns,schema.getElement());
  }
}
",2,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
396,"if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class, e)) {","if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class,e)) {
}
 else {
  throw Utils.wrapInRuntime(e);
}
",2,2,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
397,if (!(info.userRecordType == JournalRecordIds.ADD_MESSAGE_PROTOCOL)) {,"if (!(info.userRecordType == JournalRecordIds.ADD_MESSAGE_PROTOCOL)) {
}
",3,3,2,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
398,if (x==null || !x.hasNext()) {},"if (x == null || !x.hasNext()) {
}
 else {
  x.next();
  count++;
  if (x.hasNext())   count++;
}
",3,5,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
399,"if (exception instanceof UserFacingException && exception.toString().contains(""Passwords did not match"")) {","if (exception instanceof UserFacingException && exception.toString().contains(""Passwords did not match"")) {
}
 else {
  throw new Exception(exception);
}
",3,3,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
400,} else if (event.getBody().length == 0) {,"if (event.getBody().length == 0) {
}
 else {
  byte[] body=event.getBody();
  byte[] data=Arrays.copyOf(body,Math.min(body.length,maxBytes));
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    HexDump.dump(data,0,out,0);
    String hexDump=new String(out.toByteArray());
    if (hexDump.startsWith(HEXDUMP_OFFSET)) {
      hexDump=hexDump.substring(HEXDUMP_OFFSET.length());
    }
    buffer.append(hexDump);
  }
 catch (  Exception e) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""Exception while dumping event"",e);
    }
    buffer.append(""...Exception while dumping: "").append(e.getMessage());
  }
  String result=buffer.toString();
  if (result.endsWith(EOL) && buffer.length() > EOL.length()) {
    buffer.delete(buffer.length() - EOL.length(),buffer.length()).toString();
  }
}
",4,4,4,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
401,else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe'))) {,"if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe'))) {
}
 else {
  throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
}
",5,5,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
"
402,if (maybe.getCause() instanceof IOException) {,"if (maybe.getCause() instanceof IOException) {
}
 else {
  exit(toString() + "" failed with JMSException"",maybe);
}
",9,45,3,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
