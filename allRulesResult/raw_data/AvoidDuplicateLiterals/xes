122000,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,260,,"        Types.NestedField.optional(5, ""properties"","
122001,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,313,,"        Types.NestedField.optional(5, ""locations"", Types.MapType.ofOptional(6, 7,"
122002,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,344,,"    Assert.assertEquals(""Should project locations map"","
122003,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,416,,"        Types.NestedField.optional(10, ""values"","
122004,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,450,,"        Types.NestedField.optional(22, ""points"","
122005,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,480,,"    Assert.assertEquals(""Should project points list"","
122006,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestSchemaConversions.java,109,,"        optional(22, ""long"", Types.LongType.get()),"
122007,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestSchemaConversions.java,193,,"    Assert.assertEquals(""Avro schema to map"","
122008,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/avro/TestSchemaConversions.java,195,,"    Assert.assertEquals(""Map to Avro schema"","
122009,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,41,,"      Row.of(0L, ""a"", ""panda""),"
122010,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,42,,"      Row.of(1L, ""b"", ""koala""),"
122011,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,43,,"      Row.of(2L, ""c"", new Utf8(""kodiak"")),"
122012,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,45,,"      Row.of(5L, ""e"", ""brown""),"
122013,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,46,,"      Row.of(6L, ""f"", new Utf8(""teddy"")),"
122014,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,47,,"      Row.of(7L, ""g"", ""grizzly""),"
122015,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestEqualityFilter.java,68,,"    Assert.assertEquals(""Filter should produce expected rows"","
122016,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestPositionFilter.java,37,,"        Row.of(""file_a.avro"", 0L),"
122017,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestPositionFilter.java,42,,"        Row.of(new Utf8(""file_b.avro""), 16L),"
122018,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/deletes/TestPositionFilter.java,115,,"    Assert.assertEquals(""Filter should produce expected rows"","
122019,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/HadoopTableTestBase.java,54,,"      required(4, ""data"", Types.StringType.get())"
122020,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestCachingCatalog.java,44,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122021,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestCachingCatalog.java,44,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122022,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestCachingCatalog.java,44,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122023,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestCachingCatalog.java,45,,"    Table table = catalog.createTable(tableIdent, SCHEMA, SPEC, ImmutableMap.of(""key2"", ""value2""));"
122024,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestCachingCatalog.java,45,,"    Table table = catalog.createTable(tableIdent, SCHEMA, SPEC, ImmutableMap.of(""key2"", ""value2""));"
122025,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,63,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122026,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,63,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122027,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,63,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122028,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,67,,"        .withProperty(""key1"", ""value1"")"
122029,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,67,,"        .withProperty(""key1"", ""value1"")"
122030,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,68,,"        .withProperties(ImmutableMap.of(""key2"", ""value2""))"
122031,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,68,,"        .withProperties(ImmutableMap.of(""key2"", ""value2""))"
122032,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,239,,"    TableIdentifier testTable = TableIdentifier.of(""db"", ""tbl1"");"
122033,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,243,,"          catalog.renameTable(testTable, TableIdentifier.of(""db"", ""tbl2""));"
122034,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,257,,"    TableIdentifier tbl4 = TableIdentifier.of(""db"", ""metadata"", ""metadata"");"
122035,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,301,,"    TableIdentifier tbl2 = TableIdentifier.of(""db"", ""ns2"", ""ns3"", ""tbl2"");"
122036,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java,332,,"    TableIdentifier tbl5 = TableIdentifier.of(""db2"", ""metadata"");"
122037,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCommits.java,64,,"    Assert.assertEquals(""Table schema should match schema with reassigned ids"","
122038,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCommits.java,76,,"    Assert.assertTrue(""Should create v1 metadata"","
122039,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCommits.java,78,,"    Assert.assertFalse(""Should not create v2 or newer versions"","
122040,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCommits.java,82,,"    Assert.assertEquals(""Should write the current version to the hint file"","
122041,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCommits.java,86,,"    Assert.assertEquals(""Should contain 0 Avro manifest files"", 0, manifests.size());"
122042,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCommits.java,100,,"    Assert.assertTrue(""Should create v2 for the update"","
122043,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/hadoop/TestHadoopTables.java,56,,"      required(2, ""data"", Types.StringType.get())"
122044,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,119,,"    catalog.initialize(""test_jdbc_catalog"", properties);"
122045,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,137,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122046,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,137,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122047,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,137,,"    TableIdentifier tableIdent = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl"");"
122048,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,141,,"        .withProperty(""key1"", ""value1"")"
122049,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,141,,"        .withProperty(""key1"", ""value1"")"
122050,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,142,,"        .withProperties(ImmutableMap.of(""key2"", ""value2""))"
122051,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,142,,"        .withProperties(ImmutableMap.of(""key2"", ""value2""))"
122052,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,242,,"    AssertHelpers.assertThrows(""should throw exception"", AlreadyExistsException.class,"
122053,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,343,,"    TableIdentifier testTable2 = TableIdentifier.of(""db"", ""ns1"", ""ns2"", ""tbl2"");"
122054,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,358,,"    TableIdentifier from = TableIdentifier.of(""db"", ""tbl1"");"
122055,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,385,,"    TableIdentifier tbl5 = TableIdentifier.of(""db"", ""metadata"", ""metadata"");"
122056,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,451,,"    TableIdentifier tbl2 = TableIdentifier.of(""db"", ""ns2"", ""ns3"", ""tbl2"");"
122057,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,452,,"    TableIdentifier tbl3 = TableIdentifier.of(""db"", ""ns3"", ""tbl4"");"
122058,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/jdbc/TestJdbcCatalog.java,454,,"    TableIdentifier tbl5 = TableIdentifier.of(""db2"", ""metadata"");"
122059,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestMappingUpdates.java,54,,"            MappedField.of(2, ""data"")),"
122060,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestMappingUpdates.java,85,,"        .addColumn(""point"", Types.StructType.of("
122061,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,35,,"        required(2, ""data"", Types.StringType.get()));"
122062,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,50,,"        required(3, ""location"", Types.StructType.of("
122063,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,51,,"            required(4, ""latitude"", Types.FloatType.get()),"
122064,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,52,,"            required(5, ""longitude"", Types.FloatType.get())"
122065,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,72,,"        required(3, ""map"", Types.MapType.ofRequired(4, 5,"
122066,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,80,,"            MappedField.of(4, ""key""),"
122067,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,81,,"            MappedField.of(5, ""value"")"
122068,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,146,,"        required(3, ""list"", Types.ListType.ofRequired(4, Types.StringType.get())));"
122069,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,152,,"            MappedField.of(4, ""element"")"
122070,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/mapping/TestNameMapping.java,234,,"    Assert.assertNull(""Should not return a field mapping for a nested name"", mapping.find(""element""));"
122071,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestBinPacking.java,31,,"    Assert.assertEquals(""Should pack the first 2 values"","
122072,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestBinPacking.java,43,,"    Assert.assertEquals(""Should pack the first 3 values, last 2 values"","
122073,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,40,,"    CustomCheckedException exc = new CustomCheckedException(""test"");"
122074,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,45,,"            throw new Exception(""test catch suppression"");"
122075,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,47,,"            throw new RuntimeException(""test finally suppression"");"
122076,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,54,,"      LOG.info(""Final exception"", e);"
122077,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,55,,"      Assert.assertEquals(""Should throw correct exception instance"", exc, e);"
122078,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,56,,"      Assert.assertEquals(""Should not alter exception message"", ""test"", e.getMessage());"
122079,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,57,,"      Assert.assertEquals(""Should have 2 suppressed exceptions"", 2, e.getSuppressed().length);"
122080,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,60,,"      Assertions.assertThat(throwSuppressed).as(""Should be an Exception"").isInstanceOf(Exception.class);"
122081,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java,61,,"      Assert.assertEquals(""Should have correct message"", ""test catch suppression"", throwSuppressed.getMessage());"
122082,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestStructLikeMap.java,38,,"      Types.NestedField.optional(2, ""data"", Types.LongType.get())"
122083,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestStructLikeMap.java,49,,"    map.put(record1, ""1-aaa"");"
122084,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestStructLikeMap.java,85,,"    map.putAll(ImmutableMap.of(record1, ""1-aaa"", record2, ""2-bbb"", record3, ""3-null""));"
122085,./TargetProjects/iceberg/core/src/test/java/org/apache/iceberg/util/TestStructLikeMap.java,85,,"    map.putAll(ImmutableMap.of(record1, ""1-aaa"", record2, ""2-bbb"", record3, ""3-null""));"
122086,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/DataTest.java,44,,"      optional(101, ""data"", Types.StringType.get()),"
122087,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java,51,,"      Types.NestedField.required(2, ""data"", Types.StringType.get())"
122088,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/DeleteReadTests.java,125,,"    Assert.assertEquals(""Table should contain expected rows"", expected, actual);"
122089,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestDataFileIndexStatsFilters.java,49,,"      Types.NestedField.optional(2, ""data"", Types.StringType.get()),"
122090,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestDataFileIndexStatsFilters.java,50,,"      Types.NestedField.required(3, ""category"", Types.StringType.get()));"
122091,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestDataFileIndexStatsFilters.java,69,,"    records.add(record.copy(""id"", 1, ""data"", ""a"", ""category"", ""odd""));"
122092,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestDataFileIndexStatsFilters.java,70,,"    records.add(record.copy(""id"", 2, ""data"", ""b"", ""category"", ""even""));"
122093,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestDataFileIndexStatsFilters.java,112,,"    Assert.assertEquals(""Should produce one task"", 1, tasks.size());"
122094,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java,75,,"      optional(2, ""data"", Types.StringType.get()));"
122095,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java,259,,"    Assert.assertEquals(""Should produce correct number of records"","
122096,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java,349,,"    Assert.assertEquals(""Record set should match"","
122097,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestLocalScan.java,469,,"        required(1, ""timestamp_with_zone"", Types.TimestampType.withZone()),"
122098,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,109,,"      optional(2, ""no_stats_parquet"", StringType.get()),"
122099,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,111,,"      optional(4, ""all_nulls"", DoubleType.get()),"
122100,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,112,,"      optional(5, ""some_nulls"", StringType.get()),"
122101,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,113,,"      optional(6, ""no_nulls"", StringType.get()),"
122102,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,115,,"      optional(9, ""not_in_file"", FloatType.get()),"
122103,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,116,,"      optional(10, ""str"", StringType.get()),"
122104,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,192,,"        record.setField(""_some_nulls"", (i % 10 == 0) ? null : ""some""); // includes some null values"
122105,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,301,,"    Assert.assertTrue(""Should read: NaN counts are not tracked in Parquet metrics"", shouldRead);"
122106,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,447,,"    Assert.assertFalse(""Should not read: id range below lower bound (5 < 30)"", shouldRead);"
122107,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,453,,"    Assert.assertTrue(""Should read: one possible id"", shouldRead);"
122108,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,456,,"    Assert.assertTrue(""Should read: may possible ids"", shouldRead);"
122109,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,477,,"    Assert.assertFalse(""Should not read: id range above upper bound (85 < 79)"", shouldRead);"
122110,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,507,,"    Assert.assertFalse(""Should not read: id below lower bound"", shouldRead);"
122111,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,513,,"    Assert.assertTrue(""Should read: id equal to lower bound"", shouldRead);"
122112,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,516,,"    Assert.assertTrue(""Should read: id between lower and upper bounds"", shouldRead);"
122113,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,519,,"    Assert.assertTrue(""Should read: id equal to upper bound"", shouldRead);"
122114,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,522,,"    Assert.assertFalse(""Should not read: id above upper bound"", shouldRead);"
122115,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,531,,"    Assert.assertTrue(""Should read: id below lower bound"", shouldRead);"
122116,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,546,,"    Assert.assertTrue(""Should read: id above upper bound"", shouldRead);"
122117,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,578,,"    boolean shouldRead = shouldRead(lessThan(""struct_not_null.int_field"", INT_MIN_VALUE - 25));"
122118,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,694,,"    Assert.assertTrue(""Should read: range matches"", shouldRead);"
122119,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,709,,"    Assert.assertFalse(""Should not read: range doesn't match"", shouldRead);"
122120,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java,747,,"    shouldRead = shouldRead(in(""some_nulls"", ""aaa"", ""some""));"
122121,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilterTypes.java,228,,"        { ""parquet"", ""boolean"", false, true },"
122122,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilterTypes.java,241,,"        { ""parquet"", ""int_decimal"", ""77.77"", ""12.34"" },"
122123,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilterTypes.java,245,,"        { ""orc"", ""boolean"", false, true },"
122124,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,51,,"        Types.NestedField.optional(1, ""data"", Types.StringType.get())"
122125,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,56,,"    record.setField(""data"", ""test"");"
122126,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,60,,"    Assert.assertEquals(""Should contain the correct id value"", 34L, (long) projected.getField(""id""));"
122127,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,64,,"    Assert.assertTrue(""Should contain the correct data value"", cmp == 0);"
122128,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,70,,"        Types.NestedField.required(0, ""user id"", Types.LongType.get()),"
122129,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,71,,"        Types.NestedField.optional(1, ""data%0"", Types.StringType.get())"
122130,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,219,,"    Assert.assertNull(""Should not project id"", projected.getField(""id""));"
122131,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,253,,"        Types.NestedField.optional(3, ""location"", Types.StructType.of("
122132,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,254,,"            Types.NestedField.required(1, ""lat"", Types.FloatType.get()),"
122133,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,255,,"            Types.NestedField.required(2, ""long"", Types.FloatType.get())"
122134,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,270,,"    Record projected = writeAndRead(""id_only"", writeSchema, idOnly, record);"
122135,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,318,,"        Types.NestedField.optional(5, ""properties"","
122136,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,371,,"        Types.NestedField.optional(5, ""locations"", Types.MapType.ofOptional(6, 7,"
122137,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,400,,"    Assert.assertEquals(""Should project locations map"","
122138,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,472,,"        Types.NestedField.optional(10, ""values"","
122139,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,506,,"        Types.NestedField.optional(22, ""points"","
122140,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,534,,"    Assert.assertEquals(""Should project points list"","
122141,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,544,,"    Assert.assertNull(""Should not project y"", projectedP1.getField(""y""));"
122142,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/TestReadProjection.java,555,,"    Assert.assertNull(""Should not project x"", projectedP1.getField(""x""));"
122143,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java,81,,"          required(1, ""tsTzCol"", Types.TimestampType.withZone()),"
122144,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java,82,,"          required(2, ""tsCol"", Types.TimestampType.withoutZone())"
122145,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestAppenderFactory.java,124,,"    Record record = GenericRecord.create(table.schema()).copy(ImmutableMap.of(""data"", ""aaa""));"
122146,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestAppenderFactory.java,124,,"    Record record = GenericRecord.create(table.schema()).copy(ImmutableMap.of(""data"", ""aaa""));"
122147,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestAppenderFactory.java,143,,"        createRow(2, ""bbb""),"
122148,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestAppenderFactory.java,145,,"        createRow(4, ""ddd""),"
122149,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestAppenderFactory.java,248,,"        gRecord.copy(""file_path"", dataFile.path(), ""pos"", 0L),"
122150,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestAppenderFactory.java,248,,"        gRecord.copy(""file_path"", dataFile.path(), ""pos"", 0L),"
122151,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestGenericSortedPosDeleteWriter.java,131,,"        createRow(0, ""aaa""),"
122152,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestGenericSortedPosDeleteWriter.java,132,,"        createRow(1, ""bbb""),"
122153,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestGenericSortedPosDeleteWriter.java,133,,"        createRow(2, ""ccc""),"
122154,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestGenericSortedPosDeleteWriter.java,134,,"        createRow(3, ""ddd""),"
122155,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestGenericSortedPosDeleteWriter.java,157,,"        record.copy(""file_path"", dataFile.path(), ""pos"", 0L),"
122156,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestGenericSortedPosDeleteWriter.java,157,,"        record.copy(""file_path"", dataFile.path(), ""pos"", 0L),"
122157,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,95,,"    this.dataFieldId = table.schema().findField(""data"").fieldId();"
122158,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,124,,"    Assert.assertEquals(""Should have expected records"", expectedRowSet(expected), actualRowSet(""*""));"
122159,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,146,,"    deltaWriter.write(createRecord(1, ""aaa""));"
122160,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,147,,"    deltaWriter.write(createRecord(2, ""bbb""));"
122161,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,148,,"    deltaWriter.write(createRecord(3, ""ccc""));"
122162,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,186,,"        posRecord.copy(""file_path"", dataFile.path(), ""pos"", 0L),"
122163,./TargetProjects/iceberg/data/src/test/java/org/apache/iceberg/io/TestTaskEqualityDeltaWriter.java,186,,"        posRecord.copy(""file_path"", dataFile.path(), ""pos"", 0L),"
122164,./TargetProjects/iceberg/flink/src/main/java/org/apache/iceberg/flink/data/FlinkParquetReaders.java,64,,"  @SuppressWarnings(""unchecked"")"
122165,./TargetProjects/iceberg/flink/src/main/java/org/apache/iceberg/flink/data/FlinkValueWriters.java,136,,"    @SuppressWarnings(""unchecked"")"
122166,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java,73,,"      Types.NestedField.optional(2, ""data"", Types.StringType.get())"
122167,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestChangeLogTable.java,107,,"            insertRow(1, ""aaa""),"
122168,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestChangeLogTable.java,109,,"            insertRow(1, ""bbb""),"
122169,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestChangeLogTable.java,116,,"            updateAfterRow(2, ""ccc""),"
122170,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestChangeLogTable.java,118,,"            insertRow(2, ""ddd"")"
122171,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogDatabase.java,59,,"    sql(""CREATE DATABASE %s"", flinkDatabase);"
122172,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogDatabase.java,86,,"        ""Namespace should not already exist"","
122173,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogDatabase.java,91,,"    Assert.assertTrue(""Namespace should exist"", validationNamespaceCatalog.namespaceExists(icebergNamespace));"
122174,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogDatabase.java,187,,"    Assume.assumeFalse(""HadoopCatalog does not support namespace metadata"", isHadoopCatalog);"
122175,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java,116,,"    sql(""CREATE TABLE tl(id BIGINT)"");"
122176,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkFilters.java,60,,"      .field(""field1"", DataTypes.INT())"
122177,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkFilters.java,61,,"      .field(""field2"", DataTypes.BIGINT())"
122178,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkFilters.java,62,,"      .field(""field3"", DataTypes.FLOAT())"
122179,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkFilters.java,64,,"      .field(""field5"", DataTypes.STRING())"
122180,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkFilters.java,121,,"      Assert.assertTrue(""Conversion should succeed"", actual.isPresent());"
122181,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkFilters.java,312,,"    Assert.assertFalse(""Conversion should failed"", actual.isPresent());"
122182,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java,119,,"                    DataTypes.FIELD(""field_int"", DataTypes.INT(), ""doc - int""),"
122183,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java,119,,"                    DataTypes.FIELD(""field_int"", DataTypes.INT(), ""doc - int""),"
122184,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java,120,,"                    DataTypes.FIELD(""field_string"", DataTypes.STRING(), ""doc - string"")"
122185,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java,283,,"            Types.NestedField.required(101, ""int"", Types.IntegerType.get()),"
122186,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java,284,,"            Types.NestedField.optional(102, ""string"", Types.StringType.get())"
122187,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java,125,,"    sql(""DROP TABLE IF EXISTS %s.%s"", flinkDatabase, TABLE_NAME);"
122188,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java,263,,"        SimpleDataUtil.createRecord(1, ""aaa""),"
122189,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java,264,,"        SimpleDataUtil.createRecord(1, ""bbb""),"
122190,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java,265,,"        SimpleDataUtil.createRecord(1, ""ccc""),"
122191,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,106,,"    Assert.assertEquals(""Should have 1 record"", 1, result.size());"
122192,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,107,,"    Assert.assertEquals(""Should produce the expected records"", Row.of(1, ""iceberg"", 10.0), result.get(0));"
122193,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,112,,"    Assert.assertEquals(""Should have 0 record"", 0, sql(""SELECT * FROM %s LIMIT 0"", TABLE_NAME).size());"
122194,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,139,,"    Assert.assertArrayEquals(""Should produce the expected record"", expectedRecords.toArray(), result.toArray());"
122195,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,140,,"    Assert.assertEquals(""Should not push down a filter"", Expressions.alwaysTrue(), lastScanEvent.filter());"
122196,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,152,,"    Assert.assertEquals(""Should create only one scan"", 1, scanEventCount);"
122197,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,153,,"    Assert.assertEquals(""Should contain the push down filter"", expectedFilter, lastScanEvent.filter().toString());"
122198,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,184,,"    Assert.assertEquals(""Should have 2 records"", 2, resultNE.size());"
122199,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,223,,"    Assert.assertEquals(""Should have 2 record"", 2, resultOr.size());"
122200,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,543,,"    sqlNoPushDown = ""SELECT * FROM  "" + TABLE_NAME + ""  WHERE data LIKE '%%ice%%g' "";"
122201,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java,593,,"    AssertHelpers.assertThrows(""The NaN is not supported by flink now. "","
122202,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/actions/TestRewriteDataFilesAction.java,154,,"    Assert.assertEquals(""Action should rewrite 2 data files"", 2, result.deletedDataFiles().size());"
122203,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/actions/TestRewriteDataFilesAction.java,155,,"    Assert.assertEquals(""Action should add 1 data file"", 1, result.addedDataFiles().size());"
122204,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/actions/TestRewriteDataFilesAction.java,165,,"        SimpleDataUtil.createRecord(1, ""hello""),"
122205,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/actions/TestRewriteDataFilesAction.java,166,,"        SimpleDataUtil.createRecord(2, ""world"")"
122206,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/actions/TestRewriteDataFilesAction.java,200,,"        Types.NestedField.optional(2, ""data"", Types.StringType.get()),"
122207,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/actions/TestRewriteDataFilesAction.java,201,,"        Types.NestedField.optional(3, ""spec"", Types.StringType.get())"
122208,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,74,,"        Types.NestedField.optional(1, ""data"", Types.StringType.get())"
122209,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,77,,"    RowData row = GenericRowData.of(34L, StringData.fromString(""test""));"
122210,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,81,,"    Assert.assertEquals(""Should contain the correct id value"", 34L, projected.getLong(0));"
122211,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,85,,"    Assert.assertEquals(""Should contain the correct data value"", cmp, 0);"
122212,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,216,,"    Assert.assertEquals(""Should not project id"", 1, projected.getArity());"
122213,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,246,,"        Types.NestedField.optional(3, ""location"", Types.StructType.of("
122214,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,259,,"    RowData projected = writeAndRead(""id_only"", writeSchema, idOnly, record);"
122215,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,383,,"    Assert.assertEquals(""Should project locations map"", row.getMap(1), projected.getMap(0));"
122216,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java,502,,"    Assert.assertEquals(""Should project points list"", row.getArray(1), projected.getArray(0));"
122217,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestDeltaTaskWriter.java,112,,"    writer.write(createInsert(1, ""aaa""));"
122218,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestDeltaTaskWriter.java,113,,"    writer.write(createInsert(2, ""bbb""));"
122219,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestDeltaTaskWriter.java,114,,"    writer.write(createInsert(3, ""ccc""));"
122220,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestDeltaTaskWriter.java,163,,"    Assert.assertEquals(""Should have expected records"", expectedRowSet("
122221,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java,84,,"        {""avro"", 1, true},"
122222,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java,88,,"        {""orc"", 1, true},"
122223,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java,92,,"        {""parquet"", 1, true},"
122224,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java,157,,"        Row.of(1, ""aaa""),"
122225,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java,158,,"        Row.of(1, ""bbb""),"
122226,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java,159,,"        Row.of(1, ""ccc""),"
122227,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,93,,"        new Object[] {""avro"", 1, true},"
122228,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,97,,"        new Object[] {""parquet"", 1, true},"
122229,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,120,,"      table = create(SimpleDataUtil.SCHEMA, PartitionSpec.builderFor(SimpleDataUtil.SCHEMA).identity(""data"").build());"
122230,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,195,,"            row(""+I"", 1, ""aaa""),"
122231,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,197,,"            row(""+I"", 1, ""bbb""),"
122232,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,204,,"            row(""+U"", 2, ""ccc""),"
122233,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSinkV2.java,206,,"            row(""+I"", 2, ""ddd"")"
122234,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergFilesCommitter.java,193,,"        RowData rowData = SimpleDataUtil.createRowData(i, ""hello"" + i);"
122235,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergFilesCommitter.java,228,,"      DataFile dataFile1 = writeDataFile(""data-1"", ImmutableList.of(row1));"
122236,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergFilesCommitter.java,238,,"      RowData row2 = SimpleDataUtil.createRowData(2, ""world"");"
122237,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergFilesCommitter.java,239,,"      DataFile dataFile2 = writeDataFile(""data-2"", ImmutableList.of(row2));"
122238,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergFilesCommitter.java,634,,"      RowData row1 = SimpleDataUtil.createInsert(1, ""aaa"");"
122239,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergFilesCommitter.java,658,,"      RowData row2 = SimpleDataUtil.createInsert(2, ""bbb"");"
122240,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java,110,,"      testHarness.processElement(SimpleDataUtil.createRowData(1, ""hello""), 1);"
122241,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java,111,,"      testHarness.processElement(SimpleDataUtil.createRowData(2, ""world""), 1);"
122242,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java,283,,"        Types.NestedField.required(1, ""tinyint"", Types.IntegerType.get()),"
122243,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java,284,,"        Types.NestedField.required(2, ""smallint"", Types.IntegerType.get()),"
122244,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/sink/TestIcebergStreamWriter.java,285,,"        Types.NestedField.optional(3, ""int"", Types.IntegerType.get())"
122245,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestBoundedTableFactory.java,50,,"            insertRow(1, ""aaa""),"
122246,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestBoundedTableFactory.java,52,,"            insertRow(1, ""bbb""),"
122247,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestBoundedTableFactory.java,59,,"            updateAfterRow(2, ""ccc""),"
122248,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkInputFormat.java,67,,"        required(1, ""data"", Types.StringType.get()),"
122249,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java,127,,"    expectedRecords.get(0).set(2, ""2020-03-20"");"
122250,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java,147,,"        Types.NestedField.optional(3, ""level"", Types.StringType.get()),"
122251,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScan.java,148,,"        Types.NestedField.optional(4, ""message"", Types.StringType.get())"
122252,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java,108,,"    writeRecords.get(0).set(2, ""2020-03-20"");"
122253,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java,137,,"    Assert.assertEquals(""Should produce the expected parallelism."", 1, parallelism);"
122254,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestStreamScanSql.java,147,,"      Row row1 = Row.of(1, ""aaa"", ""2021-01-01"");"
122255,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestStreamScanSql.java,147,,"      Row row1 = Row.of(1, ""aaa"", ""2021-01-01"");"
122256,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestStreamScanSql.java,151,,"      Row row2 = Row.of(2, ""bbb"", ""2021-01-01"");"
122257,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestStreamScanSql.java,170,,"      Row row2 = Row.of(2, ""bbb"", ""2021-01-02"");"
122258,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestStreamingMonitorFunction.java,114,,"      Assert.assertTrue(""Should have expected elements."", latch.await(WAIT_TIME_MILLIS, TimeUnit.MILLISECONDS));"
122259,./TargetProjects/iceberg/flink/src/test/java/org/apache/iceberg/flink/source/TestStreamingMonitorFunction.java,120,,"      Assert.assertEquals(""Should produce the expected splits"", 1, sourceContext.splits.size());"
122260,./TargetProjects/iceberg/hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java,131,,"      throw new NoSuchNamespaceException(""Namespace does not exist: %s"", namespace);"
122261,./TargetProjects/iceberg/hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java,254,,"      throw new RuntimeException(""Failed to create namespace "" + namespace + "" in Hive MataStore"", e);"
122262,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,77,,"    Assert.assertFalse(""Table should not exist"", catalog.tableExists(TABLE_IDENTIFIER));"
122263,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,82,,"        .set(""prop"", ""value"")"
122264,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,82,,"        .set(""prop"", ""value"")"
122265,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,91,,"    Assert.assertEquals(""Table props should match"", ""value"", table.properties().get(""prop""));"
122266,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,103,,"    Assert.assertTrue(""Table should be created"", catalog.tableExists(TABLE_IDENTIFIER));"
122267,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,152,,"    Assert.assertTrue(""Table should exist"", catalog.tableExists(TABLE_IDENTIFIER));"
122268,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveTableTest.java,137,,"    GenericRecordBuilder recordBuilder = new GenericRecordBuilder(AvroSchemaUtil.convert(schema, ""test""));"
122269,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveTableTest.java,144,,"    String fileLocation = table.location().replace(""file:"", """") + ""/data/file.avro"";"
122270,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/HiveTableTest.java,250,,"    icebergTable.updateSchema().addColumn(""data"", Types.LongType.get()).commit();"
122271,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,57,,"      ""owner"", ""apache"","
122272,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,57,,"      ""owner"", ""apache"","
122273,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,58,,"      ""group"", ""iceberg"","
122274,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,58,,"      ""group"", ""iceberg"","
122275,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,59,,"      ""comment"", ""iceberg  hiveCatalog test"");"
122276,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,67,,"        required(1, ""id"", Types.IntegerType.get(), ""unique ID""),"
122277,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,68,,"        required(2, ""data"", Types.StringType.get())"
122278,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,73,,"    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, ""tbl"");"
122279,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,80,,"          .withProperty(""key1"", ""value1"")"
122280,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,80,,"          .withProperty(""key1"", ""value1"")"
122281,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,81,,"          .withProperty(""key2"", ""value2"")"
122282,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,81,,"          .withProperty(""key2"", ""value2"")"
122283,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,303,,"        !catalog.namespaceExists(Namespace.of(""db2"", ""db2"", ""ns2"")));"
122284,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,314,,"            ""test"", ""test"","
122285,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCommitLocks.java,162,,"    AssertHelpers.assertThrows(""Expected an exception"","
122286,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCommits.java,143,,"    Assert.assertTrue(""Current metadata file should still exist"", metadataFileExists(ops.current()));"
122287,./TargetProjects/iceberg/hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveCommits.java,175,,"        CommitStateUnknownException.class, ""Datacenter on fire"","
122288,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,102,,"    missingSchema.put(""location"", temp.newFolder(""hadoop_tables"").toString());"
122289,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,118,,"    properties.put(""dummy"", ""test"");"
122290,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,118,,"    properties.put(""dummy"", ""test"");"
122291,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,213,,"    conf.set(InputFormatConfig.HADOOP_CATALOG_WAREHOUSE_LOCATION, ""/tmp/mylocation"");"
122292,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,244,,"    Optional<Catalog> defaultCatalog = Catalogs.loadCatalog(conf, ""barCatalog"");"
122293,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,86,,"          required(3, ""date"", Types.StringType.get()));"
122294,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,151,,"    expectedRecords.get(0).set(2, ""2020-03-20"");"
122295,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,246,,"          Types.NestedField.optional(3, ""level"", Types.StringType.get()),"
122296,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,247,,"          Types.NestedField.optional(4, ""message"", Types.StringType.get())"
122297,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestDeserializer.java,75,,"    expected.set(1, ""Bob"");"
122298,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java,47,,"    SearchArgument arg = builder.startAnd().equals(""salary"", PredicateLeaf.Type.LONG, 3000L).end().build();"
122299,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java,58,,"    SearchArgument arg = builder.startAnd().equals(""float"", PredicateLeaf.Type.FLOAT, Double.NaN).end().build();"
122300,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,129,,"    testTables.createTable(shell, ""customers"", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat,"
122301,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,136,,"    Assert.assertArrayEquals(new Object[] {0L, ""Alice"", ""Brown""}, rows.get(0));"
122302,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,136,,"    Assert.assertArrayEquals(new Object[] {0L, ""Alice"", ""Brown""}, rows.get(0));"
122303,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,137,,"    Assert.assertArrayEquals(new Object[] {1L, ""Bob"", ""Green""}, rows.get(1));"
122304,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,137,,"    Assert.assertArrayEquals(new Object[] {1L, ""Bob"", ""Green""}, rows.get(1));"
122305,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,138,,"    Assert.assertArrayEquals(new Object[] {2L, ""Trudy"", ""Pink""}, rows.get(2));"
122306,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,138,,"    Assert.assertArrayEquals(new Object[] {2L, ""Trudy"", ""Pink""}, rows.get(2));"
122307,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,169,,"            .add(new BigDecimal(""100.57""))"
122308,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,246,,"    TableIdentifier identifier = TableIdentifier.of(""default"", ""customers"");"
122309,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,249,,"    String createSql = ""CREATE EXTERNAL TABLE "" + identifier +"
122310,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,318,,"    List<Record> records = testTables.createTableWithGeneratedRecords(shell, ""arraytable"", schema, fileFormat, 1);"
122311,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,379,,"                            .of(required(3, ""something"", Types.DoubleType.get()), required(4, ""someone"","
122312,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,379,,"                            .of(required(3, ""something"", Types.DoubleType.get()), required(4, ""someone"","
122313,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,380,,"                                    Types.LongType.get()), required(5, ""somewhere"", Types.StringType.get())))));"
122314,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,402,,"    List<Record> records = testTables.createTableWithGeneratedRecords(shell, ""maptable"", schema, fileFormat, 1);"
122315,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,483,,"            Types.StructType.of(required(2, ""key"", Types.StringType.get()), required(3, ""value"","
122316,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,483,,"            Types.StructType.of(required(2, ""key"", Types.StringType.get()), required(3, ""value"","
122317,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,485,,"    List<Record> records = testTables.createTableWithGeneratedRecords(shell, ""structtable"", schema, fileFormat, 1);"
122318,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,159,,"    TableIdentifier identifier = TableIdentifier.of(""default"", ""customers"");"
122319,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,159,,"    TableIdentifier identifier = TableIdentifier.of(""default"", ""customers"");"
122320,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,161,,"    shell.executeStatement(""CREATE EXTERNAL TABLE customers "" +"
122321,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,162,,"        ""STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' "" +"
122322,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,164,,"        ""TBLPROPERTIES ('"" + InputFormatConfig.TABLE_SCHEMA + ""'='"" +"
122323,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,164,,"        ""TBLPROPERTIES ('"" + InputFormatConfig.TABLE_SCHEMA + ""'='"" +"
122324,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,165,,"        SchemaParser.toJson(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA) + ""', "" +"
122325,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,183,,"      shell.executeStatement(""DROP TABLE customers"");"
122326,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,186,,"      AssertHelpers.assertThrows(""should throw exception"", NoSuchTableException.class,"
122327,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,187,,"          ""Table does not exist"", () -> {"
122328,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,331,,"    table.updateProperties().set(GC_ENABLED, ""true"").commit();"
122329,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,576,,"        ""custom_property"", ""initial_val"","
122330,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,585,,"    expectedIcebergProperties.put(""EXTERNAL"", ""TRUE"");"
122331,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,632,,"        .set(""new_prop_1"", ""true"")"
122332,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,633,,"        .set(""new_prop_2"", ""false"")"
122333,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,70,,"          required(2, ""customer_id"", Types.LongType.get()),"
122334,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,181,,"    testTables.createTable(shell, ""customers"", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat,"
122335,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,191,,"    Assert.assertArrayEquals(new Object[] {""Alice"", 0L}, descRows.get(2));"
122336,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,199,,"    testTables.createTable(shell, ""orders"", ORDER_SCHEMA, fileFormat, ORDER_RECORDS);"
122337,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,317,,"    Assume.assumeTrue(""Tez write is not implemented yet"", executionEngine.equals(""mr""));"
122338,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,425,,"        .identity(""last_name"").build();"
122339,./TargetProjects/iceberg/mr/src/test/java/org/apache/iceberg/mr/hive/TestTables.java,196,,"        ""TBLPROPERTIES ('"" + InputFormatConfig.TABLE_SCHEMA + ""'='"" +"
122340,./TargetProjects/iceberg/nessie/src/test/java/org/apache/iceberg/nessie/NessieUtilTest.java,57,,"    Assertions.assertThat(commitMeta.getAuthor()).isEqualTo(System.getProperty(""user.name""));"
122341,./TargetProjects/iceberg/nessie/src/test/java/org/apache/iceberg/nessie/TestBranchVisibility.java,33,,"  private final TableIdentifier tableIdentifier1 = TableIdentifier.of(""test-ns"", ""table1"");"
122342,./TargetProjects/iceberg/nessie/src/test/java/org/apache/iceberg/nessie/TestBranchVisibility.java,47,,"    createBranch(""test"", catalog.currentHash());"
122343,./TargetProjects/iceberg/nessie/src/test/java/org/apache/iceberg/nessie/TestNessieTable.java,187,,"        table.currentSnapshot().manifestListLocation().replace(""file:"", """");"
122344,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestBuildOrcProjection.java,74,,"    assertEquals(2, newOrcSchema.findSubtype(""c_r3"").getId());"
122345,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestExpressionToSearchArgument.java,70,,"        required(1, ""int"", Types.IntegerType.get()),"
122346,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestExpressionToSearchArgument.java,71,,"        required(2, ""long"", Types.LongType.get()),"
122347,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestExpressionToSearchArgument.java,99,,"        .lessThan(""`int`"", Type.LONG, 1L)"
122348,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestExpressionToSearchArgument.java,160,,"        optional(4, ""struct"", Types.StructType.of("
122349,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestExpressionToSearchArgument.java,163,,"        optional(6, ""list"", Types.ListType.ofRequired(7, Types.LongType.get())),"
122350,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestExpressionToSearchArgument.java,164,,"        optional(8, ""map"", Types.MapType.ofRequired(9, 10, Types.LongType.get(), Types.LongType.get()))"
122351,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestIdToOrcName.java,35,,"        required(1, ""long"", Types.LongType.get()),"
122352,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,46,,"      optional(1, ""intCol"", Types.IntegerType.get()),"
122353,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,47,,"      optional(3, ""longCol"", Types.LongType.get()),"
122354,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,50,,"      required(9, ""doubleCol"", Types.DoubleType.get()),"
122355,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,74,,"        optional(6, ""leafLongCol"", Types.LongType.get()),"
122356,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,75,,"        optional(7, ""leafBinaryCol"", Types.BinaryType.get())"
122357,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,79,,"        optional(5, ""leafStructCol"", leafStructType)"
122358,./TargetProjects/iceberg/orc/src/test/java/org/apache/iceberg/orc/TestORCSchemaUtil.java,288,,"        optional(1, ""data"", Types.StructType.of("
122359,./TargetProjects/iceberg/parquet/src/main/java/org/apache/iceberg/parquet/Parquet.java,241,,"      set(""parquet.avro.write-old-list-structure"", ""false"");"
122360,./TargetProjects/iceberg/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReaders.java,51,,"  @SuppressWarnings(""unchecked"")"
122361,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,52,,"        Types.NestedField.optional(1, ""data"", Types.StringType.get())"
122362,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,55,,"    Record record = new Record(AvroSchemaUtil.convert(schema, ""table""));"
122363,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,57,,"    record.put(""data"", ""test"");"
122364,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,61,,"    Assert.assertEquals(""Should contain the correct id value"", 34L, (long) projected.get(""id""));"
122365,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,195,,"        Types.NestedField.optional(3, ""location"", Types.StructType.of("
122366,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,196,,"            Types.NestedField.required(1, ""lat"", Types.FloatType.get()),"
122367,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,197,,"            Types.NestedField.required(2, ""long"", Types.FloatType.get())"
122368,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,213,,"    Record projected = writeAndRead(""id_only"", writeSchema, idOnly, record);"
122369,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,260,,"        Types.NestedField.optional(5, ""properties"","
122370,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,313,,"        Types.NestedField.optional(5, ""locations"", Types.MapType.ofOptional(6, 7,"
122371,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,344,,"    Assert.assertEquals(""Should project locations map"","
122372,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,416,,"        Types.NestedField.optional(10, ""values"","
122373,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,450,,"        Types.NestedField.optional(22, ""points"","
122374,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/avro/TestReadProjection.java,480,,"    Assert.assertEquals(""Should project points list"","
122375,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,98,,"      required(3, ""required"", StringType.get()),"
122376,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,99,,"      optional(4, ""all_nulls"", LongType.get()),"
122377,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,100,,"      optional(5, ""some_nulls"", StringType.get()),"
122378,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,101,,"      optional(6, ""no_nulls"", StringType.get()),"
122379,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,102,,"      optional(7, ""non_dict"", StringType.get()),"
122380,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,104,,"      optional(10, ""not_in_file"", FloatType.get()),"
122381,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,184,,"          builder.set(""_some_nulls"", (i % 10 == 0) ? null : ""some""); // includes some null values"
122382,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,218,,"        ""Cannot create expression literal from null"","
122383,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,219,,"        () -> equal(""col"", null));"
122384,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,250,,"    Assert.assertTrue(""Should read: dictionary filter doesn't help"", shouldRead);"
122385,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,455,,"    Assert.assertFalse(""Should not read: id range below lower bound (5 < 30)"", shouldRead);"
122386,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,463,,"    Assert.assertTrue(""Should read: one possible id"", shouldRead);"
122387,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,467,,"    Assert.assertTrue(""Should read: may possible ids"", shouldRead);"
122388,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,493,,"    Assert.assertFalse(""Should not read: id range above upper bound (85 < 79)"", shouldRead);"
122389,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,531,,"    Assert.assertFalse(""Should not read: id below lower bound"", shouldRead);"
122390,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,539,,"    Assert.assertTrue(""Should read: id equal to lower bound"", shouldRead);"
122391,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,543,,"    Assert.assertTrue(""Should read: id between lower and upper bounds"", shouldRead);"
122392,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,547,,"    Assert.assertTrue(""Should read: id equal to upper bound"", shouldRead);"
122393,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,551,,"    Assert.assertFalse(""Should not read: id above upper bound"", shouldRead);"
122394,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,562,,"    Assert.assertTrue(""Should read: id below lower bound"", shouldRead);"
122395,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,582,,"    Assert.assertTrue(""Should read: id above upper bound"", shouldRead);"
122396,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,634,,"        lessThan(""struct_not_null.int_field"", INT_MIN_VALUE - 25)"
122397,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,847,,"    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, in(""some_nulls"", ""aaa"", ""some""))"
122398,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestDictionaryRowGroupFilter.java,851,,"    shouldRead = new ParquetDictionaryRowGroupFilter(SCHEMA, in(""some_nulls"", ""aaa"", ""bbb""))"
122399,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestParquet.java,74,,"        optional(1, ""intCol"", IntegerType.get())"
122400,./TargetProjects/iceberg/parquet/src/test/java/org/apache/iceberg/parquet/TestParquetDeleteWriters.java,54,,"      NestedField.optional(2, ""data"", Types.StringType.get()));"
122401,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/data/parquet/SparkParquetReadersFlatDataBenchmark.java,155,,"        .set(""spark.sql.parquet.binaryAsString"", ""false"")"
122402,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/data/parquet/SparkParquetReadersNestedDataBenchmark.java,155,,"        .set(""spark.sql.parquet.binaryAsString"", ""false"")"
122403,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/orc/IcebergSourceFlatORCDataReadBenchmark.java,75,,"      Dataset<Row> df = spark().read().format(""iceberg"").load(tableLocation);"
122404,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/orc/IcebergSourceFlatORCDataReadBenchmark.java,87,,"      Dataset<Row> df = spark().read().option(SparkReadOptions.VECTORIZATION_ENABLED, ""true"")"
122405,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/orc/IcebergSourceFlatORCDataReadBenchmark.java,124,,"      Dataset<Row> df = spark().read().format(""iceberg"").load(tableLocation).select(""longCol"");"
122406,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/orc/IcebergSourceNestedORCDataReadBenchmark.java,77,,"      Dataset<Row> df = spark().read().format(""iceberg"").load(tableLocation);"
122407,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/IcebergSourceFlatParquetDataReadBenchmark.java,110,,"      Dataset<Row> df = spark().read().format(""iceberg"").load(tableLocation).select(""longCol"");"
122408,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/IcebergSourceNestedParquetDataReadBenchmark.java,83,,"    conf.put(SQLConf.PARQUET_VECTORIZED_READER_ENABLED().key(), ""true"");"
122409,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadDictionaryEncodedFlatParquetDataBenchmark.java,163,,"        when(modColumn(9, 0), to_date(lit(""04/12/2019""), ""MM/dd/yyyy""))"
122410,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,91,,"        optional(1, ""longCol"", Types.LongType.get()),"
122411,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,92,,"        optional(2, ""intCol"", Types.IntegerType.get()),"
122412,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,93,,"        optional(3, ""floatCol"", Types.FloatType.get()),"
122413,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,94,,"        optional(4, ""doubleCol"", Types.DoubleType.get()),"
122414,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,95,,"        optional(5, ""decimalCol"", Types.DecimalType.of(20, 5)),"
122415,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,96,,"        optional(6, ""dateCol"", Types.DateType.get()),"
122416,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,97,,"        optional(7, ""timestampCol"", Types.TimestampType.withZone()),"
122417,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,98,,"        optional(8, ""stringCol"", Types.StringType.get()));"
122418,./TargetProjects/iceberg/spark/src/jmh/java/org/apache/iceberg/spark/source/parquet/vectorized/VectorizedReadFlatParquetDataBenchmark.java,136,,"      Dataset<Row> df = spark().read().format(""iceberg"")"
122419,./TargetProjects/iceberg/spark/src/main/java/org/apache/iceberg/spark/actions/BaseDeleteOrphanFilesSparkAction.java,159,,"    Column actualFileName = filenameUDF.apply(actualFileDF.col(""file_path""));"
122420,./TargetProjects/iceberg/spark/src/main/java/org/apache/iceberg/spark/actions/BaseRewriteManifestsSparkAction.java,190,,"        .selectExpr(""input_file_name() as manifest"", ""snapshot_id"", ""sequence_number"", ""data_file"");"
122421,./TargetProjects/iceberg/spark/src/main/java/org/apache/iceberg/spark/data/SparkParquetReaders.java,77,,"  @SuppressWarnings(""unchecked"")"
122422,./TargetProjects/iceberg/spark/src/main/java/org/apache/iceberg/spark/data/SparkValueWriters.java,142,,"    @SuppressWarnings(""unchecked"")"
122423,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/TestFileIOSerialization.java,90,,"    Assert.assertEquals(""Conf values must be present"", ""v1"", actualConf.get(""k1""));"
122424,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestExpireSnapshotsAction.java,750,,"    Assert.assertEquals(""Expire should not change current snapshot"", snapshotId, table.currentSnapshot().snapshotId());"
122425,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestExpireSnapshotsAction.java,765,,"    Assert.assertEquals(""Should create one manifest"","
122426,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,89,,"        new ThreeColumnRecord(1, ""AAAAAAAAAA"", ""AAAA"")"
122427,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,89,,"        new ThreeColumnRecord(1, ""AAAAAAAAAA"", ""AAAA"")"
122428,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,96,,"        .format(""iceberg"")"
122429,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,97,,"        .mode(""append"")"
122430,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,113,,"    df.write().mode(""append"").parquet(tableLocation + ""/data"");"
122431,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,158,,"    Assert.assertEquals(""Rows must match"", expectedRecords, actualRecords);"
122432,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction.java,209,,"    df2.coalesce(1).write().mode(""append"").parquet(tableLocation + ""/data/c2_trunc=AA/c3=AAAA"");"
122433,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,97,,"        new ThreeColumnRecord(1, null, ""AAAA""),"
122434,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,98,,"        new ThreeColumnRecord(1, ""BBBBBBBBBB"", ""BBBB"")"
122435,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,98,,"        new ThreeColumnRecord(1, ""BBBBBBBBBB"", ""BBBB"")"
122436,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,103,,"        new ThreeColumnRecord(2, ""CCCCCCCCCC"", ""CCCC""),"
122437,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,104,,"        new ThreeColumnRecord(2, ""DDDDDDDDDD"", ""DDDD"")"
122438,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,130,,"    Dataset<Row> resultDF = spark.read().format(""iceberg"").load(tableLocation);"
122439,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,135,,"    Assert.assertEquals(""Rows must match"", expectedRecords, actualRecords);"
122440,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,148,,"        new ThreeColumnRecord(1, ""AAAAAAAAAA"", ""AAAA""),"
122441,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,166,,"        new ThreeColumnRecord(2, ""BBBBBBBBBB"", ""FFFF""),"
122442,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteDataFilesAction.java,167,,"        new ThreeColumnRecord(2, ""BBBBBBBBBB"", ""HHHH"")"
122443,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteManifestsAction.java,112,,"        new ThreeColumnRecord(1, null, ""AAAA""),"
122444,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteManifestsAction.java,113,,"        new ThreeColumnRecord(1, ""BBBBBBBBBB"", ""BBBB"")"
122445,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteManifestsAction.java,113,,"        new ThreeColumnRecord(1, ""BBBBBBBBBB"", ""BBBB"")"
122446,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteManifestsAction.java,150,,"    Dataset<Row> resultDF = spark.read().format(""iceberg"").load(tableLocation);"
122447,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/actions/TestRewriteManifestsAction.java,155,,"    Assert.assertEquals(""Rows must match"", expectedRecords, actualRecords);"
122448,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/actions/TestNewRewriteDataFilesAction.java,135,,"    assertEquals(""Rows must match"", expectedRecords, actual);"
122449,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/actions/TestNewRewriteDataFilesAction.java,276,,"            .option(RewriteDataFiles.PARTIAL_PROGRESS_ENABLED, ""true"")"
122450,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/actions/TestNewRewriteDataFilesAction.java,289,,"    assertEquals(""We shouldn't have changed the data"", originalData, postRewriteData);"
122451,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/actions/TestNewRewriteDataFilesAction.java,359,,"    doThrow(new RuntimeException(""Rewrite Failed""))"
122452,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/AvroDataTest.java,50,,"      optional(101, ""data"", Types.StringType.get()),"
122453,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java,120,,"        Assert.assertEquals(""Primitive value should be equal to expected"", expected, actual);"
122454,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java,154,,"        Assertions.assertThat(actual).as(""Should be a byte[]"").isInstanceOf(byte[].class);"
122455,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java,155,,"        Assert.assertArrayEquals(""Bytes should match"","
122456,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java,157,,"        Assert.assertEquals(""Primitive value should be equal to expected"", expected, actual);"
122457,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java,186,,"        Assertions.assertThat(actual).as(""Should be a byte[]"").isInstanceOf(byte[].class);"
122458,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java,187,,"        Assert.assertArrayEquals(""Bytes should match"","
122459,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java,398,,"            throw new IllegalArgumentException(""Unhandled type "" + childType);"
122460,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java,422,,"            Assert.assertEquals(prefix + "".elem "" + e + "" - "" + childType,"
122461,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestHelpers.java,469,,"          Assert.assertEquals(prefix + "".key="" + expectedKey + "" has null"", true,"
122462,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/TestSparkAvroEnums.java,52,,"        .name(""enumCol"")"
122463,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/parquet/vectorized/TestParquetVectorizedReads.java,88,,"    Assert.assertTrue(""Delete should succeed"", testFile.delete());"
122464,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/data/parquet/vectorized/TestParquetVectorizedReads.java,232,,"                SUPPORTED_PRIMITIVES.field(""data""))),"
122465,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataFrameWrites.java,82,,"    return new Object[] { ""parquet"", ""avro"", ""orc"" };"
122466,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataFrameWrites.java,102,,"              ""requiredField"","
122467,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataFrameWrites.java,154,,"    File location = new File(parent, ""test"");"
122468,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataFrameWrites.java,194,,"        .format(""iceberg"")"
122469,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataSourceOptions.java,64,,"      optional(2, ""data"", Types.StringType.get())"
122470,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataSourceOptions.java,85,,"    String tableLocation = temp.newFolder(""iceberg-table"").toString();"
122471,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataSourceOptions.java,100,,"        .format(""iceberg"")"
122472,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataSourceOptions.java,131,,"        .mode(""append"")"
122473,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestDataSourceOptions.java,340,,"        .load(tableLocation + ""#entries"");"
122474,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestForwardCompatibility.java,71,,"      Types.NestedField.optional(2, ""data"", Types.StringType.get()));"
122475,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,64,,"      optional(2, ""data"", Types.StringType.get())"
122476,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,90,,"        .format(""iceberg"")"
122477,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,108,,"    Table entriesTable = loadTable(tableIdentifier, ""entries"");"
122478,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,115,,"        .mode(""append"")"
122479,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,135,,"        GenericData.Record file = (GenericData.Record) row.get(""data_file"");"
122480,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,142,,"    Assert.assertEquals(""Actual results should have one row"", 1, actual.size());"
122481,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,150,,"    Table entriesTable = loadTable(tableIdentifier, ""all_entries"");"
122482,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,175,,"        .orderBy(""snapshot_id"")"
122483,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,230,,"    Table filesTable = loadTable(tableIdentifier, ""files"");"
122484,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,298,,"        .insertInto(""parquet_table"");"
122485,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,475,,"    Assert.assertEquals(""Actual results should have two rows"", 2, actualAllData.size());"
122486,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,584,,"        builder.set(""made_current_at"", firstSnapshotTimestamp * 1000)"
122487,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,586,,"            .set(""parent_id"", null)"
122488,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,587,,"            .set(""is_current_ancestor"", true)"
122489,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,684,,"    Table manifestTable = loadTable(tableIdentifier, ""manifests"");"
122490,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,705,,"        builder.set(""path"", manifest.path())"
122491,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,799,,"        required(2, ""record_count"", Types.LongType.get()),"
122492,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,800,,"        required(3, ""file_count"", Types.IntegerType.get()));"
122493,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,802,,"    Table partitionsTable = loadTable(tableIdentifier, ""partitions"");"
122494,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIcebergSourceTablesBase.java,854,,"        partitionsTable.schema().findType(""partition"").asStructType(), ""partition""));"
122495,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIdentityPartitionData.java,58,,"        { ""parquet"", false },"
122496,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIdentityPartitionData.java,76,,"      Types.NestedField.optional(2, ""date"", Types.StringType.get()),"
122497,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIdentityPartitionData.java,77,,"      Types.NestedField.optional(3, ""level"", Types.StringType.get()),"
122498,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIdentityPartitionData.java,78,,"      Types.NestedField.optional(4, ""message"", Types.StringType.get())"
122499,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestIdentityPartitionData.java,85,,"      LogMessage.info(""2020-02-03"", ""info event 2""),"
122500,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionPruning.java,131,,"      Types.NestedField.optional(2, ""date"", Types.StringType.get()),"
122501,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionPruning.java,132,,"      Types.NestedField.optional(3, ""level"", Types.StringType.get()),"
122502,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionPruning.java,133,,"      Types.NestedField.optional(4, ""message"", Types.StringType.get()),"
122503,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionPruning.java,134,,"      Types.NestedField.optional(5, ""timestamp"", Types.TimestampType.withZone())"
122504,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionPruning.java,141,,"      LogMessage.info(""2020-02-03"", ""info event 2"", getInstant(""2020-02-03T00:00:00"")),"
122505,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java,78,,"      required(101, ""data"", Types.StringType.get()),"
122506,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java,130,,"    File location = new File(parent, ""test"");"
122507,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java,132,,"    Assert.assertTrue(""mkdirs should succeed"", dataFolder.mkdirs());"
122508,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java,148,,"        .format(""iceberg"")"
122509,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java,162,,"    Assert.assertEquals(""Number of rows should match"", expected.size(), actual.size());"
122510,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,61,,"        Types.NestedField.optional(1, ""data"", Types.StringType.get())"
122511,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,66,,"    record.setField(""data"", ""test"");"
122512,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,70,,"    Assert.assertEquals(""Should contain the correct id value"", 34L, (long) projected.getField(""id""));"
122513,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,178,,"    Assert.assertNull(""Should not project id"", projected.getField(""id""));"
122514,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,212,,"        Types.NestedField.optional(3, ""location"", Types.StructType.of("
122515,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,213,,"            Types.NestedField.required(1, ""lat"", Types.FloatType.get()),"
122516,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,214,,"            Types.NestedField.required(2, ""long"", Types.FloatType.get())"
122517,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,229,,"    Record projected = writeAndRead(""id_only"", writeSchema, idOnly, record);"
122518,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,277,,"        Types.NestedField.optional(5, ""properties"","
122519,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,330,,"        Types.NestedField.optional(5, ""locations"", Types.MapType.ofOptional(6, 7,"
122520,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,359,,"    Assert.assertEquals(""Should project locations map"","
122521,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,431,,"        Types.NestedField.optional(10, ""values"","
122522,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,465,,"        Types.NestedField.optional(22, ""points"","
122523,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,493,,"    Assert.assertEquals(""Should project points list"","
122524,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,500,,"    Assert.assertEquals(""Should read 2 points"", 2, points.size());"
122525,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,502,,"    Assert.assertEquals(""Should project x"", 1, (int) projectedP1.getField(""x""));"
122526,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,503,,"    Assert.assertNull(""Should not project y"", projectedP1.getField(""y""));"
122527,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestReadProjection.java,514,,"    Assert.assertNull(""Should not project x"", projectedP1.getField(""x""));"
122528,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSnapshotSelection.java,52,,"      optional(2, ""data"", Types.StringType.get())"
122529,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSnapshotSelection.java,74,,"    String tableLocation = temp.newFolder(""iceberg-table"").toString();"
122530,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSnapshotSelection.java,87,,"    firstDf.select(""id"", ""data"").write().format(""iceberg"").mode(""append"").save(tableLocation);"
122531,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSnapshotSelection.java,87,,"    firstDf.select(""id"", ""data"").write().format(""iceberg"").mode(""append"").save(tableLocation);"
122532,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkDataWrite.java,64,,"      optional(2, ""data"", Types.StringType.get())"
122533,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkDataWrite.java,94,,"    File location = new File(parent, ""test"");"
122534,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkDataWrite.java,109,,"        .format(""iceberg"")"
122535,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkDataWrite.java,121,,"    Assert.assertEquals(""Number of rows should match"", expected.size(), actual.size());"
122536,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkDataWrite.java,122,,"    Assert.assertEquals(""Result rows should match"", expected, actual);"
122537,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkReaderDeletes.java,88,,"      catalog.createNamespace(Namespace.of(""default""));"
122538,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkReaderDeletes.java,138,,"    Schema deleteRowSchema = table.schema().select(""data"");"
122539,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkSchema.java,52,,"      optional(2, ""data"", Types.StringType.get())"
122540,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkSchema.java,73,,"    String tableLocation = temp.newFolder(""iceberg-table"").toString();"
122541,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkSchema.java,84,,"        .format(""iceberg"")"
122542,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestSparkSchema.java,85,,"        .mode(""append"")"
122543,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,57,,"      optional(2, ""data"", Types.StringType.get())"
122544,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,87,,"    File parent = temp.newFolder(""parquet"");"
122545,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,88,,"    File location = new File(parent, ""test-table"");"
122546,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,89,,"    File checkpoint = new File(parent, ""checkpoint"");"
122547,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,107,,"        .format(""iceberg"")"
122548,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,108,,"        .option(""checkpointLocation"", checkpoint.toString())"
122549,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreaming.java,109,,"        .option(""path"", location.toString());"
122550,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestTimestampWithoutZone.java,169,,"        () -> spark.read().format(""iceberg"")"
122551,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestTimestampWithoutZone.java,170,,"            .option(""vectorization-enabled"", String.valueOf(vectorized))"
122552,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestTimestampWithoutZone.java,179,,"            .option(SparkUtil.HANDLE_TIMESTAMP_WITHOUT_TIMEZONE, ""true"")"
122553,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestWriteMetricsConfig.java,65,,"      optional(2, ""data"", Types.StringType.get())"
122554,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestWriteMetricsConfig.java,98,,"    String tableLocation = temp.newFolder(""iceberg-table"").toString();"
122555,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestWriteMetricsConfig.java,103,,"    properties.put(TableProperties.DEFAULT_WRITE_METRICS_MODE, ""full"");"
122556,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestWriteMetricsConfig.java,115,,"        .format(""iceberg"")"
122557,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestWriteMetricsConfig.java,116,,"        .option(SparkWriteOptions.WRITE_FORMAT, ""parquet"")"
122558,./TargetProjects/iceberg/spark/src/test/java/org/apache/iceberg/spark/source/TestWriteMetricsConfig.java,136,,"    properties.put(TableProperties.DEFAULT_WRITE_METRICS_MODE, ""counts"");"
122559,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/examples/ReadAndWriteTablesTest.java,80,,"        .format(""iceberg"")"
122560,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/examples/SchemaEvolutionTest.java,75,,"        optional(2, ""price"", Types.IntegerType.get()),"
122561,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/examples/SchemaEvolutionTest.java,76,,"        optional(3, ""author"", Types.StringType.get()),"
122562,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/examples/SchemaEvolutionTest.java,77,,"        optional(4, ""published"", Types.TimestampType.withZone()),"
122563,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/examples/SchemaEvolutionTest.java,78,,"        optional(5, ""genre"", Types.StringType.get())"
122564,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/examples/SchemaEvolutionTest.java,92,,"        .format(""iceberg"")"
122565,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java,49,,"  private static final String CATALOG_IMPL = String.format(""%s.%s.%s"", CustomCatalogs.ICEBERG_CATALOG_PREFIX,"
122566,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java,67,,"      optional(2, ""data"", Types.StringType.get())"
122567,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java,134,,"            .format(""iceberg"")"
122568,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java,135,,"            .mode(""append"")"
122569,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,94,,"      Types.NestedField.optional(3, ""data"", Types.StringType.get())"
122570,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,208,,"        ""path"", unpartitioned.toString())"
122571,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,274,,"        read(unpartitioned.toString(), vectorized, ""ts < cast('2017-12-22 00:00:00+00:00' as timestamp)""));"
122572,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,491,,"        .format(""iceberg"")"
122573,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestNameMappingProjection.java,98,,"    orcSchema.addField(""name"", TypeDescription.createString());"
122574,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSelect.java,58,,"      optional(3, ""doubleVal"", Types.DoubleType.get())"
122575,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSelect.java,130,,"    Assert.assertEquals(""Should return all expected rows"", expected,"
122576,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,119,,"    df.select(""id"", ""data"").orderBy(""data"").write()"
122577,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,162,,"      File location = temp.newFolder(""partitioned_table"");"
122578,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,163,,"      spark.table(QUALIFIED_TABLE_NAME).write().mode(""overwrite"").partitionBy(""data"").format(format.toString())"
122579,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,173,,"      File stagingDir = temp.newFolder(""staging-dir"");"
122580,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,175,,"      long count = spark.read().format(""iceberg"").load(location.toString()).count();"
122581,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,176,,"      Assert.assertEquals(""three values "", 3, count);"
122582,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,181,,"      File location = temp.newFolder(""unpartitioned_table"");"
122583,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,233,,"          .saveAsTable(""original_table"");"
122584,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java,389,,"          new ThreeColumnRecord(2, ""b c"", ""data""),"
122585,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,66,,"      optional(2, ""data"", Types.StringType.get())"
122586,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,103,,"    props.put(TableProperties.METRICS_MODE_COLUMN_CONF_PREFIX + ""data"", ""full"");"
122587,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,112,,"    File parquetTableDir = temp.newFolder(""parquet_table"");"
122588,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,118,,"          .format(""parquet"")"
122589,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,119,,"          .mode(""append"")"
122590,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,120,,"          .option(""path"", parquetTableLocation)"
122591,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,123,,"      File stagingDir = temp.newFolder(""staging-dir"");"
122592,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,127,,"          .format(""iceberg"")"
122593,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,133,,"      Assert.assertEquals(""Result rows should match"", records, actualRecords);"
122594,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,135,,"      Dataset<Row> fileDF = spark.read().format(""iceberg"").load(tableLocation + ""#files"");"
122595,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,141,,"      spark.sql(""DROP TABLE parquet_table"");"
122596,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,294,,"          .withColumn(""extra_col"", functions.lit(-1))"
122597,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,295,,"          .withColumn(""struct"", functions.expr(""named_struct('nested_1', 'a', 'nested_2', 'd', 'nested_3', 'f')""));"
122598,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,320,,"          .set(TableProperties.METRICS_MODE_COLUMN_CONF_PREFIX + ""struct.nested_3"", ""full"")"
122599,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,329,,"          .select(""id"", ""struct.nested_1"", ""struct.nested_3"")"
122600,./TargetProjects/iceberg/spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtilWithInMemoryCatalog.java,441,,"      Dataset<Row> df = spark.range(1, 10).withColumn(""tmp_col"", timestampColumn);"
122601,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,73,,"    createUnpartitionedFileTable(""parquet"");"
122602,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,76,,"        ""CREATE TABLE %s (id Integer, name String, dept String, subdept String) USING iceberg"";"
122603,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,80,,"    Object result = scalarSql(""CALL %s.system.add_files('%s', '`parquet`.`%s`')"","
122604,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,85,,"    assertEquals(""Iceberg table contains correct data"","
122605,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,86,,"        sql(""SELECT * FROM %s ORDER BY id"", sourceTableName),"
122606,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,164,,"        sql(""SELECT id, name, dept, subdept FROM %s ORDER BY id"", tableName));"
122607,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,210,,"        ""CREATE TABLE %s (id Integer, name String, dept String, subdept String) USING iceberg PARTITIONED BY (id)"";"
122608,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,449,,"      new StructField(""name"", DataTypes.StringType, false, Metadata.empty()),"
122609,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,450,,"      new StructField(""dept"", DataTypes.StringType, false, Metadata.empty()),"
122610,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAddFilesProcedure.java,451,,"      new StructField(""subdept"", DataTypes.StringType, false, Metadata.empty())"
122611,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java,45,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg"", tableName);"
122612,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java,48,,"    Assert.assertTrue(""Table should start unpartitioned"", table.spec().isUnpartitioned());"
122613,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java,59,,"    Assert.assertEquals(""Should have new spec field"", expected, table.spec());"
122614,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java,302,,"    Assert.assertEquals(""Should changed from daily to hourly partitioned field"", expected, table.spec());"
122615,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTablePartitionFields.java,339,,"        .day(""ts"", ""day_col"")"
122616,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTableSchema.java,45,,"    Assert.assertTrue(""Table should start without identifier"", table.schema().identifierFieldIds().isEmpty());"
122617,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestAlterTableSchema.java,58,,"            table.schema().findField(""location.lon"").fieldId()),"
122618,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCallStatementParser.java,77,,"    Assert.assertEquals(ImmutableList.of(""c"", ""n"", ""func""), JavaConverters.seqAsJavaList(call.name()));"
122619,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCallStatementParser.java,93,,"    Assert.assertEquals(ImmutableList.of(""cat"", ""system"", ""func""), JavaConverters.seqAsJavaList(call.name()));"
122620,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCallStatementParser.java,93,,"    Assert.assertEquals(ImmutableList.of(""cat"", ""system"", ""func""), JavaConverters.seqAsJavaList(call.name()));"
122621,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCherrypickSnapshotProcedure.java,52,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg"", tableName);"
122622,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCherrypickSnapshotProcedure.java,61,,"        sql(""SELECT * FROM %s"", tableName));"
122623,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,68,,"    spark.conf().set(""spark.sql.shuffle.partitions"", ""4"");"
122624,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,88,,"    assertEquals(""Should have expected rows"","
122625,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,90,,"        sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122626,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,97,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'hr'), (2, 'hardware'), (null, 'hr')"", tableName);"
122627,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,107,,"        ImmutableList.of(row(1, ""hr""), row(2, ""hardware""), row(null, ""hr"")),"
122628,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,108,,"        sql(""SELECT * FROM %s ORDER BY id ASC NULLS LAST"", tableName));"
122629,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,137,,"    validateSnapshot(currentSnapshot, ""overwrite"", ""1"", ""1"", ""1"");"
122630,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,167,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'hr')"", tableName);"
122631,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,182,,"        sql(""SELECT * FROM %s"", tableName));"
122632,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,379,,"    createOrReplaceView(""deleted_id"", Arrays.asList(0, 1, null), Encoders.INT());"
122633,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,380,,"    createOrReplaceView(""deleted_dep"", Arrays.asList(""software"", ""hr""), Encoders.STRING());"
122634,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,380,,"    createOrReplaceView(""deleted_dep"", Arrays.asList(""software"", ""hr""), Encoders.STRING());"
122635,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,453,,"    sql(""DELETE FROM %s t WHERE "" +"
122636,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestDelete.java,569,,"    append(new Employee(0, ""ops""), new Employee(1, ""ops""), new Employee(2, ""ops""));"
122637,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java,55,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg"", tableName);"
122638,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,82,,"    createAndInitTable(""id INT, dep STRING"");"
122639,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,84,,"    createOrReplaceView(""source"", ""id INT, dep STRING"","
122640,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,85,,"        ""{ \""id\"": 1, \""dep\"": \""emp-id-1\"" }\n"" +"
122641,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,86,,"        ""{ \""id\"": 2, \""dep\"": \""emp-id-2\"" }\n"" +"
122642,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,89,,"    sql(""MERGE INTO %s AS t USING source AS s "" +"
122643,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,90,,"        ""ON t.id == s.id "" +"
122644,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,91,,"        ""WHEN NOT MATCHED THEN "" +"
122645,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,92,,"        ""  INSERT *"", tableName);"
122646,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,95,,"        row(1, ""emp-id-1""), // new"
122647,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,96,,"        row(2, ""emp-id-2""), // new"
122648,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,99,,"    assertEquals(""Should have expected rows"", expectedRows, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122649,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,99,,"    assertEquals(""Should have expected rows"", expectedRows, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122650,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,126,,"        ""{ \""id\"": 1, \""dep\"": \""emp-id-one\"" }\n"" +"
122651,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,132,,"        ""{ \""id\"": 6, \""dep\"": \""emp-id-6\"" }"");"
122652,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,136,,"        ""WHEN MATCHED AND t.id = 1 THEN "" +"
122653,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,159,,"        ""WHEN MATCHED AND t.id = 6 THEN "" +"
122654,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,160,,"        ""  DELETE"", tableName);"
122655,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,182,,"        ""  UPDATE SET * "" +"
122656,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,184,,"        ""  DELETE "" +"
122657,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,185,,"        ""WHEN NOT MATCHED AND s.id = 2 THEN "" +"
122658,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,360,,"        ""WHEN MATCHED THEN "" +"
122659,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,405,,"      sql(""ALTER TABLE %s SET TBLPROPERTIES('%s' '%s')"", tableName, WRITE_DISTRIBUTION_MODE, mode.modeName());"
122660,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,580,,"    createAndInitTable(""id INT, v STRING"","
122661,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,581,,"        ""{ \""id\"": 1, \""v\"": \""v1\"" }\n"" +"
122662,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,582,,"        ""{ \""id\"": 2, \""v\"": \""v2\"" }"");"
122663,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,595,,"    assertEquals(""Output should match"", expectedRows, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122664,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,641,,"        sql(""MERGE INTO %s t USING source s "" +"
122665,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,738,,"    sql(""MERGE INTO %s t USING source "" +"
122666,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,739,,"        ""ON t.id == source.id "" +"
122667,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,741,,"        ""  UPDATE SET v = source.v "" +"
122668,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,743,,"        ""  INSERT (v, id) VALUES (source.v, source.id)"", tableName);"
122669,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,746,,"        row(1, ""v1_1""), // new"
122670,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,777,,"    assertEquals(""Output should match"", expectedRows, sql(""SELECT * FROM %s ORDER BY v"", tableName));"
122671,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1096,,"    createAndInitTable(""id INT, c STRUCT<n1:INT,n2:STRUCT<dn1:INT,dn2:INT>>"");"
122672,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1097,,"    createOrReplaceView(""source"", ""{ \""c1\"": -100, \""c2\"": -200 }"");"
122673,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1103,,"              ""ON t.id == s.c1 "" +"
122674,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1288,,"        AnalysisException.class, ""nondeterministic expressions are only allowed in"","
122675,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1293,,"              ""  UPDATE SET t.c.n1 = -1"", tableName);"
122676,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1330,,"        AnalysisException.class, ""contains one or more unsupported"","
122677,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1371,,"    AssertHelpers.assertThrows(""Should complain about subquery expressions"","
122678,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMerge.java,1372,,"        AnalysisException.class, ""Subqueries are not supported in conditions"","
122679,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMigrateTableProcedure.java,53,,"    Assume.assumeTrue(catalogName.equals(""spark_catalog""));"
122680,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMigrateTableProcedure.java,55,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING parquet LOCATION '%s'"", tableName, location);"
122681,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestMigrateTableProcedure.java,56,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'a')"", tableName);"
122682,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRemoveOrphanFilesProcedure.java,59,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg"", tableName);"
122683,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRemoveOrphanFilesProcedure.java,101,,"        ""CALL %s.system.remove_orphan_files("" +"
122684,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRemoveOrphanFilesProcedure.java,102,,"            ""table => '%s',"" +"
122685,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRemoveOrphanFilesProcedure.java,112,,"            ""older_than => TIMESTAMP '%s')"","
122686,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRewriteManifestsProcedure.java,51,,"    assertEquals(""Procedure output must match"","
122687,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRewriteManifestsProcedure.java,58,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg PARTITIONED BY (data)"", tableName);"
122688,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java,50,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg"", tableName);"
122689,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java,51,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'a')"", tableName);"
122690,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java,58,,"    assertEquals(""Should have expected rows"","
122691,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java,60,,"        sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122692,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java,70,,"    assertEquals(""Procedure output must match"","
122693,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java,74,,"    assertEquals(""Rollback must be successful"","
122694,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java,50,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg"", tableName);"
122695,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java,51,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'a')"", tableName);"
122696,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java,61,,"    assertEquals(""Should have expected rows"","
122697,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java,63,,"        sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122698,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java,73,,"    assertEquals(""Procedure output must match"","
122699,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java,77,,"    assertEquals(""Rollback must be successful"","
122700,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java,52,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg"", tableName);"
122701,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java,53,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'a')"", tableName);"
122702,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java,62,,"        sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122703,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java,72,,"    assertEquals(""Procedure output must match"","
122704,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java,197,,"    AssertHelpers.assertThrows(""Should reject calls without all required args"","
122705,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java,198,,"        AnalysisException.class, ""Missing required parameters"","
122706,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,45,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, category string, ts timestamp, data string) USING iceberg"", tableName);"
122707,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,47,,"    Assert.assertTrue(""Table should start unsorted"", table.sortOrder().isUnsorted());"
122708,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,54,,"    Assert.assertEquals(""Distribution mode must match"", ""range"", distributionMode);"
122709,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,54,,"    Assert.assertEquals(""Distribution mode must match"", ""range"", distributionMode);"
122710,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,58,,"        .asc(""category"", NullOrder.NULLS_FIRST)"
122711,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,61,,"    Assert.assertEquals(""Should have expected order"", expected, table.sortOrder());"
122712,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,172,,"    Assert.assertEquals(""Sort order must match"", expected, table.sortOrder());"
122713,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,177,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, category string) USING iceberg PARTITIONED BY (category)"", tableName);"
122714,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetWriteDistributionAndOrdering.java,186,,"    Assert.assertEquals(""Distribution mode must match"", ""hash"", distributionMode);"
122715,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSnapshotTableProcedure.java,56,,"    sql(""CREATE TABLE %s (id bigint NOT NULL, data string) USING parquet LOCATION '%s'"", sourceName, location);"
122716,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSnapshotTableProcedure.java,57,,"    sql(""INSERT INTO TABLE %s VALUES (1, 'a')"", sourceName);"
122717,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSnapshotTableProcedure.java,60,,"    Assert.assertEquals(""Should have added one file"", 1L, result);"
122718,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSnapshotTableProcedure.java,68,,"    assertEquals(""Should have expected rows"","
122719,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,69,,"    spark.conf().set(""spark.sql.shuffle.partitions"", ""4"");"
122720,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,82,,"    createAndInitTable(""id INT, dep STRING"");"
122721,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,93,,"    assertEquals(""Should have expected rows"","
122722,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,94,,"        ImmutableList.of(row(1, ""hr""), row(2, ""hardware""), row(null, ""hr"")),"
122723,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,95,,"        sql(""SELECT * FROM %s ORDER BY id ASC NULLS LAST"", tableName));"
122724,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,110,,"        sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122725,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,116,,"    sql(""ALTER TABLE %s ADD PARTITION FIELD dep"", tableName);"
122726,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,125,,"        sql(""SELECT * FROM %s"", tableName));"
122727,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,151,,"        ImmutableList.of(row(-1, ""hr""), row(1, ""software"")),"
122728,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,161,,"        ""{ \""id\"": 1, \""dep\"": \""hr\"" }\n"" +"
122729,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,165,,"        ""{ \""id\"": 2, \""dep\"": \""hardware\"" }"");"
122730,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,173,,"    validateSnapshot(currentSnapshot, ""overwrite"", ""1"", ""1"", ""1"");"
122731,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,177,,"        sql(""SELECT * FROM %s ORDER BY id, dep"", tableName));"
122732,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,258,,"        ""{ \""id\"": 2, \""dep\"": \""hardware\"" }\n"" +"
122733,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,259,,"        ""{ \""id\"": null, \""dep\"": \""hr\"" }"");"
122734,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,274,,"        sql(""SELECT * FROM %s ORDER BY id ASC NULLS LAST, dep"", tableName));"
122735,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,535,,"    createOrReplaceView(""updated_id"", Arrays.asList(0, 1, null), Encoders.INT());"
122736,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,536,,"    createOrReplaceView(""updated_dep"", Arrays.asList(""software"", ""hr""), Encoders.STRING());"
122737,./TargetProjects/iceberg/spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestUpdate.java,552,,"        ""{ \""id\"": 2, \""dep\"": \""hr\"" }"");"
122738,./TargetProjects/iceberg/spark3-runtime/src/integration/java/org/apache/iceberg/spark/SmokeTest.java,40,,"    sql(""DROP TABLE IF EXISTS %s"", tableName);"
122739,./TargetProjects/iceberg/spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java,137,,"          .withLocation(properties.get(""location""))"
122740,./TargetProjects/iceberg/spark3/src/main/java/org/apache/iceberg/spark/SparkSessionCatalog.java,128,,"    String provider = properties.get(""provider"");"
122741,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,80,,"  private static final String NAMESPACE = ""default"";"
122742,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,85,,"        new Object[] {""spark_catalog"", SparkSessionCatalog.class.getName(), ImmutableMap.of("
122743,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,86,,"            ""type"", ""hive"","
122744,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,87,,"            ""default-namespace"", ""default"","
122745,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,92,,"            ""type"", ""hadoop"","
122746,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,161,,"    Assume.assumeTrue(""Cannot migrate to a hadoop based catalog"", !type.equals(""hadoop""));"
122747,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,162,,"    Assume.assumeTrue(""Can only migrate from Spark Session Catalog"", catalog.name().equals(""spark_catalog""));"
122748,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,232,,"    List<Object[]> results1 = sql(""select * from %s order by id"", dest);"
122749,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,234,,"    assertEquals(""Output must match"", results1, expected1);"
122750,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,263,,"    String newCol1 = ""newCol"";"
122751,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java,508,,"    List<Object[]> expectedBeforeAddColumn = sql(""SELECT * FROM %s ORDER BY col0"", tblName);"
122752,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction3.java,40,,"    spark.conf().set(""spark.sql.catalog.mycat.type"", ""hadoop"");"
122753,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction3.java,44,,"    String[] database = {""default""};"
122754,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction3.java,45,,"    Identifier id = Identifier.of(database, ""table"");"
122755,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction3.java,53,,"    String location = table.table().location().replaceFirst(""file:"", """");"
122756,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction3.java,54,,"    new File(location + ""/data/trashfile"").createNewFile();"
122757,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/actions/TestRemoveOrphanFilesAction3.java,58,,"    Assert.assertTrue(""trash file should be removed"","
122758,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/SparkCatalogTestBase.java,61,,"            ""type"", ""hive"","
122759,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/TestFileRewriteCoordinator.java,69,,"    Dataset<Row> fileDF = spark.read().format(""iceberg"").load(tableName(tableIdent.name() + "".files""));"
122760,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/TestSpark3Util.java,42,,"    Assert.assertEquals(""Sort order isn't correct."", ""data DESC NULLS FIRST"","
122761,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,92,,"      Types.NestedField.optional(3, ""data"", Types.StringType.get())"
122762,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,205,,"        ""path"", unpartitioned.toString())"
122763,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,269,,"        read(unpartitioned.toString(), vectorized, ""ts < cast('2017-12-22 00:00:00+00:00' as timestamp)""));"
122764,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestFilteredScan.java,443,,"        .format(""iceberg"")"
122765,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestSparkCatalogHadoopOverrides.java,93,,"    String actualCatalogOverride = conf.get(configToOverride, ""/whammies"");"
122766,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreamingRead3.java,79,,"      optional(2, ""data"", Types.StringType.get())"
122767,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreamingRead3.java,88,,"          new SimpleRecord(1, ""one""),"
122768,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreamingRead3.java,152,,"  @SuppressWarnings(""unchecked"")"
122769,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/source/TestStructuredStreamingRead3.java,161,,"        .format(""iceberg"")"
122770,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestAlterTable.java,73,,"        NestedField.optional(2, ""data"", Types.StringType.get()));"
122771,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestAlterTable.java,75,,"    Assert.assertEquals(""Schema should match expected"","
122772,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,52,,"    Assert.assertFalse(""Table should not already exist"", validationCatalog.tableExists(tableIdent));"
122773,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,57,,"    Assert.assertNotNull(""Should load the new table"", table);"
122774,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,61,,"        NestedField.optional(2, ""data"", Types.StringType.get()));"
122775,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,62,,"    Assert.assertEquals(""Should have the expected schema"", expectedSchema, table.schema().asStruct());"
122776,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,63,,"    Assert.assertEquals(""Should not be partitioned"", 0, table.spec().fields().size());"
122777,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,64,,"    Assert.assertNull(""Should not have the default format set"","
122778,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,99,,"    sql(""CREATE TABLE %s "" +"
122779,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTable.java,101,,"        ""USING iceberg "" +"
122780,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,61,,"        Types.NestedField.optional(2, ""data"", Types.StringType.get())"
122781,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,66,,"    Assert.assertEquals(""Should have expected nullable schema"","
122782,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,70,,"    assertEquals(""Should have rows matching the source table"","
122783,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,71,,"        sql(""SELECT * FROM %s ORDER BY id"", sourceName),"
122784,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,109,,"        ""SELECT id, data, CASE WHEN (id %% 2) = 0 THEN 'even' ELSE 'odd' END AS part "" +"
122785,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,115,,"        Types.NestedField.optional(3, ""part"", Types.StringType.get())"
122786,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,128,,"    Assert.assertEquals(""Should be partitioned by part"","
122787,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,133,,"            ""FROM %s ORDER BY id"", sourceName),"
122788,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,136,,"    Assert.assertEquals(""Table should have expected snapshots"","
122789,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestCreateTableAsSelect.java,192,,"    spark.table(sourceName).writeTo(tableName).using(""iceberg"").create();"
122790,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestDeleteFrom.java,51,,"    String originalParallelism = spark.conf().get(""spark.sql.shuffle.partitions"");"
122791,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestDeleteFrom.java,59,,"          sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122792,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestNamespaceSQL.java,59,,"    Assert.assertFalse(""Namespace should not already exist"", validationNamespaceCatalog.namespaceExists(NS));"
122793,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestNamespaceSQL.java,61,,"    sql(""CREATE NAMESPACE %s"", fullNamespace);"
122794,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestNamespaceSQL.java,63,,"    Assert.assertTrue(""Namespace should exist"", validationNamespaceCatalog.namespaceExists(NS));"
122795,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestPartitionedWrites.java,54,,"    Assert.assertEquals(""Should have 3 rows"", 3L, scalarSql(""SELECT count(*) FROM %s"", tableName));"
122796,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestPartitionedWrites.java,54,,"    Assert.assertEquals(""Should have 3 rows"", 3L, scalarSql(""SELECT count(*) FROM %s"", tableName));"
122797,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestPartitionedWrites.java,68,,"    assertEquals(""Row data should match expected"", expected, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122798,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestPartitionedWrites.java,68,,"    assertEquals(""Row data should match expected"", expected, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122799,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestSelect.java,69,,"    assertEquals(""Should return all expected rows"", expected, sql(""SELECT * FROM %s"", tableName));"
122800,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestTimestampWithoutZone.java,71,,"                    ""parquet-enabled"", ""true"","
122801,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestTimestampWithoutZone.java,100,,"        () -> sql(""INSERT INTO %s VALUES %s"", tableName, rowToSqlValues(values)));"
122802,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestTimestampWithoutZone.java,108,,"      Assert.assertEquals(""Should have "" + values.size() + "" row"","
122803,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestTimestampWithoutZone.java,108,,"      Assert.assertEquals(""Should have "" + values.size() + "" row"","
122804,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestTimestampWithoutZone.java,109,,"              (long) values.size(), scalarSql(""SELECT count(*) FROM %s"", tableName));"
122805,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestTimestampWithoutZone.java,112,,"              values, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122806,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestUnpartitionedWrites.java,54,,"    Assert.assertEquals(""Should have 3 rows"", 3L, scalarSql(""SELECT count(*) FROM %s"", tableName));"
122807,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestUnpartitionedWrites.java,54,,"    Assert.assertEquals(""Should have 3 rows"", 3L, scalarSql(""SELECT count(*) FROM %s"", tableName));"
122808,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestUnpartitionedWrites.java,68,,"    assertEquals(""Row data should match expected"", expected, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122809,./TargetProjects/iceberg/spark3/src/test/java/org/apache/iceberg/spark/sql/TestUnpartitionedWrites.java,68,,"    assertEquals(""Row data should match expected"", expected, sql(""SELECT * FROM %s ORDER BY id"", tableName));"
122810,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/AffinityCollocationExample.java,84,,"            Company c1 = new Company(""company1"", ""My company"");"
122811,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/BasicCacheOperations.java,33,,"        Ignition.ignite().createCache(""myCache"");"
122812,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/CollocatedComputations.java,88,,"            IgniteCache<Long, BinaryObject> cache = ignite.cache(""person"").withKeepBinary();"
122813,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/DataStreaming.java,37,,"            IgniteCache<Integer, String> cache = ignite.getOrCreateCache(""myCache"");"
122814,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/ExternalStorage.java,49,,"        personCacheCfg.setName(""PersonCache"");"
122815,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/JDBCThinDriver.java,33,,"        Class.forName(""org.apache.ignite.IgniteJdbcThinDriver"");"
122816,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/JavaThinClient.java,72,,"        ClientConfiguration cfg = new ClientConfiguration().setAddresses(""127.0.0.1:10800"");"
122817,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/JavaThinClient.java,143,,"            ClientCache<Integer, String> cache = client.cache(""myCache"");"
122818,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/JavaThinClient.java,262,,"                .setSslClientCertificateKeyStoreType(""JKS"").setSslClientCertificateKeyStorePassword(""123456"")"
122819,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/Logging.java,42,,"            ignite.log().info(""Info Message Logged!"");"
122820,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/PartitionLossPolicyExample.java,41,,"        CacheConfiguration cacheCfg = new CacheConfiguration(""myCache"");"
122821,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/PerformingTransactions.java,77,,"            cfg.setName(""myCache"");"
122822,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/PerformingTransactions.java,79,,"            cache.put(""Hello"", 1);"
122823,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/SqlAPI.java,102,,"        IgniteCache<Long, Person> cache = ignite.cache(""personCache"");"
122824,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/UsingContinuousQueries.java,48,,"            IgniteCache<Integer, String> cache = ignite.getOrCreateCache(""myCache"");"
122825,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/WorkingWithBinaryObjects.java,50,,"            IgniteCache<Integer, Person> cache = ignite.createCache(""personCache"");"
122826,./TargetProjects/ignite/docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/services/ServiceExample.java,39,,"        services.deployClusterSingleton(""myCounterService"", new MyCounterServiceImpl());"
122827,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/binary/datagrid/CacheClientBinaryPutGetExample.java,104,,"            ""Microsoft"", // Name."
122828,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/binary/datagrid/CacheClientBinaryPutGetExample.java,105,,"            new Address(""1096 Eddy Street, San Francisco, CA"", 94109), // Address."
122829,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/binary/datagrid/CacheClientBinaryQueryExample.java,137,,"            .addQueryField(""name"", String.class.getName(), null)"
122830,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/datagrid/CacheTransactionExample.java,69,,"                System.out.println("">>> "" + cache.get(1));"
122831,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/misc/client/memcache/MemcacheRestExample.java,60,,"            if (client.add(""strKey"", 0, ""strVal"").get())"
122832,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/misc/client/memcache/MemcacheRestExample.java,76,,"            if (client.add(""intKey"", 0, 100).get())"
122833,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/ml/inference/exchange/GDBOnTreesClassificationExportImportExample.java,105,,"        System.out.println("">>> ---------------------------------"");"
122834,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/ml/tree/boosting/GDBOnTreesClassificationTrainerExample.java,71,,"                System.out.println("">>> ---------------------------------"");"
122835,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/servicegrid/ServicesExample.java,94,,"        System.out.println("">>>"");"
122836,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/sql/SqlQueriesExample.java,165,,"            ""select pers.* from Person as pers, \"""" + ORG_CACHE + ""\"".Organization as org "" +"
122837,./TargetProjects/ignite/examples/src/main/java/org/apache/ignite/examples/sql/SqlQueriesExample.java,171,,"            cache.query(new SqlFieldsQuery(joinSql).setArgs(""ApacheIgnite"")).getAll());"
122838,./TargetProjects/ignite/examples/src/main/spark/org/apache/ignite/examples/spark/JavaIgniteDataFrameJoinExample.java,72,,"                .option(IgniteDataFrameSettings.OPTION_TABLE(), ""person"")"
122839,./TargetProjects/ignite/examples/src/main/spark/org/apache/ignite/examples/spark/JavaIgniteDataFrameJoinExample.java,81,,"                .option(IgniteDataFrameSettings.OPTION_TABLE(), ""city"")"
122840,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/GridifySetToSetTarget.java,42,,"    @GridifySetToSet(igniteInstanceName = ""GridifySetToSetTarget"", threshold = 2, splitSize = 2)"
122841,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/GridifySetToSetTarget.java,121,,"        System.out.println("">>>"");"
122842,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/GridifySetToSetTargetInterface.java,37,,"    @GridifySetToSet(igniteInstanceName = ""GridifySetToSetTarget"", threshold = 2, splitSize = 2)"
122843,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/GridifySetToValueTarget.java,39,,"    @GridifySetToValue(igniteInstanceName = ""GridifySetToValueTarget"", threshold = 2, splitSize = 2)"
122844,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/GridifySetToValueTarget.java,106,,"        System.out.println("">>>"");"
122845,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/GridifySetToValueTargetInterface.java,36,,"    @GridifySetToValue(igniteInstanceName = ""GridifySetToValueTarget"", threshold = 2, splitSize = 2)"
122846,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/TestAopTarget.java,33,,"    @Gridify(igniteInstanceName = ""TestAopTarget"")"
122847,./TargetProjects/ignite/modules/aop/src/test/java/org/apache/ignite/gridify/TestAopTargetInterface.java,31,,"    @Gridify(igniteInstanceName = ""TestAopTargetInterface"")"
122848,./TargetProjects/ignite/modules/aop/src/test/java/org/test/gridify/ExternalAopTarget.java,33,,"    @Gridify(igniteInstanceName = ""ExternalAopTarget"")"
122849,./TargetProjects/ignite/modules/aop/src/test/java/org/test/gridify/ExternalNonSpringAopSelfTest.java,369,,"            info(""Start Gridify test with Test AOP Task in Deployment Mode : "" + depMode);"
122850,./TargetProjects/ignite/modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,546,,"            log.debug(""Reading data from S3 [bucket="" + bucketName + "", key="" + key + ']');"
122851,./TargetProjects/ignite/modules/aws/src/test/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpiSelfTest.java,48,,"@Ignore(""https://issues.apache.org/jira/browse/IGNITE-2420"")"
122852,./TargetProjects/ignite/modules/aws/src/test/java/org/apache/ignite/spi/discovery/tcp/ipfinder/s3/client/DummyS3Client.java,188,,"        throw new UnsupportedOperationException(""Operation not supported"");"
122853,./TargetProjects/ignite/modules/aws/src/test/java/org/apache/ignite/spi/discovery/tcp/ipfinder/s3/client/DummyS3ClientTest.java,50,,"        fakeObjMap.put(""testBucket"", fakeKeyPrefixSet);"
122854,./TargetProjects/ignite/modules/aws/src/test/java/org/apache/ignite/spi/discovery/tcp/ipfinder/s3/client/DummyS3ClientTest.java,110,,"        assertFalse(""'testBucket' must contain key with prefix '/test'"", summaries.isEmpty());"
122855,./TargetProjects/ignite/modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/misc/JmhTracingContextBenchmark.java,81,,"            MTC.span().addTag(""isolation"", () -> ""isolation"");"
122856,./TargetProjects/ignite/modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/misc/JmhTracingContextBenchmark.java,82,,"            MTC.span().addTag(""concurrency"", () -> ""concurrency"");"
122857,./TargetProjects/ignite/modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/misc/JmhTracingContextBenchmark.java,83,,"            MTC.span().addTag(""timeout"", () -> ""timeout"");"
122858,./TargetProjects/ignite/modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/misc/JmhTracingContextBenchmark.java,84,,"            MTC.span().addTag(""label"", () -> ""label"");"
122859,./TargetProjects/ignite/modules/cassandra/serializers/src/test/java/org/apache/ignite/tests/KryoSerializerTest.java,63,,"        assertEquals(""Kryo cyclic structure serialization test failed"", pojo1, pojo3);"
122860,./TargetProjects/ignite/modules/cassandra/store/src/main/java/org/apache/ignite/cache/store/cassandra/common/PropertyMappingHelper.java,133,,"                throw new IllegalArgumentException(""Can't cast null value from Cassandra table column '"" + col +"
122861,./TargetProjects/ignite/modules/cassandra/store/src/main/java/org/apache/ignite/cache/store/cassandra/common/PropertyMappingHelper.java,134,,"                        ""' to "" + ""int value used in domain object model"");"
122862,./TargetProjects/ignite/modules/cassandra/store/src/main/java/org/apache/ignite/cache/store/cassandra/persistence/KeyValuePersistenceSettings.java,429,,"            throw new IllegalArgumentException(""Incorrect Cassandra persistence settings specification, "" +"
122863,./TargetProjects/ignite/modules/cassandra/store/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,140,,"                    log.warning(""Trying "" + (attempt + 1) + "" attempt to execute Cassandra CQL statement: "" +"
122864,./TargetProjects/ignite/modules/cassandra/store/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,701,,"                    log.info(""-----------------------------------------------------------------------"");"
122865,./TargetProjects/ignite/modules/cassandra/store/src/main/java/org/apache/ignite/cache/store/cassandra/utils/DDLGenerator.java,44,,"                System.out.println(""-------------------------------------------------------------"");"
122866,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,98,,"    @SuppressWarnings(""unchecked"")"
122867,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,125,,"        LOGGER.info(""Running single write operation tests"");"
122868,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,128,,"        LOGGER.info(""Single write operation tests passed"");"
122869,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,130,,"        LOGGER.info(""Running bulk write operation tests"");"
122870,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,133,,"        LOGGER.info(""Bulk write operation tests passed"");"
122871,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,139,,"        LOGGER.info(""Running single read operation tests"");"
122872,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,145,,"            throw new RuntimeException(""Long values were incorrectly deserialized from Cassandra"");"
122873,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,161,,"        LOGGER.info(""Single read operation tests passed"");"
122874,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,163,,"        LOGGER.info(""Running bulk read operation tests"");"
122875,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,185,,"        LOGGER.info(""Bulk read operation tests passed"");"
122876,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,218,,"        CacheStore store2 = CacheStoreHelper.createCacheStore(""personTypes"","
122877,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,255,,"            throw new RuntimeException(""Person values were incorrectly deserialized from Cassandra"");"
122878,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,469,,"            throw new RuntimeException(""SimplePerson values were incorrectly deserialized from Cassandra"");"
122879,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,538,,"                    ""objects were already persisted into Cassandra"");"
122880,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,558,,"            throw new RuntimeException(""Single write operation test failed. Transaction was committed, but "" +"
122881,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/CassandraDirectPersistenceTest.java,631,,"                throw new RuntimeException(""Bulk write operation test failed. Transaction was committed, but "" +"
122882,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,125,,"            IgniteCache<Long, Long> longCache = ignite.getOrCreateCache(new CacheConfiguration<Long, Long>(""cache1""));"
122883,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,126,,"            IgniteCache<String, String> strCache = ignite.getOrCreateCache(new CacheConfiguration<String, String>(""cache2""));"
122884,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,128,,"            LOGGER.info(""Running single operation write tests"");"
122885,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,131,,"            LOGGER.info(""Single operation write tests passed"");"
122886,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,133,,"            LOGGER.info(""Running bulk operation write tests"");"
122887,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,136,,"            LOGGER.info(""Bulk operation write tests passed"");"
122888,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,149,,"            LOGGER.info(""Running single operation read tests"");"
122889,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,159,,"            LOGGER.info(""Single operation read tests passed"");"
122890,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,161,,"            LOGGER.info(""Running bulk operation read tests"");"
122891,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,171,,"            LOGGER.info(""Bulk operation read tests passed"");"
122892,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,230,,"                throw new RuntimeException(""Person value was incorrectly deserialized from Cassandra"");"
122893,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,242,,"                throw new RuntimeException(""Person values batch was incorrectly deserialized from Cassandra"");"
122894,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,303,,"        try (Ignite ignite = Ignition.start(""org/apache/ignite/tests/persistence/pojo/ignite-config.xml"")) {"
122895,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,308,,"            IgniteCache<Long, Product> productCache = ignite.getOrCreateCache(new CacheConfiguration<Long, Product>(""product""));"
122896,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,309,,"            IgniteCache<Long, ProductOrder> orderCache = ignite.getOrCreateCache(new CacheConfiguration<Long, ProductOrder>(""order""));"
122897,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/IgnitePersistentStoreTest.java,602,,"        LOGGER.info(""-----------------------------------------------------------------------------------"");"
122898,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/utils/CassandraLifeCycleBean.java,97,,"            log.info(""-------------------------------"");"
122899,./TargetProjects/ignite/modules/cassandra/store/src/test/java/org/apache/ignite/tests/utils/CassandraLifeCycleBean.java,119,,"            log.info(""------------------------------"");"
122900,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/ClientSizeCacheCreationDestructionTest.java,172,,"            srv.cache(CACHE_NAME + i).put(1, ""abc_srv"" + i);"
122901,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/ClientSizeCacheCreationDestructionTest.java,175,,"            srv.cache(CLIENT_CACHE_NAME + i).put(1, ""abc_cli"" + i);"
122902,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/ClientSizeCacheCreationDestructionTest.java,244,,"                srv.cache(""SQL_PUBLIC_"" + CLIENT_CACHE_NAME.toUpperCase() + i)."
122903,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,138,,"        try (Connection ignored = getConnection(jdbcConfiguration(""thinClient"", ""trusttwo"", CIPHER_SUITE, ""TLSv1.2""))) {"
122904,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,138,,"        try (Connection ignored = getConnection(jdbcConfiguration(""thinClient"", ""trusttwo"", CIPHER_SUITE, ""TLSv1.2""))) {"
122905,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,138,,"        try (Connection ignored = getConnection(jdbcConfiguration(""thinClient"", ""trusttwo"", CIPHER_SUITE, ""TLSv1.2""))) {"
122906,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,149,,"            getConnection(jdbcConfiguration(""client"", ""trusttwo"", CIPHER_SUITE, ""TLSv1.2"")),"
122907,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,162,,"            getConnection(jdbcConfiguration(""thinClient"", ""trusttwo"", null, ""TLSv1.1"")),"
122908,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,177,,"            GridClient ignored = start(gridClientConfiguration(""connectorClient"", ""trustthree"", CIPHER_SUITE, ""TLSv1.2""))"
122909,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/NodeSslConnectionMetricTest.java,217,,"        startGrid(nodeConfiguration(1, true, ""client"", ""trustone"", CIPHER_SUITE, ""TLSv1.2""));"
122910,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/RunningQueryInfoCheckInitiatorTest.java,107,,"                log.error(""Unexpected exception"", e);"
122911,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/common/RunningQueryInfoCheckInitiatorTest.java,166,,"            assertTrue(""Invalid initiator ID: "" + initiatorId,"
122912,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientSslParametersTest.java,116,,"            ""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"","
122913,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientSslParametersTest.java,117,,"            ""TLS_RSA_WITH_AES_128_GCM_SHA256"","
122914,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientSslParametersTest.java,118,,"            ""TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"""
122915,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientSslParametersTest.java,200,,"            ""TLSv1.1"","
122916,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientSslParametersTest.java,201,,"            ""SSLv3"""
122917,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientSslParametersTest.java,210,,"                ""TLSv1.2"""
122918,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/impl/ClientComputeImplSelfTest.java,60,,"        }, NullPointerException.class, ""Ouch! Argument cannot be null: taskName"");"
122919,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/impl/ClientDataImplSelfTest.java,41,,"                data.put(null, ""val"");"
122920,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/impl/ClientDataImplSelfTest.java,45,,"        }, NullPointerException.class, ""Ouch! Argument cannot be null: key"");"
122921,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/impl/ClientDataImplSelfTest.java,49,,"                data.put(""key"", null);"
122922,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/impl/ClientDataImplSelfTest.java,53,,"        }, NullPointerException.class, ""Ouch! Argument cannot be null: val"");"
122923,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/impl/ClientDataImplSelfTest.java,139,,"        }, NullPointerException.class, ""Ouch! Argument cannot be null: keys"");"
122924,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/integration/ClientAbstractConnectivitySelfTest.java,128,,"        startRestNode(""grid1"", null, null);"
122925,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/integration/ClientAbstractMultiNodeSelfTest.java,502,,"                assertEquals(""Invalid tx flags: "" + t, FULL_ASYNC, ((IgniteTxLocalAdapter)t).syncMode());"
122926,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/integration/ClientAbstractSelfTest.java,373,,"        futs.put(""put"", data.putAsync(""key"", ""val""));"
122927,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/integration/ClientAbstractSelfTest.java,373,,"        futs.put(""put"", data.putAsync(""key"", ""val""));"
122928,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/rest/GridProbeCommandTest.java,85,,"        if (igniteInstanceName.equals(""regular""))"
122929,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/router/ClientFailedInitSelfTest.java,167,,"                assertEquals(""arg"", c.compute().execute(TestTask.class.getName(), ""arg""));"
122930,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/client/util/ClientConsistentHashSelfTest.java,249,,"            assertEquals(""Validate key '"" + entry.getKey() + ""'."", entry.getValue(), hash.node(entry.getKey()));"
122931,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcAbstractSchemaCaseTest.java,49,,"            cacheConfiguration(""test0"", ""test0""),"
122932,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcAbstractSchemaCaseTest.java,116,,"                checkSchemaConnection(""TestCase"");"
122933,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcAbstractSchemaCaseTest.java,130,,"        assertTablesInSchemasPresented(""TEST0""); // due to its normalized."
122934,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcAbstractSchemaCaseTest.java,134,,"        assertTablesInSchemasPresented(""TEST0"", ""TEST1"");"
122935,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcComplexQuerySelfTest.java,97,,"        personCache.put(new AffinityKey<>(""p1"", ""o1""), new Person(1, ""John White"", 25, 1));"
122936,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcComplexQuerySelfTest.java,98,,"        personCache.put(new AffinityKey<>(""p2"", ""o1""), new Person(2, ""Joe Black"", 35, 1));"
122937,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcComplexQuerySelfTest.java,99,,"        personCache.put(new AffinityKey<>(""p3"", ""o2""), new Person(3, ""Mike Green"", 40, 2));"
122938,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcComplexQuerySelfTest.java,136,,"                assert ""John White"".equals(rs.getString(""name""));"
122939,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcConnectionSelfTest.java,107,,"        String url = CFG_URL_PREFIX + ""nodeId="" + grid(0).localNode().id() + '@' + configURL();"
122940,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcDistributedJoinsQueryTest.java,83,,"        personCache.put(""p1"", new Person(1, ""John White"", 25, 1));"
122941,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcDistributedJoinsQueryTest.java,84,,"        personCache.put(""p2"", new Person(2, ""Joe Black"", 35, 1));"
122942,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcDistributedJoinsQueryTest.java,85,,"        personCache.put(""p3"", new Person(3, ""Mike Green"", 40, 2));"
122943,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcDistributedJoinsQueryTest.java,122,,"                assert ""John White"".equals(rs.getString(""name""));"
122944,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,80,,"                        assertEquals(""p1"", rs.getString(""_key""));"
122945,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,81,,"                        assertEquals(""John"", rs.getString(""firstName""));"
122946,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,82,,"                        assertEquals(""White"", rs.getString(""lastName""));"
122947,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,82,,"                        assertEquals(""White"", rs.getString(""lastName""));"
122948,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,83,,"                        assertEquals(25, rs.getInt(""age""));"
122949,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,84,,"                        assertEquals(""White"", str(getBytes(rs.getBlob(""data""))));"
122950,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,90,,"                        assertEquals(""Black"", rs.getString(""lastName""));"
122951,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,98,,"                        assertEquals(""Green"", rs.getString(""lastName""));"
122952,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcInsertStatementSelfTest.java,106,,"                        assertEquals(""Grey"", rs.getString(""lastName""));"
122953,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,75,,"                        assertEquals(""p1"", rs.getString(""_key""));"
122954,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,76,,"                        assertEquals(""John"", rs.getString(""firstName""));"
122955,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,77,,"                        assertEquals(""White"", rs.getString(""lastName""));"
122956,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,77,,"                        assertEquals(""White"", rs.getString(""lastName""));"
122957,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,78,,"                        assertEquals(25, rs.getInt(""age""));"
122958,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,79,,"                        assertEquals(""White"", str(getBytes(rs.getBlob(""data""))));"
122959,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,85,,"                        assertEquals(""Black"", rs.getString(""lastName""));"
122960,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,93,,"                        assertEquals(""Green"", rs.getString(""lastName""));"
122961,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMergeStatementSelfTest.java,101,,"                        assertEquals(""Grey"", rs.getString(""lastName""));"
122962,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,79,,"        persFields.put(""name"", true);"
122963,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,83,,"            cacheConfiguration(""pers"").setQueryEntities(Arrays.asList("
122964,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,88,,"                        .addQueryField(""orgId"", Integer.class.getName(), null)"
122965,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,94,,"            cacheConfiguration(""org"").setQueryEntities(Arrays.asList("
122966,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,184,,"            assertEquals(""INTEGER"", meta.getColumnTypeName(2));"
122967,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,252,,"                conn.setSchema(""\""pers\"""");"
122968,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,309,,"            assertEquals(""TABLE"", rs.getString(""TABLE_TYPE""));"
122969,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,309,,"            assertEquals(""TABLE"", rs.getString(""TABLE_TYPE""));"
122970,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,377,,"                assertEquals(JdbcUtils.CATALOG_NAME, rs.getString(""TABLE_CAT""));"
122971,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,381,,"                actViews.add(rs.getString(""TABLE_NAME""));"
122972,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,403,,"            assertEquals(""PERSON"", rs.getString(""TABLE_NAME""));"
122973,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,515,,"            names.add(""NAME"");"
122974,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,522,,"                String name = rs.getString(""COLUMN_NAME"");"
122975,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,527,,"                    assertEquals(VARCHAR, rs.getInt(""DATA_TYPE""));"
122976,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,528,,"                    assertEquals(""VARCHAR"", rs.getString(""TYPE_NAME""));"
122977,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,529,,"                    assertEquals(0, rs.getInt(""NULLABLE""));"
122978,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java,531,,"                    assertEquals(""NO"", rs.getString(""IS_NULLABLE""));"
122979,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcResultSetSelfTest.java,483,,"                assert rs.getString(7).equals(""1.0"");"
122980,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,84,,"        cache.put(""p2"", new Person(2, ""Joe"", ""Black"", 35));"
122981,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,84,,"        cache.put(""p2"", new Person(2, ""Joe"", ""Black"", 35));"
122982,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,85,,"        cache.put(""p3"", new Person(3, ""Mike"", ""Green"", 40));"
122983,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,85,,"        cache.put(""p3"", new Person(3, ""Mike"", ""Green"", 40));"
122984,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,123,,"                assert ""Joe"".equals(rs.getString(""firstName""));"
122985,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,124,,"                assert ""Black"".equals(rs.getString(""lastName""));"
122986,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,125,,"                assert rs.getInt(""age"") == 35;"
122987,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStatementSelfTest.java,133,,"                assert false : ""Wrong ID: "" + id;"
122988,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcStreamingSelfTest.java,214,,"            try (PreparedStatement stmt = conn.prepareStatement(""insert into PUBLIC.Person(\""id\"", \""name\"") "" +"
122989,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,98,,"        jcache().put(""getKey1"", ""getVal1"");"
122990,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,98,,"        jcache().put(""getKey1"", ""getVal1"");"
122991,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,99,,"        jcache().put(""getKey2"", ""getVal2"");"
122992,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,99,,"        jcache().put(""getKey2"", ""getVal2"");"
122993,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,130,,"        Assert.assertTrue(client.set(""setKey"", 0, ""setVal"").get());"
122994,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,130,,"        Assert.assertTrue(client.set(""setKey"", 0, ""setVal"").get());"
122995,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,182,,"        Assert.assertFalse(client.replace(""replaceKey"", 0, ""replaceVal"").get());"
122996,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,187,,"        Assert.assertTrue(client.replace(""replaceKey"", 0, ""replaceValNew"").get());"
122997,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,213,,"        Assert.assertFalse(client.delete(""deleteKey"").get());"
122998,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,227,,"        Assert.assertEquals(5, client.incr(""incrKey"", 3, 2));"
122999,./TargetProjects/ignite/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/ClientMemcachedProtocolSelfTest.java,241,,"        Assert.assertEquals(5, client.decr(""decrKey"", 10, 15));"
