Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,if (_customProcessProperties != null && _customProcessProperties.get(QName.valueOf(varName)) != null) {,"if (_customProcessProperties != null && _customProcessProperties.get(QName.valueOf(varName)) != null) {
}
",0,1491,8,6491,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2,} else {,"if (obj instanceof List) {
  for (  Object o : (List)obj) {
    try {
      if (o instanceof OMNode) {
        OMNode node=(OMNode)o;
        List<Link> links=null;
        if (node instanceof Source) {
          Source source=(Source)node;
          links=source.getLinks(""alternate"");
        }
 else         if (node instanceof Entry) {
          Entry entry=(Entry)node;
          links=entry.getLinks(""alternate"");
        }
        if (links != null)         results.addAll(links);
      }
    }
 catch (    Exception e) {
    }
  }
}
 else {
}
",0,0,0,,
3,} else {,"if (node instanceof OMText) {
  buf.append(((OMText)node).getText());
}
 else {
}
",0,0,0,,
4,"if (coll.contains(""val="" + priKeys.get(2)) || coll.contains(""val="" + priKeys.get(0)));","if (coll.contains(""val="" + priKeys.get(2)) || coll.contains(""val="" + priKeys.get(0))) ;
",0,350,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
5,} else {,"if (obj instanceof List) {
  for (  Object o : (List)obj) {
    try {
      String value=StringFunction.evaluate(o,navigator);
      IRI resolved=null;
      IRI baseUri=null;
      if (o instanceof OMNode) {
        OMNode node=(OMNode)o;
        OMContainer el=node.getParent();
        if (el instanceof Document) {
          Document<Element> doc=(Document<Element>)el;
          baseUri=doc.getBaseUri();
        }
 else         if (el instanceof Element) {
          Element element=(Element)el;
          baseUri=element.getBaseUri();
        }
      }
 else       if (o instanceof OMAttribute) {
        OMAttribute attr=(OMAttribute)o;
        Element element=(Element)context.getNavigator().getParentNode(attr);
        baseUri=element.getBaseUri();
      }
      if (baseUri != null) {
        resolved=baseUri.resolve(value);
        results.add(resolved.toString());
      }
    }
 catch (    Exception e) {
    }
  }
}
 else {
}
",0,0,0,,
6,} else {,"if (""durability"".equals(key)) {
  durability=DurabilityImpl.fromString(value);
}
 else {
}
",0,0,0,,
7,} else {,"if (iiter.hasNext()) {
  while (iiter.hasPrevious() && iiter.peekPrevious().getKey().equals(iiter.peek().getKey())) {
    iiter.previous();
  }
  if (iiter.hasPrevious())   prevKey=new Key(iiter.peekPrevious().getKey());
 else   prevKey=new Key();
  IndexEntry indexEntry=iiter.next();
  entriesLeft=indexEntry.getNumEntries();
  currBlock=getDataBlock(indexEntry);
  checkRange=range.afterEndKey(indexEntry.getKey());
  if (!checkRange)   hasTop=true;
  MutableByteSequence valbs=new MutableByteSequence(new byte[64],0,0);
  Key currKey=null;
  if (currBlock.isIndexable()) {
    BlockIndex blockIndex=BlockIndex.getIndex(currBlock,indexEntry);
    if (blockIndex != null) {
      BlockIndexEntry bie=blockIndex.seekBlock(startKey,currBlock);
      if (bie != null) {
        RelativeKey tmpRk=new RelativeKey();
        tmpRk.setPrevKey(bie.getPrevKey());
        tmpRk.readFields(currBlock);
        val=new Value();
        val.readFields(currBlock);
        valbs=new MutableByteSequence(val.get(),0,val.getSize());
        entriesLeft=bie.getEntriesLeft() - 1;
        prevKey=new Key(bie.getPrevKey());
        currKey=tmpRk.getKey();
      }
    }
  }
  SkippR skippr=RelativeKey.fastSkip(currBlock,startKey,valbs,prevKey,currKey,entriesLeft);
  prevKey=skippr.prevKey;
  entriesLeft-=skippr.skipped;
  val=new Value(valbs.toArray());
  rk=skippr.rk;
}
 else {
}
",0,0,0,,
8,if ((i == alphaData[0]) && (i == alphaData[2])) {},"if ((i == alphaData[0]) && (i == alphaData[2])) {
}
",0,54,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
9,} else if (entry.getKey().getColumnFamily().equals(LastLocationColumnFamily.NAME)) {,"if (entry.getKey().getColumnFamily().equals(LastLocationColumnFamily.NAME)) {
}
 else {
  m.put(entry.getKey().getColumnFamily(),entry.getKey().getColumnQualifier(),entry.getValue());
}
",0,246,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, IfStatement-expression, ),
"
10,if (e instanceof MissingOptionException && Stream.of(fields).anyMatch(IS_HELP_OPT)) {,"if (e instanceof MissingOptionException && Stream.of(fields).anyMatch(IS_HELP_OPT)) {
}
 else {
  ++exitCode;
  printException(e);
}
",0,27,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
11,} else {,"if (tls.future != null) {
  ++assignedCount;
}
 else {
}
",0,0,0,,
12,if (val.longValue() == -1 || (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE)) {,"if (val.longValue() == -1 || (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE)) {
}
 else {
  throw ActiveMQMessageBundle.BUNDLE.inRangeOfPositiveIntThanMinusOne(name,val);
}
",0,375,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
13,if (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE) {,"if (val.longValue() > 0 && val.longValue() <= Integer.MAX_VALUE) {
}
 else {
  throw ActiveMQMessageBundle.BUNDLE.inRangeOfPositiveInt(name,val);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
14,|| ((TS.dataLocation != null) && (TS.term.compareTo(TS.fieldTerm) != 0))) {,"if ((TS.topKey == null) || ((TS.dataLocation != null) && (TS.term.compareTo(TS.fieldTerm) != 0))) {
}
 else if (sources.size() > 0 || iter.hasNext()) {
  sorted.add(TS);
}
 else {
  if (log.isDebugEnabled()) {
    log.debug(""OI.seek new topKey >>"" + ((topKey == null) ? ""false"" : topKey) + ""<< "");
  }
  if (hasTop()) {
    if (overallRange != null && !overallRange.contains(topKey)) {
      if (log.isDebugEnabled()) {
        log.debug(""seek, topKey: "" + topKey + "" is not in the overallRange: ""+ overallRange);
      }
      topKey=null;
    }
  }
  return;
}
",0,11,6,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
15,} else {,"if (indexedTerms.containsKey(fName + "":"" + fValue)) {
  if (indexedTerms.get(fName + "":"" + fValue).size() > 1) {
    node.setType(ParserTreeConstants.JJTORNODE);
    boolean neg=node.isNegated();
    node.setNegated(false);
    node.setFieldName(null);
    node.setFieldValue(null);
    Collection<String> values=indexedTerms.get(fName + "":"" + fValue);
    for (    String value : values) {
      RewriterTreeNode n=new RewriterTreeNode(ParserTreeConstants.JJTEQNODE,fName,value,neg);
      node.add(n);
    }
  }
 else   if (indexedTerms.get(fName + "":"" + fValue).size() == 1) {
    Collection<String> values=indexedTerms.get(fName + "":"" + fValue);
    for (    String val : values) {
      node.setFieldValue(val);
    }
  }
}
 else {
}
",0,0,0,,
16,if (resolved == null || resolved.getKind() == TypeKind.VOID || resolved.getKind() == TypeKind.NONE ||resolved.getKind() == TypeKind.EXECUTABLE || resolved.getKind() == TypeKind.NULL) {,"if (resolved == null || resolved.getKind() == TypeKind.VOID || resolved.getKind() == TypeKind.NONE || resolved.getKind() == TypeKind.EXECUTABLE || resolved.getKind() == TypeKind.NULL) {
}
 else if (resolved.getKind() != TypeKind.ERROR && expected.getKind() != TypeKind.ERROR) {
  tm[0]=expected;
  expressionType[0]=resolved;
  leaf[0]=scope;
}
",0,61,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
17,} else {,"if (loc == (normalizedFieldValue.length() - 2)) {
  normalizedFieldValue=normalizedFieldValue.substring(0,loc);
  Key startRange=new Key(new Text(normalizedFieldValue + ""\u0000""),fieldName);
  Key endRange=new Key(new Text(normalizedFieldValue + ""\u10FFFF""),fieldName);
  Range r=new Range(startRange,true,endRange,true);
  MapKey key=new MapKey(fieldName.toString(),normalizedFieldValue);
  key.setOriginalQueryValue(value);
  this.originalQueryValues.put(value,key);
  if (!trailingWildcardRanges.containsKey(key)) {
    trailingWildcardRanges.put(key,new HashSet<Range>());
  }
  trailingWildcardRanges.get(key).add(r);
}
 else {
}
",0,0,0,,
18,else {,"if (!m_groupOrUserTagSeen) {
  if (isQName(""group"",qName) || isQName(""user"",qName)) {
    m_groupOrUserTagSeen=true;
    m_appearsValid=true;
  }
 else {
    m_appearsValid=false;
    throw new SAXException(""Done"");
  }
}
 else {
}
",0,0,0,,
19,if (args[i] instanceof Class && args[i].equals(parms[i])) {,"if (args[i] instanceof Class && args[i].equals(parms[i])) {
}
 else if (parms[i].isInstance(args[i])) {
}
 else {
  continue methods;
}
",0,10,8,,"SimpleName(ArrayAccess-array, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
20,{,"if (!mv.equals(""2"") && !clauses.isEmpty()) {
}
",0,0,0,,
21,{,"if (!mv.equals(""2"") && !clauses.isEmpty()) {
}
",0,0,0,,
22,} else {,"if (amqp != null && amqp.getLength() > 0) {
  currentBuffer=new Buffer(amqp.getArray(),amqp.getArrayOffset(),amqp.getLength());
  if (presettle) {
    currentDelivery=getEndpoint().delivery(EMPTY_BYTE_ARRAY,0,0);
  }
 else {
    final byte[] tag=tagCache.getNextTag();
    currentDelivery=getEndpoint().delivery(tag,0,tag.length);
  }
  currentDelivery.setContext(md);
  currentDelivery.setMessageFormat((int)amqp.getMessageFormat());
}
 else {
}
",0,0,0,,
23,} else {,"if (s != null) {
  super.doOpenCompletion();
}
 else {
}
",0,0,0,,
24,} else {,"if (t != null) {
  super.doOpenCompletion();
}
 else {
}
",0,0,0,,
25,} else if (typeName.equals(ActiveMQObjectMessage.class.getName()) || typeName.equals(ActiveMQStreamMessage.class.getName()) || typeName.equals(ActiveMQMessage.class.getName())) {,"if (typeName.equals(ActiveMQObjectMessage.class.getName()) || typeName.equals(ActiveMQStreamMessage.class.getName()) || typeName.equals(ActiveMQMessage.class.getName())) {
}
 else {
  throw new IllegalArgumentException(""Unrecognized composite data to transform. composite type: "" + typeName);
}
",0,44,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
26,if (!TribesUtil.toAxis2Member(getLocalMember(true)).isActive()) {,"if (!TribesUtil.toAxis2Member(getLocalMember(true)).isActive()) {
}
 else {
  Member[] members=getMembers();
  for (  Member aMember : members) {
    if (!TribesUtil.toAxis2Member(member).isActive()) {
    }
  }
}
",0,44,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
"
27,"} else if (NAME_IGNORE_LIST.indexOf(""$"" + key + ""$"") != -1) {","if (NAME_IGNORE_LIST.indexOf(""$"" + key + ""$"") != -1) {
}
 else {
  LOG.warn(""Unrecognized CPU data. "" + key + ""=""+ val);
}
",0,91,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
28,} else {,"if (key.equalsIgnoreCase(""throughput"")) {
  throughput=Long.valueOf(val);
}
 else {
}
",0,0,0,,
29,} else {,"if (deleteTempQueue) {
  replyTo.delete();
}
 else {
}
",0,0,0,,
30,} else {,"if (inflightMessageCount == 0 || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) {
  assertEquals(""connected to master"",master.getBrokerName(),((ActiveMQConnection)sendConnection).getBrokerName());
}
 else {
}
",0,0,0,,
31,&& event.getThrowableInformation().getThrowable().getCause() instanceof BrokerStoppedException) {,"if (event.getThrowableInformation().getThrowable() != null && event.getThrowableInformation().getThrowable().getCause() instanceof BrokerStoppedException) {
}
 else {
  logger.info(""received unexpected log message: "" + event.getMessage());
  failed.set(true);
}
",0,2,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ),
"
32,"} else if (ev.getPropertyName().equals(""managed-bean-class"") || ev.getPropertyName().equals(""managed-bean-name"") || ev.getNewValue() == State.NOT_SYNCED) {","if (ev.getPropertyName().equals(""managed-bean-class"") || ev.getPropertyName().equals(""managed-bean-name"") || ev.getNewValue() == State.NOT_SYNCED) {
}
 else if (ev.getPropertyName().equals(""navigation-case"")) {
  final NavigationCase myNewCase=(NavigationCase)ev.getNewValue();
  final NavigationCase myOldCase=(NavigationCase)ev.getOldValue();
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      if (pfc.getView() == null) {
        return;
      }
      navigationCaseEventHandler(myNewCase,myOldCase);
    }
  }
);
}
 else if (ev.getPropertyName().equals(""navigation-rule"")) {
  final NavigationRule myNewRule=(NavigationRule)ev.getNewValue();
  final NavigationRule myOldRule=(NavigationRule)ev.getOldValue();
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      if (pfc.getView() == null) {
        return;
      }
      navigationRuleEventHandler(myNewRule,myOldRule);
    }
  }
);
}
 else if (ev.getNewValue() == State.NOT_WELL_FORMED) {
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      PageFlowView view=pfc.getView();
      if (view == null) {
        return;
      }
      view.clearGraph();
      view.warnUserMalFormedFacesConfig();
    }
  }
);
}
 else if (ev.getPropertyName().equals(""textContent"")) {
  setupGraphInAWTThread(ev);
}
 else if (ev.getPropertyName().equals(""from-view-id"") || ev.getPropertyName().equals(""to-view-id"")) {
  final String oldName=FacesModelUtility.getViewIdFiltiered((String)ev.getOldValue());
  final String newName=FacesModelUtility.getViewIdFiltiered((String)ev.getNewValue());
  final Object source=ev.getSource();
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      if (pfc.getView() == null) {
        return;
      }
      replaceFromViewIdToViewIdEventHandler(ev,source,oldName,newName);
    }
  }
);
}
 else if (ev.getPropertyName().equals(""from-outcome"")) {
  final String oldName=(String)ev.getOldValue();
  final String newName=(String)ev.getNewValue();
  final NavigationCase navCase=(NavigationCase)ev.getSource();
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      if (pfc.getView() == null) {
        return;
      }
      replaceFromOutcomeEventHandler(navCase,oldName,newName);
    }
  }
);
}
 else {
  setupGraphInAWTThread(ev);
}
",0,54,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
33,} else {,"if (pageInfo != null) {
  pageInfo.decrementPendingTX();
}
 else {
}
",0,0,0,,
34,paramTypes[i] == Object[].class && params[i].getClass() == Object[].class) {,"if (paramTypes[i].isAssignableFrom(params[i].getClass()) || paramTypes[i] == Long.TYPE && params[i].getClass() == Integer.class || paramTypes[i] == Double.TYPE && params[i].getClass() == Integer.class || paramTypes[i] == Long.TYPE && params[i].getClass() == Long.class || paramTypes[i] == Double.TYPE && params[i].getClass() == Double.class || paramTypes[i] == Integer.TYPE && params[i].getClass() == Integer.class || paramTypes[i] == Boolean.TYPE && params[i].getClass() == Boolean.class || paramTypes[i] == Object[].class && params[i].getClass() == Object[].class) {
}
 else {
  match=false;
  break;
}
",0,0,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, ArrayType-elementType, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
Dimension(ArrayType-dimensions, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(SimpleType-name, ArrayType-elementType, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, ),
Dimension(ArrayType-dimensions, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, ),
"
35,} else {,"if (deleteTempQueue) {
  replyTo.delete();
}
 else {
}
",0,0,0,,
36,} else {,"if (inflightMessageCount == 0 || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) {
  assertEquals(""connected to master"",master.getBrokerName(),((ActiveMQConnection)sendConnection).getBrokerName());
}
 else {
}
",0,0,0,,
37,} else {,"if (s != null) {
  super.doOpenCompletion();
}
 else {
}
",0,0,0,,
38,} else {,"if (t != null) {
  super.doOpenCompletion();
}
 else {
}
",0,0,0,,
39,} else {,"if (!isSharedStore()) {
  configuration.setBindingsDirectory(getBindingsDir(i,false));
  configuration.setJournalDirectory(getJournalDir(i,false));
  configuration.setPagingDirectory(getPageDir(i,false));
  configuration.setLargeMessagesDirectory(getLargeMessagesDir(i,false));
}
 else {
}
",0,0,0,,
40,} else {,"if (!isSharedStore()) {
  configuration.setBindingsDirectory(getBindingsDir(i,true));
  configuration.setJournalDirectory(getJournalDir(i,true));
  configuration.setPagingDirectory(getPageDir(i,true));
  configuration.setLargeMessagesDirectory(getLargeMessagesDir(i,true));
}
 else {
}
",0,0,0,,
41,} else {,"if (svc.getServiceComponents().containsKey(componentName)) {
  ServiceComponent svcComp=svc.getServiceComponent(componentName);
  ServiceComponentHost scHost=svcComp.getServiceComponentHost(hostname);
  if (status.getStatus() != null) {
    org.apache.ambari.server.state.State prevState=scHost.getState();
    org.apache.ambari.server.state.State liveState=org.apache.ambari.server.state.State.valueOf(org.apache.ambari.server.state.State.class,status.getStatus());
    if (prevState.equals(org.apache.ambari.server.state.State.INSTALLED) || prevState.equals(org.apache.ambari.server.state.State.STARTED) || prevState.equals(org.apache.ambari.server.state.State.UNKNOWN)) {
      scHost.setState(liveState);
      if (!prevState.equals(liveState)) {
        LOG.info(""State of service component "" + componentName + "" of service ""+ status.getServiceName()+ "" of cluster ""+ status.getClusterId()+ "" has changed from ""+ prevState+ "" to ""+ liveState+ "" at host ""+ hostname+ "" according to STATUS_COMMAND report"");
      }
    }
  }
  Map<String,Object> extra=status.getExtra();
  if (null != extra && !extra.isEmpty()) {
    try {
      if (extra.containsKey(""processes"")) {
        @SuppressWarnings(""unchecked"") List<Map<String,String>> list=(List<Map<String,String>>)extra.get(""processes"");
        scHost.setProcesses(list);
      }
    }
 catch (    Exception e) {
      LOG.error(""Could not access extra JSON for "" + scHost.getServiceComponentName() + "" from ""+ scHost.getHostName()+ "": ""+ status.getExtra()+ "" (""+ e.getMessage()+ "")"");
    }
  }
  heartbeatMonitor.getAgentRequests().setExecutionDetailsRequest(hostname,componentName,status.getSendExecCmdDet());
}
 else {
}
",0,0,0,,
42,} else {,"if (ShellCommandUtil.LINUX) {
  result=ShellCommandUtil.runCommand(new String[]{""echo"",""dummy""});
  Assert.assertEquals(0,result.getExitCode());
  Assert.assertEquals(""dummy\n"",result.getStdout());
  Assert.assertEquals("""",result.getStderr());
  Assert.assertTrue(result.isSuccessful());
  result=ShellCommandUtil.runCommand(new String[]{""false""});
  Assert.assertEquals(1,result.getExitCode());
  Assert.assertFalse(result.isSuccessful());
}
 else {
}
",0,0,0,,
43,} else {,"if (job.getStatus().equals(PigJob.PIG_JOB_STATE_SUBMIT_FAILED) || job.getStatus().equals(PigJob.PIG_JOB_STATE_COMPLETED) || job.getStatus().equals(PigJob.PIG_JOB_STATE_FAILED)|| job.getStatus().equals(PigJob.PIG_JOB_STATE_KILLED)) {
  LOG.debug(""Job finished. Polling canceled"");
  thisFuture.cancel(false);
}
 else {
}
",0,0,0,,
44,} else {,"if (firstFilter != null) {
  try {
    firstFilter.apply(line,marker);
  }
 catch (  Exception e) {
    logger.error(""Error during filter apply: {}"",e);
  }
}
 else {
}
",0,0,0,,
45,if (i + 1 < str.length() && (str.charAt(i + 1) == '%' || str.charAt(i + 1) == '_')) {,"if (i + 1 < str.length() && (str.charAt(i + 1) == '%' || str.charAt(i + 1) == '_')) {
}
 else {
  sb.append('\\');
}
",0,18,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
46,} else if (javaType.isPrimitive() && javaClass != null && JavaUtils.getWrapperClass(javaType) == javaClass) {,"if (javaType.isPrimitive() && javaClass != null && JavaUtils.getWrapperClass(javaType) == javaClass) {
}
 else {
  if (!(javaType.isArray() && xmlType != null && Constants.isSchemaXSD(xmlType.getNamespaceURI()))) {
    writeXMLType=actualXMLType.value;
  }
}
",0,12,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
47,} else {,"if (filesetManifestConfig != null && !""skip"".equals(filesetManifestConfig.getValue())) {
  logWhenWriting(""Found manifest to merge in file "" + file,Project.MSG_VERBOSE);
  try {
    Manifest newManifest;
    if (is == null) {
      newManifest=getManifest(file);
    }
 else {
      try (InputStreamReader isr=new InputStreamReader(is,getManifestCharset())){
        newManifest=getManifest(isr);
      }
     }
    if (filesetManifest == null) {
      filesetManifest=newManifest;
    }
 else {
      filesetManifest.merge(newManifest,false,mergeClassPaths);
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new BuildException(""Unsupported encoding while reading "" + ""manifest: "" + e.getMessage(),e);
  }
catch (  ManifestException e) {
    log(""Manifest in file "" + file + "" is invalid: ""+ e.getMessage(),Project.MSG_ERR);
    throw new BuildException(""Invalid Manifest"",e,getLocation());
  }
}
 else {
}
",0,0,0,,
48,} else {,"if (bootclasspath == null || bootclasspath.isEmpty()) {
  includeJavaRuntime=true;
}
 else {
}
",0,0,0,,
49,if (junit.framework.TestCase.class.isAssignableFrom(testClass)) {,"if (junit.framework.TestCase.class.isAssignableFrom(testClass)) {
}
 else {
  try {
    Class.forName(""java.lang.annotation.Annotation"");
    junit4TestAdapterCacheClass=Class.forName(""org.apache.tools.ant.taskdefs.optional.junit.CustomJUnit4TestAdapterCache"");
    if (loader == null) {
      junit4TestAdapterClass=Class.forName(JUNIT_4_TEST_ADAPTER);
      if (testMethodsSpecified) {
        junit4TestAdapterClass=Class.forName(""org.apache.tools.ant.taskdefs.optional.junit.JUnit4TestMethodAdapter"");
        useSingleMethodAdapter=true;
      }
    }
 else {
      junit4TestAdapterClass=Class.forName(JUNIT_4_TEST_ADAPTER,true,loader);
      if (testMethodsSpecified) {
        junit4TestAdapterClass=Class.forName(""org.apache.tools.ant.taskdefs.optional.junit.JUnit4TestMethodAdapter"",true,loader);
        useSingleMethodAdapter=true;
      }
    }
  }
 catch (  final ClassNotFoundException e) {
  }
}
",0,1,3,,"QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
50,} else if (!isRoot || node.getType().equals(TreeListNode.Type.CLOSED)) {,"if (!isRoot || node.getType().equals(TreeListNode.Type.CLOSED)) {
}
",0,4,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
51,} else {,"if (!data) {
  send(""500 5.5.1 Command unrecognized: \"""" + response + ""\""\r\n"");
  stop=true;
}
 else {
}
",0,0,0,,
52,"if (typeName.equals(""image-width"") || typeName.equals(""image-height"") || typeName.equals(""image-size"") || typeName.equals(""row-index"") || typeName.equals(""image-mime-type"")) {","if (typeName.equals(""image-width"") || typeName.equals(""image-height"") || typeName.equals(""image-size"")|| typeName.equals(""row-index"")|| typeName.equals(""image-mime-type"")) {
}
 else {
  statement.setNull(position,typeObject.intValue());
  return;
}
",0,10,15,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
53,} else {,"if (!resolvedBranches.containsKey(systemMrid)) {
  write("" branch=\"""" + systemMrid.getBranch() + ""\"""");
}
 else {
}
",0,0,0,,
54,} else {,"if (!model.containsKey(ivyTag.getName())) {
  List<IvyTag> list=new ArrayList<>();
  list.add(ivyTag);
  model.put(ivyTag.getName(),list);
  for (  IvyTag child : ivyTag.getChilds()) {
    addTag(child);
  }
}
 else {
}
",0,0,0,,
55,} else {,"if (addDialog.open() == Window.OK) {
  IvyDEsecurityHelper.addCredentialsToSecureStorage(currentSelection);
  IvyDEsecurityHelper.addCredentialsToIvyCredentialStorage(currentSelection);
  setupEditorGUI.init(IvyDEsecurityHelper.getCredentialsFromSecureStore());
}
 else {
}
",0,0,0,,
56,{,"if (searchFields.isExactSearch()) {
}
",0,0,0,,
57,{,"if (job instanceof AbstractJob) {
}
",0,0,0,,
58,} else {,"if (bundle.getHeaders().get(Constants.FRAGMENT_HOST) == null) {
  bundle.start(Bundle.START_ACTIVATION_POLICY);
}
 else {
}
",0,0,0,,
59,"if (id.startsWith(""blueprint"") && !(component instanceof PassThroughMetadataImpl)) {","if (id.startsWith(""blueprint"") && !(component instanceof PassThroughMetadataImpl)) {
}
",0,7,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
60,"if (args[0] == null || """".equals(args[0])) {","if (args[0] == null || """".equals(args[0])) {
}
 else if (FacadeUtils.isBaseType(paramType) && !inverse) {
  for (  String v : rdf_property) {
    final URI prop=connection.getValueFactory().createURI(v);
    connection.add(delegate,prop,createLiteral(args[0],loc),context);
  }
}
 else if (FacadeUtils.isValue(paramType) && !inverse) {
  for (  String v : rdf_property) {
    final URI prop=connection.getValueFactory().createURI(v);
    connection.add(delegate,prop,(Value)args[0],context);
  }
}
 else if (FacadeUtils.isResource(paramType) && inverse) {
  for (  String v : rdf_property) {
    final URI prop=connection.getValueFactory().createURI(v);
    connection.add((Resource)args[0],prop,delegate,context);
  }
}
 else if (FacadeUtils.isFacade(paramType) && !inverse) {
  for (  String v : rdf_property) {
    final URI prop=connection.getValueFactory().createURI(v);
    connection.add(delegate,prop,((Facade)args[0]).getDelegate(),context);
  }
}
 else if (FacadeUtils.isFacade(paramType) && inverse) {
  for (  String v : rdf_property) {
    final URI prop=connection.getValueFactory().createURI(v);
    connection.add(((Facade)args[0]).getDelegate(),prop,delegate,context);
  }
}
 else if (FacadeUtils.isCollection(paramType)) {
  for (  String v : rdf_property) {
    final Collection<?> c=(Collection<?>)args[0];
    final URI prop=connection.getValueFactory().createURI(v);
    for (    final Object o : c) {
      if (o == null) {
      }
 else       if (FacadeUtils.isBaseType(o.getClass()) && !inverse) {
        connection.add(delegate,prop,createLiteral(o,loc),context);
      }
 else       if (FacadeUtils.isFacade(o.getClass()) && !inverse) {
        connection.add(delegate,prop,((Facade)o).getDelegate(),context);
      }
 else       if (FacadeUtils.isFacade(o.getClass()) && inverse) {
        connection.add(((Facade)o).getDelegate(),prop,delegate,context);
      }
 else       if (FacadeUtils.isValue(o.getClass()) && !inverse) {
        connection.add(delegate,prop,(Value)o,context);
      }
 else       if (FacadeUtils.isResource(o.getClass()) && inverse) {
        connection.add((Resource)o,prop,delegate,context);
      }
 else       if (inverse) {
        throw new IllegalArgumentException(""method "" + method.getName() + "": @RDFInverse not supported for parameter type ""+ paramType.getName());
      }
 else {
        throw new IllegalArgumentException(""the type "" + o.getClass().getName() + "" is not supported in collections"");
      }
    }
  }
}
 else if (inverse) {
  throw new IllegalArgumentException(""method "" + method.getName() + "": @RDFInverse not supported for parameter type ""+ paramType.getName());
}
 else {
  throw new IllegalArgumentException(""method "" + method.getName() + "": unsupported parameter type ""+ paramType.getName());
}
",0,6,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
61,{,"if (otherArgNull) {
}
 else if (otherArgClazz) {
}
 else {
  return false;
}
",0,0,0,,
62,{,"if (otherArgClazz) {
}
 else {
  return false;
}
",0,0,0,,
63,{,"if (thisArgClazz) {
}
 else {
  return false;
}
",0,0,0,,
64,{,"if (otherArgClass.equals(Class.class) || thisArgClass.equals(Class.class)) {
}
 else if (!(otherArgClass.isAssignableFrom(thisArgClass) || thisArgClass.isAssignableFrom(otherArgClass))) {
  return false;
}
",0,0,0,,
65,|| (optFuncExpr.getSourceVar(1) == null && optFuncExpr.getFieldType(1) != null)) {,"if ((optFuncExpr.getSourceVar(0) == null && optFuncExpr.getFieldType(0) != null) || (optFuncExpr.getSourceVar(1) == null && optFuncExpr.getFieldType(1) != null)) {
}
 else {
  return false;
}
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
66,} else {,"if (logRecord.getLSN() > maxDiskLastLsn && !index.isCurrentMutableComponentEmpty()) {
  redoFlush(index,logRecord);
  flushRedoDatasets.add(datasetId);
  redoCount++;
}
 else {
}
",0,0,0,,
67,} else {,"if (maxLsnBeforeFlush != null) {
  maxDiskLastLsn=maxLsnBeforeFlush;
  index=iInfo.getIndex();
  if (logRecord.getLSN() > maxDiskLastLsn && !index.isCurrentMutableComponentEmpty()) {
    redoFlush(index,logRecord);
    flushRedoDatasets.add(datasetId);
    redoCount++;
  }
 else {
  }
}
 else {
}
",0,0,0,,
68,} else {,"if (pis != null) {
  tupleParser.parse(pis,writer);
}
 else {
}
",0,0,0,,
69,"if (byteArrayEqualToString(data, dataStart + dataStringPointer, 2, AM_BYTEARRAY)) {","if (byteArrayEqualToString(data,dataStart + dataStringPointer,2,AM_BYTEARRAY)) {
}
 else if (byteArrayEqualToString(data,dataStart + dataStringPointer,2,PM_BYTEARRAY)) {
  hour+=12;
  if (hour == 24) {
    hour=0;
  }
}
 else {
  if (raiseParseDataError) {
    throw new AsterixTemporalTypeParseException(""Unexpected string for AM/PM marker "" + new String(data,dataStart + dataStringPointer,dataStart + dataStringPointer + 2,ENCODING));
  }
 else {
    return false;
  }
}
",0,0,6,,"SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
70,if (referencedChannels.contains(Integer.valueOf(cframe.id)) || cframe.refCount > 0) {,"if (referencedChannels.contains(Integer.valueOf(cframe.id)) || cframe.refCount > 0) {
}
 else {
  LOG.debug(""GC Channel: {}"",cframe);
  i.remove();
}
",0,31,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
71,} else {,"if (!conf.getUseNewMapper()) {
  ((org.apache.hadoop.mapred.Mapper)mapper).close();
}
 else {
}
",0,0,0,,
72,} else {,"if (existing != null && addElements(existing,def)) {
  typeDefStore.updateEnumDefByName(existing.getName(),existing);
  result.incrementMeticsCounter(""typedef:enum:update"");
}
 else {
}
",0,0,0,,
73,} else {,"if (classification.getValidityPeriods() != null) {
  String strValidityPeriods=AtlasJson.toJson(classification.getValidityPeriods());
  AtlasGraphUtilsV2.setEncodedProperty(traitInstanceVertex,CLASSIFICATION_VALIDITY_PERIODS_KEY,strValidityPeriods);
}
 else {
}
",0,0,0,,
74,if (this.contextStack.peek().equals(this.meta)) {,"if (this.contextStack.peek().equals(this.meta)) {
}
 else {
  if (about != null) {
    throw new SAXException(""Nested rdf:Description elements may not have an about property"");
  }
  startStructure();
}
",0,14,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, IfStatement-expression, ),
"
75,} else {,"if (maxEndWindowTimestamp >= lastMaxEndWindowTimestamp) {
  double tuplesProcessedPMSMA=0.0;
  double tuplesEmittedPMSMA=0.0;
  if (statCount != 0) {
    status.cpuNanosPMSMA.add(totalCpuTimeUsed,maxEndWindowTimestamp - lastMaxEndWindowTimestamp);
  }
  for (  PortStatus ps : status.inputPortStatusList.values()) {
    tuplesProcessedPMSMA+=ps.tuplesPMSMA.getAvg();
  }
  for (  PortStatus ps : status.outputPortStatusList.values()) {
    tuplesEmittedPMSMA+=ps.tuplesPMSMA.getAvg();
  }
  status.tuplesProcessedPSMA.set(Math.round(tuplesProcessedPMSMA * 1000));
  status.tuplesEmittedPSMA.set(Math.round(tuplesEmittedPMSMA * 1000));
}
 else {
}
",0,0,0,,
76,} else {,"if (pair.component instanceof Stream.MultiSinkCapableStream) {
  String sinks=pair.context.getSinkId();
  if (sinks == null) {
    logger.error(""mux sinks found connected at {} with sink id null"",sourceIdentifier);
  }
 else {
    String[] split=sinks.split(MuxStream.MULTI_SINK_ID_CONCAT_SEPARATOR);
    for (int i=split.length; i-- > 0; ) {
      ComponentContextPair<Stream,StreamContext> spair=streams.remove(split[i]);
      if (spair == null) {
        logger.error(""mux is missing the stream for sink {}"",split[i]);
      }
 else {
        if (activeStreams.remove(spair.component) != null) {
          spair.component.deactivate();
          eventBus.publish(new StreamDeactivationEvent(spair));
        }
        spair.component.teardown();
      }
    }
  }
}
 else {
}
",0,0,0,,
77,"if ((inputSegments[i].length() == 0) || (""."".equals(inputSegments[i]))) {","if ((inputSegments[i].length() == 0) || (""."".equals(inputSegments[i]))) {
}
 else if ("".."".equals(inputSegments[i])) {
  if (!outputSegments.isEmpty()) {
    outputSegments.pop();
  }
}
 else {
  outputSegments.push(inputSegments[i]);
}
",0,9,8,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
78,else {,"if (reader.isStartElement() && new javax.xml.namespace.QName(""http://ws.intalio.com/TimeService/"",""city"").equals(reader.getName())) {
  nillableValue=reader.getAttributeValue(""http://www.w3.org/2001/XMLSchema-instance"",""nil"");
  if (""true"".equals(nillableValue) || ""1"".equals(nillableValue)) {
    throw new org.apache.axis2.databinding.ADBException(""The element: "" + ""city"" + ""  cannot be null"");
  }
  java.lang.String content=reader.getElementText();
  object.setCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
  reader.next();
}
 else {
}
",0,0,0,,
79,else {,"if (reader.isStartElement() && new javax.xml.namespace.QName(""http://ws.intalio.com/TimeService/"",""getCityTimeResult"").equals(reader.getName())) {
  nillableValue=reader.getAttributeValue(""http://www.w3.org/2001/XMLSchema-instance"",""nil"");
  if (""true"".equals(nillableValue) || ""1"".equals(nillableValue)) {
    throw new org.apache.axis2.databinding.ADBException(""The element: "" + ""getCityTimeResult"" + ""  cannot be null"");
  }
  java.lang.String content=reader.getElementText();
  object.setGetCityTimeResult(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
  reader.next();
}
 else {
}
",0,0,0,,
80,else {,"if (reader.isStartElement() && new javax.xml.namespace.QName(""http://ws.intalio.com/TimeService/"",""getUTCTimeResult"").equals(reader.getName())) {
  nillableValue=reader.getAttributeValue(""http://www.w3.org/2001/XMLSchema-instance"",""nil"");
  if (""true"".equals(nillableValue) || ""1"".equals(nillableValue)) {
    throw new org.apache.axis2.databinding.ADBException(""The element: "" + ""getUTCTimeResult"" + ""  cannot be null"");
  }
  java.lang.String content=reader.getElementText();
  object.setGetUTCTimeResult(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
  reader.next();
}
 else {
}
",0,0,0,,
81,else {,"if (stack.length > 1) {
  methodName=stack[1].getMethodName();
}
 else {
}
",0,0,0,,
82,} else {,"if (TOLERABLE_SCHEDULE_DELAY == 0 || nextScheduleTime.getTime() < System.currentTimeMillis() + TOLERABLE_SCHEDULE_DELAY) {
  if (runnableDetails != null && runnable instanceof MapSerializableRunnable) {
    ((MapSerializableRunnable)runnable).restoreFromDetails(runnableDetails);
  }
  if (runnable instanceof ContextsAware) {
    ((ContextsAware)runnable).setContexts(_contexts);
  }
  if (!_shuttingDown && !terminated) {
    if (__log.isDebugEnabled()) {
      __log.debug(""Running CRON job: "" + runnable + "" for ""+ nextScheduleTime.getTime());
    }
    runnable.run();
  }
}
 else {
}
",0,0,0,,
83,&& ((OMessageVarType) faultType).getDocLitType().equals(c.getFaultVariable().getType())) {,"if (faultType instanceof OMessageVarType && ((OMessageVarType)faultType).getDocLitType() != null && ((OMessageVarType)faultType).getDocLitType().equals(c.getFaultVariable().getType())) {
}
 else {
  continue;
}
",0,4,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
84,&& !((OMessageVarType) c.getFaultVariable().getType()).getDocLitType().equals(faultType)) {,"if (faultType instanceof OElementVarType && ((OMessageVarType)c.getFaultVariable().getType()).getDocLitType() != null && !((OMessageVarType)c.getFaultVariable().getType()).getDocLitType().equals(faultType)) {
}
 else {
  continue;
}
",0,1,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, ),
"
85,if (faultType instanceof OElementVarType && faultType.equals(c.getFaultVariable().getType())) {,"if (faultType instanceof OElementVarType && faultType.equals(c.getFaultVariable().getType())) {
}
 else if (faultType instanceof OMessageVarType && ((OMessageVarType)faultType).getDocLitType() != null && ((OMessageVarType)faultType).getDocLitType().equals(c.getFaultVariable().getType())) {
}
 else {
  continue;
}
",0,11,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
86,} else {,"if (u.equals(uri)) {
  pfx=hint;
}
 else {
}
",0,0,0,,
87,if (Character.isUpperCase(key.charAt(i - 1)) || key.charAt(i-1)=='_') {,"if (Character.isUpperCase(key.charAt(i - 1)) || key.charAt(i - 1) == '_') {
}
 else {
  buf.append(key.substring(pos,i)).append("" "");
  pos=i;
}
",0,1,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
88,{,"if (maxResults != null) {
  request.setSize(maxResults);
}
 else {
}
",0,0,0,,
89,{,"if (tableQuery != null && tableQuery.label() != null) {
}
",0,0,0,,
90,{,"if (objectDesciptor instanceof ObjectDetailDescriptor) {
}
",0,0,0,,
91,{,"if (objectDesciptor instanceof ObjectDetailDescriptor) {
}
",0,0,0,,
92,{,"if (!concernClass.isInheritor(concernOfClass,true)) {
  String message=PolygeneResourceBundle.message(""concerns.annotation.declared.correctly.error.concern.class.does.not.extend.ConcernOf"",concernClass.getQualifiedName());
  RemoveInvalidConcernClassReferenceFix fix=new RemoveInvalidConcernClassReferenceFix(concernClassAnnotationValue,concernClassReference);
  ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(concernClassAnnotationValue,message,fix,GENERIC_ERROR_OR_WARNING);
  problems.add(problemDescriptor);
}
 else {
}
",0,0,0,,
93,{,"if (!sideEffectClass.isInheritor(sideEffectOfClass,true)) {
  String message=PolygeneResourceBundle.message(""side.effects.annotation.declared.correctly.error.side.effect.does.not.extend.side.effect.of"",sideEffectClass.getQualifiedName());
  RemoveAnnotationValueFix fix=new RemoveAnnotationValueFix(sideEffectClassReferenceWrapper,sideEffectClassReference);
  ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(sideEffectClassReferenceWrapper,message,fix,GENERIC_ERROR_OR_WARNING);
  problems.add(problemDescriptor);
}
 else {
}
",0,0,0,,
94,{,"if (result.hasNext()) {
  Order order=result.next();
}
 else {
}
",0,0,0,,
95,{,"if (exceptionHandling != null) {
  exceptionHandling.exceptionOccurred(""Exception in observer: "" + observer,meAsComposite,exception);
}
 else {
}
",0,0,0,,
96,{,"if (exceptionHandling != null) {
  exceptionHandling.exceptionOccurred(""Exception in observer: "" + observer,meAsComposite,e);
}
 else {
}
",0,0,0,,
97,} else {,"if (configureFunction.equals(""configure_druid"")) {
  addStatement(event,call(getStartFunction(config),getRole()));
}
 else {
}
",0,0,0,,
98,} else {,"if (configureFunction.equals(""configure_zookeeper"")) {
  addStatement(event,call(getStartFunction(config)));
}
 else {
}
",0,0,0,,
99,} else if (value.getClass() == String.class && !isTypeXml(type)) {,"if (value.getClass() == String.class && !isTypeXml(type)) {
}
 else {
  for (  Object anyValue : any) {
    if (anyValue instanceof JAXBElement) {
      value=anyValue;
      break;
    }
 else     if (anyValue instanceof XmlWrapper) {
      XmlWrapper xmlWrapper=(XmlWrapper)anyValue;
      if (xmlWrapper.getType() == null) {
        xmlWrapper.setType(type);
      }
      any.clear();
      any.add(0,xmlWrapper);
      return;
    }
  }
  any.set(0,new XmlWrapper(value,type));
}
",0,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
100,if ((getLeft().getOutput().getDataType() != DataType.MATRIX) || (getRight().getOutput().getDataType() != DataType.MATRIX)) {,"if ((getLeft().getOutput().getDataType() != DataType.MATRIX) || (getRight().getOutput().getDataType() != DataType.MATRIX)) {
}
",0,5,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
101,} else {,"if (constructorMetadata.getFormalParameters().size() == paramTypes.length) {
}
 else {
}
",0,0,0,,
102,} else {,"if (producesMT != null && !producesMT.isEmpty()) {
  reps=new HashSet<Representation>();
  for (  MediaType mt : producesMT) {
    Representation r=new Representation();
    r.setMediaType(mt.toString());
    reps.add(r);
  }
}
 else {
}
",0,0,0,,
103,&& (te.getRefType().getBaseType() != null))) {,"if ((te.getBaseType() != null) || te.isSimpleType() || ((te.getDimensions().length() > 0) && (te.getRefType().getBaseType() != null))) {
}
 else {
  if (!Utils.isFaultComplex(te)) {
    te.setDynamicVar(JavaGeneratorFactory.COMPLEX_TYPE_FAULT,Boolean.TRUE);
    if (elementTE != null) {
      te.setDynamicVar(JavaGeneratorFactory.COMPLEX_TYPE_FAULT,Boolean.TRUE);
    }
    HashSet derivedSet=org.apache.axis.wsdl.symbolTable.Utils.getDerivedTypes(te,symbolTable);
    Iterator derivedI=derivedSet.iterator();
    while (derivedI.hasNext()) {
      TypeEntry derivedTE=(TypeEntry)derivedI.next();
      derivedTE.setDynamicVar(JavaGeneratorFactory.COMPLEX_TYPE_FAULT,Boolean.TRUE);
    }
    TypeEntry base=SchemaUtils.getComplexElementExtensionBase(te.getNode(),symbolTable);
    while (base != null) {
      base.setDynamicVar(JavaGeneratorFactory.COMPLEX_TYPE_FAULT,Boolean.TRUE);
      base=SchemaUtils.getComplexElementExtensionBase(base.getNode(),symbolTable);
    }
  }
  exceptionClassName=te.getName();
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
104,} else {,"if (topHandler != null) {
  topHandler.onEndChild(namespace,localName,this);
}
 else {
}
",0,0,0,,
105,} else {,"if (localName.equals(""value"")) {
  dt=new DeserializerTarget(this,VALHINT);
}
 else {
}
",0,0,0,,
106,} else {,"if (rc != null) {
  returnCode=rc.intValue();
}
 else {
}
",0,0,0,,
107,else {,"if (loop + 1 < args.length && args[loop + 1] != null) {
  if (args[loop + 1].charAt(0) != '-') {
    value=args[loop + 1];
    args[loop + 1]=null;
  }
}
 else {
}
",0,0,0,,
108,"if (""main"".equals(stackTraceElements[frame0].getMethodName())) {","if (""main"".equals(stackTraceElements[frame0].getMethodName())) {
}
",0,16,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
109,} else {,"if (o != null) {
  if (o instanceof Method) {
    return (Method)o;
  }
 else {
    return null;
  }
}
 else {
}
",0,0,0,,
110,} else {,"if (methods != null) {
  Object o=methods.get(key);
  if (o != null) {
    if (o instanceof Method) {
      return (Method)o;
    }
 else {
      return null;
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
111,"} else if(service != null && isPresent((String) service.getOption(""schemaUnqualified""), namespaceURI)){","if (service != null && isPresent((String)service.getOption(""schemaUnqualified""),namespaceURI)) {
}
 else if ((serviceDesc.getStyle() == Style.DOCUMENT) || (serviceDesc.getStyle() == Style.WRAPPED)) {
  schemaElem.setAttribute(""elementFormDefault"",""qualified"");
}
",0,8,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
112,} else {,"if (null == qname) {
  qname=new QName(namespace,localName);
  ln2qn.put(localName,qname);
}
 else {
}
",0,0,0,,
113,if ((p.getX() == 1) || (p.getX() == 3)) {,"if ((p.getX() == 1) || (p.getX() == 3)) {
}
 else {
  fail(ASSERTION_FAILED,""Extent of class "" + PCPoint.class.getName() + "" includes unexpected instance, p.getX():""+ p.getX());
}
",0,3,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
114,} else {,"if (socket == null) {
  try {
    socket=new Socket(codehost,port);
    out=new ObjectOutputStream(socket.getOutputStream());
    out.flush();
    in=new ObjectInputStream(socket.getInputStream());
    new Thread(this).start();
  }
 catch (  Exception e) {
    System.out.println(""Exception! "" + e.toString());
    e.printStackTrace();
    setErrorStatus(STATUS_NOCONNECT);
    socket=null;
  }
}
 else {
}
",0,0,0,,
115,} else {,"if (socket != null) {
  if (out != null) {
    try {
      out.close();
    }
 catch (    IOException ioe) {
    }
    out=null;
  }
  if (in != null) {
    try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    in=null;
  }
  if (socket != null) {
    try {
      socket.close();
    }
 catch (    IOException ioe) {
    }
    socket=null;
  }
}
 else {
}
",0,0,0,,
116,} else {,"if (socket == null) {
  try {
    socket=new Socket(codehost,port);
    out=new ObjectOutputStream(socket.getOutputStream());
    out.flush();
    in=new ObjectInputStream(socket.getInputStream());
    new Thread(this).start();
  }
 catch (  Exception e) {
    e.printStackTrace();
    setErrorStatus(STATUS_NOCONNECT);
    socket=null;
  }
}
 else {
}
",0,0,0,,
117,} else {,"if (socket != null) {
  if (out != null) {
    try {
      out.close();
    }
 catch (    IOException ioe) {
    }
    out=null;
  }
  if (in != null) {
    try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    in=null;
  }
  if (socket != null) {
    try {
      socket.close();
    }
 catch (    IOException ioe) {
    }
    socket=null;
  }
}
 else {
}
",0,0,0,,
118,if ( this.endpoints.remove(reference.getProperty(Constants.SERVICE_ID)) != null ) {,"if (this.endpoints.remove(reference.getProperty(Constants.SERVICE_ID)) != null) {
}
",0,2,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
119,} else {,"if (att.getWireName() != null) {
  if (baseSchemaTypeMap.containsKey(schemaTypeName)) {
    metainf.registerMapping(att.getWireName(),schemaTypeName,baseSchemaTypeMap.get(schemaTypeName).toString(),SchemaConstants.ATTRIBUTE_TYPE);
    String use=att.getUse().toString();
    if (USE_NONE.equals(use) || USE_OPTIONAL.equals(use)) {
      metainf.addtStatus(att.getWireName(),SchemaConstants.OPTIONAL_TYPE);
    }
    String className=findClassName(schemaTypeName,false);
    att.addMetaInfo(SchemaConstants.SchemaCompilerInfoHolder.CLASSNAME_KEY,className);
    if (att.getDefaultValue() != null) {
      metainf.registerDefaultValue(att.getWireName(),att.getDefaultValue());
    }
    if (att.getFixedValue() != null) {
      metainf.registerDefaultValue(att.getWireName(),att.getFixedValue());
      metainf.registerFixedQName(att.getWireName());
    }
  }
 else {
    XmlSchema resolvedSchema=getParentSchema(parentSchema,schemaTypeName,COMPONENT_TYPE);
    if (resolvedSchema == null) {
      throw new SchemaCompilationException(""can not find the type "" + schemaTypeName + "" from the parent schema ""+ parentSchema.getTargetNamespace());
    }
 else {
      XmlSchemaType type=resolvedSchema.getTypeByName(schemaTypeName);
      if (type instanceof XmlSchemaSimpleType) {
        XmlSchemaSimpleType simpleType=(XmlSchemaSimpleType)type;
        if (simpleType != null) {
          if (!isAlreadyProcessed(schemaTypeName)) {
            processSimpleSchemaType(simpleType,null,resolvedSchema,null);
          }
          metainf.registerMapping(att.getWireName(),schemaTypeName,processedTypemap.get(schemaTypeName).toString(),SchemaConstants.ATTRIBUTE_TYPE);
          String use=att.getUse().toString();
          if (USE_NONE.equals(use) || USE_OPTIONAL.equals(use)) {
            metainf.addtStatus(att.getWireName(),SchemaConstants.OPTIONAL_TYPE);
          }
        }
      }
    }
  }
}
 else {
}
",0,0,0,,
120,} else {,"if (item instanceof XmlSchemaGroupRef) {
  XmlSchemaGroupRef xmlSchemaGroupRef=(XmlSchemaGroupRef)item;
  QName groupQName=xmlSchemaGroupRef.getRefName();
  if (groupQName != null) {
    if (!processedGroupTypeMap.containsKey(groupQName)) {
      XmlSchema resolvedParentSchema=getParentSchema(parentSchema,groupQName,COMPONENT_GROUP);
      if (resolvedParentSchema == null) {
        throw new SchemaCompilationException(""Can not find the group with the qname"" + groupQName + "" from the parent schema ""+ parentSchema.getTargetNamespace());
      }
 else {
        XmlSchemaGroup xmlSchemaGroup=(XmlSchemaGroup)resolvedParentSchema.getGroups().get(groupQName);
        if (xmlSchemaGroup != null) {
          processGroup(xmlSchemaGroup,groupQName,resolvedParentSchema);
        }
      }
    }
    Boolean isArray=xmlSchemaGroupRef.getMaxOccurs() > 1 ? Boolean.TRUE : Boolean.FALSE;
    processedElementArrayStatusMap.put(item,isArray);
    particleQNameMap.put(item,groupQName);
    if (order) {
      elementOrderMap.put(item,new Integer(sequenceCounter));
    }
  }
 else {
    throw new SchemaCompilationException(""Referenced name is null"");
  }
}
 else {
}
",0,0,0,,
121,else {,"if (Final.WSA_NAMESPACE.equals(namespace)) {
  Iterator headerBlocks=header.getChildElements();
  while (headerBlocks.hasNext()) {
    OMElement headerElement=(OMElement)headerBlocks.next();
    OMAttribute isRefParamAttr=headerElement.getAttribute(new QName(namespace,""IsReferenceParameter""));
    if (LoggingControl.debugLoggingAllowed && log.isTraceEnabled()) {
      log.trace(""extractToEprReferenceParameters: Checking header: "" + headerElement.getQName());
    }
    if (isRefParamAttr != null && ""true"".equals(isRefParamAttr.getAttributeValue())) {
      toEPR.addReferenceParameter(headerElement);
      if (LoggingControl.debugLoggingAllowed && log.isTraceEnabled()) {
        log.trace(""extractToEprReferenceParameters: Header: "" + headerElement.getQName() + "" has IsReferenceParameter attribute. Adding to toEPR."");
      }
    }
  }
}
 else {
}
",0,0,0,,
122,} else {,"if (TribesUtil.toAxis2Member(member).isActive()) {
  if (!TribesUtil.toAxis2Member(getLocalMember(true)).isActive()) {
  }
 else {
    Member[] members=getMembers();
    for (    Member aMember : members) {
      if (!TribesUtil.toAxis2Member(member).isActive()) {
      }
    }
  }
}
 else {
}
",0,0,0,,
123,} else {,"if (o instanceof Document) {
  root.appendChild(doc.importNode(((Document)o).getDocumentElement(),true));
}
 else {
}
",0,0,0,,
124,else {,"if (outbound) {
  Map<QName,List<String>> requestHeaders=(Map<QName,List<String>>)messagecontext.get(Constants.JAXWS_OUTBOUND_SOAP_HEADERS);
  List<String> list1=requestHeaders.get(TestHeaders.ACOH1_HEADER_QNAME);
  try {
    messagecontext.getMessage().getSOAPHeader();
  }
 catch (  SOAPException e) {
    throw new ProtocolException(e);
  }
}
 else {
}
",0,0,0,,
125,{,"if (success) {
  registerUnderstoodHeaders(request,ic.getHandlers());
  prepareRequest(request);
  resp=doInvokeAsync(request);
}
 else {
}
",0,0,0,,
126,} else {,"if (schemaType != null) {
  processSchemaType(schemaType,mainXmlNode,schemaOfType);
}
 else {
}
",0,0,0,,
127,} else {,"if (tempObj != null) {
  log.debug(""JSON MessageReceiver found JSON stream, proceeding with the JSON request"");
  boolean isJSON=Boolean.valueOf(tempObj.toString());
  Object o=msgContext.getProperty(JsonConstant.GSON_XML_STREAM_READER);
  if (o != null) {
    GsonXMLStreamReader gsonXMLStreamReader=(GsonXMLStreamReader)o;
    QName elementQname=msgContext.getAxisOperation().getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE).getElementQName();
    List<XmlSchema> schemas=msgContext.getAxisService().getSchema();
    gsonXMLStreamReader.initXmlStreamReader(elementQname,schemas,msgContext.getConfigurationContext());
    OMXMLParserWrapper stAXOMBuilder=OMXMLBuilderFactory.createStAXOMBuilder(gsonXMLStreamReader);
    OMElement omElement=stAXOMBuilder.getDocumentElement();
    log.debug(""GsonXMLStreamReader found elementQname: "" + elementQname);
    msgContext.getEnvelope().getBody().addChild(omElement);
  }
 else {
    log.error(""GsonXMLStreamReader is null"");
    throw new AxisFault(""GsonXMLStreamReader should not be null"");
  }
}
 else {
}
",0,0,0,,
128,} else {,"if (tempObj != null) {
  boolean isJSON=Boolean.valueOf(tempObj.toString());
  Object o=msgContext.getProperty(JsonConstant.MOSHI_XML_STREAM_READER);
  if (o != null) {
    MoshiXMLStreamReader moshiXMLStreamReader=(MoshiXMLStreamReader)o;
    QName elementQname=msgContext.getAxisOperation().getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE).getElementQName();
    List<XmlSchema> schemas=msgContext.getAxisService().getSchema();
    moshiXMLStreamReader.initXmlStreamReader(elementQname,schemas,msgContext.getConfigurationContext());
    OMXMLParserWrapper stAXOMBuilder=OMXMLBuilderFactory.createStAXOMBuilder(moshiXMLStreamReader);
    OMElement omElement=stAXOMBuilder.getDocumentElement();
    msgContext.getEnvelope().getBody().addChild(omElement);
  }
 else {
    log.error(""MoshiXMLStreamReader is null"");
    throw new AxisFault(""MoshiXMLStreamReader should not be null"");
  }
}
 else {
}
",0,0,0,,
129,} else {,"if (""out"".equals(identifiers[2])) {
  AxisBindingMessage bindingOutMessage=(AxisBindingMessage)bindingOperation.getChild(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
  bindingOutMessage.getPolicySubject().attachPolicyComponents(policyComponents);
}
 else {
}
",0,0,0,,
130,} else {,"if (Collection.class.isAssignableFrom((Class)((ParameterizedType)parameterType).getRawType())) {
  generateSchemaForCollection(entrySequence,parameterType,elementName);
}
 else {
}
",0,0,0,,
131,} else {,"if ((loop + 1 < args.length) && (args[loop + 1] != null)) {
  if (args[loop + 1].charAt(0) != '-') {
    value=args[loop + 1];
    args[loop + 1]=null;
  }
}
 else {
}
",0,0,0,,
132,} else {,"if (annotation != null && annotation.name().length() > 0) {
  name=annotation.name();
}
 else {
}
",0,0,0,,
133,}else{,"if (annotation != null && annotation.messageName().length() > 0) {
  messageName=annotation.messageName();
}
 else {
}
",0,0,0,,
134,} else {,"if (annotation != null && annotation.targetNamespace().length() > 0) {
  targetNamespace=annotation.targetNamespace();
}
 else {
}
",0,0,0,,
135,} else {,"if (endpointDescription == null) {
  if (serviceDelegateKey == null) {
    throw ExceptionFactory.makeWebServiceException(Messages.getMessage(""serviceDescriptionImplAddPortErr""));
  }
  endpointDescription=getDynamicEndpointDescriptionImpl(sei,portQName,bindingId,endpointAddress);
  addDynamicEndpointDescriptionImpl(endpointDescription,serviceDelegateKey);
}
 else {
}
",0,0,0,,
136,} else {,"if (cc != null) {
  String parm=(String)cc.getAxisConfiguration().getParameterValue(""reduceWSDLMemoryCache"");
}
 else {
}
",0,0,0,,
137,} else {,"if (!found1) {
  found1=true;
}
 else {
}
",0,0,0,,
138,} else {,"if (!found2) {
  found2=true;
}
 else {
}
",0,0,0,,
139,} else {,"if (!validateReplyMessage(replymsg,1)) {
}
 else {
}
",0,0,0,,
140,} else {,"if (!foundHeader1 || !foundHeader2 || !foundHeader3|| !foundHeader4) {
  pass=false;
}
 else {
}
",0,0,0,,
141,} else {,"if (!foundChild1 || !foundChild2) {
  pass=false;
}
 else {
}
",0,0,0,,
142,} else {,"if (socket == null) {
  try {
    socket=new Socket(codehost,port);
    out=new ObjectOutputStream(socket.getOutputStream());
    out.flush();
    in=new ObjectInputStream(socket.getInputStream());
    new Thread(this).start();
  }
 catch (  Exception e) {
    System.out.println(""Exception! "" + e.toString());
    e.printStackTrace();
    setErrorStatus(STATUS_NOCONNECT);
    socket=null;
  }
}
 else {
}
",0,0,0,,
143,} else {,"if (socket != null) {
  if (out != null) {
    try {
      out.close();
    }
 catch (    IOException ioe) {
    }
    out=null;
  }
  if (in != null) {
    try {
      in.close();
    }
 catch (    IOException ioe) {
    }
    in=null;
  }
  if (socket != null) {
    try {
      socket.close();
    }
 catch (    IOException ioe) {
    }
    socket=null;
  }
}
 else {
}
",0,0,0,,
144,}else{,"if (className.endsWith(""."")) {
  updateStatus(CodegenWizardPlugin.getResourceString(""page4.error.ClassNameNotTerminated""));
}
 else {
}
",0,0,0,,
145,} else {,"if (restoredFromPreviousSettings) {
  handleFileNameModification();
  handleLocationModification();
}
 else {
}
",0,0,0,,
146,} else {,"if (!ports.isEmpty()) {
  cmbPortName.removeAll();
  for (int i=0; i < ports.size(); i++) {
    cmbPortName.addItem(ports.get(i).toString());
  }
  cmbPortName.setSelectedIndex(0);
}
 else {
}
",0,0,0,,
147,} else {,"if (sep != -1) {
  h.put(token.substring(0,sep),token.substring(sep + 1));
}
 else {
}
",0,0,0,,
148,}else{,"if (message.trim().startsWith(""getOperations"")) {
  response=prepareOperationList(msgCtx,message);
}
 else {
}
",0,0,0,,
149,"} else if (System.getProperty(""java.vendor"").equals(""IBM Corporation"") && (jar.equals(""bcel-5.2.jar"") || jar.equals(""jaka rta-regexp-1.4.jar"") || jar.equals(""xalan-2.7.0.jar"") || jar.equals(""xml-apis-1.0.b2.jar""))) {","if (System.getProperty(""java.vendor"").equals(""IBM Corporation"") && (jar.equals(""bcel-5.2.jar"") || jar.equals(""jaka rta-regexp-1.4.jar"") || jar.equals(""xalan-2.7.0.jar"")|| jar.equals(""xml-apis-1.0.b2.jar""))) {
}
 else {
  badJars.add(jar);
}
",0,2,17,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
150,} else {,"if (parameter != null) {
  CompletionCallback callback=(CompletionCallback)parameter.getValue();
  callback.setStatus(Status.CoordinatorStatus.STATUS_COMMITTING);
  callback.setComplete(true);
}
 else {
}
",0,0,0,,
151,} else {,"if (parameter != null) {
  CompletionCallback callback=(CompletionCallback)parameter.getValue();
  callback.setStatus(Status.CoordinatorStatus.STATUS_ABORTING);
  callback.setComplete(true);
}
 else {
}
",0,0,0,,
152,} else {,"if (SPConstants.LAYOUT_LAX.equals(value) || SPConstants.LAYOUT_STRICT.equals(value) || SPConstants.LAYOUT_LAX_TIMESTAMP_FIRST.equals(value)|| SPConstants.LAYOUT_LAX_TIMESTAMP_LAST.equals(value)) {
  this.value=value;
}
 else {
}
",0,0,0,,
153,} else {,"if (SPConstants.ENCRYPT_BEFORE_SIGNING.equals(protectionOrder) || SPConstants.SIGN_BEFORE_ENCRYPTING.equals(protectionOrder)) {
  this.protectionOrder=protectionOrder;
}
 else {
}
",0,0,0,,
154,} else {,"if (repo != null) {
  CLIENT_REPO=repo;
}
 else {
}
",0,0,0,,
155,} else {,"if (nillable) {
  OMNamespace xsi=soapFactory.createOMNamespace(Constants.URI_DEFAULT_SCHEMA_XSI,Constants.NS_PREFIX_SCHEMA_XSI);
  OMAttribute omAttribute=soapFactory.createOMAttribute(""nil"",xsi,""true"");
  soapFactory.createOMElement(name,ns,bodyFirstChild).addAttribute(omAttribute);
}
 else {
}
",0,0,0,,
156,} else {,"if (i < actual.size()) {
  Assert.fail(String.format(""%s: %s has %d more items after matching all %d from %s. First 5: %s"",message,actualLabel,actual.size() - expected.size(),expected.size(),expectedLabel,actual.subList(expected.size(),Math.min(actual.size(),expected.size() + 5))));
}
 else {
}
",0,0,0,,
157,} else {,"if (isPointDelete(m)) {
  Key key=m.getKeySet().getKeys().iterator().next();
  encodeKey(orderedCode,tableName,key);
}
 else {
}
",0,0,0,,
158,} else {,"if (ledgerData != null) {
  LedgerData newLedgerData=LedgerData.newBuilder(ledgerData).setExplicitLac(ByteString.copyFrom(lac.nioBuffer())).build();
  if (ledgers.put(ledgerId,newLedgerData) == null) {
    return;
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""Set explicitLac on ledger {}"",ledgerId);
    }
  }
  pendingLedgersUpdates.add(new SimpleEntry<Long,LedgerData>(ledgerId,newLedgerData));
}
 else {
}
",0,0,0,,
159,} else {,"if (!cacheIndexes.get(i).isEmpty()) {
  size+=segmentSize;
}
 else {
}
",0,0,0,,
160,} else {,"if (key.equals(""processor"")) {
  cpuId=Integer.parseInt(value);
}
 else {
}
",0,0,0,,
161,if (Boolean.TRUE.equals(sensors().get(SERVICE_UP))) {,"if (Boolean.TRUE.equals(sensors().get(SERVICE_UP))) {
}
",0,9,5,,"QualifiedName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
162,} else {,"if (Boolean.TRUE.equals(entity.getConfig(EXEC_SSH_ON_START))) {
  super.install();
}
 else {
}
",0,0,0,,
163,} else {,"if (Boolean.TRUE.equals(entity.getConfig(EXEC_SSH_ON_START))) {
  super.customize();
}
 else {
}
",0,0,0,,
164,} else {,"if (Boolean.TRUE.equals(entity.getConfig(EXEC_SSH_ON_START))) {
  super.launch();
}
 else {
}
",0,0,0,,
165,} else {,"if (extension.matches("".AR"")) {
  result=result.substring(0,result.length() - 4);
  if (result.equalsIgnoreCase(""/ROOT""))   result=""/"";
}
 else {
}
",0,0,0,,
166,"if (unwrapped instanceof IllegalStateException && unwrapped.getMessage() != null && (unwrapped.getMessage().contains(""is not Startable""))) {","if (unwrapped instanceof IllegalStateException && unwrapped.getMessage() != null && (unwrapped.getMessage().contains(""is not Startable""))) {
}
 else {
  throw e;
}
",0,11,9,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
167,} else {,"if (unusedBagNames.remove(k)) {
  Object transformed=new SpecialFlagsTransformer(loader,encounteredRegisteredTypeIds).apply(bag.getStringKey(k));
  transformed=convertConfig(Maybe.of(transformed),TypeToken.of(Object.class)).get();
  spec.configure(ConfigKeys.newConfigKey(Object.class,k),transformed);
  keyNamesUsed.add(k);
}
 else {
}
",0,0,0,,
168,} else {,"if (planData.toString().contains(""brooklyn.catalog"")) {
  message=""CAMP blueprint for type definition looks like a catalog file"";
}
 else {
}
",0,0,0,,
169,} else {,"if (entity() != null && entity().getApplication() != null) {
  Set<Entity> toVisit=MutableSet.of(entity().getApplication()), visited=MutableSet.of(entity().getApplication());
  while (!toVisit.isEmpty()) {
    Set<Entity> visiting=MutableSet.copyOf(toVisit);
    toVisit.clear();
    visiting.forEach(e -> {
      e.getChildren().forEach(ec -> {
        if (visited.add(ec))         toVisit.add(ec);
      }
);
    }
);
  }
  entitiesToSearch=visited;
}
 else {
}
",0,0,0,,
170,} else {,"if (required) {
  throw new IllegalStateException(""Catalog BOM must define bundle name and version or include version as part of the id '"" + bundle + ""' (eg '""+ bundle+ "":1.0')"");
}
 else {
}
",0,0,0,,
171,if (format==null && (t instanceof Map || t instanceof Collection)) {,"if (format == null && (t instanceof Map || t instanceof Collection)) {
}
 else {
  catalogItemType=CatalogItemType.BEAN;
}
",0,11,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
172,} else {,"if (specError == null) {
  throw new IllegalStateException(""Guesser resolved but TypeRegistry couldn't create"");
}
 else {
}
",0,0,0,,
173,} else {,"if (maybeValue.isPresent()) {
  ReferenceWithError<?> validation=validateValue((ConfigKey<Object>)configKey,maybeValue.get());
  if (validation.hasError()) {
    violating.put(configKey,validation.getError());
  }
}
 else {
}
",0,0,0,,
174,}  else {,"if (m1id != null) {
  primarilySame=true;
}
 else {
}
",0,0,0,,
175,} else {,"if (mode.wasNotLoaded()) {
  return false;
}
 else {
}
",0,0,0,,
176,} else {,"if (isInitialManagementContextReal()) {
  initialManagementContext.terminate();
}
 else {
}
",0,0,0,,
177,} else {,"if (catalogItemId != null) {
  String transformedCatalogItemId=null;
  Maybe<RegisteredType> contextRegisteredType=managementContext.getTypeRegistry().getMaybe(catalogItemId,null);
  if (contextRegisteredType.isAbsent()) {
    transformedCatalogItemId=CatalogUpgrades.getTypeUpgradedIfNecessary(managementContext,catalogItemId);
    if (!transformedCatalogItemId.equals(catalogItemId)) {
      logRebindingInfo(""Upgrading "" + bType.getSimpleName().toLowerCase() + "" ""+ contextSuchAsId+ "" stored catalog item context on rebind""+ "" from ""+ catalogItemId+ "" to ""+ transformedCatalogItemId);
      contextRegisteredType=managementContext.getTypeRegistry().getMaybe(transformedCatalogItemId,null);
    }
 else {
      transformedCatalogItemId=null;
    }
  }
  if (contextRegisteredType.isPresent()) {
    transformedCatalogItemId=contextRegisteredType.get().getId();
  }
 else {
    CatalogItem<?,?> catalogItem=findCatalogItemInReboundCatalog(bType,catalogItemId,contextSuchAsId);
    if (catalogItem != null) {
      transformedCatalogItemId=catalogItem.getCatalogItemId();
    }
  }
  if (transformedCatalogItemId != null) {
    try {
      BrooklynClassLoadingContextSequential loader=new BrooklynClassLoadingContextSequential(managementContext);
      loader.add(newClassLoadingContextForCatalogItems(managementContext,transformedCatalogItemId,reboundSearchPath));
      return new LoadedClass<T>(loader.loadClass(jType,bType),transformedCatalogItemId,reboundSearchPath);
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      warnings.add(""unable to load class "" + jType + "" for resovled context type ""+ transformedCatalogItemId);
    }
  }
 else {
    warnings.add(""unable to resolve context type "" + catalogItemId);
  }
}
 else {
}
",0,0,0,,
178,} else {,"if (proxy == null) {
  proxy=createEntityProxy(interfaces,entity);
}
 else {
}
",0,0,0,,
179,} else {,"if (!Objects.equal(cv,dv)) {
  LOG.warn(""SshTool detected deprecated key '"" + deprecatedKey + ""' with different value (""+ dv+ "") ""+ ""than new key '""+ correctKey+ ""' (""+ cv+ ""); ambiguous which will be used"");
}
 else {
}
",0,0,0,,
180,} else {,"if (task.isBegun()) {
  return;
}
 else {
}
",0,0,0,,
181,} else if (AnyoneSecurityProvider.class.getName().equals(provider)) {,"if (AnyoneSecurityProvider.class.getName().equals(provider)) {
}
 else {
  log.warn(""Server told to skip security with unexpected security provider: "" + provider);
}
",0,0,4,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
182,"if (e.getCode() == 500 && e.getMessage().contains(""Message: resourceVersion may not be set on objects to be created"")) {","if (e.getCode() == 500 && e.getMessage().contains(""Message: resourceVersion may not be set on objects to be created"")) {
}
 else {
  throw Throwables.propagate(e);
}
",0,9,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
183,} else {,"if (options.waitForConnectable()) {
  String setupScript=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);
  List<String> setupScripts=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL_LIST);
  Collection<String> allScripts=new MutableList<String>().appendIfNotNull(setupScript).appendAll(setupScripts);
  for (  String setupScriptItem : allScripts) {
    if (Strings.isNonBlank(setupScriptItem)) {
      customisationForLogging.add(""custom setup script "" + setupScriptItem);
      String setupVarsString=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);
      Map<String,String> substitutions=(setupVarsString != null) ? Splitter.on("","").withKeyValueSeparator("":"").split(setupVarsString) : ImmutableMap.<String,String>of();
      String scriptContent=ResourceUtils.create(this).getResourceAsString(setupScriptItem);
      String script=TemplateProcessor.processTemplateContents(scriptContent,getManagementContext(),substitutions);
      if (windows) {
        WinRmToolResponse resp=((WinRmMachineLocation)machineLocation).executeCommand(ImmutableList.copyOf((script.replace(""\r"","""").split(""\n""))));
        if (resp.getStatusCode() != 0) {
          throw new IllegalStateException(""Command 'Customizing node "" + this + ""' failed with exit code ""+ resp.getStatusCode()+ "" for location ""+ machineLocation);
        }
      }
 else {
        executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Customizing node "" + this,ImmutableList.of(script));
      }
    }
  }
  Boolean dontRequireTtyForSudo=setup.get(JcloudsLocationConfig.DONT_REQUIRE_TTY_FOR_SUDO);
  if (Boolean.TRUE.equals(dontRequireTtyForSudo) || (dontRequireTtyForSudo == null && setup.get(DONT_CREATE_USER))) {
    if (windows) {
      LOG.warn(""Ignoring flag DONT_REQUIRE_TTY_FOR_SUDO on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""patch /etc/sudoers to disable requiretty"");
      queueLocationTask(""patch /etc/sudoers to disable requiretty"",SshTasks.dontRequireTtyForSudo((SshMachineLocation)machineLocation,true).newTask().asTask());
    }
  }
  if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM)) {
    if (windows) {
      LOG.warn(""Ignoring flag MAP_DEV_RANDOM_TO_DEV_URANDOM on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""point /dev/random to urandom"");
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""using urandom instead of random"",Arrays.asList(BashCommands.sudo(""mv /dev/random /dev/random-real""),BashCommands.sudo(""ln -s /dev/urandom /dev/random"")));
    }
  }
  if (setup.get(GENERATE_HOSTNAME)) {
    if (windows) {
      LOG.warn(""Ignoring flag GENERATE_HOSTNAME on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""configure hostname"");
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Generate hostname "" + node.getName(),ImmutableList.of(BashCommands.chainGroup(String.format(""echo '127.0.0.1 %s' | ( %s )"",node.getName(),BashCommands.sudo(""tee -a /etc/hosts"")),""{ "" + BashCommands.sudo(""sed -i \""s/HOSTNAME=.*/HOSTNAME="" + node.getName() + ""/g\"" /etc/sysconfig/network"") + "" || true ; }"",BashCommands.sudo(""hostname "" + node.getName()))));
    }
  }
  if (setup.get(OPEN_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag OPEN_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      Iterable<Integer> inboundPorts=Ints.asList(template.getOptions().getInboundPorts());
      if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {
        LOG.info(""No ports to open in iptables (no inbound ports) for {} at {}"",machineLocation,this);
      }
 else {
        customisationForLogging.add(""open iptables"");
        List<String> iptablesRules=Lists.newArrayList();
        if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
          for (          Integer port : inboundPorts) {
            iptablesRules.add(IptablesCommands.addFirewalldRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
          }
        }
 else {
          iptablesRules=Lists.newArrayList();
          for (          Integer port : inboundPorts) {
            iptablesRules.add(IptablesCommands.insertIptablesRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
          }
          iptablesRules.add(IptablesCommands.saveIptablesRules());
        }
        List<String> batch=Lists.newArrayList();
        for (        String rule : iptablesRules) {
          batch.add(rule);
          if (batch.size() == 50) {
            executeCommandWarningOnError((SshMachineLocation)machineLocation,""Inserting iptables rules, 50 command batch"",batch);
            batch.clear();
          }
        }
        if (batch.size() > 0) {
          executeCommandWarningOnError((SshMachineLocation)machineLocation,""Inserting iptables rules"",batch);
        }
        executeCommandWarningOnError((SshMachineLocation)machineLocation,""List iptables rules"",ImmutableList.of(IptablesCommands.listIptablesRule()));
      }
    }
  }
  if (setup.get(STOP_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag STOP_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      customisationForLogging.add(""stop iptables"");
      List<String> cmds=ImmutableList.<String>of();
      if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
        cmds=ImmutableList.of(IptablesCommands.firewalldServiceStop(),IptablesCommands.firewalldServiceStatus());
      }
 else {
        cmds=ImmutableList.of(IptablesCommands.iptablesServiceStop(),IptablesCommands.iptablesServiceStatus());
      }
      executeCommandWarningOnError((SshMachineLocation)machineLocation,""Stopping iptables"",cmds);
    }
  }
  List<String> extraKeyUrlsToAuth=setup.get(EXTRA_PUBLIC_KEY_URLS_TO_AUTH);
  if (extraKeyUrlsToAuth != null && !extraKeyUrlsToAuth.isEmpty()) {
    if (windows) {
      LOG.warn(""Ignoring flag EXTRA_PUBLIC_KEY_URLS_TO_AUTH on Windows location"",machineLocation);
    }
 else {
      List<String> extraKeyDataToAuth=MutableList.of();
      for (      String keyUrl : extraKeyUrlsToAuth) {
        extraKeyDataToAuth.add(ResourceUtils.create().getResourceAsString(keyUrl));
      }
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Authorizing ssh keys from URLs"",ImmutableList.of(new AuthorizeRSAPublicKeys(extraKeyDataToAuth).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
    }
  }
  String extraKeyDataToAuth=setup.get(EXTRA_PUBLIC_KEY_DATA_TO_AUTH);
  if (extraKeyDataToAuth != null && !extraKeyDataToAuth.isEmpty()) {
    if (windows) {
      LOG.warn(""Ignoring flag EXTRA_PUBLIC_KEY_DATA_TO_AUTH on Windows location"",machineLocation);
    }
 else {
      executeCommandThrowingOnError((SshMachineLocation)machineLocation,""Authorizing ssh keys from data"",ImmutableList.of(new AuthorizeRSAPublicKeys(Collections.singletonList(extraKeyDataToAuth)).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
    }
  }
}
 else {
}
",0,0,0,,
184,} else {,"if (((PortableTemplateBuilder<?>)templateBuilder).imageChooser() == null) {
  Function<Iterable<? extends Image>,Image> chooser=getImageChooser(computeService,config);
  templateBuilder.imageChooser(chooser);
}
 else {
}
",0,0,0,,
185,} else {,"if (valsSummary.max > maxAllowedPoolSize) {
  if (LOG.isTraceEnabled())   LOG.trace(""{} re-scheduling max-reached check for {}, as unbounded size not stable (min {}, max {}, latest {})"",new Object[]{this,poolEntity,valsSummary.min,valsSummary.max,valsSummary.latest});
  scheduleResize(reason);
}
 else {
}
",0,0,0,,
186,} else {,"if (w.entity.equals(currentActive)) {
  bestLive=w;
}
 else {
}
",0,0,0,,
187,} else if (state == null || state == Lifecycle.CREATED || state == Lifecycle.STARTING) {,"if (state == null || state == Lifecycle.CREATED || state == Lifecycle.STARTING) {
}
 else if (state == Lifecycle.STOPPING || state == Lifecycle.STOPPED || state == Lifecycle.DESTROYED) {
  entity.sensors().set(ServiceStateLogic.SERVICE_NOT_UP_DIAGNOSTICS,ImmutableMap.<String,Object>of());
}
 else {
  ((SoftwareProcess)entity).populateServiceNotUpDiagnostics();
}
",0,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
188,} else {,"if (trustSelfSigned) {
  TrustStrategy trustStrategy=new TrustSelfSignedStrategy();
  X509HostnameVerifier hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
  socketFactory=new SSLSocketFactory(trustStrategy,hostnameVerifier);
}
 else {
}
",0,0,0,,
189,} else {,"if (Math.abs(x) < 1 && useEForSmallNumbers) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
190,} else {,"if (Math.abs(x) < 1) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
191,} else {,"if (boundVal instanceof SqlNumericLiteral) {
  final SqlNumericLiteral boundLiteral=(SqlNumericLiteral)boundVal;
  if (!boundLiteral.isExact() || (boundLiteral.getScale() != null && boundLiteral.getScale() != 0) || (0 > boundLiteral.longValue(true))) {
    throw validator.newValidationError(boundVal,RESOURCE.rowMustBeNonNegativeIntegral());
  }
}
 else {
}
",0,0,0,,
192,if (rule.name == null || rule.name.isEmpty()) {,"if (rule.name == null || rule.name.isEmpty()) {
}
 else {
  ruleName=sanitizeMetricName(matcher.replaceAll(rule.name));
  if (ruleName.isEmpty()) {
    return;
  }
}
",0,4,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
193,} else {,"if (node instanceof SqlNodeList) {
  SqlNodeList list=(SqlNodeList)node;
  for (int i=0, count=list.size(); i < count; i++) {
    SqlNode listNode=list.get(i);
    if (listNode.getKind().belongsTo(SqlKind.QUERY)) {
      listNode=SqlStdOperatorTable.SCALAR_QUERY.createCall(listNode.getParserPosition(),listNode);
      list.set(i,listNode);
    }
    registerSubQueries(parentScope,listNode);
  }
}
 else {
}
",0,0,0,,
194,} else {,"if (expectedMsgPattern == null) {
  pw.println(""-- "");
  pw.println(sap);
  pw.println("";"");
}
 else {
}
",0,0,0,,
195,} else {,"if (statement instanceof GotoStatement) {
  statements.remove(statements.size() - 1);
  result=append_(name,requireNonNull(((GotoStatement)statement).expression,""expression""),optimize);
  if (isSimpleExpression(result)) {
  }
 else {
    DeclarationStatement declare=Expressions.declare(Modifier.FINAL,newName(name,optimize),result);
    add(declare);
    result=declare.parameter;
  }
}
 else {
}
",0,0,0,,
196,|| fieldNames.length == 1 && fieldNames[0].isEmpty()) {,"if (fieldNames == null || fieldNames.length == 0 || fieldNames.length == 1 && fieldNames[0].isEmpty()) {
}
 else {
  final List<String> headerList=Arrays.asList(fieldNames);
  if (wantedFields.size() == 1) {
    source=headerList.indexOf(wantedFields.get(0));
    assert source >= -1;
    sources=null;
  }
 else   if (wantedFields.equals(headerList)) {
    source=-2;
  }
 else {
    source=-3;
    sources=new int[wantedFields.size()];
    int i=0;
    for (    String wantedField : wantedFields) {
      sources[i++]=headerList.indexOf(wantedField);
    }
  }
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
"
197,} else {,"if (bodyParameters.isEmpty()) {
  if (Exchange.class.isAssignableFrom(parameterType)) {
    expression=ExpressionBuilder.exchangeExpression();
  }
 else {
    expression=ExpressionBuilder.mandatoryBodyExpression(parameterType,true);
  }
  LOG.trace(""Parameter #{} is the body parameter using expression {}"",i,expression);
  parameterInfo.setExpression(expression);
  bodyParameters.add(parameterInfo);
}
 else {
}
",0,0,0,,
198,"if (""create"".equals(operation) && this.key != null && this.key.endsWith(""/"")) {","if (""create"".equals(operation) && this.key != null && this.key.endsWith(""/"")) {
}
 else if (!""delete"".equals(operation)) {
  queryWriter=new StringWriter(256);
  try {
    this.queryHandler=getTransformerFactory().newTransformerHandler();
    this.queryHandler.setResult(new StreamResult(queryWriter));
    this.queryHandler.getTransformer().setOutputProperties(format);
  }
 catch (  TransformerConfigurationException e) {
    throw new SAXException(""Failed to get transformer handler"",e);
  }
  this.queryHandler.startDocument();
  Iterator i=prefixMap.entrySet().iterator();
  while (i.hasNext()) {
    Map.Entry entry=(Map.Entry)i.next();
    this.queryHandler.startPrefixMapping((String)entry.getKey(),(String)entry.getValue());
  }
}
",0,5,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
199,} else {,"if (tok != null && tok.trim().length() > 0) {
  list.add(new OID(tok.trim()));
}
 else {
}
",0,0,0,,
200,} else {,"if (parent != null) {
  Files.createDirectories(parent);
  Files.copy(file.toPath(),dest,StandardCopyOption.REPLACE_EXISTING);
}
 else {
}
",0,0,0,,
201,} else {,"if (parent != null) {
  Files.createDirectories(parent);
  Files.write(dest,buffer,StandardOpenOption.CREATE,StandardOpenOption.TRUNCATE_EXISTING);
}
 else {
}
",0,0,0,,
202,if (n.isResource() && n.asResource().getURI() != null && n.asResource().getURI().equals(RDF_NIL)) {,"if (n.isResource() && n.asResource().getURI() != null && n.asResource().getURI().equals(RDF_NIL)) {
}
 else if (sType.isObject()) {
  if (n.isLiteral()) {
    o=n.asLiteral().getValue();
    if (o instanceof String) {
      o=decodeString(o);
    }
  }
 else   if (n.isResource()) {
    Resource r=n.asResource();
    if (!urisVisited.add(r))     o=r.getURI();
 else     if (r.getProperty(pValue) != null) {
      o=parseAnything(object(),n.asResource().getProperty(pValue).getObject(),outer,null);
    }
 else     if (isSeq(r)) {
      o=new OList(this);
      parseIntoCollection(r.as(Seq.class),(Collection)o,sType,pMeta);
    }
 else     if (isBag(r)) {
      o=new OList(this);
      parseIntoCollection(r.as(Bag.class),(Collection)o,sType,pMeta);
    }
 else     if (r.canAs(RDFList.class)) {
      o=new OList(this);
      parseIntoCollection(r.as(RDFList.class),(Collection)o,sType,pMeta);
    }
 else {
      String uri=r.getURI();
      if (uri != null && !r.listProperties().hasNext()) {
        o=r.getURI();
      }
 else {
        OMap m2=new OMap(this);
        parseIntoMap(r,m2,null,null,pMeta);
        o=cast(m2,pMeta,eType);
      }
    }
  }
 else {
    throw new ParseException(this,""Unrecognized node type ''{0}'' for object"",n);
  }
}
 else if (sType.isBoolean()) {
  o=convertToType(getValue(n,outer),boolean.class);
}
 else if (sType.isCharSequence()) {
  o=decodeString(getValue(n,outer));
}
 else if (sType.isChar()) {
  o=parseCharacter(decodeString(getValue(n,outer)));
}
 else if (sType.isNumber()) {
  o=parseNumber(getValue(n,outer).toString(),(Class<? extends Number>)sType.getInnerClass());
}
 else if (sType.isMap()) {
  Resource r=n.asResource();
  if (!urisVisited.add(r))   return null;
  Map m=(sType.canCreateNewInstance(outer) ? (Map)sType.newInstance(outer) : newGenericMap(sType));
  o=parseIntoMap(r,m,eType.getKeyType(),eType.getValueType(),pMeta);
}
 else if (sType.isCollectionOrArray() || sType.isArgs()) {
  if (sType.isArray() || sType.isArgs())   o=new ArrayList();
 else   o=(sType.canCreateNewInstance(outer) ? (Collection<?>)sType.newInstance(outer) : new OList(this));
  Resource r=n.asResource();
  if (!urisVisited.add(r))   return null;
  if (isSeq(r)) {
    parseIntoCollection(r.as(Seq.class),(Collection)o,sType,pMeta);
  }
 else   if (isBag(r)) {
    parseIntoCollection(r.as(Bag.class),(Collection)o,sType,pMeta);
  }
 else   if (r.canAs(RDFList.class)) {
    parseIntoCollection(r.as(RDFList.class),(Collection)o,sType,pMeta);
  }
 else {
    throw new ParseException(this,""Unrecognized node type ''{0}'' for collection"",n);
  }
  if (sType.isArray() || sType.isArgs())   o=toArray(sType,(Collection)o);
}
 else if (builder != null) {
  Resource r=n.asResource();
  if (!urisVisited.add(r))   return null;
  BeanMap<?> bm=toBeanMap(builder.create(this,eType));
  o=builder.build(this,parseIntoBeanMap(r,bm).getBean(),eType);
}
 else if (sType.canCreateNewBean(outer)) {
  Resource r=n.asResource();
  if (!urisVisited.add(r))   return null;
  BeanMap<?> bm=newBeanMap(outer,sType.getInnerClass());
  o=parseIntoBeanMap(r,bm).getBean();
}
 else if (sType.isUri() && n.isResource()) {
  o=sType.newInstanceFromString(outer,decodeString(n.asResource().getURI()));
}
 else if (sType.canCreateNewInstanceFromString(outer)) {
  o=sType.newInstanceFromString(outer,decodeString(getValue(n,outer)));
}
 else if (n.isResource()) {
  Resource r=n.asResource();
  Map m=newGenericMap(sType);
  parseIntoMap(r,m,sType.getKeyType(),sType.getValueType(),pMeta);
  if (m.containsKey(getBeanTypePropertyName(eType)))   o=cast((OMap)m,pMeta,eType);
 else   if (sType.getProxyInvocationHandler() != null)   o=newBeanMap(outer,sType.getInnerClass()).load(m).getBean();
 else   throw new ParseException(this,""Class ''{0}'' could not be instantiated.  Reason: ''{1}''"",sType.getInnerClass().getName(),sType.getNotABeanReason());
}
 else {
  throw new ParseException(this,""Class ''{0}'' could not be instantiated.  Reason: ''{1}''"",sType.getInnerClass().getName(),sType.getNotABeanReason());
}
",0,1,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
203,} else {,"if (exception != null) {
  exchange.setException(new CamelExchangeException(""Error creating new instance of "" + exception.getClass(),exchange,e));
}
 else {
}
",0,0,0,,
204,if (number.charAt(i) >= '0' && number.charAt(i) <='9' || i == 0 && number.charAt(i) == '-'){,"if (number.charAt(i) >= '0' && number.charAt(i) <= '9' || i == 0 && number.charAt(i) == '-') {
}
 else {
  return false;
}
",0,1,14,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
205,"if (getException(NoSuchComponentException.class, e) != null) {","if (getException(NoSuchComponentException.class,e) != null) {
}
 else if (getException(ComponentDefinitionException.class,e) != null) {
  LOG.warn(""Problem looking up bean: "" + name + "" due: ""+ e.getMessage(),e);
}
 else {
  LOG.trace(""Ignored error looking up bean: "" + name + "" due: ""+ e.getMessage(),e);
}
",0,0,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
206,{,"if (p == l) {
}
 else if (r == 1) {
  prev=p - l;
}
 else {
  return -1;
}
",0,0,0,,
207,if (javaClass.isPrimitive() && value instanceof Number && ((Number) value).intValue() == 0) {,"if (javaClass.isPrimitive() && value instanceof Number && ((Number)value).intValue() == 0) {
}
 else {
  idMap.put(dbAttrName,value);
  continue;
}
",0,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
208,} else {,"if (attribute.isUsedForLocking() && dbAttribute.getEntity() == dbRow.getEntity()) {
  dbRow.getQualifier().addAdditionalQualifier(dbAttribute,diff.getSnapshotValue(property.getName()),true);
}
 else {
}
",0,0,0,,
209,{,"if (result.get() == ButtonType.OK) {
}
 else {
  event.consume();
}
",0,0,0,,
210,{,"if (event.getEventType() == Type.NAME) {
}
",0,0,0,,
211,} else {,"if ((System.currentTimeMillis() - lastTimeStamp) < (2 * CHECK_PERIOD)) {
  if (!(textFeld.getText().trim().equals(lastText.trim()))) {
    lastText=textFeld.getText();
    EventQueue.invokeLater(new Runnable(){
      public void run(){
        setFilter();
      }
    }
);
  }
}
 else {
}
",0,0,0,,
212,{,"if (!focusOnAction.isEnabled()) {
  setFocusOnSelected(false);
}
 else {
}
",0,0,0,,
213,{,"if (hiddenSet.contains(logger)) {
  style=style | Font.ITALIC;
}
 else {
}
",0,0,0,,
214,} else {,"if (!isPaused() && !isClosed()) {
  if ((receiver != null)) {
    receiver.doPost(event);
  }
 else {
    remoteLogger=repository.getLogger(event.getLoggerName());
    if (event.getLevel().isGreaterOrEqual(remoteLogger.getEffectiveLevel())) {
      remoteLogger.callAppenders(event);
    }
  }
}
 else {
}
",0,0,0,,
215,} else {,"if (settableAttributes == null) {
  addResult(createResult(WARNING,""Repository Info does not indicate, which type attributes can be set!""));
}
 else {
}
",0,0,0,,
216,} else {,"if (valid) {
  ChukwaRecord record=new ChukwaRecord();
  record.setTime(timestamp);
  record.add(""offset"","""" + offset);
  record.add(Record.bodyField,data[1]);
  record.add(Record.sourceField,dataSource);
  records.add(record);
  listSize=records.size();
  if (listSize > maxRows) {
    records.remove(0);
  }
}
 else {
}
",0,0,0,,
217,} else {,"if (continueProcessing) {
  performOnInit(page,context);
  if (controlRegistry.hasAjaxTargetControls() && !context.isForward()) {
    processAjaxTargetControls(context,eventDispatcher,controlRegistry);
    eventDispatcher.fireAjaxBehaviors(context);
    controlRegistry.processPreResponse(context);
    controlRegistry.processPreRenderHeadElements(context);
    actionResult=eventDispatcher.getActionResult();
    renderActionResult(actionResult,page,context);
  }
 else {
    if (logger.isTraceEnabled()) {
      String msg=""   *no* Ajax target controls have been registered."" + "" Will process the page as a normal non Ajax request."";
      logger.trace(msg);
    }
    continueProcessing=performOnProcess(page,context,eventDispatcher);
    if (continueProcessing) {
      performOnPostOrGet(page,context,context.isPost());
      performOnRender(page,context);
    }
    if (ConfigService.NOT_FOUND_PATH.equals(page.getPath())) {
      HttpServletResponse response=context.getResponse();
      response.setStatus(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    controlRegistry.processPreResponse(context);
    controlRegistry.processPreRenderHeadElements(context);
    performRender(page,context);
  }
}
 else {
}
",0,0,0,,
218,} else {,"if (svc.equalsIgnoreCase(service.getName())) {
  capabilityMap.put(capability,capabilityValue);
}
 else {
}
",0,0,0,,
219,} else {,"if (isLocalAddress(transportAddress)) {
  TransportEndpointSite endpointSite=null;
synchronized (this) {
    endpointSite=_endpointMap.get(transportAddress.getEndpointId());
  }
  if (endpointSite != null)   endpointSite.addOutputPdu(pdu);
}
 else {
}
",0,0,0,,
220,} else {,"if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
  pool.create(0);
}
 else {
}
",0,0,0,,
221,} else {,"if (!NetworkDevice.NetscalerSDXLoadBalancer.getName().equalsIgnoreCase(deviceName)) {
  if (capacity != null) {
    lbDeviceVo.setCapacity(capacity);
  }
}
 else {
}
",0,0,0,,
222,if (typeArguments[0].equals(LdapUserResponse.class)) {,"if (typeArguments[0].equals(LdapUserResponse.class)) {
}
 else {
  msg=new String(""list of return type contains "" + typeArguments[0].getTypeName());
}
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, IfStatement-expression, ),
"
223,} else {,"if (capability != null && capability.equalsIgnoreCase(""true"")) {
  rules=_lbDao.listByNetworkIdAndScheme(network.getId(),scheme);
  if (rules != null && rules.size() > 0) {
    List<LoadBalancingRule> lbrules=new ArrayList<LoadBalancingRule>();
    for (    LoadBalancerVO lb : rules) {
      List<LbDestination> dstList=getExistingDestinations(lb.getId());
      List<LbHealthCheckPolicy> hcPolicyList=getHealthCheckPolicies(lb.getId());
      Ip sourceIp=getSourceIp(lb);
      LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList,null,hcPolicyList,sourceIp,null,lb.getLbProtocol());
      lbrules.add(loadBalancing);
    }
    if (lbrules.size() > 0) {
      isHandled=false;
      for (      LoadBalancingServiceProvider lbElement : _lbProviders) {
        stateRules=lbElement.updateHealthChecks(network,lbrules);
        if (stateRules != null && stateRules.size() > 0) {
          for (          LoadBalancerTO lbto : stateRules) {
            LoadBalancerVO ulb=_lbDao.findByUuid(lbto.getUuid());
            List<LoadBalancerVMMapVO> lbVmMaps=_lb2VmMapDao.listByLoadBalancerId(ulb.getId());
            for (            LoadBalancerVMMapVO lbVmMap : lbVmMaps) {
              UserVm vm=_vmDao.findById(lbVmMap.getInstanceId());
              Nic nic=_nicDao.findByInstanceIdAndNetworkIdIncludingRemoved(ulb.getNetworkId(),vm.getId());
              String dstIp=lbVmMap.getInstanceIp() == null ? nic.getIPv4Address() : lbVmMap.getInstanceIp();
              for (int i=0; i < lbto.getDestinations().length; i++) {
                LoadBalancerTO.DestinationTO des=lbto.getDestinations()[i];
                if (dstIp.equalsIgnoreCase(lbto.getDestinations()[i].getDestIp())) {
                  lbVmMap.setState(des.getMonitorState());
                  _lb2VmMapDao.persist(lbVmMap);
                  s_logger.debug(""Updating the LB VM Map table with the service state"");
                }
              }
            }
          }
          isHandled=true;
        }
        if (isHandled) {
          break;
        }
      }
    }
  }
}
 else {
}
",0,0,0,,
224,if (compressed && (flags & NO_BITMAP_COMPRESSION_HDR) == 0) {,"if (compressed && (flags & NO_BITMAP_COMPRESSION_HDR) == 0) {
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
225,{,"if (buf.length != length) {
}
",0,0,0,,
226,if (endVals[chgi] == null) {,"if (endVals[chgi] == null) {
}
 else if (endVals[chgi].toString().contains(""val: null"")) {
  Element stateElement=(Element)endVals[chgi];
  if (stateElement != null && stateElement.getFirstChild() != null) {
    stateVal=stateElement.getFirstChild().getTextContent();
    reached=expctdval.toString().equalsIgnoreCase(stateVal) || reached;
  }
}
 else {
  reached=expctdval.equals(endVals[chgi]) || reached;
  stateVal=""filtervals"";
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
227,} else {,"if (queryData.columns[i].isKey) {
  columnValues[i]=this.getColumnValue(tableConf,queryData.columns[i],objectModel);
}
 else {
}
",0,0,0,,
228,} else {,"if (queryData.columns[i].isKey) {
  columnValues[i]=this.getColumnValue(tableConf,queryData.columns[i],objectModel);
}
 else {
}
",0,0,0,,
229,} else {,"if (null != modified) {
  this.lastModified=modified.getTime();
}
 else {
}
",0,0,0,,
230,} else {,"if (dburl != null) {
  final String username=params.getParameter(SQLTransformer.MAGIC_USERNAME,null);
  final String password=params.getParameter(SQLTransformer.MAGIC_PASSWORD,null);
  if (username == null || password == null) {
    result=DriverManager.getConnection(dburl);
  }
 else {
    result=DriverManager.getConnection(dburl,username,password);
  }
}
 else {
}
",0,0,0,,
231,} else {,"if (value instanceof Integer) {
  object=value;
}
 else {
}
",0,0,0,,
232,} else {,"if (value instanceof Long) {
  object=value;
}
 else {
}
",0,0,0,,
233,} else {,"if (jType.equalsIgnoreCase(""long"")) {
  if (value instanceof String) {
    object=Long.decode((String)value);
  }
 else   if (value instanceof Long) {
    object=value;
  }
 else {
  }
}
 else {
}
",0,0,0,,
234,} else if (!super.validate()) {,"if (!super.validate()) {
}
 else if (this.value != null) {
  this.validationError=getDatatype().validate(this.value,new ExpressionContextImpl(this));
}
",0,0,1,,"SimpleName(SuperMethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
"
235,if (index < 0 || index >= this.rows.size() - 1) {,"if (index < 0 || index >= this.rows.size() - 1) {
}
 else {
  Object temp=this.rows.get(index + 1);
  this.rows.set(index + 1,this.rows.get(index));
  this.rows.set(index,temp);
}
",0,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
236,} else {,"if (""toggle-select"".equals(action)) {
  if (this.isPathSelected(path)) {
    this.removeSelectionPath(path);
  }
 else {
    this.addSelectionPath(path);
  }
}
 else {
}
",0,0,0,,
237,} else {,"if (System.getProperty(""java.security.auth.login.config"") == null) {
  System.setProperty(""java.security.auth.login.config"",jaasSrc.getFile().getAbsolutePath());
}
 else {
}
",0,0,0,,
238,} else {,"if (part.isMimeType(""message/rfc822"")) {
  partToSAX(contentHandler,(Part)part.getContent(),0);
}
 else {
}
",0,0,0,,
239,} else {,"if (this.webAppDir == null) {
  if (this.getLogger().isWarnEnabled()) {
    this.getLogger().warn(""Only local portlets are supported when deployed as a war "" + ""and 'webapp-directory' is not configured."");
  }
  this.contextName=""local"";
}
 else {
}
",0,0,0,,
240,} else {,"if (groupID != null) {
  GroupSessionMgr groupSession=userSession.getGroupSession(groupID);
  this.markupPort=groupSession.getWSRPBaseService();
  if (!groupSession.isInitCookieDone()) {
    groupSession.setInitCookieRequired(true);
    initCookie();
    groupSession.setInitCookieDone(true);
  }
}
 else {
}
",0,0,0,,
241,else {,"if (countTokens == 2) {
  object=st.nextToken();
  function=st.nextToken();
  function=function.substring(0,function.indexOf(""(""));
  if (object.equals(curToken.toString()) && n1token.getType() == JSToken.POINT && function.equals(n2token.toString())) {
    return object + ""."" + function;
  }
}
 else {
}
",0,0,0,,
242,} else if (this.keys1.get(j) != pField1 && this.keys2.get(j) != pField2) {,"if (this.keys1.get(j) != pField1 && this.keys2.get(j) != pField2) {
}
 else {
  return false;
}
",0,2,10,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
243,} else {,"if (rs != null) {
  getLogger().debug(""DBXMLAUTH: authorized successfully"");
  HttpSession session=null;
  if (cs) {
    session=req.getSession(false);
    if (session != null)     session.invalidate();
    session=req.getSession(true);
    if (session == null)     return null;
    getLogger().debug(""DBXMLAUTH: session created"");
  }
 else {
    getLogger().debug(""DBXMLAUTH: leaving session untouched"");
  }
  HashMap actionMap=this.propagateParameters(conf,rs,session);
  return Collections.unmodifiableMap(actionMap);
}
 else {
}
",0,0,0,,
244,} else {,"if (task.interval != interval) {
  task.update(uri,interval);
  this.runnable.remove(task);
  this.runnable.execute(task,interval,interval);
  this.changed=true;
}
 else {
}
",0,0,0,,
245,} else {,"if (formattingParams.get(I18N_VALUE_ATTRIBUTE) == null) {
  formattingParams.put(I18N_VALUE_ATTRIBUTE,textValue);
}
 else {
}
",0,0,0,,
246,} else {,"if (int_currency > 0) {
  numberValue=new Double(numberValue.doubleValue() / int_currency);
}
 else {
}
",0,0,0,,
247,} else {,"if (lexicalHandler != null) {
  lexicalHandler.startEntity(eref.getNodeName());
}
 else {
}
",0,0,0,,
248,} else {,"if (!clas.startsWith(""java/"") && allClasses.get(clas) == null) {
  dependents.put(clas,from);
}
 else {
}
",0,0,0,,
249,}else{,"if (!(value instanceof ReferenceType)) {
  constraintViolated(o,""The 'value' is not of a ReferenceType but of type "" + value + ""."");
}
 else {
}
",0,0,0,,
250,{,"if (false) {
}
 else {
  buf.append(StringUtils.getClassName(argTypes[0]));
  for (int i=1; i < argTypes.length; i++) {
    buf.append("","").append(StringUtils.getClassName(argTypes[i]));
  }
}
",0,0,0,,
251,{,"if (t instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown NoSuchMethodException, threw "" + t);
}
",0,0,0,,
252,{,"if (msg.indexOf(""badprop"") >= 0) {
}
 else {
  fail(""Unexpected parse exception:"" + e.getMessage());
}
",0,0,0,,
253,{,"if (e instanceof NoSuchMethodException) {
}
 else if (e instanceof SAXException) {
  final Exception ee=((SAXException)e).getException();
  if (ee != null) {
    if (ee instanceof NoSuchMethodException) {
    }
 else {
      fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
    }
  }
 else {
    fail(""Should have thrown NoSuchMethodException, threw "" + e.getClass().getName());
  }
}
 else {
  fail(""Should have thrown NoSuchMethodException, threw "" + e);
}
",0,0,0,,
254,{,"if (ee instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
}
",0,0,0,,
255,{,"if (e instanceof NoSuchMethodException) {
}
 else if (e instanceof InvocationTargetException) {
  final Throwable t=((InvocationTargetException)e).getTargetException();
  if (t instanceof NoSuchMethodException) {
  }
 else {
    fail(""Should have thrown ITE->NoSuchMethodException, threw "" + t);
  }
}
 else if (e instanceof SAXException) {
  final Exception ee=((SAXException)e).getException();
  if (ee != null) {
    if (ee instanceof NoSuchMethodException) {
    }
 else {
      fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
    }
  }
 else {
    fail(""Should have thrown NoSuchMethodException, threw "" + e.getClass().getName());
  }
}
 else {
  fail(""Should have thrown NoSuchMethodException, threw "" + e);
}
",0,0,0,,
256,{,"if (t instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown ITE->NoSuchMethodException, threw "" + t);
}
",0,0,0,,
257,{,"if (ee instanceof NoSuchMethodException) {
}
 else {
  fail(""Should have thrown SE->NoSuchMethodException, threw "" + ee);
}
",0,0,0,,
258,} else if (c == ' ' || c == '\t' || c == '\r' || c == '\n') {,"if (c == ' ' || c == '\t' || c == '\r' || c == '\n') {
}
 else {
  throw new ImageReadException(""Unhandled/invalid character '"" + ((char)c) + ""' found in XPM file"");
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
259,} else {,"if (rootEntry.isExists()) {
  checkAndNotify(rootEntry,rootEntry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);
}
 else {
}
",0,0,0,,
260,{,"if (element != null) {
}
 else {
}
",0,0,0,,
261,{,"if (element != null) {
}
 else {
}
",0,0,0,,
262,{,"if (element != null) {
}
 else {
}
",0,0,0,,
263,{,"if (element != null) {
}
 else {
}
",0,0,0,,
264,{,"if (res == null) {
}
",0,0,0,,
265,{,"if (task.equalsIgnoreCase(""stats"")) {
}
 else {
  if (key != null) {
    if (key.toUpperCase().equals(""ALL"")) {
      cache.removeAll();
      if (log.isDebugEnabled()) {
        log.debug(""Removed all elements from "" + hashtableName);
      }
      out.println(""key = "" + key);
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""key = "" + key);
      }
      out.println(""key = "" + key);
      StringTokenizer toke=new StringTokenizer(key,""_"");
      while (toke.hasMoreElements()) {
        String temp=(String)toke.nextElement();
        cache.remove(key);
        if (log.isDebugEnabled()) {
          log.debug(""Removed "" + temp + "" from ""+ hashtableName);
        }
      }
    }
  }
 else {
    out.println(""key is null"");
  }
}
",0,0,0,,
266,{,"if (ice == null) {
}
",0,0,0,,
267,{,"if (T1.size() + T2.size() + B1.size()+ B2.size() >= 2 * maxSize) {
  temp=(ElementDescriptor)B2.removeLast();
  if (temp != null) {
    map.remove(temp.key);
  }
}
 else {
}
",0,0,0,,
268,{,"if (T1.size() + T2.size() + B1.size()+ B2.size() >= maxSize) {
  if (T1.size() + T2.size() + B1.size()+ B2.size() >= 2 * maxSize) {
    temp=(ElementDescriptor)B2.removeLast();
    if (temp != null) {
      map.remove(temp.key);
    }
  }
 else {
  }
  replace(temp);
}
 else {
}
",0,0,0,,
269,} else {,"if (ch >= 0 && ch <= 7) {
  for (  final int p : UNIX_PERMS[ch]) {
    file.setPermission(UNIX_GROUPS[i],p,true);
  }
}
 else {
}
",0,0,0,,
270,{,"if (pop3Client == null) {
}
 else if (pop3Client.isConnected()) {
  pop3Client.disconnect();
}
",0,0,0,,
271,{,"if (p == null) {
}
 else if (p.isConnected()) {
  p.disconnect();
}
",0,0,0,,
272,{,"if (!_isMvel) {
  _expression=(SimpleNode)Ognl.parseExpression(expressionString);
  _compiledExpression=(SimpleNode)Ognl.compileExpression(_context,_root,expressionString);
  Ognl.getValue(_expression,_context,_root);
  _context.put(""contextValue"",""cvalue"");
}
 else {
}
",0,0,0,,
273,{,"if (!_isMvel) {
  if (compiled)   Ognl.getValue(_compiledExpression.getAccessor(),_context,_root);
 else   Ognl.getValue(_expression,_context,_root);
}
 else {
}
",0,0,0,,
274,{,"if (!typeDir.getName().endsWith(""s"")) {
}
",0,0,0,,
275,{,"if (!typeDir.getName().endsWith(""s"")) {
}
",0,0,0,,
276,{,"if (!typeDir.getName().endsWith(""s"")) {
}
",0,0,0,,
277,{,"if (!typeDir.getName().endsWith(""s"")) {
}
",0,0,0,,
278,{,"if (globalFormat != null) {
  msg=new SimpleDateFormat(globalFormat,ActionContext.getContext().getLocale()).format(date);
}
 else {
}
",0,0,0,,
279,{,"if (Profile.class.getName().equals(f.getType().getName())) {
  writeProfile((Profile)f.get(obj));
}
 else {
}
",0,0,0,,
280,} else if (secondSpace == -1 && firstSpace == READ.length() && line.startsWith(READ)) {,"if (secondSpace == -1 && firstSpace == READ.length() && line.startsWith(READ)) {
}
 else {
  throw new IOException(""unexpected journal line: "" + line);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
281,"if (chars[pos] == ',' || chars[pos] == ';') {","if (chars[pos] == ',' || chars[pos] == ';') {
}
 else if (chars[pos] != '+') {
  throw new IllegalStateException(""Malformed DN: "" + dn);
}
",0,0,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
282,"if ((url.startsWith(""javascript:"")) || this.canGoBack()) {","if ((url.startsWith(""javascript:"")) || this.canGoBack()) {
}
 else {
  LOG.d(TAG,""loadUrlIntoView(%s, %d)"",url,time);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
283,}else{,"if (cueTokens.length < 3) {
  cueWords.put(cuePhrase,new CuePhrase(cuePhrase,cuePhraseCategory,cuePhraseFamily));
}
 else {
}
",0,0,0,,
284,if(featConfig == FEATURE_CONFIG.PTK_FRAGS || featConfig == FEATURE_CONFIG.DEP_REGEX_FRAGS || featConfig == FEATURE_CONFIG.ALL_SYN){,"if (featConfig == FEATURE_CONFIG.PTK_FRAGS || featConfig == FEATURE_CONFIG.DEP_REGEX_FRAGS || featConfig == FEATURE_CONFIG.ALL_SYN) {
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
285,{,"if (iv_language != null) {
}
",0,0,0,,
286,} else {,"if (lookup) {
  possibleSuffix=s.substring(secondBreak,thirdBreak);
  boolean lookup2=hyphenatedSuffixesLookup.contains(possibleSuffix);
  if (lookup2)   return thirdBreak;
  return secondBreak;
}
 else {
}
",0,0,0,,
287,} else {,"if (!isDigit(ch)) {
  obviouslyIsNumber=false;
  if (nextNonDigit < 0)   nextNonDigit=i;
  if (nextNonTelephoneOrPostalChar < 0 && !isTelephoneNumberChar(ch)) {
    nextNonTelephoneOrPostalChar=i;
  }
  if (nextNonNumericChar < 0 && !isNumericChar(ch)) {
    nextNonNumericChar=i;
  }
}
 else {
}
",0,0,0,,
288,}else{,"if (prob > bestProb) {
  bestProb=prob;
  ante=antecedent;
}
 else {
}
",0,0,0,,
289,else {,"if (tagList.get(tag) == null) {
  tagList.put(tag,taggedThing);
}
 else {
}
",0,0,0,,
290,else {,"if (!tagSet.contains(tag)) {
  tagSet.add(tag);
}
 else {
}
",0,0,0,,
291,{,"if (iv_insideTable && iv_previousElement.equals(""caption"")) {
}
",0,0,0,,
292,{,"if (iv_insideTableHeader && localName.equals(""activity_tmr"")) {
}
 else if (iv_insideTableData && localName.equals(""coded_entry.value"")) {
}
 else if (iv_insideTableData && localName.equals(""value"")) {
  if (iv_tableHeaderKeyID != null) {
    String value=attributes.getValue(""V"");
    if (iv_sectionIdentifier.equals(""20114"")) {
      if (iv_tableHeaderKeyID.equals(""30004"")) {
        iv_docMetaData.addMetaData(MD_KEY_PT_BILLING_CODE,value);
      }
 else       if (iv_tableHeaderKeyID.equals(""30005"")) {
        iv_docMetaData.addMetaData(MD_KEY_TOTAL_TIME,value);
      }
 else       if (iv_tableHeaderKeyID.equals(""30006"")) {
        iv_docMetaData.addMetaData(MD_KEY_MINUTES_COUNSELING,value);
      }
    }
  }
}
 else if (iv_insideHeader) {
  if (localName.equals(""cn1_admin_data"")) {
    iv_insideAdminData=true;
  }
 else   if (localName.equals(""transcriptionist"")) {
    iv_insideTranscriptionist=true;
  }
 else   if (localName.equals(""patient"")) {
    iv_insidePatient=true;
  }
 else   if (localName.equals(""patient_encounter"")) {
    iv_insidePatientEncounter=true;
  }
 else   if (localName.equals(""legal_authenticator"")) {
    iv_insideLegalAuth=true;
  }
 else   if (localName.equals(""provider"")) {
    iv_insideProvider=true;
  }
 else   if (localName.equals(""service_location"")) {
    iv_insideServiceLoc=true;
  }
 else   if (localName.equals(""document_type_cd"")) {
    if (attributes.getValue(""V"").equals(""2025539"")) {
      iv_isHospitalSummary=true;
    }
  }
 else   if ((iv_previousElement != null) && (iv_previousElement.equals(""clinical_document_header"")) && localName.equals(""id"")) {
    String docID=attributes.getValue(""EX"");
    if ((docID != null) && (docID.length() > 0) && (docID.indexOf('#') == -1)) {
      iv_docMetaData.addMetaData(MD_KEY_DOC_ID,docID);
    }
  }
 else   if (localName.equals(""set_id"")) {
    String docLinkID=attributes.getValue(""EX"");
    if ((docLinkID != null) && (docLinkID.length() > 0) && (docLinkID.indexOf('#') == -1)) {
      iv_docMetaData.addMetaData(MD_KEY_DOC_LINK_ID,docLinkID);
    }
  }
 else   if (localName.equals(""version_nbr"")) {
    String revisionID=attributes.getValue(""V"");
    if ((revisionID != null) && (revisionID.length() > 0) && (revisionID.indexOf('#') == -1)) {
      iv_docMetaData.addMetaData(MD_KEY_DOC_REVISION_ID,revisionID);
    }
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_discharge_date"")) {
    String dischargeDate=attributes.getValue(""V"");
    if (dischargeDate != null && (dischargeDate.length() == 8 || dischargeDate.length() == 15)) {
      try {
        long admitTimeInMillis=convertTime(dischargeDate);
        iv_docMetaData.addMetaData(MD_KEY_DISCHARGE_DATE,String.valueOf(admitTimeInMillis));
      }
 catch (      Exception e) {
        iv_logger.warn(MD_KEY_DISCHARGE_DATE + "" invalid:"" + dischargeDate);
      }
    }
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_status_cd"")) {
    String statusCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_STATUS_CODE,statusCode);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_service_cd"")) {
    String serviceCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_SERVICE_CODE,serviceCode);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_event_cd"")) {
    String eventCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_EVENT_TYPE_CODE,eventCode);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_document_id"")) {
    String docID=attributes.getValue(""EX"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_ID,docID);
    iv_docMetaData.addMetaData(MD_KEY_DOC_LINK_ID,docID);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_revision_nbr"")) {
    String revisionID=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_REVISION_ID,revisionID);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_site_cd"")) {
    String siteCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_SITE_CODE,siteCode);
  }
 else   if (iv_insideTranscriptionist) {
    if (localName.equals(""id"")) {
      String transcriberID=attributes.getValue(""EX"");
      iv_docMetaData.addMetaData(MD_KEY_TRANSCRIBER_ID,transcriberID);
    }
 else     if (localName.equals(""participation_tmr"")) {
      String transcriptionDate=attributes.getValue(""V"");
      if (transcriptionDate.length() > 0) {
        try {
          long timeInMillis=convertTime(transcriptionDate);
          iv_docMetaData.addMetaData(MD_KEY_TRANSCRIPTION_DATE,String.valueOf(timeInMillis));
        }
 catch (        Exception e) {
          iv_logger.warn(MD_KEY_TRANSCRIPTION_DATE + "" invalid:"" + transcriptionDate);
        }
      }
    }
  }
 else   if (iv_insidePatient) {
    if (localName.equals(""LIT"")) {
      String streetAddr=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_STREET_ADDR,streetAddr);
    }
 else     if (localName.equals(""CTY"")) {
      String city=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_CITY,city);
    }
 else     if (localName.equals(""STA"")) {
      String state=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_STATE,state);
    }
 else     if (localName.equals(""ZIP"")) {
      String zip=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_ZIP,zip);
    }
 else     if (localName.equals(""CNT"")) {
      String cnt=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_CNT,cnt);
    }
 else     if (localName.equals(""administrative_gender_cd"")) {
      String ptGender=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PT_GENDER,ptGender);
    }
 else     if (localName.equals(""birth_dttm"")) {
      String birthDttm=attributes.getValue(""V"");
      try {
        long birthTimeInMillis=convertTime(birthDttm);
        iv_docMetaData.addMetaData(MD_KEY_PT_BIRTH_DATE,String.valueOf(birthTimeInMillis));
      }
 catch (      Exception e) {
        iv_logger.warn(MD_KEY_PT_BIRTH_DATE + "" invalid:"" + birthDttm);
      }
    }
 else     if (iv_insideKnownBy) {
      if (localName.equals(""id"") && (iv_previousElement.compareTo(""is_known_by"") == 0)) {
        String clinicalNumber=attributes.getValue(""EX"");
        iv_docMetaData.addMetaData(MD_KEY_CUSTOMER_ID,clinicalNumber.replaceAll(""-"",""""));
      }
    }
  }
 else   if (iv_insideLegalAuth) {
    if (localName.equals(""id"")) {
      String signatureID=attributes.getValue(""EX"");
      iv_docMetaData.addMetaData(MD_KEY_SIGNATURE_ID,signatureID);
    }
 else     if (localName.equals(""participation_tmr"")) {
      String signatureDate=attributes.getValue(""V"");
      if (signatureDate.length() > 0) {
        try {
          long timeInMillis=convertTime(signatureDate);
          iv_docMetaData.addMetaData(MD_KEY_SIGNATURE_DATE,String.valueOf(timeInMillis));
        }
 catch (        Exception e) {
          iv_logger.warn(MD_KEY_SIGNATURE_DATE + "" invalid:"" + signatureDate);
        }
      }
    }
  }
 else   if (iv_insideProvider) {
    if (localName.equals(""id"")) {
      if (iv_foundProvider1 == false) {
        String providerID=attributes.getValue(""EX"");
        iv_docMetaData.addMetaData(MD_KEY_PROVIDER_ID,providerID);
        iv_foundProvider1=true;
      }
 else {
        String provider2ID=attributes.getValue(""EX"");
        iv_docMetaData.addMetaData(MD_KEY_PROVIDER2_ID,provider2ID);
      }
    }
  }
 else   if (iv_insidePatientEncounter) {
    if (localName.equals(""organization.nm"")) {
      String facilityCode=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_FACILITY_CODE,facilityCode);
    }
 else     if (localName.equals(""encounter_tmr"")) {
      String noteDate=attributes.getValue(""V"");
      if (noteDate.length() > 0) {
        try {
          if (iv_isHospitalSummary) {
            if (noteDate.length() == 8 || noteDate.length() == 15) {
              long admitTimeInMillis=convertTime(noteDate);
              iv_docMetaData.addMetaData(MD_KEY_ADMIT_DATE,String.valueOf(admitTimeInMillis));
              iv_docMetaData.addMetaData(MD_KEY_NOTE_DATE,String.valueOf(admitTimeInMillis));
            }
 else             if (noteDate.length() == 17) {
              String admitDate=noteDate.substring(0,8);
              String dischargeDate=noteDate.substring(9,17);
              long admitTimeInMillis=convertTime(admitDate);
              long dischargeTimeInMillis=convertTime(dischargeDate);
              iv_docMetaData.addMetaData(MD_KEY_ADMIT_DATE,String.valueOf(admitTimeInMillis));
              iv_docMetaData.addMetaData(MD_KEY_DISCHARGE_DATE,String.valueOf(dischargeTimeInMillis));
              iv_docMetaData.addMetaData(MD_KEY_NOTE_DATE,String.valueOf(admitTimeInMillis));
            }
          }
 else {
            long timeInMillis=convertTime(noteDate);
            iv_docMetaData.addMetaData(MD_KEY_NOTE_DATE,String.valueOf(timeInMillis));
          }
        }
 catch (        Exception e) {
          throw new SAXException(e);
        }
      }
    }
  }
 else   if (iv_insideServiceLoc && localName.equals(""id"")) {
    String location=attributes.getValue(""EX"");
    iv_docMetaData.addMetaData(MD_KEY_LOCATION,location);
  }
 else   if (localName.equals(""confidentiality_cd"")) {
    String confidentialCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_CONFIDENTIAL_IND,confidentialCode);
  }
 else   if (localName.equals(""administrative_gender_cd"")) {
    String ptGender=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_PT_GENDER,ptGender);
  }
 else   if (localName.equals(""birth_dttm"")) {
    String birthDttm=attributes.getValue(""V"");
    try {
      long birthTimeInMillis=convertTime(birthDttm);
      iv_docMetaData.addMetaData(MD_KEY_PT_BIRTH_DATE,String.valueOf(birthTimeInMillis));
    }
 catch (    Exception e) {
      iv_logger.warn(MD_KEY_PT_BIRTH_DATE + "" invalid:"" + birthDttm);
    }
  }
}
",0,0,0,,
293,{,"if (iv_insideTableData && localName.equals(""coded_entry.value"")) {
}
 else if (iv_insideTableData && localName.equals(""value"")) {
  if (iv_tableHeaderKeyID != null) {
    String value=attributes.getValue(""V"");
    if (iv_sectionIdentifier.equals(""20114"")) {
      if (iv_tableHeaderKeyID.equals(""30004"")) {
        iv_docMetaData.addMetaData(MD_KEY_PT_BILLING_CODE,value);
      }
 else       if (iv_tableHeaderKeyID.equals(""30005"")) {
        iv_docMetaData.addMetaData(MD_KEY_TOTAL_TIME,value);
      }
 else       if (iv_tableHeaderKeyID.equals(""30006"")) {
        iv_docMetaData.addMetaData(MD_KEY_MINUTES_COUNSELING,value);
      }
    }
  }
}
 else if (iv_insideHeader) {
  if (localName.equals(""cn1_admin_data"")) {
    iv_insideAdminData=true;
  }
 else   if (localName.equals(""transcriptionist"")) {
    iv_insideTranscriptionist=true;
  }
 else   if (localName.equals(""patient"")) {
    iv_insidePatient=true;
  }
 else   if (localName.equals(""patient_encounter"")) {
    iv_insidePatientEncounter=true;
  }
 else   if (localName.equals(""legal_authenticator"")) {
    iv_insideLegalAuth=true;
  }
 else   if (localName.equals(""provider"")) {
    iv_insideProvider=true;
  }
 else   if (localName.equals(""service_location"")) {
    iv_insideServiceLoc=true;
  }
 else   if (localName.equals(""document_type_cd"")) {
    if (attributes.getValue(""V"").equals(""2025539"")) {
      iv_isHospitalSummary=true;
    }
  }
 else   if ((iv_previousElement != null) && (iv_previousElement.equals(""clinical_document_header"")) && localName.equals(""id"")) {
    String docID=attributes.getValue(""EX"");
    if ((docID != null) && (docID.length() > 0) && (docID.indexOf('#') == -1)) {
      iv_docMetaData.addMetaData(MD_KEY_DOC_ID,docID);
    }
  }
 else   if (localName.equals(""set_id"")) {
    String docLinkID=attributes.getValue(""EX"");
    if ((docLinkID != null) && (docLinkID.length() > 0) && (docLinkID.indexOf('#') == -1)) {
      iv_docMetaData.addMetaData(MD_KEY_DOC_LINK_ID,docLinkID);
    }
  }
 else   if (localName.equals(""version_nbr"")) {
    String revisionID=attributes.getValue(""V"");
    if ((revisionID != null) && (revisionID.length() > 0) && (revisionID.indexOf('#') == -1)) {
      iv_docMetaData.addMetaData(MD_KEY_DOC_REVISION_ID,revisionID);
    }
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_discharge_date"")) {
    String dischargeDate=attributes.getValue(""V"");
    if (dischargeDate != null && (dischargeDate.length() == 8 || dischargeDate.length() == 15)) {
      try {
        long admitTimeInMillis=convertTime(dischargeDate);
        iv_docMetaData.addMetaData(MD_KEY_DISCHARGE_DATE,String.valueOf(admitTimeInMillis));
      }
 catch (      Exception e) {
        iv_logger.warn(MD_KEY_DISCHARGE_DATE + "" invalid:"" + dischargeDate);
      }
    }
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_status_cd"")) {
    String statusCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_STATUS_CODE,statusCode);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_service_cd"")) {
    String serviceCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_SERVICE_CODE,serviceCode);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_event_cd"")) {
    String eventCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_EVENT_TYPE_CODE,eventCode);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_document_id"")) {
    String docID=attributes.getValue(""EX"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_ID,docID);
    iv_docMetaData.addMetaData(MD_KEY_DOC_LINK_ID,docID);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_revision_nbr"")) {
    String revisionID=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_REVISION_ID,revisionID);
  }
 else   if (iv_insideAdminData && localName.equals(""cn1_site_cd"")) {
    String siteCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_SITE_CODE,siteCode);
  }
 else   if (iv_insideTranscriptionist) {
    if (localName.equals(""id"")) {
      String transcriberID=attributes.getValue(""EX"");
      iv_docMetaData.addMetaData(MD_KEY_TRANSCRIBER_ID,transcriberID);
    }
 else     if (localName.equals(""participation_tmr"")) {
      String transcriptionDate=attributes.getValue(""V"");
      if (transcriptionDate.length() > 0) {
        try {
          long timeInMillis=convertTime(transcriptionDate);
          iv_docMetaData.addMetaData(MD_KEY_TRANSCRIPTION_DATE,String.valueOf(timeInMillis));
        }
 catch (        Exception e) {
          iv_logger.warn(MD_KEY_TRANSCRIPTION_DATE + "" invalid:"" + transcriptionDate);
        }
      }
    }
  }
 else   if (iv_insidePatient) {
    if (localName.equals(""LIT"")) {
      String streetAddr=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_STREET_ADDR,streetAddr);
    }
 else     if (localName.equals(""CTY"")) {
      String city=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_CITY,city);
    }
 else     if (localName.equals(""STA"")) {
      String state=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_STATE,state);
    }
 else     if (localName.equals(""ZIP"")) {
      String zip=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_ZIP,zip);
    }
 else     if (localName.equals(""CNT"")) {
      String cnt=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PATIENT_CNT,cnt);
    }
 else     if (localName.equals(""administrative_gender_cd"")) {
      String ptGender=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_PT_GENDER,ptGender);
    }
 else     if (localName.equals(""birth_dttm"")) {
      String birthDttm=attributes.getValue(""V"");
      try {
        long birthTimeInMillis=convertTime(birthDttm);
        iv_docMetaData.addMetaData(MD_KEY_PT_BIRTH_DATE,String.valueOf(birthTimeInMillis));
      }
 catch (      Exception e) {
        iv_logger.warn(MD_KEY_PT_BIRTH_DATE + "" invalid:"" + birthDttm);
      }
    }
 else     if (iv_insideKnownBy) {
      if (localName.equals(""id"") && (iv_previousElement.compareTo(""is_known_by"") == 0)) {
        String clinicalNumber=attributes.getValue(""EX"");
        iv_docMetaData.addMetaData(MD_KEY_CUSTOMER_ID,clinicalNumber.replaceAll(""-"",""""));
      }
    }
  }
 else   if (iv_insideLegalAuth) {
    if (localName.equals(""id"")) {
      String signatureID=attributes.getValue(""EX"");
      iv_docMetaData.addMetaData(MD_KEY_SIGNATURE_ID,signatureID);
    }
 else     if (localName.equals(""participation_tmr"")) {
      String signatureDate=attributes.getValue(""V"");
      if (signatureDate.length() > 0) {
        try {
          long timeInMillis=convertTime(signatureDate);
          iv_docMetaData.addMetaData(MD_KEY_SIGNATURE_DATE,String.valueOf(timeInMillis));
        }
 catch (        Exception e) {
          iv_logger.warn(MD_KEY_SIGNATURE_DATE + "" invalid:"" + signatureDate);
        }
      }
    }
  }
 else   if (iv_insideProvider) {
    if (localName.equals(""id"")) {
      if (iv_foundProvider1 == false) {
        String providerID=attributes.getValue(""EX"");
        iv_docMetaData.addMetaData(MD_KEY_PROVIDER_ID,providerID);
        iv_foundProvider1=true;
      }
 else {
        String provider2ID=attributes.getValue(""EX"");
        iv_docMetaData.addMetaData(MD_KEY_PROVIDER2_ID,provider2ID);
      }
    }
  }
 else   if (iv_insidePatientEncounter) {
    if (localName.equals(""organization.nm"")) {
      String facilityCode=attributes.getValue(""V"");
      iv_docMetaData.addMetaData(MD_KEY_FACILITY_CODE,facilityCode);
    }
 else     if (localName.equals(""encounter_tmr"")) {
      String noteDate=attributes.getValue(""V"");
      if (noteDate.length() > 0) {
        try {
          if (iv_isHospitalSummary) {
            if (noteDate.length() == 8 || noteDate.length() == 15) {
              long admitTimeInMillis=convertTime(noteDate);
              iv_docMetaData.addMetaData(MD_KEY_ADMIT_DATE,String.valueOf(admitTimeInMillis));
              iv_docMetaData.addMetaData(MD_KEY_NOTE_DATE,String.valueOf(admitTimeInMillis));
            }
 else             if (noteDate.length() == 17) {
              String admitDate=noteDate.substring(0,8);
              String dischargeDate=noteDate.substring(9,17);
              long admitTimeInMillis=convertTime(admitDate);
              long dischargeTimeInMillis=convertTime(dischargeDate);
              iv_docMetaData.addMetaData(MD_KEY_ADMIT_DATE,String.valueOf(admitTimeInMillis));
              iv_docMetaData.addMetaData(MD_KEY_DISCHARGE_DATE,String.valueOf(dischargeTimeInMillis));
              iv_docMetaData.addMetaData(MD_KEY_NOTE_DATE,String.valueOf(admitTimeInMillis));
            }
          }
 else {
            long timeInMillis=convertTime(noteDate);
            iv_docMetaData.addMetaData(MD_KEY_NOTE_DATE,String.valueOf(timeInMillis));
          }
        }
 catch (        Exception e) {
          throw new SAXException(e);
        }
      }
    }
  }
 else   if (iv_insideServiceLoc && localName.equals(""id"")) {
    String location=attributes.getValue(""EX"");
    iv_docMetaData.addMetaData(MD_KEY_LOCATION,location);
  }
 else   if (localName.equals(""confidentiality_cd"")) {
    String confidentialCode=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_DOC_CONFIDENTIAL_IND,confidentialCode);
  }
 else   if (localName.equals(""administrative_gender_cd"")) {
    String ptGender=attributes.getValue(""V"");
    iv_docMetaData.addMetaData(MD_KEY_PT_GENDER,ptGender);
  }
 else   if (localName.equals(""birth_dttm"")) {
    String birthDttm=attributes.getValue(""V"");
    try {
      long birthTimeInMillis=convertTime(birthDttm);
      iv_docMetaData.addMetaData(MD_KEY_PT_BIRTH_DATE,String.valueOf(birthTimeInMillis));
    }
 catch (    Exception e) {
      iv_logger.warn(MD_KEY_PT_BIRTH_DATE + "" invalid:"" + birthDttm);
    }
  }
}
",0,0,0,,
294,{,"if (iv_insideTableData && (iv_tableHeaderKeyID != null)) {
}
",0,0,0,,
295,else {,"if (smoker == true) {
  int currentValue=((Integer)smokingStatusElements.elementAt(3)).intValue();
  currentValue=currentValue + 1;
  smokingStatusElements.setElementAt(new Integer(currentValue),3);
  System.out.println(""incrementing smoker: "" + currentValue);
  patientsStatuses.put(clinicNumber,smokingStatusElements);
}
 else {
}
",0,0,0,,
296,}  else {,"if (t == CONST.NE_TYPE_ID_DRUG) {
  if (original instanceof MedicationEventMention) {
    mention=new MedicationMention(jcas);
    mapToMentions.put(original,mention);
    setAttributesFromOriginal(mention,original);
    annotationsToRemoveFromCas.add(original);
  }
}
 else {
}
",0,0,0,,
297,{,"if (e instanceof KeeperException.NoWatcherException && quietly) {
}
 else {
  throw e;
}
",0,0,0,,
298,} else {,"if (s.getInputStream() instanceof DelegatingInputStream) {
  cache((DelegatingInputStream)s.getInputStream());
}
 else {
}
",0,0,0,,
299,} else {,"if (this.origErrorHandler != null) {
  this.origErrorHandler.warning(exception);
}
 else {
}
",0,0,0,,
300,"} else if (""insecure"".equals(args[1])) {","if (""insecure"".equals(args[1])) {
}
 else {
  System.out.println(""arg1 needs to be either secure or insecure"");
  System.exit(1);
}
",0,0,4,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
"
301,} else if (beanClass == Object.class || beanClass == Throwable.class) {,"if (beanClass == Object.class || beanClass == Throwable.class) {
}
 else if (RuntimeException.class.isAssignableFrom(beanClass)) {
  beanInfo=Introspector.getBeanInfo(beanClass,RuntimeException.class);
}
 else if (Exception.class.isAssignableFrom(beanClass) && !Exception.class.equals(beanClass)) {
  beanInfo=Introspector.getBeanInfo(beanClass,Exception.class);
}
 else if (Throwable.class.isAssignableFrom(beanClass)) {
  beanInfo=Introspector.getBeanInfo(beanClass,Throwable.class);
}
 else {
  beanInfo=Introspector.getBeanInfo(beanClass,Object.class);
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
302,} else {,"if (range == null) {
  IOUtils.copyAndCloseInput(is,os,bufferSize);
}
 else {
}
",0,0,0,,
303,} else {,"if (rb == null) {
  rb=Response.ok();
}
 else {
}
",0,0,0,,
304,} else {,"if (!requestor) {
}
 else {
}
",0,0,0,,
305,} else {,"if (!requestor) {
  handleAbort(message,null);
}
 else {
}
",0,0,0,,
306,} else {,"if (requestor) {
  message.getInterceptorChain().abort();
  if (!message.getExchange().isOneWay()) {
    Endpoint e=message.getExchange().getEndpoint();
    Message responseMsg=new MessageImpl();
    responseMsg.setExchange(message.getExchange());
    responseMsg=e.getBinding().createMessage(responseMsg);
    MessageObserver observer=message.getExchange().get(MessageObserver.class);
    if (observer != null) {
      responseMsg.setContent(XMLStreamReader.class,message.getContent(XMLStreamReader.class));
      message.getExchange().setInMessage(responseMsg);
      responseMsg.put(InterceptorChain.STARTING_AT_INTERCEPTOR_ID,LogicalHandlerInInterceptor.class.getName());
      observer.onMessage(responseMsg);
    }
    return;
  }
}
 else {
}
",0,0,0,,
307,} else {,"if (!getInvoker(message).isOutbound()) {
}
 else {
}
",0,0,0,,
308,} else {,"if (!getInvoker(message).isOutbound()) {
  message.getInterceptorChain().abort();
  Endpoint e=message.getExchange().getEndpoint();
  if (!message.getExchange().isOneWay()) {
    Message responseMsg=new MessageImpl();
    responseMsg.setExchange(message.getExchange());
    responseMsg=e.getBinding().createMessage(responseMsg);
    message.getExchange().setOutMessage(responseMsg);
    SOAPMessage soapMessage=((SOAPMessageContext)context).getMessage();
    responseMsg.setContent(SOAPMessage.class,soapMessage);
    InterceptorChain chain=OutgoingChainInterceptor.getOutInterceptorChain(message.getExchange());
    responseMsg.setInterceptorChain(chain);
    chain.doInterceptStartingAfter(responseMsg,SoapPreProtocolOutInterceptor.class.getName());
  }
}
 else {
}
",0,0,0,,
309,} else {,"if (consumer != null) {
  boolean secretAvailable=!StringUtils.isEmpty(consumer.getClientSecret());
  if (setAuthorizationHeader && secretAvailable) {
    accessTokenService.replaceHeader(HttpHeaders.AUTHORIZATION,DefaultBasicAuthSupplier.getBasicAuthHeader(consumer.getClientId(),consumer.getClientSecret()));
  }
 else {
    form.param(OAuthConstants.CLIENT_ID,consumer.getClientId());
    if (secretAvailable) {
      form.param(OAuthConstants.CLIENT_SECRET,consumer.getClientSecret());
    }
  }
}
 else {
}
",0,0,0,,
310,} else {,"if (socketFactory == null) {
  final SSLContext ctx;
  if (tlsClientParameters.getSslContext() != null) {
    ctx=tlsClientParameters.getSslContext();
  }
 else {
    ctx=org.apache.cxf.transport.https.SSLUtils.getSSLContext(tlsClientParameters);
  }
  String[] cipherSuites=SSLUtils.getCiphersuitesToInclude(tlsClientParameters.getCipherSuites(),tlsClientParameters.getCipherSuitesFilter(),ctx.getSocketFactory().getDefaultCipherSuites(),SSLUtils.getSupportedCipherSuites(ctx),LOG);
  String protocol=tlsClientParameters.getSecureSocketProtocol() != null ? tlsClientParameters.getSecureSocketProtocol() : ctx.getProtocol();
  socketFactory=new SSLSocketFactoryWrapper(ctx.getSocketFactory(),cipherSuites,protocol);
  lastTlsHash=tlsClientParameters.hashCode();
}
 else {
}
",0,0,0,,
311,} else {,"if (token instanceof SamlToken) {
  SamlAssertionWrapper assertionWrapper=addSamlToken((SamlToken)token);
  if (assertionWrapper != null) {
    Element envelope=saaj.getSOAPPart().getEnvelope();
    envelope=(Element)DOMUtils.getDomElement(envelope);
    addSupportingElement(assertionWrapper.toDOM(envelope.getOwnerDocument()));
  }
}
 else {
}
",0,0,0,,
312,} else {,"if (validateTarget.getState().equals(STATE.VALID)) {
  processValidToken(providerParameters,validateTarget,tokenResponse);
}
 else {
}
",0,0,0,,
313,} else {,"if (outboundProperty.booleanValue()) {
}
 else {
}
",0,0,0,,
314,} else {,"if (outboundProperty.booleanValue()) {
}
 else {
}
",0,0,0,,
315,"|| ""no-cache"".equalsIgnoreCase( req.getHeader( ""cache-control"" ) ) ) {","if (""no-cache"".equalsIgnoreCase(req.getHeader(""Pragma"")) || ""no-cache"".equalsIgnoreCase(req.getHeader(""cache-control""))) {
}
 else {
  final String thisTag=createETag(pageName,lastModified);
  final String eTag=req.getHeader(""If-None-Match"");
  if (eTag != null && eTag.equals(thisTag)) {
    return true;
  }
  final DateFormat rfcDateFormat=new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss z"");
  try {
    final long ifModifiedSince=req.getDateHeader(""If-Modified-Since"");
    if (ifModifiedSince != -1) {
      final long lastModifiedTime=lastModified.getTime();
      if (lastModifiedTime <= ifModifiedSince) {
        return true;
      }
    }
 else {
      try {
        final String s=req.getHeader(""If-Modified-Since"");
        if (s != null) {
          final Date ifModifiedSinceDate=rfcDateFormat.parse(s);
          if (lastModified.before(ifModifiedSinceDate)) {
            return true;
          }
        }
      }
 catch (      final ParseException e) {
        log.warn(e.getLocalizedMessage(),e);
      }
    }
  }
 catch (  final IllegalArgumentException e) {
  }
}
",0,1,5,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
316,} else {,"if (msg != null) {
  cm.add(msg);
}
 else {
}
",0,0,0,,
317,} else {,"if (!mapper.containsExcludedModule(moduleScope.toString(ToolCorbaConstants.MODULE_SEPARATOR))) {
  DefinitionVisitor definitionVisitor=new DefinitionVisitor(moduleScope,definition,schema,wsdlVisitor);
  definitionVisitor.visit(definitionNode);
}
 else {
}
",0,0,0,,
318,} else {,"if (node2 != null && node2.getType() == IDLTokenTypes.LITERAL_long) {
  AST node3=node2.getNextSibling();
  if (node3 != null && node3.getType() == IDLTokenTypes.LITERAL_long) {
    result=CorbaConstants.NT_CORBA_ULONGLONG;
  }
 else {
    result=CorbaConstants.NT_CORBA_ULONG;
  }
}
 else {
}
",0,0,0,,
319,} else {,"if (type instanceof Struct) {
  Struct struct=(Struct)type;
  String[] testResult;
  if (""X.op_a"".equals(struct.getName())) {
    testResult=new String[]{""X.op_a"",""X.op_a"",""p1"",""X.S"",""p2"",""X.S""};
  }
 else   if (""X.op_aResult"".equals(struct.getName())) {
    testResult=new String[]{""X.op_aResult"",""X.op_aResult"",""return"",""X.S"",""p2"",""X.S""};
  }
 else {
    testResult=new String[]{""X.S"",""X.S"",""str"",""X._1_S"",""fx"",""X._2_S""};
  }
  assertEquals(""Name is incorrect for Anon Array Type"",testResult[0],struct.getName());
  assertEquals(""Type is incorrect for Struct Type"",testResult[1],struct.getType().getLocalPart());
  assertEquals(""Name for first Struct Member Type is incorrect"",testResult[2],struct.getMember().get(0).getName());
  assertEquals(""Idltype for first Struct Member Type is incorrect"",testResult[3],struct.getMember().get(0).getIdltype().getLocalPart());
  assertEquals(""Name for second Struct Member Type is incorrect"",testResult[4],struct.getMember().get(1).getName());
  assertEquals(""Idltype for second Struct Member Type is incorrect"",testResult[5],struct.getMember().get(1).getIdltype().getLocalPart());
}
 else {
}
",0,0,0,,
320,} else {,"if (version == WSDLConstants.WSDLVersion.WSDL11) {
  AbstractWSDLBuilder builder=frontend.getWSDLBuilder();
  builder.setContext(context);
  builder.setBus(getBus());
  context.put(Bus.class,getBus());
  wsdlURL=URIParserUtil.getAbsoluteURI(wsdlURL);
  builder.build(wsdlURL);
  builder.customize();
  Definition definition=builder.getWSDLModel();
  context.put(Definition.class,definition);
  builder.validate(definition);
  WSDLServiceBuilder serviceBuilder=new WSDLServiceBuilder(getBus());
  if (context.isVerbose()) {
    serviceBuilder.setUnwrapLogLevel(Level.INFO);
  }
  serviceBuilder.setIgnoreUnknownBindings(true);
  String allowRefs=(String)context.get(ToolConstants.CFG_ALLOW_ELEMENT_REFS);
  if (!StringUtils.isEmpty(allowRefs) || context.optionSet(ToolConstants.CFG_ALLOW_ELEMENT_REFS)) {
    if (allowRefs.length() > 0 && allowRefs.charAt(0) == '=') {
      allowRefs=allowRefs.substring(1);
    }
    if (StringUtils.isEmpty(allowRefs)) {
      allowRefs=""true"";
    }
    serviceBuilder.setAllowElementRefs(Boolean.valueOf(allowRefs));
  }
  String serviceName=(String)context.get(ToolConstants.CFG_SERVICENAME);
  if (serviceName != null) {
    List<ServiceInfo> services=serviceBuilder.buildServices(definition,getServiceQName(definition));
    serviceList.addAll(services);
  }
 else   if (definition.getServices().size() > 0) {
    serviceList=serviceBuilder.buildServices(definition);
  }
 else {
    serviceList=serviceBuilder.buildMockServices(definition);
  }
  getBus().getExtension(WSDLManager.class).removeDefinition(definition);
}
 else {
}
",0,0,0,,
321,"if(System.getProperty(""os.name"").indexOf(""Windows"")!=-1) {","if (System.getProperty(""os.name"").indexOf(""Windows"") != -1) {
}
 else {
}
",0,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
322,{,"if (samples == null) {
}
 else if (samples.size() <= numSamples) {
  for (  Tuple sample : samples) {
    output.add(new ScoredTuple(scoreGen.generateScore(sample),sample).getIntermediateTuple(tupleFactory));
  }
}
 else {
  getReservoir().clear();
  for (  Tuple sample : samples) {
    getReservoir().consider(new ScoredTuple(scoreGen.generateScore(sample),sample));
  }
  for (  ScoredTuple scoredTuple : getReservoir()) {
    output.add(scoredTuple.getIntermediateTuple(tupleFactory));
  }
}
",0,0,0,,
323,{,"if (loginController.isLoggedIn()) {
}
 else {
  violations.add(new SecurityViolation(){
    @Override public String getReason(){
      return ""User must be logged in to access this resource"";
    }
  }
);
  deniedPage=viewConfigResolver.getViewConfigDescriptor(FacesContext.getCurrentInstance().getViewRoot().getViewId()).getConfigClass();
}
",0,0,0,,
324,{,"if (identity.isLoggedIn()) {
}
 else {
  violations.add(new SecurityViolation(){
    @Override public String getReason(){
      return ""User must be logged in to access this resource"";
    }
  }
);
  deniedPage=viewConfigResolver.getViewConfigDescriptor(FacesContext.getCurrentInstance().getViewRoot().getViewId()).getConfigClass();
}
",0,0,0,,
325,} else {,"if (updateCount != newUpdateCount) {
  try {
    is=new BufferedInputStream(reCreateStream());
  }
 catch (  SqlException sqle) {
    IOException ioe=new IOException();
    ioe.initCause(sqle);
    throw ioe;
  }
  updateCount=newUpdateCount;
}
 else {
}
",0,0,0,,
326,} else {,"if ((protocolTypesAndLengths[i][0] % 2) == 1) {
  write1Byte(FdocaConstants.NULL_DATA);
}
 else {
}
",0,0,0,,
327,{,"if ((value & ~0x3f) == 0) {
}
 else if ((value & 0x80) == 0) {
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT((value & 0x40) == 0x40);
  }
  value=(((value & 0x3f) << 8) | (data[pos++] & 0xff));
}
 else {
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT((value & 0x80) == 0x80);
  }
  value=((value & 0x7f) << 24) | ((data[pos++] & 0xff) << 16) | ((data[pos++] & 0xff) << 8)| ((data[pos++] & 0xff));
}
",0,0,0,,
328,if (origInfo == null || origInfo.hasIndexCol == false) {,"if (origInfo == null || origInfo.hasIndexCol == false) {
}
 else {
  indexInfoMap.put(index,origInfo);
}
",0,2,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
329,{,"if ((column_list != null) && !((column_listSize > i) && (column_list.isSet(i)))) {
}
 else {
  ret_row[i]=dvf.getNull(format_ids[i],collation_ids[i]);
}
",0,0,0,,
330,{,"if (se.getSeverity() < ExceptionSeverity.TRANSACTION_SEVERITY) {
}
",0,0,0,,
331,{,"if ((c >= 0x0001) && (c <= 0x007F)) {
}
 else if (c > 0x07FF) {
  utflen+=2;
}
 else {
  utflen+=1;
}
",0,0,0,,
332,else {,"if (applicationConnection == xaConnection.currentConnectionHandle) {
  if (realConnection == xaConnection.realConnection)   return realStatement;
  if (xaConnection.realConnection == null) {
    xaConnection.getRealConnection();
  }
  Statement newStatement=applicationStatement.createDuplicateStatement(xaConnection.realConnection,realStatement);
  ((EmbedStatement)realStatement).transferBatch((EmbedStatement)newStatement);
  try {
    realStatement.close();
  }
 catch (  SQLException sqle) {
  }
  realStatement=newStatement;
  realConnection=xaConnection.realConnection;
  ((EmbedStatement)realStatement).setApplicationStatement(applicationStatement);
}
 else {
}
",0,0,0,,
333,else {,"if (applicationConnection == xaConnection.currentConnectionHandle) {
  if (realConnection == xaConnection.realConnection)   return realPreparedStatement;
  if (xaConnection.realConnection == null) {
    xaConnection.getRealConnection();
  }
  PreparedStatement newPreparedStatement=((BrokeredPreparedStatement)applicationStatement).createDuplicateStatement(xaConnection.realConnection,realPreparedStatement);
  ((EmbedPreparedStatement)realPreparedStatement).transferParameters((EmbedPreparedStatement)newPreparedStatement);
  try {
    realPreparedStatement.close();
  }
 catch (  SQLException sqle) {
  }
  realPreparedStatement=newPreparedStatement;
  realConnection=xaConnection.realConnection;
  ((EmbedStatement)realPreparedStatement).setApplicationStatement(applicationStatement);
}
 else {
}
",0,0,0,,
334,else {,"if (applicationConnection == xaConnection.currentConnectionHandle) {
  if (realConnection == xaConnection.realConnection)   return realCallableStatement;
  if (xaConnection.realConnection == null) {
    xaConnection.getRealConnection();
  }
  CallableStatement newCallableStatement=((BrokeredCallableStatement)applicationStatement).createDuplicateStatement(xaConnection.realConnection,realCallableStatement);
  ((EmbedStatement)realCallableStatement).transferBatch((EmbedStatement)newCallableStatement);
  try {
    realCallableStatement.close();
  }
 catch (  SQLException sqle) {
  }
  realCallableStatement=newCallableStatement;
  realConnection=xaConnection.realConnection;
  ((EmbedStatement)realCallableStatement).setApplicationStatement(applicationStatement);
}
 else {
}
",0,0,0,,
335,{,"if (blockLength <= splitMinLength) {
}
 else if (blockLength > (VMOpcode.MAX_CODE_LENGTH - 1)) {
}
 else {
  int me=vmDescriptor.lastIndexOf(')');
  if (vmDescriptor.charAt(me + 1) == 'L') {
    String rt=vmDescriptor.substring(me + 2,vmDescriptor.length() - 1);
    rt=rt.replace('/','.');
    if (blockLength >= optimalMinLength) {
      BCMethod subMethod=startSubMethod(mb,rt,selfContainedBlockStart,blockLength);
      return splitCodeIntoSubMethod(mb,ch,subMethod,selfContainedBlockStart,blockLength);
    }
 else     if (blockLength > bestSplitBlockLength) {
      bestSplitPC=selfContainedBlockStart;
      bestSplitBlockLength=blockLength;
      bestSplitRT=rt;
    }
  }
}
",0,0,0,,
336,{,"if (blockLength > (VMOpcode.MAX_CODE_LENGTH - 1)) {
}
 else {
  int me=vmDescriptor.lastIndexOf(')');
  if (vmDescriptor.charAt(me + 1) == 'L') {
    String rt=vmDescriptor.substring(me + 2,vmDescriptor.length() - 1);
    rt=rt.replace('/','.');
    if (blockLength >= optimalMinLength) {
      BCMethod subMethod=startSubMethod(mb,rt,selfContainedBlockStart,blockLength);
      return splitCodeIntoSubMethod(mb,ch,subMethod,selfContainedBlockStart,blockLength);
    }
 else     if (blockLength > bestSplitBlockLength) {
      bestSplitPC=selfContainedBlockStart;
      bestSplitBlockLength=blockLength;
      bestSplitRT=rt;
    }
  }
}
",0,0,0,,
337,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
338,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
339,} else {,"if (outerJCL != innerJCL) {
  innerJCL.addElement(newPred);
}
 else {
}
",0,0,0,,
340,{,"if (ddlStmt instanceof CreateTableNode) {
  invalidColName=cdn.getColumnList().verifyCreateConstraintColumnList(this);
  if (invalidColName != null) {
    throw StandardException.newException(SQLState.LANG_INVALID_CREATE_CONSTRAINT_COLUMN_LIST,ddlStmt.getRelativeName(),invalidColName);
  }
}
 else {
}
",0,0,0,,
341,} else {,"if (s instanceof BasicAuthenticationServiceImpl) {
  if (PropertyUtil.existsBuiltinUser(tc,roleName)) {
    return true;
  }
}
 else {
}
",0,0,0,,
342,} else {,"if (!(statPerm instanceof StatementRoutinePermission)) {
  break;
}
 else {
}
",0,0,0,,
343,} else {,"if (indexSC.next()) {
  if (indexSC.next()) {
    throw StandardException.newException(rollbackOnError ? SQLState.LANG_DEFERRED_DUPLICATE_KEY_CONSTRAINT_T : SQLState.LANG_DEFERRED_DUPLICATE_KEY_CONSTRAINT_S,cd.getConstraintName(),cd.getTableDescriptor().getName());
  }
}
 else {
}
",0,0,0,,
344,{,"if (SanityManager.DEBUG_ON(""ScanTrace"")) {
}
",0,0,0,,
345,{,"if (baseCC.isKeyed()) {
}
 else {
  if (isc != null || getRL) {
    if (baseRowLocation == null) {
      baseRowLocation=baseCC.newRowLocationTemplate();
    }
    baseCC.insertAndFetchLocation(baseRow.getRowArray(),baseRowLocation);
    if (isc != null) {
      isc.insert(baseRow,baseRowLocation);
    }
  }
 else {
    baseCC.insert(baseRow.getRowArray());
  }
}
",0,0,0,,
346,{,"if (SanityManager.DEBUG_ON(""ScanTrace"")) {
}
",0,0,0,,
347,{,"if (SanityManager.DEBUG_ON(""ScanTrace"")) {
}
",0,0,0,,
348,{,"if (sc.closeForEndTransaction(closeHeldControllers)) {
}
",0,0,0,,
349,{,"if (cc.closeForEndTransaction(closeHeldControllers)) {
}
",0,0,0,,
350,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
351,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
352,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
353,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
354,{,"if ((column_list != null) && (!column_list.get(i))) {
}
 else {
  ret_row[i]=dvf.getNull(format_ids[i],collation_ids[i]);
  if (SanityManager.DEBUG) {
    DataValueDescriptor o=ret_row[i];
    if (o == null) {
      SanityManager.THROWASSERT(""obj from DataValueFactory.newNull("" + format_ids[i] + "", ""+ collation_ids[i]+ "") null.""+ "";src column position = ""+ i+ "";dest column position = ""+ i+ "";num_cols = ""+ num_cols+ "";format_ids.length = ""+ format_ids.length);
    }
    if (!(o instanceof Storable))     SanityManager.THROWASSERT(""object:("" + o.getClass() + ""):(""+ o+ "") not an instanceof Storable"");
  }
}
",0,0,0,,
355,{,"if (store_module != null) {
  try {
    TransactionController tc=store_module.getTransaction(FileContainer.getContextService().getCurrentContextManager());
    conglom_id=tc.findConglomid(containerid);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
 else {
}
",0,0,0,,
356,{,"if (store_module != null) {
  try {
    TransactionController tc=store_module.getTransaction(FileContainer.getContextService().getCurrentContextManager());
    container_id=tc.findContainerid(conglomid);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
 else {
}
",0,0,0,,
357,{,"if ((value & ~0x3f) == 0) {
}
 else if ((value & 0x80) == 0) {
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT((value & 0x40) == 0x40);
  }
  value=(((value & 0x3f) << 8) | (data[offset++] & 0xff));
}
 else {
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT((value & 0x80) == 0x80);
  }
  value=(((value & 0x7f) << 24) | ((data[offset++] & 0xff) << 16) | ((data[offset++] & 0xff) << 8)| (data[offset++] & 0xff));
}
",0,0,0,,
358,{,"if ((fieldDataLength & ~0x3f) == 0) {
}
 else if ((fieldDataLength & 0x80) == 0) {
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT((fieldDataLength & 0x40) == 0x40);
  }
  fieldDataLength=(((fieldDataLength & 0x3f) << 8) | (data[offset + 1] & 0xff));
}
 else {
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT((fieldDataLength & 0x80) == 0x80);
  }
  fieldDataLength=(((fieldDataLength & 0x7f) << 24) | ((data[offset + 1] & 0xff) << 16) | ((data[offset + 2] & 0xff) << 8)| (data[offset + 3] & 0xff));
}
",0,0,0,,
359,{,"if (rbcount > 0 || irbcount > 0) {
}
",0,0,0,,
360,{,"if (SanityManager.DEBUG) {
}
",0,0,0,,
361,{,"if (stmt.wasExplicitlyClosed()) {
}
",0,0,0,,
362,{,"if (timeoutStr == null) {
  timeoutStr=sp.getProperty(""timeout"",""-1"");
}
 else {
}
",0,0,0,,
363,{,"if (useprocess == true) {
  Process pr=null;
  jvm javavm=null;
  try {
    System.out.println(""jvmName: "" + jvmName);
    if ((jvmName == null) || (jvmName.length() == 0))     jvmName=""jdk13"";
 else     if (jvmName.startsWith(""jdk13""))     jvmName=""jdk13"";
    javavm=jvm.getJvm(jvmName);
    if (javaCmd != null)     javavm.setJavaCmd(javaCmd);
    if (javavm == null)     System.out.println(""WHOA, javavm is NULL"");
    if (javavm == null)     pw.println(""WHOA, javavm is NULL"");
    if ((classpath != null) && (classpath.length() > 0)) {
      javavm.setClasspath(classpath);
    }
    Vector<String> v=javavm.getCommandLine();
    String mainClassName=""org.apache.derby.tools.sysinfo"";
    if (isModuleAware) {
      v.add(""-m"");
      v.add(ModuleUtil.TOOLS_MODULE_NAME + ""/"" + mainClassName);
    }
 else {
      v.addElement(mainClassName);
    }
    String[] sCmd=new String[v.size()];
    for (int i=0; i < v.size(); i++) {
      sCmd[i]=(String)v.elementAt(i);
    }
    pr=Runtime.getRuntime().exec(sCmd);
    BackgroundStreamDrainer stdout=new BackgroundStreamDrainer(pr.getInputStream(),null);
    BackgroundStreamDrainer stderr=new BackgroundStreamDrainer(pr.getErrorStream(),null);
    pr.waitFor();
    String result=HandleResult.handleResult(pr.exitValue(),stdout.getData(),stderr.getData(),pw);
    pw.flush();
    if ((framework != null) && (framework.length() > 0)) {
      pw.println(""Framework: "" + framework);
    }
    pr.destroy();
    pr=null;
  }
 catch (  Throwable t) {
    if (javavm == null)     System.out.println(""WHOA, javavm is NULL"");
    if (javavm == null)     pw.println(""WHOA, javavm is NULL"");
    System.out.println(""Process exception: "" + t);
    pw.println(""Process exception: "" + t);
    t.printStackTrace(pw);
    if (pr != null) {
      pr.destroy();
      pr=null;
    }
  }
}
 else {
}
",0,0,0,,
364,{,"if (se.getSQLState().equals(""08006"")) {
}
 else {
  System.out.println(""shutdown failed for "" + shutdownurl);
  JDBCDisplayUtil.ShowException(System.out,se);
  System.exit(1);
}
",0,0,0,,
365,} else {,"if (!isExcludable) {
  StackTraceElement[] stack=cause.getStackTrace();
  int i=0;
  while (i < stack.length && !stack[i].getMethodName().equals(""notImplemented"")) {
    ++i;
  }
  while (i < stack.length && stack[i].getMethodName().equals(""notImplemented"")) {
    ++i;
  }
  if (i == stack.length) {
  }
  unsupportedList.add(candidate.getClass().getName() + "": "" + method+ ""@""+ (i == stack.length ? ""no source"" : cause.getStackTrace()[i]));
}
 else {
}
",0,0,0,,
366,{,"if (cause instanceof SQLException) {
}
 else if (cause instanceof NullPointerException) {
}
 else if (cause instanceof ArrayIndexOutOfBoundsException) {
}
 else {
  recordUnexpectedError(candidate,iface,method,notUnderstoodList,cause);
}
",0,0,0,,
367,{,"if (cause instanceof NullPointerException) {
}
 else if (cause instanceof ArrayIndexOutOfBoundsException) {
}
 else {
  recordUnexpectedError(candidate,iface,method,notUnderstoodList,cause);
}
",0,0,0,,
368,{,"if (cause instanceof ArrayIndexOutOfBoundsException) {
}
 else {
  recordUnexpectedError(candidate,iface,method,notUnderstoodList,cause);
}
",0,0,0,,
369,{,"if (!normalUserName.equals(jdbcUserName)) {
}
",0,0,0,,
370,{,"if (dataOffset != 0) {
}
",0,0,0,,
371,{,"if (rows == 3 || caught) {
}
 else {
  System.out.println(""FAIL: thread "" + _myCount + "" only got ""+ rows+ "" rows and caught was ""+ caught);
}
",0,0,0,,
372,) {,"if (e.equals(""X0X08"") || e.equals(""X0X05"") || e.equals(""42X05"")|| e.equals(""42Y55"")|| e.equals(""42000"")|| e.equals(""40001"")|| e.equals(""40XL1"")|| e.equals(""40XL2"")|| e.equals(""42Y07"")|| e.equals(""42Y55"")) {
}
 else {
  throw se;
}
",0,0,0,,
373,{,"if (true) {
  conn=DriverManager.getConnection(connectionURL);
  System.out.println(""Unexpectdly connected as: "" + connectionURL);
}
 else {
}
",0,0,0,,
374,{,"if (true) {
  conn=DriverManager.getConnection(connectionURL);
  System.out.println(""Unexpectdly connected as: "" + connectionURL);
}
 else {
}
",0,0,0,,
375,{,"if (true) {
  conn=DriverManager.getConnection(connectionURL);
  System.out.println(""Unexpectedly connected: "" + connectionURL);
  assertTrue(""Unexpectedly connected: "" + connectionURL,false);
}
 else {
}
",0,0,0,,
376,{,"if (!isPublicApi) {
}
",0,0,0,,
377,{,"if (!isFinal) {
}
",0,0,0,,
378,else {,"if (!validProps.contains(anAtt)) {
  if (validProps.contains(anAtt.toLowerCase(java.util.Locale.ENGLISH))) {
    errors.addElement(LocalizedResource.getMessage(""TL_incorCase""));
  }
 else {
    errors.addElement(LocalizedResource.getMessage(""TL_unknownAtt""));
  }
}
 else {
}
",0,0,0,,
379,{,"if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {
}
 else return false;
",0,0,0,,
380,{,"if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {
}
 else return false;
",0,0,0,,
381,{,"if (lastP != null) {
}
",0,0,0,,
382,{,"if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {
}
 else {
  return false;
}
",0,0,0,,
383,{,"if (nextCH >= UNI_SUR_LOW_START && nextCH <= UNI_SUR_LOW_END) {
}
 else {
  return false;
}
",0,0,0,,
384,{,"if (this.adminSess != null) {
}
",0,0,0,,
385,{,"if (this.adminSess != null) {
}
",0,0,0,,
386,{,"if (this.adminSess != null) {
}
",0,0,0,,
387,{,"if (this.adminSess != null) {
}
",0,0,0,,
388,{,"if (this.adminSess != null) {
}
",0,0,0,,
389,{,"if (this.adminSess != null) {
}
",0,0,0,,
390,{,"if (this.adminSess != null) {
}
",0,0,0,,
391,{,"if (this.adminSess != null) {
}
",0,0,0,,
392,{,"if (this.adminSess != null) {
}
",0,0,0,,
393,{,"if (this.adminSess != null) {
}
",0,0,0,,
394,{,"if (this.adminSess != null) {
}
",0,0,0,,
395,{,"if (this.adminSess != null) {
}
",0,0,0,,
396,{,"if (ex.getErrorId() == GlobalErrIds.ROLE_NOT_FOUND) {
}
 else {
  String warning=methodName + "" caught SecurityException="" + ex.getMessage();
  LOG.warn(warning);
}
",0,0,0,,
397,{,"if (ex.getErrorId() == GlobalErrIds.USER_ADD_FAILED_ALREADY_EXISTS) {
}
 else {
  LOG.error(szLocation + ""testAddUsers caught SecurityException rc="" + ex.getErrorId()+ "", msg=""+ ex.getMessage(),ex);
  fail(ex.getMessage());
}
",0,0,0,,
398,{,"if (leaf.getNbElems() < btree.getPageSize() / 2) {
}
 else {
}
",0,0,0,,
399,{,"if (leaf.getNbElems() < btree.getPageSize() / 2) {
}
 else {
}
",0,0,0,,
400,{,"if (page.getNbElems() == btree.getPageSize()) {
}
 else {
  if (page.isLeaf()) {
    BTreeFactory.setKey(btree,page,page.getNbElems(),tuple.getKey());
    ValueHolder<V> valueHolder=new InMemoryValueHolder<V>(btree,tuple.getValue());
    BTreeFactory.setValue(btree,page,page.getNbElems(),valueHolder);
  }
 else {
    BTreeFactory.setKey(btree,page,page.getNbElems(),tuple.getKey());
    PageHolder<K,V> pageHolder=new PageHolder<K,V>(btree,pageStack[level - 1]);
    ((InMemoryNode<K,V>)page).setPageHolder(page.getNbElems(),pageHolder);
  }
}
",0,0,0,,
401,{,"if (!RecordManager.COPIED_PAGE_BTREE_NAME.equals(btreeName) && !RecordManager.BTREE_OF_BTREES_NAME.equals(btreeName)) {
}
",0,0,0,,
402,{,"if ((pageMask & mask) != 0) {
}
",0,0,0,,
403,{,"if (addedElems % 100 == 0) {
}
",0,0,0,,
404,{,"if (j % 100 == 0) {
}
",0,0,0,,
405,} else {,"if (jsonNode.isObject()) {
  output=lintObject(jsonNode);
}
 else {
}
",0,0,0,,
406,} else {,"if (jsonNode.isObject()) {
  output=output && lintObject(jsonNode);
}
 else {
}
",0,0,0,,
407,} else {,"if (objectJsonNode.isObject()) {
  if (isSchema(objectJsonNode)) {
    output=lintSchema(objectJsonNode);
  }
 else {
    output=lintResource(objectJsonNode);
  }
}
 else {
}
",0,0,0,,
408,{,"if (LOG.isDebugEnabled()) {
}
",0,0,0,,
409,{,"if (LOG.isDebugEnabled()) {
}
",0,0,0,,
410,{,"if (LOG.isDebugEnabled()) {
}
",0,0,0,,
411,{,"if (i > 17 && i < 21) {
}
 else {
  table.put(partitionTxn,istr,istr);
}
",0,0,0,,
412,{,"if (i > 17 + SIZE && i < 21 + SIZE) {
}
 else {
  table.put(partitionTxn,istr,istr);
}
",0,0,0,,
413,{,"if (isFirst) {
  isFirst=false;
}
 else {
}
",0,0,0,,
414,{,"if (node instanceof AssertionNode) {
}
 else if (node.isLeaf()) {
  LeafNode leaf=(LeafNode)node;
  try {
    if (node instanceof PresenceNode) {
      count=getPresenceScan(partitionTxn,(PresenceNode)leaf);
    }
 else     if (node instanceof EqualityNode) {
      count=getEqualityScan(partitionTxn,(EqualityNode)leaf);
    }
 else     if (node instanceof GreaterEqNode) {
      count=getGreaterLessScan(partitionTxn,(GreaterEqNode)leaf,SimpleNode.EVAL_GREATER);
    }
 else     if (node instanceof LessEqNode) {
      count=getGreaterLessScan(partitionTxn,(SimpleNode)leaf,SimpleNode.EVAL_LESSER);
    }
 else     if (node instanceof SubstringNode) {
      count=getSubstringScan(partitionTxn,(SubstringNode)leaf);
    }
 else     if (node instanceof ExtensibleNode) {
      count=getFullScan(partitionTxn,leaf);
    }
 else     if (node instanceof ApproximateNode) {
      count=getEqualityScan(partitionTxn,(ApproximateNode)leaf);
    }
 else {
      throw new IllegalArgumentException(I18n.err(I18n.ERR_711));
    }
  }
 catch (  IndexNotFoundException|IOException e) {
    throw new LdapOtherException(e.getMessage(),e);
  }
}
 else {
  if (node instanceof AndNode) {
    count=getConjunctionScan(partitionTxn,(AndNode)node);
  }
 else   if (node instanceof OrNode) {
    count=getDisjunctionScan(partitionTxn,(OrNode)node);
  }
 else   if (node instanceof NotNode) {
    annotate(partitionTxn,((NotNode)node).getFirstChild());
    count=Long.MAX_VALUE;
  }
 else {
    throw new IllegalArgumentException(I18n.err(I18n.ERR_712));
  }
}
",0,0,0,,
415,{,"if (event instanceof AttributeDeletedEvent) {
}
",0,0,0,,
416,{,"if (buttonId == IDialogConstants.OK_ID) {
  int sortLimit=preferences.getSortLimit();
  try {
    sortLimit=Integer.parseInt(sortLimitText.getText().trim());
  }
 catch (  NumberFormatException nfe) {
  }
  IPreferenceStore store=BrowserCommonActivator.getDefault().getPreferenceStore();
  store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_LEAF_ENTRIES_FIRST,leafEntriesFirstButton.getSelection());
  store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_CONTAINER_ENTRIES_FIRST,containerEntriesFirstButton.getSelection());
  store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_META_ENTRIES_LAST,metaEntriesLastButton.getSelection());
  store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_ORDER,sortEntriesDescendingButton.getSelection() ? BrowserCoreConstants.SORT_ORDER_DESCENDING : BrowserCoreConstants.SORT_ORDER_ASCENDING);
  store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_BY,sortEntriesByCombo.getSelectionIndex() == 2 ? BrowserCoreConstants.SORT_BY_RDN_VALUE : sortEntriesByCombo.getSelectionIndex() == 1 ? BrowserCoreConstants.SORT_BY_RDN : BrowserCoreConstants.SORT_BY_NONE);
  store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_LIMIT,sortLimit);
  if (sortSearchesAscendingButton.getSelection()) {
    store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_SEARCHES_ORDER,BrowserCoreConstants.SORT_ORDER_ASCENDING);
  }
 else   if (sortSearchesDescendingButton.getSelection()) {
    store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_SEARCHES_ORDER,BrowserCoreConstants.SORT_ORDER_DESCENDING);
  }
 else   if (sortSearchesNoSortingButton.getSelection()) {
    store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_SEARCHES_ORDER,BrowserCoreConstants.SORT_ORDER_NONE);
  }
  if (sortBookmarksAscendingButton.getSelection()) {
    store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_BOOKMARKS_ORDER,BrowserCoreConstants.SORT_ORDER_ASCENDING);
  }
 else   if (sortBookmarksDescendingButton.getSelection()) {
    store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_BOOKMARKS_ORDER,BrowserCoreConstants.SORT_ORDER_DESCENDING);
  }
 else   if (sortBookmarksNoSortingButton.getSelection()) {
    store.setValue(BrowserCommonConstants.PREFERENCE_BROWSER_SORT_BOOKMARKS_ORDER,BrowserCoreConstants.SORT_ORDER_NONE);
  }
}
 else {
}
",0,0,0,,
417,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  dummyMonitor.reportError(e);
  break;
}
",0,0,0,,
418,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  monitor.reportError(ce);
}
",0,0,0,,
419,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  monitor.reportError(e);
}
",0,0,0,,
420,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  monitor.reportError(e);
}
",0,0,0,,
421,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  monitor.reportError(loe);
}
",0,0,0,,
422,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  monitor.reportError(ne);
}
",0,0,0,,
423,{,"if (ldapStatusCode == 3 || ldapStatusCode == 4 || ldapStatusCode == 11) {
}
 else {
  monitor.reportError(ne);
}
",0,0,0,,
424,{,"if (elements.length > BrowserUIPlugin.getDefault().getPreferenceStore().getInt(BrowserUIConstants.PREFERENCE_SEARCHRESULTEDITOR_SORT_FILTER_LIMIT) && mainWidget.getViewer() != null && !mainWidget.getViewer().getTable().isDisposed()) {
}
 else if (elements.length > 0 && mainWidget.getViewer() != null && !mainWidget.getViewer().getTable().isDisposed()) {
  filteredAndSortedElements=configuration.getFilter().filter(mainWidget.getViewer(),"""",elements);
  configuration.getSorter().sort(mainWidget.getViewer(),filteredAndSortedElements);
}
",0,0,0,,
425,{,"if (adapterIdAttribute != null) {
  String adapterId=adapterIdAttribute.getValue();
  LdapServerAdapterExtension ldapServerAdapterExtension=LdapServerAdapterExtensionsManager.getDefault().getLdapServerAdapterExtensionById(adapterId);
  if (ldapServerAdapterExtension != null) {
    server.setLdapServerAdapterExtension(ldapServerAdapterExtension);
  }
 else {
    UnknownLdapServerAdapterExtension unknownLdapServerAdapterExtension=new UnknownLdapServerAdapterExtension();
    unknownLdapServerAdapterExtension.setId(adapterId);
    Attribute adapterNameAttribute=element.attribute(ADAPTER_NAME_ATTRIBUTE);
    if (adapterNameAttribute != null) {
      unknownLdapServerAdapterExtension.setName(adapterNameAttribute.getValue());
    }
    Attribute adapterVendorAttribute=element.attribute(ADAPTER_VENDOR_ATTRIBUTE);
    if (adapterVendorAttribute != null) {
      unknownLdapServerAdapterExtension.setVendor(adapterVendorAttribute.getValue());
    }
    Attribute adapterVersionAttribute=element.attribute(ADAPTER_VERSION_ATTRIBUTE);
    if (adapterVersionAttribute != null) {
      unknownLdapServerAdapterExtension.setVersion(adapterVersionAttribute.getValue());
    }
    server.setLdapServerAdapterExtension(unknownLdapServerAdapterExtension);
  }
}
 else {
}
",0,0,0,,
426,{,"if (autoWrap) {
}
",0,0,0,,
427,{,"if (line instanceof LdifControlLine) {
  LdifControlLine controlLine=(LdifControlLine)line;
  int controlSpecLength=controlLine.getRawControlSpec().length();
  int controlTypeLength=controlLine.getRawControlType().length();
  int oidLength=controlLine.getRawOid().length();
  int critLength=controlLine.getRawCriticality().length();
  int valueTypeLength=controlLine.getRawControlValueType().length();
  int valueLength=controlLine.getRawControlValue().length();
  this.addStyleRange(presentation,offset,controlSpecLength,KEYWORD_TEXT_ATTRIBUTE);
  this.addStyleRange(presentation,offset + controlSpecLength,controlTypeLength,VALUETYPE_TEXT_ATTRIBUTE);
  this.addStyleRange(presentation,offset + controlSpecLength + controlTypeLength,oidLength,ATTRIBUTE_TEXT_ATTRIBUTE);
  this.addStyleRange(presentation,offset + controlSpecLength + controlTypeLength+ oidLength,critLength,KEYWORD_TEXT_ATTRIBUTE);
  this.addStyleRange(presentation,offset + controlSpecLength + controlTypeLength+ oidLength+ critLength,valueTypeLength,VALUETYPE_TEXT_ATTRIBUTE);
  this.addStyleRange(presentation,offset + controlSpecLength + controlTypeLength+ oidLength+ critLength+ valueTypeLength,valueLength,VALUE_TEXT_ATTRIBUTE);
}
 else {
}
",0,0,0,,
428,{,"if (parts[i] instanceof LdifInvalidPart) {
}
 else if (parts[i] instanceof LdifEOFPart) {
}
 else {
  System.out.println(""LdifDamagerRepairer: Unspecified Token: "" + parts[i].getClass());
}
",0,0,0,,
429,{,"if (parts[i] instanceof LdifEOFPart) {
}
 else {
  System.out.println(""LdifDamagerRepairer: Unspecified Token: "" + parts[i].getClass());
}
",0,0,0,,
430,{,"if (element instanceof ObjectClass) {
}
",0,0,0,,
431,{,"if (element instanceof ObjectClass) {
}
",0,0,0,,
432,{,"if (isIDE) {
}
 else {
  boolean canOverwrite=false;
  while (!canOverwrite) {
    path=openFileDialogInUIThread(shell);
    if (path == null) {
      return null;
    }
    final File directory=new File(path);
    if (!directory.exists()) {
      CommonUIUtils.openErrorDialog(""The directory does not exist."");
      continue;
    }
    if (!directory.isDirectory()) {
      CommonUIUtils.openErrorDialog(""The location is not a directory."");
      continue;
    }
    if (!directory.canWrite()) {
      CommonUIUtils.openErrorDialog(""The directory is not writable."");
      continue;
    }
    if (!isEmpty(directory)) {
      CommonUIUtils.openErrorDialog(""The directory is not empty."");
      continue;
    }
    break;
  }
}
",0,0,0,,
433,{,"if ((database instanceof OlcHdbConfig) || (database instanceof OlcBdbConfig)) {
}
",0,0,0,,
434,{,"if ((database instanceof OlcHdbConfig) || (database instanceof OlcBdbConfig)) {
}
 else {
}
",0,0,0,,
435,{,"if ((database instanceof OlcHdbConfig) || (database instanceof OlcBdbConfig)) {
}
 else {
}
",0,0,0,,
436,{,"if ((database instanceof OlcHdbConfig) || (database instanceof OlcBdbConfig)) {
}
",0,0,0,,
437,{,"if (accessLogPurgeValues.length == 2) {
  try {
    PurgeTimeSpan purgeAgeTimeSpan=new PurgeTimeSpan(accessLogPurgeValues[0]);
    purgeAgeDaysSpinner.setSelection(purgeAgeTimeSpan.getDays());
    purgeAgeHoursSpinner.setSelection(purgeAgeTimeSpan.getHours());
    purgeAgeMinutesSpinner.setSelection(purgeAgeTimeSpan.getMinutes());
    purgeAgeSecondsSpinner.setSelection(purgeAgeTimeSpan.getSeconds());
    PurgeTimeSpan purgeIntervalTimeSpan=new PurgeTimeSpan(accessLogPurgeValues[1]);
    purgeIntervalDaysSpinner.setSelection(purgeIntervalTimeSpan.getDays());
    purgeIntervalHoursSpinner.setSelection(purgeIntervalTimeSpan.getHours());
    purgeIntervalMinutesSpinner.setSelection(purgeIntervalTimeSpan.getMinutes());
    purgeIntervalSecondsSpinner.setSelection(purgeIntervalTimeSpan.getSeconds());
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
}
 else {
}
",0,0,0,,
438,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
439,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
440,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
441,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
442,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
443,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
444,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
445,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
446,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
447,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
448,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
449,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
450,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
451,{,"if (overlay == null) {
}
 else {
}
",0,0,0,,
452,{,"if (spacePos == -1) {
}
 else {
  String urlStr=tcpBufferStr.substring(9,spacePos);
  try {
    this.setListener(new URI(urlStr));
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  pos=spacePos;
  while (pos < lowerCaseTcpBuffer.length()) {
    if (lowerCaseTcpBuffer.charAt(pos) != ' ') {
      break;
    }
    pos++;
  }
}
",0,0,0,,
453,{,"if ((size < 0L) || (size > MAX_TCP_BUFFER_SIZE)) {
}
",0,0,0,,
454,{,"if (objectClassObject != null) {
  Set<String> objectClassAttributeValues=new HashSet<>();
  computeObjectClassAttributeValues(objectClassAttributeValues,objectClassObject);
  addAttributeTypeValues(SchemaConstants.OBJECT_CLASS_AT,objectClassAttributeValues,entry);
}
 else {
}
",0,0,0,,
455,{,"if (topObjectClass != null) {
}
",0,0,0,,
456,{,"if (attributeTypes.size() != 1) {
}
 else {
  updateAttributeType((AttributeType)attributeTypes.get(0));
}
",0,0,0,,
457,{,"if (objectclasses.size() != 1) {
}
 else {
  updateObjectClass((ObjectClass)objectclasses.get(0));
}
",0,0,0,,
458,{,"if (correctSchemaConnectors.size() == 1) {
  correctSchemaConnector=correctSchemaConnectors.get(0);
}
 else {
}
",0,0,0,,
459,{,"if (value) {
}
 else {
  modifyAttributeValue(uncheckedValue);
}
",0,0,0,,
460,{,"if (widget instanceof TemplateTextField) {
  writeTextfield(element,(TemplateTextField)widget);
}
 else {
}
",0,0,0,,
461,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
462,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
463,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
464,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
465,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
466,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
467,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
468,} else {,"if (in.isSet == 1) {
  tdigest.add(in.value);
}
 else {
}
",0,0,0,,
469,} else if (inputIndex == RIGHT_INDEX && (rightJoinIndex == 0 || rightJoinIndex == -1)) {,"if (inputIndex == RIGHT_INDEX && (rightJoinIndex == 0 || rightJoinIndex == -1)) {
}
 else {
  return;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
470,} else {,"if (!indexInfo.hasFunctional()) {
  Map<LogicalExpression,Integer> projectExprs=Maps.newLinkedHashMap();
  DrillParseContext parserContext=new DrillParseContext(PrelUtil.getPlannerSettings(input.getCluster()));
  int idx=0;
  for (  RexNode rex : projectRexs) {
    projectExprs.put(DrillOptiq.toDrill(parserContext,input,rex),idx);
    idx++;
  }
  int idxFieldCount=0;
  for (  LogicalExpression expr : indexInfo.getIndexDesc().getIndexColumns()) {
    if (!projectExprs.containsKey(expr)) {
      break;
    }
    RelFieldCollation.Direction dir=indexInfo.getIndexDesc().getCollation().getFieldCollations().get(idxFieldCount).direction;
    if (dir == null) {
      break;
    }
    newFields.add(new RelFieldCollation(projectExprs.get(expr),dir,RelFieldCollation.NullDirection.UNSPECIFIED));
  }
  idxFieldCount++;
}
 else {
}
",0,0,0,,
471,} else {,"if (!indexInfo.hasFunctional()) {
  for (int projectExprIdx=0; projectExprIdx < projectRexs.size(); projectExprIdx++) {
    RexNode n=projectRexs.get(projectExprIdx);
    if (n instanceof RexInputRef) {
      RexInputRef ref=(RexInputRef)n;
      boolean eligibleForCollation=true;
      int maxIndex=getIndexFromCollation(ref.getIndex(),inputFieldCollations);
      if (maxIndex < 0) {
        eligibleForCollation=false;
        continue;
      }
      for (int i=0; i < maxIndex; i++) {
        int fieldIdx=inputFieldCollations.get(i).getFieldIndex();
        List<RexNode> conditions=collationFilterMap != null ? collationFilterMap.get(fieldIdx) : null;
        if ((conditions == null || conditions.size() == 0) && i < maxIndex - 1) {
          eligibleForCollation=false;
          break;
        }
 else {
          for (          RexNode r : conditions) {
            if (!(r.getKind() == SqlKind.EQUALS)) {
              eligibleForCollation=false;
              break;
            }
          }
        }
      }
      if (eligibleForCollation) {
        for (        RelFieldCollation c : inputFieldCollations) {
          if (ref.getIndex() == c.getFieldIndex()) {
            RelFieldCollation outFieldCollation=new RelFieldCollation(projectExprIdx,c.getDirection(),c.nullDirection);
            outputFieldCollations.add(outFieldCollation);
          }
        }
      }
    }
  }
}
 else {
}
",0,0,0,,
472,} else if (unwrap.getStatus() == Status.CLOSED && netInBuffer.position() == 0 && read > 0) {,"if (unwrap.getStatus() == Status.CLOSED && netInBuffer.position() == 0 && read > 0) {
}
 else {
  throw new IOException(sm.getString(""channel.nio.ssl.unwrapFail"",unwrap.getStatus()));
}
",0,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
473,} else {,"if (a == 0) {
  out0=out4;
}
 else {
}
",0,0,0,,
474,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
475,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
476,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
477,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
478,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
479,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
480,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
481,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
482,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
483,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
484,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
485,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
486,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
487,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
488,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
489,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
490,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
491,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
492,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
493,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
494,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
495,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
496,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
497,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
498,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
499,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
500,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
501,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
502,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
503,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
504,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
505,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
506,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
507,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
508,} else {,"if (taskMonitor.getNumRunningTasks() < maxNumConcurrentSubTasks) {
  submitNewTask(taskMonitor,subTaskSpecIterator.next());
}
 else {
}
",0,0,0,,
509,&& actual.getShardSpec().getClass() == LinearShardSpec.class) {,"if (expected.getShardSpec().getClass() == LinearShardSpec.class && actual.getShardSpec().getClass() == LinearShardSpec.class) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, ),
"
510,"if (lastIndexOf(decodedBody, '%', starIdx, endIdx) > hostEndIdx) {","if (lastIndexOf(decodedBody,'%',starIdx,endIdx) > hostEndIdx) {
}
 else {
  port=Integer.parseInt(decodedBody.substring(hostEndIdx + 1,endIdx));
  endIdx=hostEndIdx;
}
",0,0,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
511,} else {,"if (o != null) {
  FutureTask<T> f=new FutureTask<T>(new Callable<T>(){
    @Override public T call() throws Exception {
      return o;
    }
  }
);
  f.run();
  return f;
}
 else {
}
",0,0,0,,
512,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
513,|| t.getCause().getClass() == java.net.ConnectException.class)) {,"if (t != null && t.getCause() != null && t.getCause().getClass() != null && (t.getCause().getClass() == java.net.ConnectException.class || t.getCause().getClass() == java.net.ConnectException.class)) {
}
 else {
  t.printStackTrace();
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
QualifiedName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, ),
"
514,} else {,"if (o != null) {
  if (o instanceof CompletableFuture) {
    return (CompletableFuture<T>)o;
  }
  return CompletableFuture.completedFuture(o);
}
 else {
}
",0,0,0,,
515,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
516,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
517,} else {,"if (configs != null && configs.size() > 0) {
  for (  OverrideConfig overrideConfig : configs) {
    if (Constants.WEIGHT.equals(overrideConfig.getType())) {
      if (Constants.SERVICE.equals(overrideDTO.getScope())) {
        oldWeight=OverrideUtils.configtoWeightDTO(overrideConfig,scope,id);
      }
      int index=configs.indexOf(overrideConfig);
      OverrideConfig newConfig=OverrideUtils.weightDTOtoConfig(weightDTO);
      configs.set(index,newConfig);
      break;
    }
  }
  dynamicConfiguration.setConfig(path,YamlParser.dumpObject(overrideDTO));
}
 else {
}
",0,0,0,,
518,} else {,"if (config != null) {
  OverrideDTO overrideDTO=YamlParser.loadObject(config,OverrideDTO.class);
  List<OverrideConfig> configs=overrideDTO.getConfigs();
  if (configs != null && configs.size() > 0) {
    for (    OverrideConfig overrideConfig : configs) {
      if (Constants.WEIGHT.equals(overrideConfig.getType())) {
        if (Constants.SERVICE.equals(overrideDTO.getScope())) {
          oldWeight=OverrideUtils.configtoWeightDTO(overrideConfig,scope,id);
        }
        int index=configs.indexOf(overrideConfig);
        OverrideConfig newConfig=OverrideUtils.weightDTOtoConfig(weightDTO);
        configs.set(index,newConfig);
        break;
      }
    }
    dynamicConfiguration.setConfig(path,YamlParser.dumpObject(overrideDTO));
  }
 else {
  }
}
 else {
}
",0,0,0,,
519,} else {,"if (configs != null && configs.size() > 0) {
  for (  OverrideConfig overrideConfig : configs) {
    if (Constants.BALANCING.equals(overrideConfig.getType())) {
      if (Constants.SERVICE.equals(overrideDTO.getScope())) {
        oldBalancing=OverrideUtils.configtoBalancingDTO(overrideConfig,Constants.SERVICE,overrideDTO.getKey());
      }
      int index=configs.indexOf(overrideConfig);
      OverrideConfig newConfig=OverrideUtils.balancingDTOtoConfig(balancingDTO);
      configs.set(index,newConfig);
      break;
    }
  }
  dynamicConfiguration.setConfig(path,YamlParser.dumpObject(overrideDTO));
}
 else {
}
",0,0,0,,
520,} else {,"if (config != null) {
  OverrideDTO overrideDTO=YamlParser.loadObject(config,OverrideDTO.class);
  List<OverrideConfig> configs=overrideDTO.getConfigs();
  if (configs != null && configs.size() > 0) {
    for (    OverrideConfig overrideConfig : configs) {
      if (Constants.BALANCING.equals(overrideConfig.getType())) {
        if (Constants.SERVICE.equals(overrideDTO.getScope())) {
          oldBalancing=OverrideUtils.configtoBalancingDTO(overrideConfig,Constants.SERVICE,overrideDTO.getKey());
        }
        int index=configs.indexOf(overrideConfig);
        OverrideConfig newConfig=OverrideUtils.balancingDTOtoConfig(balancingDTO);
        configs.set(index,newConfig);
        break;
      }
    }
    dynamicConfiguration.setConfig(path,YamlParser.dumpObject(overrideDTO));
  }
 else {
  }
}
 else {
}
",0,0,0,,
521,}  else {,"if (path.contains(""/"")) {
  String application=path.split(""/"")[0];
  String service=path.split(""/"")[1];
  Map<String,List<String>> params=queryStringDecoder.parameters();
  if (params.containsKey(""group"")) {
    service=params.get(""group"").get(0) + ""/"" + service;
  }
  if (params.containsKey(""version"")) {
    service=service + "":"" + params.get(""version"").get(0);
  }
  ByteBuf raw=msg.content();
  String info=raw.toString(CharsetUtil.UTF_8);
  ServiceDefinition serviceDefinition=JSON.parseObject(info,ServiceDefinition.class);
  serviceDefinition.setServiceID(service);
  serviceDefinition.setApplication(application);
  doRequest(ctx,serviceDefinition,msg);
}
 else {
}
",0,0,0,,
522,{,"if (t.equals(""\r"")) {
}
 else if (t.equals(""\n"")) {
}
 else {
  t=t.trim();
  if (t.startsWith(""* ""))   list.add(t.substring(2));
 else   if (t.startsWith(""*""))   list.add(t.substring(1));
 else   list.add(t);
}
",0,0,0,,
523,{,"if (t.equals(""\n"")) {
}
 else {
  t=t.trim();
  if (t.startsWith(""* ""))   list.add(t.substring(2));
 else   if (t.startsWith(""*""))   list.add(t.substring(1));
 else   list.add(t);
}
",0,0,0,,
524,{,"if (event == Session.DOWN) {
}
",0,0,0,,
525,{,"if ((layer.getLoaderType() == LoaderType.MANY || layer.getLoaderType() == LoaderType.SINGLE) && Runtime.version().feature() == 11 && b.getSymbolicName().equals(TESTBUNDLES_DEPENDENT_X)) {
}
 else {
  throw e;
}
",0,0,0,,
526,{,"if (name.endsWith("":"")) {
}
 else {
  filter.append(""("");
  filter.append(name);
  filter.append(""="");
  filter.append(value);
  filter.append("")"");
  set.add(name);
}
",0,0,0,,
527,{,"if (REFERRAL.equals(element)) {
}
 else if (RESOURCE.equals(element)) {
  Resource resource=parseResource(reader,baseUri);
  repository.addResource(resource);
}
 else {
  PullParser.ignoreTag(reader);
}
",0,0,0,,
528,} else {,"if (factoryPid != null) {
  writer.put(EntryParam.factoryPid,factoryPid);
}
 else {
}
",0,0,0,,
529,} else {,"if (m_instanceFactory != null) {
  if (m_instanceFactory instanceof Class) {
    try {
      InvocationUtil.ComponentInstance ci=InvocationUtil.createInstance((Class<?>)m_instanceFactory,VOID);
      factory=ci.m_instance;
    }
 catch (    Exception e) {
      m_logger.log(Logger.LOG_ERROR,""Could not create factory instance of class "" + m_instanceFactory + ""."",e);
    }
  }
 else {
    factory=m_instanceFactory;
  }
}
 else {
}
",0,0,0,,
530,} else {,"if (makeAvailable) {
  getComponentContext().handleEvent(this,EventType.ADDED,new ServiceEventImpl(m_component,ref,m_serviceInstance));
}
 else {
}
",0,0,0,,
531,{,"if (entry.endsWith(""/"")) {
}
 else if (entry.equalsIgnoreCase(""META-INF/MANIFEST.MF"")) {
  if (manifest == null) {
    manifest=entry;
  }
}
 else if (entry.toUpperCase().startsWith(""META-INF/"") && entry.indexOf('/',""META-INF/"".length()) < 0) {
  entries.add(count++,entry);
}
 else {
  entries.add(entry);
}
",0,0,0,,
532,{,"if (entry.endsWith(""/"")) {
}
 else if (entry.equalsIgnoreCase(""META-INF/MANIFEST.MF"")) {
  if (manifest == null) {
    manifest=entry;
  }
}
 else if (entry.toUpperCase().startsWith(""META-INF/"") && entry.indexOf('/',""META-INF/"".length()) < 0) {
  entries.add(count++,entry);
}
 else {
  entries.add(entry);
}
",0,0,0,,
533,{,"if (attributeName.equals(""Deprecated"")) {
}
 else if (attributeName.equals(""RuntimeVisibleAnnotations"")) {
  doAnnotations(in,member,RetentionPolicy.RUNTIME,access_flags);
}
 else if (attributeName.equals(""RuntimeInvisibleAnnotations"")) {
  doAnnotations(in,member,RetentionPolicy.CLASS,access_flags);
}
 else if (attributeName.equals(""RuntimeVisibleParameterAnnotations"")) {
  doParameterAnnotations(in,member,RetentionPolicy.RUNTIME,access_flags);
}
 else if (attributeName.equals(""RuntimeInvisibleParameterAnnotations"")) {
  doParameterAnnotations(in,member,RetentionPolicy.CLASS,access_flags);
}
 else if (attributeName.equals(""RuntimeVisibleTypeAnnotations"")) {
  doTypeAnnotations(in,member,RetentionPolicy.RUNTIME,access_flags);
}
 else if (attributeName.equals(""RuntimeInvisibleTypeAnnotations"")) {
  doTypeAnnotations(in,member,RetentionPolicy.CLASS,access_flags);
}
 else if (attributeName.equals(""InnerClasses"")) {
  doInnerClasses(in);
}
 else if (attributeName.equals(""EnclosingMethod"")) {
  doEnclosingMethod(in);
}
 else if (attributeName.equals(""SourceFile"")) {
  doSourceFile(in);
}
 else if (attributeName.equals(""Code"")) {
  doCode(in,crawl);
}
 else if (attributeName.equals(""Signature"")) {
  doSignature(in,member,access_flags);
}
 else if (attributeName.equals(""ConstantValue"")) {
  doConstantValue(in);
}
 else if (attributeName.equals(""AnnotationDefault"")) {
  doElementValue(in,member,RetentionPolicy.RUNTIME,access_flags);
}
 else if (attributeName.equals(""Exceptions"")) {
  doExceptions(in,access_flags);
}
 else if (attributeName.equals(""BootstrapMethods"")) {
  doBootstrapMethods(in);
}
 else if (attributeName.equals(""StackMapTable"")) {
  doStackMapTable(in);
}
 else {
  if (attribute_length > 0x7FFFFFFF) {
    throw new IllegalArgumentException(""Attribute > 2Gb"");
  }
  in.skipBytes((int)attribute_length);
}
",0,0,0,,
534,{,"if (frame_type <= 63) {
}
 else if (frame_type <= 127) {
  verification_type_info(in);
}
 else if (frame_type <= 246) {
}
 else if (frame_type <= 247) {
  final int offset_delta=in.readUnsignedShort();
  verification_type_info(in);
}
 else if (frame_type <= 250) {
  final int offset_delta=in.readUnsignedShort();
}
 else if (frame_type <= 251) {
  final int offset_delta=in.readUnsignedShort();
}
 else if (frame_type <= 254) {
  final int offset_delta=in.readUnsignedShort();
  final int number_of_locals=frame_type - 251;
  for (int n=0; n < number_of_locals; n++) {
    verification_type_info(in);
  }
}
 else if (frame_type <= 255) {
  final int offset_delta=in.readUnsignedShort();
  final int number_of_locals=in.readUnsignedShort();
  for (int n=0; n < number_of_locals; n++) {
    verification_type_info(in);
  }
  final int number_of_stack_items=in.readUnsignedShort();
  for (int n=0; n < number_of_stack_items; n++) {
    verification_type_info(in);
  }
}
",0,0,0,,
535,{,"if (frame_type <= 246) {
}
 else if (frame_type <= 247) {
  final int offset_delta=in.readUnsignedShort();
  verification_type_info(in);
}
 else if (frame_type <= 250) {
  final int offset_delta=in.readUnsignedShort();
}
 else if (frame_type <= 251) {
  final int offset_delta=in.readUnsignedShort();
}
 else if (frame_type <= 254) {
  final int offset_delta=in.readUnsignedShort();
  final int number_of_locals=frame_type - 251;
  for (int n=0; n < number_of_locals; n++) {
    verification_type_info(in);
  }
}
 else if (frame_type <= 255) {
  final int offset_delta=in.readUnsignedShort();
  final int number_of_locals=in.readUnsignedShort();
  for (int n=0; n < number_of_locals; n++) {
    verification_type_info(in);
  }
  final int number_of_stack_items=in.readUnsignedShort();
  for (int n=0; n < number_of_stack_items; n++) {
    verification_type_info(in);
  }
}
",0,0,0,,
536,{,"if (mv != null && !mv.equals(""2"") && !clauses.isEmpty()) {
}
",0,0,0,,
537,} else {,"if ((supported(buf[1])) && (isEnabled(buf[1]))) {
switch (buf[1]) {
case NAWS:
    handleNAWS();
  break;
case TTYPE:
handleTTYPE();
break;
case LINEMODE:
handleLINEMODE();
break;
case NEWENV:
handleNEWENV();
break;
default :
}
}
 else {
}
",0,0,0,,
538,{,"if (c == '\r' || c == '\f' || c == '\t' || c == '\b') {
}
 else if (c == '\n') {
  this.println();
  this.startLine();
}
 else if (c == '""' || c == '\\') {
  super.write('\\');
  super.write(c);
}
 else {
  super.write(c);
}
",0,0,0,,
539,} else {,"if (Donut.class.isInstance(thing)) {
  receiveDonut((Donut)thing);
}
 else {
}
",0,0,0,,
540,} else {,"if (Donut.class.isInstance(thing)) {
  receiveDonut((Donut)thing);
}
 else {
}
",0,0,0,,
541,{,"if (bundleMap.isEmpty()) {
}
 else {
  for (  Map.Entry<Bundle,Set<String>> e : bundleMap.entrySet()) {
    Bundle b=e.getKey();
    pw.printf(""%s (%s) \n"",b.getSymbolicName(),b.getBundleId());
    for (    String className : e.getValue()) {
      addSpace(pw,1);
      pw.println(className);
    }
  }
}
",0,0,0,,
542,} else {,"if (g_selected == g) {
  this.valueChanged(null);
}
 else {
}
",0,0,0,,
543,{,"if (authenticationMethod.equals(""digest"")) {
}
",0,0,0,,
544,if (this.server==null && event.getType()==ServiceEvent.REGISTERED && service instanceof MBeanServer){,"if (this.server == null && event.getType() == ServiceEvent.REGISTERED && service instanceof MBeanServer) {
}
",0,3,8,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
545,{,"if (m_repoRef == null) {
}
 else {
  m_repoAdmin=(RepositoryAdmin)m_context.getService(m_repoRef);
}
",0,0,0,,
546,{,"if (threads.length == actualThreads) {
}
",0,0,0,,
547,} else {,"if (ssdpPacket.isByeBye()) {
  Activator.logger.DEBUG(""[Importer] ssdpPacket.isByeBye"");
synchronized (devices) {
    if (devices.containsKey(udn)) {
      if (parseUSN.isDevice()) {
        Activator.logger.DEBUG(""[Importer] parseUSN.isDevice ...unregistering all the children devices "");
        UPnPDeviceImpl dev=((OSGiDeviceInfo)devices.get(udn)).getOSGiDevice();
        removeOSGiandUPnPDeviceHierarchy(dev);
      }
 else       if (parseUSN.isService()) {
        Activator.logger.DEBUG(""[Importer] parseUSN.isService ...registering modified device again "");
        UPnPDeviceImpl device=((OSGiDeviceInfo)devices.get(udn)).getOSGiDevice();
        ServiceRegistration registar=((OSGiDeviceInfo)devices.get(udn)).getRegistration();
        String[] oldServicesID=(String[])(device.getDescriptions(null).get(UPnPService.ID));
        String[] oldServiceType=(String[])(device.getDescriptions(null).get(UPnPService.TYPE));
        Device cyberDevice=findDeviceCtrl(this,udn);
        Vector vec=new Vector();
        for (int i=0; i < oldServiceType.length; i++) {
          Service ser=cyberDevice.getService(oldServicesID[i]);
          if (!(ser.getServiceType().equals(parseUSN.getServiceType()))) {
            vec.add(oldServicesID[i]);
          }
        }
        String[] actualServicesID=new String[vec.size()];
        actualServicesID=(String[])vec.toArray(new String[]{});
        String[] actualServiceType=new String[oldServiceType.length - 1];
        vec.clear();
        for (int i=0; i < oldServiceType.length; i++) {
          if (!(oldServiceType[i].equals(parseUSN.getServiceType()))) {
            vec.add(oldServiceType[i]);
          }
        }
        actualServiceType=(String[])vec.toArray(new String[]{});
        unregisterUPnPDevice(registar);
        device.setProperty(UPnPService.ID,actualServicesID);
        device.setProperty(UPnPService.TYPE,actualServiceType);
        registerUPnPDevice(null,device,device.getDescriptions(null));
        searchForListener(cyberDevice);
      }
    }
  }
}
 else {
}
",0,0,0,,
548,} else {,"if (consolePlugin != null) {
  try {
    this.consolePlugin=consolePlugin;
    init();
  }
 catch (  ServletException se) {
    this.consolePlugin=null;
  }
}
 else {
}
",0,0,0,,
549,{,"if (m_producerScope.length == 1 && m_producerScope[0].equals(""*"")) {
  m_scope=m_consumerScope;
}
 else {
}
",0,0,0,,
550,"if (paramName.equals(SMTPJSONinputParams.PASSWORD.getValue()) && newValue.equals(""XXXX"")) {","if (paramName.equals(SMTPJSONinputParams.PASSWORD.getValue()) && newValue.equals(""XXXX"")) {
}
 else {
  actualChanges.put(valueParamName,newValue);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
551,} else {,"if (entityType.equals(""client"")) {
}
 else {
}
",0,0,0,,
552,} else {,"if (topLevelJsonElement.has(""collateral"") && topLevelJsonElement.get(""collateral"").isJsonArray()) {
  final JsonArray array=topLevelJsonElement.get(""collateral"").getAsJsonArray();
  final Locale locale=this.fromApiJsonHelper.extractLocaleParameter(topLevelJsonElement);
  for (int i=0; i < array.size(); i++) {
    final JsonObject collateralItemElement=array.get(i).getAsJsonObject();
    final Long id=this.fromApiJsonHelper.extractLongNamed(""id"",collateralItemElement);
    final Long collateralTypeId=this.fromApiJsonHelper.extractLongNamed(""type"",collateralItemElement);
    final CodeValue collateralType=this.codeValueRepository.findOneWithNotFoundDetection(collateralTypeId);
    final String description=this.fromApiJsonHelper.extractStringNamed(""description"",collateralItemElement);
    final BigDecimal value=this.fromApiJsonHelper.extractBigDecimalNamed(""value"",collateralItemElement,locale);
    if (id == null) {
      collateralItems.add(LoanCollateral.from(collateralType,value,description));
    }
 else {
      final LoanCollateral loanCollateralItem=this.loanCollateralRepository.findById(id).orElseThrow(() -> new CollateralNotFoundException(id));
      loanCollateralItem.assembleFrom(collateralType,value,description);
      collateralItems.add(loanCollateralItem);
    }
  }
}
 else {
}
",0,0,0,,
553,if (pId == 0 && (dm instanceof DistributionManager) && !this.directAck) {,"if (pId == 0 && (dm instanceof DistributionManager) && !this.directAck) {
}
 else {
  ReplyMessage.send(recipient,pId,rex,dm,!this.appliedOperation,this.closed,false,isInternal());
}
",0,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
554,"if (""USER"".equalsIgnoreCase(function) && userId.equals(getId())) {","if (""USER"".equalsIgnoreCase(function) && userId.equals(getId())) {
}
 else {
  validateHasReadPermission(function);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
555,}else{,"if (getDefaultSMSConfiguration().isPresent()) {
  configureServiceWithDefaultGateway();
}
 else {
}
",0,0,0,,
556,{,"if (login != null) {
  return login.logout(request);
}
 else {
}
",0,0,0,,
557,} else {,"if (entry.getKey().startsWith(prefix)) {
  String keyWithoutPrefix=entry.getKey().substring(prefix.length(),entry.getKey().length());
  props.put(keyWithoutPrefix,entry.getValue());
}
 else {
}
",0,0,0,,
558,|| (!someDamOnLeftPaths && !someDamOnRightPaths)) {,"if ((damOnAllLeftPaths && damOnAllRightPaths) || (!someDamOnLeftPaths && !someDamOnRightPaths)) {
}
 else {
  if (someDamOnLeftPaths && !damOnAllRightPaths) {
    in2.setTempMode(in2.getTempMode().makePipelineBreaker());
  }
  if (someDamOnRightPaths && !damOnAllLeftPaths) {
    in1.setTempMode(in1.getTempMode().makePipelineBreaker());
  }
}
",0,0,2,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
559,} else {,"if (null == listState) {
  listState=new PartitionableListState<>(restoredMetaInfo);
  registeredOperatorStates.put(listState.getStateMetaInfo().getName(),listState);
}
 else {
}
",0,0,0,,
560,} else {,"if (broadcastState == null) {
  broadcastState=new HeapBroadcastState<>(restoredMetaInfo);
  registeredBroadcastStates.put(broadcastState.getStateMetaInfo().getName(),broadcastState);
}
 else {
}
",0,0,0,,
561,} else {,"if (null == registeredStateMetaInfoEntry) {
  RegisteredStateMetaInfoBase stateMetaInfo=RegisteredStateMetaInfoBase.fromMetaInfoSnapshot(stateMetaInfoSnapshot);
  if (columnFamilyHandle == null) {
    registeredStateMetaInfoEntry=RocksDBOperationUtils.createStateInfo(stateMetaInfo,db,columnFamilyOptionsFactory,ttlCompactFiltersManager,writeBufferManagerCapacity);
  }
 else {
    registeredStateMetaInfoEntry=new RocksDbKvStateInfo(columnFamilyHandle,stateMetaInfo);
  }
  RocksDBOperationUtils.registerKvStateInformation(kvStateInformation,nativeMetricMonitor,stateMetaInfoSnapshot.getName(),registeredStateMetaInfoEntry);
}
 else {
}
",0,0,0,,
562,} else {,"if (checkpointId > latestPendingCheckpointID) {
  notifyAbortOnCancellationBarrier(checkpointId);
  latestPendingCheckpointID=checkpointId;
  CheckpointBarrierCount abortedMarker=new CheckpointBarrierCount(cancelBarrier.getCheckpointId(),channelInfo,numOpenChannels);
  abortedMarker.markAborted();
  pendingCheckpoints.addFirst(abortedMarker);
}
 else {
}
",0,0,0,,
563,} else {,"if (node instanceof SqlNodeList) {
  SqlNodeList list=(SqlNodeList)node;
  for (int i=0, count=list.size(); i < count; i++) {
    SqlNode listNode=list.get(i);
    if (listNode.getKind().belongsTo(SqlKind.QUERY)) {
      listNode=SqlStdOperatorTable.SCALAR_QUERY.createCall(listNode.getParserPosition(),listNode);
      list.set(i,listNode);
    }
    registerSubQueries(parentScope,listNode);
  }
}
 else {
}
",0,0,0,,
564,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
565,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
566,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
567,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
568,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
569,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
570,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
571,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
572,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
573,if (adHocKindRadio.isSelected() && useOpenCheckbox.isSelected() || OpenProjects.getDefault().getOpenProjects().length == 0) {,"if (adHocKindRadio.isSelected() && useOpenCheckbox.isSelected() || OpenProjects.getDefault().getOpenProjects().length == 0) {
}
 else {
  notificationLineSupport.setWarningMessage(NewGroupPanel_open_project_warning());
}
",0,6,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
574,} else {,"if (ip instanceof java.net.Inet4Address) {
  hostIps.add(ip.getHostAddress());
}
 else {
}
",0,0,0,,
575,} else {,"if (ip instanceof java.net.Inet4Address && !ip.isLoopbackAddress()) {
  return ip;
}
 else {
}
",0,0,0,,
576,} else {,"if (listener instanceof TestCacheListener) {
  e=((TestCacheListener)listener).ex;
}
 else {
}
",0,0,0,,
577,} else {,"if (listener instanceof TestCacheListener) {
  e=((TestCacheListener)listener).ex;
}
 else {
}
",0,0,0,,
578,} else {,"if (!se.getMessage().contains(""A lock could not be obtained within the time requested"")) {
  LogWriterUtils.getLogWriter().fine(""destroy table sql exception: "" + se);
  throw se;
}
 else {
}
",0,0,0,,
579,if (s.e instanceof Runnable) {},"if (s.e instanceof Runnable) {
}
",0,1,3,,"QualifiedName(InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
580,} else {,"if (refreshInterval > 0) {
  timerNotificationId=refreshTimer.addNotification(type.getType(),type.getMessage(),userData,new Date(System.currentTimeMillis() + refreshInterval * 1000L),refreshInterval * 1000L);
  notifications.put(type,timerNotificationId);
}
 else {
}
",0,0,0,,
581,if (((MapIndexable) helper.modifiedIndexExpr).getIndexingKeys().size() == 1) {,"if (((MapIndexable)helper.modifiedIndexExpr).getIndexingKeys().size() == 1) {
}
 else {
  return false;
}
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
582,if (this.interfaces == null || this.interfaces.size() == 0) {,"if (this.interfaces == null || this.interfaces.size() == 0) {
}
 else {
  dm.setEquivalentHosts(this.interfaces);
}
",0,1,7,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
583,} else {,"if (acquireLockPermission(request)) {
  handlePermittedLockRequest(request);
}
 else {
}
",0,0,0,,
584,} else {,"if (args.length > 1 && !args[1].equals("""")) {
  if (!SystemAdmin.validLocalAddress(args[1])) {
    System.err.println(String.format(""'%s' is not a valid IP address for this machine"",args[1]));
    ExitCode.FATAL.doSystemExit();
  }
  hostAddress=new HostAddress(args[1]);
  InetAddress.getByName(args[1]);
}
 else {
}
",0,0,0,,
585,"if (arr[0].trim().equals(""J2SE"") || arr[0].trim().equals(""JavaSE"")) {","if (arr[0].trim().equals(""J2SE"") || arr[0].trim().equals(""JavaSE"")) {
}
 else {
  fail(""Unexpected value: "" + value);
}
",0,3,10,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
586,} else {,"if (id.isMcastId()) {
  mid=id;
}
 else {
}
",0,0,0,,
587,else {,"if (re != null) {
synchronized (re) {
    if (!event.isOriginRemote() && event.getOperation().isExpiration()) {
      if (re.isInUseByTransaction()) {
        return false;
      }
    }
    if (re.isTombstone() || (!re.isRemoved() && !re.isDestroyed())) {
      entryExisted=true;
      if (re.isInvalid()) {
        handleAlreadyInvalidEntry(event,owner,re);
      }
 else {
        event.setRegionEntry(re);
        owner.serverInvalidate(event);
        if (owner.getConcurrencyChecksEnabled() && event.noVersionReceivedFromServer()) {
          if (isDebugEnabled) {
            logger.debug(""returning early because server did not generate a version stamp for this event:{}"",event);
          }
          return false;
        }
        if (owner.getFilterProfile().getCqCount() > 0) {
          if (re.isValueNull()) {
            event.setOldValue(re.getValueOnDiskOrBuffer(owner));
          }
 else {
            Object v=re.getValueInVM(owner);
            event.setOldValue(v);
          }
        }
        final boolean oldWasTombstone=re.isTombstone();
        final int oldSize=_getOwner().calculateRegionEntryValueSize(re);
        try {
          invalidateEntry(event,re,oldSize);
        }
 catch (        RegionClearedException rce) {
          EntryLogger.logInvalidate(event);
          _getOwner().recordEvent(event);
          clearOccured=true;
        }
catch (        ConcurrentCacheModificationException ccme) {
          VersionTag tag=event.getVersionTag();
          if (tag != null && tag.isTimeStampUpdated()) {
            owner.notifyTimestampsToGateways(event);
          }
          throw ccme;
        }
        owner.basicInvalidatePart2(re,event,clearOccured,invokeCallbacks);
        if (!clearOccured) {
          if (oldWasTombstone) {
            lruEntryCreate(re);
          }
 else {
            lruEntryUpdate(re);
          }
        }
        didInvalidate=true;
        invalidatedRe=re;
      }
    }
  }
}
 else {
}
",0,0,0,,
588,} else {,"if (!event.isBulkOpInProgress()) {
  long start=partitionedRegion.getPrStats().startSendReplication();
  try {
    op=new UpdateOperation(event,modifiedTime);
    token=op.startOperation();
  }
  finally {
    partitionedRegion.getPrStats().endSendReplication(start);
  }
}
 else {
}
",0,0,0,,
589,} else {,"if (dr.getClearOplogEntryId() == DiskStoreImpl.INVALID_ID) {
  ifLiveRecordCount++;
}
 else {
}
",0,0,0,,
590,} else {,"if (dr.getClearRVV() == null) {
  ifLiveRecordCount++;
}
 else {
}
",0,0,0,,
591,} else {,"if (re instanceof EntrySnapshot) {
  this.versionTag=((EntrySnapshot)re).getVersionTag();
}
 else {
}
",0,0,0,,
592,|| e.getCause() != null && e.getCause() instanceof CancelException) {,"if (e instanceof CancelException || e.getCause() != null && e.getCause() instanceof CancelException) {
}
 else {
  logger.warn(""Exception creating partition on {}"",targetMember,e);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, ),
"
593,} else {,"if (!Token.isInvalidOrRemoved(oldValue)) {
  updateStats(dr,region,-1,0,0);
}
 else {
}
",0,0,0,,
594,} else {,"if (Token.isInvalidOrRemoved(oldValue)) {
  updateStats(dr,region,1,0,0);
}
 else {
}
",0,0,0,,
595,} else {,"if (!wasAlreadyPendingAsync) {
  scheduledAsyncHere=true;
  did.setPendingAsync(true);
}
 else {
}
",0,0,0,,
596,} else {,"if (key instanceof Long) {
  destroyFromQueue(key);
  Conflatable cf=(Conflatable)event.getOldValue();
  EventID id=cf.getEventId();
  byte[] memID=id.getMembershipID();
  long threadId=id.getThreadID();
  DispatchedAndCurrentEvents dace=(DispatchedAndCurrentEvents)eventsMap.get(new ThreadIdentifier(memID,threadId));
  if (shouldBeConflated(cf)) {
    dace.destroy((Long)key,cf.getKeyToConflate(),cf.getRegionToConflate());
  }
 else {
    dace.destroy((Long)key);
  }
}
 else {
}
",0,0,0,,
597,} else {,"if (oldUaa != uaa) {
  this.cleanUserAuth(oldUaa);
  uaa.setDurable();
}
 else {
}
",0,0,0,,
598,} else {,"if (numberOfParts == 1) {
  try {
    serverConnection.setAsTrue(REQUIRES_RESPONSE);
    byte[] uniqueId=serverConnection.setCredentials(clientMessage);
    writeResponse(uniqueId,null,clientMessage,false,serverConnection);
  }
 catch (  GemFireSecurityException gfse) {
    if (serverConnection.getSecurityLogWriter().warningEnabled()) {
      serverConnection.getSecurityLogWriter().warning(String.format(""%s"",serverConnection.getName() + "": Security exception: "" + gfse.toString()+ (gfse.getCause() != null ? "", caused by: "" + gfse.getCause().toString() : """")));
    }
    writeException(clientMessage,gfse,false,serverConnection);
  }
catch (  Exception ex) {
    if (serverConnection.getLogWriter().warningEnabled()) {
      serverConnection.getLogWriter().warning(String.format(""An exception was thrown for client [%s]. %s"",serverConnection.getProxyID(),""""),ex);
    }
    writeException(clientMessage,ex,false,serverConnection);
  }
 finally {
    serverConnection.setAsTrue(RESPONDED);
  }
}
 else {
}
",0,0,0,,
599,} else {,"if (isSecureMode) {
  int numberOfParts=clientMessage.getNumberOfParts();
  if (numberOfParts == 1) {
    try {
      serverConnection.setAsTrue(REQUIRES_RESPONSE);
      byte[] uniqueId=serverConnection.setCredentials(clientMessage);
      writeResponse(uniqueId,null,clientMessage,false,serverConnection);
    }
 catch (    GemFireSecurityException gfse) {
      if (serverConnection.getSecurityLogWriter().warningEnabled()) {
        serverConnection.getSecurityLogWriter().warning(String.format(""%s"",serverConnection.getName() + "": Security exception: "" + gfse.toString()+ (gfse.getCause() != null ? "", caused by: "" + gfse.getCause().toString() : """")));
      }
      writeException(clientMessage,gfse,false,serverConnection);
    }
catch (    Exception ex) {
      if (serverConnection.getLogWriter().warningEnabled()) {
        serverConnection.getLogWriter().warning(String.format(""An exception was thrown for client [%s]. %s"",serverConnection.getProxyID(),""""),ex);
      }
      writeException(clientMessage,ex,false,serverConnection);
    }
 finally {
      serverConnection.setAsTrue(RESPONDED);
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
600,} else {,"if (value instanceof Declarable) {
  handler.startElement("""",DECLARABLE,DECLARABLE,EMPTY);
  addDeclarable(handler,(Declarable)value);
  handler.endElement("""",DECLARABLE,DECLARABLE);
}
 else {
}
",0,0,0,,
601,} else {,"if (txn == null) {
  mannPoolCache.returnPooledConnectionToPool(conn);
}
 else {
}
",0,0,0,,
602,if (!this.statisticIds.isEmpty()) {,"if (!this.statisticIds.isEmpty()) {
}
",0,0,3,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
"
603,} else {,"if (c.isInstance(osBean)) {
  m1=c.getMethod(""getMaxFileDescriptorCount"",new Class[]{});
  m2=c.getMethod(""getOpenFileDescriptorCount"",new Class[]{});
  bean=osBean;
}
 else {
}
",0,0,0,,
604,} else {,"if (i % 1000 == 0) {
}
 else {
}
",0,0,0,,
605,this.preparedView.getCreator().equals(view.getCreator())) {,"if (this.preparedView.getViewId() == view.getViewId() && this.preparedView.getCreator().equals(view.getCreator())) {
}
 else {
  services.getMessenger().send(new ViewAckMessage<>(view.getViewId(),m.getSender(),this.preparedView));
}
",0,0,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
606,} else {,"if (!(expectedValue instanceof ContextUtil.Node)) {
  assertEquals(""list of "" + name + "" on ""+ contextName+ "" for value for ""+ expectedName,expectedValue.getClass().getName(),actualValue);
}
 else {
}
",0,0,0,,
607,} else {,"if (timestamp.size() >= 1 && buildNumber.size() >= 1) {
  try {
    SnapshotVersion snapshotVersion=new SnapshotVersion(version);
    snapshotVersion.setBuildNumber(Integer.parseInt(buildNumber.get(0)));
    snapshotVersion.setTimestamp(timestamp.get(0));
    Artifact newQuery=new Artifact(artifact.getGroupId(),artifact.getArtifactId(),snapshotVersion,artifact.getType());
    location=getURL(newQuery);
    return open(artifact,location);
  }
 catch (  NumberFormatException nfe) {
  }
}
 else {
}
",0,0,0,,
608,} else {,"if (wsdlReturnValueMapping.getWsdlMessagePartName() != null) {
  String wsdlMessagePartName=wsdlReturnValueMapping.getWsdlMessagePartName();
  if (outParamNames.contains(wsdlMessagePartName)) {
    throw new DeploymentException(""output message part "" + wsdlMessagePartName + "" has both an INOUT or OUT mapping and a return value mapping for operation ""+ operationName);
  }
  if (wrappedStyle) {
    Part outPart=getWrappedPart(output);
    SchemaParticle returnParticle=getWrapperChild(outPart,wsdlMessagePartName);
    returnQName=new QName("""",returnParticle.getName().getLocalPart());
    returnType=returnParticle.getType().getName();
  }
 else   if (rpcStyle) {
    Part part=output.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new DeploymentException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=new QName("""",part.getName());
    returnType=part.getTypeName();
  }
 else {
    Part part=output.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new DeploymentException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=getPartName(part);
    returnType=returnQName;
  }
  outParamNames.add(wsdlMessagePartName);
}
 else {
}
",0,0,0,,
609,{,"if (callback instanceof CertStoreCallback) {
}
 else if (callback instanceof PrivateKeyCallback) {
}
 else if (callback instanceof SecretKeyCallback) {
}
 else if (callback instanceof TrustStoreCallback) {
}
 else {
  throw new UnsupportedCallbackException(callback);
}
",0,0,0,,
610,{,"if (callback instanceof PrivateKeyCallback) {
}
 else if (callback instanceof SecretKeyCallback) {
}
 else if (callback instanceof TrustStoreCallback) {
}
 else {
  throw new UnsupportedCallbackException(callback);
}
",0,0,0,,
611,{,"if (callback instanceof SecretKeyCallback) {
}
 else if (callback instanceof TrustStoreCallback) {
}
 else {
  throw new UnsupportedCallbackException(callback);
}
",0,0,0,,
612,{,"if (callback instanceof TrustStoreCallback) {
}
 else {
  throw new UnsupportedCallbackException(callback);
}
",0,0,0,,
613,} else {,"if (test != null && test.length > 0) {
  GerOutboundResourceadapterType outbound=ra.getOutboundResourceadapter();
  GerConnectionDefinitionType[] defs=outbound.getConnectionDefinitionArray();
  if (defs != null) {
    instances=new ConnectionDefinition[defs.length];
    for (int i=0; i < defs.length; i++) {
      GerConnectionDefinitionType def=defs[i];
      instances[i]=new ConnectionDefinition(resourceAdapter,def);
    }
  }
}
 else {
}
",0,0,0,,
614,} else {,"if (server == null) {
  server=getCurrentDomain(request).getServerInstances()[0];
  request.getPortletSession().setAttribute(SERVER_KEY,server,PortletSession.APPLICATION_SCOPE);
}
 else {
}
",0,0,0,,
615,} else {,"if (inMessage instanceof SoapMessage) {
  try {
    reserialize((SoapMessage)inMessage);
  }
 catch (  Exception e) {
    throw new RuntimeException(""Failed to reserialize soap message"",e);
  }
}
 else {
}
",0,0,0,,
616,} else {,"if (securityHandlerFactory != null) {
  Subject defaultSubject=runAsSource1.getDefaultSubject();
  securityHandler=securityHandlerFactory.buildSecurityHandler(policyContextID,defaultSubject,runAsSource,true);
}
 else {
}
",0,0,0,,
617,} else {,"if (aStat instanceof TimeStatistic) {
  Long current=new Long(((TimeStatistic)aStat).getCount());
  Long max=new Long(((TimeStatistic)aStat).getMaxTime());
  Long min=new Long(((TimeStatistic)aStat).getMinTime());
  Long total=new Long(((TimeStatistic)aStat).getTotalTime());
  statsMap.put(stts[i].getName() + "" CurrentTime"",current);
  statsMap.put(stts[i].getName() + "" MaxTime"",max);
  statsMap.put(stts[i].getName() + "" MinTime"",min);
  statsMap.put(stts[i].getName() + "" TotalTime"",total);
}
 else {
}
",0,0,0,,
618,} else {,"if (aStat instanceof TimeStatistic) {
  mbeanStatsList.add(stts[i].getName() + "" CurrentTime"");
  mbeanStatsList.add(stts[i].getName() + "" MaxTime"");
  mbeanStatsList.add(stts[i].getName() + "" MinTime"");
  mbeanStatsList.add(stts[i].getName() + "" TotalTime"");
}
 else {
}
",0,0,0,,
619,} else {,"if (aStat instanceof TimeStatistic) {
  mbeanStatsList.add(stts[i].getName() + "" CurrentTime"");
  mbeanStatsList.add(stts[i].getName() + "" MaxTime"");
  mbeanStatsList.add(stts[i].getName() + "" MinTime"");
  mbeanStatsList.add(stts[i].getName() + "" TotalTime"");
}
 else {
}
",0,0,0,,
620,"if (mbeanName.equals(new String(""times""))) {","if (mbeanName.equals(new String(""times""))) {
}
 else {
  stats=mapTimeFix.get(mbeanName);
  for (Iterator<String> itt=stats.keySet().iterator(); itt.hasNext(); ) {
    String key=itt.next();
    subMap.put(key,new Long(0));
  }
  tempMap.put(mbeanName,new HashMap<String,Object>(subMap));
}
",0,0,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
621,} else {,"if (options.get(WEBSERVICES_ENABLED,true)) {
  chain.add(new WsDeployer());
}
 else {
}
",0,0,0,,
622,} else {,"if (!progress.getType().equals(ImportStatus.PoolProgress.TYPE_XA)) {
  JDBCPool pool=(JDBCPool)progress.getPool();
  data.dbtype=""Other"";
  data.adapterDisplayName=""TranQL Generic JDBC Resource Adapter"";
  data.blockingTimeout=getImportString(pool.getBlockingTimeoutMillis());
  data.driverClass=pool.getDriverClass();
  data.idleTimeout=pool.getIdleTimeoutMillis() != null ? Integer.toString(pool.getIdleTimeoutMillis().intValue() / (60 * 1000)) : null;
  data.maxSize=getImportString(pool.getMaxSize());
  data.minSize=getImportString(pool.getMinSize());
  data.name=pool.getName();
  data.password=pool.getPassword();
  data.url=pool.getJdbcURL();
  data.user=pool.getUsername();
  if (pool.getDriverClass() != null) {
    DatabaseDriver info=getDatabaseInfoFromDriver(request,data);
    if (info != null) {
      data.rarPath=info.getRAR().toString();
      data.urlPrototype=info.getURLPrototype();
    }
 else {
      throw new PortletException(""Don't recognize database driver "" + data.driverClass + ""!"");
    }
  }
}
 else {
}
",0,0,0,,
623,if ((Boolean)context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)) {,"if ((Boolean)context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)) {
}
 else {
  SOAPElement element=findElement(message.getSOAPBody(),""arg0"");
  element.setValue(""foo bar"");
  message.saveChanges();
}
",0,0,4,,"SimpleName(SimpleType-name, CastExpression-type, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, IfStatement-expression, ),
"
624,"if (kind == IModuleResourceDelta.CHANGED && resource.getName().endsWith("".class"")) {","if (kind == IModuleResourceDelta.CHANGED && resource.getName().endsWith("".class"")) {
}
 else {
  deltaList.add(delta);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
625,} else {,"if (module.length > 1 && GeronimoUtils.isEBAModule(module[0])) {
  publishLocation=getBundleModulePublishLocation(module);
}
 else {
}
",0,0,0,,
626,else {,"if (index > sequenceNumber) {
  IMAPMessage message=(IMAPMessage)messageCache.get(key);
  message.setSequenceNumber(index - 1);
  newCache.put(new Integer(index - 1),message);
}
 else {
}
",0,0,0,,
627,else {,"if (index > sequenceNumber) {
  IMAPMessage message=(IMAPMessage)messageCache.get(key);
  message.setSequenceNumber(index - 1);
  newCache.put(new Integer(index - 1),message);
}
 else {
}
",0,0,0,,
628,else {,"if (index > sequenceNumber) {
  IMAPMessage message=(IMAPMessage)messageCache.get(key);
  message.setSequenceNumber(index - 1);
  newCache.put(new Integer(index - 1),message);
}
 else {
}
",0,0,0,,
629,} else {,"if (!(expectedValue instanceof ContextUtil.Node)) {
  assertEquals(""list of "" + name + "" on ""+ contextName+ "" for value for ""+ expectedName,expectedValue.getClass().getName(),actualValue);
}
 else {
}
",0,0,0,,
630,if (!marginPainted && ((nuSize.height > 10) == (lastKnownSize.height > 10))) {,"if (!marginPainted && ((nuSize.height > 10) == (lastKnownSize.height > 10))) {
}
",0,2,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
631,else {,"if (processExited.getCount() != 0) {
  e.printStackTrace();
  throw new Error(e);
}
 else {
}
",0,0,0,,
632,} else {,"if (_servant == null) {
  super._servant_postinvoke(servant);
}
 else {
}
",0,0,0,,
633,if (obj instanceof org.omg.CORBA.Object || obj instanceof Serializable) {,"if (obj instanceof org.omg.CORBA.Object || obj instanceof Serializable) {
}
 else if (obj instanceof Remote) {
  org.omg.CORBA.Object objref=null;
  try {
    objref=(org.omg.CORBA.Object)PortableRemoteObject.toStub((Remote)obj);
  }
 catch (  java.rmi.NoSuchObjectException ex) {
  }
  if (objref == null) {
    try {
      PortableRemoteObject.exportObject((Remote)obj);
      objref=(org.omg.CORBA.Object)PortableRemoteObject.toStub((Remote)obj);
    }
 catch (    RemoteException ex) {
      throw (MARSHAL)new MARSHAL(""unable to export object"").initCause(ex);
    }
  }
  obj=objref;
}
",0,0,4,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
634,} else {,"if (igniteMapping.getPrimaryKey().size() == 1) {
  keyl=new Object[]{key};
}
 else {
}
",0,0,0,,
635,} else {,"if (igniteMapping.getPrimaryKey().size() == 1) {
  keyl=new Object[]{key};
}
 else {
}
",0,0,0,,
636,} else {,"if (igniteMapping.getPrimaryKey().size() == 1) {
  Column getKey=igniteMapping.getPrimaryKey().get(0);
  data.put(getKey,key);
}
 else {
}
",0,0,0,,
637,} else {,"if (igniteMapping.getPrimaryKey().size() == 1) {
  deleteQuery=IgniteSQLBuilder.createDeleteQuery(igniteMapping);
  keyArray=new Object[]{key};
}
 else {
}
",0,0,0,,
638,&& (sourceIsNull || source instanceof ConstantExpression && source.getText().length() == 1)) {,"if (isWrapperCharacter(targetType) && (isStringType(expressionType) || sourceIsNull) && (sourceIsNull || source instanceof ConstantExpression && source.getText().length() == 1)) {
}
 else if (isNumberCategory(getWrapper(targetType)) && (isNumberCategory(getWrapper(expressionType)) || isPrimitiveChar(expressionType))) {
}
 else if (sourceIsNull && !isPrimitiveType(targetType)) {
}
 else if (isPrimitiveChar(targetType) && isPrimitiveType(expressionType) && isNumberType(expressionType)) {
}
 else if (sourceIsNull && isPrimitiveType(targetType) && !isPrimitiveBoolean(targetType)) {
  return false;
}
 else if ((expressionType.getModifiers() & Opcodes.ACC_FINAL) == 0 && targetType.isInterface()) {
  return true;
}
 else if ((targetType.getModifiers() & Opcodes.ACC_FINAL) == 0 && expressionType.isInterface()) {
  return true;
}
 else if (!isAssignableTo(targetType,expressionType) && !implementsInterfaceOrIsSubclassOf(expressionType,targetType)) {
  return false;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
639,} else if (isNumberCategory(getWrapper(targetType)) && (isNumberCategory(getWrapper(expressionType)) || isPrimitiveChar(expressionType))) {,"if (isNumberCategory(getWrapper(targetType)) && (isNumberCategory(getWrapper(expressionType)) || isPrimitiveChar(expressionType))) {
}
 else if (sourceIsNull && !isPrimitiveType(targetType)) {
}
 else if (isPrimitiveChar(targetType) && isPrimitiveType(expressionType) && isNumberType(expressionType)) {
}
 else if (sourceIsNull && isPrimitiveType(targetType) && !isPrimitiveBoolean(targetType)) {
  return false;
}
 else if ((expressionType.getModifiers() & Opcodes.ACC_FINAL) == 0 && targetType.isInterface()) {
  return true;
}
 else if ((targetType.getModifiers() & Opcodes.ACC_FINAL) == 0 && expressionType.isInterface()) {
  return true;
}
 else if (!isAssignableTo(targetType,expressionType) && !implementsInterfaceOrIsSubclassOf(expressionType,targetType)) {
  return false;
}
",0,0,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
640,} else {,"if (rc == 1) {
  LOG.info(""Indeterminate response from trying to kill service. "" + ""Verifying whether it is running using nc..."");
  rc=execCommand(session,""nc -z "" + serviceAddr.getHostName() + "" ""+ serviceAddr.getPort());
  if (rc == 0) {
    LOG.warn(""Unable to fence - it is running but we cannot kill it"");
    return false;
  }
 else {
    LOG.info(""Verified that the service is down."");
    return true;
  }
}
 else {
}
",0,0,0,,
641,} else {,"if (group.charAt(0) == '@') {
  if (!NetgroupCache.isCached(group)) {
    NetgroupCache.add(group,getUsersForNetgroup(group));
  }
}
 else {
}
",0,0,0,,
642,} else {,"if (group.charAt(0) == '@') {
  if (!NetgroupCache.isCached(group)) {
    NetgroupCache.add(group,getUsersForNetgroup(group));
  }
}
 else {
}
",0,0,0,,
643,} else {,"if (listCorruptedBlocksSupported()) {
  fail(uoe.toString());
}
 else {
}
",0,0,0,,
644,"if (valueBuffer.length() == 0 && isKeyValueSeparatorChar(c) && !isCharEscaped(line, i)) {","if (valueBuffer.length() == 0 && isKeyValueSeparatorChar(c) && !isCharEscaped(line,i)) {
}
 else {
  valueBuffer.append(c);
}
",0,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
645,"&& Arrays.equals(DOT_RESERVED, pathComponents[3])) {","if (nComponents == 4 && Arrays.equals(DOT_RESERVED,pathComponents[3])) {
}
 else {
  pathComponents=constructRemainingPath(new byte[][]{INodeDirectory.ROOT_NAME},pathComponents,3);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ),
"
646,else {,"if (!mockHistoryProcessing) {
  super.processDoneFiles(jobId);
}
 else {
}
",0,0,0,,
647,} else {,"if (firstTimeFail) {
  firstTimeFail=false;
  throw new IOException();
}
 else {
}
",0,0,0,,
648,} else {,"if (firstTimeFail) {
  firstTimeFail=false;
  throw new IOException();
}
 else {
}
",0,0,0,,
649,} else {,"if (this.nativetaskloaded) {
  super.collect(key,value,partition);
}
 else {
}
",0,0,0,,
650,if (ace.startsWith(AbfsHttpConstants.ACCESS_OTHER)|| ace.startsWith(AbfsHttpConstants.ACCESS_USER + AbfsHttpConstants.COLON)) {,"if (ace.startsWith(AbfsHttpConstants.ACCESS_OTHER) || ace.startsWith(AbfsHttpConstants.ACCESS_USER + AbfsHttpConstants.COLON)) {
}
 else if (ace.startsWith(AbfsHttpConstants.ACCESS_MASK)) {
  containsMask=true;
}
 else if (ace.startsWith(AbfsHttpConstants.ACCESS_GROUP + AbfsHttpConstants.COLON) && !containsMask) {
}
 else {
  sb.insert(0,ace + AbfsHttpConstants.COMMA);
}
",0,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
651,} else if (ace.startsWith(AbfsHttpConstants.ACCESS_GROUP + AbfsHttpConstants.COLON) && !containsMask) {,"if (ace.startsWith(AbfsHttpConstants.ACCESS_GROUP + AbfsHttpConstants.COLON) && !containsMask) {
}
 else {
  sb.insert(0,ace + AbfsHttpConstants.COMMA);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
652,} else {,"if (myType == canonicalReduceAttempt) {
  processReduceAttemptLine(line);
}
 else {
}
",0,0,0,,
653,} else {,"if (level < ParsedHost.numberOfDistances() - 1) {
  HashMap<String,HashSet<ParsedHost>> topologies=new HashMap<String,HashSet<ParsedHost>>();
  Iterator<ParsedHost> iter=hosts.iterator();
  while (iter.hasNext()) {
    ParsedHost host=iter.next();
    String thisComponent=host.nameComponent(level);
    HashSet<ParsedHost> thisSet=topologies.get(thisComponent);
    if (thisSet == null) {
      thisSet=new HashSet<ParsedHost>();
      topologies.put(thisComponent,thisSet);
    }
    thisSet.add(host);
  }
  children=new ArrayList<LoggedNetworkTopology>();
  for (  Map.Entry<String,HashSet<ParsedHost>> ent : topologies.entrySet()) {
    children.add(new LoggedNetworkTopology(ent.getValue(),ent.getKey(),level + 1));
  }
}
 else {
}
",0,0,0,,
654,} else {,"if (lowerOs.startsWith(""mac os x"") || lowerOs.startsWith(""darwin"")) {
  command=""env"";
}
 else {
}
",0,0,0,,
655,} else {,"if (numExceptions_ > 1 || numRecWritten_ < minRecWrittenToEnableSkip_) {
  LOG.info(getContext(),io);
  mapRedFinished();
  throw io;
}
 else {
}
",0,0,0,,
656,if (this.resyncingWithRM.getAndSet(true)) {,"if (this.resyncingWithRM.getAndSet(true)) {
}
 else {
  new Thread(){
    @Override public void run(){
      try {
        if (!rmWorkPreservingRestartEnabled) {
          LOG.info(""Cleaning up running containers on resync"");
          containerManager.cleanupContainersOnNMResync();
          if (context.getKnownCollectors() != null) {
            context.getKnownCollectors().clear();
          }
        }
 else {
          LOG.info(""Preserving containers on resync"");
          reregisterCollectors();
        }
        ((NodeStatusUpdaterImpl)nodeStatusUpdater).rebootNodeStatusUpdaterAndRegisterWithRM();
      }
 catch (      YarnRuntimeException e) {
        LOG.error(""Error while rebooting NodeStatusUpdater."",e);
        shutDown(NodeManagerStatus.EXCEPTION.getExitCode());
      }
 finally {
        resyncingWithRM.set(false);
      }
    }
  }
.start();
}
",0,0,4,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
657,"if (fileMetadata.getKey().equals(key + ""/"")) {","if (fileMetadata.getKey().equals(key + ""/"")) {
}
 else if (relativePath.endsWith(FOLDER_SUFFIX)) {
  status.add(newDirectory(new Path(absolutePath,relativePath.substring(0,relativePath.indexOf(FOLDER_SUFFIX)))));
}
 else {
  status.add(newFile(fileMetadata,subpath));
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
658,} else {,"if (rc == 1) {
  LOG.info(""Indeterminate response from trying to kill service. "" + ""Verifying whether it is running using nc..."");
  rc=execCommand(session,""nc -z "" + serviceAddr.getHostName() + "" ""+ serviceAddr.getPort());
  if (rc == 0) {
    LOG.warn(""Unable to fence - it is running but we cannot kill it"");
    return false;
  }
 else {
    LOG.info(""Verified that the service is down."");
    return true;
  }
}
 else {
}
",0,0,0,,
659,} else {,"if (group.charAt(0) == '@') {
  if (!NetgroupCache.isCached(group)) {
    NetgroupCache.add(group,getUsersForNetgroup(group));
  }
}
 else {
}
",0,0,0,,
660,} else {,"if (group.charAt(0) == '@') {
  if (!NetgroupCache.isCached(group)) {
    NetgroupCache.add(group,getUsersForNetgroup(group));
  }
}
 else {
}
",0,0,0,,
661,} else {,"if (listCorruptedBlocksSupported()) {
  fail(uoe.toString());
}
 else {
}
",0,0,0,,
662,else {,"if (!mockHistoryProcessing) {
  super.processDoneFiles(jobId);
}
 else {
}
",0,0,0,,
663,} else {,"if (myType == canonicalReduceAttempt) {
  processReduceAttemptLine(line);
}
 else {
}
",0,0,0,,
664,} else {,"if (level < ParsedHost.numberOfDistances() - 1) {
  HashMap<String,HashSet<ParsedHost>> topologies=new HashMap<String,HashSet<ParsedHost>>();
  Iterator<ParsedHost> iter=hosts.iterator();
  while (iter.hasNext()) {
    ParsedHost host=iter.next();
    String thisComponent=host.nameComponent(level);
    HashSet<ParsedHost> thisSet=topologies.get(thisComponent);
    if (thisSet == null) {
      thisSet=new HashSet<ParsedHost>();
      topologies.put(thisComponent,thisSet);
    }
    thisSet.add(host);
  }
  children=new ArrayList<LoggedNetworkTopology>();
  for (  Map.Entry<String,HashSet<ParsedHost>> ent : topologies.entrySet()) {
    children.add(new LoggedNetworkTopology(ent.getValue(),ent.getKey(),level + 1));
  }
}
 else {
}
",0,0,0,,
665,} else {,"if (lowerOs.startsWith(""mac os x"") || lowerOs.startsWith(""darwin"")) {
  command=""env"";
}
 else {
}
",0,0,0,,
666,} else {,"if (numExceptions_ > 1 || numRecWritten_ < minRecWrittenToEnableSkip_) {
  LOG.info(getContext(),io);
  mapRedFinished();
  throw io;
}
 else {
}
",0,0,0,,
667,} else {,"if (t != null) {
  return TaskLookupResult.getTaskFoundResult(t);
}
 else {
}
",0,0,0,,
668,} else {,"if (file.isFile()) {
  Path filePath=new Path(this.path,file.getName());
  DFSFile newFile=new DFSFile(this,filePath,file,monitor);
}
 else {
}
",0,0,0,,
669,} else {,"if (lowerOs.startsWith(""mac os x"") || lowerOs.startsWith(""darwin"")) {
  command=""env"";
}
 else {
}
",0,0,0,,
670,} else {,"if (numExceptions_ > 1 || numRecWritten_ < minRecWrittenToEnableSkip_) {
  LOG.info(getContext(),io);
  mapRedFinished();
  throw io;
}
 else {
}
",0,0,0,,
671,} else {,"if (myType == canonicalReduceAttempt) {
  processReduceAttemptLine(line);
}
 else {
}
",0,0,0,,
672,} else {,"if (level < ParsedHost.numberOfDistances() - 1) {
  HashMap<String,HashSet<ParsedHost>> topologies=new HashMap<String,HashSet<ParsedHost>>();
  Iterator<ParsedHost> iter=hosts.iterator();
  while (iter.hasNext()) {
    ParsedHost host=iter.next();
    String thisComponent=host.nameComponent(level);
    HashSet<ParsedHost> thisSet=topologies.get(thisComponent);
    if (thisSet == null) {
      thisSet=new HashSet<ParsedHost>();
      topologies.put(thisComponent,thisSet);
    }
    thisSet.add(host);
  }
  children=new ArrayList<LoggedNetworkTopology>();
  for (  Map.Entry<String,HashSet<ParsedHost>> ent : topologies.entrySet()) {
    children.add(new LoggedNetworkTopology(ent.getValue(),ent.getKey(),level + 1));
  }
}
 else {
}
",0,0,0,,
673,} else {,"if (commited[OPTIONAL] != 0 || commited[SUFFICIENT] != 0) {
  fail=false;
}
 else {
}
",0,0,0,,
674,} else {,"if (comp instanceof AlphaComposite) {
  if (!oglg.getComposite().equals(comp) || !srcCM.isAlphaPremultiplied() || srcCM.hasAlpha() == oglg.opaqueColor) {
    needPremultiply=OGLGraphics2D.enableAlphaComposite((AlphaComposite)comp,srcCM.isAlphaPremultiplied(),srcCM.hasAlpha());
    needRestoreComposite=true;
  }
}
 else {
}
",0,0,0,,
675,} else {,"if (code1 != 0) {
  newx1=Integer.MAX_VALUE;
  if ((code1 & 8) != 0) {
    newy1=cy1;
    newx1=clipY(dx,dy,newy1,true);
  }
 else   if ((code1 & 4) != 0) {
    newy1=cy2 - 1;
    newx1=clipY(dx,dy,newy1,false);
  }
  if ((code1 & 1) != 0 && (cx1 > newx1 || newx1 == Integer.MAX_VALUE)) {
    newx1=cx1;
    newy1=clipX(dx,dy,newx1,false);
  }
 else   if ((code1 & 2) != 0 && (newx1 >= cx2 || newx1 == Integer.MAX_VALUE)) {
    newx1=cx2 - 1;
    newy1=clipX(dx,dy,newx1,false);
  }
  if (newx1 < cx1 || newx1 >= cx2 || newy1 < cy1 || newy1 >= cy2) {
    return;
  }
}
 else {
}
",0,0,0,,
676,} else if (lastCheckTime != 0 && (System.currentTimeMillis() - lastCheckTime < maxCacheAge)) {,"if (lastCheckTime != 0 && (System.currentTimeMillis() - lastCheckTime < maxCacheAge)) {
}
 else {
  NodeDocument ndoc=(NodeDocument)readDocumentUncached(collection,id,cachedDoc);
  if (ndoc != null) {
    ndoc.seal();
  }
  doc=wrap(ndoc);
  nodesCache.put(doc);
}
",0,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
677,} else {,"if (emptyByte) {
  raster.setDataElements(xDstSurf + w,yDstSurf + h,color);
}
 else {
}
",0,0,0,,
678,} else {,"if (emptyByte) {
  raster.setDataElements(xDstSurf + w,yDstSurf + h,color);
}
 else {
}
",0,0,0,,
679,} else {,"if (valueAddToList && (LdapContext.CONTROL_FACTORIES.equals(key) || Context.OBJECT_FACTORIES.equals(key) || Context.STATE_FACTORIES.equals(key)|| Context.URL_PKG_PREFIXES.equals(key))) {
  val=(String)dst.get(key);
  val=val + "":"" + src.get(key);
  dst.put(key,val);
}
 else {
}
",0,0,0,,
680,} else {,"if (rootCause instanceof RuntimeException) {
  throw (RuntimeException)rootCause;
}
 else {
}
",0,0,0,,
681,} else {,"if (!report.messageWasTruncated) {
  for (int k=0; k < report.extraRecords.size(); k++) {
    ResourceRecord rec=report.extraRecords.elementAt(k);
    cache.put(rec);
  }
}
 else {
}
",0,0,0,,
682,} else {,"if (k17 != -1) {
  workZone=report.delegationZones.elementAt(k17);
}
 else {
}
",0,0,0,,
683,} else {,"if (question.getQClass() == curRec.getRRClass() || question.getQClass() == ProviderConstants.ANY_QCLASS) {
  if (question.getQType() == ProviderConstants.ANY_QTYPE && ProviderMgr.namesAreEqual(curRec.getName(),question.getQName())) {
    report.records.addElement(curRec);
    if (curRec.getRRType() == ProviderConstants.CNAME_TYPE) {
      report.aliasInfoWasReceived=true;
      report.newName=(String)curRec.getRData();
    }
 else {
      report.completeAnswerWasReceived=true;
    }
  }
 else   if (question.getQType() == curRec.getRRType() && ProviderMgr.namesAreEqual(question.getQName(),curRec.getName())) {
    report.records.addElement(curRec);
    report.completeAnswerWasReceived=true;
  }
 else   if (curRec.getRRType() == ProviderConstants.CNAME_TYPE && ProviderMgr.namesAreEqual(curRec.getName(),question.getQName())) {
    Enumeration<ResourceRecord> answerRRs2=answer.getAnswerRRs();
    Enumeration<ResourceRecord> additionalRRs2=answer.getAdditionalRRs();
    report.aliasInfoWasReceived=true;
    report.newName=(String)curRec.getRData();
    report.extraRecords.addElement(curRec);
    while (answerRRs2.hasMoreElements()) {
      ResourceRecord tmpRec=answerRRs2.nextElement();
      if (tmpRec.getRRType() == question.getQType() && ProviderMgr.namesAreEqual(tmpRec.getName(),report.newName)) {
        report.records.addElement(tmpRec);
        report.completeAnswerWasReceived=true;
      }
    }
    while (additionalRRs2.hasMoreElements()) {
      ResourceRecord tmpRec=additionalRRs2.nextElement();
      if (tmpRec.getRRType() == question.getQType() && ProviderMgr.namesAreEqual(tmpRec.getName(),report.newName)) {
        report.records.addElement(tmpRec);
        report.completeAnswerWasReceived=true;
      }
    }
  }
 else {
    if (answer.isAA()) {
      report.completeAnswerWasReceived=true;
    }
    report.extraRecords.addElement(curRec);
  }
}
 else {
}
",0,0,0,,
684,} else {,"if (element.lock != null) {
synchronized (element.lock) {
    element.lock.notify();
  }
}
 else {
}
",0,0,0,,
685,} else {,"if (++next < pattern.length()) {
switch (value[next]) {
case 'g':
    sb.append(value,cur,next - cur - 1).append(gen);
  hasGeneration=true;
break;
case 'u':
sb.append(value,cur,next - cur - 1).append(uniqueID);
hasUniqueID=true;
break;
case 't':
sb.append(value,cur,next - cur - 1).append(tempPath);
if (!tempPathHasSepEnd) {
sb.append(File.separator);
}
break;
case 'h':
sb.append(value,cur,next - cur - 1).append(homePath);
if (!homePathHasSepEnd) {
sb.append(File.separator);
}
break;
case '%':
sb.append(value,cur,next - cur - 1).append('%');
break;
default :
sb.append(value,cur,next - cur);
}
cur=++next;
}
 else {
}
",0,0,0,,
686,} else {,"if (verbose > 0) {
  System.err.println(""CUPS url: "" + cupss[i]);
  e.printStackTrace();
}
 else {
}
",0,0,0,,
687,} else {,"if (verbose > 0) {
  System.err.println(""IPP url: "" + ipps[i]);
  e.printStackTrace();
}
 else {
}
",0,0,0,,
688,} else {,"if (verbose > 0) {
  System.err.println(""IPP url: "" + ippp[j]);
  e.printStackTrace();
}
 else {
}
",0,0,0,,
689,} else {,"if (verbose > 0) {
  System.err.println(""CUPS url: "" + cups);
  System.err.println(""CUPS uri: "" + cupsuri);
  System.err.println(""Ipp client: "" + c);
  System.err.println(request.toString());
  e.printStackTrace();
}
 else {
}
",0,0,0,,
690,} else {,"if (!(rootName.equals(name) || al.contains(name))) {
  ++i;
  al.add(name);
}
 else {
}
",0,0,0,,
691,} else {,"if (stream != null) {
  stream.mark(readlimit);
  marketFramePos=framePos;
}
 else {
}
",0,0,0,,
692,} else {,"if (stream != null) {
  stream.reset();
  framePos=marketFramePos;
}
 else {
}
",0,0,0,,
693,} else {,"if (""true"".equals(System.getProperty(""Testing Harmony""))) {
  fail(""Should throw SQLException here.(In harmony)"");
}
 else {
}
",0,0,0,,
694,} else {,"if (oldValue != null) {
  newValue.setViewPosition(oldValue.getViewPosition());
}
 else {
}
",0,0,0,,
695,} else {,"if (throwns[i] instanceof InterimTypeVariable) {
  String tvName=((InterimTypeVariable)throwns[i]).typeVariableName;
  TypeVariable variable=TypeVariableRepository.findTypeVariable(tvName,startPoint);
  if (variable == null) {
    variable=AuxiliaryFinder.findTypeVariable(tvName,startPoint);
    if (variable == null) {
      genericExceptionTypes[i]=(Type)null;
      break;
    }
  }
  genericExceptionTypes[i]=(Type)variable;
}
 else {
}
",0,0,0,,
696,} else {,"if (methodParameters[i] instanceof InterimGenericArrayType) {
  genericParameterTypes[i]=AuxiliaryCreator.createGenericArrayType((InterimGenericArrayType)methodParameters[i],startPoint);
}
 else {
}
",0,0,0,,
697,} else {,"if (throwns[i] instanceof InterimTypeVariable) {
  String tvName=((InterimTypeVariable)throwns[i]).typeVariableName;
  TypeVariable variable=TypeVariableRepository.findTypeVariable(tvName,startPoint);
  if (variable == null) {
    variable=AuxiliaryFinder.findTypeVariable(tvName,startPoint);
    if (variable == null) {
      genericExceptionTypes[i]=(Type)null;
      break;
    }
  }
  genericExceptionTypes[i]=(Type)variable;
}
 else {
}
",0,0,0,,
698,} else {,"if (methodParameters[i] instanceof InterimGenericArrayType) {
  genericParameterTypes[i]=AuxiliaryCreator.createGenericArrayType((InterimGenericArrayType)methodParameters[i],startPoint);
}
 else {
}
",0,0,0,,
699,} else {,"if (superClassType instanceof InterimClassType) {
  try {
    genericSuperclass=(Type)c.getClass().getClassLoader().loadClass(AuxiliaryFinder.transform(((InterimClassType)superClassType).classTypeName.substring(1).replace('/','.')));
  }
 catch (  ClassNotFoundException e) {
    throw new TypeNotPresentException(((InterimClassType)superClassType).classTypeName.substring(1).replace('/','.'),e);
  }
catch (  ExceptionInInitializerError e) {
  }
catch (  LinkageError e) {
  }
}
 else {
}
",0,0,0,,
700,} else {,"if (superInterfaces[i] instanceof InterimClassType) {
  try {
    if (c.getClass().getClassLoader() != null) {
      genericInterfaces[i]=(Type)c.getClass().getClassLoader().loadClass(AuxiliaryFinder.transform(((InterimClassType)superInterfaces[i]).classTypeName.substring(1).replace('/','.')));
    }
 else {
      genericInterfaces[i]=(Type)AuxiliaryLoader.findClass(AuxiliaryFinder.transform(((InterimClassType)superInterfaces[i]).classTypeName.substring(1).replace('/','.')),startPoint);
    }
  }
 catch (  ClassNotFoundException e) {
    throw new TypeNotPresentException(((InterimClassType)superInterfaces[i]).classTypeName.substring(1).replace('/','.'),e);
  }
catch (  ExceptionInInitializerError e) {
  }
catch (  LinkageError e) {
  }
}
 else {
}
",0,0,0,,
701,} else {,"if (commited[OPTIONAL] != 0 || commited[SUFFICIENT] != 0) {
  fail=false;
}
 else {
}
",0,0,0,,
702,} else {,"if (comp instanceof AlphaComposite) {
  if (!oglg.getComposite().equals(comp) || !srcCM.isAlphaPremultiplied() || srcCM.hasAlpha() == oglg.opaqueColor) {
    needPremultiply=OGLGraphics2D.enableAlphaComposite((AlphaComposite)comp,srcCM.isAlphaPremultiplied(),srcCM.hasAlpha());
    needRestoreComposite=true;
  }
}
 else {
}
",0,0,0,,
703,} else {,"if (code1 != 0) {
  newx1=Integer.MAX_VALUE;
  if ((code1 & 8) != 0) {
    newy1=cy1;
    newx1=clipY(dx,dy,newy1,true);
  }
 else   if ((code1 & 4) != 0) {
    newy1=cy2 - 1;
    newx1=clipY(dx,dy,newy1,false);
  }
  if ((code1 & 1) != 0 && (cx1 > newx1 || newx1 == Integer.MAX_VALUE)) {
    newx1=cx1;
    newy1=clipX(dx,dy,newx1,false);
  }
 else   if ((code1 & 2) != 0 && (newx1 >= cx2 || newx1 == Integer.MAX_VALUE)) {
    newx1=cx2 - 1;
    newy1=clipX(dx,dy,newx1,false);
  }
  if (newx1 < cx1 || newx1 >= cx2 || newy1 < cy1 || newy1 >= cy2) {
    return;
  }
}
 else {
}
",0,0,0,,
704,} else {,"if (emptyByte) {
  raster.setDataElements(xDstSurf + w,yDstSurf + h,color);
}
 else {
}
",0,0,0,,
705,} else {,"if (emptyByte) {
  raster.setDataElements(xDstSurf + w,yDstSurf + h,color);
}
 else {
}
",0,0,0,,
706,} else {,"if (valueAddToList && (LdapContext.CONTROL_FACTORIES.equals(key) || Context.OBJECT_FACTORIES.equals(key) || Context.STATE_FACTORIES.equals(key)|| Context.URL_PKG_PREFIXES.equals(key))) {
  val=(String)dst.get(key);
  val=val + "":"" + src.get(key);
  dst.put(key,val);
}
 else {
}
",0,0,0,,
707,} else {,"if (rootCause instanceof RuntimeException) {
  throw (RuntimeException)rootCause;
}
 else {
}
",0,0,0,,
708,} else {,"if (!report.messageWasTruncated) {
  for (int k=0; k < report.extraRecords.size(); k++) {
    ResourceRecord rec=report.extraRecords.elementAt(k);
    cache.put(rec);
  }
}
 else {
}
",0,0,0,,
709,} else {,"if (k17 != -1) {
  workZone=report.delegationZones.elementAt(k17);
}
 else {
}
",0,0,0,,
710,} else {,"if (question.getQClass() == curRec.getRRClass() || question.getQClass() == ProviderConstants.ANY_QCLASS) {
  if (question.getQType() == ProviderConstants.ANY_QTYPE && ProviderMgr.namesAreEqual(curRec.getName(),question.getQName())) {
    report.records.addElement(curRec);
    if (curRec.getRRType() == ProviderConstants.CNAME_TYPE) {
      report.aliasInfoWasReceived=true;
      report.newName=(String)curRec.getRData();
    }
 else {
      report.completeAnswerWasReceived=true;
    }
  }
 else   if (question.getQType() == curRec.getRRType() && ProviderMgr.namesAreEqual(question.getQName(),curRec.getName())) {
    report.records.addElement(curRec);
    report.completeAnswerWasReceived=true;
  }
 else   if (curRec.getRRType() == ProviderConstants.CNAME_TYPE && ProviderMgr.namesAreEqual(curRec.getName(),question.getQName())) {
    Enumeration<ResourceRecord> answerRRs2=answer.getAnswerRRs();
    Enumeration<ResourceRecord> additionalRRs2=answer.getAdditionalRRs();
    report.aliasInfoWasReceived=true;
    report.newName=(String)curRec.getRData();
    report.extraRecords.addElement(curRec);
    while (answerRRs2.hasMoreElements()) {
      ResourceRecord tmpRec=answerRRs2.nextElement();
      if (tmpRec.getRRType() == question.getQType() && ProviderMgr.namesAreEqual(tmpRec.getName(),report.newName)) {
        report.records.addElement(tmpRec);
        report.completeAnswerWasReceived=true;
      }
    }
    while (additionalRRs2.hasMoreElements()) {
      ResourceRecord tmpRec=additionalRRs2.nextElement();
      if (tmpRec.getRRType() == question.getQType() && ProviderMgr.namesAreEqual(tmpRec.getName(),report.newName)) {
        report.records.addElement(tmpRec);
        report.completeAnswerWasReceived=true;
      }
    }
  }
 else {
    if (answer.isAA()) {
      report.completeAnswerWasReceived=true;
    }
    report.extraRecords.addElement(curRec);
  }
}
 else {
}
",0,0,0,,
711,} else {,"if (element.lock != null) {
synchronized (element.lock) {
    element.lock.notify();
  }
}
 else {
}
",0,0,0,,
712,} else {,"if (++next < pattern.length()) {
switch (value[next]) {
case 'g':
    sb.append(value,cur,next - cur - 1).append(gen);
  hasGeneration=true;
break;
case 'u':
sb.append(value,cur,next - cur - 1).append(uniqueID);
hasUniqueID=true;
break;
case 't':
sb.append(value,cur,next - cur - 1).append(tempPath);
if (!tempPathHasSepEnd) {
sb.append(File.separator);
}
break;
case 'h':
sb.append(value,cur,next - cur - 1).append(homePath);
if (!homePathHasSepEnd) {
sb.append(File.separator);
}
break;
case '%':
sb.append(value,cur,next - cur - 1).append('%');
break;
default :
sb.append(value,cur,next - cur);
}
cur=++next;
}
 else {
}
",0,0,0,,
713,} else {,"if (verbose > 0) {
  System.err.println(""CUPS url: "" + cupss[i]);
  e.printStackTrace();
}
 else {
}
",0,0,0,,
714,} else {,"if (verbose > 0) {
  System.err.println(""IPP url: "" + ipps[i]);
  e.printStackTrace();
}
 else {
}
",0,0,0,,
715,} else {,"if (verbose > 0) {
  System.err.println(""IPP url: "" + ippp[j]);
  e.printStackTrace();
}
 else {
}
",0,0,0,,
716,} else {,"if (verbose > 0) {
  System.err.println(""CUPS url: "" + cups);
  System.err.println(""CUPS uri: "" + cupsuri);
  System.err.println(""Ipp client: "" + c);
  System.err.println(request.toString());
  e.printStackTrace();
}
 else {
}
",0,0,0,,
717,} else {,"if (!(rootName.equals(name) || al.contains(name))) {
  ++i;
  al.add(name);
}
 else {
}
",0,0,0,,
718,} else {,"if (stream != null) {
  stream.mark(readlimit);
  marketFramePos=framePos;
}
 else {
}
",0,0,0,,
719,} else {,"if (stream != null) {
  stream.reset();
  framePos=marketFramePos;
}
 else {
}
",0,0,0,,
720,} else {,"if (""true"".equals(System.getProperty(""Testing Harmony""))) {
  fail(""Should throw SQLException here.(In harmony)"");
}
 else {
}
",0,0,0,,
721,} else {,"if (oldValue != null) {
  newValue.setViewPosition(oldValue.getViewPosition());
}
 else {
}
",0,0,0,,
722,} else {,"if (continueSasl) {
  inStream=saslRpcClient.getInputStream();
  outStream=saslRpcClient.getOutputStream();
}
 else {
}
",0,0,0,,
723,} else {,"if (new_version != task.last_version) {
  if (task.isUnassigned()) {
    LOG.info(""Task "" + path + "" acquired by ""+ workerName);
  }
  task.heartbeat(EnvironmentEdgeManager.currentTime(),new_version,workerName);
  SplitLogCounters.tot_mgr_heartbeat.increment();
}
 else {
}
",0,0,0,,
724,} else {,"if (taskpath != null && taskpath.equals(path)) {
  LOG.info(""retrying data watch on "" + path);
  SplitLogCounters.tot_wkr_get_data_retry.increment();
  getDataSetWatchAsync();
}
 else {
}
",0,0,0,,
725,} else {,"if (regionEventDesc != null) {
  regionEvents.add(regionEventDesc);
}
 else {
}
",0,0,0,,
726,} else {,"if (responseHandler.getBootstrapUrl() != null) {
  System.out.println(""Got bootstrap url:"" + responseHandler.getBootstrapUrl());
  System.out.println(""Got backup time:"" + responseHandler.getBootstrapTime());
}
 else {
}
",0,0,0,,
727,} else {,"if (znode != null) {
  Stat oldStat=znode.getStat();
  znode.setData(readData);
  znode.setStat(stat);
  if (oldStat.getCzxid() != stat.getCzxid()) {
    fireEvents(dataPath,EventType.NodeDeleted);
    fireEvents(dataPath,EventType.NodeCreated);
  }
 else   if (oldStat.getVersion() != stat.getVersion()) {
    fireEvents(dataPath,EventType.NodeDataChanged);
  }
}
 else {
}
",0,0,0,,
728,} else {,"if (result == true) {
  _command._finishTimestamp=System.currentTimeMillis();
  _testResults.put(_command,true);
  break;
}
 else {
}
",0,0,0,,
729,} else {,"if (result == true) {
  _command._finishTimestamp=System.currentTimeMillis();
  _testResults.put(_command,true);
  break;
}
 else {
}
",0,0,0,,
730,} else {,"if (children != null && children.length > 0) {
  for (  File child : children) {
    upload(zkPath + ""/"" + child.getName(),fsPath + ""/"" + child.getName());
  }
}
 else {
}
",0,0,0,,
731,} else {,"if (line.startsWith(""0x"")) {
  if (lastPath != null && listenerMap.containsKey(lastPath)) {
    listenerMap.get(lastPath).add(line);
  }
 else {
    LOG.error(""Not path associated with listener sessionId: "" + line + "", lastPath: ""+ lastPath);
  }
}
 else {
}
",0,0,0,,
732,} else {,"if (line.startsWith(""0x"")) {
  if (lastPath != null && listenerMap.containsKey(lastPath)) {
    listenerMap.get(lastPath).add(line);
  }
 else {
    LOG.error(""Not path associated with listener sessionId: "" + line + "", lastPath: ""+ lastPath);
  }
}
 else {
}
",0,0,0,,
733,} else {,"if (result) {
  memoryManager.releaseMemory(memUsage);
}
 else {
}
",0,0,0,,
734,} else {,"if (queryInfo != null) {
  queryInfo.sourceStateUpdated(sourceName);
}
 else {
}
",0,0,0,,
735,} else {,"if (ownZkCluster) {
  miniZooKeeperCluster=new MiniZooKeeperCluster();
  miniZooKeeperCluster.startup(zkWorkDir);
}
 else {
}
",0,0,0,,
736,} else {,"if (oldStateForNode == null) {
  SourceInfo srcInfo=getSourceInfo(src);
  srcInfo.addNode(nodeId);
  nodeInfo.addSource(src,srcInfo.lastKnownState);
  if (srcInfo.lastKnownState == VertexState.SUCCEEDED) {
    sendStateUpdateToNode(nodeId,src,srcInfo.lastKnownState);
  }
}
 else {
}
",0,0,0,,
737,} else {,"if (sourcesOfInterest != null && !sourcesOfInterest.isEmpty()) {
  LlapNodeId nodeId=LlapNodeId.getInstance(host,port);
  NodeInfo nodeInfo=getNodeInfo(nodeId);
  for (  String src : sourcesOfInterest) {
    VertexState oldStateForNode=nodeInfo.getLastKnownStateForSource(src);
    if (oldStateForNode == null) {
      SourceInfo srcInfo=getSourceInfo(src);
      srcInfo.addNode(nodeId);
      nodeInfo.addSource(src,srcInfo.lastKnownState);
      if (srcInfo.lastKnownState == VertexState.SUCCEEDED) {
        sendStateUpdateToNode(nodeId,src,srcInfo.lastKnownState);
      }
    }
 else {
    }
    maybeRegisterForVertexUpdates(src);
  }
}
 else {
}
",0,0,0,,
738,} else {,"if (aggregations != null) {
  if (currentKeys != null) {
    forward(currentKeys.getKeyArray(),aggregations);
  }
  currentKeys=null;
}
 else {
}
",0,0,0,,
739,} else {,"if (ShimLoader.getHadoopShims().isLocalMode(conf)) {
  int hadoopMem=conf.getIntVar(HiveConf.ConfVars.HIVEHADOOPMAXMEM);
  if (hadoopMem == 0) {
    variables.remove(HADOOP_MEM_KEY);
  }
 else {
    variables.put(HADOOP_MEM_KEY,String.valueOf(hadoopMem));
  }
}
 else {
}
",0,0,0,,
740,"if (! DataBundles.isMissing(DataBundles.getPort(outputs, ""out3""))) {","if (!DataBundles.isMissing(DataBundles.getPort(outputs,""out3""))) {
}
",0,5,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
741,} else {,"if (sourceFilter == null || sourceFilter.test(source)) {
  target.set(name,value);
}
 else {
}
",0,0,0,,
742,} else {,"if (cv.noNulls || !cv.isNull[0]) {
  if (isAllUnassigned) {
    outputIsNull[0]=false;
    outputColVector.setElement(0,0,cv);
    outputColVector.isRepeating=true;
    return;
  }
 else {
    for (int i=0; i < unassignedColumnCount; i++) {
      final int batchIndex=unassignedBatchIndices[i];
      outputIsNull[batchIndex]=false;
      outputColVector.setElement(batchIndex,0,cv);
    }
    return;
  }
}
 else {
}
",0,0,0,,
743,} else {,"if (isNewKey) {
  slots[slot]=hashSetStore.add(partialHashCode,keyBytes,keyStart,keyLength);
  keysAssigned++;
}
 else {
}
",0,0,0,,
744,} else {,"if (!isValueLengthSmall) {
  valueLength=valueStore.writeBuffers.readVInt(readPos);
}
 else {
}
",0,0,0,,
745,} else {,"if (!PrimitiveObjectInspectorUtils.isPrimitiveJavaClass(clz)) {
  if (LOG.isErrorEnabled()) {
    LOG.error(""Unable to evaluate {}({}). Return value unrecoginizable."",udf.getClass().getName(),exprs);
  }
  return null;
}
 else {
}
",0,0,0,,
746,if (useUniformHash || (isEmptyKey && isEmptyBuckets && isEmptyPartitions)) {,"if (useUniformHash || (isEmptyKey && isEmptyBuckets && isEmptyPartitions)) {
}
 else {
  int[] reduceSinkBucketColumnMap=null;
  TypeInfo[] reduceSinkBucketTypeInfos=null;
  Type[] reduceSinkBucketColumnVectorTypes=null;
  VectorExpression[] reduceSinkBucketExpressions=null;
  if (!isEmptyBuckets) {
    VectorExpression[] allBucketExpressions=vContext.getVectorExpressions(bucketDescs);
    reduceSinkBucketColumnMap=new int[bucketDescs.size()];
    reduceSinkBucketTypeInfos=new TypeInfo[bucketDescs.size()];
    reduceSinkBucketColumnVectorTypes=new Type[bucketDescs.size()];
    ArrayList<VectorExpression> reduceSinkBucketExpressionsList=new ArrayList<VectorExpression>();
    for (int i=0; i < bucketDescs.size(); ++i) {
      VectorExpression ve=allBucketExpressions[i];
      reduceSinkBucketColumnMap[i]=ve.getOutputColumnNum();
      reduceSinkBucketTypeInfos[i]=bucketDescs.get(i).getTypeInfo();
      reduceSinkBucketColumnVectorTypes[i]=VectorizationContext.getColumnVectorTypeFromTypeInfo(reduceSinkBucketTypeInfos[i]);
      if (!IdentityExpression.isColumnOnly(ve)) {
        reduceSinkBucketExpressionsList.add(ve);
      }
    }
    if (reduceSinkBucketExpressionsList.size() == 0) {
      reduceSinkBucketExpressions=null;
    }
 else {
      reduceSinkBucketExpressions=reduceSinkBucketExpressionsList.toArray(new VectorExpression[0]);
    }
  }
  int[] reduceSinkPartitionColumnMap=null;
  TypeInfo[] reduceSinkPartitionTypeInfos=null;
  Type[] reduceSinkPartitionColumnVectorTypes=null;
  VectorExpression[] reduceSinkPartitionExpressions=null;
  if (!isEmptyPartitions) {
    VectorExpression[] allPartitionExpressions=vContext.getVectorExpressions(partitionDescs);
    reduceSinkPartitionColumnMap=new int[partitionDescs.size()];
    reduceSinkPartitionTypeInfos=new TypeInfo[partitionDescs.size()];
    reduceSinkPartitionColumnVectorTypes=new Type[partitionDescs.size()];
    ArrayList<VectorExpression> reduceSinkPartitionExpressionsList=new ArrayList<VectorExpression>();
    for (int i=0; i < partitionDescs.size(); ++i) {
      VectorExpression ve=allPartitionExpressions[i];
      reduceSinkPartitionColumnMap[i]=ve.getOutputColumnNum();
      reduceSinkPartitionTypeInfos[i]=partitionDescs.get(i).getTypeInfo();
      reduceSinkPartitionColumnVectorTypes[i]=VectorizationContext.getColumnVectorTypeFromTypeInfo(reduceSinkPartitionTypeInfos[i]);
      if (!IdentityExpression.isColumnOnly(ve)) {
        reduceSinkPartitionExpressionsList.add(ve);
      }
    }
    if (reduceSinkPartitionExpressionsList.size() == 0) {
      reduceSinkPartitionExpressions=null;
    }
 else {
      reduceSinkPartitionExpressions=reduceSinkPartitionExpressionsList.toArray(new VectorExpression[0]);
    }
  }
  vectorReduceSinkInfo.setReduceSinkBucketColumnMap(reduceSinkBucketColumnMap);
  vectorReduceSinkInfo.setReduceSinkBucketTypeInfos(reduceSinkBucketTypeInfos);
  vectorReduceSinkInfo.setReduceSinkBucketColumnVectorTypes(reduceSinkBucketColumnVectorTypes);
  vectorReduceSinkInfo.setReduceSinkBucketExpressions(reduceSinkBucketExpressions);
  vectorReduceSinkInfo.setReduceSinkPartitionColumnMap(reduceSinkPartitionColumnMap);
  vectorReduceSinkInfo.setReduceSinkPartitionTypeInfos(reduceSinkPartitionTypeInfos);
  vectorReduceSinkInfo.setReduceSinkPartitionColumnVectorTypes(reduceSinkPartitionColumnVectorTypes);
  vectorReduceSinkInfo.setReduceSinkPartitionExpressions(reduceSinkPartitionExpressions);
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
747,} else {,"if (explainOptions == HiveParser.KW_DDL) {
  config.setDDL(true);
  config.setCbo(true);
  config.setVectorization(true);
}
 else {
}
",0,0,0,,
748,} else {,"if (additionalPropertiesProvider.isInReplicationScope()) {
  if (additionalPropertiesProvider.getReplSpecType() != ReplicationSpec.Type.INCREMENTAL_DUMP) {
    table.putToParameters(ReplicationSpec.KEY.CURR_STATE_ID.toString(),additionalPropertiesProvider.getCurrentReplicationState());
  }
}
 else {
}
",0,0,0,,
749,if (isViewOperation(preEventContext) && (!isSuperUser(getCurrentUser(authzEvent)))) {,"if (isViewOperation(preEventContext) && (!isSuperUser(getCurrentUser(authzEvent)))) {
}
",0,0,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
750,} else {,"if (mode == Mode.PARTIAL1 || mode == Mode.COMPLETE) {
  inputOI=(PrimitiveObjectInspector)parameters[0];
}
 else {
}
",0,0,0,,
751,} else {,"if (getLocation(table) == null) {
  try {
    Path location=getTranslatedToExternalTableDefaultLocation(db,newTable);
    newTable.getSd().setLocation(location.toString());
  }
 catch (  Exception e) {
    throw new MetaException(""Exception determining external table location:"" + e.getMessage());
  }
}
 else {
}
",0,0,0,,
752,} else {,"if (ndvEstimator != null) {
  aggregateData.setNumDVs(ndvEstimator.estimateNumDistinctValues());
}
 else {
}
",0,0,0,,
753,} else {,"if (conversionCost == leastConversionCost) {
  udfMethods.add(m);
}
 else {
}
",0,0,0,,
754,else {,"if (req.activate()) {
  try {
    cacheProc.onKernalStopCaches(true);
    cacheProc.stopCaches(true);
    sharedCtx.affinity().clearGroupHoldersAndRegistry();
    if (!ctx.clientNode())     sharedCtx.deactivate();
  }
 catch (  Exception e) {
    U.error(log,""Failed to revert activation request changes"",e);
  }
}
 else {
}
",0,0,0,,
755,else {,"if (rnd % 2 == 0) {
  map.put(x,x);
}
 else {
}
",0,0,0,,
756,else {,"if (rnd % 3 == 0) {
  map.remove(x);
}
 else {
}
",0,0,0,,
757,} else {,"if (svc.getServiceComponents().containsKey(componentName)) {
  ServiceComponent svcComp=svc.getServiceComponent(componentName);
  ServiceComponentHost scHost=svcComp.getServiceComponentHost(hostname);
  State prevState=scHost.getState();
  State liveState=State.valueOf(State.class,status.getStatus());
  if (prevState.equals(State.INSTALLED) || prevState.equals(State.STARTED) || prevState.equals(State.STARTING)|| prevState.equals(State.STOPPING)|| prevState.equals(State.UNKNOWN)) {
    scHost.setState(liveState);
    if (!prevState.equals(liveState)) {
      LOG.info(""State of service component "" + componentName + "" of service ""+ status.getServiceName()+ "" of cluster ""+ status.getClusterName()+ "" has changed from ""+ prevState+ "" to ""+ liveState+ "" at host ""+ hostname);
    }
  }
  if (null != status.getStackVersion() && !status.getStackVersion().isEmpty()) {
    scHost.setStackVersion(gson.fromJson(status.getStackVersion(),StackId.class));
  }
  if (null != status.getConfigTags()) {
    scHost.updateActualConfigs(status.getConfigTags());
  }
}
 else {
}
",0,0,0,,
758,} else {,"if (request.getServiceName() != null && request.getComponentName() != null) {
  throw new ServiceComponentHostNotFoundException(cluster.getClusterName(),request.getServiceName(),request.getComponentName(),request.getHostname());
}
 else {
}
",0,0,0,,
759,} else {,"if (ShellCommandUtil.LINUX) {
  String permissions=ShellCommandUtil.getUnixFilePermissions(passFile.getAbsolutePath());
  assertEquals(ShellCommandUtil.MASK_OWNER_ONLY_RW,permissions);
}
 else {
}
",0,0,0,,
760,} else {,"if (ShellCommandUtil.LINUX) {
  result=ShellCommandUtil.runCommand(new String[]{""echo"",""dummy""});
  assertEquals(0,result.getExitCode());
  assertEquals(""dummy\n"",result.getStdout());
  assertEquals("""",result.getStderr());
  assertTrue(result.isSuccessful());
  result=ShellCommandUtil.runCommand(new String[]{""false""});
  assertEquals(1,result.getExitCode());
  assertFalse(result.isSuccessful());
}
 else {
}
",0,0,0,,
761,} else {,"if (extension.matches("".AR"")) {
  result=result.substring(0,result.length() - 4);
  if (result.equalsIgnoreCase(""/ROOT""))   result=""/"";
}
 else {
}
",0,0,0,,
762,} else {,"if (mode.wasNotLoaded()) {
  return false;
}
 else {
}
",0,0,0,,
763,} else {,"if (isInitialManagementContextReal()) {
  initialManagementContext.terminate();
}
 else {
}
",0,0,0,,
764,} else {,"if (proxy == null) {
  proxy=createEntityProxy(interfaces,entity);
}
 else {
}
",0,0,0,,
765,if (HG_PUSH_CMD.equals(hgCommandType) && isErrorAbortPush(list.get(list.size() - 1))) {,"if (HG_PUSH_CMD.equals(hgCommandType) && isErrorAbortPush(list.get(list.size() - 1))) {
}
 else {
  if ((credentials=handleAuthenticationError(list,repository,rawUrl,credentials == null ? """" : credentials.getUserName(),credentialsSupport,hgCommandType,showLoginWindow)) != null) {
    retry=true;
    if (!supp.isKenai(rawUrl) && credentials != null) {
      try {
        KeyringSupport.save(HgUtils.PREFIX_VERSIONING_MERCURIAL_URL,new HgURL(remoteUrl.toHgCommandUrlString(),credentials.getUserName(),null).toHgCommandStringWithNoPassword(),credentials.getPassword().clone(),null);
      }
 catch (      URISyntaxException ex) {
        Mercurial.LOG.log(Level.SEVERE,null,ex);
      }
    }
  }
 else {
    handleError(command,list,NbBundle.getMessage(HgCommand.class,""MSG_COMMAND_ABORTED""),logger);
  }
}
",0,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
766,} else {,"if (!Objects.equal(cv,dv)) {
  LOG.warn(""SshTool detected deprecated key '"" + deprecatedKey + ""' with different value (""+ dv+ "") ""+ ""than new key '""+ correctKey+ ""' (""+ cv+ ""); ambiguous which will be used"");
}
 else {
}
",0,0,0,,
767,} else {,"if (machine instanceof JcloudsSshMachineLocation) {
  customize(location,computeService,(JcloudsSshMachineLocation)machine);
}
 else {
}
",0,0,0,,
768,} else {,"if (machine instanceof JcloudsSshMachineLocation) {
  preRelease((JcloudsSshMachineLocation)machine);
}
 else {
}
",0,0,0,,
769,} else {,"if (machine instanceof JcloudsSshMachineLocation) {
  postRelease((JcloudsSshMachineLocation)machine);
}
 else {
}
",0,0,0,,
770,} else {,"if (waitForSshable) {
  String setupScript=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);
  List<String> setupScripts=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL_LIST);
  Collection<String> allScripts=new MutableList<String>().appendIfNotNull(setupScript).appendAll(setupScripts);
  for (  String setupScriptItem : allScripts) {
    if (Strings.isNonBlank(setupScriptItem)) {
      customisationForLogging.add(""custom setup script "" + setupScriptItem);
      String setupVarsString=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);
      Map<String,String> substitutions=(setupVarsString != null) ? Splitter.on("","").withKeyValueSeparator("":"").split(setupVarsString) : ImmutableMap.<String,String>of();
      String scriptContent=ResourceUtils.create(this).getResourceAsString(setupScriptItem);
      String script=TemplateProcessor.processTemplateContents(scriptContent,getManagementContext(),substitutions);
      if (windows) {
        ((WinRmMachineLocation)machineLocation).executeCommand(ImmutableList.copyOf((script.replace(""\r"","""").split(""\n""))));
      }
 else {
        ((SshMachineLocation)machineLocation).execCommands(""Customizing node "" + this,ImmutableList.of(script));
      }
    }
  }
  if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM)) {
    if (windows) {
      LOG.warn(""Ignoring flag MAP_DEV_RANDOM_TO_DEV_URANDOM on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""point /dev/random to urandom"");
      ((SshMachineLocation)machineLocation).execCommands(""using urandom instead of random"",Arrays.asList(""sudo mv /dev/random /dev/random-real"",""sudo ln -s /dev/urandom /dev/random""));
    }
  }
  if (setup.get(GENERATE_HOSTNAME)) {
    if (windows) {
      LOG.warn(""Ignoring flag GENERATE_HOSTNAME on Windows location {}"",machineLocation);
    }
 else {
      customisationForLogging.add(""configure hostname"");
      ((SshMachineLocation)machineLocation).execCommands(""Generate hostname "" + node.getName(),Arrays.asList(""sudo hostname "" + node.getName(),""sudo sed -i \""s/HOSTNAME=.*/HOSTNAME="" + node.getName() + ""/g\"" /etc/sysconfig/network"",""sudo bash -c \""echo 127.0.0.1   `hostname` >> /etc/hosts\""""));
    }
  }
  if (setup.get(OPEN_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag OPEN_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      @SuppressWarnings(""unchecked"") Iterable<Integer> inboundPorts=(Iterable<Integer>)setup.get(INBOUND_PORTS);
      if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {
        LOG.info(""No ports to open in iptables (no inbound ports) for {} at {}"",machineLocation,this);
      }
 else {
        customisationForLogging.add(""open iptables"");
        List<String> iptablesRules=Lists.newArrayList();
        if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
          for (          Integer port : inboundPorts) {
            iptablesRules.add(IptablesCommands.addFirewalldRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
          }
        }
 else {
          iptablesRules=createIptablesRulesForNetworkInterface(inboundPorts);
          iptablesRules.add(IptablesCommands.saveIptablesRules());
        }
        List<String> batch=Lists.newArrayList();
        for (        String rule : iptablesRules) {
          batch.add(rule);
          if (batch.size() == 50) {
            ((SshMachineLocation)machineLocation).execCommands(""Inserting iptables rules, 50 command batch"",batch);
            batch.clear();
          }
        }
        if (batch.size() > 0) {
          ((SshMachineLocation)machineLocation).execCommands(""Inserting iptables rules"",batch);
        }
        ((SshMachineLocation)machineLocation).execCommands(""List iptables rules"",ImmutableList.of(IptablesCommands.listIptablesRule()));
      }
    }
  }
  if (setup.get(STOP_IPTABLES)) {
    if (windows) {
      LOG.warn(""Ignoring DEPRECATED flag OPEN_IPTABLES on Windows location {}"",machineLocation);
    }
 else {
      LOG.warn(""Using DEPRECATED flag STOP_IPTABLES (will not be supported in future versions) for {} at {}"",machineLocation,this);
      customisationForLogging.add(""stop iptables"");
      List<String> cmds=ImmutableList.<String>of();
      if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
        cmds=ImmutableList.of(IptablesCommands.firewalldServiceStop(),IptablesCommands.firewalldServiceStatus());
      }
 else {
        cmds=ImmutableList.of(IptablesCommands.iptablesServiceStop(),IptablesCommands.iptablesServiceStatus());
      }
      ((SshMachineLocation)machineLocation).execCommands(""Stopping iptables"",cmds);
    }
  }
  List<String> extraKeyUrlsToAuth=setup.get(EXTRA_PUBLIC_KEY_URLS_TO_AUTH);
  if (extraKeyUrlsToAuth != null && !extraKeyUrlsToAuth.isEmpty()) {
    if (windows) {
      LOG.warn(""Ignoring flag EXTRA_PUBLIC_KEY_URLS_TO_AUTH on Windows location"",machineLocation);
    }
 else {
      List<String> extraKeyDataToAuth=MutableList.of();
      for (      String keyUrl : extraKeyUrlsToAuth) {
        extraKeyDataToAuth.add(ResourceUtils.create().getResourceAsString(keyUrl));
      }
      ((SshMachineLocation)machineLocation).execCommands(""Authorizing ssh keys"",ImmutableList.of(new AuthorizeRSAPublicKeys(extraKeyDataToAuth).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
    }
  }
}
 else {
}
",0,0,0,,
771,} else {,"if (((PortableTemplateBuilder<?>)templateBuilder).imageChooser() == null) {
  Function<Iterable<? extends Image>,Image> chooser=config.get(JcloudsLocationConfig.IMAGE_CHOOSER);
  chooser=BrooklynImageChooser.cloneFor(chooser,computeService);
  templateBuilder.imageChooser(chooser);
}
 else {
}
",0,0,0,,
772,} else {,"if (valsSummary.max > maxAllowedPoolSize) {
  if (LOG.isTraceEnabled())   LOG.trace(""{} re-scheduling max-reached check for {}, as unbounded size not stable (min {}, max {}, latest {})"",new Object[]{this,poolEntity,valsSummary.min,valsSummary.max,valsSummary.latest});
  scheduleResize();
}
 else {
}
",0,0,0,,
773,} else {,"if (trustSelfSigned) {
  TrustStrategy trustStrategy=new TrustSelfSignedStrategy();
  X509HostnameVerifier hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
  socketFactory=new SSLSocketFactory(trustStrategy,hostnameVerifier);
}
 else {
}
",0,0,0,,
774,} else {,"if (Math.abs(x) < 1 && useEForSmallNumbers) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
775,} else {,"if (Math.abs(x) < 1) {
  s=makeRealString(signif,-1,prec,-1) + ""E"" + log;
}
 else {
}
",0,0,0,,
776,} else {,"if (storageClass < storageClasses.length) {
  block=storageClasses[storageClass].getBlock(locationAffinity);
}
 else {
}
",0,0,0,,
777,} else {,"if (block == null) {
  block=anySet.get();
}
 else {
}
",0,0,0,,
778,} else {,"if ((filesSelectedForPull++) < maxFilesToPull) {
  filesToPull.add(file.split(this.splitPattern)[0]);
  effectiveSnapshot.add(file);
}
 else {
}
",0,0,0,,
779,} else {,"if (value.toString().equalsIgnoreCase(""false"") || value.toString().equalsIgnoreCase(""no"")) {
  value=Boolean.FALSE;
}
 else {
}
",0,0,0,,
780,} else {,"if (rootEntry.isExists()) {
  checkAndNotify(rootEntry,rootEntry.getChildren(),EMPTY_PATH_ARRAY);
}
 else {
}
",0,0,0,,
781,} else {,"if (bldr.isInitialized()) {
  onIncomingMessage(bldr.build());
}
 else {
}
",0,0,0,,
782,} else {,"if (bldr != null) {
  bldr.clear();
  incomingPacket.unpackMessage(bldr);
  if (bldr.isInitialized()) {
    onIncomingMessage(bldr.build());
  }
 else {
  }
}
 else {
}
",0,0,0,,
783,} else {,"if (rid.equals(REQID.zeroREQID)) {
  Message.Builder bldr=messageMap.get(typeName);
  if (bldr != null) {
    bldr.clear();
    incomingPacket.unpackMessage(bldr);
    if (bldr.isInitialized()) {
      onIncomingMessage(bldr.build());
    }
 else {
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
784,} else {,"if (contextMap.containsKey(rid)) {
  Object ctx=contextMap.get(rid);
  contextMap.remove(rid);
  responseMessageMap.remove(rid);
  onResponse(StatusCode.TIMEOUT_ERROR,ctx,null);
}
 else {
}
",0,0,0,,
785,if (tm - (blinkCurrentDelay + (blinkCurrentDelay >> 2)) > 0L) {,"if (tm - (blinkCurrentDelay + (blinkCurrentDelay >> 2)) > 0L) {
}
",0,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
786,} else if (TaskState.State.READY == taskState || TaskState.State.COMPLETE == taskState) {,"if (TaskState.State.READY == taskState || TaskState.State.COMPLETE == taskState) {
}
 else {
  throw new IllegalStateException(taskState.toString());
}
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
787,} else {,"if (statement instanceof GotoStatement) {
  statements.remove(statements.size() - 1);
  result=append_(name,((GotoStatement)statement).expression,optimize);
  if (isSimpleExpression(result)) {
  }
 else {
    DeclarationStatement declare=Expressions.declare(Modifier.FINAL,newName(name,optimize),result);
    add(declare);
    result=declare.parameter;
  }
}
 else {
}
",0,0,0,,
788,} else {,"if (comparison < 0) {
  setExpressionToBoolean(range,kind == FilterKind.GREATER_THAN || kind == FilterKind.GREATER_THAN_OR_EQUAL);
}
 else {
}
",0,0,0,,
789,} else {,"if (comparison < 0) {
  if (kind == FilterKind.GREATER_THAN || kind == FilterKind.GREATER_THAN_OR_EQUAL) {
    range.getFunctionCall().setOperator(FilterKind.GREATER_THAN_OR_EQUAL.name());
  }
 else   if (kind == FilterKind.LESS_THAN || kind == FilterKind.LESS_THAN_OR_EQUAL) {
    range.getFunctionCall().setOperator(FilterKind.LESS_THAN.name());
  }
}
 else {
}
",0,0,0,,
790,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
791,} else {,"if (partitionLeaderIndices[topicAndPartition.partition()] != index) {
  errorMap.put(topicAndPartition,Errors.NOT_LEADER_FOR_PARTITION.code());
}
 else {
}
",0,0,0,,
792,} else {,"if (cacheValue != null) {
  _hits.mark();
}
 else {
}
",0,0,0,,
793,} else {,"if (state == -1) {
  continue nextTerm;
}
 else {
}
",0,0,0,,
794,} else {,"if (runAutomaton.isAccept(state)) {
  copyTerm();
  assert savedStartTerm == null || term.compareTo(savedStartTerm) > 0 : ""saveStartTerm="" + savedStartTerm.utf8ToString() + "" term=""+ term.utf8ToString();
  return term;
}
 else {
}
",0,0,0,,
795,} else {,"if (f.prefix > targetBeforeCurrentLength) {
  f.rewind();
}
 else {
}
",0,0,0,,
796,} else {,"if (termExists) {
  return true;
}
 else {
}
",0,0,0,,
797,} else {,"if (termExists) {
  return SeekStatus.FOUND;
}
 else {
}
",0,0,0,,
798,} else {,"if (target.compareTo(term) != 0 || !termExists) {
  assert otherState != null && otherState instanceof BlockTermState;
  currentFrame=staticFrame;
  currentFrame.state.copyFrom(otherState);
  term.copyBytes(target);
  currentFrame.metaDataUpto=currentFrame.getTermBlockOrd();
  assert currentFrame.metaDataUpto > 0;
  validIndexPrefix=0;
}
 else {
}
",0,0,0,,
799,} else {,"if (newFP != fp) {
  nextEnt=-1;
  fp=newFP;
}
 else {
}
",0,0,0,,
800,} else {,"if (!directory.mkdirs()) {
}
 else {
}
",0,0,0,,
801,} else {,"if (file.isFile()) {
  Path filePath=new Path(this.path,file.getName());
  DFSFile newFile=new DFSFile(this,filePath,file,monitor);
}
 else {
}
",0,0,0,,
802,} else {,"if (exception instanceof NoSuchNodeException) {
  result=new FileNotFoundException(exception.toString());
  result.initCause(exception);
}
 else {
}
",0,0,0,,
803,} else {,"if (lifespan == 0) {
  finish();
}
 else {
}
",0,0,0,,
804,} else {,"if (c.hasUpdateAttributes()) {
  if (c.getUpdateAttributes().getEmpty()) {
    output.updateAttributes(AttributesUpdateImpl.EMPTY_MAP);
  }
 else {
    String[] triplets=new String[c.getUpdateAttributes().getAttributeUpdateCount() * 3];
    for (int i=0, j=0; i < c.getUpdateAttributes().getAttributeUpdateCount(); i++) {
      ProtocolDocumentOperation.Component.KeyValueUpdate kvu=c.getUpdateAttributes().getAttributeUpdate(i);
      triplets[j++]=kvu.getKey();
      triplets[j++]=kvu.hasOldValue() ? kvu.getOldValue() : null;
      triplets[j++]=kvu.hasNewValue() ? kvu.getNewValue() : null;
    }
    output.updateAttributes(new AttributesUpdateImpl(triplets));
  }
}
 else {
}
",0,0,0,,
805,} else {,"if (stream != null) {
  boolean drop;
  String knownChannelId=knownChannels.get(wavelet.waveId);
  if (knownChannelId != null) {
    drop=message.hasChannelId() && !message.getChannelId().equals(knownChannelId);
  }
 else {
    if (message.hasChannelId()) {
      knownChannels.put(wavelet.waveId,message.getChannelId());
    }
    drop=false;
  }
  if (!drop) {
    stream.onWaveletUpdate(message);
  }
}
 else {
}
",0,0,0,,
806,} else {,"if (c.hasUpdateAttributes()) {
  UpdateAttributes u=c.getUpdateAttributes();
  if (u.getEmpty()) {
    output.updateAttributes(AttributesUpdateImpl.EMPTY_MAP);
  }
 else {
    String[] triplets=new String[u.getAttributeUpdate().size() * 3];
    int i=0;
    for (    KeyValueUpdate kvu : u.getAttributeUpdate()) {
      triplets[i++]=kvu.getKey();
      triplets[i++]=kvu.hasOldValue() ? kvu.getOldValue() : null;
      triplets[i++]=kvu.hasNewValue() ? kvu.getNewValue() : null;
    }
    output.updateAttributes(new AttributesUpdateImpl(triplets));
  }
}
 else {
}
",0,0,0,,
807,} else {,"if (oldNodelet != null) {
  oldNodelet.removeFromParent();
}
 else {
}
",0,0,0,,
808,} else {,"if (element != null && isLineElement(element)) {
  Line line=Line.fromLineElement(element);
  assert line != null;
  if (line.getParagraph().getFirstChild() != null) {
    Line previousLine=line.previous();
    if (previousLine != null) {
      cxt.annotatableContent().transparentMove(previousLine.getParagraph(),line.getParagraph().getFirstChild(),null,null);
    }
 else {
      cxt.annotatableContent().transparentUnwrap(line.getParagraph());
    }
  }
  line.remove();
}
 else {
}
",0,0,0,,
809,} else {,"if (UserAgent.isFirefox()) {
  refreshEditorWithCaret(event);
  caret=maybeSetSelectionLeftAffinity(event.getCaret().asPoint());
  event.setCaret(ContentPoint.fromPoint(caret));
}
 else {
}
",0,0,0,,
810,} else {,"if (content != null) {
  inlineLocators=(StringSequence)content.getPropertyObject(INLINE_LOCATOR_PROPERTY);
  if (inlineLocators == null) {
    if (content.hasAttribute(INLINE_LOCATOR_ATTRIBUTE)) {
      String serial=content.getAttribute(INLINE_LOCATOR_ATTRIBUTE);
      inlineLocators=StringSequence.create(serial);
    }
 else {
      inlineLocators=StringSequence.create();
    }
    content.setPropertyObject(INLINE_LOCATOR_PROPERTY,inlineLocators);
  }
}
 else {
}
",0,0,0,,
811,} else {,"if (node.parent.tryToPropagateFromChildren(key)) {
  return nodeStart + node.subtreeLength;
}
 else {
}
",0,0,0,,
812,} else {,"if (clientWaveDocOp.getDocumentId().equals(serverWaveDocOp.getDocumentId())) {
  DocOp clientMutation=clientWaveDocOp.getOperation();
  DocOp serverMutation=serverWaveDocOp.getOperation();
  OperationPair<DocOp> transformedDocOps=Transformer.transform(clientMutation,serverMutation);
  clientOp=new CoreWaveletDocumentOperation(clientWaveDocOp.getDocumentId(),transformedDocOps.clientOp());
  serverOp=new CoreWaveletDocumentOperation(serverWaveDocOp.getDocumentId(),transformedDocOps.serverOp());
}
 else {
}
",0,0,0,,
813,} else {,"if (clientWaveBlipOp.getBlipId().equals(serverWaveBlipOp.getBlipId())) {
  BlipOperation clientBlipOp=clientWaveBlipOp.getBlipOp();
  BlipOperation serverBlipOp=serverWaveBlipOp.getBlipOp();
  OperationPair<BlipOperation> transformedBlipOps=transform(clientBlipOp,serverBlipOp);
  clientOp=new WaveletBlipOperation(clientWaveBlipOp.getBlipId(),transformedBlipOps.clientOp());
  serverOp=new WaveletBlipOperation(serverWaveBlipOp.getBlipId(),transformedBlipOps.serverOp());
}
 else {
}
",0,0,0,,
814,} else {,"if (clientOp instanceof BlipContentOperation && serverOp instanceof BlipContentOperation) {
  BlipContentOperation clientBlipContentOp=(BlipContentOperation)clientOp;
  BlipContentOperation serverBlipContentOp=(BlipContentOperation)serverOp;
  DocOp clientContentOp=clientBlipContentOp.getContentOp();
  DocOp serverContentOp=serverBlipContentOp.getContentOp();
  OperationPair<? extends DocOp> transformedDocOps=Transformer.transform(clientContentOp,serverContentOp);
  clientOp=new BlipContentOperation(clientBlipContentOp.getContext(),transformedDocOps.clientOp());
  serverOp=new BlipContentOperation(serverBlipContentOp.getContext(),transformedDocOps.serverOp());
}
 else {
}
",0,0,0,,
815,} else {,"if (existing == null) {
  GadgetState state=DocumentBasedGadgetState.create(router,element,gadgetId,listener);
  gadgetSupplements.put(gadgetId,state);
  listener.onGadgetStateChanged(gadgetId,null,null,null);
}
 else {
}
",0,0,0,,
816,} else {,"if (gadgetId != null) {
  GadgetState existing=gadgetSupplements.get(gadgetId);
  if (existing == null) {
    GadgetState state=DocumentBasedGadgetState.create(router,element,gadgetId,listener);
    gadgetSupplements.put(gadgetId,state);
    listener.onGadgetStateChanged(gadgetId,null,null,null);
  }
 else {
  }
}
 else {
}
",0,0,0,,
817,} else {,"if (isFollowed()) {
  for (  WaveletId id : wave.getWavelets()) {
    supplement.archive(id,(int)wave.getVersion(id));
  }
}
 else {
}
",0,0,0,,
818,} else {,"if (existing == null) {
  WaveletReadState read=DocumentBasedWaveletReadState.create(router,element,waveletId,listener);
  waveletSupplements.put(waveletId,read);
  int waveletVersion=read.getWaveletLastReadVersion();
  if (waveletVersion != WaveletBasedSupplement.NO_VERSION) {
    listener.onLastReadWaveletVersionChanged(waveletId,PrimitiveSupplement.NO_VERSION,waveletVersion);
  }
  int participantsVersion=read.getParticipantsLastReadVersion();
  if (participantsVersion != PrimitiveSupplement.NO_VERSION) {
    listener.onLastReadParticipantsVersionChanged(waveletId,PrimitiveSupplement.NO_VERSION,participantsVersion);
  }
  int tagsVersion=read.getTagsLastReadVersion();
  if (tagsVersion != PrimitiveSupplement.NO_VERSION) {
    listener.onLastReadTagsVersionChanged(waveletId,PrimitiveSupplement.NO_VERSION,tagsVersion);
  }
  for (  String blipId : read.getReadBlips()) {
    int blipVersion=read.getBlipLastReadVersion(blipId);
    if (blipVersion != PrimitiveSupplement.NO_VERSION) {
      listener.onLastReadBlipVersionChanged(waveletId,blipId,PrimitiveSupplement.NO_VERSION,blipVersion);
    }
  }
}
 else {
}
",0,0,0,,
819,} else {,"if (waveletId != null) {
  WaveletReadState existing=waveletSupplements.get(waveletId);
  if (existing == null) {
    WaveletReadState read=DocumentBasedWaveletReadState.create(router,element,waveletId,listener);
    waveletSupplements.put(waveletId,read);
    int waveletVersion=read.getWaveletLastReadVersion();
    if (waveletVersion != WaveletBasedSupplement.NO_VERSION) {
      listener.onLastReadWaveletVersionChanged(waveletId,PrimitiveSupplement.NO_VERSION,waveletVersion);
    }
    int participantsVersion=read.getParticipantsLastReadVersion();
    if (participantsVersion != PrimitiveSupplement.NO_VERSION) {
      listener.onLastReadParticipantsVersionChanged(waveletId,PrimitiveSupplement.NO_VERSION,participantsVersion);
    }
    int tagsVersion=read.getTagsLastReadVersion();
    if (tagsVersion != PrimitiveSupplement.NO_VERSION) {
      listener.onLastReadTagsVersionChanged(waveletId,PrimitiveSupplement.NO_VERSION,tagsVersion);
    }
    for (    String blipId : read.getReadBlips()) {
      int blipVersion=read.getBlipLastReadVersion(blipId);
      if (blipVersion != PrimitiveSupplement.NO_VERSION) {
        listener.onLastReadBlipVersionChanged(waveletId,blipId,PrimitiveSupplement.NO_VERSION,blipVersion);
      }
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
820,} else {,"if (existing == null) {
  WaveletThreadState read=DocumentBasedWaveletThreadState.create(router,element,waveletId,listener);
  waveletSupplements.put(waveletId,read);
}
 else {
}
",0,0,0,,
821,} else {,"if (waveletId != null) {
  WaveletThreadState existing=waveletSupplements.get(waveletId);
  if (existing == null) {
    WaveletThreadState read=DocumentBasedWaveletThreadState.create(router,element,waveletId,listener);
    waveletSupplements.put(waveletId,read);
  }
 else {
  }
}
 else {
}
",0,0,0,,
822,else {,"if (!cmdp.isNoise()) {
  err=missedError(cmdp,true);
  errorMissed+=weight * err;
}
 else {
}
",0,0,0,,
823,} else {,"if (index(index) == attributeIndex) {
  this.attributeValues[index]=d;
}
 else {
}
",0,0,0,,
824,} else {,"if ((totNegCount - totPosCount) > 1) {
  int indexOfNegList=0;
  while ((totNegCount - totPosCount) > 1) {
    int neg1IndexVal=neg1List.get(indexOfNegList);
    for (int col=0; col < rawList.get(0).size(); col++) {
      double d=Double.parseDouble(rawList.get(neg1IndexVal).get(col));
      d=d * -1;
      String negatedValue=Double.toString(d);
      rawList.get(neg1IndexVal).set(col,negatedValue);
    }
    totNegCount--;
    totPosCount++;
    indexOfNegList++;
  }
}
 else {
}
",0,0,0,,
825,} else {,"if (statement.getPredicate().equals(RDF.TYPE)) {
  Object type=statement.getObject();
  if (type instanceof org.eclipse.rdf4j.model.URI) {
    org.eclipse.rdf4j.model.URI typeURI=(org.eclipse.rdf4j.model.URI)type;
    if (!shouldBeIgnored(typeURI)) {
      unit.setType(new URI(typeURI.stringValue()));
    }
  }
}
 else {
}
",0,0,0,,
826,else {,"if (isOutputKafkaProtocol()) {
  applicationLogic.foreachRDD(SimpleKafkaSerializer.getInstance(kafkaParams,protocol().getTopicDefinition().getActualTopicName()));
}
 else {
}
",0,0,0,,
827,} else {,"if (textBytes[fieldId] != null) {
  try {
    values[fieldId]=serializeDeserialize.deserialize(schema.getColumn(fieldId),textBytes[fieldId],0,textBytes[fieldId].length,nullBytes);
  }
 catch (  Exception e) {
    values[fieldId]=NullDatum.get();
  }
  textBytes[fieldId]=null;
}
 else {
}
",0,0,0,,
828,} else {,"if (queues.containsKey(owningProcess)) {
  firstLayer().receiveJobQueue(new DispatchJobQueueEvent(owningProcess,queues.get(owningProcess).peek().getContext(),queues.get(owningProcess),getActivities()));
}
 else {
}
",0,0,0,,
829,} else {,"if (!deleteOnClose) {
  getManifest().populateFromBundle();
  getManifest().writeAsJsonLD();
  if (ODFManifest.containsManifest(this))   getManifest().writeAsODFManifest();
  if (CombineManifest.containsManifest(this))   getManifest().writeAsCombineManifest();
}
 else {
}
",0,0,0,,
830,"if(s.contains(""mimetype"")||s.toLowerCase().contains(""license"")||s.contains("".ro"")){","if (s.contains(""mimetype"") || s.toLowerCase().contains(""license"") || s.contains("".ro"")) {
}
 else {
  if (!set.contains(s)) {
    this.infoWarningList.add(path.toString());
  }
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
831,} else {,"if (a == b) {
  common.add(a);
}
 else {
}
",0,0,0,,
832,else {,"if (classLoaderSharing == ClassLoaderSharing.SYSTEM) json.put(""classLoaderSharing"",""system"");
 else {
}
",0,0,0,,
833,else {,"if (result instanceof ServiceTreeCellRenderer && value instanceof FilterTreeNode && ((FilterTreeNode)value).getUserObject() instanceof ServiceDescription) prettifyServiceTreeCell((ServiceTreeCellRenderer)result,(ServiceDescription)((FilterTreeNode)value).getUserObject());
 else {
}
",0,0,0,,
834,} else {,"if (source instanceof URL) {
  suggestedFileName=((URL)source).getPath();
  suggestedFileName=suggestedFileName.substring(0,suggestedFileName.lastIndexOf("".""));
}
 else {
}
",0,0,0,,
835,&& ! configuration.path(CONDITION_ACTIVITY).asText().isEmpty()) {,"if (comparisonStr.equals(ActivityGenerator.CUSTOM_COMPARISON) && !configuration.path(CONDITION_ACTIVITY).asText().isEmpty()) {
}
 else {
  configuration.put(""runFirst"",true);
  if (portCombo.getSelectedItem() == null) {
    configuration.remove(ActivityGenerator.COMPARE_PORT);
    configuration.putNull(CONDITION_ACTIVITY);
    return;
  }
 else {
    configuration.put(ActivityGenerator.COMPARE_PORT,((String)portCombo.getSelectedItem()));
  }
  Comparison comparison=(Comparison)comparisonCombo.getSelectedItem();
  if (comparison == null) {
    configuration.remove(ActivityGenerator.COMPARISON);
    configuration.putNull(CONDITION_ACTIVITY);
    return;
  }
 else {
    configuration.put(ActivityGenerator.COMPARISON,comparison.getId());
  }
  configuration.put(ActivityGenerator.COMPARE_VALUE,valueField.getText());
  configuration.put(ActivityGenerator.DELAY,Double.parseDouble(delayField.getText()));
  configuration.put(ActivityGenerator.IS_FEED_BACK,feedBackCheck.isSelected());
  ActivityGenerator activityGenerator=new ActivityGenerator(configuration,processor);
  configuration.put(CONDITION_ACTIVITY,activityGenerator.generateActivity().getName());
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
"
836,} else {,"if (w != null) {
  try {
    StringBuffer content=new StringBuffer();
    content.append(""<div class='outer'>"");
    content.append(""<div class='workflow'>"");
    content.append(""<br>"");
    content.append(""<p class='title'>"");
    content.append(""Workflow Entry: <a href='preview:"" + Resource.WORKFLOW + "":""+ w.getURI()+ ""'>""+ w.getTitle()+ ""</a> (version ""+ w.getVersion()+ "")"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<p class='info'>"");
    content.append(""<b>Type:</b> "" + w.getVisibleType() + ""<br><br>"");
    content.append(""<b>Uploader:</b> <a href='preview:"" + Resource.USER + "":""+ w.getUploader().getURI()+ ""'>""+ w.getUploader().getName()+ ""</a><br>"");
    content.append(""<b>Created at: </b> "" + w.getCreatedAt() + ""<br>"");
    content.append(""<b>License: </b> <a href='"" + w.getLicense().getLink() + ""'>""+ w.getLicense().getText()+ ""</a>""+ ""&nbsp;<img src='""+ MyExperimentPerspective.getLocalResourceURL(""external_link_small_icon"")+ ""' />"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<a href='"" + w.getPreview() + ""'>"");
    content.append(""<img class='preview' src='"" + w.getThumbnailBig() + ""'></img>"");
    content.append(""</a>"");
    content.append(""<br>"");
    content.append(""<br>"");
    if (!w.getDescription().equals("""")) {
      content.append(""<p class='desc'>"");
      content.append(""<br>"");
      content.append(Util.stripHTML(w.getDescription()));
      content.append(""<br>"");
      content.append(""</p>"");
    }
 else {
      content.append(""<span class='none_text'>No description</span>"");
    }
    content.append(""<br>"");
    content.append(""</div>"");
    content.append(""</div>"");
    HTMLEditorKit kit=new StyledHTMLEditorKit(pluginMainComponent.getStyleSheet());
    HTMLDocument doc=(HTMLDocument)(kit.createDefaultDocument());
    doc.insertAfterStart(doc.getRootElements()[0].getElement(0),content.toString());
    JScrollPane spComponentsTab=createWorkflowComponentPreviewTab(w);
    JScrollPane spTagsTab=createTagPreviewTab(w.getTags());
    JScrollPane spCommentsTab=createCommentsPreviewTab(w.getComments());
    JScrollPane spCreditsTab=createCreditsPreviewTab(w.getCredits());
    JScrollPane spAttributionsTab=createAttributionsPreviewTab(w.getAttributions());
    JTabbedPane tpTabbedView=new JTabbedPane();
    tpTabbedView.add(""Components"",spComponentsTab);
    tpTabbedView.add(""Tags ("" + w.getTags().size() + "")"",spTagsTab);
    tpTabbedView.add(""Comments ("" + w.getComments().size() + "")"",spCommentsTab);
    tpTabbedView.addTab(""Credits ("" + w.getCredits().size() + "")"",spCreditsTab);
    tpTabbedView.addTab(""Attributions ("" + w.getAttributions().size() + "")"",spAttributionsTab);
    JTextPane tpWorkflowPreview=new JTextPane();
    tpWorkflowPreview.setEditable(false);
    tpWorkflowPreview.setEditorKit(kit);
    tpWorkflowPreview.setDocument(doc);
    tpWorkflowPreview.addHyperlinkListener((HyperlinkListener)eventHandler);
    JPanel jpFullWorkflowPreview=wrapTextPaneAndTabbedViewIntoFullPreview(tpWorkflowPreview,tpTabbedView);
    panelToPopulate.setLayout(new BorderLayout());
    panelToPopulate.add(jpFullWorkflowPreview,BorderLayout.CENTER);
  }
 catch (  Exception e) {
    logger.error(""Failed to populate Workflow Preview pane"",e);
  }
}
 else {
}
",0,0,0,,
837,} else {,"if (f != null) {
  try {
    StringBuffer content=new StringBuffer();
    content.append(""<div class='outer'>"");
    content.append(""<div class='file'>"");
    content.append(""<br>"");
    content.append(""<p class='title'>"");
    content.append(""File: <a href='preview:"" + Resource.FILE + "":""+ f.getURI()+ ""'>""+ f.getTitle()+ ""</a>"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<p class='info'>"");
    content.append(""<b>Type:</b> "" + f.getVisibleType() + ""<br>"");
    content.append(""<b>Filename:</b> "" + f.getFilename() + ""<br><br>"");
    content.append(""<b>Uploader:</b> <a href='preview:"" + Resource.USER + "":""+ f.getUploader().getURI()+ ""'>""+ f.getUploader().getName()+ ""</a><br>"");
    content.append(""<b>Created at: </b> "" + f.getCreatedAt() + ""<br>"");
    content.append(""<b>Last updated at: </b> "" + f.getUpdatedAt() + ""<br>"");
    content.append(""<b>License: </b> <a href='"" + f.getLicense().getLink() + ""'>""+ f.getLicense().getText()+ ""</a>""+ ""&nbsp;<img src='""+ MyExperimentPerspective.getLocalResourceURL(""external_link_small_icon"")+ ""' />"");
    content.append(""</p>"");
    content.append(""<br>"");
    if (!f.getDescription().equals("""")) {
      content.append(""<p class='desc'>"");
      content.append(""<br>"");
      content.append(Util.stripHTML(f.getDescription()));
      content.append(""<br>"");
      content.append(""</p>"");
    }
 else {
      content.append(""<span class='none_text'>No description</span>"");
    }
    content.append(""<br>"");
    content.append(""</div>"");
    content.append(""</div>"");
    HTMLEditorKit kit=new StyledHTMLEditorKit(pluginMainComponent.getStyleSheet());
    HTMLDocument doc=(HTMLDocument)(kit.createDefaultDocument());
    doc.insertAfterStart(doc.getRootElements()[0].getElement(0),content.toString());
    JScrollPane spTagsTab=createTagPreviewTab(f.getTags());
    JScrollPane spCommentsTab=createCommentsPreviewTab(f.getComments());
    JScrollPane spCreditsTab=createCreditsPreviewTab(f.getCredits());
    JScrollPane spAttributionsTab=createAttributionsPreviewTab(f.getAttributions());
    JTabbedPane tpTabbedView=new JTabbedPane();
    tpTabbedView.add(""Tags ("" + f.getTags().size() + "")"",spTagsTab);
    tpTabbedView.add(""Comments ("" + f.getComments().size() + "")"",spCommentsTab);
    tpTabbedView.add(""Credits ("" + f.getCredits().size() + "")"",spCreditsTab);
    tpTabbedView.add(""Attributions ("" + f.getAttributions().size() + "")"",spAttributionsTab);
    JTextPane tpFilePreview=new JTextPane();
    tpFilePreview.setEditable(false);
    tpFilePreview.setEditorKit(kit);
    tpFilePreview.setDocument(doc);
    tpFilePreview.addHyperlinkListener((HyperlinkListener)eventHandler);
    JPanel jpFullFilePreview=new JPanel();
    jpFullFilePreview.setBackground(Color.WHITE);
    jpFullFilePreview.setLayout(new GridBagLayout());
    GridBagConstraints c=new GridBagConstraints();
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=0;
    c.weighty=0;
    jpFullFilePreview.add(tpFilePreview,c);
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=1;
    c.weighty=1;
    c.fill=GridBagConstraints.VERTICAL;
    c.insets=new Insets(20,0,5,0);
    jpFullFilePreview.add(tpTabbedView,c);
    panelToPopulate.setLayout(new BorderLayout());
    panelToPopulate.add(jpFullFilePreview,BorderLayout.CENTER);
  }
 catch (  Exception e) {
    logger.error(""Failed to populate File Preview pane"",e);
  }
}
 else {
}
",0,0,0,,
838,} else {,"if (p != null) {
  try {
    StringBuffer content=new StringBuffer();
    content.append(""<div class='outer'>"");
    content.append(""<div class='pack'>"");
    content.append(""<br>"");
    content.append(""<p class='title'>"");
    content.append(""Pack: <a href='preview:"" + Resource.PACK + "":""+ p.getURI()+ ""'>""+ p.getTitle()+ ""</a>"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<p class='info'>"");
    content.append(""<b>Creator:</b> <a href='preview:"" + Resource.USER + "":""+ p.getCreator().getURI()+ ""'>""+ p.getCreator().getName()+ ""</a><br>"");
    content.append(""<b>Created at: </b> "" + p.getCreatedAt() + ""<br>"");
    content.append(""<b>Last updated at: </b> "" + p.getUpdatedAt() + ""<br>"");
    content.append(""</p>"");
    content.append(""<br>"");
    if (!p.getDescription().equals("""")) {
      content.append(""<p class='desc'>"");
      content.append(""<br>"");
      content.append(Util.stripHTML(p.getDescription()));
      content.append(""<br>"");
      content.append(""<br>"");
      content.append(""</p>"");
    }
 else {
      content.append(""<span class='none_text'>No description</span>"");
    }
    content.append(""<br>"");
    content.append(""</div>"");
    content.append(""</div>"");
    HTMLEditorKit kit=new StyledHTMLEditorKit(pluginMainComponent.getStyleSheet());
    HTMLDocument doc=(HTMLDocument)(kit.createDefaultDocument());
    doc.insertAfterStart(doc.getRootElements()[0].getElement(0),content.toString());
    JScrollPane spPackItemsTab=createPackItemPreviewTab(p);
    JScrollPane spTagsTab=createTagPreviewTab(p.getTags());
    JScrollPane spCommentsTab=createCommentsPreviewTab(p.getComments());
    JTabbedPane tpTabbedView=new JTabbedPane();
    tpTabbedView.addTab(""Pack Items ("" + p.getItemCount() + "")"",spPackItemsTab);
    tpTabbedView.add(""Tags ("" + p.getTags().size() + "")"",spTagsTab);
    tpTabbedView.add(""Comments ("" + p.getComments().size() + "")"",spCommentsTab);
    JTextPane tpPackPreview=new JTextPane();
    tpPackPreview.setEditable(false);
    tpPackPreview.setEditorKit(kit);
    tpPackPreview.setDocument(doc);
    tpPackPreview.addHyperlinkListener((HyperlinkListener)eventHandler);
    JPanel jpFullPackPreview=new JPanel();
    jpFullPackPreview.setBackground(Color.WHITE);
    jpFullPackPreview.setLayout(new GridBagLayout());
    GridBagConstraints c=new GridBagConstraints();
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=0;
    c.weighty=0;
    jpFullPackPreview.add(tpPackPreview,c);
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=1;
    c.weighty=1;
    c.fill=GridBagConstraints.VERTICAL;
    c.insets=new Insets(20,0,5,0);
    jpFullPackPreview.add(tpTabbedView,c);
    panelToPopulate.setLayout(new BorderLayout());
    panelToPopulate.add(jpFullPackPreview,BorderLayout.CENTER);
  }
 catch (  Exception e) {
    logger.error(""Failed to populate Pack Preview pane"",e);
  }
}
 else {
}
",0,0,0,,
839,} else {,"if (u != null) {
  try {
    StringBuffer content=new StringBuffer();
    content.append(""<div class='outer'>"");
    content.append(""<div class='user'>"");
    content.append(""<br>"");
    content.append(""<p class='name'>"");
    content.append(""User: <a href=preview:"" + Resource.USER + "":""+ u.getURI()+ ""'>""+ u.getName()+ ""</a>"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<p class='info'>"");
    String strLocation;
    if (u.getCity().length() == 0 && u.getCountry().length() == 0)     strLocation=""<span class='none_text'>Not specified</span>"";
 else     strLocation=u.getCity() + (u.getCity().length() == 0 || u.getCountry().length() == 0 ? """" : "", "") + u.getCountry();
    content.append(""<b>Location:</b> "" + strLocation + ""<br>"");
    content.append(""<b>Joined at: </b> "" + u.getCreatedAt() + ""<br>"");
    content.append(""<b>Last seen at: </b> "" + u.getUpdatedAt() + ""<br>"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<a href='"" + u.getAvatarResource() + ""'>"");
    content.append(""<img class='avatar' src='"" + u.getAvatarResource() + ""'></img>"");
    content.append(""</a>"");
    content.append(""<br>"");
    content.append(""<br>"");
    if (!u.getDescription().equals("""")) {
      content.append(""<p class='desc'>"" + Util.stripHTML(u.getDescription()) + ""<br><br></p>"");
    }
 else {
      content.append(""<span class='none_text'>No description</span>"");
    }
    content.append(""<p class='contact_details_header'>Contact Details</p>"");
    content.append(""<p class='contact_details'>"");
    content.append(""<b>Email: </b>"" + (u.getEmail().length() == 0 ? ""<span class='none_text'>Not specified</span>"" : u.getEmail()) + ""<br>"");
    content.append(""<b>Website: </b>"" + (u.getWebsite().length() == 0 ? ""<span class='none_text'>Not specified</span>"" : u.getWebsite()));
    content.append(""</p>"");
    content.append(""</div>"");
    content.append(""</div>"");
    HTMLEditorKit kit=new StyledHTMLEditorKit(pluginMainComponent.getStyleSheet());
    HTMLDocument doc=(HTMLDocument)(kit.createDefaultDocument());
    doc.insertAfterStart(doc.getRootElements()[0].getElement(0),content.toString());
    JPanel jpWorkflowsTabContent=new JPanel();
    jpWorkflowsTabContent.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
    jpWorkflowsTabContent.setLayout(new BoxLayout(jpWorkflowsTabContent,BoxLayout.Y_AXIS));
    Iterator<HashMap<String,String>> iWorkflows=u.getWorkflows().iterator();
    while (iWorkflows.hasNext()) {
      HashMap<String,String> hmCurWF=iWorkflows.next();
      jpWorkflowsTabContent.add(new JClickableLabel(hmCurWF.get(""name""),""preview:"" + Resource.WORKFLOW + "":""+ hmCurWF.get(""uri""),pluginMainComponent.getPreviewBrowser(),this.iconWorkflow));
    }
    JPanel jpFilesTabContent=new JPanel();
    jpFilesTabContent.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
    jpFilesTabContent.setLayout(new BoxLayout(jpFilesTabContent,BoxLayout.Y_AXIS));
    Iterator<HashMap<String,String>> iFiles=u.getFiles().iterator();
    while (iFiles.hasNext()) {
      HashMap<String,String> hmCurFile=iFiles.next();
      jpFilesTabContent.add(new JClickableLabel(hmCurFile.get(""name""),""preview:"" + Resource.FILE + "":""+ hmCurFile.get(""uri""),pluginMainComponent.getPreviewBrowser(),this.iconFile));
    }
    JPanel jpPacksTabContent=new JPanel();
    jpPacksTabContent.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
    jpPacksTabContent.setLayout(new BoxLayout(jpPacksTabContent,BoxLayout.Y_AXIS));
    Iterator<HashMap<String,String>> iPacks=u.getPacks().iterator();
    while (iPacks.hasNext()) {
      HashMap<String,String> hmCurPack=iPacks.next();
      jpPacksTabContent.add(new JClickableLabel(hmCurPack.get(""name""),""preview:"" + Resource.PACK + "":""+ hmCurPack.get(""uri""),pluginMainComponent.getPreviewBrowser(),this.iconPack));
    }
    JPanel jpFriendsTabContent=new JPanel();
    jpFriendsTabContent.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
    jpFriendsTabContent.setLayout(new BoxLayout(jpFriendsTabContent,BoxLayout.Y_AXIS));
    Iterator<HashMap<String,String>> iFriends=u.getFriends().iterator();
    while (iFriends.hasNext()) {
      HashMap<String,String> hmCurFriend=iFriends.next();
      jpFriendsTabContent.add(new JClickableLabel(hmCurFriend.get(""name""),""preview:"" + Resource.USER + "":""+ hmCurFriend.get(""uri""),pluginMainComponent.getPreviewBrowser(),this.iconUser));
    }
    JPanel jpGroupsTabContent=new JPanel();
    jpGroupsTabContent.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
    jpGroupsTabContent.setLayout(new BoxLayout(jpGroupsTabContent,BoxLayout.Y_AXIS));
    Iterator<HashMap<String,String>> iGroups=u.getGroups().iterator();
    while (iGroups.hasNext()) {
      HashMap<String,String> hmCurGroup=iGroups.next();
      jpGroupsTabContent.add(new JClickableLabel(hmCurGroup.get(""name""),""preview:"" + Resource.GROUP + "":""+ hmCurGroup.get(""uri""),pluginMainComponent.getPreviewBrowser(),this.iconGroup));
    }
    Dimension dPreferredTabSize=new Dimension(ResourcePreviewBrowser.PREFERRED_WIDTH - 50,PREFERRED_LOWER_TABBED_PANE_HEIGHT);
    JScrollPane spWorkflowsTab=new JScrollPane(jpWorkflowsTabContent);
    spWorkflowsTab.setBorder(BorderFactory.createEmptyBorder());
    spWorkflowsTab.setPreferredSize(dPreferredTabSize);
    spWorkflowsTab.getVerticalScrollBar().setUnitIncrement(ResourcePreviewBrowser.PREFERRED_SCROLL);
    JScrollPane spFilesTab=new JScrollPane(jpFilesTabContent);
    spFilesTab.setBorder(BorderFactory.createEmptyBorder());
    spFilesTab.setPreferredSize(dPreferredTabSize);
    spFilesTab.getVerticalScrollBar().setUnitIncrement(ResourcePreviewBrowser.PREFERRED_SCROLL);
    JScrollPane spPacksTab=new JScrollPane(jpPacksTabContent);
    spPacksTab.setBorder(BorderFactory.createEmptyBorder());
    spPacksTab.setPreferredSize(dPreferredTabSize);
    spPacksTab.getVerticalScrollBar().setUnitIncrement(ResourcePreviewBrowser.PREFERRED_SCROLL);
    JScrollPane spFriendsTab=new JScrollPane(jpFriendsTabContent);
    spFriendsTab.setBorder(BorderFactory.createEmptyBorder());
    spFriendsTab.setPreferredSize(dPreferredTabSize);
    spFriendsTab.getVerticalScrollBar().setUnitIncrement(ResourcePreviewBrowser.PREFERRED_SCROLL);
    JScrollPane spGroupsTab=new JScrollPane(jpGroupsTabContent);
    spGroupsTab.setBorder(BorderFactory.createEmptyBorder());
    spGroupsTab.setPreferredSize(dPreferredTabSize);
    spGroupsTab.getVerticalScrollBar().setUnitIncrement(ResourcePreviewBrowser.PREFERRED_SCROLL);
    JTabbedPane tpTabbedItems=new JTabbedPane();
    tpTabbedItems.addTab(""Workflows ("" + u.getWorkflows().size() + "")"",spWorkflowsTab);
    tpTabbedItems.addTab(""Files ("" + u.getFiles().size() + "")"",spFilesTab);
    tpTabbedItems.addTab(""Packs ("" + u.getPacks().size() + "")"",spPacksTab);
    tpTabbedItems.addTab(""Friends ("" + u.getFriends().size() + "")"",spFriendsTab);
    tpTabbedItems.addTab(""Groups ("" + u.getGroups().size() + "")"",spGroupsTab);
    JTextPane tpUserPreview=new JTextPane();
    tpUserPreview.setEditable(false);
    tpUserPreview.setEditorKit(kit);
    tpUserPreview.setDocument(doc);
    tpUserPreview.addHyperlinkListener((HyperlinkListener)eventHandler);
    JPanel jpFullUserPreview=new JPanel();
    jpFullUserPreview.setBackground(Color.WHITE);
    jpFullUserPreview.setLayout(new GridBagLayout());
    GridBagConstraints c=new GridBagConstraints();
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=0;
    c.weighty=0;
    jpFullUserPreview.add(tpUserPreview,c);
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=1;
    c.weighty=1;
    c.fill=GridBagConstraints.VERTICAL;
    c.insets=new Insets(20,0,5,0);
    jpFullUserPreview.add(tpTabbedItems,c);
    panelToPopulate.setLayout(new BorderLayout());
    panelToPopulate.add(jpFullUserPreview,BorderLayout.CENTER);
  }
 catch (  Exception e) {
    logger.error(""Failed to populate Workflow Preview pane"",e);
  }
}
 else {
}
",0,0,0,,
840,} else {,"if (g != null) {
  try {
    StringBuffer content=new StringBuffer();
    content.append(""<div class='outer'>"");
    content.append(""<div class='group'>"");
    content.append(""<br>"");
    content.append(""<p class='title'>"");
    content.append(""Group: <a href='preview:"" + Resource.GROUP + "":""+ g.getURI()+ ""'>""+ g.getTitle()+ ""</a>"");
    content.append(""</p>"");
    content.append(""<br>"");
    content.append(""<p class='info'>"");
    content.append(""<b>Administrator:</b> <a href='preview:"" + Resource.USER + "":""+ g.getAdmin().getURI()+ ""'>""+ g.getAdmin().getName()+ ""</a><br>"");
    content.append(""<b>Created at: </b> "" + g.getCreatedAt() + ""<br>"");
    content.append(""</p>"");
    content.append(""<br>"");
    if (!g.getDescription().equals("""")) {
      content.append(""<p class='desc'>"");
      content.append(""<br>"");
      content.append(Util.stripHTML(g.getDescription()));
      content.append(""<br>"");
      content.append(""</p>"");
    }
 else {
      content.append(""<span class='none_text'>No description</span>"");
    }
    content.append(""<br>"");
    content.append(""</div>"");
    content.append(""</div>"");
    HTMLEditorKit kit=new StyledHTMLEditorKit(pluginMainComponent.getStyleSheet());
    HTMLDocument doc=(HTMLDocument)(kit.createDefaultDocument());
    doc.insertAfterStart(doc.getRootElements()[0].getElement(0),content.toString());
    JPanel jpMembersTabContent=createStandardTabContentPanel();
    Iterator<User> iMembers=g.getMembers().iterator();
    while (iMembers.hasNext()) {
      User uCurMember=iMembers.next();
      jpMembersTabContent.add(new JClickableLabel(uCurMember.getName(),""preview:"" + uCurMember.getItemType() + "":""+ uCurMember.getURI(),pluginMainComponent.getPreviewBrowser(),new ImageIcon(MyExperimentPerspective.getLocalIconURL(uCurMember.getItemType()))));
    }
    JScrollPane spMembersTabContent=wrapPreviewTabContentIntoScrollPane(jpMembersTabContent);
    JPanel jpSharedItemsTabContent=createStandardTabContentPanel();
    Iterator<Resource> iSharedItems=g.getSharedItems().iterator();
    while (iSharedItems.hasNext()) {
      Resource rCurItem=iSharedItems.next();
      jpSharedItemsTabContent.add(new JClickableLabel(rCurItem.getTitle(),""preview:"" + rCurItem.getItemType() + "":""+ rCurItem.getURI(),pluginMainComponent.getPreviewBrowser(),new ImageIcon(MyExperimentPerspective.getLocalIconURL(rCurItem.getItemType()))));
    }
    JScrollPane spSharedItemsTabContent=wrapPreviewTabContentIntoScrollPane(jpSharedItemsTabContent);
    JScrollPane spTagsTabContent=createTagPreviewTab(g.getTags());
    JScrollPane spCommentsTab=createCommentsPreviewTab(g.getComments());
    JTabbedPane tpTabbedItems=new JTabbedPane();
    tpTabbedItems.addTab(""Members ("" + g.getMemberCount() + "")"",spMembersTabContent);
    tpTabbedItems.addTab(""Shared Items ("" + g.getSharedItemCount() + "")"",spSharedItemsTabContent);
    tpTabbedItems.addTab(""Tags ("" + g.getTags().size() + "")"",spTagsTabContent);
    tpTabbedItems.addTab(""Comments ("" + g.getComments().size() + "")"",spCommentsTab);
    JTextPane tpGroupPreview=new JTextPane();
    tpGroupPreview.setEditable(false);
    tpGroupPreview.setEditorKit(kit);
    tpGroupPreview.setDocument(doc);
    tpGroupPreview.addHyperlinkListener((HyperlinkListener)eventHandler);
    JPanel jpFullGroupPreview=new JPanel();
    jpFullGroupPreview.setBackground(Color.WHITE);
    jpFullGroupPreview.setLayout(new GridBagLayout());
    GridBagConstraints c=new GridBagConstraints();
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=0;
    c.weighty=0;
    jpFullGroupPreview.add(tpGroupPreview,c);
    c.gridx=GridBagConstraints.REMAINDER;
    c.gridy=1;
    c.weighty=1;
    c.fill=GridBagConstraints.VERTICAL;
    c.insets=new Insets(20,0,5,0);
    jpFullGroupPreview.add(tpTabbedItems,c);
    panelToPopulate.setLayout(new BorderLayout());
    panelToPopulate.add(jpFullGroupPreview,BorderLayout.CENTER);
  }
 catch (  Exception e) {
    logger.error(""Failed to populate Group Preview pane"",e);
  }
}
 else {
}
",0,0,0,,
841,} else {,"if (expanded) {
}
 else {
}
",0,0,0,,
842,else{,"if (getColumnClass(counter) == TreeTableModel.class) {
  MouseEvent me=(MouseEvent)e;
  MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());
  if (me.getClickCount() == 1) {
    tree.dispatchEvent(newME);
  }
}
 else {
}
",0,0,0,,
843,} else {,"if (isSelected) {
}
 else {
}
",0,0,0,,
844,} else {,"if (df.equals(selectionManager.getSelectedWorkflow())) {
  workflow=df;
  assignWfTree(newTree);
  scrollPane.setViewportView(wfTree);
  setSelectedNodes(wfTree,workflow);
  scrollPane.revalidate();
  scrollPane.repaint();
}
 else {
}
",0,0,0,,
845,} else {,"if (n == 0) {
  openDialog();
}
 else {
}
",0,0,0,,
846,} else {,"if (isProcessorContext) {
  ((TezProcessorContext)context).setProgress(progress);
}
 else {
}
",0,0,0,,
847,} else {,"if (old == null) {
  informGroupedInputs(input);
  condition.signalAll();
}
 else {
}
",0,0,0,,
848,} else {,"if (file.exists()) {
  len=(int)file.length();
}
 else {
}
",0,0,0,,
849,} else {,"if (file.exists()) {
  len=(int)file.length();
}
 else {
}
",0,0,0,,
850,} else {,"if (ctx.getPipeline().isAttached()) {
  initialize(ctx);
}
 else {
}
",0,0,0,,
851,&& grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {,"if (requestCode == WRITE_EXTERNAL_STORAGE_PERMISSION_REQUEST_CODE && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ),
QualifiedName(InfixExpression-rightOperand, ),
"
852,} else {,"if (objAsCommandDto != null) {
  commandsDto.getCommandDto().add(objAsCommandDto);
}
 else {
}
",0,0,0,,
853,} else {,"if (rightFacet.isPresent()) {
  reportFacetNotInOther(diffModel,RIGHT_SYMBOL,typeOrMemberId,rightFacet.get());
}
 else {
}
",0,0,0,,
854,} else {,"if (submitCallback.test(pendingArgs.getParamValues())) {
  close();
}
 else {
}
",0,0,0,,
855,} else {,"if (vaadinAuthenticationHandler.loginToSession(authenticationRequest)) {
  getUI().ifPresent(ui -> ui.navigate(MainViewVaa.class));
}
 else {
}
",0,0,0,,
856,if (part.getRelationshipsPart(false) == null) {,"if (part.getRelationshipsPart(false) == null) {
}
 else {
  traverseRelationships(opcPackage,part.getRelationshipsPart(false),sb,indent + ""    "");
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
857,} else {,"if (property != null) {
  final OneToOneAssociation otoa=property.getOneToOneAssociation();
  final Object value=cellMarshaller.getCellValue(cell,otoa);
  if (value != null) {
    if (imported == null) {
      imported=_Casts.uncheckedCast(factory.create());
      if (ExcelMetaDataEnabled.class.isAssignableFrom(cls)) {
        ExcelMetaDataEnabled importedEnhanced=(ExcelMetaDataEnabled)imported;
        importedEnhanced.setExcelRowNumber(row.getRowNum());
        importedEnhanced.setExcelSheetName(sheetName);
        imported=_Casts.uncheckedCast(importedEnhanced);
      }
      templateAdapter=this.objectManager.adapt(imported);
    }
    final ManagedObject valueAdapter=this.objectManager.adapt(value);
    otoa.set(templateAdapter,valueAdapter,InteractionInitiatedBy.USER);
  }
}
 else {
}
",0,0,0,,
858,} else {,"if (serviceInjector != null) {
  instance=this.cacheInstance(type,instance);
  serviceInjector.injectServicesInto(instance);
}
 else {
}
",0,0,0,,
859,} else {,"if (!pathNode.getKey().isEmpty()) {
  format=getFormatValueIfAnyFrom(jsonNode);
  jsonNode=jsonNode.path(pathNode.getKey());
}
 else {
}
",0,0,0,,
860,} else {,"if (isEntity) {
  ManagedObjects.stringify(adapter).ifPresent(oidStr -> PageParameterNames.OBJECT_OID.addStringTo(pageParameters,oidStr));
}
 else {
}
",0,0,0,,
861,} else {,"if (activeThemeProvider.getClass() == SessionThemeProvider.class) {
  initializeActiveThemeFromCookie();
}
 else {
}
",0,0,0,,
862,} else {,"if (addedNodes.put(nodeId,e) == null) {
  removedNodes.add(nodeId);
}
 else {
}
",0,0,0,,
863,} else {,"if (walker.enterElement(Constants.REQUIREDPRIMARYTYPES_ELEMENT)) {
  List<Name> types=new ArrayList<Name>();
  while (walker.iterateElements(Constants.REQUIREDPRIMARYTYPE_ELEMENT)) {
    types.add(resolver.getQName(walker.getContent()));
  }
  def.setRequiredPrimaryTypes(types.toArray(new Name[types.size()]));
  walker.leaveElement();
}
 else {
}
",0,0,0,,
864,} else {,"if (it.hasNext()) {
  long time=System.currentTimeMillis();
  listener.onEvent(it);
  time=System.currentTimeMillis() - time;
  if (log.isDebugEnabled()) {
    log.debug(""listener {} processed events in {} ms."",listener.getClass().getName(),time);
  }
}
 else {
}
",0,0,0,,
865,} else {,"if (name != null) {
  if (!name.equals(PARENT_ELEMENT_NAME)) {
    Query nameTest=new NameQuery(name,indexFormatVersion,nsMappings);
    BooleanQuery and=new BooleanQuery();
    and.add(query,Occur.MUST);
    and.add(nameTest,Occur.MUST);
    query=and;
  }
 else {
    query=new ChildAxisQuery(sharedItemMgr,query,null,indexFormatVersion,nsMappings);
    selectParent=false;
  }
}
 else {
}
",0,0,0,,
866,} else {,"if (!keepChanges) {
  context.getItemStateManager().disposeAllTransientItemStates();
}
 else {
}
",0,0,0,,
867,} else {,"if (!roSession.hasCapability(""addNode"",testRoot,args)) {
  try {
    testRoot.addNode(""foo"");
    roSession.save();
    fail(""Node.addNode() should fail according to Session.hasCapability()"");
  }
 catch (  RepositoryException e) {
  }
}
 else {
}
",0,0,0,,
868,else {,"if (node.hasProperties()) {
  if (skipBinary) {
    PropertyIterator iter=node.getProperties();
    while (iter.hasNext()) {
      Property prop=iter.nextProperty();
      checkCondition(""Property "" + prop.getName() + "" of node ""+ node.getPath()+ "" is not exported."",prop.getType() == PropertyType.BINARY);
    }
  }
 else {
    checkCondition(""One or more properties of node "" + node.getPath() + "" are not exported."",false);
  }
}
 else {
}
",0,0,0,,
869,} else {,"if (qNode.getDefinition().allowsSameNameSiblings()) {
  fail(""Query.storeAsNode() must not throw ItemExistsException "" + ""when same name siblings are allowed"");
}
 else {
}
",0,0,0,,
870,if (tmp[1] != null) {,"if (tmp[1] != null) {
}
 else {
  createPathQuery(value[0].getValue(),parent.getType());
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
871,} else {,"if (node.getNameTest().getLocalName().length() > 0) {
  try {
    sb.append(resolver.getJCRName(node.getNameTest()));
  }
 catch (  NamespaceException e) {
    exceptions.add(e);
  }
  if (node.getIndex() == LocationStepQueryNode.NONE) {
    sb.append(""[%]"");
  }
 else   if (node.getIndex() == 1) {
  }
 else {
    sb.append('[').append(node.getIndex()).append(']');
  }
}
 else {
}
",0,0,0,,
872,} else {,"if (type.equals(""jar"")) {
  localPath+=""-"" + FMT.format(Instant.now()) + "".jar"";
}
 else {
}
",0,0,0,,
873,if (false && change.isa.getSerializationType() == SerializationType.XML_DOCVIEW) {,"if (false && change.isa.getSerializationType() == SerializationType.XML_DOCVIEW) {
}
 else {
  TxInfo txInfo=modified.get(parent.getAggregate().getPath());
  if (txInfo == null) {
    txInfo=new TxInfo(parent.getAggregate());
    modified.put(parent.getAggregate().getPath(),txInfo);
  }
  txInfo.out.getArtifacts().add(new InputSourceArtifact(null,repoRelPath,change.isa.getExtension(),ArtifactType.FILE,change.isa.getInputSource(),change.isa.getSerializationType()));
}
",0,0,4,,"BooleanLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
874,} else {,"if (depth == 1) {
  if (isFile && node.getName().equals(JcrConstants.JCR_CONTENT)) {
    return true;
  }
}
 else {
}
",0,0,0,,
875,} else {,"if (file instanceof ImportArtifact) {
  Node fileNode=parent.getNode(fileName);
  ImportMode mode=wspFilter.getImportMode(fileNode.getPath());
  if (mode != ImportMode.MERGE && mode != ImportMode.MERGE_PROPERTIES) {
    if (!fileNode.hasNode(Node.JCR_CONTENT)) {
      fileNode.remove();
      importFile(info,parent,file,fileName,parent.hasNode(fileName));
    }
 else {
      Node contentNode=fileNode.getNode(Node.JCR_CONTENT);
      if (isModifiedNtResource(contentNode)) {
        contentNode.remove();
        contentNode=fileNode.addNode(Node.JCR_CONTENT,NodeType.NT_RESOURCE);
        info.onReplaced(contentNode.getPath());
      }
      if (!importNtResource(info,contentNode,file)) {
        info.onNop(fileNode.getPath());
      }
    }
  }
 else {
    info.onNop(fileNode.getPath());
  }
}
 else {
}
",0,0,0,,
876,&& builder.getChildNode(INDEX_DEFINITIONS_NAME).hasChildNode(this.name)) {,"if (builder.hasChildNode(INDEX_DEFINITIONS_NAME) && builder.getChildNode(INDEX_DEFINITIONS_NAME).hasChildNode(this.name)) {
}
 else {
  IndexHelper.newFTIndexDefinition(IndexUtils.getOrCreateOakIndex(builder),this.name,ElasticIndexDefinition.TYPE_ELASTICSEARCH,propertyTypes,excludes,async,storageEnabled);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ),
"
877,} else {,"if (checkNotNull(tree).exists()) {
  PropertyState p=tree.getProperty(VersionConstants.JCR_ISCHECKEDOUT);
  if (p != null) {
    return p.getValue(Type.BOOLEAN);
  }
}
 else {
}
",0,0,0,,
878,if (!force && condition == null && joinCondition == null) {,"if (!force && condition == null && joinCondition == null) {
}
 else if (PathUtils.isAbsolute(path)) {
  Expression.Function c=new Expression.Function(""issamenode"");
  c.params.add(new Expression.SelectorExpr(currentSelector));
  c.params.add(Expression.Literal.newString(path));
  condition=Expression.and(condition,c);
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
879,} else {,"if (q.lastNodeCount == 0 || nodes < q.lastNodeCount) {
  q.runCount++;
  q.lastNodeCount=0;
}
 else {
}
",0,0,0,,
880,"if (Objects.equal(beforeBuckets[i], afterBuckets[i])) {","if (Objects.equal(beforeBuckets[i],afterBuckets[i])) {
}
 else if (beforeBuckets[i] == null) {
  MapRecord bucket=afterBuckets[i];
  for (  MapEntry entry : bucket.getEntries()) {
    if (!diff.childNodeAdded(entry.getName(),entry.getNodeState())) {
      return false;
    }
  }
}
 else if (afterBuckets[i] == null) {
  MapRecord bucket=beforeBuckets[i];
  for (  MapEntry entry : bucket.getEntries()) {
    if (!diff.childNodeDeleted(entry.getName(),entry.getNodeState())) {
      return false;
    }
  }
}
 else {
  MapRecord beforeBucket=beforeBuckets[i];
  MapRecord afterBucket=afterBuckets[i];
  if (!afterBucket.compare(beforeBucket,diff)) {
    return false;
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
"
881,} else {,"if (b != null) {
  checkBranchAge(b);
  commit.addBranchCommits(b);
  Iterator<Revision> mergeCommits=commit.getMergeRevisions().iterator();
  for (  Revision rev : b.getCommits()) {
    rev=rev.asTrunkRevision();
    String commitTag=""c-"" + mergeCommits.next();
    NodeDocument.setRevision(op,rev,commitTag);
    op.containsMapEntry(NodeDocument.COLLISIONS,rev,false);
  }
  if (store.findAndUpdate(Collection.NODES,op) != null) {
    b.applyTo(getPendingModifications(),commit.getRevision());
    getBranches().remove(b);
  }
 else {
    NodeDocument root=Utils.getRootDocument(store);
    Set<Revision> conflictRevs=root.getConflictsFor(b.getCommits());
    String msg=""Conflicting concurrent change. Update operation failed: "" + op;
    throw new ConflictException(msg,conflictRevs);
  }
}
 else {
}
",0,0,0,,
882,} else {,"if (toNode != null) {
  w.tag('+').key(name).object().endObject();
}
 else {
}
",0,0,0,,
883,"|| (""S0001"".equals(state) && 2628 == ex.getErrorCode()) ) {","if (""22001"".equals(state) || (""72000"".equals(state) && 1489 == ex.getErrorCode()) || (""S0001"".equals(state) && 2628 == ex.getErrorCode())) {
}
 else {
  throw (ex);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
884,&& buffer[k + 1] != '\t' && buffer[k + 1] != '\r') {,"if (k + 1 < end && buffer[k] == ' ' && buffer[k + 1] != ' ' && buffer[k + 1] != '\t' && buffer[k + 1] != '\r') {
}
 else {
  out.write(buffer,start,k - start);
  pendingSpaces=true;
}
",0,0,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, ),
CharacterLiteral(InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, ),
CharacterLiteral(InfixExpression-rightOperand, ),
"
885,} else {,"if (line.substring(pSp + 1).startsWith(""~~"")) {
  pkr.addRecord(line.substring(0,pDK),line.substring(pDK + ""._domainkey."".length(),pSp),null);
}
 else {
}
",0,0,0,,
886,"if (node.getCredentials().identity.equals(""root"")) {","if (node.getCredentials().identity.equals(""root"")) {
}
 else if (node.getCredentials().shouldAuthenticateSudo()) {
  command=String.format(""sudo -S sh <<'%s'\n'%s'\n%s%s\n"",MARKER,node.getCredentials().getOptionalPassword().get(),command,MARKER);
}
 else {
  command=String.format(""sudo sh <<'%s'\n%s%s\n"",MARKER,command,MARKER);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
887,} else {,"if (value != null) {
  seenJoinKeyVar=true;
  h=hash(v,value);
}
 else {
}
",0,0,0,,
888,else {,"if (s == null) {
  s=new DisjointSet(r);
  m_setIndex.put(r,s);
}
 else {
}
",0,0,0,,
889,"if (!((String) v).startsWith(""EM_"")) {","if (!((String)v).startsWith(""EM_"")) {
}
 else {
  int val=ParseException.errorCode((String)v);
  if (val == -1) {
  }
 else {
    int rslt=options.setErrorMode(cond,val);
    return rslt;
  }
}
",0,0,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
890,} else {,"if (infgraph instanceof LPBackwardRuleInfGraph) {
  for (int i=0; i < length; i++) {
    ((LPBackwardRuleInfGraph)infgraph).setTabled(args[i]);
  }
}
 else {
}
",0,0,0,,
891,} else {,"if (infgraph instanceof LPBackwardRuleInfGraph) {
  ((LPBackwardRuleInfGraph)infgraph).setTabled(Node.ANY);
}
 else {
}
",0,0,0,,
892,} else {,"if (context instanceof Generator) {
  ((Generator)context).pump(this);
}
 else {
}
",0,0,0,,
893,} else {,"if (isAdd != cse.isAdd) {
  i.remove();
  if (cse.isAdd)   nPos--;
 else   nNeg--;
  done=true;
}
 else {
}
",0,0,0,,
894,{,"if (termNumber > 0 && rule.getBodyElement(termNumber - 1) instanceof Functor) {
}
",0,0,0,,
895,{,"if (in.getMimeType() != null) {
}
",0,0,0,,
896,{,"if (fact.equals("""")) {
}
 else if (fact.charAt(0) == '!') {
  Triple t=NodeCreateUtils.createTriple(fact.substring(1));
  result.add(t);
  ReifierStd.reifyAs(result,NodeCreateUtils.create(""_r"" + ++count),t);
}
 else if (fact.charAt(0) == '~') {
  Triple t=NodeCreateUtils.createTriple(fact.substring(1));
  ReifierStd.reifyAs(result,NodeCreateUtils.create(""_r"" + ++count),t);
}
 else {
  result.add(NodeCreateUtils.createTriple(fact));
}
",0,0,0,,
897,else {,"if (seen.contains(expected[j])) {
  mask&=~(1 << j);
}
 else {
}
",0,0,0,,
898,{,"if (!isExpected) {
}
",0,0,0,,
899,} else {,"if (!polygon.isEmpty()) {
  LineString lineString=polygon.getExteriorRing();
  CustomCoordinateSequence coordSequence=(CustomCoordinateSequence)lineString.getCoordinateSequence();
  Element exterior=new Element(""exterior"",GML_NAMESPACE);
  Element exteriorLinearRing=new Element(""LinearRing"",GML_NAMESPACE);
  Element exteriorPosList=new Element(""posList"",GML_NAMESPACE);
  exteriorPosList.addContent(convertToGMLText(coordSequence));
  exteriorLinearRing.addContent(exteriorPosList);
  exterior.addContent(exteriorLinearRing);
  gmlRoot.addContent(exterior);
  int interiorRings=polygon.getNumInteriorRing();
  for (int i=0; i < interiorRings; i++) {
    Element interior=new Element(""interior"",GML_NAMESPACE);
    Element interiorLinearRing=new Element(""LinearRing"",GML_NAMESPACE);
    Element innerPosList=new Element(""posList"",GML_NAMESPACE);
    LineString innerLineString=polygon.getInteriorRingN(i);
    CustomCoordinateSequence innerCoordSequence=(CustomCoordinateSequence)innerLineString.getCoordinateSequence();
    innerPosList.addContent(convertToGMLText(innerCoordSequence));
    interiorLinearRing.addContent(innerPosList);
    interior.addContent(interiorLinearRing);
    gmlRoot.addContent(interior);
  }
}
 else {
}
",0,0,0,,
900,} else {,"if (!multiPoint.isEmpty()) {
  int geomCount=multiPoint.getNumGeometries();
  for (int i=0; i < geomCount; i++) {
    Element pointMember=new Element(""pointMember"",GML_NAMESPACE);
    Point point=(Point)multiPoint.getGeometryN(i);
    Element pointElement=buildPoint(point.getCoordinateSequence(),srsName);
    pointMember.addContent(pointElement);
    gmlRoot.addContent(pointMember);
  }
}
 else {
}
",0,0,0,,
901,} else {,"if (!multiLineString.isEmpty()) {
  int geomCount=multiLineString.getNumGeometries();
  for (int i=0; i < geomCount; i++) {
    Element lineStringMember=new Element(""curveMember"",GML_NAMESPACE);
    LineString lineString=(LineString)multiLineString.getGeometryN(i);
    Element lineStringElement=buildLineString(lineString.getCoordinateSequence(),srsName);
    lineStringMember.addContent(lineStringElement);
    gmlRoot.addContent(lineStringMember);
  }
}
 else {
}
",0,0,0,,
902,} else {,"if (!multiPolygon.isEmpty()) {
  int geomCount=multiPolygon.getNumGeometries();
  for (int i=0; i < geomCount; i++) {
    Element polygonMember=new Element(""surfaceMember"",GML_NAMESPACE);
    Polygon polygon=(Polygon)multiPolygon.getGeometryN(i);
    polygonMember.addContent(buildPolygon(polygon,srsName));
    gmlRoot.addContent(polygonMember);
  }
}
 else {
}
",0,0,0,,
903,} else {,"if (!geometryCollection.isEmpty()) {
  int geomCount=geometryCollection.getNumGeometries();
  for (int i=0; i < geomCount; i++) {
    Element geometryMember=new Element(""geometryMember"",GML_NAMESPACE);
    Geometry geometry=geometryCollection.getGeometryN(i);
    geometryMember.addContent(expand(geometry,dimensions,srsName));
    gmlRoot.addContent(geometryMember);
  }
}
 else {
}
",0,0,0,,
904,} else {,"if (evaluator.evaluateAny(runAs,SecuredGraphEventManager.DELETE,sg.getModelNode())) {
  Graph g2=removed;
  if (!evaluator.evaluateAny(runAs,SecuredGraphEventManager.DELETE,sg.getModelNode(),Triple.ANY)) {
    g2=new CollectionGraph(removed.find(Triple.ANY).filterKeep(new PermTripleFilter(SecuredGraphEventManager.DELETE,sg,evaluator)).toList());
  }
  wrapped.notifyDeleteGraph(g,g2);
}
 else {
}
",0,0,0,,
905,} else {,"if (evaluator.evaluateAny(runAs,SecuredGraphEventManager.DELETE,sg.getModelNode())) {
  if (!evaluator.evaluateAny(runAs,SecuredGraphEventManager.DELETE,sg.getModelNode(),Triple.ANY)) {
    iter=WrappedIterator.create(it).filterKeep(new PermTripleFilter(SecuredGraphEventManager.DELETE,sg,evaluator));
  }
  wrapped.notifyDeleteIterator(g,iter);
}
 else {
}
",0,0,0,,
906,else {,"if (Parameters.doesShapeHaveAllParameters(shapesGraph,shape.getShapeNode(),required)) {
  Multimap<Parameter,Node> parameterValues=constraintParameterValues(shapesGraph,shNode,scc);
  if (parameterValues.keySet().size() > 1) {
    Map<Parameter,Node> parameterMap=new HashMap<>();
    parameterValues.asMap().forEach((p,values) -> {
      if (values.size() > 1)       throw new ShaclParseException(""Multiple values for parameter "" + p + "" in constraint with multiple parameters"");
    }
);
  }
  ConstraintComponentSPARQL constraintComponentSPARQL=new ConstraintComponentSPARQL(scc,parameterValues);
  constraints.add(constraintComponentSPARQL);
}
 else {
}
",0,0,0,,
907,{,"if (hashBucketMgr.valid(0)) {
}
 else {
  HashBucket hb=hashBucketMgr.create(0,0);
  dictionary.put(0,hb.getId());
  bitLen=0;
  hashBucketMgr.put(hb);
}
",0,0,0,,
908,if ( x.length != 1 ) {},"if (x.length != 1) {
}
",0,0,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
909,} else {,"if (docInfoSize == numSentences) {
  boolean format3=false;
  HashSet<String> seenStrings=new HashSet<>();
  BufferedReader inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    if (seenStrings.contains(line))     format3=true;
    seenStrings.add(line);
  }
  inFile.close();
  HashSet<String> seenDocNames=new HashSet<>();
  HashMap<String,Integer> docOrder=new HashMap<>();
  inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    String docName="""";
    if (format3) {
      docName=line;
    }
 else {
      int sep_i=Math.max(line.lastIndexOf('_'),line.lastIndexOf('-'));
      docName=line.substring(0,sep_i);
    }
    if (!seenDocNames.contains(docName)) {
      seenDocNames.add(docName);
      docOrder.put(docName,seenDocNames.size() - 1);
    }
    int docOrder_i=docOrder.get(docName);
    docOfSentence[i]=docOrder_i;
  }
  inFile.close();
  numDocuments=seenDocNames.size();
}
 else {
}
",0,0,0,,
910,} else {,"if (useBackwardLattice) {
  int to_end=(to == backwardIndex.size() - 1) ? backwardLattice.size() : backwardIndex.get(to + 1);
  if (backwardLattice.get(to_end - 1) <= span_length)   return labels;
  Map<Integer,Set<Integer>> main_constituents=new HashMap<>();
  for (int i=to_end - 2; i >= backwardIndex.get(to); i-=2) {
    int current_span=backwardLattice.get(i + 1);
    if (current_span <= span_length)     break;
 else {
      int start_pos=to - backwardLattice.get(i + 1);
      Set<Integer> nts=main_constituents.get(start_pos);
      if (nts == null)       main_constituents.put(start_pos,new HashSet<>());
      main_constituents.get(start_pos).add(backwardLattice.get(i));
    }
  }
  for (int i=backwardIndex.get(from); i < backwardIndex.get(from + 1); i+=2) {
    Set<Integer> main_set=main_constituents.get(from - backwardLattice.get(i + 1));
    if (main_set != null) {
      for (      int main : main_set)       labels.add(Vocabulary.id(adjustMarkup(Vocabulary.word(main) + ""\\"" + Vocabulary.word(backwardLattice.get(i)))));
    }
  }
}
 else {
}
",0,0,0,,
911,} else {,"if (this.produceRerankedNbest) {
}
 else {
}
",0,0,0,,
912,} else {,"if (docInfoSize == numSentences) {
  boolean format3=false;
  HashSet<String> seenStrings=new HashSet<>();
  BufferedReader inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    if (seenStrings.contains(line))     format3=true;
    seenStrings.add(line);
  }
  inFile.close();
  HashSet<String> seenDocNames=new HashSet<>();
  HashMap<String,Integer> docOrder=new HashMap<>();
  inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    String docName="""";
    if (format3) {
      docName=line;
    }
 else {
      int sep_i=Math.max(line.lastIndexOf('_'),line.lastIndexOf('-'));
      docName=line.substring(0,sep_i);
    }
    if (!seenDocNames.contains(docName)) {
      seenDocNames.add(docName);
      docOrder.put(docName,seenDocNames.size() - 1);
    }
    int docOrder_i=docOrder.get(docName);
    docOfSentence[i]=docOrder_i;
  }
  inFile.close();
  numDocuments=seenDocNames.size();
}
 else {
}
",0,0,0,,
913,} else {,"if (docInfoSize == numSentences) {
  boolean format3=false;
  HashSet<String> seenStrings=new HashSet<>();
  BufferedReader inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    if (seenStrings.contains(line))     format3=true;
    seenStrings.add(line);
  }
  inFile.close();
  HashSet<String> seenDocNames=new HashSet<>();
  HashMap<String,Integer> docOrder=new HashMap<>();
  inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    String docName="""";
    if (format3) {
      docName=line;
    }
 else {
      int sep_i=Math.max(line.lastIndexOf('_'),line.lastIndexOf('-'));
      docName=line.substring(0,sep_i);
    }
    if (!seenDocNames.contains(docName)) {
      seenDocNames.add(docName);
      docOrder.put(docName,seenDocNames.size() - 1);
    }
    int docOrder_i=docOrder.get(docName);
    docOfSentence[i]=docOrder_i;
  }
  inFile.close();
  numDocuments=seenDocNames.size();
}
 else {
}
",0,0,0,,
914,} else {,"if (docInfoSize == numSentences) {
  boolean format3=false;
  HashSet<String> seenStrings=new HashSet<>();
  BufferedReader inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    if (seenStrings.contains(line))     format3=true;
    seenStrings.add(line);
  }
  inFile.close();
  HashSet<String> seenDocNames=new HashSet<>();
  HashMap<String,Integer> docOrder=new HashMap<>();
  inFile=new BufferedReader(new FileReader(docInfoFileName));
  for (int i=0; i < numSentences; ++i) {
    String line=inFile.readLine();
    String docName="""";
    if (format3) {
      docName=line;
    }
 else {
      int sep_i=Math.max(line.lastIndexOf('_'),line.lastIndexOf('-'));
      docName=line.substring(0,sep_i);
    }
    if (!seenDocNames.contains(docName)) {
      seenDocNames.add(docName);
      docOrder.put(docName,seenDocNames.size() - 1);
    }
    int docOrder_i=docOrder.get(docName);
    docOfSentence[i]=docOrder_i;
  }
  inFile.close();
  numDocuments=seenDocNames.size();
}
 else {
}
",0,0,0,,
915,} else {,"if (IPV4_PATTERN.matcher(wildcardsReplaced).matches()) {
  authorizedIps.put(host,wildcardsReplaced);
}
 else {
}
",0,0,0,,
916,{,"if (isSpan == null) {
}
 else if (isSpan.booleanValue()) {
  el=popElement(""span"");
}
 else {
  el=popElement(""div"");
}
",0,0,0,,
917,{,"if (ch == '\r') {
}
 else if (ch == '<') {
  m_plainTextBuf.append(""&lt;"");
}
 else if (ch == '>') {
  m_plainTextBuf.append(""&gt;"");
}
 else if (ch == '&') {
  m_plainTextBuf.append(""&amp;"");
}
 else if (ch == '~') {
  String braces=readWhile(""}"");
  if (braces.length() >= 3) {
    m_plainTextBuf.append(""}}}"");
    braces=braces.substring(3);
  }
 else {
    m_plainTextBuf.append((char)ch);
  }
  for (int i=braces.length() - 1; i >= 0; i--) {
    pushBack(braces.charAt(i));
  }
}
 else {
  m_plainTextBuf.append((char)ch);
}
",0,0,0,,
918,} else {,"if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_INSENSITIVE_MATCH) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_INSENSITIVE_MATCH_TMODEL)) {
}
 else {
}
",0,0,0,,
919,} else {,"if (!SendNotification(x,pa.primaryUrl,req)) {
  for (  String url : pa.alternateUrls) {
    if (SendNotification(x,url,req)) {
      break;
    }
  }
}
 else {
}
",0,0,0,,
920,} else {,"if (items.get(i).getTModelKey() != null) {
  org.apache.juddi.model.Tmodel tm=em.find(org.apache.juddi.model.Tmodel.class,items.get(i).getTModelKey());
  if (tm == null) {
  }
 else   if (find.getAuthorizedName().equalsIgnoreCase(tm.getAuthorizedName())) {
    throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"",""Referenced key "" + items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue() + "" exists but is not owned by you.""));
  }
}
 else {
}
",0,0,0,,
921,{,"if (GetBusinessDetails == null) {
}
 else {
  be.setBusinessServices(GetBusinessDetails.getBusinessServices());
}
",0,0,0,,
922,if (lockService.getMemoryLocks().getLockMap().get(path) == null) {,"if (lockService.getMemoryLocks().getLockMap().get(path) == null) {
}
 else {
  assertFalse(lockService.getMemoryLocks().getLockMap().get(path).isWriteLocked());
}
",0,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
923,{,"if (retAssocs.size() == 0) {
}
 else {
  Iterator iterAss=retAssocs.iterator();
  while (iterAss.hasNext()) {
    Association assc=(Association)iterAss.next();
    if (assc.getKey().getId().equals(associationID)) {
      System.out.println(""found: "" + associationID);
      fail(""Deleted Association found"");
    }
  }
}
",0,0,0,,
924,} else if ((! isKeepNullProperties()) && willRecurse(p)) {,"if ((!isKeepNullProperties()) && willRecurse(p)) {
}
 else {
  serializeAnything(out,key,null,null,null);
  serializeAnything(out,value,cMeta,key,pMeta);
}
",0,0,3,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
925,} else {,"if (cpf != ELEMENTS) {
  String s=getText(r,trim);
  if (s != null) {
    if (sb == null)     sb=getStringBuilder();
    sb.append(s);
  }
}
 else {
}
",0,0,0,,
926,"if (warmups.getOrDefault(destination, Collections.emptySet()).contains(task)) {","if (warmups.getOrDefault(destination,Collections.emptySet()).contains(task)) {
}
 else if (taskIsNotCaughtUpOnClientAndOtherCaughtUpClientsExist(task,destination,tasksToCaughtUpClients)) {
  taskMovements.add(new TaskMovement(task,destination,tasksToCaughtUpClients.get(task)));
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
927,{,"if (trimmedLine.length() < 1) {
}
 else if (trimmedLine.startsWith(""//"") || trimmedLine.startsWith(""--"")) {
  LOGGER.info(trimmedLine);
}
 else if (!fullLineDelimiter && trimmedLine.endsWith(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter)) {
  command.append(line.substring(0,line.lastIndexOf(delimiter)));
  command.append("" "");
  Statement statement=conn.createStatement();
  LOGGER.info(command.toString());
  if (stopOnError) {
    statement.execute(command.toString());
  }
 else {
    try {
      statement.execute(command.toString());
    }
 catch (    SQLException e) {
      e.fillInStackTrace();
      LOGGER.warn(""Error executing SQL {}"",command);
    }
  }
  if (autoCommit && !conn.getAutoCommit()) {
    conn.commit();
  }
  command=null;
  try {
    statement.close();
  }
 catch (  Exception e) {
  }
  Thread.yield();
}
 else {
  command.append(line);
  command.append("" "");
}
",0,0,0,,
928,} else {,"if (parameter != null) {
  CompletionCallback callback=(CompletionCallback)parameter.getValue();
  callback.setStatus(Status.CoordinatorStatus.STATUS_COMMITTING);
  callback.setComplete(true);
}
 else {
}
",0,0,0,,
929,} else {,"if (parameter != null) {
  CompletionCallback callback=(CompletionCallback)parameter.getValue();
  callback.setStatus(Status.CoordinatorStatus.STATUS_ABORTING);
  callback.setComplete(true);
}
 else {
}
",0,0,0,,
930,} else {,"if (blacklistPolicy == BlacklistPolicy.Discard) {
  filteredProfiles.put(profileName,ProfileBuilder.Factory.create(profileName).getProfile());
}
 else {
}
",0,0,0,,
931,} else {,"if (type.isAssignableFrom(Enum.class)) {
  Set<String> values=new HashSet<>();
  for (  Object o : EnumSet.allOf((Class<Enum>)type)) {
    values.add(o.toString());
  }
  completer=new StringsCompleter(values,false);
}
 else {
}
",0,0,0,,
932,} else {,"if (type.isAssignableFrom(Enum.class)) {
  Set<String> values=new HashSet<>();
  for (  Object o : EnumSet.allOf((Class<Enum>)type)) {
    values.add(o.toString());
  }
  argCompleter=new StringsCompleter(values,false);
}
 else {
}
",0,0,0,,
933,} else {,"if (type.isAssignableFrom(Enum.class)) {
  Set<String> values=new HashSet<>();
  for (  Object o : EnumSet.allOf((Class<Enum>)type)) {
    values.add(o.toString());
  }
  completer=new StringsCompleter(values,false);
}
 else {
}
",0,0,0,,
934,} else {,"if (type.isAssignableFrom(Enum.class)) {
  Set<String> values=new HashSet<>();
  for (  Object o : EnumSet.allOf((Class<Enum>)type)) {
    values.add(o.toString());
  }
  argCompleter=new StringsCompleter(values,false);
}
 else {
}
",0,0,0,,
935,} else {,"if (AccessController.doPrivileged(new GetPropertyAction(""jaxb.debug"")) != null) {
  logger.setUseParentHandlers(false);
  logger.setLevel(Level.ALL);
  ConsoleHandler handler=new ConsoleHandler();
  handler.setLevel(Level.ALL);
  logger.addHandler(handler);
}
 else {
}
",0,0,0,,
936,} else {,"if (featureFileResource.getFullPath().getFileExtension().equals(""xml"")) {
  fin=new FileInputStream(featureFileResource.getRawLocation().toFile());
  featuresRepository.add(new XmlFeaturesRepository(featureFileResource.getName(),fin));
  fin.close();
}
 else {
}
",0,0,0,,
937,} else{,"if (!backendURI.isPresent()) {
  haProvider.makeNextActiveURLAvailable(getServiceRole());
}
 else {
}
",0,0,0,,
938,} else {,"if (!ks.isCredentialStoreForClusterAvailable(GATEWAY_CREDENTIAL_STORE_NAME)) {
  ks.createCredentialStoreForCluster(GATEWAY_CREDENTIAL_STORE_NAME);
}
 else {
}
",0,0,0,,
939,else {,"if (!ks.isKeystoreForGatewayAvailable()) {
  ks.createKeystoreForGateway();
}
 else {
}
",0,0,0,,
940,} else {,"if (extra == null) {
  extra=new Query(queryName,paramName,valuePattern,literal);
}
 else {
}
",0,0,0,,
941,} else {,"if (extra == null) {
  extra=new Query(queryName,token);
}
 else {
}
",0,0,0,,
942,} else {,"if (dDims != null && dDims.get(i)) {
  dSerializer=new DynamicDimSerializer(dSerializer);
}
 else {
}
",0,0,0,,
943,} else {,"if (memPart.asyncFlusher == null) {
  assert writeOffset == diskPart.tailOffset;
  diskPart.closeWrite();
  ongoingWriter=null;
  if (debug)   logger.debug(MemDiskStore.this + "" write end @ "" + writeOffset+ "", ""+ (memWrite)+ "" to mem, ""+ (diskWrite)+ "" to disk, ""+ nWriteCalls+ "" write() calls"");
}
 else {
}
",0,0,0,,
944,} else {,"if (!col.getColumnDesc().isComputedColumn()) {
  ColumnDesc foundCol=table.findColumnByName(col.getName());
  if (col.getColumnDesc().equals(foundCol) == false) {
    logger.error(""Realization '"" + realization.getCanonicalName() + ""' reports column '""+ col.getCanonicalName()+ ""', but it is not equal to '""+ foundCol+ ""' according to MetadataManager"");
    return false;
  }
}
 else {
}
",0,0,0,,
945,if (!FileSystem.getLocal(conf).exists(outputPath)) {,"if (!FileSystem.getLocal(conf).exists(outputPath)) {
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
946,} else {,"if (!noPrecaculatedFieldsAvailable()) {
  List<MeasureDesc> measures=this.context.realization.getMeasures();
  List<FunctionDesc> newAggrs=Lists.newArrayList();
  for (  FunctionDesc aggFunc : this.aggregations) {
    if (aggFunc instanceof DynamicFunctionDesc) {
      if (!aggFunc.isDimensionAsMetric()) {
        DynamicFunctionDesc dynAggFunc=(DynamicFunctionDesc)aggFunc;
        Map<TblColRef,FunctionDesc> innerOldAggrs=dynAggFunc.getRuntimeFuncMap();
        Map<TblColRef,FunctionDesc> innerNewAggrs=Maps.newHashMapWithExpectedSize(innerOldAggrs.size());
        for (        TblColRef key : innerOldAggrs.keySet()) {
          innerNewAggrs.put(key,findInMeasures(innerOldAggrs.get(key),measures));
        }
        dynAggFunc.setRuntimeFuncMap(innerNewAggrs);
        if (dynAggFunc instanceof CountDistinctExpressionDynamicFunctionDesc) {
          dynAggFunc.setReturnType(innerNewAggrs.values().iterator().next().getReturnType());
          TblColRef paramCol=aggFunc.getParameter().getColRefs().get(0);
          RelDataTypeFactory typeFactory=getCluster().getTypeFactory();
          RelDataType fieldType=OLAPTable.createSqlType(typeFactory,dynAggFunc.getRewriteFieldType(),true);
          this.context.dynamicFields.put(paramCol,fieldType);
        }
      }
 else {
        TblColRef paramCol=aggFunc.getParameter().getColRefs().get(0);
        this.context.dynamicFields.remove(paramCol);
      }
      newAggrs.add(aggFunc);
    }
 else {
      newAggrs.add(findInMeasures(aggFunc,measures));
    }
  }
  this.aggregations.clear();
  this.aggregations.addAll(newAggrs);
  this.context.aggregations.clear();
  this.context.aggregations.addAll(newAggrs);
}
 else {
}
",0,0,0,,
947,} else {,"if (0 != limit && 0 == offset) {
  retSql=prefixSql + sql + suffixSql+ "" limit ""+ String.valueOf(limit);
}
 else {
}
",0,0,0,,
948,} else {,"if (tableMap.containsKey(factTableName)) {
  tableMap.get(factTableName).getTYPE().add(TableMetaWithType.tableTypeEnum.FACT);
}
 else {
}
",0,0,0,,
949,} else {,"if (tableMap.containsKey(lookupTableName)) {
  tableMap.get(lookupTableName).getTYPE().add(TableMetaWithType.tableTypeEnum.LOOKUP);
}
 else {
}
",0,0,0,,
950,} else {,"if (columnMap.containsKey(columnIdentity)) {
  columnMap.get(columnIdentity).getTYPE().add(ColumnMetaWithType.columnTypeEnum.PK);
}
 else {
}
",0,0,0,,
951,} else {,"if (columnMap.containsKey(columnIdentity)) {
  columnMap.get(columnIdentity).getTYPE().add(ColumnMetaWithType.columnTypeEnum.FK);
}
 else {
}
",0,0,0,,
952,} else {,"if (columnMap.containsKey(columnIdentity)) {
  columnMap.get(columnIdentity).getTYPE().add(ColumnMetaWithType.columnTypeEnum.DIMENSION);
}
 else {
}
",0,0,0,,
953,} else {,"if (columnMap.containsKey(columnIdentity)) {
  columnMap.get(columnIdentity).getTYPE().add(ColumnMetaWithType.columnTypeEnum.MEASURE);
}
 else {
}
",0,0,0,,
954,} else {,"if (this.session.getUriHandler().isDocument(tempURI)) {
  content_type=""text/html"";
  responseMessage=""ok"";
  responseCode=200;
  newURL=tempURI;
}
 else {
}
",0,0,0,,
955,} else {,"if (dltState0) {
  assertEquals(c.get(Calendar.HOUR_OF_DAY),h);
}
 else {
}
",0,0,0,,
956,} else {,"if (!isPaused() && !isClosed()) {
  if ((receiver != null)) {
    receiver.doPost(event);
  }
 else {
    remoteLogger=repository.getLogger(event.getLoggerName());
    if (event.getLevel().isGreaterOrEqual(remoteLogger.getEffectiveLevel())) {
      remoteLogger.callAppenders(event);
    }
  }
}
 else {
}
",0,0,0,,
957,} else {,"if ((System.currentTimeMillis() - lastTimeStamp) < (2 * CHECK_PERIOD)) {
  if (!(textFeld.getText().trim().equals(lastText.trim()))) {
    lastText=textFeld.getText();
    EventQueue.invokeLater(DelayedTextDocumentListener.this::setFilter);
  }
}
 else {
}
",0,0,0,,
958,} else {,"if (!focusOnAction.isEnabled()) {
  setFocusOnSelected(false);
}
 else {
}
",0,0,0,,
959,} else {,"if (hiddenSet.contains(logger)) {
  style=style | Font.ITALIC;
}
 else {
}
",0,0,0,,
960,if (lc.defaults > 0 && (!evt.cancelable || !evt.preventDefault)) {,"if (lc.defaults > 0 && (!evt.cancelable || !evt.preventDefault)) {
}
",0,1,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
961,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(UID_FIELD,new ColumnDescription(""VARCHAR(40)"",false,false,null,null,false));
  map.put(HOST_FIELD,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(PATH_FIELD,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(URI_FIELD,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(ACTIVITY_FIELD,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(LENGTH_FIELD,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(SDF_DATA_FIELD,new ColumnDescription(""BLOB"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
962,{,"if (!session.isConnected()) {
}
",0,0,0,,
963,{,"if (lowercaseLine.startsWith(""crawl-delay:"")) {
}
 else if (lowercaseLine.startsWith(""crawl-delay"")) {
}
 else if (lowercaseLine.startsWith(""sitemap:"")) {
}
 else if (lowercaseLine.startsWith(""sitemap"")) {
}
 else {
  if (x.trim().length() > 0) {
    String problemLine=makeReadable(x);
    description=""Unknown robots.txt line: '"" + problemLine + ""'"";
    Logging.connectors.warn(""Web: Unknown robots.txt line from '"" + hostName + ""': '""+ problemLine+ ""'"");
    if (x.indexOf(""<html"") != -1 || x.indexOf(""<HTML"") != -1) {
      robotsWasHtml=true;
      parseCompleted=true;
      break;
    }
    foundErrors=true;
  }
}
",0,0,0,,
964,{,"if (lowercaseLine.startsWith(""crawl-delay"")) {
}
 else if (lowercaseLine.startsWith(""sitemap:"")) {
}
 else if (lowercaseLine.startsWith(""sitemap"")) {
}
 else {
  if (x.trim().length() > 0) {
    String problemLine=makeReadable(x);
    description=""Unknown robots.txt line: '"" + problemLine + ""'"";
    Logging.connectors.warn(""Web: Unknown robots.txt line from '"" + hostName + ""': '""+ problemLine+ ""'"");
    if (x.indexOf(""<html"") != -1 || x.indexOf(""<HTML"") != -1) {
      robotsWasHtml=true;
      parseCompleted=true;
      break;
    }
    foundErrors=true;
  }
}
",0,0,0,,
965,{,"if (lowercaseLine.startsWith(""sitemap:"")) {
}
 else if (lowercaseLine.startsWith(""sitemap"")) {
}
 else {
  if (x.trim().length() > 0) {
    String problemLine=makeReadable(x);
    description=""Unknown robots.txt line: '"" + problemLine + ""'"";
    Logging.connectors.warn(""Web: Unknown robots.txt line from '"" + hostName + ""': '""+ problemLine+ ""'"");
    if (x.indexOf(""<html"") != -1 || x.indexOf(""<HTML"") != -1) {
      robotsWasHtml=true;
      parseCompleted=true;
      break;
    }
    foundErrors=true;
  }
}
",0,0,0,,
966,{,"if (lowercaseLine.startsWith(""sitemap"")) {
}
 else {
  if (x.trim().length() > 0) {
    String problemLine=makeReadable(x);
    description=""Unknown robots.txt line: '"" + problemLine + ""'"";
    Logging.connectors.warn(""Web: Unknown robots.txt line from '"" + hostName + ""': '""+ problemLine+ ""'"");
    if (x.indexOf(""<html"") != -1 || x.indexOf(""<HTML"") != -1) {
      robotsWasHtml=true;
      parseCompleted=true;
      break;
    }
    foundErrors=true;
  }
}
",0,0,0,,
967,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(hostField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  map.put(fqdnField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(ipaddressField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  map.put(expirationField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
968,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(hostField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  map.put(expirationField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(robotsField,new ColumnDescription(""BLOB"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
969,{,"if (lowercaseLine.startsWith(""crawl-delay:"")) {
}
 else if (lowercaseLine.startsWith(""crawl-delay"")) {
}
 else {
  if (x.trim().length() > 0) {
    String problemLine=makeReadable(x);
    description=""Unknown robots.txt line: '"" + problemLine + ""'"";
    Logging.connectors.warn(""Web: Unknown robots.txt line from '"" + hostName + ""': '""+ problemLine+ ""'"");
    if (x.indexOf(""<html"") != -1 || x.indexOf(""<HTML"") != -1) {
      robotsWasHtml=true;
      parseCompleted=true;
      break;
    }
    foundErrors=true;
  }
}
",0,0,0,,
970,{,"if (lowercaseLine.startsWith(""crawl-delay"")) {
}
 else {
  if (x.trim().length() > 0) {
    String problemLine=makeReadable(x);
    description=""Unknown robots.txt line: '"" + problemLine + ""'"";
    Logging.connectors.warn(""Web: Unknown robots.txt line from '"" + hostName + ""': '""+ problemLine+ ""'"");
    if (x.indexOf(""<html"") != -1 || x.indexOf(""<HTML"") != -1) {
      robotsWasHtml=true;
      parseCompleted=true;
      break;
    }
    foundErrors=true;
  }
}
",0,0,0,,
971,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
972,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(idField,new ColumnDescription(""BIGINT"",true,false,null,null,false));
  map.put(outputConnNameField,new ColumnDescription(""VARCHAR(32)"",false,false,outputConnectionTableName,outputConnectionNameField,false));
  map.put(docKeyField,new ColumnDescription(""VARCHAR(73)"",false,false,null,null,false));
  map.put(componentHashField,new ColumnDescription(""VARCHAR(40)"",false,true,null,null,false));
  map.put(docURIField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(uriHashField,new ColumnDescription(""VARCHAR(40)"",false,true,null,null,false));
  map.put(lastVersionField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(lastOutputVersionField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(lastTransformationVersionField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(changeCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(firstIngestField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(lastIngestField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(authorityNameField,new ColumnDescription(""VARCHAR(32)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
973,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(maxCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(configField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
974,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
975,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(maxCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(configField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
976,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
977,{,"if (x.isNull()) {
}
 else if (key.equals(JSON_CHILDREN)) {
  if (!(x.isArray()))   throw new ManifoldCFException(""Expected array contents for '"" + JSON_CHILDREN + ""' node"");
  x.startArray();
  while (x.nextElement()) {
    ConfigurationNode nestedCn=readNode((String)null,x);
    addChild(getChildCount(),nestedCn);
  }
  x.endArray();
}
 else {
  final String value=x.readValue();
  ConfigurationNode cn=createNewNode(key);
  cn.setValue(value);
  addChild(getChildCount(),cn);
}
",0,0,0,,
978,{,"if (x.isNull()) {
}
 else {
  String value=x.readValue();
  if (key.startsWith(JSON_ATTRIBUTE)) {
    cn.setAttribute(key.substring(JSON_ATTRIBUTE.length()),value);
  }
 else   if (key.equals(JSON_VALUE)) {
    cn.setValue(value);
  }
 else   if (key.equals(JSON_CHILDREN)) {
    if (!(x.isArray()))     throw new ManifoldCFException(""Expected array contents for '"" + JSON_CHILDREN + ""' node"");
    x.startArray();
    while (x.nextElement()) {
      ConfigurationNode nestedCn=readNode((String)null,x);
      cn.addChild(cn.getChildCount(),nestedCn);
    }
    x.endArray();
  }
 else {
    ConfigurationNode nestedCn=createNewNode(key);
    nestedCn.setValue(value);
    cn.addChild(cn.getChildCount(),nestedCn);
  }
}
",0,0,0,,
979,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
980,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(domainNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
981,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
982,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(maxCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(configField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(mappingField,new ColumnDescription(""VARCHAR(32)"",false,true,null,null,false));
  map.put(authDomainField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(groupNameField,new ColumnDescription(""VARCHAR(32)"",false,false,authMgr.getTableName(),authMgr.getGroupNameColumn(),false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
983,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
984,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(maxCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(configField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(mappingField,new ColumnDescription(""VARCHAR(32)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
985,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
986,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(jobIDField,new ColumnDescription(""BIGINT"",false,false,jobsTable,jobsColumn,false));
  map.put(parentIDHashField,new ColumnDescription(""VARCHAR(40)"",false,true,null,null,false));
  map.put(childIDHashField,new ColumnDescription(""VARCHAR(40)"",false,false,null,null,false));
  map.put(dataNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(dataValueHashField,new ColumnDescription(""VARCHAR(40)"",false,true,null,null,false));
  map.put(dataValueField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(newField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  map.put(processIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
987,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(eventNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  map.put(processIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
988,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(idField,new ColumnDescription(""BIGINT"",true,false,null,null,false));
  map.put(jobIDField,new ColumnDescription(""BIGINT"",false,false,jobsTable,jobsColumn,false));
  map.put(linkTypeField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(parentIDHashField,new ColumnDescription(""VARCHAR(40)"",false,false,null,null,false));
  map.put(distanceField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(markForDeathField,new ColumnDescription(""CHAR(1)"",false,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
989,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(jobIDField,new ColumnDescription(""BIGINT"",false,false,jobsTable,jobsColumn,false));
  map.put(ownerIDField,new ColumnDescription(""BIGINT"",false,false,hopCountTable,idColumn,false));
  map.put(linkTypeField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(parentIDHashField,new ColumnDescription(""VARCHAR(40)"",false,false,null,null,false));
  map.put(childIDHashField,new ColumnDescription(""VARCHAR(40)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
990,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerIDField,new ColumnDescription(""BIGINT"",false,false,ownerTable,owningTablePrimaryKey,false));
  map.put(linkTypeField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(maxHopsField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
991,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(jobIDField,new ColumnDescription(""BIGINT"",false,false,jobsTable,jobsColumn,false));
  map.put(linkTypeField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(parentIDHashField,new ColumnDescription(""VARCHAR(40)"",false,false,null,null,false));
  map.put(childIDHashField,new ColumnDescription(""VARCHAR(40)"",false,true,null,null,false));
  map.put(newField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  map.put(processIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
992,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(idField,new ColumnDescription(""BIGINT"",true,false,null,null,false));
  map.put(jobIDField,new ColumnDescription(""BIGINT"",false,false,jobsTable,jobsColumn,false));
  map.put(docHashField,new ColumnDescription(""VARCHAR(40)"",false,false,null,null,false));
  map.put(docIDField,new ColumnDescription(""LONGTEXT"",false,false,null,null,false));
  map.put(checkTimeField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(failTimeField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(failCountField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(statusField,new ColumnDescription(""CHAR(1)"",false,false,null,null,false));
  map.put(isSeedField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  map.put(docPriorityField,new ColumnDescription(""FLOAT"",false,true,null,null,false));
  map.put(checkActionField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  map.put(processIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  map.put(seedingProcessIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  map.put(needPriorityField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  map.put(needPriorityProcessIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
993,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(idField,new ColumnDescription(""BIGINT"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(statusField,new ColumnDescription(""CHAR(1)"",false,false,null,null,false));
  map.put(lastTimeField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(startTimeField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(seedingVersionField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(endTimeField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(documentSpecField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(this.connectionNameField,new ColumnDescription(""VARCHAR(32)"",false,false,connectionTableName,connectionNameField,false));
  map.put(typeField,new ColumnDescription(""CHAR(1)"",false,false,null,null,false));
  map.put(intervalField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(maxIntervalField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(expirationField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(windowEndField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(priorityField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(startMethodField,new ColumnDescription(""CHAR(1)"",false,false,null,null,false));
  map.put(errorField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  map.put(reseedIntervalField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(reseedTimeField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(hopcountModeField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  map.put(processIDField,new ColumnDescription(""VARCHAR(16)"",false,true,null,null,false));
  map.put(failTimeField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(failCountField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(assessmentStateField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
994,} else {,"if (!isSame) {
  values.put(seedingVersionField,null);
}
 else {
}
",0,0,0,,
995,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerIDField,new ColumnDescription(""BIGINT"",false,false,ownerTable,owningTablePrimaryKey,false));
  map.put(ordinalField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(notificationNameField,new ColumnDescription(""VARCHAR(32)"",false,true,notificationTableName,notificationTableNameField,false));
  map.put(connectionDescriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(connectionSpecField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
996,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerIDField,new ColumnDescription(""BIGINT"",false,false,ownerTable,owningTablePrimaryKey,false));
  map.put(ordinalField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(prerequisiteField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(outputNameField,new ColumnDescription(""VARCHAR(32)"",false,true,outputTableName,outputTableNameField,false));
  map.put(transformationNameField,new ColumnDescription(""VARCHAR(32)"",false,true,transformationTableName,transformationTableNameField,false));
  map.put(connectionDescriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(connectionSpecField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
997,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerField,new ColumnDescription(""BIGINT"",false,false,ownerTableName,ownerColumn,false));
  map.put(eventNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
998,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerIDField,new ColumnDescription(""BIGINT"",false,false,ownerTable,owningTablePrimaryKey,false));
  map.put(ordinalField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(dayOfWeekField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(dayOfMonthField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(monthOfYearField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(yearField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(hourOfDayField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(minutesOfHourField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(timezoneField,new ColumnDescription(""VARCHAR(32)"",false,true,null,null,false));
  map.put(windowDurationField,new ColumnDescription(""BIGINT"",false,true,null,null,false));
  map.put(requestMinimumField,new ColumnDescription(""CHAR(1)"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
999,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(maxCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(configField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
1000,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",true,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
1001,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(nameField,new ColumnDescription(""VARCHAR(32)"",true,false,null,null,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(classNameField,new ColumnDescription(""VARCHAR(255)"",false,false,null,null,false));
  map.put(groupNameField,new ColumnDescription(""VARCHAR(32)"",false,true,authMgr.getTableName(),authMgr.getGroupNameColumn(),false));
  map.put(maxCountField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(configField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
1002,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerNameField,new ColumnDescription(""VARCHAR(32)"",false,false,parentTable,parentField,false));
  map.put(idField,new ColumnDescription(""BIGINT"",true,false,null,null,false));
  map.put(startTimeField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(endTimeField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(dataSizeField,new ColumnDescription(""BIGINT"",false,false,null,null,false));
  map.put(activityTypeField,new ColumnDescription(""VARCHAR(64)"",false,false,null,null,false));
  map.put(entityIdentifierField,new ColumnDescription(""LONGTEXT"",false,false,null,null,false));
  map.put(resultCodeField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(resultDescriptionField,new ColumnDescription(""LONGTEXT"",false,true,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
1003,{,"if (existing == null) {
  HashMap map=new HashMap();
  map.put(ownerNameField,new ColumnDescription(""VARCHAR(32)"",false,false,ownerTable,owningTablePrimaryKey,false));
  map.put(descriptionField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(matchField,new ColumnDescription(""VARCHAR(255)"",false,true,null,null,false));
  map.put(throttleField,new ColumnDescription(""FLOAT"",false,false,null,null,false));
  performCreate(map,null);
}
 else {
}
",0,0,0,,
1004,} else {,"if (statSample != null) {
  try {
    long time=System.currentTimeMillis() / 1000;
    FetchRequest minRequest=statDB.createFetchRequest(ConsolFun.AVERAGE,time - 60,time);
    FetchData minData=minRequest.fetchData();
    double triplesLastMin=minData.getAggregate(""triples"",ConsolFun.AVERAGE);
    FetchRequest hourRequest=statDB.createFetchRequest(ConsolFun.AVERAGE,time - (60 * 60),time);
    FetchData hourData=hourRequest.fetchData();
    double triplesLastHour=hourData.getAggregate(""triples"",ConsolFun.AVERAGE);
    if (triplesLastMin != Double.NaN) {
      log.info(""imported {} triples; statistics: {}/sec (last min), {}/sec (last hour)"",UnitFormatter.formatSize(handler.triples),UnitFormatter.formatSize(triplesLastMin),UnitFormatter.formatSize(triplesLastHour));
    }
    previous=System.currentTimeMillis();
  }
 catch (  IOException e) {
    log.warn(""error updating statistics: {}"",e.getMessage());
  }
}
 else {
}
",0,0,0,,
1005,"if(configurationService.getBooleanConfiguration(""kiwi.setup.host"",false)) {","if (configurationService.getBooleanConfiguration(""kiwi.setup.host"",false)) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
1006,} else {,"if (LDP.PreferEmptyContainer.stringValue().equals(i)) {
  pref.setMinimalContainer(true);
}
 else {
}
",0,0,0,,
1007,} else {,"if (LDP.PreferEmptyContainer.stringValue().equals(e)) {
  pref.setMinimalContainer(false);
}
 else {
}
",0,0,0,,
1008,{,"if (metadata instanceof SnapshotArtifactRepositoryMetadata || metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
  request.addMetadata(new MetadataBridge(metadata));
}
",0,0,0,,
1009,{,"if (metadata instanceof SnapshotArtifactRepositoryMetadata || metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
  request.addMetadata(new MetadataBridge(metadata));
}
",0,0,0,,
1010,{,"if (pathElements.isEmpty()) {
}
 else {
  pathElements.removeLast();
}
",0,0,0,,
1011,{,"if (entry.equals(v)) {
  res.getEntry().getMd().setWhy(""This is a graph entry point. No links."");
}
 else {
}
",0,0,0,,
1012,{,"if (path.isAbsolute()) {
}
 else if (path.getPath().startsWith(File.separator)) {
  result=path.getAbsoluteFile();
}
 else {
  result=new File(new File(basedir,path.getPath()).toURI().normalize()).getAbsoluteFile();
}
",0,0,0,,
1013,{,"if (MavenExecutionRequest.REACTOR_FAIL_NEVER.equals(rootSession.getReactorFailureBehavior())) {
}
 else if (MavenExecutionRequest.REACTOR_FAIL_AT_END.equals(rootSession.getReactorFailureBehavior())) {
  buildContext.getReactorBuildStatus().blackList(mavenProject);
}
 else if (MavenExecutionRequest.REACTOR_FAIL_FAST.equals(rootSession.getReactorFailureBehavior())) {
  buildContext.getReactorBuildStatus().halt();
}
 else {
  logger.error(""invalid reactor failure behavior "" + rootSession.getReactorFailureBehavior());
  buildContext.getReactorBuildStatus().halt();
}
",0,0,0,,
1014,{,"if (file.isAbsolute()) {
}
 else if (file.getPath().startsWith(File.separator)) {
  file=file.getAbsoluteFile();
}
 else {
  file=new File(new File(basedir,file.getPath()).toURI().normalize()).getAbsoluteFile();
}
",0,0,0,,
1015,{,"if (token.equals("""")) {
}
 else if (token.equals("".."")) {
  if (pathElements.isEmpty()) {
  }
 else {
    pathElements.removeLast();
  }
}
 else {
  pathElements.addLast(token);
}
",0,0,0,,
1016,{,"if (pathElements.isEmpty()) {
}
 else {
  pathElements.removeLast();
}
",0,0,0,,
1017,{,"if (!mavenUserConfigurationDirectory.mkdirs()) {
}
",0,0,0,,
1018,{,"if (tch.exists()) {
  MavenToolchainsXpp3Reader reader=new MavenToolchainsXpp3Reader();
  InputStreamReader in=null;
  try {
    in=new InputStreamReader(new BufferedInputStream(new FileInputStream(tch)));
    return reader.read(in);
  }
 catch (  Exception ex) {
    throw new MisconfiguredToolchainException(""Cannot read toolchains file at "" + tch.getAbsolutePath(),ex);
  }
 finally {
    IOUtil.close(in);
  }
}
 else {
}
",0,0,0,,
1019,{,"if (obj instanceof DocType) {
  printDocType(out,doc.getDocType());
  out.write(currentFormat.lineSeparator);
}
 else {
}
",0,0,0,,
1020,{,"if (next instanceof ProcessingInstruction) {
  printProcessingInstruction(out,(ProcessingInstruction)next);
}
 else {
}
",0,0,0,,
1021,{,"if (testMode) {
}
",0,0,0,,
1022,{,"if (!archiveConfiguration.isForced() && archiver.isSupportingForced()) {
}
",0,0,0,,
1023,{,"if (entry.equals(v)) {
  res.getEntry().getMd().setWhy(""This is a graph entry point. No links."");
}
 else {
}
",0,0,0,,
1024,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else if (metadata instanceof org.apache.maven.shared.transfer.metadata.ArtifactMetadata) {
  org.apache.maven.shared.transfer.metadata.ArtifactMetadata transferMedata=(org.apache.maven.shared.transfer.metadata.ArtifactMetadata)metadata;
  request.addMetadata(new Maven30MetadataBridge(metadata).setFile(transferMedata.getFile()));
}
",0,0,0,,
1025,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else if (metadata instanceof org.apache.maven.shared.transfer.metadata.ArtifactMetadata) {
  org.apache.maven.shared.transfer.metadata.ArtifactMetadata transferMetadata=(org.apache.maven.shared.transfer.metadata.ArtifactMetadata)metadata;
  request.addMetadata(new Maven31MetadataBridge(metadata).setFile(transferMetadata.getFile()));
}
",0,0,0,,
1026,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else if (metadata instanceof org.apache.maven.shared.transfer.metadata.ArtifactMetadata) {
  org.apache.maven.shared.transfer.metadata.ArtifactMetadata transferMedata=(org.apache.maven.shared.transfer.metadata.ArtifactMetadata)metadata;
  request.addMetadata(new Maven30MetadataBridge(metadata).setFile(transferMedata.getFile()));
}
",0,0,0,,
1027,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else if (metadata instanceof org.apache.maven.shared.transfer.metadata.ArtifactMetadata) {
  org.apache.maven.shared.transfer.metadata.ArtifactMetadata transferMetadata=(org.apache.maven.shared.transfer.metadata.ArtifactMetadata)metadata;
  request.addMetadata(new Maven31MetadataBridge(metadata).setFile(transferMetadata.getFile()));
}
",0,0,0,,
1028,{,"if (repository.isIncludeMetadata()) {
}
",0,0,0,,
1029,{,"if (currentFile == null || !file.exists()) {
}
 else if (currentFile.equals(file) && file.canRead()) {
  modified=(file.lastModified() != resource.getLastModified());
}
",0,0,0,,
1030,{,"if (System.getProperty(""true"") != null) {
}
",0,0,0,,
1031,{,"if (remoteRepo.exists()) {
}
",0,0,0,,
1032,{,"if (role.contains(getLowerCaseString(i18n,""doap.emeritus""))) {
}
 else {
  if (!returnMap.get(""unknowns"").contains(contributor)) {
    returnMap.get(""unknowns"").add(contributor);
  }
}
",0,0,0,,
1033,{,"if (eventType == XmlPullParser.IGNORABLE_WHITESPACE) {
}
 else if (eventType == XmlPullParser.PROCESSING_INSTRUCTION) {
}
 else if (eventType == XmlPullParser.DOCDECL) {
  addLocalEntities(parser,parser.getText());
  for (  byte[] res : CachedFileEntityResolver.ENTITY_CACHE.values()) {
    addDTDEntities(parser,new String(res));
  }
}
",0,0,0,,
1034,{,"if (eventType == XmlPullParser.PROCESSING_INSTRUCTION) {
}
 else if (eventType == XmlPullParser.DOCDECL) {
  addLocalEntities(parser,parser.getText());
  for (  byte[] res : CachedFileEntityResolver.ENTITY_CACHE.values()) {
    addDTDEntities(parser,new String(res));
  }
}
",0,0,0,,
1035,{,"if (!baseEndTag(parser,sink)) {
}
",0,0,0,,
1036,{,"if (!baseEndTag(parser,sink)) {
}
",0,0,0,,
1037,{,"if (j == textLength) {
}
",0,0,0,,
1038,{,"if (tableCellFlag) {
}
 else if (itemFlag) {
  write(EOL + EOL + ""  ""+ listNestingIndent);
}
 else {
  write(EOL + "" "");
}
",0,0,0,,
1039,{,"if (tableCellFlag) {
}
 else {
  write(EOL + EOL);
}
",0,0,0,,
1040,{,"if (incomingLevel == currentDepth) {
}
 else if (incomingLevel > currentDepth) {
  List<TreeComponent> components=current.getChildren();
  if (components.size() == 0) {
    for (int i=0, n=incomingLevel - currentDepth; i < n; i++) {
      current=current.addChildren("""",type);
    }
  }
 else {
    current=components.get(components.size() - 1);
  }
}
 else {
  for (int i=0, n=currentDepth - incomingLevel; i < n; i++) {
    current=current.getFather();
    if (current == null) {
      throw new IllegalStateException();
    }
  }
}
",0,0,0,,
1041,{,"if (incomingLevel == currentDepth) {
}
 else if (incomingLevel > currentDepth) {
  final TreeComponent[] components=current.getChildren();
  if (components.length == 0) {
    for (int i=0, n=incomingLevel - currentDepth; i < n; i++) {
      current=current.addChildren("""",type);
    }
  }
 else {
    current=components[components.length - 1];
  }
}
 else {
  for (int i=0, n=currentDepth - incomingLevel; i < n; i++) {
    current=current.getFather();
    if (current == null) {
      throw new IllegalStateException();
    }
  }
}
",0,0,0,,
1042,{,"if (parser.getName().equals(HEAD.toString())) {
}
 else if (parser.getName().equals(BODY.toString())) {
  consecutiveSections(0,sink);
  sink.body_();
}
 else if (parser.getName().equals(TITLE.toString())) {
  if (!hasTitle) {
    sink.title_();
    this.hasTitle=true;
  }
}
 else if (parser.getName().equals(AUTHOR_TAG.toString())) {
  sink.author_();
}
 else if (parser.getName().equals(DATE_TAG.toString())) {
  sink.date_();
}
 else if (parser.getName().equals(SOURCE_TAG.toString())) {
  verbatim_();
  sink.verbatim_();
}
 else if (parser.getName().equals(PROPERTIES_TAG.toString())) {
}
 else if (parser.getName().equals(MACRO_TAG.toString())) {
  handleMacroEnd(sink);
}
 else if (parser.getName().equals(PARAM.toString())) {
  if (!StringUtils.isNotEmpty(macroName)) {
    handleUnknown(parser,sink,TAG_TYPE_END);
  }
}
 else if (parser.getName().equals(SECTION_TAG.toString())) {
  consecutiveSections(0,sink);
  sink.section1_();
}
 else if (parser.getName().equals(SUBSECTION_TAG.toString())) {
  consecutiveSections(Sink.SECTION_LEVEL_1,sink);
}
 else if (!baseEndTag(parser,sink)) {
  if (!isEmptyElement) {
    handleUnknown(parser,sink,TAG_TYPE_END);
  }
}
",0,0,0,,
1043,{,"if (parser.getName().equals(PROPERTIES_TAG.toString())) {
}
 else if (parser.getName().equals(MACRO_TAG.toString())) {
  handleMacroEnd(sink);
}
 else if (parser.getName().equals(PARAM.toString())) {
  if (!StringUtils.isNotEmpty(macroName)) {
    handleUnknown(parser,sink,TAG_TYPE_END);
  }
}
 else if (parser.getName().equals(SECTION_TAG.toString())) {
  consecutiveSections(0,sink);
  sink.section1_();
}
 else if (parser.getName().equals(SUBSECTION_TAG.toString())) {
  consecutiveSections(Sink.SECTION_LEVEL_1,sink);
}
 else if (!baseEndTag(parser,sink)) {
  if (!isEmptyElement) {
    handleUnknown(parser,sink,TAG_TYPE_END);
  }
}
",0,0,0,,
1044,{,"if (hasParent(mavenProject)) {
  if (!mavenProject.isExecutionRoot()) {
    MavenProject parent=mavenProject.getParent();
    if (!reactorVersion.equals(parent.getVersion())) {
      logger.debug(""The project: "" + mavenProject.getId() + "" has a parent which version does not match the other elements in reactor"");
      result.add(mavenProject);
    }
  }
}
 else {
}
",0,0,0,,
1045,{,"if (e instanceof EnforcerRuleException) {
}
 else {
  fail(""Received wrong exception. Expected EnforcerRuleExeption. Received:"" + e.toString());
}
",0,0,0,,
1046,{,"if (ArtifactInfo.VERSION_COMPARATOR.compare(left.get(i),right.get(i)) != 0) {
}
",0,0,0,,
1047,{,"if (incremental) {
}
",0,0,0,,
1048,{,"if (dep == 0) {
}
",0,0,0,,
1049,{,"if (_binding.isInMemory()) {
}
",0,0,0,,
1050,{,"if (_jetty != null) {
}
",0,0,0,,
1051,{,"if (repository.isIncludeMetadata()) {
}
",0,0,0,,
1052,{,"if (currentFile == null || !file.exists()) {
}
 else if (currentFile.equals(file) && file.canRead()) {
  modified=(file.lastModified() != resource.getLastModified());
}
",0,0,0,,
1053,{,"if (System.getProperty(""true"") != null) {
}
",0,0,0,,
1054,{,"if (mainModuleDescriptor.exists()) {
}
 else {
  throw new UnsupportedOperationException(""Can't compile test sources "" + ""when main sources are missing a module descriptor"");
}
",0,0,0,,
1055,{,"if (remoteRepo.exists()) {
}
",0,0,0,,
1056,{,"if (role.contains(getLowerCaseString(i18n,""doap.emeritus""))) {
}
 else {
  if (!returnMap.get(""unknowns"").contains(contributor)) {
    returnMap.get(""unknowns"").add(contributor);
  }
}
",0,0,0,,
1057,{,"if (mAnchor.group(2).startsWith(""#"")) {
}
",0,0,0,,
1058,{,"if (!decryptionResult.getProblems().isEmpty()) {
}
",0,0,0,,
1059,{,"if (script != null) {
  engine=getScriptEngine(engineName);
  if (engine == null) {
    throw new MojoFailureException(""Missing scriptEngine"");
  }
}
 else {
}
",0,0,0,,
1060,{,"if (generateMultiPage(locale,multiPageSinkFactory,mainSink)) {
}
 else {
  report.generate(mainSink,locale);
}
",0,0,0,,
1061,{,"if (mAnchor.group(2).startsWith(""#"")) {
}
",0,0,0,,
1062,{,"if (rawVersion.matches(""\\$\\{.+\\}"")) {
  String expression=rawVersion.substring(2,rawVersion.length() - 1);
  if (expression.startsWith(""project."") || expression.startsWith(""pom."") || ""version"".equals(expression)) {
    if (!mappedVersion.equals(getNextVersion(releaseDescriptor,projectId))) {
      logInfo(result,""  Updating "" + artifactId + "" to ""+ mappedVersion);
      coordinate.setVersion(mappedVersion);
    }
 else {
      logInfo(result,""  Ignoring artifact version update for expression "" + rawVersion);
    }
  }
 else   if (properties != null) {
    String propertyValue=properties.getProperty(expression);
    if (propertyValue != null) {
      if (propertyValue.equals(originalVersion)) {
        logInfo(result,""  Updating "" + rawVersion + "" to ""+ mappedVersion);
        properties.setProperty(expression,mappedVersion);
      }
 else       if (mappedVersion.equals(propertyValue)) {
        logInfo(result,""  Ignoring artifact version update for expression "" + rawVersion + "" because it is already updated"");
      }
 else       if (!mappedVersion.equals(rawVersion)) {
        if (mappedVersion.matches(""\\$\\{project.+\\}"") || mappedVersion.matches(""\\$\\{pom.+\\}"") || ""${version}"".equals(mappedVersion)) {
          logInfo(result,""  Ignoring artifact version update for expression "" + mappedVersion);
        }
 else {
          throw new ReleaseFailureException(""The artifact ("" + key + "") requires a ""+ ""different version (""+ mappedVersion+ "") than what is found (""+ propertyValue+ "") for the expression (""+ expression+ "") in the ""+ ""project (""+ projectId+ "")."");
        }
      }
    }
 else {
      throw new ReleaseFailureException(""The version could not be updated: "" + rawVersion);
    }
  }
}
 else {
}
",0,0,0,,
1063,{,"if (resolvedSnapshotVersion != null) {
  logInfo(result,""  Updating "" + artifactId + "" to ""+ resolvedSnapshotVersion);
  coordinate.setVersion(resolvedSnapshotVersion);
}
 else {
}
",0,0,0,,
1064,{,"if (inQuote) {
}
",0,0,0,,
1065,{,"if (globalPolicy && !StringUtils.isEmpty(checksums)) {
}
 else {
  checksums=checksumPolicyProvider.getEffectiveChecksumPolicy(session,policy1.getChecksumPolicy(),policy2.getChecksumPolicy());
}
",0,0,0,,
1066,{,"if (globalPolicy && !StringUtils.isEmpty(updates)) {
}
 else {
  updates=updatePolicyAnalyzer.getEffectiveUpdatePolicy(session,policy1.getUpdatePolicy(),policy2.getUpdatePolicy());
}
",0,0,0,,
1067,{,"if (profiles != null) {
}
",0,0,0,,
1068,{,"if (text.isMonospaced()) {
}
",0,0,0,,
1069,{,"if (expectedRemoteRepos == actualRemoteRepos) {
}
 else if (expectedRemoteRepos.size() != actualRemoteRepos.size()) {
  remoteRepoMatch=false;
}
 else {
  for (int i=0; i < expectedRemoteRepos.size(); i++) {
    ArtifactRepository expectedRepo=(ArtifactRepository)expectedRemoteRepos.get(i);
    ArtifactRepository actualRepo=(ArtifactRepository)actualRemoteRepos.get(i);
    if (expectedRepo.getUrl().equals(actualRepo.getUrl())) {
      remoteRepoMatch=false;
      break;
    }
  }
}
",0,0,0,,
1070,{,"if (line.startsWith(BRANCH_NICK_TOKEN)) {
}
 else {
  if (getLogger().isWarnEnabled()) {
    getLogger().warn(""Could not figure out of: "" + line);
  }
}
",0,0,0,,
1071,{,"if (line.startsWith(TO_FILE_TOKEN) || line.startsWith(FROM_FILE_TOKEN)) {
}
 else if (line.startsWith(ADDED_LINE_TOKEN) || line.startsWith(REMOVED_LINE_TOKEN) || line.startsWith(UNCHANGED_LINE_TOKEN)|| line.startsWith(RANGE_TOKEN)|| line.startsWith(NO_NEWLINE_TOKEN)) {
  currentDifference.append(line).append(""\n"");
}
",0,0,0,,
1072,{,"if (!tmpFile.exists() && !tmpFile2.exists()) {
}
",0,0,0,,
1073,{,"if (!tmpFile.exists() && !tmpFile2.exists()) {
}
",0,0,0,,
1074,{,"if (endDate.after(modifiedDate) || endDate.equals(modifiedDate)) {
}
 else {
  continue;
}
",0,0,0,,
1075,{,"if ((pos=line.indexOf(LINKTO_MARKER)) != -1) {
}
 else {
  if (logger.isWarnEnabled()) {
    this.logger.warn(""Unknown add ouput: "" + line);
  }
}
",0,0,0,,
1076,{,"if ((pos=line.indexOf(LINKTO_MARKER)) != -1) {
}
 else {
  if (logger.isWarnEnabled()) {
    logger.warn(""Unknown checkin ouput: "" + line);
  }
}
",0,0,0,,
1077,{,"if ((pos=line.indexOf(LINKTO_MARKER)) != -1) {
}
 else {
  if (logger.isWarnEnabled()) {
    logger.warn(""Unknown remove ouput: "" + line);
  }
}
",0,0,0,,
1078,{,"if ((pos=line.indexOf(STATUS_MARKER)) != -1) {
  processStatus(line,pos);
}
 else {
}
",0,0,0,,
1079,{,"if (status.equals(CURRENT_MARKER)) {
}
 else {
  if (logger.isWarnEnabled()) {
    logger.warn(""status unknown ("" + status + ""): ""+ this.currentFile);
  }
}
",0,0,0,,
1080,{,"if (line.startsWith(RCS_TOKEN)) {
}
 else if (line.startsWith(RETRIEVING_TOKEN)) {
}
 else if (line.startsWith(DIFF_TOKEN)) {
}
 else if (line.startsWith(ADDED_LINE_TOKEN) || line.startsWith(REMOVED_LINE_TOKEN) || line.startsWith(UNCHANGED_LINE_TOKEN)|| line.startsWith(CHANGE_SEPARATOR_TOKEN)|| line.equals(NO_NEWLINE_TOKEN)) {
  currentDifference.append(line).append(""\n"");
  patch.append(line).append(""\n"");
}
 else {
  if (logger.isWarnEnabled()) {
    logger.warn(""Unparseable line: '"" + line + ""'"");
  }
  patch.append(line).append(""\n"");
  currentFile=null;
  currentDifference=null;
}
",0,0,0,,
1081,{,"if (line.startsWith(RETRIEVING_TOKEN)) {
}
 else if (line.startsWith(DIFF_TOKEN)) {
}
 else if (line.startsWith(ADDED_LINE_TOKEN) || line.startsWith(REMOVED_LINE_TOKEN) || line.startsWith(UNCHANGED_LINE_TOKEN)|| line.startsWith(CHANGE_SEPARATOR_TOKEN)|| line.equals(NO_NEWLINE_TOKEN)) {
  currentDifference.append(line).append(""\n"");
  patch.append(line).append(""\n"");
}
 else {
  if (logger.isWarnEnabled()) {
    logger.warn(""Unparseable line: '"" + line + ""'"");
  }
  patch.append(line).append(""\n"");
  currentFile=null;
  currentDifference=null;
}
",0,0,0,,
1082,{,"if (line.startsWith(DIFF_TOKEN)) {
}
 else if (line.startsWith(ADDED_LINE_TOKEN) || line.startsWith(REMOVED_LINE_TOKEN) || line.startsWith(UNCHANGED_LINE_TOKEN)|| line.startsWith(CHANGE_SEPARATOR_TOKEN)|| line.equals(NO_NEWLINE_TOKEN)) {
  currentDifference.append(line).append(""\n"");
  patch.append(line).append(""\n"");
}
 else {
  if (logger.isWarnEnabled()) {
    logger.warn(""Unparseable line: '"" + line + ""'"");
  }
  patch.append(line).append(""\n"");
  currentFile=null;
  currentDifference=null;
}
",0,0,0,,
1083,{,"if (this.scmFileSet != null && !isFileNameInFileList(this.scmFileSet.getFileList(),file)) {
}
 else {
  changedFiles.add(new ScmFile(file,status));
}
",0,0,0,,
1084,{,"if (!decryptionResult.getProblems().isEmpty()) {
}
",0,0,0,,
1085,{,"if (!archiveConfiguration.isForced() && archiver.isSupportingForced()) {
}
",0,0,0,,
1086,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1087,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1088,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1089,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1090,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1091,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1092,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1093,{,"if (metadata instanceof ArtifactRepositoryMetadata) {
}
 else {
}
",0,0,0,,
1094,{,"if (inQuote) {
}
",0,0,0,,
1095,{,"if (generateMultiPage(locale,multiPageSinkFactory,mainSink)) {
}
 else {
  report.generate(mainSink,locale);
}
",0,0,0,,
1096,} else {,"if (ContainerExitStatus.ABORTED != exitStatus) {
}
 else {
}
",0,0,0,,
1097,} else {,"if (defaultValue.isPresent()) {
  measurement.withProfileValue(defaultValue.get());
  values.add(measurement);
}
 else {
}
",0,0,0,,
1098,} else {,"if (dc.getDocument().isPresent()) {
  Document d=dc.getDocument().get();
  if (latestDocument == null || latestDocument.getTimestamp() < d.getTimestamp()) {
    latestDocument=d;
  }
}
 else {
}
",0,0,0,,
1099,} else {,"if (incomingRequest.getMethod() != HttpMethod.POST && incomingRequest.getMethod() != HttpMethod.PUT) {
  sendResponse(session,incomingRequest);
}
 else {
}
",0,0,0,,
1100,} else {,"if (incomingRequest.getMethod() != HttpMethod.POST && incomingRequest.getMethod() != HttpMethod.PUT) {
  sendResponse(session,incomingRequest);
}
 else {
}
",0,0,0,,
1101,} else {,"if (ip instanceof java.net.Inet4Address) {
  hostIps.add(ip.getHostAddress());
}
 else {
}
",0,0,0,,
1102,} else {,"if (ip instanceof java.net.Inet4Address && !ip.isLoopbackAddress()) {
  return ip;
}
 else {
}
",0,0,0,,
1103,} else if(attributes == null && that.attributes == null) {,"if (attributes == null && that.attributes == null) {
}
 else {
  return false;
}
",0,1,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1104,} else {,"if (c == '>') {
  fatalError(""Comment not wellformed"");
  return;
}
 else {
}
",0,0,0,,
1105,} else {,"if (restartsAllowed) {
  restart();
}
 else {
}
",0,0,0,,
1106,} else {,"if (coreStanza != null) {
  Future<RelayResult> resultFuture=executor.submit(new OutboundRelayCallable(coreStanza,deliveryFailureStrategy));
}
 else {
}
",0,0,0,,
1107,} else {,"if (result == OK || result == ALREADY_SET) {
  List<String> resources=registry.getInterestedResources(user);
  for (  String resource : resources) {
    Entity userResource=new EntityImpl(user,resource);
    Stanza push=RosterStanzaUtils.createRosterItemPushIQ(userResource,sessionContext.nextSequenceValue(),rosterItem);
    try {
      stanzaBroker.write(userResource,push,IgnoreFailureStrategy.INSTANCE);
    }
 catch (    DeliveryException e) {
      LOG.error(e.getMessage(),e);
    }
  }
}
 else {
}
",0,0,0,,
1108,{,"if (isRequired() && shouldAlwaysPerformValidationWhenRequiredTrue(context)) {
}
 else {
  return;
}
",0,0,0,,
1109,{,"if (!_isSetConverter() && _converter != null && !(_converter instanceof StateHolder)) {
}
 else {
  converterSaved=saveAttachedState(facesContext,_converter);
  nullDelta=false;
}
",0,0,0,,
1110,{,"if (oldRowIndex == rowIndex) {
}
 else if (oldRowIndex > rowIndex) {
}
",0,0,0,,
1111,{,"if (oldRowIndex > rowIndex) {
}
",0,0,0,,
1112,{,"if (isHintSet(searchExpressionContext,SearchExpressionHint.IGNORE_NO_RESULT)) {
}
 else {
  throw new ComponentNotFoundException(""Cannot find component for expression \"""" + expression + ""\"" referenced from \""""+ searchExpressionContext.getSource().getClientId(facesContext)+ ""\""."");
}
",0,0,0,,
1113,{,"if (isHintSet(searchExpressionContext,SearchExpressionHint.IGNORE_NO_RESULT)) {
}
 else {
  throw new ComponentNotFoundException(""Cannot find component for expression \"""" + expressions + ""\"" referenced from \""""+ searchExpressionContext.getSource().getClientId(facesContext)+ ""\""."");
}
",0,0,0,,
1114,{,"if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == separatorChar) {
}
 else {
  isValid=false;
}
",0,0,0,,
1115,{,"if (validators != null && validators.length > 0) {
}
 else {
  super.addValidator(new WholeBeanValidator());
}
",0,0,0,,
1116,{,"if ("""".equals(duplicateFlow.getDefiningDocumentId())) {
}
 else {
  _flowMapById.put(id,toAdd);
}
",0,0,0,,
1117,{,"if (serverHost.equals(host) && matchPort && path.contains(appContextPath)) {
}
 else {
  return false;
}
",0,0,0,,
1118,{,"if (serverHost.equals(host) && matchPort && !isStrictJsf2OriginHeaderAppPath) {
}
 else {
  return false;
}
",0,0,0,,
1119,{,"if (logicalViewId != null) {
  return true;
}
 else {
}
",0,0,0,,
1120,{,"if (!_useStraightXml && isEmptyElement(elementName)) {
}
 else {
  if (isScript() && (_isXhtmlContentType || _wrapScriptContentWithXmlCommentTag)) {
    writeScriptContent();
    _currentWriter=_outputWriter;
  }
 else   if (isStyle() && _isXhtmlContentType) {
    writeStyleContent();
    _currentWriter=_outputWriter;
  }
  writeEndTag(elementName);
}
",0,0,0,,
1121,{,"if (group != null && group.length() > 0) {
}
 else {
  writer.endElement(HTML.TD_ELEM);
  if (pageDirectionLayout) {
    writer.endElement(HTML.TR_ELEM);
  }
}
",0,0,0,,
1122,{,"if (component instanceof UIOutput) {
}
 else {
  throw new IllegalArgumentException(""Unsupported component class "" + component.getClass().getName());
}
",0,0,0,,
1123,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  app=percentEncode(context,c,UTF8);
}
",0,0,0,,
1124,{,"if (c == '?' || c == '#') {
  if (i + 1 < length) {
    app=c + encodeURIQuery(context,string.substring(i + 1),characterEncoding);
    endLoop=true;
  }
}
 else {
}
",0,0,0,,
1125,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  app=percentEncode(context,c,characterEncoding);
}
",0,0,0,,
1126,{,"if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
}
 else {
  app=""&amp;"";
}
",0,0,0,,
1127,{,"if (c == '&') {
  if (i + 4 < length) {
    if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
    }
 else {
      app=""&amp;"";
    }
  }
 else {
    app=""&amp;"";
  }
}
 else {
}
",0,0,0,,
1128,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  if (start < i) {
    writer.write(string,start,i - start);
  }
  start=i + 1;
  percentEncode(writer,c,UTF8);
}
",0,0,0,,
1129,{,"if (c == '?' || c == '#') {
  if (i + 1 < length) {
    if (start < i) {
      writer.write(string,start,i - start);
    }
    start=i + 1;
    writer.write(c);
    encodeURIQuery(writer,string,i + 1,characterEncoding);
    endLoop=true;
  }
}
 else {
}
",0,0,0,,
1130,{,"if (((c1 >= '0' && c1 <= '9') || (c1 >= 'A' && c1 <= 'Z') || (c1 >= 'a' && c1 <= 'z')) && ((c2 >= '0' && c2 <= '9') || (c2 >= 'A' && c2 <= 'Z') || (c2 >= 'a' && c2 <= 'z'))) {
}
 else {
  if (start < i) {
    writer.write(string,start,i - start);
  }
  start=i + 1;
  percentEncode(writer,c,characterEncoding);
}
",0,0,0,,
1131,{,"if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
}
 else {
  app=""&amp;"";
}
",0,0,0,,
1132,{,"if (c == '&') {
  if (i + 4 < length) {
    if ('a' == string.charAt(i + 1) && 'm' == string.charAt(i + 2) && 'p' == string.charAt(i + 3) && ';' == string.charAt(i + 4)) {
    }
 else {
      app=""&amp;"";
    }
  }
 else {
    app=""&amp;"";
  }
}
 else {
}
",0,0,0,,
1133,{,"if (mapping.isExactMapping()) {
}
 else if (mapping.isExtensionMapping()) {
  resourceBasePath=externalContext.getRequestServletPath();
  int stripPoint=resourceBasePath.lastIndexOf('.');
  if (stripPoint > 0) {
    resourceBasePath=resourceBasePath.substring(0,stripPoint);
  }
}
 else {
  resourceBasePath=externalContext.getRequestPathInfo();
}
",0,0,0,,
1134,{,"if (paths == null) {
}
 else {
  for (  String p : paths) {
    if (p.startsWith(""/WEB-INF"") && isTopLevelViewsOnly(options)) {
    }
 else     if (p.startsWith(""/META-INF"") && isTopLevelViewsOnly(options)) {
    }
 else {
      if (stack == null) {
        stack=new LinkedList<>();
      }
      stack.add(p);
    }
  }
}
",0,0,0,,
1135,{,"if (p.startsWith(""/WEB-INF"") && isTopLevelViewsOnly(options)) {
}
 else if (p.startsWith(""/META-INF"") && isTopLevelViewsOnly(options)) {
}
 else {
  if (stack == null) {
    stack=new LinkedList<>();
  }
  stack.add(p);
}
",0,0,0,,
1136,{,"if (p.startsWith(""/META-INF"") && isTopLevelViewsOnly(options)) {
}
 else {
  if (stack == null) {
    stack=new LinkedList<>();
  }
  stack.add(p);
}
",0,0,0,,
1137,{,"if (name.equals(""value"") && comp instanceof ValueHolder) {
}
 else if (!IGNORE_ATTRIBUTES.contains(name)) {
  try {
    Object value=comp.getAttributes().get(name);
    printAttribute(stream,name,value);
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,e.getMessage(),e);
    printAttribute(stream,name,null);
  }
}
",0,0,0,,
1138,{,"if (view != null && FaceletViewDeclarationLanguageBase.isDynamicComponentRefreshTransientBuildActive(context,view)) {
}
 else {
  return;
}
",0,0,0,,
1139,{,"if (!usePartialStateSavingOnThisView || refreshTransientBuildOnPSS) {
}
",0,0,0,,
1140,{,"if (id != null) {
}
 else {
  Object[] rdk=(Object[])child.getAttributes().get(RequestViewMetadata.RESOURCE_DEPENDENCY_KEY);
  if (rdk != null) {
    boolean found=false;
    String library=(String)rdk[0];
    String name=(String)rdk[1];
    if (resourceDependencyList != null) {
      for (      ResourceDependency resource : resourceDependencyList) {
        if (library == null && resource.library() == null) {
          if (name != null && name.equals(resource.name())) {
            found=true;
            break;
          }
        }
 else {
          if (library != null && library.equals(resource.library()) && name != null && name.equals(resource.name())) {
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      component.getChildren().remove(i);
      i--;
      childCount--;
    }
  }
 else {
    if (child.getChildCount() > 0 || !child.getFacets().isEmpty()) {
      clearTransientAndNonFaceletComponents(context,child);
    }
  }
}
",0,0,0,,
1141,{,"if (""facelet-taglib"".equals(qName)) {
}
 else if (""library-class"".equals(qName)) {
  getLibraryImpl().setLibraryClass(this.captureBuffer());
}
 else if (""short-name"".equals(qName)) {
  getLibraryImpl().setShortName(this.captureBuffer());
}
 else if (""namespace"".equals(qName)) {
  getLibraryImpl().setNamespace(this.captureBuffer());
}
 else if (""composite-library-name"".equals(qName)) {
  getLibraryImpl().setCompositeLibraryName(this.captureBuffer());
}
 else if (""component-type"".equals(qName)) {
  this.componentType=this.captureBuffer();
}
 else if (""renderer-type"".equals(qName)) {
  this.rendererType=this.captureBufferEmptyNull();
}
 else if (""tag-name"".equals(qName)) {
  this.tagName=this.captureBuffer();
}
 else if (""function-name"".equals(qName)) {
  this.functionName=this.captureBuffer();
}
 else if (""function-class"".equals(qName)) {
  this.functionClass=this.captureBuffer();
}
 else if (""description"".equals(qName)) {
}
 else if (""display-name"".equals(qName)) {
}
 else if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
1142,{,"if (""description"".equals(qName)) {
}
 else if (""display-name"".equals(qName)) {
}
 else if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
1143,{,"if (""display-name"".equals(qName)) {
}
 else if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
1144,{,"if (""icon"".equals(qName)) {
}
 else if (""resource-id"".equals(qName)) {
  this.resourceId=this.captureBuffer();
}
 else {
  if (this.library == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
 else   if (this.library.getNamespace() == null) {
    throw new IllegalStateException(""No <namespace> element"");
  }
  if (""tag"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletHandlerTagImpl(this.handlerClass)));
      this.handlerClass=null;
    }
  }
 else   if (""handler-class"".equals(qName)) {
    this.handlerClass=this.captureBufferEmptyNull();
  }
 else   if (""component"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,this.handlerClass,null)));
      this.handlerClass=null;
    }
 else     if (this.resourceId != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(null,null,null,this.resourceId)));
      this.resourceId=null;
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletComponentTagImpl(this.componentType,this.rendererType,null,null)));
      this.handlerClass=null;
    }
  }
 else   if (""converter-id"".equals(qName)) {
    this.converterId=this.captureBuffer();
  }
 else   if (""converter"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletConverterTagImpl(this.converterId)));
    }
    this.converterId=null;
  }
 else   if (""validator-id"".equals(qName)) {
    this.validatorId=this.captureBuffer();
  }
 else   if (""validator"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletValidatorTagImpl(this.validatorId)));
    }
    this.validatorId=null;
  }
 else   if (""behavior-id"".equals(qName)) {
    this.behaviorId=this.captureBuffer();
  }
 else   if (""behavior"".equals(qName)) {
    if (this.handlerClass != null) {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId,this.handlerClass)));
      this.handlerClass=null;
    }
 else {
      getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletBehaviorTagImpl(this.behaviorId)));
    }
    this.behaviorId=null;
  }
 else   if (""source"".equals(qName)) {
    String path=this.captureBuffer();
    URL url=new URL(this.source,path);
    getLibraryImpl().addTag(new FaceletTagImpl(this.tagName,new FaceletSourceTagImpl(url.toString())));
  }
 else   if (""function-signature"".equals(qName)) {
    this.functionSignature=this.captureBuffer();
    getLibraryImpl().addFunction(new FaceletFunctionImpl(this.functionName,this.functionClass,functionSignature));
  }
}
",0,0,0,,
1145,{,"if (viewResource != null) {
}
 else {
  _relativePaths.put(path,url);
}
",0,0,0,,
1146,{,"if (viewResource != null) {
}
 else {
  Map<String,URL> newLoc=new HashMap<>(_relativeLocations);
  newLoc.put(uri,url);
  _relativeLocations=newLoc;
}
",0,0,0,,
1147,{,"if (viewResource != null) {
}
 else {
  Map<String,URL> newLoc=new HashMap<>(_relativeLocations);
  newLoc.put(uri,url);
  _relativeLocations=newLoc;
}
",0,0,0,,
1148,{,"if (viewResource != null) {
}
 else {
  Map<String,URL> newLoc=new HashMap<>(_relativeLocations);
  newLoc.put(uri,url);
  _relativeLocations=newLoc;
}
",0,0,0,,
1149,{,"if (step == 0) {
}
 else if (step == 1) {
  applyNextHandlerIfNotAppliedDynamically(ctx,c);
  applyCompositeComponentFacelet(ctx,c);
  applyFinalInitializationSteps(ctx,mctx,c);
  c.getAttributes().put(CREATE_CC_ON_POST_ADD_TO_VIEW,2);
}
 else {
  applyCompositeComponentFacelet(ctx,c);
}
",0,0,0,,
1150,{,"if ('a' == value.charAt(i + 1) && 'm' == value.charAt(i + 2) && 'p' == value.charAt(i + 3) && ';' == value.charAt(i + 4)) {
}
 else {
  app=""&amp;"";
}
",0,0,0,,
1151,{,"if (""testResource.js"".equals(component.getAttributes().get(""name""))) {
}
 else {
  Assert.fail(""Not expected resource found"" + component.getAttributes().get(""name""));
}
",0,0,0,,
1152,{,"if (""testResource.js"".equals(component.getAttributes().get(""name""))) {
}
 else {
  Assert.fail(""Not expected resource found"" + component.getAttributes().get(""name""));
}
",0,0,0,,
1153,{,"if (""testResource.js"".equals(component.getAttributes().get(""name""))) {
}
 else {
  Assert.fail(""Not expected resource found"" + component.getAttributes().get(""name""));
}
",0,0,0,,
1154,{,"if (JsfVersion.supports12()) {
  viewHandler.initView(facesContext);
}
 else {
}
",0,0,0,,
1155,{,"if (lastIndex < (clientId.length() - 1)) {
  id=clientId.substring(lastIndex + 1);
}
 else {
}
",0,0,0,,
1156,{,"if (parent != null) {
  flattenValidator(parent);
  validator.merge(parent);
}
 else {
}
",0,0,0,,
1157,{,"if (parent != null) {
  flattenConverter(parent);
  converter.merge(parent);
}
 else {
}
",0,0,0,,
1158,{,"if (parent != null) {
  flattenBehavior(parent);
  behavior.merge(parent);
}
 else {
}
",0,0,0,,
1159,{,"if (parent != null) {
  flattenFaceletTag(parent);
  faceletTag.merge(parent);
}
 else {
}
",0,0,0,,
1160,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
1161,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
1162,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
1163,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
1164,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
1165,{,"if (this.inDocument && inCompositeInterface) {
}
",0,0,0,,
1166,{,"if (value instanceof ThrowAwayClassloader) {
}
 else {
  invokeMethod(targetDescriptor.getWriteMethod(),target,new Object[]{value});
}
",0,0,0,,
1167,{,"if (JsfVersion.supports12()) {
  Jsf12Utils.initView(facesContext,viewHandler);
}
 else {
}
",0,0,0,,
1168,{,"if (lastIndex < (clientId.length() - 1)) {
  id=clientId.substring(lastIndex + 1);
}
 else {
}
",0,0,0,,
1169,{,"if (JsfVersion.supports12()) {
  Jsf12Utils.initView(facesContext,viewHandler);
}
 else {
}
",0,0,0,,
1170,{,"if (lastIndex < (clientId.length() - 1)) {
  id=clientId.substring(lastIndex + 1);
}
 else {
}
",0,0,0,,
1171,} else {,"if (!oldExpanded && newExpanded) {
  ((TreeExpansionListener)facesListener).treeExpanded(this);
}
 else {
}
",0,0,0,,
1172,} else {,"if (!oldSelected && newSelected) {
  ((TreeSelectedListener)facesListener).treeSelected(this);
}
 else {
}
",0,0,0,,
1173,} else {,"if (!containsElement(components,element)) {
  addFacets(componentTag,namespace,element);
  final List<org.jdom2.Element> attributes=new ArrayList<>();
  final List<org.jdom2.Element> properties=new ArrayList<>();
  addAttributes(typeElement,attributes,properties,namespace);
  if (!attributes.isEmpty()) {
    attributes.sort(Comparator.comparing(d -> d.getChildText(ATTRIBUTE_NAME,namespace)));
    element.addContent(attributes);
  }
  if (!properties.isEmpty()) {
    properties.sort(Comparator.comparing(d -> d.getChildText(PROPERTY_NAME,namespace)));
    element.addContent(properties);
  }
  element.addContent(createElementExtension(typeElement,componentTag,namespace));
  components.add(element);
}
 else {
}
",0,0,0,,
1174,{,"if (map == null) {
  map=myMap;
  reqMap.put(_STATE_MAP,map);
}
 else {
}
",0,0,0,,
1175,{,"if (base == null) {
}
 else {
  if (property != null) {
    context.setPropertyResolved(true);
    if (property instanceof Number)     _pr.setValue(base,((Number)property).intValue(),value);
    _pr.setValue(base,property,value);
  }
}
",0,0,0,,
1176,{,"if (!_isStyleClassTerminator(c)) {
}
 else {
  startSubstringIndex=i + 1;
}
",0,0,0,,
1177,{,"if ((background == null) && (entry.styleClass != null)) {
}
",0,0,0,,
1178,} else {,"if (plaf != null) {
  ModuleProperties.RP.post(new Runnable(){
    public void run(){
      final boolean visible=plaf.getModule(""org.netbeans.modules.autoupdate.services"") != null;
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          showInPluginManagerCheckbox.setVisible(visible);
        }
      }
);
    }
  }
);
}
 else {
}
",0,0,0,,
1179,} else {,"if (literal) {
  return ""bundle:"" + bundle;
}
 else {
}
",0,0,0,,
1180,} else {,"if (next instanceof TreeText && ((TreeText)next).getData().matches(""(\r|\n|\r\n)[ \t]+"")) {
  next.removeFromContext();
}
 else {
}
",0,0,0,,
1181,} else {,"if (bl > 1 || barStart % 2 == 0) {
  barLength=bl;
  bar_inc=new Rectangle(bar.x + barStart,bar.y,barLength + 1,bar.height);
  repaint(bar_inc);
}
 else {
}
",0,0,0,,
1182,} else {,"if (eager) {
  params.put(""lazy"",false);
}
 else {
}
",0,0,0,,
1183,} else {,"if (arg.getKind() == Tree.Kind.NEW_ARRAY) {
  for (  ExpressionTree elt : ((NewArrayTree)arg).getInitializers()) {
    if (isRegistered(key,elt)) {
      return true;
    }
  }
}
 else {
}
",0,0,0,,
1184,} else {,"if (bundlePath != null && bundlePath.endsWith(suffix)) {
  String name=bundlePath.substring(0,bundlePath.length() - suffix.length()).replace('/','.');
  targetFO.setAttribute(""displayName"",""bundlevalue:"" + name + ""#""+ locBundleKey);
}
 else {
}
",0,0,0,,
1185,} else {,"if (bundlePath != null && bundlePath.endsWith(suffix)) {
  bundlePath=bundlePath.substring(0,bundlePath.length() - suffix.length()).replace('/','.');
  file.setAttribute(""displayName"",""bundlevalue:"" + bundlePath + ""#""+ category+ ""/""+ name+ ""Project.zip"");
}
 else {
}
",0,0,0,,
1186,if (objs.length > 0 && objs[0] instanceof String) {,"if (objs.length > 0 && objs[0] instanceof String) {
}
",0,1,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1187,} else {,"if (evt.getSource() == deploymentDescriptorDO) {
synchronized (this) {
    jbossClient=null;
  }
}
 else {
}
",0,0,0,,
1188,} else {,"if (evt.getSource() == deploymentDescriptorDO) {
synchronized (this) {
    jboss=null;
  }
}
 else {
}
",0,0,0,,
1189,} else {,"if (dm.getProperties().getServerVersion().compareTo(JBPluginUtils.JBOSS_6_0_0) < 0) {
  int jnpPort=JBPluginUtils.getJnpPortNumber(ip.getProperty(JBPluginProperties.PROPERTY_SERVER_DIR));
  additionalParams.append("" -s jnp://localhost:"").append(jnpPort);
}
 else {
}
",0,0,0,,
1190,} else {,"if (!deployed.get(jndiName).equals(wlDatasource)) {
  if (!((WLDatasource)deployedDatasource).isSystem() && !wlDatasource.isSystem()) {
    toDeploy.put(jndiName,wlDatasource);
  }
 else {
    conflictDS.add(deployed.get(jndiName));
  }
}
 else {
}
",0,0,0,,
1191,} else {,"if (!deployed.get(name).equals(wLMessageDestination)) {
  if (!((WLMessageDestination)deployedMessageDestination).isSystem() && !wLMessageDestination.isSystem()) {
    toDeploy.put(name,wLMessageDestination);
  }
 else {
    conflictJMS.add(deployed.get(name));
  }
}
 else {
}
",0,0,0,,
1192,} else {,"if (!""localhost"".equals(localhost)) {
  nonProxy=nonProxy + ""|"" + localhost;
}
 else {
}
",0,0,0,,
1193,} else {,"if (!client) {
  boolean aliasRequired=true;
  if (ComboConstants.PROF_USERNAME.equals(profile) || ComboConstants.PROF_ENDORSCERT.equals(profile) || ComboConstants.PROF_SAMLSENDER.equals(profile)|| ComboConstants.PROF_SAMLHOLDER.equals(profile)|| ComboConstants.PROF_STSISSUED.equals(profile)|| ComboConstants.PROF_STSISSUEDCERT.equals(profile)|| ComboConstants.PROF_STSISSUEDENDORSE.equals(profile)|| ComboConstants.PROF_STSISSUEDSUPPORTING.equals(profile)|| ComboConstants.PROF_MUTUALCERT.equals(profile)) {
    aliasRequired=false;
  }
  keyAliasCombo.setEnabled(aliasRequired);
  keyAliasLabel.setEnabled(aliasRequired);
  loadkeysButton.setEnabled(aliasRequired);
}
 else {
}
",0,0,0,,
1194,} else {,"if (!""localhost"".equals(localhost)) {
  nonProxy=nonProxy + ""|"" + localhost;
}
 else {
}
",0,0,0,,
1195,} else {,"if (!original.libraryWithinProject) {
  File file=original.libraryFile;
  if (file == null) {
    return;
  }
  String relativized=PropertyUtils.relativizeFile(FileUtil.toFile(project.getProjectDirectory()),file);
  if (relativized != null) {
    project.getAntProjectHelper().setLibrariesLocation(relativized);
  }
 else {
    project.getAntProjectHelper().setLibrariesLocation(file.getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1196,} else {,"if (original.libraryWithinProject) {
  if (original.absolutesRelPath != null) {
    project.getAntProjectHelper().setLibrariesLocation(PropertyUtils.resolveFile(FileUtil.toFile(project.getProjectDirectory()),original.absolutesRelPath).getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1197,} else {,"if (stubDescriptor instanceof JAXRPCClientStubDescriptor) {
  JAXRPCClientStubDescriptor stubDesc=(JAXRPCClientStubDescriptor)stubDescriptor;
  if (wscompileFeatures != null) {
    stubDesc.setDefaultFeatures(wscompileFeatures);
  }
  defaultFeatures=stubDesc.getDefaultFeaturesAsArgument();
}
 else {
}
",0,0,0,,
1198,} else {,"if (n.getNodeType() == Node.TEXT_NODE) {
  String serviceName=n.getNodeValue();
  String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
  if (currentFeatures == null) {
    currentFeatures=""wsi, strict"";
  }
  boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
  boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
  boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
  boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
  boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
  boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
  ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
  WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
  serviceNames.add(settings);
}
 else {
}
",0,0,0,,
1199,} else {,"if (nl.getLength() == 1) {
  Node n=nl.item(0);
  if (n.getNodeType() == Node.TEXT_NODE) {
    String serviceName=n.getNodeValue();
    String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
    if (currentFeatures == null) {
      currentFeatures=""wsi, strict"";
    }
    boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
    boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
    boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
    boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
    boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
    boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
    ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
    WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
    serviceNames.add(settings);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1200,} else {,"if (n.getNodeType() == Node.TEXT_NODE) {
  String name=n.getNodeValue();
  if (serviceName.equals(name)) {
    Node node=clientNameElement.getParentNode();
    clientElement=(node instanceof Element) ? (Element)node : null;
    break;
  }
}
 else {
}
",0,0,0,,
1201,} else {,"if (!original.libraryWithinProject) {
  File file=original.libraryFile;
  if (file == null) {
    return;
  }
  String relativized=PropertyUtils.relativizeFile(FileUtil.toFile(project.getProjectDirectory()),file);
  if (relativized != null) {
    project.getAntProjectHelper().setLibrariesLocation(relativized);
  }
 else {
    project.getAntProjectHelper().setLibrariesLocation(file.getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1202,} else {,"if (original.libraryWithinProject) {
  if (original.absolutesRelPath != null) {
    project.getAntProjectHelper().setLibrariesLocation(PropertyUtils.resolveFile(FileUtil.toFile(project.getProjectDirectory()),original.absolutesRelPath).getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1203,} else {,"if (!original.libraryWithinProject) {
  File file=original.libraryFile;
  if (file == null) {
    return;
  }
  String relativized=PropertyUtils.relativizeFile(FileUtil.toFile(project.getProjectDirectory()),file);
  if (relativized != null) {
    project.getAntProjectHelper().setLibrariesLocation(relativized);
  }
 else {
    project.getAntProjectHelper().setLibrariesLocation(file.getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1204,} else {,"if (original.libraryWithinProject) {
  if (original.absolutesRelPath != null) {
    project.getAntProjectHelper().setLibrariesLocation(PropertyUtils.resolveFile(FileUtil.toFile(project.getProjectDirectory()),original.absolutesRelPath).getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1205,if (ddFO == null && !Profile.JAVA_EE_5.equals(getJ2eeProfile())) {,"if (ddFO == null && !Profile.JAVA_EE_5.equals(getJ2eeProfile())) {
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1206,} else {,"if (stubDescriptor instanceof JAXRPCClientStubDescriptor) {
  JAXRPCClientStubDescriptor stubDesc=(JAXRPCClientStubDescriptor)stubDescriptor;
  if (wscompileFeatures != null) {
    stubDesc.setDefaultFeatures(wscompileFeatures);
  }
  defaultFeatures=stubDesc.getDefaultFeaturesAsArgument();
}
 else {
}
",0,0,0,,
1207,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  String serviceName=n.getNodeValue();
  String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
  if (currentFeatures == null) {
    currentFeatures=""wsi, strict"";
  }
  ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
  boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
  boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
  boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
  boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
  boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
  boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
  WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
  serviceNames.add(settings);
}
 else {
}
",0,0,0,,
1208,} else {,"if (nl.getLength() == 1) {
  org.w3c.dom.Node n=nl.item(0);
  if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
    String serviceName=n.getNodeValue();
    String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
    if (currentFeatures == null) {
      currentFeatures=""wsi, strict"";
    }
    ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
    boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
    boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
    boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
    boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
    boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
    boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
    WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
    serviceNames.add(settings);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1209,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  String name=n.getNodeValue();
  if (serviceName.equals(name)) {
    org.w3c.dom.Node node=clientNameElement.getParentNode();
    clientElement=(node instanceof Element) ? (Element)node : null;
    break;
  }
}
 else {
}
",0,0,0,,
1210,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  String serviceName=n.getNodeValue();
  String currentFeatures=projectProperties.getProperty(""wscompile.service."" + serviceName + "".features"");
  StubDescriptor stubType=getServiceStubDescriptor(serviceNameElement.getParentNode());
  WsCompileEditorSupport.ServiceSettings settings;
  if (seiServiceStub == stubType) {
    if (currentFeatures == null) {
      currentFeatures=seiServiceStub.getDefaultFeaturesAsArgument();
    }
    settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allSeiServiceFeatures,importantSeiServiceFeatures);
  }
 else {
    if (currentFeatures == null) {
      currentFeatures=wsdlServiceStub.getDefaultFeaturesAsArgument();
    }
    settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allWsdlServiceFeatures,importantWsdlServiceFeatures);
  }
  serviceList.add(settings);
}
 else {
}
",0,0,0,,
1211,} else {,"if (nl.getLength() == 1) {
  org.w3c.dom.Node n=nl.item(0);
  if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
    String serviceName=n.getNodeValue();
    String currentFeatures=projectProperties.getProperty(""wscompile.service."" + serviceName + "".features"");
    StubDescriptor stubType=getServiceStubDescriptor(serviceNameElement.getParentNode());
    WsCompileEditorSupport.ServiceSettings settings;
    if (seiServiceStub == stubType) {
      if (currentFeatures == null) {
        currentFeatures=seiServiceStub.getDefaultFeaturesAsArgument();
      }
      settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allSeiServiceFeatures,importantSeiServiceFeatures);
    }
 else {
      if (currentFeatures == null) {
        currentFeatures=wsdlServiceStub.getDefaultFeaturesAsArgument();
      }
      settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allWsdlServiceFeatures,importantWsdlServiceFeatures);
    }
    serviceList.add(settings);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1212,} else {,"if (elementTree != null) {
  TextSpan underlineSpan=getUnderlineSpan(cinfo,elementTree);
  err=ErrorDescriptionFactory.createErrorDescription(severity,description,fixList,cinfo.getFileObject(),underlineSpan.getStartOffset(),underlineSpan.getEndOffset());
}
 else {
}
",0,0,0,,
1213,} else {,"if (files != null) {
  for (  File f : files) {
    deleteFile(f);
  }
}
 else {
}
",0,0,0,,
1214,} else {,"if (!""localhost"".equals(localhost)) {
  nonProxy=nonProxy + ""|"" + localhost;
}
 else {
}
",0,0,0,,
1215,if (o == null || (o instanceof String && ((String) o).length() == 0)) {,"if (o == null || (o instanceof String && ((String)o).length() == 0)) {
}
 else {
  return false;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1216,} else {,"if (!editmode) {
  if (model.alreadyExists(newValues)) {
    result=true;
  }
}
 else {
}
",0,0,0,,
1217,} else {,"if (null != validator) {
  failures.addAll(validator.validate(elementName,elementDtdName,validatee));
}
 else {
}
",0,0,0,,
1218,} else {,"if (null != validator) {
  failures.addAll(validator.validateIndividualProperty(property,absoluteDtdName,fieldName));
}
 else {
}
",0,0,0,,
1219,} else {,"if (constraintList != null) {
  failures.addAll(validate(property,constraintList,fieldName));
}
 else {
}
",0,0,0,,
1220,} else {,"if (constraintList != null) {
  String property=(String)validatee.getElement(elementName);
  failures.addAll(validate(property,constraintList,name));
}
 else {
}
",0,0,0,,
1221,} else {,"if (constraintList != null) {
  for (int i=0; i < noOfElements; i++) {
    String property=(String)validatee.getElement(elementName,i);
    String name=validatee.getXPath() + Constants.XPATH_DELIMITER + utils.getIndexedName(elementDtdName,i);
    failures.addAll(validate(property,constraintList,name));
  }
}
 else {
}
",0,0,0,,
1222,} else {,"if (evt.getSource() == deploymentDescriptorDO) {
synchronized (this) {
    jbossClient=null;
  }
}
 else {
}
",0,0,0,,
1223,} else {,"if (evt.getSource() == deploymentDescriptorDO) {
synchronized (this) {
    jboss=null;
  }
}
 else {
}
",0,0,0,,
1224,} else {,"if (fo != null) {
  return fo.getFileObject(""application.xml"");
}
 else {
}
",0,0,0,,
1225,} else {,"if (candidates.size() > 0) {
  Runnable runnable=new Runnable(){
    @Override public void run(){
      for (      WsimportPomInfo candidate : candidates) {
        if (isClient(prj,candidate)) {
          String wsdlPath=candidate.getWsdlPath();
          JaxWsService client=new JaxWsService(wsdlPath,false);
          if (candidate.getHandlerFile() != null) {
            client.setHandlerBindingFile(candidate.getHandlerFile());
          }
          client.setId(candidate.getId());
          client.setWsdlUrl(getOriginalWsdlUrl(prj,client.getId(),false));
          jaxWsSupport.addService(client);
        }
      }
    }
  }
;
  jaxWsSupport.runAtomic(runnable);
}
 else {
}
",0,0,0,,
1226,} else {,"if (!""localhost"".equals(localhost)) {
  nonProxy=nonProxy + ""|"" + localhost;
}
 else {
}
",0,0,0,,
1227,} else {,"if (type == null) {
  genericType=type;
}
 else {
}
",0,0,0,,
1228,} else {,"if (token.length() > 2) {
  final int from=token.offset(tokenHierarchy) + 1;
  final int to=token.offset(tokenHierarchy) + token.length() - 1;
  returnTaskRef.set(new Callable<int[]>(){
    @Override public int[] call() throws Exception {
      return new int[]{from,to};
    }
  }
);
}
 else {
}
",0,0,0,,
1229,} else {,"if (tokenSequence.token().id() != JspTokenId.EL) {
  while (!(tokenSequence.token().id() == JspTokenId.SYMBOL && tokenSequence.token().text().toString().charAt(0) == '<' || tokenSequence.token().id() == JspTokenId.TAG) && tokenSequence.movePrevious()) {
    start=NbDocument.findLineColumn(document,tokenSequence.token().offset(tokenHierarchy));
    offset=tokenSequence.token().offset(tokenHierarchy);
  }
  while ((tokenSequence.token().id() != JspTokenId.SYMBOL || tokenSequence.token().text().toString().trim().length() > 0 && tokenSequence.token().text().toString().charAt(tokenSequence.token().text().toString().trim().length() - 1) != '>') && tokenSequence.moveNext())   ;
}
 else {
}
",0,0,0,,
1230,else {,"if (tid == null) {
  if (ch == ':') {
    tid=ELTokenContext.TAG_LIB_PREFIX;
  }
 else {
    tid=ELTokenContext.IDENTIFIER;
  }
}
 else {
}
",0,0,0,,
1231,} else {,"if (CharSequenceUtilities.equals(""="",token.text())) {
  break;
}
 else {
}
",0,0,0,,
1232,} else {,"if (CharSequenceUtilities.equals(""="",token.text())) {
  break;
}
 else {
}
",0,0,0,,
1233,} else {,"if (tag != null) {
  if (!tag.hasNonGenenericAttributes()) {
    return;
  }
  Collection<Attribute> attrs=tag.getAttributes();
  for (  Attribute attr : attrs) {
    if (attr.isRequired() && attr.getDefaultValue() == null) {
      if (openTag.getAttribute(attr.getName()) == null) {
        Hint hint=new Hint(ERROR_RULE_BADGING,NbBundle.getMessage(HintsProvider.class,""MSG_MISSING_REQUIRED_ATTRIBUTE"",attr.getName()),snapshot.getSource().getFileObject(),JsfUtils.createOffsetRange(snapshot,docText,node.from(),node.to()),Collections.EMPTY_LIST,DEFAULT_ERROR_HINT_PRIORITY);
        hints.add(hint);
      }
    }
  }
  for (  org.netbeans.modules.html.editor.lib.api.elements.Attribute nodeAttr : openTag.attributes()) {
    String nodeAttrName=nodeAttr.name().toString();
    if (nodeAttr.namespacePrefix() == null && tag.getAttribute(nodeAttrName) == null && !""xmlns"".equals(nodeAttrName.toLowerCase(Locale.ENGLISH))) {
      Hint hint=new Hint(ERROR_RULE_BADGING,NbBundle.getMessage(HintsProvider.class,""MSG_UNKNOWN_ATTRIBUTE"",nodeAttr.name(),tag.getName()),snapshot.getSource().getFileObject(),JsfUtils.createOffsetRange(snapshot,docText,nodeAttr.from(),nodeAttr.to()),Collections.EMPTY_LIST,DEFAULT_ERROR_HINT_PRIORITY);
      hints.add(hint);
    }
  }
}
 else {
}
",0,0,0,,
1234,} else {,"if (!original.libraryWithinProject) {
  File file=original.libraryFile;
  if (file == null) {
    return;
  }
  String relativized=PropertyUtils.relativizeFile(FileUtil.toFile(project.getProjectDirectory()),file);
  if (relativized != null) {
    project.getAntProjectHelper().setLibrariesLocation(relativized);
  }
 else {
    project.getAntProjectHelper().setLibrariesLocation(file.getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1235,} else {,"if (original.libraryWithinProject) {
  if (original.absolutesRelPath != null) {
    project.getAntProjectHelper().setLibrariesLocation(PropertyUtils.resolveFile(FileUtil.toFile(project.getProjectDirectory()),original.absolutesRelPath).getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1236,} else {,"if (stubDescriptor instanceof JAXRPCClientStubDescriptor) {
  JAXRPCClientStubDescriptor stubDesc=(JAXRPCClientStubDescriptor)stubDescriptor;
  if (wscompileFeatures != null)   stubDesc.setDefaultFeatures(wscompileFeatures);
  defaultFeatures=stubDesc.getDefaultFeaturesAsArgument();
}
 else {
}
",0,0,0,,
1237,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  String serviceName=n.getNodeValue();
  String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
  if (currentFeatures == null) {
    currentFeatures=""wsi, strict"";
  }
  ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
  boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
  boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
  boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
  boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
  boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
  boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
  WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
  serviceNames.add(settings);
}
 else {
}
",0,0,0,,
1238,} else {,"if (nl.getLength() == 1) {
  org.w3c.dom.Node n=nl.item(0);
  if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
    String serviceName=n.getNodeValue();
    String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
    if (currentFeatures == null) {
      currentFeatures=""wsi, strict"";
    }
    ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
    boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
    boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
    boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
    boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
    boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
    boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
    WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
    serviceNames.add(settings);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1239,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  String name=n.getNodeValue();
  if (serviceName.equals(name)) {
    org.w3c.dom.Node node=clientNameElement.getParentNode();
    clientElement=(node instanceof Element) ? (Element)node : null;
    break;
  }
}
 else {
}
",0,0,0,,
1240,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  String serviceName=n.getNodeValue();
  String currentFeatures=projectProperties.getProperty(""wscompile.service."" + serviceName + "".features"");
  StubDescriptor stubType=getServiceStubDescriptor(serviceNameElement.getParentNode());
  WsCompileEditorSupport.ServiceSettings settings;
  if (seiServiceStub == stubType) {
    if (currentFeatures == null) {
      currentFeatures=seiServiceStub.getDefaultFeaturesAsArgument();
    }
    settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allSeiServiceFeatures,importantSeiServiceFeatures);
  }
 else {
    if (currentFeatures == null) {
      currentFeatures=wsdlServiceStub.getDefaultFeaturesAsArgument();
    }
    settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allWsdlServiceFeatures,importantWsdlServiceFeatures);
  }
  serviceList.add(settings);
}
 else {
}
",0,0,0,,
1241,} else {,"if (nl.getLength() == 1) {
  org.w3c.dom.Node n=nl.item(0);
  if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
    String serviceName=n.getNodeValue();
    String currentFeatures=projectProperties.getProperty(""wscompile.service."" + serviceName + "".features"");
    StubDescriptor stubType=getServiceStubDescriptor(serviceNameElement.getParentNode());
    WsCompileEditorSupport.ServiceSettings settings;
    if (seiServiceStub == stubType) {
      if (currentFeatures == null) {
        currentFeatures=seiServiceStub.getDefaultFeaturesAsArgument();
      }
      settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allSeiServiceFeatures,importantSeiServiceFeatures);
    }
 else {
      if (currentFeatures == null) {
        currentFeatures=wsdlServiceStub.getDefaultFeaturesAsArgument();
      }
      settings=new WsCompileEditorSupport.ServiceSettings(serviceName,stubType,currentFeatures,allWsdlServiceFeatures,importantWsdlServiceFeatures);
    }
    serviceList.add(settings);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1242,(!jsr109Supported && jsr109oldSupported)) {,"if ((!jsr109Supported && !jsr109oldSupported) || jaxWsInJ2ee14Supported || (!jsr109Supported && jsr109oldSupported)) {
}
",0,0,2,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1243,} else {,"if (!localhost.equals(""localhost"")) {
  nonProxy=nonProxy + ""|"" + localhost;
}
 else {
}
",0,0,0,,
1244,} else {,"if (!localhost2.equals(""localhost"") && !localhost2.equals(localhost)) {
  nonProxy=nonProxy + ""|"" + localhost2;
}
 else {
}
",0,0,0,,
1245,} else {,"if (stubDescriptor instanceof JAXRPCClientStubDescriptor) {
  JAXRPCClientStubDescriptor stubDesc=(JAXRPCClientStubDescriptor)stubDescriptor;
  if (wscompileFeatures != null)   stubDesc.setDefaultFeatures(wscompileFeatures);
  defaultFeatures=stubDesc.getDefaultFeaturesAsArgument();
}
 else {
}
",0,0,0,,
1246,} else {,"if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
  EditableProperties projectProperties=null;
  try {
    projectProperties=WSUtils.getEditableProperties(project,AntProjectHelper.PROJECT_PROPERTIES_PATH);
  }
 catch (  IOException ex) {
  }
  if (projectProperties == null)   continue;
  String serviceName=n.getNodeValue();
  String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
  if (currentFeatures == null) {
    currentFeatures=""wsi, strict"";
  }
  ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
  boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
  boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
  boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
  boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
  boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
  boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
  WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
  serviceNames.add(settings);
}
 else {
}
",0,0,0,,
1247,} else {,"if (nl.getLength() == 1) {
  org.w3c.dom.Node n=nl.item(0);
  if (n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
    EditableProperties projectProperties=null;
    try {
      projectProperties=WSUtils.getEditableProperties(project,AntProjectHelper.PROJECT_PROPERTIES_PATH);
    }
 catch (    IOException ex) {
    }
    if (projectProperties == null)     continue;
    String serviceName=n.getNodeValue();
    String currentFeatures=projectProperties.getProperty(""wscompile.client."" + serviceName + "".features"");
    if (currentFeatures == null) {
      currentFeatures=""wsi, strict"";
    }
    ClientStubDescriptor stubType=getClientStubDescriptor(clientNameElement.getParentNode());
    boolean propVerbose=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".verbose""));
    boolean propDebug=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".debug""));
    boolean propPrintStackTrace=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xPrintStackTrace""));
    boolean propExtensible=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".xSerializable""));
    boolean propOptimize=""true"".equalsIgnoreCase(projectProperties.getProperty(""wscompile.client."" + serviceName + "".optimize""));
    boolean[] options=new boolean[]{propVerbose,propDebug,propPrintStackTrace,propExtensible,propOptimize};
    WsCompileClientEditorSupport.ServiceSettings settings=new WsCompileClientEditorSupport.ServiceSettings(serviceName,stubType,options,currentFeatures,allClientFeatures,importantClientFeatures);
    serviceNames.add(settings);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1248,} else {,"if (dep != null) {
  components.put(c,dep);
  conf.modules.add(dep);
}
 else {
}
",0,0,0,,
1249,} else {,"if (fo != null) {
  try {
    Project prj=ProjectManager.getDefault().findProject(fo);
    if (prj != null && prj.getLookup().lookup(NbGradleProjectImpl.class) != null) {
      NbGradleProjectImpl proj=(NbGradleProjectImpl)prj;
      assert prj.getLookup().lookup(LogicalViewProvider.class) != null;
      Node original=proj.getLookup().lookup(LogicalViewProvider.class).createLogicalView();
      ret.add(new SubProjectsNode.ProjectFilterNode(original));
    }
  }
 catch (  IllegalArgumentException|IOException ex) {
    ex.printStackTrace();
  }
}
 else {
}
",0,0,0,,
1250,} else {,"if (buildScript != null) {
  rootDir=buildScript.getParentFile();
}
 else {
}
",0,0,0,,
1251,} else {,"if (files != null) {
  for (  File f : files) {
    deleteFile(f);
  }
}
 else {
}
",0,0,0,,
1252,} else {,"if (test instanceof NbTest) {
  ((NbTest)test).setFilter(fFilter);
}
 else {
}
",0,0,0,,
1253,} else {,"if (editorOpened()) {
  ensureConfigurationUptodate();
  loading=false;
  refreshViewData(true);
}
 else {
}
",0,0,0,,
1254,} else {,"if (attachment.getFile().isFile()) {
  if (attachment.getDescription().trim().length() == 0) {
    attachment.setDescription(Bundle.BugzillaIssue_attachment_noDescription());
  }
  addAttachment(attachment.getFile(),null,attachment.getDescription(),attachment.getContentType(),attachment.isPatch());
}
 else {
}
",0,0,0,,
1255,} else {,"if (issue != null) {
  BugzillaUtil.openIssue(issue);
}
 else {
}
",0,0,0,,
1256,} else {,"if (idx > -1) {
  String parameter=p.substring(0,idx);
  String value=p.substring(idx + 1,p.length());
  ParameterValue pv=new ParameterValue(value,value);
  List<ParameterValue> values=normalizedParams.get(parameter);
  if (values == null) {
    values=new ArrayList<>();
    normalizedParams.put(parameter,values);
  }
  values.add(pv);
}
 else {
}
",0,0,0,,
1257,} else {,"if (conf.isValid()) {
  bc=conf;
}
 else {
}
",0,0,0,,
1258,"|| LexerUtils.followsToken(context.getTokenSequence(), CssTokenId.COMMA, true, true, CssTokenId.WS) != null) {","if (context.getActiveTokenId() == CssTokenId.COMMA || LexerUtils.followsToken(context.getTokenSequence(),CssTokenId.COMMA,true,true,CssTokenId.WS) != null) {
}
 else {
  break;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
1259,} else {,"if (!alreadyTriedAlternativeBranches.contains(alternative)) {
  bestMatchElement=alternative;
  break;
}
 else {
}
",0,0,0,,
1260,} else {,"if (isFromEditor(ec)) {
  new TextComponentTask(ec){
    @Override protected RefactoringUI createRefactoringUI(    RefactoringElementContext context){
      return new CPRenameRefactoringUI(context);
    }
  }
.run();
}
 else {
}
",0,0,0,,
1261,} else {,"if (isFromEditor(ec)) {
  new TextComponentTask(ec){
    @Override protected RefactoringUI createRefactoringUI(    RefactoringElementContext context){
      return new WhereUsedUI(context);
    }
  }
.run();
}
 else {
}
",0,0,0,,
1262,} else {,"if (null != refactoring.getRefactoringSource().lookup(RefactoringElementContext.class)) {
  return new CPRenameRefactoringPlugin((RenameRefactoring)refactoring);
}
 else {
}
",0,0,0,,
1263,} else {,"if (historyFile != null) {
  DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();
  Document doc=db.parse(historyFile.getInputStream());
  Element rootElement=doc.getDocumentElement();
  if (TAG_HISTORY.equals(rootElement.getTagName())) {
    NodeList sqlNodes=rootElement.getElementsByTagName(TAG_SQL);
    for (int i=0; i < sqlNodes.getLength(); i++) {
      Element sql=(Element)sqlNodes.item(i);
      SQLHistoryEntry sqe=new SQLHistoryEntry();
      sqe.setDateXMLVariant(sql.getAttribute(ATTR_DATE));
      sqe.setUrl(sql.getAttribute(ATTR_URL));
      sqe.setSql(sql.getTextContent());
      sqlHistory.add(sqe);
    }
  }
}
 else {
}
",0,0,0,,
1264,if ((name != null) && (name.equals(DatabaseConnection.SUPPORT))) {,"if ((name != null) && (name.equals(DatabaseConnection.SUPPORT))) {
}
 else {
  schema=null;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1265,} else {,"if (connection != null && connection.getDriverName() != null && connection.getDriverName().startsWith(DatabaseModule.IDENTIFIER_ORACLE)) {
  boolean connected=connection.isConnected();
  MetadataModel metaDataModel=connection.getMetadataModel();
  if (schemaName == null) {
    LOG.log(Level.INFO,""No schema for {0}"",this);
    return;
  }
  if (connected && metaDataModel != null) {
    try {
      metaDataModel.runReadAction(new Action<Metadata>(){
        @Override public void run(        Metadata metaData){
          validObjects=new HashSet<>();
          object2type=new HashMap<>();
          String schemaEscaped=schemaName.replace(""'"",""''"");
          String query=""SELECT OBJECT_NAME, STATUS, OBJECT_TYPE"" + "" FROM SYS.ALL_OBJECTS "" + "" WHERE OWNER='"" + schemaEscaped + ""' ""+ "" AND ( OBJECT_TYPE = 'PROCEDURE' OR OBJECT_TYPE = 'TRIGGER' OR OBJECT_TYPE = 'FUNCTION' )"";
          try (Statement stmt=connection.getJDBCConnection().createStatement();ResultSet rs=stmt.executeQuery(query)){
            while (rs.next()) {
              String objectName=rs.getString(""OBJECT_NAME"");
              String status=rs.getString(""STATUS"");
              boolean valid=""VALID"".equals(status);
              if (valid) {
                validObjects.add(objectName);
              }
              String objectType=rs.getString(""OBJECT_TYPE"");
              if (""PROCEDURE"".equals(objectType)) {
                object2type.put(objectName,ProcedureNode.Type.Procedure);
              }
 else               if (""FUNCTION"".equals(objectType)) {
                object2type.put(objectName,ProcedureNode.Type.Function);
              }
 else               if (""TRIGGER"".equals(objectType)) {
                object2type.put(objectName,ProcedureNode.Type.Trigger);
              }
 else {
                assert false : ""Unknown type "" + objectType;
              }
            }
          }
 catch (          SQLException ex) {
            LOG.log(Level.INFO,""{0} while refreshStatuses() of procedures in schema {1}"",new Object[]{ex,schemaName});
          }
        }
      }
);
    }
 catch (    MetadataModelException e) {
      NodeRegistry.handleMetadataModelException(this.getClass(),connection,e,true);
    }
  }
}
 else {
}
",0,0,0,,
1266,} else {,"if (file.isDirectory() && file.exists()) {
  File files[]=file.listFiles();
  for (int i=0; i < files.length; i++) {
    deleteFile(files[i]);
  }
}
 else {
}
",0,0,0,,
1267,} else {,"if (nameStartIndex != -1) {
  completedString=parametrizedText.substring(nameStartIndex,index);
  nameStartIndex=-1;
}
 else {
}
",0,0,0,,
1268,} else {,"if (style == STYLE_TRUNCATE) {
  int length=estCharsToPaint;
  if (length <= 0) {
    return 0;
  }
  if (paint) {
    if (length > 3) {
      g.drawChars(chars,0,length,x,y);
    }
 else {
      Shape shape=g.getClip();
      if (shape != null) {
        if (s != null) {
          Area area=new Area(shape);
          area.intersect(new Area(new Rectangle(x,y,w,h)));
          g.setClip(area);
        }
 else {
          g.setClip(new Rectangle(x,y,w,h));
        }
      }
      g.drawString(""…"",x,y);
      if (shape != null) {
        g.setClip(shape);
      }
    }
  }
}
 else {
}
",0,0,0,,
1269,} else {,"if (newPositionF >= 0) {
  c.setDot(newPositionF);
}
 else {
}
",0,0,0,,
1270,if (++modCount % 5 == 0) {,"if (++modCount % 5 == 0) {
}
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1271,} else {,"if (component != null) {
}
 else {
}
",0,0,0,,
1272,} else {,"if (blkStart >= 0) {
  tokenBlocks=addTokenBlock(tokenBlocks,blkInd,blkStart,pos);
  blkInd+=2;
  blkStart=-1;
}
 else {
}
",0,0,0,,
1273,} else {,"if (newC != null) {
  String mimeType=org.netbeans.lib.editor.util.swing.DocumentUtilities.getMimeType(newC);
  prefs=MimeLookup.getLookup(mimeType).lookup(Preferences.class);
  weakListener=WeakListeners.create(PreferenceChangeListener.class,prefsListener,prefs);
  prefs.addPreferenceChangeListener(weakListener);
  prefsListener.preferenceChange(null);
}
 else {
}
",0,0,0,,
1274,"if (cmd != null && cmd.equals("" "") && (mod == ActionEvent.CTRL_MASK)) {","if (cmd != null && cmd.equals("" "") && (mod == ActionEvent.CTRL_MASK)) {
}
 else {
  Caret caret=target.getCaret();
  if (caret instanceof ExtCaret) {
    ((ExtCaret)caret).requestMatchBraceUpdateSync();
  }
  super.actionPerformed(evt,target);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1275,} else {,"if (caretFoundAtIndex != -1) {
  modIndex=caretFoundAtIndex;
  modEndIndex=Math.min(caretFoundAtIndex + 1,size);
  addOrRemove=true;
  addCaretItems=null;
}
 else {
}
",0,0,0,,
1276,} else {,"if (null != addCaretItems && addCaretItems.length == 1 && origCaretItems.size() >= 2) {
  CaretItem caretToAdd=addCaretItems[0];
  int caretFoundAtIndex=-1;
  for (int i=0; i < origCaretItems.size(); i++) {
    CaretItem origCaretItem=origCaretItems.get(i);
    if (origCaretItem.getDot() == caretToAdd.getDot() && origCaretItem.getMark() == caretToAdd.getMark()) {
      caretFoundAtIndex=i;
      break;
    }
  }
  if (caretFoundAtIndex != -1) {
    modIndex=caretFoundAtIndex;
    modEndIndex=Math.min(caretFoundAtIndex + 1,size);
    addOrRemove=true;
    addCaretItems=null;
  }
 else {
  }
}
 else {
}
",0,0,0,,
1277,} else {,"if (fullResort || true) {
  replaceSortedItems=replaceItems.copy();
  if (newSize > 1) {
    Collections.sort(replaceSortedItems);
  }
}
 else {
}
",0,0,0,,
1278,} else {,"if (rectangularSelection) {
  setRectangularSelectionToDotAndMark();
}
 else {
}
",0,0,0,,
1279,} else {,"if (childView == null) {
  if (widthChange) {
    op.notifyWidthChange();
  }
  if (heightChange) {
    op.notifyHeightChange();
  }
}
 else {
}
",0,0,0,,
1280,if (docView.getParagraphView(0).children.gapStorage == null) {,"if (docView.getParagraphView(0).children.gapStorage == null) {
}
",0,0,6,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1281,}else{,"if (resolver instanceof AttributeSet) {
  setResolveParent((AttributeSet)resolver);
}
 else {
}
",0,0,0,,
1282,} else {,"if (thread != lockThread) {
  while (lockThread != null || (waitingPriorityThread != null && waitingPriorityThread != thread)) {
    if (waitingPriorityThread == null && isPriorityThread()) {
      waitingPriorityThread=thread;
    }
    wait(WAIT_TIMEOUT);
    if (log && ++waitTimeouts > TIMEOUTS_BEFORE_LOGGING) {
      LOG.fine(""PriorityMutex: Timeout expired for thread "" + thread + ""\n  waiting for lockThread=""+ lockThread+ ""\n"");
      if (logLockStackTrace != null) {
        LOG.log(Level.INFO,""Locker thread's lock() call follows:"",logLockStackTrace);
      }
      waitTimeouts=0;
    }
  }
  lockThread=thread;
  if (log && LOG.isLoggable(Level.FINER)) {
    logLockStackTrace=new Exception();
    logLockStackTrace.fillInStackTrace();
  }
  assert (lockDepth == 0);
  if (thread == waitingPriorityThread) {
    waitingPriorityThread=null;
  }
}
 else {
}
",0,0,0,,
1283,} else {,"if (tooltipText != null && tooltipText.length() > 0 && isRequestValid()) {
  Utilities.runInEventDispatchThread(new Runnable(){
    public void run(){
      final ToolTipSupport ftts=tts;
      if (ftts != null) {
        ftts.setToolTipText(tooltipText.toString());
        if (tooltipText instanceof HyperlinkOperation.TooltipInfo) {
          JComponent tt=ftts.getToolTip();
          if (tt instanceof JEditorPane) {
            ((JEditorPane)tt).addHyperlinkListener(((HyperlinkOperation.TooltipInfo)tooltipText).getListener());
            ((JEditorPane)tt).setEditable(false);
          }
        }
      }
    }
  }
);
}
 else {
}
",0,0,0,,
1284,}else {,"if (System.getProperty(""os.name"").indexOf(""Windows"") != -1) {
}
 else {
}
",0,0,0,,
1285,} else {,"if (!executed.executed) {
  cleanup(handle,ioData,false);
synchronized (InputOutputManager.class) {
    if (ioData.getInputOutput() != descriptor.getInputOutput()) {
      InputOutputManager.addInputOutput(ioData);
    }
  }
}
 else {
}
",0,0,0,,
1286,} else {,"if (uri == null) {
  valid=false;
  msg=new Message(NbBundle.getMessage(RemoteRepository.class,""MSG_EMPTY_URI_ERROR""),true);
}
 else {
}
",0,0,0,,
1287,|| e.getKeyCode() == KeyEvent.VK_ESCAPE && !callback.quickSearchActive) {,"if (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_ESCAPE && !callback.quickSearchActive) {
}
 else {
  qs.processKeyEvent(e);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ),
QualifiedName(PrefixExpression-operand, InfixExpression-rightOperand, ),
"
1288,} else {,"if (singlePackage) {
  assert activatedFOs.length == 1;
  ClassPath cp=ClassPath.getClassPath(fileObj,ClassPath.SOURCE);
  String packageName=(cp == null) ? Bundle.DefaultPackageName() : cp.getResourceName(fileObj,'.',true);
  lblClassToTestValue.setText(packageName);
}
 else {
}
",0,0,0,,
1289,} else {,"if (element.type() == ElementType.TEXT) {
  if (ADD_TEXT_NODES) {
    XmlSTElements.OT parent=stack.getLast();
    Element text=new XmlSTElements.Text(code,element.from(),element.to());
    parent.addChild(text);
  }
}
 else {
}
",0,0,0,,
1290,"if (doc.getText(docFrom, 1).trim().length() == 0) {","if (doc.getText(docFrom,1).trim().length() == 0) {
}
 else {
  insertBuilder.append(' ');
}
",0,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1291,} else {,"if (result != null) {
  process(result,snapshot,tokenSequence,state,embeddings);
}
 else {
}
",0,0,0,,
1292,} else {,"if (jsRi != null) {
  jsCodeRef.set(jsRi.getSnapshot().getText().toString());
}
 else {
}
",0,0,0,,
1293,} else {,"if (linePrefix.trim().endsWith("":"") && lineSuffix.trim().length() == 0) {
  indent+=IndentUtils.getIndentSize(doc);
}
 else {
}
",0,0,0,,
1294,else {,"if ((LA(1) == 'E' || LA(1) == 'e')) {
{
switch (LA(1)) {
case 'e':
{
        match('e');
        break;
      }
case 'E':
{
      match('E');
      break;
    }
default :
{
    throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine());
  }
}
}
{
switch (LA(1)) {
case '+':
{
  match('+');
  break;
}
case '-':
{
match('-');
break;
}
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
break;
}
default :
{
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine());
}
}
}
mINTEGER(false);
}
 else {
}
",0,0,0,,
1295,else {,"if ((LA(1) == '.')) {
  match('.');
  mINTEGER(false);
}
 else {
}
",0,0,0,,
1296,} else {,"if (prepStartIndex == lookaheadIndex) {
  prepStartIndex++;
}
 else {
}
",0,0,0,,
1297,) {,"if (offset < activeTokenList.endOffset() || (activeTokenListIndex + 1 == tokenListCount() || offset < tokenList(activeTokenListIndex + 1).startOffset())) {
}
 else if (activeTokenListIndex + 1 < tokenListCount()) {
  activeTokenListIndex=tokenListIndex(offset,activeTokenListIndex + 1,tokenListCount);
  if (activeTokenListIndex == -1 && tokenListCount > 0) {
    activeTokenListIndex=0;
  }
  fetchActiveTokenListData();
}
",0,0,0,,
1298,} else {,"if (index < gapEnd) {
}
 else {
}
",0,0,0,,
1299,} else {,"if (a.new_state != null) {
  state=a.new_state;
}
 else {
}
",0,0,0,,
1300,if (st.cursor.row >= st.firstx && st.cursor.row < st.firstx + st.rows) {,"if (st.cursor.row >= st.firstx && st.cursor.row < st.firstx + st.rows) {
}
 else {
  st.firstx=buf.nlines() - st.rows;
  repaint(true);
}
",0,1,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1301,} else {,"if (send >= rend) {
  do_run(g,yoff,xoff,baseline,brow,l,attr,rbegin,sbegin - 1);
  do_run(g,yoff,xoff,baseline,brow,l,alt_attr,sbegin,rend);
}
 else {
}
",0,0,0,,
1302,} else {,"if (data.isFile()) {
  StoreEntry[] entries=getStoreEntriesImpl(file);
  for (  StoreEntry se : entries) {
    if (se.getTimestamp() <= ts) {
      if (entry == null || se.getTimestamp() > entry.getTimestamp()) {
        entry=se;
      }
    }
  }
}
 else {
}
",0,0,0,,
1303,} else {,"if (editorOpened()) {
  getTaskController().refreshViewData();
}
 else {
}
",0,0,0,,
1304,} else {,"if (targetFile != null) {
  LineCookie lc=targetFile.getLookup().lookup(LineCookie.class);
  Line line=lc.getLineSet().getCurrent(targetRange.getStart().getLine());
  SwingUtilities.invokeLater(() -> line.show(Line.ShowOpenType.OPEN,Line.ShowVisibilityType.FOCUS,targetRange.getStart().getCharacter()));
}
 else {
}
",0,0,0,,
1305,} else {,"if (file.equals(this.file)) {
  try {
    String uri=Utils.toURI(file);
    List<Either<SymbolInformation,DocumentSymbol>> symbols=bindings.getTextDocumentService().documentSymbol(new DocumentSymbolParams(new TextDocumentIdentifier(uri))).get();
    setKeys(symbols);
    view.expandAll();
  }
 catch (  ExecutionException ex) {
    LOG.log(Level.FINE,null,ex);
    setKeys(Collections.emptyList());
  }
catch (  InterruptedException ex) {
    LSPBindings.addBackgroundTask(file,this);
  }
}
 else {
}
",0,0,0,,
1306,} else {,"if (newFileURI2Content.containsKey(uri)) {
  FileObject temp=FileUtil.createMemoryFileSystem().getRoot().createData(""temp.txt"");
  try (OutputStream out=temp.getOutputStream()){
    out.write(newFileURI2Content.get(uri).getBytes());
  }
   List<Difference> diffs=new ArrayList<>();
  for (  TextEdit te : part.getLeft().getEdits()) {
    diffs.add(textEdit2Difference(temp,te));
  }
  ModificationResult tempResult=new ModificationResult();
  tempResult.addDifferences(temp,diffs);
  newFileURI2Content.put(uri,tempResult.getResultingSource(temp));
}
 else {
}
",0,0,0,,
1307,if (list.size() > 0 && lastRev == null && isNoRevStrip(list.get(0))) {,"if (list.size() > 0 && lastRev == null && isNoRevStrip(list.get(0))) {
}
 else {
  break;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1308,} else {,"if (!tars.contains(extensionTarget)) {
  tars.add(extensionTarget);
  changed=true;
}
 else {
}
",0,0,0,,
1309,} else {,"if (str != null) {
  if (str.remove(extensionTarget)) {
    updateProjectMetadata();
  }
}
 else {
}
",0,0,0,,
1310,} else {,"if (targetEl != null) {
  Attr depend=targetEl.getAttributeNode(""depends"");
  if (depend == null) {
    depend=doc.createAttribute(""depends"");
    depend.setValue("""");
    targetEl.setAttributeNode(depend);
  }
  String oldVal=depend.getValue();
  for (  String targ : deps.get(targetName)) {
    oldVal=oldVal + "","" + targ;
  }
  if (oldVal.startsWith("","")) {
    oldVal=oldVal.substring(1);
  }
  depend.setValue(oldVal);
}
 else {
}
",0,0,0,,
1311,} else {,"if (VALUE.equals(here) && supportsProperties(ns)) {
  if (fireOnlyIfMixed)   throw new IllegalStateException(""Unexpected characters() event! (Missing DTD?)"");
  handler.handle_value(buffer.length() == 0 ? null : buffer.toString(),attrs);
}
 else {
}
",0,0,0,,
1312,} else {,"if (cookie != dataObj.getOpenSupport()) {
  PropertyChangeListener l=weakEnvPropListeners.remove(dataObj);
  VetoableChangeListener v=weakEnvVetoListeners.remove(dataObj);
  if (l != null) {
    dataObj.removePropertyChangeListener(l);
  }
  if (v != null) {
    dataObj.removeVetoableChangeListener(v);
  }
  if (cookie != null) {
    dataObj.getCookieSet0().remove(PropertiesOpen.class,dataObj);
    dataObj.getCookieSet0().remove(cookie);
  }
  dataObj.getCookieSet0().add(dataObj.getOpenSupport());
  if (dataObj.getBundleStructure().getEntryCount() > 1) {
    dataObj.getBundleStructure().updateEntries();
    dataObj.getBundleStructure().notifyOneFileChanged(dataObj.getPrimaryFile());
  }
}
 else {
}
",0,0,0,,
1313,} else {,"if (isKey) {
  if (curValue == null || !curValue.equals(newValue))   ret=newValue;
  String[] attrs=curBean.getAttributeNames(propertyName);
  int i1=0;
  int i2=0;
  if (curIndex != -1) {
    i1=curIndex;
    i2=newIndex;
  }
  for (int j=0; j < attrs.length; j++) {
    String a=attrs[j];
    String v1=curBean.getAttributeValue(propertyName,i1,a);
    String v2=newBean.getAttributeValue(propertyName,i2,a);
    if (v1 != null) {
      if (!v1.equals(v2)) {
        ret=newValue;
        break;
      }
    }
 else     if (v2 != v1) {
      ret=newValue;
      break;
    }
  }
}
 else {
}
",0,0,0,,
1314,} else {,"if (hasSubElements) {
  geneol(""out.write(\"">\\n\"")"");
}
 else {
}
",0,0,0,,
1315,} else {,"if (indexed) {
  varName=""element"";
  jw.writeEol(a.getTypeFullClassName(packageName),"" element = null"");
  if (!a.isBean) {
    jw.beginIf(""state.getElementNumber() == 0"");
  }
  jw.beginWhile(""state.getArrayIndex() < size"" + a.name + ""()"");
  jw.writeEol(""element = "",a.getReadMethod(true),""(state.getArrayIndex())"");
  jw.beginIf(""element != null"");
  jw.writeEol(""break"");
  jw.end();
  jw.writeEol(""state.nextArrayIndex()"");
  jw.end();
  if (!a.isBean) {
    jw.endElseBegin();
    jw.writeEol(""element = "",a.getReadMethod(true),""(state.getArrayIndex())"");
    jw.writeEol(""assert element != null"");
    jw.end();
  }
}
 else {
}
",0,0,0,,
1316,} else {,"if (theXmlSchemaType != null) {
  sb.append("" type='"");
  sb.append(theXmlSchemaType);
  sb.append(""'"");
}
 else {
}
",0,0,0,,
1317,} else {,"if (schemaTypeDef instanceof SchemaRep.ContainsSubElements) {
  SchemaRep.Restriction[] restrict=lookForRestriction((SchemaRep.ContainsSubElements)schemaTypeDef);
  if (restrict != null)   for (int i=0; i < restrict.length; i++)   addExtraDataForType(uniqueName,name,schema.getSchemaTypeDef(restrict[i].getBase()));
}
 else {
}
",0,0,0,,
1318,} else {,"if (tss.hasNext()) {
  ts=tss.next();
  ts.move(offset);
}
 else {
}
",0,0,0,,
1319,"""GTK"".equals(UIManager.getLookAndFeel().getID())) {","if (System.getProperty(""java.version"").startsWith(""1.6"") && ""GTK"".equals(UIManager.getLookAndFeel().getID())) {
}
 else {
  tree.setOpaque(false);
  ((JComponent)tree.getParent()).setOpaque(false);
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
1320,{,"if ((repositoryStatus.getStatus().getRepositoryTextStatus() == null && repositoryStatus.getStatus().getRepositoryPropStatus() == null) || (repositoryStatus.getStatus().getRepositoryTextStatus() == SVNStatusKind.NONE && repositoryStatus.getStatus().getRepositoryPropStatus() == SVNStatusKind.NONE)) {
}
 else {
  Subversion.LOG.log(Level.WARNING,""SVN.FSC: unhandled repository status: {0}"" + ""\n"" + ""\ttext: ""+ ""{1}""+ ""\n""+ ""\tprop: ""+ ""{2}"",new Object[]{file.getAbsolutePath(),repositoryStatus.getStatus().getRepositoryTextStatus(),repositoryStatus.getStatus().getRepositoryPropStatus()});
}
",0,0,0,,
1321,{,"if (e.getMessage().indexOf(""is not a working copy"") > -1 && containsParent(e.getMessage(),file.getParentFile())) {
}
 else {
  throw e;
}
",0,0,0,,
1322,} else {,"if (open != null) {
  open.open();
}
 else {
}
",0,0,0,,
1323,} else {,"if (listener != null) {
  if (important)   color=typeColorMap.get(IOColors.OutputType.HYPERLINK_IMPORTANT);
 else   color=typeColorMap.get(IOColors.OutputType.HYPERLINK);
}
 else {
}
",0,0,0,,
1324,} else {,"if (IOConnect.isConnected(src)) {
  if (!currentCvc.sayYes)   throw new PropertyVetoException(""don't close"",evt);
}
 else {
}
",0,0,0,,
1325,} else {,"if (hint instanceof String) {
  set.add(hint);
  found=true;
}
 else {
}
",0,0,0,,
1326,} else {,"if (type == ',') {
  model=new Sequence((ContentModel[])models.toArray(new ContentModel[0]));
}
 else {
}
",0,0,0,,
1327,} else {,"if (pts != null) {
  parts.addAll(pts);
}
 else {
}
",0,0,0,,
1328,} else {,"if (pts != null) {
  parts.addAll(pts);
}
 else {
}
",0,0,0,,
1329,} else {,"if (portType != null && operationName != null) {
  Collection<Operation> operations=portType.getOperations();
  Reference<Operation> matchingOpRef=bindingOp.getOperation();
  Operation matchingOp=null;
  if (matchingOpRef != null) {
    matchingOp=matchingOpRef.get();
  }
  if (matchingOp == null) {
    getValidateSupport().fireToDo(Validator.ResultType.ERROR,bindingOp,NbBundle.getMessage(WSDLSemanticsVisitor.class,VAL_OPERATION_DOES_NOT_EXIST_IN_PORT_TYPE,operationName,binding.getName(),portType.getName()),NbBundle.getMessage(WSDLSemanticsVisitor.class,FIX_OPERATION_DOES_NOT_EXIST_IN_PORT_TYPE,portType.getName()));
  }
 else   if (usedOperations.contains(matchingOp)) {
    getValidateSupport().fireToDo(Validator.ResultType.ERROR,bindingOp,NbBundle.getMessage(WSDLSemanticsVisitor.class,""VAL_BINDINGOP_IMPLEMENTS_SAME_OPERATION_IN_PORT_TYPE"",operationName,binding.getName(),portType.getName()),NbBundle.getMessage(WSDLSemanticsVisitor.class,""FIX_BINDINGOP_IMPLEMENTS_SAME_OPERATION_IN_PORT_TYPE"",portType.getName()));
  }
 else {
    BindingInput bindingInput=bindingOp.getBindingInput();
    boolean bindingOpHasInput=bindingInput != null;
    Input portTypeInput=matchingOp.getInput();
    boolean portTypeOpHasInput=portTypeInput != null;
    BindingOutput bindingOutput=bindingOp.getBindingOutput();
    boolean bindingOpHasOutput=bindingOutput != null;
    Output portTypeOutput=matchingOp.getOutput();
    boolean portTypeOpHasOutput=portTypeOutput != null;
    Collection<BindingFault> bindingFaults=bindingOp.getBindingFaults();
    Collection<Fault> matchingFaults=matchingOp.getFaults();
    if (bindingOpHasInput != portTypeOpHasInput) {
      getValidateSupport().fireToDo(Validator.ResultType.ERROR,bindingOp,NbBundle.getMessage(WSDLSemanticsVisitor.class,VAL_OPERATION_DOES_NOT_MATCH_INPUT_IN_PORT_TYPE,operationName,bindingName,portTypeName),NbBundle.getMessage(WSDLSemanticsVisitor.class,FIX_OPERATION_DOES_NOT_MATCH_INPUT_IN_PORT_TYPE,operationName));
    }
 else {
      if (bindingOpHasInput) {
        if (!inputNamesMatch(bindingInput,portTypeInput,operationName)) {
          getValidateSupport().fireToDo(Validator.ResultType.WARNING,bindingInput,NbBundle.getMessage(WSDLSemanticsVisitor.class,VAL_OPERATION_DOES_NOT_MATCH_INPUT_NAME_IN_PORT_TYPE,operationName,bindingName,portTypeName),NbBundle.getMessage(WSDLSemanticsVisitor.class,FIX_OPERATION_DOES_NOT_MATCH_INPUT_NAME_IN_PORT_TYPE,operationName));
        }
      }
    }
    if (bindingOpHasOutput != portTypeOpHasOutput) {
      getValidateSupport().fireToDo(Validator.ResultType.ERROR,bindingOp,NbBundle.getMessage(WSDLSemanticsVisitor.class,VAL_OPERATION_DOES_NOT_MATCH_OUTPUT_IN_PORT_TYPE,operationName,bindingName,portTypeName),NbBundle.getMessage(WSDLSemanticsVisitor.class,FIX_OPERATION_DOES_NOT_MATCH_OUTPUT_IN_PORT_TYPE,operationName));
    }
 else {
      if (bindingOpHasOutput) {
        if (!outputNamesMatch(bindingOutput,portTypeOutput,operationName)) {
          getValidateSupport().fireToDo(Validator.ResultType.WARNING,bindingOutput,NbBundle.getMessage(WSDLSemanticsVisitor.class,VAL_OPERATION_DOES_NOT_MATCH_OUTPUT_NAME_IN_PORT_TYPE,operationName,bindingName,portTypeName),NbBundle.getMessage(WSDLSemanticsVisitor.class,FIX_OPERATION_DOES_NOT_MATCH_OUTPUT_NAME_IN_PORT_TYPE,operationName));
        }
      }
    }
    if (!faultsMatch(bindingFaults,matchingFaults)) {
      getValidateSupport().fireToDo(Validator.ResultType.ERROR,bindingOp,NbBundle.getMessage(WSDLSemanticsVisitor.class,VAL_OPERATION_DOES_NOT_MATCH_FAULTS_IN_PORT_TYPE,operationName,bindingName,portTypeName),NbBundle.getMessage(WSDLSemanticsVisitor.class,FIX_OPERATION_DOES_NOT_MATCH_FAULTS_IN_PORT_TYPE,operationName));
    }
  }
}
 else {
}
",0,0,0,,
1330,} else {,"if (prefix != null) {
  getParent().addPrefix(prefix,namespace);
}
 else {
}
",0,0,0,,
1331,} else {,"if (existingPrefix != null) {
  if (!namespace.equals(parentNS)) {
    new NamespaceRefactorVisitor(this).refactor(newNode,namespace,existingPrefix,parentAndAncestors);
  }
}
 else {
}
",0,0,0,,
1332,} else {,"if (existingPrefix != null) {
  newChild.removeAttributeNode(attr);
}
 else {
}
",0,0,0,,
1333,) {,"if (attrClazzName.equals(""org.apache.tools.ant.types.Path"") || attrClazzName.equals(""java.io.File"")) {
}
 else if (attrClazzName.equals(""java.lang.String"") && Arrays.asList(PROPERTY_NAME_VALUED_PROPERTY_NAMES).contains(attrName)) {
  choices.addAll(Arrays.asList(likelyPropertyNames(ctx)));
}
",0,0,0,,
1334,} else {,"if (additionalSourceRoots.size() > 0) {
  for (  String addSrcRoot : additionalSourceRoots) {
    if (!sourceRoots.contains(addSrcRoot)) {
      sourceRoots.add(addSrcRoot);
    }
  }
}
 else {
}
",0,0,0,,
1335,} else {,"if (res instanceof StringReference) {
  String reason=((StringReference)res).value();
  InputOutput io=t.getDebugger().getConsoleIO().getIO();
  if (io != null) {
    io.getErr().println(NbBundle.getMessage(VisualDebuggerListener.class,""MSG_NoTrackingOfComponentChanges"",reason));
  }
}
 else {
}
",0,0,0,,
1336,} else {,"if (breakpoint.getHitCountFilter() <= 0) {
  customHitCount=0;
}
 else {
}
",0,0,0,,
1337,} else {,"if (isJDI) {
  if (type.endsWith(""InternalException"")) {
    return false;
  }
}
 else {
}
",0,0,0,,
1338,} else {,"if (serFile != null) {
  FileLock lock=null;
  ObjectOutputStream oos=null;
  try {
    lock=serFile.lock();
    oos=new OOS(serFile.getOutputStream(lock));
    if (comp instanceof RADVisualContainer) {
    }
    oos.writeObject(comp.getBeanInstance());
  }
  finally {
    if (oos != null)     oos.close();
    if (lock != null)     lock.releaseLock();
  }
}
 else {
}
",0,0,0,,
1339,} else {,"if (serializeTo != null) {
  try {
    FileObject fo=formEditor.getFormDataObject().getPrimaryFile();
    FileObject serFile=fo.getParent().getFileObject(serializeTo,""ser"");
    if (serFile == null) {
      serFile=fo.getParent().createData(serializeTo,""ser"");
    }
    if (serFile != null) {
      FileLock lock=null;
      ObjectOutputStream oos=null;
      try {
        lock=serFile.lock();
        oos=new OOS(serFile.getOutputStream(lock));
        if (comp instanceof RADVisualContainer) {
        }
        oos.writeObject(comp.getBeanInstance());
      }
  finally {
        if (oos != null)         oos.close();
        if (lock != null)         lock.releaseLock();
      }
    }
 else {
    }
  }
 catch (  java.io.NotSerializableException e) {
    e.printStackTrace();
  }
catch (  java.io.IOException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}
 else {
}
",0,0,0,,
1340,} else {,"if (metacont.getLayoutSupport() == null) {
  LayoutModel layoutModel=formModel.getLayoutModel();
  Object layoutUndoMark=null;
  UndoableEdit layoutEdit=null;
  boolean autoUndo=true;
  try {
    RADComponent newComp=creator.createComponent(paletteItem,metacont,null);
    boolean success=(newComp instanceof RADVisualContainer);
    if (!success) {
      String msg=NbBundle.getMessage(EncloseAction.class,""MSG_EncloseInNotEmpty"");
      DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message(msg));
    }
 else {
      final RADVisualContainer newCont=(RADVisualContainer)newComp;
      layoutUndoMark=layoutModel.getChangeMark();
      layoutEdit=layoutModel.getUndoableEdit();
      layoutModel.removeComponent(newCont.getId(),false);
      String[] compIds=new String[components.size()];
      int i=0;
      for (      RADComponent metacomp : components) {
        compIds[i++]=metacomp.getId();
      }
      for (      RADComponent metacomp : components) {
        formModel.removeComponent(metacomp,false);
      }
      success=creator.addComponents(components,newCont);
      if (success) {
        final FormDesigner formDesigner=FormEditor.getFormDesigner(formModel);
        formDesigner.getLayoutDesigner().encloseInContainer(compIds,newCont.getId());
        EventQueue.invokeLater(new Runnable(){
          @Override public void run(){
            formDesigner.setSelectedComponent(newCont);
          }
        }
);
      }
 else {
        String msg=NbBundle.getMessage(EncloseAction.class,""MSG_EncloseInFailed"");
        DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message(msg));
      }
    }
    autoUndo=!success;
  }
  finally {
    if (layoutUndoMark != null && !layoutUndoMark.equals(layoutModel.getChangeMark())) {
      formModel.addUndoableEdit(layoutEdit);
    }
    if (autoUndo) {
      formModel.forceUndoOfCompoundEdit();
    }
  }
}
 else {
}
",0,0,0,,
1341,else {,"if (isSelected()) {
  dragLabel=new DragLabel();
  dragLabel.setHotSpot(evt.getPoint());
  dragLabel.resolveOrigin();
  dragLabel.setLastIndex(dragLabel.getIndex(evt.getPoint()));
  dragLabel.setOriginalIndex(dragLabel.getIndex(evt.getPoint()));
  designLayeredPane.setLayer(dragLabel,JLayeredPane.DRAG_LAYER.intValue());
  designLayeredPane.add(dragLabel,BorderLayout.CENTER);
  dragLabel.setBounds(evt.getPoint().x,evt.getPoint().y);
  componentLabel.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
}
 else {
}
",0,0,0,,
1342,} else {,"if (value instanceof String) {
  string=toAscii((String)value);
  if ((validProp.getSkip() == 0) && string.equals(toAscii(hardString))) {
    found=true;
  }
}
 else {
}
",0,0,0,,
1343,} else {,"if (type == null) {
  genericType=type;
}
 else {
}
",0,0,0,,
1344,} else {,"if (dO instanceof PUDataObject) {
  puObject=(PUDataObject)dO;
  dO.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (DataObject.PROP_VALID.equals(evt.getPropertyName()) && Boolean.FALSE.equals(evt.getNewValue())) {
        if (SwingUtilities.isEventDispatchThread()) {
          close();
        }
 else {
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              close();
            }
          }
);
        }
      }
    }
  }
);
  Persistence persistence=puObject.getPersistence();
  if (persistence == null) {
    logger.warning(""corrupted persistence.xml in enclosing project."");
  }
 else   if (persistence.getPersistenceUnit().length > 0) {
    for (    PersistenceUnit unit : persistence.getPersistenceUnit()) {
      String configName=unit.getName();
      puConfigMap.put(configName,unit);
    }
    puComboBox.setModel(new DefaultComboBoxModel(puConfigMap.keySet().toArray()));
    puComboBox.setSelectedIndex(0);
  }
}
 else {
}
",0,0,0,,
1345,} else {,"if (dbconn != null) {
  if (dbconn.getJDBCConnection() == null) {
    Mutex.EVENT.readAccess(new Mutex.Action<DatabaseConnection>(){
      @Override public DatabaseConnection run(){
        ConnectionManager.getDefault().showConnectionDialog(dbconn);
        return dbconn;
      }
    }
);
  }
}
 else {
}
",0,0,0,,
1346,} else {,"if (createDropScriptCheckbox.isVisible() && createDropScriptCheckbox.isSelected()) {
}
 else {
}
",0,0,0,,
1347,} else {,"if (createPUCheckbox.isVisible() && createPUCheckbox.isSelected()) {
}
 else {
}
",0,0,0,,
1348,} else {,"if (!UpdateType.UPDATE.equals(updateType)) {
  pkClassVariables.add(createVariable(m));
}
 else {
}
",0,0,0,,
1349,} else {,"if (exTm.toString().equals(newType)) {
  return;
}
 else {
}
",0,0,0,,
1350,} else {,"if (!original.libraryWithinProject) {
  File file=original.libraryFile;
  if (file == null) {
    return;
  }
  String relativized=PropertyUtils.relativizeFile(FileUtil.toFile(project.getProjectDirectory()),file);
  if (relativized != null) {
    helper.getAntProjectHelper().setLibrariesLocation(relativized);
  }
 else {
    helper.getAntProjectHelper().setLibrariesLocation(file.getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1351,} else {,"if (original.libraryWithinProject) {
  if (original.absolutesRelPath != null) {
    helper.getAntProjectHelper().setLibrariesLocation(PropertyUtils.resolveFile(FileUtil.toFile(project.getProjectDirectory()),original.absolutesRelPath).getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
1352,} else {,"if (name.equals(info.getTreeUtilities().decodeIdentifier(ts.token().text()).toString())) {
  ret[0]=ts.token();
}
 else {
}
",0,0,0,,
1353,} else {,"if (t.id() == JavaTokenId.IDENTIFIER && tree.getName().toString().equals(info.getTreeUtilities().decodeIdentifier(t.text()).toString())) {
  tree2Tokens.put(tree,Collections.singletonList(ts.token()));
}
 else {
}
",0,0,0,,
1354,} else {,"if (a == 1) {
}
 else {
}
",0,0,0,,
1355,} else {,"if (a == 2) {
}
 else {
}
",0,0,0,,
1356,} else {,"if (b == 0) {
  method(a,b);
}
 else {
}
",0,0,0,,
1357,} else {,"if (opts.length() > 2) {
  parseOptions(opts.substring(2,opts.length() - 1),to);
}
 else {
}
",0,0,0,,
1358,} else {,"if (files != null) {
  for (  File f : files) {
    deleteFile(f);
  }
}
 else {
}
",0,0,0,,
1359,if (i.a[0]) {},"if (i.a[0]) {
}
",0,0,3,,"QualifiedName(ArrayAccess-array, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
1360,} else {,"if (breakpoint instanceof LineBreakpoint) {
  ((LineBreakpoint)breakpoint).setPrintText(logMessage);
}
 else {
}
",0,0,0,,
1361,} else {,"if (root != null) {
  try {
    projectCandidates.add(Utils.fromUri(root));
  }
 catch (  MalformedURLException ex) {
    LOG.log(Level.FINE,null,ex);
  }
}
 else {
}
",0,0,0,,
1362,} else {,"if (cpEntries != null || cpEntries.length > 0) {
  JButtonOperator addJarButtonOper=new JButtonOperator(jtpo,""Add JAR/Folder"");
  for (int i=0; i < cpEntries.length; i++) {
    addJarButtonOper.push();
    JFileChooserOperator jfco=new JFileChooserOperator();
    jfco.setSelectedFile(new java.io.File(cpEntries[i]));
    JButtonOperator confirmButton=new JButtonOperator(jfco,""Add JAR/Folder"");
    confirmButton.push();
  }
}
 else {
}
",0,0,0,,
1363,} else {,"if (generated instanceof FileObjects.FileBase) {
  createdFiles.add(((FileObjects.FileBase)generated).getFile());
}
 else {
}
",0,0,0,,
1364,} else {,"if (fqn.endsWith("".*"")) {
  fqn=fqn.substring(0,fqn.length() - 2);
  List<TypeElement> classes=Collections.<TypeElement>emptyList();
  Element clazz=overlay.resolve(model,elements,fqn);
  if (clazz != null) {
    classes=ElementFilter.typesIn(clazz.getEnclosedElements());
  }
  for (  TypeElement te : classes) {
    imported.add(te);
    simpleNames2Elements.put(te.getSimpleName().toString(),te);
  }
}
 else {
}
",0,0,0,,
1365,} else {,"if (resolved != null) {
  boolean added=false;
  for (  Element e : resolved.getEnclosedElements()) {
    if (!e.getModifiers().contains(Modifier.STATIC)) {
      continue;
    }
    if (isStarred || memberName.contains(e.getSimpleName().toString())) {
      imported.add(e);
      simpleNames2Elements.put(e.getSimpleName().toString(),e);
    }
  }
}
 else {
}
",0,0,0,,
1366,} else {,"if (dot != (-1)) {
  String className=fqn.substring(0,dot);
  String memberName=fqn.substring(dot + 1);
  boolean isStarred=""*"".equals(memberName);
  Element resolved=overlay.resolve(model,elements,className);
  if (resolved != null) {
    boolean added=false;
    for (    Element e : resolved.getEnclosedElements()) {
      if (!e.getModifiers().contains(Modifier.STATIC)) {
        continue;
      }
      if (isStarred || memberName.contains(e.getSimpleName().toString())) {
        imported.add(e);
        simpleNames2Elements.put(e.getSimpleName().toString(),e);
      }
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
1367,else {,"if (oldT.extending != null) insertHint=endPos(oldT.extending);
 else {
}
",0,0,0,,
1368,(model.getPos(oldStats.get(0)) < 0 || model.getPos(newStats.get(0)) < 0))) {,"if (newStats.size() != oldStats.size() || (oldStats.size() > 0 && newStats.size() > 0 && oldStats.get(0) != newStats.get(0) && (model.getPos(oldStats.get(0)) < 0 || model.getPos(newStats.get(0)) < 0))) {
}
 else copyPosTo(tree,n);
",0,0,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1369,} else {,"if (JDK8Home != null) {
  jdkHome=new File(JDK8Home);
}
 else {
}
",0,0,0,,
1370,} else {,"if (generated instanceof FileObjects.FileBase) {
  previous.createdFiles.add(((FileObjects.FileBase)generated).getFile());
}
 else {
}
",0,0,0,,
1371,} else {,"if (generated instanceof FileObjects.FileBase) {
  createdFiles.add(((FileObjects.FileBase)generated).getFile());
}
 else {
}
",0,0,0,,
1372,} else {,"if (generated instanceof FileObjects.FileBase) {
  createdFiles.add(((FileObjects.FileBase)generated).getFile());
}
 else {
}
",0,0,0,,
1373,} else {,"if (ex == null || (ex.asType().getKind() == TypeKind.DECLARED && types.isAssignable(ex.asType(),throwable))) {
switch (currentElement.getKind()) {
case CONSTRUCTOR:
case METHOD:
    if (ex == null || !(types.isAssignable(ex.asType(),error) || types.isAssignable(ex.asType(),runtime))) {
      ExecutableElement ee=(ExecutableElement)currentElement;
      String fqn;
      if (ex != null) {
        fqn=((TypeElement)ex).getQualifiedName().toString();
      }
 else {
        ExpressionTree referenceClass=javac.getTreeUtilities().getReferenceClass(new DocTreePath(currentDocPath,exName));
        if (referenceClass == null)         break;
        fqn=referenceClass.toString();
      }
      checkThrowsDeclared(tree,ex,fqn,ee.getThrownTypes(),dtph,start,end,errors);
    }
  break;
default :
}
}
 else {
}
",0,0,0,,
1374,else if ( (t == HTML.Tag.B || t == HTML.Tag.SPAN)) {,"if ((t == HTML.Tag.B || t == HTML.Tag.SPAN)) {
}
 else {
  where=IN_BALAST;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
1375,} else {,"if (lastImageFolder != null) {
  chooser.setSelectedFile(lastImageFolder);
}
 else {
}
",0,0,0,,
1376,} else {,"if (e.getSource() == packageSelect) {
  checkErrors();
}
 else {
}
",0,0,0,,
1377,} else {,"if (editor == BUILT_IN_EDITOR) {
  try {
  }
 catch (  RuntimeException ex) {
    errormsg(""jshell.err.cant.launch.editor"",ex);
    fluffmsg(""jshell.msg.try.set.editor"");
    return false;
  }
}
 else {
}
",0,0,0,,
1378,} else {,"if (state == STATE_OUTPUT_STD) {
}
 else {
}
",0,0,0,,
1379,} else {,"if (beanName == null) {
  NewJavaFileNameLocationStepOperator nfnlso=new NewJavaFileNameLocationStepOperator();
  nfnlso.txtObjectName().clearText();
  nfnlso.txtObjectName().typeText(fileName);
  nfnlso.setPackage(packageName);
  nfnlso.finish();
}
 else {
}
",0,0,0,,
1380,} else {,"if (CREATE_GOLDENFILES) {
  File f;
  f=getDataDir().getParentFile();
  ArrayList names=new ArrayList();
  names.add(""goldenfiles"");
  names.add(""data"");
  names.add(""qa-functional"");
  while (!f.getName().equals(""test"")) {
    if (!f.getName().equals(""sys"") && !f.getName().equals(""work"") && !f.getName().equals(""tests"")) {
      names.add(f.getName());
    }
    f=f.getParentFile();
  }
  for (int i=names.size() - 1; i > -1; i--) {
    f=new File(f,(String)(names.get(i)));
  }
  f=new File(f,getClass().getName().replace('.',File.separatorChar));
  f=new File(f,getName() + "".pass"");
  if (!f.getParentFile().exists()) {
    f.getParentFile().mkdirs();
  }
  try {
    goldenWriter=new PrintWriter(new BufferedWriter(new FileWriter(f)));
    System.out.println(""Class name"" + Utilities.TEST_CLASS_NAME + ""Test.java"");
    EditorOperator op=new EditorOperator(Utilities.TEST_CLASS_NAME + ""Test.java"");
    goldenWriter.print(filter.filter(op.getText()));
    goldenWriter.println();
    goldenWriter.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  log(""Passive mode: generate golden file into "" + f.getAbsolutePath());
}
 else {
}
",0,0,0,,
1381,{,"if (pathSeparator > 0) {
  value=basedir + expression.substring(pathSeparator);
}
 else {
}
",0,0,0,,
1382,} else {,"if (cmp instanceof JTextField) {
  JTextField fld=(JTextField)cmp;
  fld.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      checkCentral();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkCentral();
    }
    @Override public void changedUpdate(    DocumentEvent e){
      checkCentral();
    }
  }
);
}
 else {
}
",0,0,0,,
1383,} else {,"if (el != null) {
  String type=el.getAttributeValue(""type"");
  if (type != null) {
    schemaParent=findTypeContent(type,schemaDoc.getRootElement());
    if (schemaParent == null) {
      System.err.println(""no schema parent for "" + str + "" of type ""+ el.getAttributeValue(""type""));
    }
  }
 else {
    schemaParent=findNonTypedContent(el);
  }
}
 else {
}
",0,0,0,,
1384,} else {,"if (el != null) {
  String type=el.getAttributeValue(""type"");
  if (type != null) {
    schemaParent=findTypeContent(type,schemaDoc.getRootElement());
    if (schemaParent == null) {
      System.err.println(""no schema parent for "" + str + "" of type=""+ el.getAttributeValue(""type""));
    }
  }
 else {
    schemaParent=findNonTypedContent(el);
  }
}
 else {
}
",0,0,0,,
1385,} else {,"if (desc != null) {
  ModelDescription d=desc.get(1);
  File f=d.getLocation();
  if (f != null) {
    FileObject fobj=FileUtil.toFileObject(f);
    if (fobj != null) {
      NodeUtils.openPomFile(fobj);
    }
  }
}
 else {
}
",0,0,0,,
1386,} else {,"if (nbprj != null) {
  Object exRes=PluginPropertyUtils.createEvaluator(nbprj).evaluate(tup.value);
  if (exRes != null) {
    return new String[]{prop,(String)exRes};
  }
}
 else {
}
",0,0,0,,
1387,} else {,"if (fieldName != null) {
  Query q;
  if (ArtifactInfo.NAMES.equals(fieldName)) {
    try {
      String clsname=one.replace(""."",""/"");
      q=constructQuery(MAVEN.CLASSNAMES,clsname.toLowerCase(Locale.ENGLISH));
    }
 catch (    IllegalArgumentException iae) {
      String clsname=QueryParser.escape(one.replace(""."",""/""));
      try {
        q=constructQuery(MAVEN.CLASSNAMES,clsname.toLowerCase(Locale.ENGLISH));
      }
 catch (      IllegalArgumentException iae2) {
        continue;
      }
    }
  }
 else   if (ArtifactInfo.ARTIFACT_ID.equals(fieldName)) {
    String aid=one.replaceAll(""-"",""?"").replaceAll(""\\."",""?"");
    try {
      q=constructQuery(MAVEN.ARTIFACT_ID,aid);
    }
 catch (    IllegalArgumentException iae) {
      try {
        q=constructQuery(MAVEN.ARTIFACT_ID,QueryParser.escape(aid));
      }
 catch (      IllegalArgumentException iae2) {
        continue;
      }
    }
  }
 else   if (ArtifactInfo.GROUP_ID.equals(fieldName)) {
    String gid=one.replaceAll(""-"",""?"").replaceAll(""\\."",""?"");
    try {
      q=constructQuery(MAVEN.GROUP_ID,gid);
    }
 catch (    IllegalArgumentException iae) {
      try {
        q=constructQuery(MAVEN.GROUP_ID,QueryParser.escape(gid));
      }
 catch (      IllegalArgumentException iae2) {
        continue;
      }
    }
  }
 else {
    if (field.getMatch() == QueryField.MATCH_EXACT) {
      q=new TermQuery(new Term(fieldName,one));
    }
 else {
      q=new PrefixQuery(new Term(fieldName,one));
    }
  }
  bq.add(new BooleanClause(setBooleanRewrite(q),occur));
}
 else {
}
",0,0,0,,
1388,} else {,"if (fParentFo != null) {
  FileSystem fs=parentFo.getFileSystem();
  fs.runAtomicAction(new FileSystem.AtomicAction(){
    public @Override void run() throws IOException {
      String text;
      try {
        text=doc.getText(0,doc.getLength());
      }
 catch (      BadLocationException x) {
        throw new IOException(x);
      }
      FileObject fo=fParentFo.getFileObject(file.getName());
      if (fo == null) {
        fo=fParentFo.createData(file.getName());
      }
      OutputStream os=fo.getOutputStream();
      try {
        os.write(text.getBytes(""UTF-8""));
      }
  finally {
        os.close();
      }
    }
  }
);
}
 else {
}
",0,0,0,,
1389,} else {,"if (model != null) {
  try {
    model.sync();
    if (Model.State.VALID != model.getState()) {
      StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(Utilities.class,""ERR_SETTINGS"",NbBundle.getMessage(Utilities.class,""ERR_INVALID_MODEL"")),StatusDisplayer.IMPORTANCE_ERROR_HIGHLIGHT).clear(10000);
      return;
    }
    if (!model.startTransaction()) {
      logger.log(Level.WARNING,""Could not start transaction on {0}"",settingsFileObject);
      return;
    }
    for (    ModelOperation<SettingsModel> op : operations) {
      op.performOperation(model);
    }
    model.endTransaction();
    Utilities.saveChanges(model);
  }
 catch (  IOException ex) {
    StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(Utilities.class,""ERR_SETTINGS"",ex.getLocalizedMessage()),StatusDisplayer.IMPORTANCE_ERROR_HIGHLIGHT).clear(10000);
    Logger.getLogger(Utilities.class.getName()).log(Level.INFO,""Cannot write settings.xml"",ex);
  }
catch (  IllegalStateException ex) {
    StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(Utilities.class,""ERR_SETTINGS"",ex.getLocalizedMessage()),StatusDisplayer.IMPORTANCE_ERROR_HIGHLIGHT).clear(10000);
    Logger.getLogger(Utilities.class.getName()).log(Level.INFO,""Cannot write settings.xml"",ex);
  }
 finally {
    if (model.isIntransaction()) {
      model.rollbackTransaction();
    }
  }
}
 else {
}
",0,0,0,,
1390,} else {,"if (MIRROR_LAYOUT != null) {
  setChildElementText(MIRROR_LAYOUT.getName(),layout,MIRROR_LAYOUT.getQName());
}
 else {
}
",0,0,0,,
1391,} else {,"if (MIRROR_OF_LAYOUTS != null) {
  setChildElementText(MIRROR_OF_LAYOUTS.getName(),mirrorOf,MIRROR_OF_LAYOUTS.getQName());
}
 else {
}
",0,0,0,,
1392,} else {,"if (iter.hasNext()) {
  final DependencyNode root=iter.next();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      NodeVisitor vis=new NodeVisitor(Arrays.asList(new String[]{Artifact.SCOPE_COMPILE,Artifact.SCOPE_PROVIDED,Artifact.SCOPE_RUNTIME,Artifact.SCOPE_TEST}));
      root.accept(vis);
      vis.getListOfDependencies();
      explorerManager.setRootContext(new AbstractNode(createListChildren(vis.getListOfDependencies(),getLookup())));
      treeExplorerManager.setRootContext(new AbstractNode(createTreeChildren(root,getLookup())));
      ((BeanTreeView)tvTree).expandAll();
    }
  }
);
}
 else {
}
",0,0,0,,
1393,} else {,"if (uris.length > 0) {
  List<URI> virtuals=new ArrayList<URI>();
  List<SourceGroup> existing=new ArrayList<SourceGroup>();
  for (  URI u : uris) {
    FileObject fo=FileUtilities.convertURItoFileObject(u);
    if (fo == null) {
      virtuals.add(u);
    }
 else     if (fo.isFolder()) {
      existing.add(GenericSources.group(proj,fo,""resources"",SG_Project_Resources(),null,null));
    }
  }
  if (create && existing.isEmpty()) {
    File root=Utilities.toFile(virtuals.get(0));
    try {
      FileObject fo=FileUtil.createFolder(root);
      existing.add(GenericSources.group(proj,fo,""resources"",SG_Project_Resources(),null,null));
    }
 catch (    IOException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  return existing.toArray(new SourceGroup[0]);
}
 else {
}
",0,0,0,,
1394,} else {,"if (f != null) {
  lst.add(Utilities.toURI(f));
}
 else {
}
",0,0,0,,
1395,} else {,"if (f != null) {
  lst.add(Utilities.toURI(f));
}
 else {
}
",0,0,0,,
1396,} else {,"if (params.get(JavaRunner.PROP_EXECUTE_FILE) != null || params.get(JavaRunner.PROP_CLASSNAME) != null) {
  final String action2Quick=action2Quick(actionName);
  boolean supported=JavaRunner.isSupported(action2Quick,params);
  if (supported) {
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          ScanDialog.runWhenScanFinished(new Runnable(){
            @Override public void run(){
              if (SwingUtilities.isEventDispatchThread()) {
                CosChecker.RP.post(this);
                return;
              }
              try {
                collectStartupArgs(config,params);
                ExecutorTask tsk=JavaRunner.execute(action2Quick,params);
                CosChecker.warnCoSInOutput(tsk,config);
              }
 catch (              IOException ex) {
                Exceptions.printStackTrace(ex);
              }
catch (              UnsupportedOperationException ex) {
                Exceptions.printStackTrace(ex);
              }
 finally {
                if (RunUtils.hasApplicationCompileOnSaveEnabled(config)) {
                  CosChecker.touchCoSTimeStamp(config,false);
                }
              }
            }
          }
,config.getTaskDisplayName());
        }
      }
);
    }
 catch (    InterruptedException ex) {
      Exceptions.printStackTrace(ex);
    }
catch (    InvocationTargetException ex) {
      Exceptions.printStackTrace(ex);
    }
    return false;
  }
}
 else {
}
",0,0,0,,
1397,"if (Boolean.TRUE.equals(allTypes.put(parent, Boolean.FALSE))) {","if (Boolean.TRUE.equals(allTypes.put(parent,Boolean.FALSE))) {
}
 else {
  skipParents(parent);
}
",0,1,6,,"QualifiedName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
1398,if (oldO instanceof Node[]) {,"if (oldO instanceof Node[]) {
}
",0,0,3,,"SimpleName(InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, InstanceofExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
1399,} else {,"if (fo != null) {
  try {
    Project prj=ProjectManager.getDefault().findProject(fo);
    if (prj == null) {
      ProjectManager.getDefault().clearNonProjectCache();
      prj=ProjectManager.getDefault().findProject(fo);
    }
    if (prj != null && prj.getLookup().lookup(NbMavenProjectImpl.class) != null) {
      Wrapper wr=new Wrapper();
      wr.proj=(NbMavenProjectImpl)prj;
      MavenProject mp=wr.proj.getOriginalMavenProject();
      wr.isAggregator=NbMavenProject.TYPE_POM.equals(mp.getPackaging()) && !mp.getModules().isEmpty();
      wr.provider=prj.getLookup().lookup(LogicalViewProvider.class);
      assert wr.provider != null;
      modules.add(wr);
    }
  }
 catch (  IllegalArgumentException ex) {
    ex.printStackTrace();
  }
catch (  IOException ex) {
    ex.printStackTrace();
  }
}
 else {
}
",0,0,0,,
1400,} else {,"if (missingNonSibling) {
  toRet.add(ProjectProblem.createWarning(ERR_NonLocal(),MSG_NonLocal(mess),createSanityBuildAction()));
}
 else {
}
",0,0,0,,
1401,} else {,"if (groupId != null && !groupId.equals("""")) {
  groupId=groupId.replace(""/"",""."");
  if (groupId.endsWith(""."")) {
    groupId=groupId.substring(0,groupId.length() - 1);
  }
  if (ClassPath.SOURCE.equals(type)) {
    return ClassPathFactory.createClassPath(createSourceCPI(sourceFile));
  }
  if (ClassPath.BOOT.equals(type)) {
    return JavaPlatform.getDefault().getBootstrapLibraries();
  }
  if (ClassPath.COMPILE.equals(type)) {
    MavenProject mp=getMavenProject(archive,pom,groupId,artifact,version);
    return ClassPathFactory.createClassPath(createCompileCPI(mp,bin));
  }
  if (ClassPath.EXECUTE.equals(type)) {
    MavenProject mp=getMavenProject(archive,pom,groupId,artifact,version);
    return ClassPathFactory.createClassPath(createExecuteCPI(mp,bin));
  }
}
 else {
}
",0,0,0,,
1402,} else {,"if (true) {
}
 else {
}
",0,0,0,,
1403,} else {,"if (gce != null) {
  gcs.add(gce);
}
 else {
}
",0,0,0,,
1404,} else {,"if (o != null) {
  o.openIAT(metadata);
}
 else {
}
",0,0,0,,
1405,"if (!""PASS"".equals(status)) {","if (!""PASS"".equals(status)) {
}
",0,0,3,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1406,else {,"if (childNodeName == ""binding"") {
  Binding aBinding=newBinding();
  aBinding.readNode(childNode,namespacePrefixes);
  _Binding.add(aBinding);
}
 else {
}
",0,0,0,,
1407,else {,"if (childNodeName == ""catalog"") {
  _Catalog=newCatalog();
  _Catalog.readNode(childNode,namespacePrefixes);
}
 else {
}
",0,0,0,,
1408,else {,"if (childNodeName == ""schema-source"") {
  SchemaSource aSchemaSource=newSchemaSource();
  aSchemaSource.readNode(childNode,namespacePrefixes);
  _SchemaSource.add(aSchemaSource);
}
 else {
}
",0,0,0,,
1409,else {,"if (childNodeName == ""schema"") {
  Schema aSchema=newSchema();
  aSchema.readNode(childNode,namespacePrefixes);
  _Schema.add(aSchema);
}
 else {
}
",0,0,0,,
1410,else {,"if (childNodeName == ""xjc-option"") {
  XjcOption aXjcOption=newXjcOption();
  aXjcOption.readNode(childNode,namespacePrefixes);
  _XjcOption.add(aXjcOption);
}
 else {
}
",0,0,0,,
1411,} else {,"if (schFl.startsWith(""."") || schFl.startsWith("".."")) {
}
 else {
}
",0,0,0,,
1412,} else {,"if (lastImageFolder != null) {
  chooser.setSelectedFile(lastImageFolder);
}
 else {
}
",0,0,0,,
1413,} else {,"if (lastImageFolder != null) {
  chooser.setSelectedFile(lastImageFolder);
}
 else {
}
",0,0,0,,
1414,} else {,"if (lastImageFolder != null) {
  chooser.setSelectedFile(lastImageFolder);
}
 else {
}
",0,0,0,,
1415,} else {,"if (lastHtmlFolder != null) {
  chooser.setSelectedFile(lastHtmlFolder);
}
 else {
}
",0,0,0,,
1416,"if (cnb.equals(files.get(path) + ""@"")) {","if (cnb.equals(files.get(path) + ""@"")) {
}
 else if ((cnb + ""@"").equals(files.get(path))) {
  files.put(path,cnb);
}
 else {
  files.put(path,null);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
1417,} else {,"if (amoduleInfo != null) {
  if (!amoduleInfo.getUnapproved().isEmpty()) {
    pseudoTests.put("" module "" + moduleName + "" has ""+ amoduleInfo.getUnapproved().size()+ "" unapproved license(s)"",""Unapproved license in "" + amoduleInfo.getUnapproved().size() + "" file(s) ""+ writeFiles(amoduleInfo.getUnapproved(),repository));
  }
  if (!amoduleInfo.getInvalidExternal().isEmpty()) {
    pseudoTests.put("" module "" + moduleName + "" has ""+ amoduleInfo.getInvalidExternal().size()+ "" suspicious external binaries  file(s)"",""List of file "" + amoduleInfo.getInvalidExternal().size() + "" file(s) ""+ writeFiles(amoduleInfo.getInvalidExternal(),null));
  }
}
 else {
}
",0,0,0,,
1418,} else {,"if (!exists) {
  String message=clazz + "" cannot access "" + clazz2;
  if (failOnError) {
    throw new BuildException(message,getLocation());
  }
 else   if (maxWarn.getAndDecrement() > 0) {
    log(""Warning: "" + message,Project.MSG_WARN);
  }
 else {
    log(""(additional warnings not reported)"",Project.MSG_WARN);
    return;
  }
}
 else {
}
",0,0,0,,
1419,} else {,"if (!ignored) {
  violations.add(path);
}
 else {
}
",0,0,0,,
1420,} else {,"if (x instanceof SecurityException) {
  throw (SecurityException)x;
}
 else {
}
",0,0,0,,
1421,"if (-1 == sText.indexOf(""required"")) {","if (-1 == sText.indexOf(""required"")) {
}
",0,0,4,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1422,} else {,"if (searchAndReplace) {
  lclz(lblReplacement,""BasicSearchForm.lblReplacement.text"");
  lclz(chkPreserveCase,""BasicSearchForm.chkPreserveCase.text"");
}
 else {
}
",0,0,0,,
1423,{,"if (PARENT_RESOURCE_TABLE.equals(name) == true) {
}
 else if (properties.containsKey(name) == false) {
  firePropertyChange(name,event);
}
",0,0,0,,
1424,} else {,"if (bottom) {
  rectangle.height=size.height;
}
 else {
}
",0,0,0,,
1425,} else {,"if (right) {
  rectangle.width=size.width;
}
 else {
}
",0,0,0,,
1426,} else {,"if (direction.equals(Direction.HORIZONTAL)) {
}
 else {
}
",0,0,0,,
1427,} else {,"if (findModuleMatchesDependencyRequires(dep,modules).isEmpty()) {
  res.add(dep);
}
 else {
}
",0,0,0,,
1428,} else {,"if (impl instanceof ModuleItem) {
  ModuleItem updateModule=(ModuleItem)impl;
  String category=(String)updateModule.getModuleInfo().getLocalizedAttribute(""OpenIDE-Module-Display-Category"");
  if (LIBRARIES_CATEGORY.equals(category) || BRIDGES_CATEGORY.equals(category) || FEATURES_CATEGORY.equals(category)) {
    continue;
  }
  if (category == null || category.length() == 0) {
    String dn=(String)updateModule.getModuleInfo().getLocalizedAttribute(""OpenIDE-Module-Display-Category"");
    if (dn == null || dn.length() == 0) {
      category=UNSORTED_CATEGORY;
    }
 else {
      category=dn;
    }
  }
  if (!categoryToModules.containsKey(category)) {
    categoryToModules.put(category,new HashSet<ModuleInfo>());
  }
  categoryToModules.get(category).add(updateModule.getModuleInfo());
}
 else {
}
",0,0,0,,
1429,if( null != getResizingColumn () && null == col ) {,"if (null != getResizingColumn() && null == col) {
}
",0,0,4,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1430,} else {,"if (i % 2 == 0) {
  io.getOut().println(""Hello there.  What a short line"");
  io.getOut().println(""Splead 2 - 148: Wow, we will write a long line of text here.  Very long in fact - who knows just how long it might end up being?  Well, we'll have to see.  Why it's extraordinarily long!  It might even wrap several times!  How do you like them apples, eh?  Maybe we should just go on and on and on, and never stop.  That would be cool, huh?\n"");
}
 else {
}
",0,0,0,,
1431,} else {,"if (""description"".equals(here)) {
  if (fireOnlyIfMixed)   throw new IllegalStateException(""Unexpected characters() event! (Missing DTD?)"");
  handler.handle_description(buffer.length() == 0 ? null : buffer.toString(),attrs);
}
 else {
}
",0,0,0,,
1432,"} else if (isOption (args[i], ""noinfo"")) {","if (isOption(args[i],""noinfo"")) {
}
 else if (isOption(args[i],""nologging"")) {
  noLogging=true;
}
 else if (isOption(args[i],""userdir"")) {
  args[i]=null;
  try {
    String v=args[++i];
    if (!v.equals(""memory"")) {
      v=FileUtil.normalizeFile(new File(v)).getPath();
    }
    userDir=v;
    System.setProperty(""netbeans.user"",v);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(getString(""ERR_UserDirExpected""));
    return 2;
  }
}
 else if (isOption(args[i],""cachedir"")) {
  args[i]=null;
  try {
    cacheDir=FileUtil.normalizeFile(new File(args[++i]));
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(getString(""ERR_UserDirExpected""));
    return 2;
  }
}
 else if (isOption(args[i],""ui"") || isOption(args[i],""laf"")) {
  args[i]=null;
  try {
    String ui=args[++i];
    if (""Metal"".equals(ui)) {
      ui=""javax.swing.plaf.metal.MetalLookAndFeel"";
    }
 else     if (""GTK"".equals(ui)) {
      ui=""com.sun.java.swing.plaf.gtk.GTKLookAndFeel"";
    }
 else     if (""Nimbus"".equals(ui)) {
      ui=""com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"";
    }
 else     if (""Windows"".equals(ui)) {
      ui=""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"";
    }
 else     if (""Aqua"".equals(ui)) {
      ui=""com.apple.laf.AquaLookAndFeel"";
    }
    uiClass=Class.forName(ui);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(getString(""ERR_UIExpected""));
    return 2;
  }
catch (  ClassNotFoundException e2) {
    System.err.println(getString(""ERR_UINotFound""));
  }
}
 else if (isOption(args[i],""fontsize"")) {
  args[i]=null;
  try {
    uiFontSize=Integer.parseInt(args[++i]);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(getString(""ERR_FontSizeExpected""));
    return 2;
  }
catch (  NumberFormatException e2) {
    System.err.println(getString(""ERR_BadFontSize""));
    return 1;
  }
}
 else if (isOption(args[i],""locale"")) {
  args[i]=null;
  try {
    String localeParam=args[++i];
    String language;
    String country="""";
    String variant="""";
    int index1=localeParam.indexOf("":"");
    if (index1 == -1)     language=localeParam;
 else {
      language=localeParam.substring(0,index1);
      int index2=localeParam.indexOf("":"",index1 + 1);
      if (index2 != -1) {
        country=localeParam.substring(index1 + 1,index2);
        variant=localeParam.substring(index2 + 1);
      }
 else       country=localeParam.substring(index1 + 1);
    }
    Locale.setDefault(new Locale(language,country,variant));
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(getString(""ERR_LocaleExpected""));
    return 2;
  }
}
 else if (isOption(args[i],""branding"")) {
  args[i]=null;
  if (++i == args.length) {
    System.err.println(getString(""ERR_BrandingNeedsArgument""));
    return 2;
  }
  String branding=args[i];
  if (branding.equals(""-""))   branding=null;
  try {
    NbBundle.setBranding(branding);
  }
 catch (  IllegalArgumentException iae) {
    iae.printStackTrace();
    return 1;
  }
}
 else {
  used=false;
}
",0,0,4,,"SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
1433,} else {,"if (status != null) {
  status.dirty=true;
}
 else {
}
",0,0,0,,
1434,} else {,"if (descriptor.getDefaultValue() != null) {
  if (descriptor.getDefaultValue() instanceof JButton) {
    JButton b=(JButton)descriptor.getDefaultValue();
    if (b.isVisible() && b.isEnabled() && b.isDefaultCapable()&& !Boolean.FALSE.equals(b.getClientProperty(""defaultButton""))) {
      getRootPane().setDefaultButton(b);
      return;
    }
  }
 else {
    JButton b=null;
    Collection<Component> currentActive=new HashSet<Component>();
    if (currentPrimaryButtons != null) {
      currentActive.addAll(Arrays.asList(currentPrimaryButtons));
    }
    if (currentSecondaryButtons != null) {
      currentActive.addAll(Arrays.asList(currentSecondaryButtons));
    }
    Arrays.asList(currentPrimaryButtons);
    if (descriptor.getDefaultValue().equals(NotifyDescriptor.OK_OPTION) && currentActive.contains(stdOKButton)) {
      b=stdOKButton;
    }
 else     if (descriptor.getDefaultValue().equals(NotifyDescriptor.YES_OPTION) && currentActive.contains(stdYesButton)) {
      b=stdYesButton;
    }
 else     if (descriptor.getDefaultValue().equals(NotifyDescriptor.NO_OPTION)) {
      b=stdNoButton;
    }
 else     if (descriptor.getDefaultValue().equals(NotifyDescriptor.CANCEL_OPTION)) {
      b=stdCancelButton;
    }
 else     if (descriptor.getDefaultValue().equals(NotifyDescriptor.CLOSED_OPTION)) {
      b=stdClosedButton;
    }
    if (b != null && b.isVisible() && b.isEnabled()) {
      getRootPane().setDefaultButton(b);
      return;
    }
  }
}
 else {
}
",0,0,0,,
1435,} else {,"if (d != dialogViewer) {
  currentModalDialogs.push(d);
  showDialogStack();
  if ((frameViewer == null || !frameViewer.isVisible() || frameViewer.getState() == Frame.ICONIFIED) && (dialogViewer == null || !dialogViewer.isVisible())) {
    Installer.log.fine(""1. No viewer open. Dialog opened. Push it on stack. rTFL = false."");
    reparentToFrameLater=false;
  }
 else   if (frameViewer != null && frameViewer.isVisible()) {
    Installer.log.fine(""5. Frame viewer open. Dialog opened. Push it. Close frame viewer. Create dialog viewer. rTFL = true."");
    displayHelpInDialog(null);
    reparentToFrameLater=true;
  }
 else   if (dialogViewer != null && dialogViewer.isVisible()) {
    Installer.log.fine(""6. Dialog viewer open. Dialog opened. Push it. Reparent dialog viewer."");
    displayHelpInDialog(null);
  }
 else {
    Installer.log.warning(""logic error"");
  }
}
 else {
}
",0,0,0,,
1436,} else {,"if (isRelevantDialog(d) || d == dialogViewer) {
  if (d instanceof JDialog) {
    if (""true"".equals(((JDialog)d).getRootPane().getClientProperty(""javahelp.ignore.modality""))) {
      return;
    }
  }
  if (Installer.log.isLoggable(Level.FINE)) {
    Installer.log.fine(""modal (or viewer) dialog event: "" + ev + "" [""+ d.getTitle()+ ""]"");
  }
  if (type == WindowEvent.WINDOW_CLOSED) {
    if (d == dialogViewer) {
    }
 else     if (d == currentModalDialog()) {
      if (!currentModalDialogs.isEmpty()) {
        currentModalDialogs.pop();
        currentModalDialogsReady=true;
      }
 else {
        Installer.log.log(Level.WARNING,null,new IllegalStateException(""Please see IZ #24993""));
      }
      showDialogStack();
      if ((frameViewer == null || !frameViewer.isVisible() || frameViewer.getState() == Frame.ICONIFIED) && (dialogViewer == null || !dialogViewer.isVisible())) {
        if (!reparentToFrameLater) {
          Installer.log.fine(""2. No viewer open, !rTFL. Top dialog closed. Pop it."");
        }
 else         if (currentModalDialog() == null) {
          Installer.log.fine(""3. No viewer open, rTFL. Only top dialog closed. Pop it. Create frame viewer."");
          if (frameViewer != null) {
            frameViewer.dispose();
            frameViewer=null;
          }
          displayHelpInFrame(null);
        }
 else {
          Installer.log.fine(""4. No viewer open, rTFL. Some top dialog closed. Pop it. Create dialog viewer."");
          displayHelpInDialog(null);
        }
      }
 else       if (dialogViewer != null && dialogViewer.isVisible()) {
        Installer.log.warning(""dialogViewer should not still be open"");
      }
 else {
        Installer.log.warning(""frameViewer visible when a dialog was closing"");
      }
    }
 else {
      Installer.log.fine(""some random modal dialog closed: "" + d.getName() + "" [""+ d.getTitle()+ ""]"");
    }
  }
 else {
    if (d != dialogViewer) {
      currentModalDialogs.push(d);
      showDialogStack();
      if ((frameViewer == null || !frameViewer.isVisible() || frameViewer.getState() == Frame.ICONIFIED) && (dialogViewer == null || !dialogViewer.isVisible())) {
        Installer.log.fine(""1. No viewer open. Dialog opened. Push it on stack. rTFL = false."");
        reparentToFrameLater=false;
      }
 else       if (frameViewer != null && frameViewer.isVisible()) {
        Installer.log.fine(""5. Frame viewer open. Dialog opened. Push it. Close frame viewer. Create dialog viewer. rTFL = true."");
        displayHelpInDialog(null);
        reparentToFrameLater=true;
      }
 else       if (dialogViewer != null && dialogViewer.isVisible()) {
        Installer.log.fine(""6. Dialog viewer open. Dialog opened. Push it. Reparent dialog viewer."");
        displayHelpInDialog(null);
      }
 else {
        Installer.log.warning(""logic error"");
      }
    }
 else {
    }
  }
}
 else {
}
",0,0,0,,
1437,} else {,"if (w instanceof Dialog) {
  Dialog d=(Dialog)w;
  if (isRelevantDialog(d) || d == dialogViewer) {
    if (d instanceof JDialog) {
      if (""true"".equals(((JDialog)d).getRootPane().getClientProperty(""javahelp.ignore.modality""))) {
        return;
      }
    }
    if (Installer.log.isLoggable(Level.FINE)) {
      Installer.log.fine(""modal (or viewer) dialog event: "" + ev + "" [""+ d.getTitle()+ ""]"");
    }
    if (type == WindowEvent.WINDOW_CLOSED) {
      if (d == dialogViewer) {
      }
 else       if (d == currentModalDialog()) {
        if (!currentModalDialogs.isEmpty()) {
          currentModalDialogs.pop();
          currentModalDialogsReady=true;
        }
 else {
          Installer.log.log(Level.WARNING,null,new IllegalStateException(""Please see IZ #24993""));
        }
        showDialogStack();
        if ((frameViewer == null || !frameViewer.isVisible() || frameViewer.getState() == Frame.ICONIFIED) && (dialogViewer == null || !dialogViewer.isVisible())) {
          if (!reparentToFrameLater) {
            Installer.log.fine(""2. No viewer open, !rTFL. Top dialog closed. Pop it."");
          }
 else           if (currentModalDialog() == null) {
            Installer.log.fine(""3. No viewer open, rTFL. Only top dialog closed. Pop it. Create frame viewer."");
            if (frameViewer != null) {
              frameViewer.dispose();
              frameViewer=null;
            }
            displayHelpInFrame(null);
          }
 else {
            Installer.log.fine(""4. No viewer open, rTFL. Some top dialog closed. Pop it. Create dialog viewer."");
            displayHelpInDialog(null);
          }
        }
 else         if (dialogViewer != null && dialogViewer.isVisible()) {
          Installer.log.warning(""dialogViewer should not still be open"");
        }
 else {
          Installer.log.warning(""frameViewer visible when a dialog was closing"");
        }
      }
 else {
        Installer.log.fine(""some random modal dialog closed: "" + d.getName() + "" [""+ d.getTitle()+ ""]"");
      }
    }
 else {
      if (d != dialogViewer) {
        currentModalDialogs.push(d);
        showDialogStack();
        if ((frameViewer == null || !frameViewer.isVisible() || frameViewer.getState() == Frame.ICONIFIED) && (dialogViewer == null || !dialogViewer.isVisible())) {
          Installer.log.fine(""1. No viewer open. Dialog opened. Push it on stack. rTFL = false."");
          reparentToFrameLater=false;
        }
 else         if (frameViewer != null && frameViewer.isVisible()) {
          Installer.log.fine(""5. Frame viewer open. Dialog opened. Push it. Close frame viewer. Create dialog viewer. rTFL = true."");
          displayHelpInDialog(null);
          reparentToFrameLater=true;
        }
 else         if (dialogViewer != null && dialogViewer.isVisible()) {
          Installer.log.fine(""6. Dialog viewer open. Dialog opened. Push it. Reparent dialog viewer."");
          displayHelpInDialog(null);
        }
 else {
          Installer.log.warning(""logic error"");
        }
      }
 else {
      }
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
1438,} else {,"if (providing != null) {
  providing.remove(m);
  if (providing.isEmpty()) {
    providersOf.remove(token);
  }
}
 else {
}
",0,0,0,,
1439,} else {,"if (!""localhost"".equals(localhost)) {
  nonProxy=nonProxy + ""|"" + localhost;
}
 else {
}
",0,0,0,,
1440,}else{,"if (delim_index > 0) {
  type=propertyValue_L.substring(0,delim_index + 2);
  path=propertyValue_L.substring(delim_index + 1).trim();
  if (type.equalsIgnoreCase(NO_PICTURE)) {
  }
 else   if (type.equalsIgnoreCase(URL)) {
    customizer.setName(path);
  }
 else   if (type.equalsIgnoreCase(FILE)) {
    customizer.setName(path);
  }
 else   if (type.equalsIgnoreCase(CLASSPATH)) {
    new EventTool().waitNoEvent(6000);
  }
 else {
    throw new JemmyException(""ERROR: value is (\"""" + propertyValue_L + ""\"") - wrong format or unknown source type!!! type=[""+ type+ ""]/path=[""+ path+ ""]"");
  }
}
 else {
}
",0,0,0,,
1441,} else {,"if (alarms[alarms.length - 1] >= indices[0]) {
  boolean changed=false;
  for (int i=0; i < alarms.length; i++) {
    for (int j=0; j < indices.length; j++) {
      if (alarms[i] == indices[j]) {
        alarms[i]=-1;
        changed=true;
      }
    }
  }
  for (int i=0; i < alarms.length; i++) {
    int alarm=alarms[i];
    for (int j=0; j < indices.length; j++) {
      if (alarm > indices[j]) {
        alarms[i]--;
        changed=true;
      }
    }
  }
  if (changed) {
    alarmTabs.clear();
    boolean addedSome=false;
    for (int i=0; i < alarms.length; i++) {
      if (alarms[i] >= 0) {
        addAlarmTab(alarms[i]);
        addedSome=true;
      }
    }
    if (!addedSome) {
      stopAlarmTimer();
    }
  }
}
 else {
}
",0,0,0,,
1442,} else {,"if (i instanceof Icon) {
  button.setIcon((Icon)i);
  button.setDisabledIcon(ImageUtilities.createDisabledIcon((Icon)i));
}
 else {
}
",0,0,0,,
1443,} else {,"if (style == STYLE_TRUNCATE) {
  int length=estCharsToPaint;
  if (length <= 0) {
    return 0;
  }
  if (paint) {
    if (length > 3) {
      g.drawChars(chars,0,length,x,y);
    }
 else {
      Shape shape=g.getClip();
      if (shape != null) {
        if (s != null) {
          Area area=new Area(shape);
          area.intersect(new Area(new Rectangle(x,y,w,h)));
          g.setClip(area);
        }
 else {
          g.setClip(new Rectangle(x,y,w,h));
        }
      }
      g.drawString(""…"",x,y);
      if (shape != null) {
        g.setClip(shape);
      }
    }
  }
}
 else {
}
",0,0,0,,
1444,} else {,"if ((i2 < i1) || (i2 > text.length())) {
  return;
}
 else {
}
",0,0,0,,
1445,} else {,"if (((newValue != null) && !newValue.equals(oldValue)) || ((newValue == null) && (oldValue != null || selBeans > 1))) {
  mdl.setValue(newValue);
  result=Boolean.TRUE;
}
 else {
}
",0,0,0,,
1446,} else {,"if (evt.getSource() == hScrollBar.getModel()) {
  int value=hScrollBar.getModel().getValue();
  outline.setTreePositionX(value);
}
 else {
}
",0,0,0,,
1447,} else {,"if (path1 != null) {
  assertTrue(""path of "" + uri1 + "" ends with /"",path1.endsWith(""/""));
  String path2=path1 + f2.getNameExt();
  assertNull(""No query for "" + uri1,uri1.getQuery());
  assertNull(""No fragment for "" + uri1,uri1.getFragment());
  URI uri2=new URI(uri1.getScheme(),uri1.getUserInfo(),uri1.getHost(),uri1.getPort(),path2,null,null);
  Repository.getDefault().addFileSystem(fs);
  FileObject[] fos;
  try {
    fos=URLMapper.findFileObjects(uri2.toURL());
  }
  finally {
    Repository.getDefault().removeFileSystem(fs);
  }
  assertTrue(""computed child URI "" + uri2 + "" is correct as is in: ""+ Arrays.asList(fos),Arrays.asList(fos).contains(f2));
}
 else {
}
",0,0,0,,
1448,else {,"if (n.equals(listener)) {
  it.remove();
  continue;
}
 else {
}
",0,0,0,,
1449,} else {,"if (obj != null) {
  obj.recognizedByFolder();
  FileObject primary=obj.getPrimaryFile();
  boolean doNotRemovePrimaryFile=false;
  if (!file.containsKey(primary)) {
    boolean goIn=primaryFiles == null;
    if (!goIn) {
      Reference<DataObject> r=primaryFiles.get(primary);
      goIn=r == null;
      if (!goIn) {
        DataObject obj2=r.get();
        goIn=obj2 == null || obj2 != obj;
        if (goIn) {
          doNotRemovePrimaryFile=true;
        }
      }
    }
    if (goIn) {
      add.add(obj);
    }
    all.add(obj);
    if (filter == null) {
      res.add(obj);
    }
 else {
      filter.process(obj,res);
    }
  }
  if (!doNotRemovePrimaryFile) {
    remove.remove(primary);
  }
  file.put(primary,new SoftReference<DataObject>(obj));
}
 else {
}
",0,0,0,,
1450,} else {,"if ((r != null) && java.util.Arrays.equals((Node[])r.get(),ns)) {
  b=(Boolean)getProperty(PROP_LAST_ENABLED);
  if (((Boolean)getProperty(PROP_HAS_LISTENERS)).booleanValue()) {
    putProperty(PROP_ENABLED,b);
  }
}
 else {
}
",0,0,0,,
1451,) {,"if (ex.getTargetException() instanceof javax.swing.undo.CannotUndoException || ex.getTargetException() instanceof javax.swing.undo.CannotRedoException) {
}
 else {
  throw ex;
}
",0,0,0,,
1452,) {,"if (ex.getTargetException() instanceof javax.swing.undo.CannotRedoException) {
}
 else {
  throw ex;
}
",0,0,0,,
1453,"if (node.assignItem(this, item)) {","if (node.assignItem(this,item)) {
}
 else {
  return false;
}
",0,0,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
1454,} else {,"if (b != null) {
  m.put(key,new TimedSoftReference<ResourceBundle>(b,m,key));
}
 else {
}
",0,0,0,,
1455,} else {,"if (dl != null) {
  return dl;
}
 else {
}
",0,0,0,,
1456,} else {,"if (r != null) {
  ClassLoader dl=r.get();
  if (dl != null) {
    return dl;
  }
 else {
  }
}
 else {
}
",0,0,0,,
1457,if (scheduled != null && !scheduled.isNew() && scheduled.getTask() == this) {,"if (scheduled != null && !scheduled.isNew() && scheduled.getTask() == this) {
}
 else {
  notifyFinished();
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1458,} else {,"if (smallPanel) {
  if (chart.fitsWidth()) {
    VMTelemetryDataManager manager=models.getDataManager();
    long[] timestamps=manager.timeStamps;
    if (timestamps[manager.getItemCount() - 1] - timestamps[0] >= SMALL_CHART_FIT_TO_WINDOW_PERIOD)     chart.setFitsWidth(false);
  }
}
 else {
}
",0,0,0,,
1459,} else {,"if (smallPanel) {
  if (chart.fitsWidth()) {
    VMTelemetryDataManager manager=models.getDataManager();
    long[] timestamps=manager.timeStamps;
    if (timestamps[manager.getItemCount() - 1] - timestamps[0] >= SMALL_CHART_FIT_TO_WINDOW_PERIOD)     chart.setFitsWidth(false);
  }
}
 else {
}
",0,0,0,,
1460,} else {,"if (smallPanel) {
  if (chart.fitsWidth()) {
    VMTelemetryDataManager manager=models.getDataManager();
    long[] timestamps=manager.timeStamps;
    if (timestamps[manager.getItemCount() - 1] - timestamps[0] >= SMALL_CHART_FIT_TO_WINDOW_PERIOD)     chart.setFitsWidth(false);
  }
}
 else {
}
",0,0,0,,
1461,} else {,"if (smallPanel) {
  if (chart.fitsWidth()) {
    VMTelemetryDataManager manager=models.getDataManager();
    long[] timestamps=manager.timeStamps;
    if (timestamps[manager.getItemCount() - 1] - timestamps[0] >= SMALL_CHART_FIT_TO_WINDOW_PERIOD)     chart.setFitsWidth(false);
  }
}
 else {
}
",0,0,0,,
1462,} else {,"if (columnS != null) {
  try {
    int column=Integer.parseInt(columnS);
    SortOrder order=getSortOrder(orderS);
    setSortColumn(column,order);
  }
 catch (  NumberFormatException e) {
  }
}
 else {
}
",0,0,0,,
1463,} else {,"if (entry != null) {
  entry.addReference(instanceId);
}
 else {
}
",0,0,0,,
1464,} else {,"if (entry != null) {
  entry.addReference(instanceId);
}
 else {
}
",0,0,0,,
1465,} else {,"if (!locals.parent.isRoot()) {
  locals.parent.addNetTime0(locals.node.getNetTime0());
  locals.parent.addSleepTime0(locals.node.getSleepTime0());
  locals.parent.addWaitTime0(locals.node.getWaitTime0());
  locals.parent.addNCallsDiff(locals.node.getNCalls());
  if (collectingTwoTimeStamps) {
    locals.parent.addNetTime1(locals.node.getNetTime1());
  }
}
 else {
}
",0,0,0,,
1466,"if (!Iterables.isEmpty(Iterables.filter(Throwables.getCausalChain(e), AccessDeniedException.class))) {","if (!Iterables.isEmpty(Iterables.filter(Throwables.getCausalChain(e),AccessDeniedException.class))) {
}
 else {
  throw e;
}
",0,1,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1467,} else {,"if (!FilterSortSupport.passesFilter(filter,filterType,root.getNodeName())) {
}
 else {
}
",0,0,0,,
1468,} else {,"if (!FilterSortSupport.passesFilter(filter,filterType,root.getNodeName())) {
}
 else {
}
",0,0,0,,
1469,} else {,"if (threadsMonitoringEnabled) {
  if (monitoredData.getThreadsDataMode() == CommonConstants.MODE_THREADS_EXACT) {
    int[] exThreadIds=monitoredData.getExplicitThreadIds();
    long[] exTimestamps=monitoredData.getExplicitStateTimestamps();
    byte[] exStates=monitoredData.getExplicitThreadStates();
    if (exTimestamps.length == 0) {
      return;
    }
    if (startTime == 0) {
      startTime=exTimestamps[0];
    }
    for (int i=0; i < exThreadIds.length; i++) {
      Integer intIndex=(Integer)idToIndex.get(Integer.valueOf(exThreadIds[i]));
      int index=intIndex.intValue();
      ThreadData tData=threadData[index];
      tData.add(exTimestamps[i],exStates[i]);
    }
    endTime=exTimestamps[exTimestamps.length - 1];
    fireDataChanged();
  }
 else   if (monitoredData.getThreadsDataMode() == CommonConstants.MODE_THREADS_SAMPLING) {
    int[] threadIds=monitoredData.getThreadIds();
    long[] timestamps=monitoredData.getStateTimestamps();
    byte[][] states=monitoredData.getThreadStates();
    int nThreads=monitoredData.getNThreads();
    int nStates=monitoredData.getNThreadStates();
    if (nStates == 0 || nThreads == 0) {
      return;
    }
    if (startTime == 0) {
      startTime=monitoredData.getStateTimestamps()[0];
    }
    for (int threadIdx=0; threadIdx < nThreads; threadIdx++) {
      Integer intIndex=(Integer)idToIndex.get(Integer.valueOf(threadIds[threadIdx]));
      int index=intIndex.intValue();
      byte[] threadStates=states[threadIdx];
      ThreadData tData=threadData[index];
      for (int stampIdx=0; stampIdx < nStates; stampIdx++) {
        long timeStamp=timestamps[stampIdx];
        byte state=threadStates[stampIdx];
        byte lastState=tData.getLastState();
        if ((lastState == ThreadData.NO_STATE) || (lastState != state)) {
          tData.add(timeStamp,state);
        }
      }
    }
    endTime=timestamps[nStates - 1];
    fireDataChanged();
  }
}
 else {
}
",0,0,0,,
1470,} else {,"if (launcher != null) {
  launcher.launch(rerun);
  rerun=true;
}
 else {
}
",0,0,0,,
1471,} else {,"if (data != null) {
  processTimeEvent();
  long currentMaxHeap=dataManager.maxHeapSize;
  currentHeapSize=data.getTotalMemory();
  long currentUsedHeap=currentHeapSize - data.getFreeMemory();
  currentHeapUsage=(long)Math.round(((double)currentUsedHeap / (double)currentMaxHeap) * 100);
  currentSurvGen=data.getNSurvivingGenerations();
  currentLoadedClasses=data.getLoadedClassesCount();
  currentCpuTime=dataManager.processCPUTimeInPromile[dataManager.getItemCount() - 1] / 10;
  currentGcTime=data.getRelativeGCTimeInPerMil() / 10;
  currentThreads=data.getNThreads();
  processTriggeredProfilingPoints();
}
 else {
}
",0,0,0,,
1472,} else {,"if (factory != null) {
  if (ppClass.isInstance(profilingPoint) && (inclUnavailable || factory.isAvailable())) {
    Lookup.Provider ppProject=profilingPoint.getProject();
    if (matchesScope(ppProject,project,projects) || containsProject(projectsLoc,ppProject))     filteredProfilingPoints.add((T)profilingPoint);
  }
}
 else {
}
",0,0,0,,
1473,} else {,"if (itemDescriptors[i] instanceof ValueItemDescriptor) {
  ValueItemDescriptor d=(ValueItemDescriptor)itemDescriptors[i];
  itemsArr[i]=new TimelineXYItem(d.getName(),d.getMinValue(),d.getMaxValue(),itemsCount + i){
    public long getYValue(    int valueIndex){
      return values[getIndex()][valueIndex];
    }
  }
;
}
 else {
}
",0,0,0,,
1474,} else {,"if (line.contains(""---------"")) {
  result.add(current);
  current=new Target();
}
 else {
}
",0,0,0,,
1475,} else {,"if (jsRi != null) {
  jsCodeRef.set(jsRi.getSnapshot().getText().toString());
}
 else {
}
",0,0,0,,
1476,} else {,"if (jsRi != null) {
  jsCodeRef.set(jsRi.getSnapshot().getText().toString());
}
 else {
}
",0,0,0,,
1477,if (tagPath.isEmpty() && qName.equals(Tag.entry.name())) {,"if (tagPath.isEmpty() && qName.equals(Tag.entry.name())) {
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1478,if (c == '-' || c == '.' || Character.isDigit(c) || Character.toLowerCase(c) == 'e') {,"if (c == '-' || c == '.' || Character.isDigit(c) || Character.toLowerCase(c) == 'e') {
}
 else {
  return s.substring(0,i);
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1479,"if (""application"".equals(path) || path.length() == 0 || ""resources"".equals(path)) {","if (""application"".equals(path) || path.length() == 0 || ""resources"".equals(path)) {
}
 else if (path.startsWith(""resource["")) {
  int i=getIndex(path);
  if (i > -1) {
    List<Resource> resources=getCurrentResources(app,current);
    if (i < resources.size()) {
      current=resources.get(i);
      continue;
    }
  }
  return null;
}
 else if (path.startsWith(""method["")) {
  int iTarget=getIndex(path);
  if (iTarget > -1) {
    int i=0;
    for (    Object o : current.getMethodOrResource()) {
      if (o instanceof Method) {
        if (i == iTarget) {
          if (pathIndex == (paths.length - 1)) {
            return (Method)o;
          }
 else {
            return null;
          }
        }
        if (i < iTarget) {
          i++;
        }
 else {
          return null;
        }
      }
    }
  }
  return null;
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1480,} else {,"if (!random.isEmpty()) {
  boolean found=matches(folder,random);
  if (!found) {
    if (folder.getParent() != null && matches(folder.getParent(),random)) {
      checkingIndexURLWarning.set(""The given folder is unlikely to match the index content, parent folder does."");
    }
 else {
      StringBuilder matchingChildren=new StringBuilder();
      for (      FileObject c : folder.getChildren()) {
        if (matches(c,random)) {
          if (matchingChildren.length() > 0)           matchingChildren.append("", "");
          matchingChildren.append(c.getName());
        }
      }
      if (matchingChildren.length() > 0) {
        checkingIndexURLWarning.set(""The given folder is unlikely to match the index content, subfolders: "" + matchingChildren.toString() + "" do."");
      }
 else {
        checkingIndexURLWarning.set(""The given folder is unlikely to match the index content."");
      }
    }
  }
}
 else {
}
",0,0,0,,
1481,} else {,"if (name.equals(ts.token().text().toString())) {
  tree2Token.put(tp.getLeaf(),ts.token());
}
 else {
}
",0,0,0,,
1482,} else {,"if (t.id() == JavaTokenId.IDENTIFIER && tree.getName().toString().equals(t.text().toString())) {
  tree2Token.put(tree,ts.token());
}
 else {
}
",0,0,0,,
1483,{,"if (art.getId().contains(groupIdPrefix + "".modules:org-netbeans-modules-maven-embedder"")) {
}
 else {
  getLog().info(ex.getModule() + "" added by "" + art.getId()+ """"+ classpathFile);
  wrappedBundleCNBs.add(ex.getModule());
}
",0,0,0,,
1484,{,"if (dest != null && fl.exists()) {
  FileUtils.copyFile(fl,dest);
}
 else {
}
",0,0,0,,
1485,{,"if (res.isOSGiBundle()) {
}
",0,0,0,,
1486,{,"if (!ks.exists()) {
  throw new MojoFailureException(""Cannot find keystore file at "" + ks.getAbsolutePath());
}
 else {
}
",0,0,0,,
1487,{,"if (specialManifest != null && specialManifest.exists()) {
  examinator.setManifestFile(specialManifest);
  examinator.checkFile();
}
 else {
}
",0,0,0,,
1488,) {,"if (cl.startsWith(""java."") || cl.startsWith(""javax."") || cl.startsWith(""org.omg."")|| cl.startsWith(""org.w3c."")|| cl.startsWith(""org.xml."")|| cl.startsWith(""groovy.lang."")|| cl.startsWith(""groovy.util."")|| cl.startsWith(""org.codehaus."")|| cl.startsWith(""com.springsource."")|| cl.startsWith(""org.springframework."")|| cl.startsWith(""org.apache."")|| cl.startsWith(""sun."")|| cl.startsWith(""com.sun."")|| cl.startsWith(""org.junit."")|| cl.startsWith(""junit.framework."")) {
}
 else {
  traceIndex=i;
  break;
}
",0,0,0,,
1489,} else {,"if (subNode.getNodeName().toLowerCase().equals(""img"")) {
  NamedNodeMap subAttrs=subNode.getAttributes();
  Node alt=subAttrs.getNamedItem(""alt"");
  if (alt != null) {
    String altTxt=alt.getTextContent();
    if (altTxt != null && altTxt.trim().length() > 0) {
      if (linkText.length() > 0)       linkText.append(' ');
      linkText.append(altTxt);
    }
  }
}
 else {
}
",0,0,0,,
1490,} else {,"if (f.isFile()) {
  x.append(""<a href='"" + name + ""'>""+ name+ ""</a>\t"");
  x.append(time + ""\t"" + f.length()+ ""\n"");
}
 else {
}
",0,0,0,,
1491,} else {,"if (f.isFile()) {
  x.append(""<a href='"" + name + ""'>""+ name+ ""</a>\t"");
  x.append(time + ""\t"" + f.getSize()+ ""\n"");
}
 else {
}
",0,0,0,,
1492,} else {,"if (!(exp instanceof ElementExp) || !mKnownElementExpressions.contains(exp)) {
  mKnownElementExpressions.add(exp);
  isNew=true;
}
 else {
}
",0,0,0,,
1493,&& (mAutomaticStyle.getStyleNameAttribute().equals(value))) {,"if ((mAutomaticStyle != null) && (mAutomaticStyle.getStyleNameAttribute().equals(value))) {
}
 else {
  OdfOfficeAutomaticStyles automatic_styles=getAutomaticStyles();
  if (automatic_styles != null) {
    autoStyle=automatic_styles.getStyle(value,getStyleFamily());
  }
  if (mAutomaticStyle != null) {
    mAutomaticStyle.removeStyleUser(this);
  }
  mAutomaticStyle=autoStyle;
  if (mAutomaticStyle != null) {
    mAutomaticStyle.addStyleUser(this);
  }
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, ),
"
1494,"if (UtilValidate.isEmpty(invoiceItem.get(""productId"")) && UtilValidate.isEmpty(invoiceItem.get(""description""))) {","if (UtilValidate.isEmpty(invoiceItem.get(""productId"")) && UtilValidate.isEmpty(invoiceItem.get(""description""))) {
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1495,} else {,"if (billToParty != null) {
  billToPartyId=billToParty.getString(""partyId"");
}
 else {
}
",0,0,0,,
1496,} else {,"if (taxAuthorityGlAccount != null) {
  taxAuthGlAccountId=taxAuthorityGlAccount.getString(""glAccountId"");
}
 else {
}
",0,0,0,,
1497,if (valueObj == null || (valueObj instanceof String) && ((String) valueObj).length() == 0) {,"if (valueObj == null || (valueObj instanceof String) && ((String)valueObj).length() == 0) {
}
 else {
  String value=valueObj.toString();
  buf.append(name).append(""="");
  buf.append(value);
  if (i.hasNext())   buf.append(""&"");
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1498,} else {,"if (UtilValidate.isEmpty(sCached)) {
  useCached=false;
}
 else {
}
",0,0,0,,
1499,} else {,"if (UtilValidate.isNotEmpty(cashCodPcBaPaymentPreferences) && UtilValidate.isNotEmpty(allPaymentPreferences) && cashCodPcBaPaymentPreferences.size() == allPaymentPreferences.size()) {
  List<GenericValue> checkPreferences=EntityUtil.filterByAnd(cashCodPcBaPaymentPreferences,UtilMisc.toMap(""paymentMethodTypeId"",""PERSONAL_CHECK""));
  if (UtilValidate.isNotEmpty(checkPreferences)) {
    if (faceToFace) {
      boolean ok=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId,manualHold);
      if (!ok) {
        throw new GeneralException(""Problem with order change; see above error"");
      }
    }
  }
 else {
    boolean ok=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId,manualHold);
    if (!ok) {
      throw new GeneralException(""Problem with order change; see above error"");
    }
  }
}
 else {
}
",0,0,0,,
1500,} else {,"if (CategoryWorker.isProductInCategory(delegator,cartItem.getProductId(),productCategoryId)) {
  itemsToReturn.add(cartItem);
}
 else {
}
",0,0,0,,
1501,} else {,"if (productModel.isField(orderByField)) {
  entityName=""ProductAndCategoryMember"";
  break;
}
 else {
}
",0,0,0,,
1502,} else {,"if (UtilValidate.isEmpty(standardProductFeatureAndAppls)) {
  hasAllFeatures=false;
  break;
}
 else {
}
",0,0,0,,
1503,} else {,"if (UtilValidate.isNotEmpty(itemList)) {
  Map<String,Object> subGroup=makeGroup(delegator,featureList,itemList,order,index + 1);
  group.put(key,subGroup);
}
 else {
}
",0,0,0,,
1504,} else {,"if (""CAL_DECLINED"".equals(statusId)) {
  try {
    Map<String,Object> results=dispatcher.runSync(""wfDeclineAssignment"",context);
    if (results != null && results.get(ModelService.ERROR_MESSAGE) != null)     Debug.logWarning((String)results.get(ModelService.ERROR_MESSAGE),module);
  }
 catch (  GenericServiceException e) {
    Debug.logWarning(e,module);
  }
}
 else {
}
",0,0,0,,
1505,if (this.get(pkFieldName) != null) {,"if (this.get(pkFieldName) != null) {
}
",0,0,4,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1506,if (UtilValidate.isEmpty(newValues) || newValues.get(0) == null) {,"if (UtilValidate.isEmpty(newValues) || newValues.get(0) == null) {
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1507,} else {,"if (valueSrc instanceof FlexibleStringExpander) {
  FlexibleStringExpander valueExdr=(FlexibleStringExpander)valueSrc;
  serviceContextFieldAcsr.put(outContext,valueExdr.expandString(context));
}
 else {
}
",0,0,0,,
1508,} else {,"if (datasourceInfo.getJndiJdbc() != null) {
  JndiJdbc jndiJdbcElement=datasourceInfo.getJndiJdbc();
  String jndiName=jndiJdbcElement.getJndiName();
  String jndiServerName=jndiJdbcElement.getJndiServerName();
  Connection con=getJndiConnection(jndiName,jndiServerName);
  if (con != null)   return TransactionUtil.getCursorConnection(helperInfo,con);
}
 else {
}
",0,0,0,,
1509,} else {,"if (this.isFromURL) {
}
 else {
}
",0,0,0,,
1510,} else {,"if (firstPkParam.isOut() && secondPkParam.isIn()) {
  doublePkPrimaryInParam=secondPkParam;
  doublePkSecondaryOutParam=firstPkParam;
  doublePkSecondaryOutField=firstPkField;
}
 else {
}
",0,0,0,,
1511,"} else if (""group"".equals(this.modelService.engineName)) {","if (""group"".equals(this.modelService.engineName)) {
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1512,} else {,"if (genEnt.getModelEntity().isField(this.entryAcsr.getOriginalName())) {
  retVal=genEnt.get(this.entryAcsr.getOriginalName(),locale);
}
 else {
}
",0,0,0,,
1513,if (!stayingOnRow && nextFormField.getPosition() > 1) {,"if (!stayingOnRow && nextFormField.getPosition() > 1) {
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1514,} else {,"if (session != null) {
  ctx=session.getServletContext();
}
 else {
}
",0,0,0,,
1515,} else {,"if (session != null) {
  ctx=session.getServletContext();
}
 else {
}
",0,0,0,,
1516,if ((minParam == -1) && (maxParam == -1)) {,"if ((minParam == -1) && (maxParam == -1)) {
}
 else if ((minParam != -1) && (maxParam == -1)) {
  msgRef=ExpressionParserException.METHOD_WRONG_ARG_X_OR_MORE.create();
  msgRef.addContent(methodExpression.getMethod().toUriLiteral());
  msgRef.addContent(token.getPosition() + 1);
  msgRef.addContent(expression);
  msgRef.addContent(minParam);
}
 else if ((minParam == -1) && (maxParam != -1)) {
  msgRef=ExpressionParserException.METHOD_WRONG_ARG_X_OR_LESS.create();
  msgRef.addContent(methodExpression.getMethod().toUriLiteral());
  msgRef.addContent(token.getPosition() + 1);
  msgRef.addContent(expression);
  msgRef.addContent(maxParam);
}
 else if ((minParam != -1) && (maxParam != -1)) {
  if (minParam == maxParam) {
    msgRef=ExpressionParserException.METHOD_WRONG_ARG_EXACT.create();
    msgRef.addContent(methodExpression.getMethod().toUriLiteral());
    msgRef.addContent(token.getPosition() + 1);
    msgRef.addContent(expression);
    msgRef.addContent(minParam);
  }
 else {
    msgRef=ExpressionParserException.METHOD_WRONG_ARG_BETWEEN.create();
    msgRef.addContent(methodExpression.getMethod().toUriLiteral());
    msgRef.addContent(token.getPosition() + 1);
    msgRef.addContent(expression);
    msgRef.addContent(minParam);
    msgRef.addContent(maxParam);
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1517,else if(!auth.equals(null)){,"if (!auth.equals(null)) {
}
",0,0,3,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1518,"if (Arrays.toString(args).contains(""-dryrun"")) {","if (Arrays.toString(args).contains(""-dryrun"")) {
}
 else {
  throw e;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
1519,else {,"if (data.getChild(""uris"",data.getNamespace()) != null) {
  String uris=data.getChild(""uris"",data.getNamespace()).getTextTrim();
  uris=uris.replaceAll(CoordELFunctions.INSTANCE_SEPARATOR,CoordELFunctions.DIR_SEPARATOR);
  e.setVariable("".datain."" + data.getAttributeValue(""name""),uris);
}
 else {
}
",0,0,0,,
1520,else {,"if (data.getChild(""uris"",data.getNamespace()) != null) {
  String uris=data.getChild(""uris"",data.getNamespace()).getTextTrim();
  uris=uris.replaceAll(CoordELFunctions.INSTANCE_SEPARATOR,CoordELFunctions.DIR_SEPARATOR);
  e.setVariable("".dataout."" + data.getAttributeValue(""name""),uris);
}
 else {
}
",0,0,0,,
1521,else {,"if (failedNode != null) {
  log.warn(XLog.STD,""Workflow Failed. Failing node [{0}]"",failedNode);
}
 else {
}
",0,0,0,,
1522,} else {,"if (connectorClass != null) {
  if (connector.getResourceAdapter() == null) {
    connector.setResourceAdapter(new ResourceAdapter());
  }
  if (connector.getResourceAdapter().getResourceAdapterClass() == null || connector.getResourceAdapter().getResourceAdapterClass().length() == 0) {
    connector.getResourceAdapter().setResourceAdapterClass(connectorClass.getName());
  }
  Connector connectorAnnotation=connectorClass.getAnnotation(Connector.class);
  connector.setDisplayNames(getTexts(connector.getDisplayNames(),connectorAnnotation.displayName()));
  connector.setDescriptions(getTexts(connector.getDescriptions(),connectorAnnotation.description()));
  connector.setEisType(getString(connector.getEisType(),connectorAnnotation.eisType()));
  connector.setVendorName(getString(connector.getVendorName(),connectorAnnotation.vendorName()));
  connector.setResourceAdapterVersion(getString(connector.getResourceAdapterVersion(),connectorAnnotation.version()));
  if (connector.getIcons().isEmpty()) {
    int smallIcons=connectorAnnotation.smallIcon().length;
    int largeIcons=connectorAnnotation.largeIcon().length;
    for (int i=0; i < smallIcons && i < largeIcons; i++) {
      Icon icon=new Icon();
      icon.setLang(Locale.getDefault().getLanguage());
      if (i < smallIcons) {
        icon.setSmallIcon(connectorAnnotation.smallIcon()[i]);
      }
      if (i < largeIcons) {
        icon.setLargeIcon(connectorAnnotation.largeIcon()[i]);
      }
      connector.getIcons().add(icon);
    }
  }
  if (connector.getLicense() == null) {
    License license=new License();
    connector.setLicense(license);
    license.setLicenseRequired(connectorAnnotation.licenseRequired());
  }
  connector.getLicense().setDescriptions(getTexts(connector.getLicense().getDescriptions(),connectorAnnotation.licenseDescription()));
  SecurityPermission[] annotationSecurityPermissions=connectorAnnotation.securityPermissions();
  List<org.apache.openejb.jee.SecurityPermission> securityPermission=connector.getResourceAdapter().getSecurityPermission();
  if (securityPermission == null || securityPermission.size() == 0) {
    for (    SecurityPermission sp : annotationSecurityPermissions) {
      org.apache.openejb.jee.SecurityPermission permission=new org.apache.openejb.jee.SecurityPermission();
      permission.setSecurityPermissionSpec(sp.permissionSpec());
      permission.setDescriptions(stringsToTexts(sp.description()));
      securityPermission.add(permission);
    }
  }
  Class<? extends WorkContext>[] annotationRequiredWorkContexts=connectorAnnotation.requiredWorkContexts();
  List<String> requiredWorkContext=connector.getRequiredWorkContext();
  if (requiredWorkContext.size() == 0) {
    for (    Class<? extends WorkContext> cls : annotationRequiredWorkContexts) {
      requiredWorkContext.add(cls.getName());
    }
  }
  OutboundResourceAdapter outboundResourceAdapter=connector.getResourceAdapter().getOutboundResourceAdapter();
  if (outboundResourceAdapter == null) {
    outboundResourceAdapter=new OutboundResourceAdapter();
    connector.getResourceAdapter().setOutboundResourceAdapter(outboundResourceAdapter);
  }
  List<AuthenticationMechanism> authenticationMechanisms=outboundResourceAdapter.getAuthenticationMechanism();
  javax.resource.spi.AuthenticationMechanism[] authMechanisms=connectorAnnotation.authMechanisms();
  if (authenticationMechanisms.size() == 0) {
    for (    javax.resource.spi.AuthenticationMechanism am : authMechanisms) {
      AuthenticationMechanism authMechanism=new AuthenticationMechanism();
      authMechanism.setAuthenticationMechanismType(am.authMechanism());
      authMechanism.setCredentialInterface(am.credentialInterface().toString());
      authMechanism.setDescriptions(stringsToTexts(am.description()));
      authenticationMechanisms.add(authMechanism);
    }
  }
  if (outboundResourceAdapter.getTransactionSupport() == null) {
    outboundResourceAdapter.setTransactionSupport(TransactionSupportType.fromValue(connectorAnnotation.transactionSupport().toString()));
  }
  if (outboundResourceAdapter.isReauthenticationSupport() == null) {
    outboundResourceAdapter.setReauthenticationSupport(connectorAnnotation.reauthenticationSupport());
  }
}
 else {
}
",0,0,0,,
1523,} else {,"if (name.startsWith(""java:comp/"")) {
  t.referenceName=name.substring(5);
  comp.add(t);
}
 else {
}
",0,0,0,,
1524,} else {,"if (raw instanceof Beans) {
  ejbModule.setBeans((Beans)raw);
}
 else {
}
",0,0,0,,
1525,} else {,"if (JaxWsUtils.isWebService(ejbClass)) {
  webserviceDescription.setWebserviceDescriptionName(JaxWsUtils.getServiceName(ejbClass));
}
 else {
}
",0,0,0,,
1526,} else {,"if (JaxWsUtils.isWebService(ejbClass)) {
  if (portComponent.getWsdlPort() == null) {
    portComponent.setWsdlPort(JaxWsUtils.getPortQName(ejbClass));
  }
  if (webserviceDescription.getWsdlFile() == null) {
    webserviceDescription.setWsdlFile(JaxWsUtils.getServiceWsdlLocation(ejbClass,ejbModule.getClassLoader()));
  }
  if (portComponent.getWsdlService() == null) {
    Definition definition=getWsdl(ejbModule,webserviceDescription.getWsdlFile());
    if (definition != null && definition.getServices().size() == 1) {
      QName serviceQName=(QName)definition.getServices().keySet().iterator().next();
      portComponent.setWsdlService(serviceQName);
    }
 else {
      portComponent.setWsdlService(JaxWsUtils.getServiceQName(ejbClass));
    }
  }
  if (portComponent.getLocation() == null && webserviceDescription.getWsdlFile() != null) {
    Definition definition=getWsdl(ejbModule,webserviceDescription.getWsdlFile());
    String locationURI=getLocationFromWsdl(definition,portComponent);
    portComponent.setLocation(locationURI);
  }
  if (portComponent.getProtocolBinding() == null) {
    portComponent.setProtocolBinding(JaxWsUtils.getBindingUriFromAnn(ejbClass));
  }
  if (portComponent.getHandlerChains() == null) {
    HandlerChains handlerChains=getHandlerChains(ejbClass,sessionBean.getServiceEndpoint(),ejbModule.getClassLoader());
    portComponent.setHandlerChains(handlerChains);
  }
}
 else {
}
",0,0,0,,
1527,} else {,"if (Modifier.isPublic(method.getModifiers()) && !method.isSynthetic()) {
  checkAsynchronousMethod(session,ejbClass,method,applicationExceptions);
}
 else {
}
",0,0,0,,
1528,} else {,"if (javax.ejb.EnterpriseBean.class.isAssignableFrom(bean)) {
  bean.getMethod(ejbCreateName.toString(),create.getParameterTypes());
}
 else {
}
",0,0,0,,
1529,} else {,"if (!connect()) {
  try {
    System.out.println(""[] START SERVER"");
    final String openejbHome=System.getProperty(""openejb.home"");
    final File home=new File(openejbHome);
    System.out.println(""OPENEJB_HOME = "" + home.getAbsolutePath());
    final String systemInfo=""Java "" + System.getProperty(""java.version"") + ""; ""+ System.getProperty(""os.name"")+ ""/""+ System.getProperty(""os.version"");
    System.out.println(""SYSTEM_INFO  = "" + systemInfo);
    serverHasAlreadyBeenStarted=false;
    File openejbJar=null;
    final File lib=new File(home,""lib"");
    final File[] files=lib.listFiles();
    if (null != files) {
      for (int i=0; i < files.length && openejbJar == null; i++) {
        final File file=files[i];
        if (file.getName().startsWith(""openejb-core"") && file.getName().endsWith(""jar"")) {
          openejbJar=file;
        }
      }
    }
    if (openejbJar == null) {
      throw new IllegalStateException(""Cannot find the openejb-core jar in "" + lib.getAbsolutePath());
    }
    final boolean isWindows=System.getProperty(""os.name"").toLowerCase().contains(""win"");
    final String[] args={(isWindows ? ""java.exe"" : ""java""),""-jar"",openejbJar.getAbsolutePath(),""start""};
    final Process server=Runtime.getRuntime().exec(args);
    final InputStream out=server.getInputStream();
    final Thread serverOut=new Thread(new Pipe(out,System.out));
    serverOut.setDaemon(true);
    serverOut.start();
    final InputStream err=server.getErrorStream();
    final Thread serverErr=new Thread(new Pipe(err,System.err));
    serverErr.setDaemon(true);
    serverErr.start();
  }
 catch (  Exception e) {
    throw (RuntimeException)new RuntimeException(""Cannot start the server."").initCause(e);
  }
  connect(10);
}
 else {
}
",0,0,0,,
1530,} else {,"if (particle instanceof XmlSchemaGroupBase && !(particle instanceof XmlSchemaChoice)) {
  XmlSchemaGroupBase groupBase=(XmlSchemaGroupBase)particle;
  for (Iterator iterator=groupBase.getItems().getIterator(); iterator.hasNext(); ) {
    XmlSchemaParticle child=(XmlSchemaParticle)iterator.next();
    if (child instanceof XmlSchemaElement) {
      XmlSchemaElement element=(XmlSchemaElement)child;
      elements.add(element);
    }
  }
}
 else {
}
",0,0,0,,
1531,} else {,"if (wsdlReturnValueMapping.getWsdlMessagePartName() != null) {
  String wsdlMessagePartName=wsdlReturnValueMapping.getWsdlMessagePartName();
  if (outParamNames.contains(wsdlMessagePartName)) {
    throw new OpenEJBException(""output message part "" + wsdlMessagePartName + "" has both an INOUT or OUT mapping and a return value mapping for operation ""+ operationName);
  }
  if (bindingStyle.isWrapped()) {
    Part outPart=getWrappedPart(outputMessage);
    XmlElementInfo returnParticle=getWrapperChild(outPart,wsdlMessagePartName);
    returnQName=new QName("""",returnParticle.qname.getLocalPart());
    returnXmlType=returnParticle.xmlType;
  }
 else   if (bindingStyle.isRpc()) {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=new QName("""",part.getName());
    returnXmlType=part.getTypeName();
  }
 else {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=getPartName(part);
    returnXmlType=returnQName;
  }
  outParamNames.add(wsdlMessagePartName);
}
 else {
}
",0,0,0,,
1532,} else {,"if (inMessage instanceof SoapMessage) {
  try {
    reserialize((SoapMessage)inMessage);
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Failed to reserialize soap message"",e);
  }
}
 else {
}
",0,0,0,,
1533,} else {,"if (token != null || HttpRequest.Method.GET.name().equals(request.getMethod())) {
  httpListener.onMessage(request,response);
}
 else {
}
",0,0,0,,
1534,} else {,"if (particle instanceof XmlSchemaGroupBase && !(particle instanceof XmlSchemaChoice)) {
  XmlSchemaGroupBase groupBase=(XmlSchemaGroupBase)particle;
  for (Iterator iterator=groupBase.getItems().getIterator(); iterator.hasNext(); ) {
    XmlSchemaParticle child=(XmlSchemaParticle)iterator.next();
    if (child instanceof XmlSchemaElement) {
      XmlSchemaElement element=(XmlSchemaElement)child;
      elements.add(element);
    }
  }
}
 else {
}
",0,0,0,,
1535,} else {,"if (wsdlReturnValueMapping.getWsdlMessagePartName() != null) {
  String wsdlMessagePartName=wsdlReturnValueMapping.getWsdlMessagePartName();
  if (outParamNames.contains(wsdlMessagePartName)) {
    throw new OpenEJBException(""output message part "" + wsdlMessagePartName + "" has both an INOUT or OUT mapping and a return value mapping for operation ""+ operationName);
  }
  if (bindingStyle.isWrapped()) {
    Part outPart=getWrappedPart(outputMessage);
    XmlElementInfo returnParticle=getWrapperChild(outPart,wsdlMessagePartName);
    returnQName=new QName("""",returnParticle.qname.getLocalPart());
    returnXmlType=returnParticle.xmlType;
  }
 else   if (bindingStyle.isRpc()) {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=new QName("""",part.getName());
    returnXmlType=part.getTypeName();
  }
 else {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=getPartName(part);
    returnXmlType=returnQName;
  }
  outParamNames.add(wsdlMessagePartName);
}
 else {
}
",0,0,0,,
1536,} else {,"if (sm.getContext() != null && sm.getContext().getConfiguration() != null) {
  compat=sm.getContext().getConfiguration().getCompatibilityInstance();
}
 else {
}
",0,0,0,,
1537,} else {,"if (provider == null || provider.equals(_providerImplName)) {
  names.add(unit.getPersistenceUnitName());
}
 else {
}
",0,0,0,,
1538,else {,"if (extendableXSDIS != null) {
  schema.add(extendableXSDIS);
}
 else {
}
",0,0,0,,
1539,else {,"if (openjpaXSDIS != null) {
  schema.add(openjpaXSDIS);
}
 else {
}
",0,0,0,,
1540,} else {,"if (!introduceError) {
  fail(""Expected "" + RollbackException.class.getName());
}
 else {
}
",0,0,0,,
1541,} else {,"if (status == SC_NO_CONTENT || status == SC_OK || status == SC_NOT_FOUND) {
  log.info(""Successfully deleted appointment with id: {}"",appointment.getId());
  return true;
}
 else {
}
",0,0,0,,
1542,} else {,"if (th != null) {
  stop(target);
  progressBar.setVisible(false);
  target.add(container.replace(new ErrorMessagePanel(""status"",getString(""install.wizard.install.failed""),th)),desc.setVisible(false));
}
 else {
}
",0,0,0,,
1543,} else if (r.getId().equals(WebSession.get().getRoomId())) {,"if (r.getId().equals(WebSession.get().getRoomId())) {
}
 else {
  boolean allowed=false;
  String deniedMessage=null;
  if (r.isAppointment()) {
    Appointment a=apptDao.getByRoom(r.getId());
    if (a != null && !a.isDeleted()) {
      boolean isOwner=a.getOwner().getId().equals(getUserId());
      allowed=isOwner;
      log.debug(""appointed room, isOwner ? {}"",isOwner);
      if (!allowed) {
        for (        MeetingMember mm : a.getMeetingMembers()) {
          if (getUserId().equals(mm.getUser().getId())) {
            allowed=true;
            break;
          }
        }
      }
      if (allowed) {
        Calendar cal=WebSession.getCalendar();
        if (isOwner || cal.getTime().after(allowedStart(a.getStart())) && cal.getTime().before(a.getEnd())) {
          eventDetail=new EventDetailDialog(EVENT_DETAILS_ID,a);
        }
 else {
          allowed=false;
          deniedMessage=String.format(""%s %s - %s"",getString(""error.hash.period""),getDateFormat().format(a.getStart()),getDateFormat().format(a.getEnd()));
        }
      }
    }
  }
 else {
    allowed=r.getIspublic() || (r.getOwnerId() != null && r.getOwnerId().equals(getUserId()));
    log.debug(""public ? {}, ownedId ? {} {}"",r.getIspublic(),r.getOwnerId(),allowed);
    if (!allowed) {
      User u=c.getUser();
      for (      RoomGroup ro : r.getGroups()) {
        for (        GroupUser ou : u.getGroupUsers()) {
          if (ro.getGroup().getId().equals(ou.getGroup().getId())) {
            allowed=true;
            break;
          }
        }
        if (allowed) {
          break;
        }
      }
    }
  }
  if (!allowed) {
    if (deniedMessage == null) {
      deniedMessage=getString(""1599"");
    }
    accessDenied=new ExpiredMessageDialog(ACCESS_DENIED_ID,deniedMessage,menu);
    room.setVisible(false);
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1544,"} else if (args[i].equals(""-q"") || args[i].equals(""--quiet"")) {","if (args[i].equals(""-q"") || args[i].equals(""--quiet"")) {
}
 else if (args[i].equals(""-fo"")) {
  i=i + parseFOInputOption(args,i);
}
 else if (args[i].equals(""-xsl"")) {
  i=i + parseXSLInputOption(args,i);
}
 else if (args[i].equals(""-xml"")) {
  i=i + parseXMLInputOption(args,i);
}
 else if (args[i].equals(""-atin"")) {
  i=i + parseAreaTreeInputOption(args,i);
}
 else if (args[i].equals(""-ifin"")) {
  i=i + parseIFInputOption(args,i);
}
 else if (args[i].equals(""-imagein"")) {
  i=i + parseImageInputOption(args,i);
}
 else if (args[i].equals(""-awt"")) {
  i=i + parseAWTOutputOption(args,i);
}
 else if (args[i].equals(""-pdf"")) {
  i=i + parsePDFOutputOption(args,i,null);
}
 else if (args[i].equals(""-pdfa1b"")) {
  i=i + parsePDFOutputOption(args,i,""PDF/A-1b"");
}
 else if (args[i].equals(""-mif"")) {
  i=i + parseMIFOutputOption(args,i);
}
 else if (args[i].equals(""-rtf"")) {
  i=i + parseRTFOutputOption(args,i);
}
 else if (args[i].equals(""-tiff"")) {
  i=i + parseTIFFOutputOption(args,i);
}
 else if (args[i].equals(""-png"")) {
  i=i + parsePNGOutputOption(args,i);
}
 else if (args[i].equals(""-print"")) {
  if (i + 1 < args.length) {
    if (args[i + 1].equals(""help"")) {
      printUsagePrintOutput();
      return false;
    }
  }
  i=i + parsePrintOutputOption(args,i);
}
 else if (args[i].equals(""-copies"")) {
  i=i + parseCopiesOption(args,i);
}
 else if (args[i].equals(""-pcl"")) {
  i=i + parsePCLOutputOption(args,i);
}
 else if (args[i].equals(""-ps"")) {
  i=i + parsePostscriptOutputOption(args,i);
}
 else if (args[i].equals(""-txt"")) {
  i=i + parseTextOutputOption(args,i);
}
 else if (args[i].equals(""-svg"")) {
  i=i + parseSVGOutputOption(args,i);
}
 else if (args[i].equals(""-afp"")) {
  i=i + parseAFPOutputOption(args,i);
}
 else if (args[i].equals(""-foout"")) {
  i=i + parseFOOutputOption(args,i);
}
 else if (args[i].equals(""-out"")) {
  i=i + parseCustomOutputOption(args,i);
}
 else if (args[i].equals(""-at"")) {
  i=i + parseAreaTreeOption(args,i);
}
 else if (args[i].equals(""-if"")) {
  i=i + parseIntermediateFormatOption(args,i);
}
 else if (args[i].equals(""-a"")) {
  this.renderingOptions.put(Accessibility.ACCESSIBILITY,Boolean.TRUE);
}
 else if (args[i].equals(""-v"")) {
  printVersion();
  if (args.length == 1) {
    return false;
  }
}
 else if (args[i].equals(""-param"")) {
  if (i + 2 < args.length) {
    String name=args[++i];
    String expression=args[++i];
    addXSLTParameter(name,expression);
  }
 else {
    throw new FOPException(""invalid param usage: use -param <name> <value>"");
  }
}
 else if (args[i].equals(""-catalog"")) {
  useCatalogResolver=true;
}
 else if (args[i].equals(""-o"")) {
  i=i + parsePDFOwnerPassword(args,i);
}
 else if (args[i].equals(""-u"")) {
  i=i + parsePDFUserPassword(args,i);
}
 else if (args[i].equals(""-pdfprofile"")) {
  i=i + parsePDFProfile(args,i);
}
 else if (args[i].equals(""-noprint"")) {
  getPDFEncryptionParams().setAllowPrint(false);
}
 else if (args[i].equals(""-nocopy"")) {
  getPDFEncryptionParams().setAllowCopyContent(false);
}
 else if (args[i].equals(""-noedit"")) {
  getPDFEncryptionParams().setAllowEditContent(false);
}
 else if (args[i].equals(""-noannotations"")) {
  getPDFEncryptionParams().setAllowEditAnnotations(false);
}
 else if (args[i].equals(""-nocs"")) {
  useComplexScriptFeatures=false;
}
 else if (args[i].equals(""-nofillinforms"")) {
  getPDFEncryptionParams().setAllowFillInForms(false);
}
 else if (args[i].equals(""-noaccesscontent"")) {
  getPDFEncryptionParams().setAllowAccessContent(false);
}
 else if (args[i].equals(""-noassembledoc"")) {
  getPDFEncryptionParams().setAllowAssembleDocument(false);
}
 else if (args[i].equals(""-noprinthq"")) {
  getPDFEncryptionParams().setAllowPrintHq(false);
}
 else if (args[i].equals(""-version"")) {
  printVersion();
  return false;
}
 else if (!isOption(args[i])) {
  i=i + parseUnknownOption(args,i);
}
 else {
  printUsage(System.err);
  System.exit(1);
}
",0,1,8,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1545,else {,"if (OpenNLPPreferenceConstants.TOKENIZER_ALGO_STATISTICAL.equals(algorithm)) {
  if (tokenizer == null) {
    InputStream modelIn;
    try {
      modelIn=ModelUtil.openModelIn(modelPath);
    }
 catch (    IOException e1) {
      return new Status(IStatus.CANCEL,OpenNLPPlugin.ID,""Failed to load tokenizer model!"");
    }
    try {
      TokenizerModel model=new TokenizerModel(modelIn);
      tokenizer=new TokenizerME(model);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (modelIn != null) {
        try {
          modelIn.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}
 else {
}
",0,0,0,,
1546,else {,"if (response.getStatus() == ClientResponse.Status.NO_CONTENT.getStatusCode()) {
  System.out.println(""##### FINISHED #####"");
  break;
}
 else {
}
",0,0,0,,
1547,"if (((e.getErrorCode() == 50000) && (""XJ015"".equals(e.getSQLState())))) {","if (((e.getErrorCode() == 50000) && (""XJ015"".equals(e.getSQLState())))) {
}
 else {
  throw new IOException(e);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
1548,else {,"if (!isPartOfName(np)) {
  Parse head=headFinder.getLastHead(np);
  Mention extent=new Mention(np.getSpan(),head.getSpan(),head.getEntityId(),np,null);
  mentions.add(extent);
  recentMentions.add(np);
  String entityType=getEntityType(headFinder.getHeadToken(head));
  if (entityType != null) {
    extent.setNameType(entityType);
  }
}
 else {
}
",0,0,0,,
1549,else {,"if (!isHeadOfExistingMention(np,headMap,recentMentions)) {
  clearMentions(recentMentions,np);
  if (!isPartOfName(np)) {
    Parse head=headFinder.getLastHead(np);
    Mention extent=new Mention(np.getSpan(),head.getSpan(),head.getEntityId(),np,null);
    mentions.add(extent);
    recentMentions.add(np);
    String entityType=getEntityType(headFinder.getHeadToken(head));
    if (entityType != null) {
      extent.setNameType(entityType);
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
1550,else {,"if (isBasalNounPhrase(np)) {
  if (collectPrenominalNamedEntities) {
    collectPrenominalNamedEntities(np,mentions);
  }
  if (collectCoordinatedNounPhrases) {
    collectCoordinatedNounPhraseMentions(np,mentions);
  }
  collectPossesivePronouns(np,mentions);
}
 else {
}
",0,0,0,,
1551,else {,"if (sci != 0) {
  countTokens=true;
}
 else {
}
",0,0,0,,
1552,if (mention.getId() != -1 && !referentFound) {,"if (mention.getId() != -1 && !referentFound) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1553,else {,"if (isNumber(np2)) {
  features.addAll(getCommonNumberFeatures(np1,np2));
}
 else {
}
",0,0,0,,
1554,else {,"if (isNumber(np2)) {
  features.addAll(getNumberPronounFeatures(np2,np1));
}
 else {
}
",0,0,0,,
1555,else {,"if (isNumber(np2)) {
}
 else {
}
",0,0,0,,
1556,else {,"if (isNumber(np1)) {
  if (isName(np2)) {
    features.addAll(getNameNumberFeatures(np2,np1));
  }
 else   if (isCommonNoun(np2)) {
    features.addAll(getCommonNumberFeatures(np2,np1));
  }
 else   if (isPronoun(np2)) {
    features.addAll(getNumberPronounFeatures(np1,np2));
  }
 else   if (isNumber(np2)) {
  }
 else {
  }
}
 else {
}
",0,0,0,,
1557,else{,"if (cl.conceptList.get(k).intent.size() == cl.attributeCount) {
  for (  Integer i : cl.conceptList.get(k).parents) {
  }
  run=false;
}
 else {
}
",0,0,0,,
1558,} else {,"if (phrType.endsWith(""ADJP"")) {
  adjPhr.add(phr);
}
 else {
}
",0,0,0,,
1559,{,"if (qualifiers == null || qualifiers.length == 0) {
}
",0,0,0,,
1560,{,"if (""info"".equals(action)) {
}
 else if (""invalidateSession"".equals(action)) {
  request.getSession().invalidate();
}
 else if (""invalidateSessionAfterBeanAccess"".equals(action)) {
  shoppingCart.getContent();
  request.getSession().invalidate();
}
 else if (""set"".equals(action)) {
  String content=request.getParameter(""content"");
  shoppingCart.setContent(content);
}
 else if (""begin"".equals(action)) {
  shoppingCart.getConversation().begin();
}
 else if (""end"".equals(action)) {
  shoppingCart.getConversation().end();
}
 else if (""setUser"".equals(action)) {
  String name=request.getParameter(""name"");
  sessionUser.setName(name);
}
 else {
  response.getWriter().append(""error - unknown command"");
  response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
}
",0,0,0,,
1561,} else {,"if (i % 2 == 0) {
  invalid.setALong(new ALong(18l));
  invalid.setANewBool(new ABool(false));
}
 else {
}
",0,0,0,,
1562,{,"if (rotation == 0) {
  PDRectangle pageSize=page.getMediaBox();
  y=pageSize.getHeight() - y;
}
 else {
}
",0,0,0,,
1563,{,"if (resources != null) {
}
 else {
  resources=currentPage.getResources();
}
",0,0,0,,
1564,{,"if (value != null) {
  entry.getKey().accept(this);
  getStandardOutput().write(SPACE);
  if (value instanceof COSDictionary) {
    COSDictionary dict=(COSDictionary)value;
    if (!incrementalUpdate) {
      COSBase item=dict.getItem(COSName.XOBJECT);
      if (item != null && !COSName.XOBJECT.equals(entry.getKey())) {
        item.setDirect(true);
      }
      item=dict.getItem(COSName.RESOURCES);
      if (item != null && !COSName.RESOURCES.equals(entry.getKey())) {
        item.setDirect(true);
      }
    }
    if (dict.isDirect()) {
      visitFromDictionary(dict);
    }
 else {
      addObjectToWrite(dict);
      writeReference(dict);
    }
  }
 else   if (value instanceof COSObject) {
    COSBase subValue=((COSObject)value).getObject();
    if (willEncrypt || incrementalUpdate || subValue instanceof COSDictionary|| subValue instanceof COSArray|| subValue == null) {
      addObjectToWrite(value);
      writeReference(value);
    }
 else {
      subValue.accept(this);
    }
  }
 else {
    if (reachedSignature && COSName.CONTENTS.equals(entry.getKey())) {
      signatureOffset=getStandardOutput().getPos();
      value.accept(this);
      signatureLength=getStandardOutput().getPos() - signatureOffset;
    }
 else     if (reachedSignature && COSName.BYTERANGE.equals(entry.getKey())) {
      byteRangeArray=(COSArray)entry.getValue();
      byteRangeOffset=getStandardOutput().getPos() + 1;
      value.accept(this);
      byteRangeLength=getStandardOutput().getPos() - 1 - byteRangeOffset;
      reachedSignature=false;
    }
 else {
      value.accept(this);
    }
  }
  getStandardOutput().writeEOL();
}
 else {
}
",0,0,0,,
1565,{,"if (mdStream instanceof COSNull) {
}
 else {
  throw new IllegalStateException(""Expected a COSStream but was a "" + mdStream.getClass().getSimpleName());
}
",0,0,0,,
1566,{,"if (base == null) {
}
 else if (base instanceof COSString) {
  retval=new PDSimpleFileSpecification((COSString)base);
}
 else if (base instanceof COSDictionary) {
  retval=new PDComplexFileSpecification((COSDictionary)base);
}
 else {
  throw new IOException(""Error: Unknown file specification "" + base);
}
",0,0,0,,
1567,{,"if ("".notdef"".equals(name)) {
}
 else if (!(WinAnsiEncoding.INSTANCE.contains(name) && MacRomanEncoding.INSTANCE.contains(name) && StandardEncoding.INSTANCE.contains(name))) {
  return true;
}
",0,0,0,,
1568,{,"if (lc1 > 800 || lc2 > 800) {
}
 else if (lc1 > 400 || lc2 > 400) {
  l[0]=3;
}
 else if (lc1 > 200 || lc2 > 200) {
  l[0]=2;
}
 else {
  l[0]=1;
}
",0,0,0,,
1569,{,"if (ld1 > 800 || ld2 > 800) {
}
 else if (ld1 > 400 || ld2 > 400) {
  l[1]=3;
}
 else if (ld1 > 200 || ld2 > 200) {
  l[1]=2;
}
 else {
  l[1]=1;
}
",0,0,0,,
1570,{,"if (ll && (overlaps(p2,p1) || overlaps(p2,p3))) {
}
 else {
  Point2D[] urCorner={p3,p1,p2};
  float[][] urColor={patchCC[i][j - 1].color,patchCC[i - 1][j].color,patchCC[i][j].color};
  ShadedTriangle tmpur=new ShadedTriangle(urCorner,urColor);
  list.add(tmpur);
}
",0,0,0,,
1571,{,"if (isOnSameSideCC(controlPoints[1][1]) || isOnSameSideCC(controlPoints[1][2]) || isOnSameSideCC(controlPoints[2][1])|| isOnSameSideCC(controlPoints[2][2])) {
}
 else {
  double lc1=getLen(ctlC1[0],ctlC1[3]), lc2=getLen(ctlC2[0],ctlC2[3]);
  if (lc1 > 800 || lc2 > 800) {
  }
 else   if (lc1 > 400 || lc2 > 400) {
    l[0]=3;
  }
 else   if (lc1 > 200 || lc2 > 200) {
    l[0]=2;
  }
 else {
    l[0]=1;
  }
}
",0,0,0,,
1572,{,"if (lc1 > 800 || lc2 > 800) {
}
 else if (lc1 > 400 || lc2 > 400) {
  l[0]=3;
}
 else if (lc1 > 200 || lc2 > 200) {
  l[0]=2;
}
 else {
  l[0]=1;
}
",0,0,0,,
1573,{,"if (isOnSameSideDD(controlPoints[1][1]) || isOnSameSideDD(controlPoints[1][2]) || isOnSameSideDD(controlPoints[2][1])|| isOnSameSideDD(controlPoints[2][2])) {
}
 else {
  double ld1=getLen(controlPoints[0][0],controlPoints[0][3]);
  double ld2=getLen(controlPoints[3][0],controlPoints[3][3]);
  if (ld1 > 800 || ld2 > 800) {
  }
 else   if (ld1 > 400 || ld2 > 400) {
    l[1]=3;
  }
 else   if (ld1 > 200 || ld2 > 200) {
    l[1]=2;
  }
 else {
    l[1]=1;
  }
}
",0,0,0,,
1574,{,"if (ld1 > 800 || ld2 > 800) {
}
 else if (ld1 > 400 || ld2 > 400) {
  l[1]=3;
}
 else if (ld1 > 200 || ld2 > 200) {
  l[1]=2;
}
 else {
  l[1]=1;
}
",0,0,0,,
1575,{,"if (base == null) {
}
 else if (base instanceof COSArray && ((COSArray)base).size() > 1 && ((COSArray)base).getObject(1) instanceof COSName) {
  COSArray array=(COSArray)base;
  COSName type=(COSName)array.getObject(1);
  String typeString=type.getName();
switch (typeString) {
case PDPageFitDestination.TYPE:
case PDPageFitDestination.TYPE_BOUNDED:
    retval=new PDPageFitDestination(array);
  break;
case PDPageFitHeightDestination.TYPE:
case PDPageFitHeightDestination.TYPE_BOUNDED:
retval=new PDPageFitHeightDestination(array);
break;
case PDPageFitRectangleDestination.TYPE:
retval=new PDPageFitRectangleDestination(array);
break;
case PDPageFitWidthDestination.TYPE:
case PDPageFitWidthDestination.TYPE_BOUNDED:
retval=new PDPageFitWidthDestination(array);
break;
case PDPageXYZDestination.TYPE:
retval=new PDPageXYZDestination(array);
break;
default :
throw new IOException(""Unknown destination type: "" + type.getName());
}
}
 else if (base instanceof COSString) {
retval=new PDNamedDestination((COSString)base);
}
 else if (base instanceof COSName) {
retval=new PDNamedDestination((COSName)base);
}
 else {
throw new IOException(""Error: can't convert to Destination "" + base);
}
",0,0,0,,
1576,{,"if (initialClip != null) {
}
",0,0,0,,
1577,{,"if (vPath.isEmpty()) {
}
 else if (!vPath.isExpectedType(PDResources.class)) {
  addValidationError(ctx,new ValidationError(PreflightConstants.ERROR_PDF_PROCESSING_MISSING,""Resources validation process needs at least one PDResources object""));
}
 else {
  PDResources resources=(PDResources)vPath.peek();
  validateFonts(ctx,resources);
  validateExtGStates(ctx,resources);
  validateShadingPattern(ctx,resources);
  validateTilingPattern(ctx,resources);
  validateXObjects(ctx,resources);
}
",0,0,0,,
1578,{,"if (XmpConstants.DEFAULT_RDF_PREFIX.equals(attr.getPrefix()) && XmpConstants.ABOUT_NAME.equals(attr.getLocalName())) {
}
 else if (attr.getPrefix() == null && XmpConstants.ABOUT_NAME.equals(attr.getLocalName())) {
}
 else if (XMLConstants.XMLNS_ATTRIBUTE.equals(attr.getPrefix())) {
  if (!strictParsing) {
    String prefix=attr.getLocalName();
    String namespace=attr.getValue();
    XMPSchema schema=xmp.getSchema(namespace);
    if (schema == null && tm.getSchemaFactory(namespace) == null) {
      tm.addNewNameSpace(namespace,prefix);
    }
  }
}
 else {
  parseDescriptionRootAttr(xmp,description,attr,tm);
}
",0,0,0,,
1579,{,"if (attr.getPrefix() == null && XmpConstants.ABOUT_NAME.equals(attr.getLocalName())) {
}
 else if (XMLConstants.XMLNS_ATTRIBUTE.equals(attr.getPrefix())) {
  if (!strictParsing) {
    String prefix=attr.getLocalName();
    String namespace=attr.getValue();
    XMPSchema schema=xmp.getSchema(namespace);
    if (schema == null && tm.getSchemaFactory(namespace) == null) {
      tm.addNewNameSpace(namespace,prefix);
    }
  }
}
 else {
  parseDescriptionRootAttr(xmp,description,attr,tm);
}
",0,0,0,,
1580,{,"if (XMLConstants.XMLNS_ATTRIBUTE.equals(attr.getPrefix())) {
}
 else if (XmpConstants.DEFAULT_RDF_PREFIX.equals(attr.getPrefix()) && XmpConstants.ABOUT_NAME.equals(attr.getLocalName())) {
  if (sp instanceof XMPSchema) {
    ((XMPSchema)sp).setAboutAsSimple(attr.getValue());
  }
}
 else {
  Attribute attribute=new Attribute(XMLConstants.XML_NS_URI,attr.getLocalName(),attr.getValue());
  sp.setAttribute(attribute);
}
",0,0,0,,
1581,{,"if (type.type() == Types.LangAlt && type.card() == Cardinality.Simple) {
}
 else if (type.type() == Types.ResourceRef && type.card() == Cardinality.Simple) {
}
 else if (type.card() != Cardinality.Simple) {
}
 else {
  throw new Exception(""Unknown type : "" + type);
}
",0,0,0,,
1582,{,"if (type.type() == Types.ResourceRef && type.card() == Cardinality.Simple) {
}
 else if (type.card() != Cardinality.Simple) {
}
 else {
  throw new Exception(""Unknown type : "" + type);
}
",0,0,0,,
1583,{,"if (type.card() != Cardinality.Simple) {
}
 else {
  throw new Exception(""Unknown type : "" + type);
}
",0,0,0,,
1584,{,"if (pt.type() == Types.LangAlt) {
}
 else if (pt.type() == Types.Thumbnail && pt.card() == Cardinality.Alt) {
}
 else if (pt.type() == Types.ResourceRef) {
}
 else if (pt.type() == Types.Version && pt.card() == Cardinality.Seq) {
}
 else {
  PropertyType spt=retrievePropertyType(field.get(schema).toString());
  String getNameProperty=""get"" + prepareName(field.get(schema).toString(),spt) + ""Property"";
  Method getMethod=schemaClass.getMethod(getNameProperty);
  assertNull(getMethod.invoke(schema),getNameProperty + "" should return null when testing "" + property);
  String getNameValue=""get"" + prepareName(field.get(schema).toString(),spt);
  getMethod=schemaClass.getMethod(getNameValue);
  assertNotNull(getMethod,getNameValue + "" method should exist"");
  assertNull(getMethod.invoke(schema),getNameValue + "" should return null when testing "" + property);
}
",0,0,0,,
1585,{,"if (pt.type() == Types.Thumbnail && pt.card() == Cardinality.Alt) {
}
 else if (pt.type() == Types.ResourceRef) {
}
 else if (pt.type() == Types.Version && pt.card() == Cardinality.Seq) {
}
 else {
  PropertyType spt=retrievePropertyType(field.get(schema).toString());
  String getNameProperty=""get"" + prepareName(field.get(schema).toString(),spt) + ""Property"";
  Method getMethod=schemaClass.getMethod(getNameProperty);
  assertNull(getMethod.invoke(schema),getNameProperty + "" should return null when testing "" + property);
  String getNameValue=""get"" + prepareName(field.get(schema).toString(),spt);
  getMethod=schemaClass.getMethod(getNameValue);
  assertNotNull(getMethod,getNameValue + "" method should exist"");
  assertNull(getMethod.invoke(schema),getNameValue + "" should return null when testing "" + property);
}
",0,0,0,,
1586,{,"if (pt.type() == Types.ResourceRef) {
}
 else if (pt.type() == Types.Version && pt.card() == Cardinality.Seq) {
}
 else {
  PropertyType spt=retrievePropertyType(field.get(schema).toString());
  String getNameProperty=""get"" + prepareName(field.get(schema).toString(),spt) + ""Property"";
  Method getMethod=schemaClass.getMethod(getNameProperty);
  assertNull(getMethod.invoke(schema),getNameProperty + "" should return null when testing "" + property);
  String getNameValue=""get"" + prepareName(field.get(schema).toString(),spt);
  getMethod=schemaClass.getMethod(getNameValue);
  assertNotNull(getMethod,getNameValue + "" method should exist"");
  assertNull(getMethod.invoke(schema),getNameValue + "" should return null when testing "" + property);
}
",0,0,0,,
1587,{,"if (pt.type() == Types.Version && pt.card() == Cardinality.Seq) {
}
 else {
  PropertyType spt=retrievePropertyType(field.get(schema).toString());
  String getNameProperty=""get"" + prepareName(field.get(schema).toString(),spt) + ""Property"";
  Method getMethod=schemaClass.getMethod(getNameProperty);
  assertNull(getMethod.invoke(schema),getNameProperty + "" should return null when testing "" + property);
  String getNameValue=""get"" + prepareName(field.get(schema).toString(),spt);
  getMethod=schemaClass.getMethod(getNameValue);
  assertNotNull(getMethod,getNameValue + "" method should exist"");
  assertNull(getMethod.invoke(schema),getNameValue + "" should return null when testing "" + property);
}
",0,0,0,,
1588,{,"if (fu.endsWith(""s"")) {
}
 else if (fu.endsWith(""y"")) {
}
 else if (type.card() != Cardinality.Simple) {
  sb.append(""s"");
}
",0,0,0,,
1589,{,"if (fu.endsWith(""y"")) {
}
 else if (type.card() != Cardinality.Simple) {
  sb.append(""s"");
}
",0,0,0,,
1590,else{,"if (job.getAssignedJobID() != null) {
  jobsAssignedIdInThisRun.add(job);
  log.info(""HadoopJobId: "" + job.getAssignedJobID());
  MapReduceOper mro=jcc.getJobMroMap().get(job);
  if (mro != null) {
    String alias=MRScriptState.get().getAlias(mro);
    log.info(""Processing aliases "" + alias);
    String aliasLocation=MRScriptState.get().getAliasLocation(mro);
    log.info(""detailed locations: "" + aliasLocation);
  }
  MRPigStatsUtil.addJobStats(job);
  MRScriptState.get().emitJobStartedNotification(job.getAssignedJobID().toString());
}
 else {
}
",0,0,0,,
1591,} else {,"if (!tezOp.isVertexGroup()) {
  to=newVertex(tezOp);
  dag.addVertex(to);
}
 else {
}
",0,0,0,,
1592,} else {,"if (type instanceof SimpleTypeReference) {
  SimpleTypeReference simpleTypeReference=(SimpleTypeReference)type;
  sizeInBits+=simpleTypeReference.getSizeInBits();
}
 else {
}
",0,0,0,,
1593,} else {,"if (type instanceof SimpleTypeReference) {
  SimpleTypeReference simpleTypeReference=(SimpleTypeReference)type;
  if (simpleTypeReference instanceof StringTypeReference) {
    sb.append(toSerializationExpression(null,((StringTypeReference)simpleTypeReference).getLengthExpression(),parserArguments)).append("" + "");
  }
 else {
    sizeInBits+=simpleTypeReference.getSizeInBits();
  }
}
 else {
}
",0,0,0,,
1594,} else {,"if (returnCodes.get(symbolicAdsField) == 0) {
  long handle=readBuffer.readUnsignedLong(32);
  DirectAdsField directAdsField=new DirectAdsField(ReservedIndexGroups.ADSIGRP_SYM_VALBYHND.getValue(),handle,symbolicAdsField.getAdsDataType(),symbolicAdsField.getNumberOfElements());
  symbolicFieldMapping.put(symbolicAdsField,directAdsField);
}
 else {
}
",0,0,0,,
1595,} else if ((npdu.getApdu() == null) && (npdu.getNlm() != null)) {,"if ((npdu.getApdu() == null) && (npdu.getNlm() != null)) {
}
 else {
  LOGGER.debug(String.format(""Unexpected NPDU type: %s"",npdu.getClass().getName()));
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1596,} else {,"if (uri.equals(DRAWINGML_CHART_URI)) {
  copyChart(data,(XSLFGraphicFrame)sh);
}
 else {
}
",0,0,0,,
1597,} else {,"if (typeValue == STTblWidth.PCT) {
  result=Units.toDXA(POIXMLUnits.parseLength(ctWidth.xgetW())) / 50.0;
}
 else {
}
",0,0,0,,
1598,} else {,"if (data[offset] == 0x18 && data[offset + 1] == 0x00) {
  startType[i]=new String(data,offset + 2,4,LocaleUtil.CHARSET_1252);
  optA[i]=LittleEndian.getUShort(data,offset + 6);
  optB[i]=LittleEndian.getUShort(data,offset + 8);
  optC[i]=LittleEndian.getUShort(data,offset + 10);
  endType[i]=new String(data,offset + 12,4,LocaleUtil.CHARSET_1252);
  from[i]=(int)LittleEndian.getUInt(data,offset + 16);
  len[i]=(int)LittleEndian.getUInt(data,offset + 20);
}
 else {
}
",0,0,0,,
1599,} else {,"if (data[offset] == 0x18 && data[offset + 1] == 0x00) {
  String thingType=new String(data,offset + 2,4,LocaleUtil.CHARSET_1252);
  int optA=LittleEndian.getUShort(data,offset + 6);
  int optB=LittleEndian.getUShort(data,offset + 8);
  int optC=LittleEndian.getUShort(data,offset + 10);
  String bitType=new String(data,offset + 12,4,LocaleUtil.CHARSET_1252);
  int from=(int)LittleEndian.getUInt(data,offset + 16);
  int len=(int)LittleEndian.getUInt(data,offset + 20);
  byte[] bitData=IOUtils.safelyClone(data,from,len,MAX_RECORD_LENGTH);
  if (bitType.equals(""TEXT"")) {
    bits[i]=new QCTextBit(thingType,bitType,bitData);
  }
 else   if (bitType.equals(""PLC "")) {
    try {
      bits[i]=QCPLCBit.createQCPLCBit(thingType,bitType,bitData);
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      LOG.atWarn().log(""Unable to read Quill Contents PLC Bit record. Ignoring this record."");
      bits[i]=new UnknownQCBit(thingType,bitType,bitData);
    }
  }
 else {
    bits[i]=new UnknownQCBit(thingType,bitType,bitData);
  }
  bits[i].setOptA(optA);
  bits[i].setOptB(optB);
  bits[i].setOptC(optC);
  bits[i].setDataOffset(from);
}
 else {
}
",0,0,0,,
1600,|| (this instanceof CustomMAPIProperty)) {,"if (id == -1 || (id >= ID_FIRST_CUSTOM && id <= ID_LAST_CUSTOM) || (this instanceof CustomMAPIProperty)) {
}
 else {
  if (attributes.containsKey(id)) {
    throw new IllegalArgumentException(""Duplicate MAPI Property with ID "" + id + "" : ""+ toString()+ "" vs ""+ attributes.get(id));
  }
  attributes.put(id,this);
}
",0,0,2,,"ThisExpression(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1601,{,"if (newPAP.getItbdMac() != oldPAP.getItbdMac() || !Arrays.equals(newPAP.getRgdxaTab(),oldPAP.getRgdxaTab()) || !Arrays.equals(newPAP.getRgtbd(),oldPAP.getRgtbd())) {
}
",0,0,0,,
1602,{,"if (sprm.getSizeCode() == 6) {
  byte[] buf=new byte[sprm.size() - 3];
  System.arraycopy(buf,0,sprm.getGrpprl(),sprm.getGrpprlOffset(),buf.length);
  newPAP.setNumrm(buf);
}
 else {
}
",0,0,0,,
1603,} else {,"if (sei.hasEncryption()) {
  rs=sei.createDecryptingStream(in);
}
 else {
}
",0,0,0,,
1604,} else {,"if (_formats.get(i) == null) {
  _formats.set(i,_builtinFormats[i]);
}
 else {
}
",0,0,0,,
1605,} else {,"if (vx instanceof NumberEval && vy instanceof NumberEval) {
  accumlatedSome=true;
  NumberEval nx=(NumberEval)vx;
  NumberEval ny=(NumberEval)vy;
  result+=acc.accumulate(nx.getNumberValue(),ny.getNumberValue());
}
 else {
}
",0,0,0,,
1606,else {,"if (portletResponse instanceof ResourceResponse) {
  ((ResourceResponse)portletResponse).setStatus(statusCode);
}
 else {
}
",0,0,0,,
1607,else {,"if (portletResponse instanceof ResourceResponse) {
  ((ResourceResponse)portletResponse).setStatus(statusCode);
}
 else {
}
",0,0,0,,
1608,else {,"if (portletResponse instanceof ResourceResponse) {
  ((ResourceResponse)portletResponse).setCharacterEncoding(charset);
}
 else {
}
",0,0,0,,
1609,else {,"if (portletResponse instanceof ResourceResponse) {
  ((ResourceResponse)portletResponse).setContentLength(length);
}
 else {
}
",0,0,0,,
1610,else {,"if (portletResponse instanceof ResourceResponse) {
  ((ResourceResponse)portletResponse).setContentLengthLong(length);
}
 else {
}
",0,0,0,,
1611,else {,"if (portletResponse instanceof MimeResponse) {
  ((MimeResponse)portletResponse).setContentType(contentType);
}
 else {
}
",0,0,0,,
1612,else {,"if (portletResponse instanceof MimeResponse) {
  ((MimeResponse)portletResponse).setBufferSize(size);
}
 else {
}
",0,0,0,,
1613,else {,"if (portletResponse instanceof MimeResponse) {
  ((MimeResponse)portletResponse).reset();
}
 else {
}
",0,0,0,,
1614,else {,"if (portletResponse instanceof ResourceResponse) {
  ((ResourceResponse)portletResponse).setLocale(locale);
}
 else {
}
",0,0,0,,
1615,} else {,"if (c.getName().equals(""resource_tr1_cookie"") && c.getValue().equals(""true"")) {
  c.setMaxAge(0);
  c.setValue("""");
  tr1.setTcSuccess(true);
}
 else {
}
",0,0,0,,
1616,} else {,"if (c.getName().equals(""resource_tr17_cookie"") && c.getValue().equals(""true"")) {
  c.setMaxAge(0);
  c.setValue("""");
  tr1.setTcSuccess(false);
}
 else {
}
",0,0,0,,
1617,} else {,"if (isBlank(pulsarStandalone.getConfig().getAdvertisedAddress())) {
  pulsarStandalone.getConfig().setAdvertisedAddress(ServiceConfigurationUtils.unsafeLocalhostResolve());
}
 else {
}
",0,0,0,,
1618,} else {,"if (isBlank(config.getAdvertisedAddress()) && isBlank(config.getAdvertisedListeners())) {
  config.setAdvertisedAddress(""localhost"");
}
 else {
}
",0,0,0,,
1619,} else {,"if (isJsonSchema(from)) {
  if (isAvroSchema(to)) {
  }
 else   if (isJsonSchema(to)) {
    isCompatibleJsonSchema(from,to);
  }
 else {
    throw new IncompatibleSchemaException(""Unknown schema format"");
  }
}
 else {
}
",0,0,0,,
1620,} else {,"if (!future.isCompletedExceptionally()) {
  future.join().close();
}
 else {
}
",0,0,0,,
1621,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
1622,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
1623,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
1624,.alwaysUseFieldBuilders) {,"if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
}
",0,0,0,,
1625,} else {,"if (directRequestBroker) {
  List<String> tenantsList;
  try {
    tenantsList=pulsarAdminService.tenants(requestHost).getTenants();
  }
 catch (  PulsarAdminException e) {
    PulsarAdminOperationException pulsarAdminOperationException=new PulsarAdminOperationException(""Failed to get tenants list."");
    log.error(pulsarAdminOperationException.getMessage(),e);
    throw pulsarAdminOperationException;
  }
  if (!tenantsList.isEmpty()) {
    Optional<TopicStatsEntity> topicStatsEntityOptional=topicsStatsRepository.findMaxTime();
    Map<String,TopicStatsEntity> topicStatsEntityMap=Maps.newHashMap();
    if (topicStatsEntityOptional.isPresent()) {
      TopicStatsEntity topicStatsEntity=topicStatsEntityOptional.get();
      String environment=request.getHeader(""environment"");
      Page<TopicStatsEntity> tenantCountPage=brokerStatsService.findByMultiTenant(1,1,environment,tenantsList,topicStatsEntity.getTimestamp());
      tenantCountPage.count(true);
      Page<TopicStatsEntity> tenantAllCountPage=brokerStatsService.findByMultiTenant(1,(int)tenantCountPage.getTotal(),environment,tenantsList,topicStatsEntity.getTimestamp());
      for (      TopicStatsEntity statsEntity : tenantAllCountPage) {
        topicStatsEntityMap.put(statsEntity.getTenant(),statsEntity);
      }
    }
    for (    String tenant : tenantsList) {
      TenantInfo tenantInfo;
      try {
        tenantInfo=pulsarAdminService.tenants(requestHost).getTenantInfo(tenant);
      }
 catch (      PulsarAdminException e) {
        PulsarAdminOperationException pulsarAdminOperationException=new PulsarAdminOperationException(""Failed to get tenant info."");
        log.error(pulsarAdminOperationException.getMessage(),e);
        throw pulsarAdminOperationException;
      }
      Map<String,Object> tenantEntity=Maps.newHashMap();
      tenantEntity.put(""tenant"",tenant);
      tenantEntity.put(""adminRoles"",String.join("","",tenantInfo.getAdminRoles()));
      tenantEntity.put(""allowedClusters"",String.join("","",tenantInfo.getAllowedClusters()));
      List<String> namespacesList;
      try {
        namespacesList=pulsarAdminService.namespaces(requestHost).getNamespaces(tenant);
      }
 catch (      PulsarAdminException e) {
        PulsarAdminOperationException pulsarAdminOperationException=new PulsarAdminOperationException(""Failed to get namespaces list."");
        log.error(pulsarAdminOperationException.getMessage(),e);
        throw pulsarAdminOperationException;
      }
      tenantEntity.put(""namespaces"",namespacesList.size());
      if (topicStatsEntityMap.get(tenant) != null) {
        TopicStatsEntity topicStatsEntity=topicStatsEntityMap.get(tenant);
        tenantEntity.put(""inMsg"",topicStatsEntity.getMsgRateIn());
        tenantEntity.put(""outMsg"",topicStatsEntity.getMsgRateOut());
        tenantEntity.put(""inBytes"",topicStatsEntity.getMsgThroughputIn());
        tenantEntity.put(""outBytes"",topicStatsEntity.getMsgThroughputOut());
        tenantEntity.put(""storageSize"",topicStatsEntity.getStorageSize());
      }
      tenantsArray.add(tenantEntity);
    }
    tenantsMap.put(""isPage"",false);
    tenantsMap.put(""total"",tenantsList.size());
    tenantsMap.put(""data"",tenantsArray);
    tenantsMap.put(""pageNum"",1);
    tenantsMap.put(""pageSize"",tenantsList.size());
  }
}
 else {
}
",0,0,0,,
1626,{,"if (key.equals(""broker"") || key.equals(""console.request.agent_locate"") || key.startsWith(""apache.org:qpidd:"")|| key.startsWith(""TempQueue"")) {
}
 else {
  childAdded(exchange,binding);
}
",0,0,0,,
1627,{,"if (child instanceof Session) {
}
 else if (child instanceof Exchange) {
  _agent.raiseEvent(((org.apache.qpid.server.qmf2.agentdata.Exchange)data).createExchangeDeleteEvent());
}
 else if (child instanceof Queue) {
  _agent.raiseEvent(((org.apache.qpid.server.qmf2.agentdata.Queue)data).createQueueDeleteEvent());
}
 else if (child instanceof Binding) {
  String eName=((Binding)child).getExchange().getName();
  if (!eName.equals(""<<default>>"")) {
    _agent.raiseEvent(((org.apache.qpid.server.qmf2.agentdata.Binding)data).createUnbindEvent());
  }
}
 else if (child instanceof Consumer) {
  _agent.raiseEvent(((org.apache.qpid.server.qmf2.agentdata.Subscription)data).createUnsubscribeEvent());
}
",0,0,0,,
1628,{,"if (opt[0].equals(""--heartbeats"")) {
}
 else if (opt[0].equals(""--sasl-mechanism"")) {
  connectionOptions=""{reconnect: true, sasl_mechs: "" + opt[1] + ""}"";
}
",0,0,0,,
1629,{,"if (AMQPMessage.isAMQPMap(response)) {
}
 else {
  _log.info(""getObjects() Received response message in incorrect format"");
}
",0,0,0,,
1630,{,"if (AMQPMessage.isAMQPMap(response)) {
}
 else {
  _log.info(""getClasses() Received response message in incorrect format"");
}
",0,0,0,,
1631,{,"if (AMQPMessage.isAMQPMap(response)) {
}
 else {
  _log.info(""getSchema() Received response message in incorrect format"");
}
",0,0,0,,
1632,{,"if (components.length == 1) {
}
 else if (components.length == 2) {
  try {
    Integer.parseInt(components[1]);
    broker=components[0] + "":"" + components[1];
  }
 catch (  NumberFormatException nfe) {
    protocol=components[0];
    broker=components[1];
  }
}
 else if (components.length == 3) {
  protocol=components[0];
  broker=components[1] + "":"" + components[2];
}
",0,0,0,,
1633,{,"if (environmentFacade != null) {
  getEventLogger().message(getGroupLogSubject(),HighAvailabilityMessages.TRANSFER_MASTER(getName(),getAddress()));
  resolveFuture(environmentFacade.transferMasterToSelfAsynchronously(),""Transfer master did not complete within "" + MUTATE_JE_TIMEOUT_MS + ""ms. Node may still be elected master at a later time."",""Failed to transfer master to "" + this);
}
 else {
}
",0,0,0,,
1634,{,"if (requeues == 0) {
}
",0,0,0,,
1635,{,"if (record.getId().equals(_root.getId())) {
}
 else if ((record.getParents() == null || record.getParents().size() == 0)) {
  if (containsCategory(childTypesOfRoot,record.getType())) {
    String parentOfRootCategory=_root.getCategoryClass().getSimpleName();
    Map<String,UUID> rootParents=Collections.singletonMap(parentOfRootCategory,_root.getId());
    newRecords.add(new ConfiguredObjectRecordImpl(record.getId(),record.getType(),record.getAttributes(),rootParents));
  }
 else {
    throw new IllegalArgumentException(""Recovered configured object record "" + record + "" has no recorded parents and is not a valid child type""+ "" [""+ Arrays.toString(childTypesOfRoot.toArray())+ ""]""+ "" for the root ""+ _root);
  }
}
 else {
  newRecords.add(record);
}
",0,0,0,,
1636,{,"if (e instanceof CertificateExpiredException || ""Certificate expired"".equals(e.getMessage())) {
}
 else {
  throw e;
}
",0,0,0,,
1637,{,"if (e instanceof CertificateExpiredException || ""Certificate expired"".equals(e.getMessage())) {
}
 else {
  throw e;
}
",0,0,0,,
1638,{,"if (!exchange.isBound(method.getBindingKey(),method.getArguments(),queue)) {
  try {
    exchange.addBinding(method.getBindingKey(),queue,method.getArguments());
  }
 catch (  AccessControlException e) {
    exception(session,method,ExecutionErrorCode.UNAUTHORIZED_ACCESS,e.getMessage());
  }
catch (  AMQInvalidArgumentException e) {
    exception(session,method,ExecutionErrorCode.INVALID_ARGUMENT,String.format(""Cannot bind queue '%s' to exchange '%s' due to invalid argument : %s"",queue.getName(),exchangeName,e.getMessage()));
  }
}
 else {
}
",0,0,0,,
1639,{,"if (e.getSQLState().equalsIgnoreCase(""08006"")) {
}
 else {
  throw new RuntimeException(e);
}
",0,0,0,,
1640,{,"if (_inputHandleToEndpoint.containsKey(handle)) {
  LinkEndpoint<? extends BaseSource,? extends BaseTarget> endpoint=_inputHandleToEndpoint.remove(handle);
  endpoint.remoteDetached(detach);
  _endpointToOutputHandle.remove(endpoint);
  _associatedLinkEndpoints.remove(endpoint);
}
 else {
}
",0,0,0,,
1641,{,"if (deliveryState instanceof Outcome) {
  boolean settled=shouldReceiverSettleFirst(transferReceiverSettleMode);
  updateDisposition(delivery.getDeliveryTag(),deliveryState,settled);
  return null;
}
 else {
}
",0,0,0,,
1642,{,"if (e.getSQLState().equalsIgnoreCase(DerbyUtils.DERBY_SINGLE_DB_SHUTDOWN_CODE)) {
}
 else {
  throw e;
}
",0,0,0,,
1643,{,"if (e.getSQLState().equalsIgnoreCase(""08006"")) {
}
 else {
  throw e;
}
",0,0,0,,
1644,{,"if (preferencesParts.size() == 0) {
}
 else {
  throw new IllegalArgumentException(String.format(""unexpected path '%s'"",Joiner.on(""/"").join(preferencesParts)));
}
",0,0,0,,
1645,{,"if (participantName.equals(TestResultAggregator.ALL_PARTICIPANTS_NAME)) {
}
 else if (participantName.equals(TestResultAggregator.ALL_PRODUCER_PARTICIPANTS_NAME)) {
  reportedTotalMessagesSent=numberOfMessages;
}
 else if (participantName.equals(TestResultAggregator.ALL_CONSUMER_PARTICIPANTS_NAME)) {
  reportedTotalMessagesReceived=numberOfMessages;
}
 else if (participantName.contains(""Producer"")) {
  actualMessagesSent+=numberOfMessages;
}
 else if (participantName.contains(""Consumer"")) {
  actualMessagesReceived+=numberOfMessages;
}
",0,0,0,,
1646,{,"if (original instanceof IOException) {
}
 else {
  throw new RuntimeException(original);
}
",0,0,0,,
1647,{,"if (response.getBody() instanceof Flow || response.getBody() instanceof Disposition) {
}
 else {
  fail(""Unexpected frame "" + response.getBody());
}
",0,0,0,,
1648,{,"if (nextResponse.getBody() instanceof Flow || nextResponse.getBody() instanceof Disposition) {
}
 else {
  fail(""Unexpected frame "" + nextResponse.getBody());
}
",0,0,0,,
1649,{,"if (_saslMechanism == null) {
}
 else if (""CRAM-MD5"".equals(_saslMechanism)) {
  _cookies=performCramMD5Authentication();
}
 else {
  throw new IllegalArgumentException(""Unsupported SASL mechanism :"" + _saslMechanism);
}
",0,0,0,,
1650,{,"if (assertNode) {
  declareExchange(dest.getAddressName(),node.getExchangeType(),false,node.isDurable(),node.isAutoDelete(),node.getDeclareArgs(),true);
}
 else {
}
",0,0,0,,
1651,{,"if (body.startsWith(""DROP"")) {
}
 else if (body.startsWith(""EXCP"")) {
  ExecutionException exc=new ExecutionException();
  exc.setDescription(""intentional exception for testing"");
  ssn.invoke(exc);
  ssn.close();
}
 else {
  throw new IllegalArgumentException(""unrecognized message: "" + body);
}
",0,0,0,,
1652,{,"if (transportSession != null) {
}
 else {
  SessionImpl session;
  if (begin.getRemoteChannel() == null) {
    session=_connectionEndpoint.session();
    transportSession=getTransportState(session);
  }
 else {
    transportSession=_localSessions.get(begin.getRemoteChannel().intValue());
    if (transportSession == null) {
      throw new NullPointerException(""uncorrelated channel: "" + begin.getRemoteChannel());
    }
    session=transportSession.getSession();
  }
  transportSession.setRemoteChannel(channel);
  session.setRemoteState(EndpointState.ACTIVE);
  transportSession.setNextIncomingId(begin.getNextOutgoingId());
  session.setRemoteProperties(begin.getProperties());
  session.setRemoteDesiredCapabilities(begin.getDesiredCapabilities());
  session.setRemoteOfferedCapabilities(begin.getOfferedCapabilities());
  _remoteSessions.put(channel,transportSession);
  _connectionEndpoint.put(Event.Type.SESSION_REMOTE_OPEN,session);
}
",0,0,0,,
1653,{,"if (transportSession == null) {
}
 else {
  SessionImpl session=transportSession.getSession();
  final UnsignedInteger handle=attach.getHandle();
  if (handle.compareTo(transportSession.getHandleMax()) > 0) {
    ErrorCondition condition=new ErrorCondition(ConnectionError.FRAMING_ERROR,""handle-max exceeded"");
    _connectionEndpoint.setCondition(condition);
    _connectionEndpoint.setLocalState(EndpointState.CLOSED);
    if (!_isCloseSent) {
      Close close=new Close();
      close.setError(condition);
      _isCloseSent=true;
      writeFrame(0,close,null,null);
    }
    close_tail();
    return;
  }
  TransportLink<?> transportLink=transportSession.getLinkFromRemoteHandle(handle);
  LinkImpl link=null;
  if (transportLink != null) {
  }
 else {
    transportLink=transportSession.resolveHalfOpenLink(attach.getName(),Role.RECEIVER == attach.getRole());
    if (transportLink == null) {
      link=(attach.getRole() == Role.RECEIVER) ? session.sender(attach.getName()) : session.receiver(attach.getName());
      transportLink=getTransportState(link);
    }
 else {
      link=transportLink.getLink();
    }
    if (attach.getRole() == Role.SENDER) {
      transportLink.setDeliveryCount(attach.getInitialDeliveryCount());
    }
    link.setRemoteState(EndpointState.ACTIVE);
    link.setRemoteSource(attach.getSource());
    link.setRemoteTarget(attach.getTarget());
    link.setRemoteReceiverSettleMode(attach.getRcvSettleMode());
    link.setRemoteSenderSettleMode(attach.getSndSettleMode());
    link.setRemoteProperties(attach.getProperties());
    link.setRemoteDesiredCapabilities(attach.getDesiredCapabilities());
    link.setRemoteOfferedCapabilities(attach.getOfferedCapabilities());
    link.setRemoteMaxMessageSize(attach.getMaxMessageSize());
    transportLink.setName(attach.getName());
    transportLink.setRemoteHandle(handle);
    transportSession.addLinkRemoteHandle(transportLink,handle);
  }
  _connectionEndpoint.put(Event.Type.LINK_REMOTE_OPEN,link);
}
",0,0,0,,
1654,{,"if (transportLink != null) {
}
 else {
  transportLink=transportSession.resolveHalfOpenLink(attach.getName(),Role.RECEIVER == attach.getRole());
  if (transportLink == null) {
    link=(attach.getRole() == Role.RECEIVER) ? session.sender(attach.getName()) : session.receiver(attach.getName());
    transportLink=getTransportState(link);
  }
 else {
    link=transportLink.getLink();
  }
  if (attach.getRole() == Role.SENDER) {
    transportLink.setDeliveryCount(attach.getInitialDeliveryCount());
  }
  link.setRemoteState(EndpointState.ACTIVE);
  link.setRemoteSource(attach.getSource());
  link.setRemoteTarget(attach.getTarget());
  link.setRemoteReceiverSettleMode(attach.getRcvSettleMode());
  link.setRemoteSenderSettleMode(attach.getSndSettleMode());
  link.setRemoteProperties(attach.getProperties());
  link.setRemoteDesiredCapabilities(attach.getDesiredCapabilities());
  link.setRemoteOfferedCapabilities(attach.getOfferedCapabilities());
  link.setRemoteMaxMessageSize(attach.getMaxMessageSize());
  transportLink.setName(attach.getName());
  transportLink.setRemoteHandle(handle);
  transportSession.addLinkRemoteHandle(transportLink,handle);
}
",0,0,0,,
1655,{,"if (transportSession == null) {
}
 else {
  transportSession.handleFlow(flow);
}
",0,0,0,,
1656,{,"if (transportSession != null) {
  transportSession.handleTransfer(transfer,payload);
}
 else {
}
",0,0,0,,
1657,{,"if (transportSession == null) {
}
 else {
  transportSession.handleDisposition(disposition);
}
",0,0,0,,
1658,{,"if (transportSession == null) {
}
 else {
  TransportLink<?> transportLink=transportSession.getLinkFromRemoteHandle(detach.getHandle());
  if (transportLink != null) {
    LinkImpl link=transportLink.getLink();
    transportLink.receivedDetach();
    transportSession.freeRemoteHandle(transportLink.getRemoteHandle());
    if (detach.getClosed()) {
      _connectionEndpoint.put(Event.Type.LINK_REMOTE_CLOSE,link);
    }
 else {
      _connectionEndpoint.put(Event.Type.LINK_REMOTE_DETACH,link);
    }
    transportLink.clearRemoteHandle();
    link.setRemoteState(EndpointState.CLOSED);
    if (detach.getError() != null) {
      link.getRemoteCondition().copyFrom(detach.getError());
    }
  }
 else {
  }
}
",0,0,0,,
1659,{,"if (transportLink != null) {
  LinkImpl link=transportLink.getLink();
  transportLink.receivedDetach();
  transportSession.freeRemoteHandle(transportLink.getRemoteHandle());
  if (detach.getClosed()) {
    _connectionEndpoint.put(Event.Type.LINK_REMOTE_CLOSE,link);
  }
 else {
    _connectionEndpoint.put(Event.Type.LINK_REMOTE_DETACH,link);
  }
  transportLink.clearRemoteHandle();
  link.setRemoteState(EndpointState.CLOSED);
  if (detach.getError() != null) {
    link.getRemoteCondition().copyFrom(detach.getError());
  }
}
 else {
}
",0,0,0,,
1660,{,"if (transportSession == null) {
}
 else {
  _remoteSessions.remove(channel);
  transportSession.receivedEnd();
  transportSession.unsetRemoteChannel();
  SessionImpl session=transportSession.getSession();
  session.setRemoteState(EndpointState.CLOSED);
  ErrorCondition errorCondition=end.getError();
  if (errorCondition != null) {
    session.getRemoteCondition().copyFrom(errorCondition);
  }
  _connectionEndpoint.put(Event.Type.SESSION_REMOTE_CLOSE,session);
}
",0,0,0,,
1661,} else {,"if (vhost.isEmpty()) {
  connection.setHostname(null);
}
 else {
}
",0,0,0,,
1662,{,"if (e.type.toString().equals(""<type 'exceptions.SystemExit'>"") && e.value.toString().equals(""0"")) {
}
 else {
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,""Jython interpreter failed. Test failures?"",e);
  }
  fail(""Caught PyException on invocation number "" + invocationsSoFar + "": ""+ e.toString()+ "" with message: ""+ e.getMessage());
}
",0,0,0,,
1663,} else {,"if (SPConstants.LAYOUT_LAX.equals(value) || SPConstants.LAYOUT_STRICT.equals(value) || SPConstants.LAYOUT_LAX_TIMESTAMP_FIRST.equals(value)|| SPConstants.LAYOUT_LAX_TIMESTAMP_LAST.equals(value)) {
  this.value=value;
}
 else {
}
",0,0,0,,
1664,} else {,"if (SPConstants.ENCRYPT_BEFORE_SIGNING.equals(protectionOrder) || SPConstants.SIGN_BEFORE_ENCRYPTING.equals(protectionOrder)) {
  this.protectionOrder=protectionOrder;
}
 else {
}
",0,0,0,,
1665,{,"if (job instanceof AbstractJob) {
}
",0,0,0,,
1666,} else {,"if (evaluatorId2ContextId2ContextMap.containsKey(value.getEvaluatorId()) && evaluatorId2ContextId2ContextMap.get(value.getEvaluatorId()).containsKey(value.getId())) {
  evaluatorId2ContextId2ContextMap.get(value.getEvaluatorId()).remove(value.getEvaluatorId());
}
 else {
}
",0,0,0,,
1667,} else {,"if (!commonDirectory.isDirectory()) {
}
 else {
}
",0,0,0,,
1668,} else {,"if (!this.isLocked(group,mq,clientId)) {
  try {
    this.lock.lockInterruptibly();
    try {
      ConcurrentHashMap<MessageQueue,LockEntry> groupValue=this.mqLockTable.get(group);
      if (null == groupValue) {
        groupValue=new ConcurrentHashMap<>(32);
        this.mqLockTable.put(group,groupValue);
      }
      LockEntry lockEntry=groupValue.get(mq);
      if (null == lockEntry) {
        lockEntry=new LockEntry();
        lockEntry.setClientId(clientId);
        groupValue.put(mq,lockEntry);
        log.info(""tryLock, message queue not locked, I got it. Group: {} NewClientId: {} {}"",group,clientId,mq);
      }
      if (lockEntry.isLocked(clientId)) {
        lockEntry.setLastUpdateTimestamp(System.currentTimeMillis());
        return true;
      }
      String oldClientId=lockEntry.getClientId();
      if (lockEntry.isExpired()) {
        lockEntry.setClientId(clientId);
        lockEntry.setLastUpdateTimestamp(System.currentTimeMillis());
        log.warn(""tryLock, message queue lock expired, I got it. Group: {} OldClientId: {} NewClientId: {} {}"",group,oldClientId,clientId,mq);
        return true;
      }
      log.warn(""tryLock, message queue locked by other client. Group: {} OtherClientId: {} NewClientId: {} {}"",group,oldClientId,clientId,mq);
      return false;
    }
  finally {
      this.lock.unlock();
    }
  }
 catch (  InterruptedException e) {
    log.error(""putMessage exception"",e);
  }
}
 else {
}
",0,0,0,,
1669,} else {,"if (logger != null) {
  logger.info(name + ""="" + value);
}
 else {
}
",0,0,0,,
1670,} else {,"if (response != null) {
  response.setOpaque(opaque);
  response.markResponseType();
  try {
    ctx.writeAndFlush(response);
  }
 catch (  Throwable e) {
    log.error(""process request over, but response failed"",e);
    log.error(cmd.toString());
    log.error(response.toString());
  }
}
 else {
}
",0,0,0,,
1671,if (DefaultMessageStore.this.commitLog.retryDeleteFirstFile(destroyMapedFileIntervalForcibly)) {,"if (DefaultMessageStore.this.commitLog.retryDeleteFirstFile(destroyMapedFileIntervalForcibly)) {
}
",0,0,4,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
1672,} else {,"if (client.isCleanSession()) {
  subscriptionStore.getTopicFilters(client.getId()).forEach(filter -> {
    subscriptionStore.getTopics(filter).forEach(topic -> {
      subscriptionStore.remove(topic,client);
    }
);
  }
);
  clientManager.remove(channel);
}
 else {
}
",0,0,0,,
1673,{,"if (this.qualifiers == other.qualifiers) {
}
 else if (this.qualifiers != null && other.qualifiers != null) {
  result=this.qualifiers.equals(other.qualifiers);
}
 else {
  result=false;
}
",0,0,0,,
1674,{,"if ((all || (var.indexOf(keyword) != -1) || ((description != null) && (description.toLowerCase().indexOf(keyword) != -1))|| (keyword.matches(var))|| ((sesaila.get(var) != null) && (sesaila.get(var)).indexOf(keyword) != -1)) && (!info.isHidden()) && (!info.isRemoved())&& (advanced || !info.isAdvanced())) {
  if (printaliases && sesaila.containsKey(var))   printSet.add(sesaila.get(var));
 else   printSet.add(var);
}
 else {
}
",0,0,0,,
1675,{,"if (info.isRemoved()) {
}
 else if (info.isDeprecated() && configurationBuffer.getVar(var) != null) {
  String replacement=info.getDeprecatedReplacement();
  String since=info.getDeprecatedSince();
  DeprecatedConfigurationOptionProblem problem=new DeprecatedConfigurationOptionProblem(var,replacement,since,cv.getSource(),cv.getLine());
  configurationProblems.add(problem);
}
 else if (warnOnRoyaleOnlyOptionUsage && info.isRoyaleOnly()) {
  RoyaleOnlyConfigurationOptionNotSupported problem=new RoyaleOnlyConfigurationOptionNotSupported(var,cv.getSource(),cv.getLine());
  configurationProblems.add(problem);
}
",0,0,0,,
1676,{,"if (value != null) {
  assert false;
}
 else {
}
",0,0,0,,
1677,{,"if (value != null) {
  assert false;
}
 else {
}
",0,0,0,,
1678,{,"if (qname.equals(rootElement)) {
}
 else if (ctx.item != null) {
  final ParseValue v=new ParseValue();
  v.name=qname;
  v.value=text.toString();
  v.line=locator.getLineNumber();
  ctx.argList.add(v);
  text.setLength(0);
  ctx.item=null;
}
 else if (ctx.var != null) {
  if ((ctx.varArgCount > 1) && (ctx.argList.size() == 0)) {
    throw new SAXConfigurationException(new ConfigurationException.IncorrectArgumentCount(ctx.varArgCount,0,ctx.var,source,locator.getLineNumber()),locator);
  }
  if (ctx.varArgCount == 1) {
    ParseValue v=new ParseValue();
    v.name=null;
    v.value=text.toString();
    v.line=locator.getLineNumber();
    ctx.argList.add(v);
    text.setLength(0);
  }
 else {
    if (text.length() > 0) {
      throw new SAXConfigurationException(new ConfigurationException.UnexpectedCDATA(source,locator.getLineNumber()),locator);
    }
  }
  try {
    setVar(ctx.var,ctx.argList,locator.getLineNumber(),ctx.append);
    ctx.var=null;
    ctx.argList.clear();
    ctx.item=null;
    ctx.append=false;
  }
 catch (  ConfigurationException e) {
    throw new SAXConfigurationException(e,locator);
  }
}
 else {
  contextStack.pop();
}
",0,0,0,,
1679,{,"if (suffix.equals("".swc"")) {
}
 else {
  fbArgs.add(aspr.applicationPath);
}
",0,0,0,,
1680,{,"if (inQuotes) {
  buffer.append(c);
}
 else {
}
",0,0,0,,
1681,{,"if (first.isVar()) {
}
 else if (first.isFunction()) {
}
 else if (first.isAssign()) {
  if (first.getFirstChild().isGetProp() && first.getLastChild().isFunction()) {
    visitMethod(t,first);
  }
 else {
  }
}
 else if (first.isGetProp()) {
  JSDocInfo jsDocInfo=first.getJSDocInfo();
  if (jsDocInfo != null && jsDocInfo.hasTypedefType()) {
    continue;
  }
 else   if (jsDocInfo != null && (jsDocInfo.getParameterCount() > 0 || jsDocInfo.getReturnType() != null)) {
    visitMethodFromJSDoc(t,first);
  }
 else {
    visitGetProp(t,first);
  }
}
",0,0,0,,
1682,{,"if (first.isFunction()) {
}
 else if (first.isAssign()) {
  if (first.getFirstChild().isGetProp() && first.getLastChild().isFunction()) {
    visitMethod(t,first);
  }
 else {
  }
}
 else if (first.isGetProp()) {
  JSDocInfo jsDocInfo=first.getJSDocInfo();
  if (jsDocInfo != null && jsDocInfo.hasTypedefType()) {
    continue;
  }
 else   if (jsDocInfo != null && (jsDocInfo.getParameterCount() > 0 || jsDocInfo.getReturnType() != null)) {
    visitMethodFromJSDoc(t,first);
  }
 else {
    visitGetProp(t,first);
  }
}
",0,0,0,,
1683,{,"if (first.getFirstChild().isGetProp() && first.getLastChild().isFunction()) {
  visitMethod(t,first);
}
 else {
}
",0,0,0,,
1684,{,"if (comment.hasEnumParameterType()) {
}
 else {
  model.addNamespace(child,first.getQualifiedName());
}
",0,0,0,,
1685,{,"if (first.isQualifiedName()) {
}
 else if (first.isAssign()) {
  comment=first.getJSDocInfo();
  Node firstAssignChild=first.getFirstChild();
  Node lastAssignChild=first.getLastChild();
  if (lastAssignChild.isObjectLit()) {
    if (comment == null) {
      StaticSourceFile ssf=first.getStaticSourceFile();
      String source=getSourceCode(ssf,first.getLineno());
      DummyNode node=new DummyNode();
      String externName=getSourceFileName(ssf.getName(),model);
      node.setSourcePath(externName);
      node.setLine(first.getLineno());
      VariableHasNoTypeDeclarationProblem problem=new VariableHasNoTypeDeclarationProblem(node,source);
      model.problems.add(problem);
      return;
    }
    if (comment.getType() != null) {
      model.addClass(first,firstAssignChild.getQualifiedName());
    }
 else     if (comment.isConstant()) {
      model.addClass(first,firstAssignChild.getQualifiedName());
    }
 else     if (comment.hasEnumParameterType()) {
      err(first);
      model.addEnum(first,firstAssignChild.getQualifiedName());
    }
 else {
      err(""Unhandled expression result:"");
      err(child);
    }
  }
}
",0,0,0,,
1686,{,"if (!result.success) {
}
",0,0,0,,
1687,{,"if (typePosition != null) {
}
",0,0,0,,
1688,{,"if (getQualifiedName().equals(""Object"") && functionName.equals(""toString"")) {
}
 else if (getQualifiedName().equals(""Object"") && functionName.equals(""toJSON"")) {
}
 else {
  instanceMethods.put(functionName,method);
}
",0,0,0,,
1689,{,"if (getQualifiedName().equals(""Object"") && functionName.equals(""toJSON"")) {
}
 else {
  instanceMethods.put(functionName,method);
}
",0,0,0,,
1690,{,"if (getComment().hasBaseType()) {
  emitSuperClass(sb);
  sb.append("" "");
}
 else {
}
",0,0,0,,
1691,{,"if (type == ContainerType.IMPLICIT) {
}
 else if (type == ContainerType.PARENTHESIS) {
  write(ASEmitterTokens.PAREN_OPEN);
  postFix=ASEmitterTokens.PAREN_CLOSE.getToken();
}
",0,0,0,,
1692,{,"if (!isImplicit((IContainerNode)node.getScopedNode())) {
  emitMethodScope(node.getScopedNode());
}
 else {
}
",0,0,0,,
1693,{,"if (inode.getParent() instanceof IMemberAccessExpressionNode) {
}
 else {
  write(""Super.call"");
}
",0,0,0,,
1694,{,"if (indentFromThis == null) {
}
",0,0,0,,
1695,{,"if (type == IContainerNode.ContainerType.IMPLICIT) {
}
 else if (type == IContainerNode.ContainerType.PARENTHESIS) {
  preFix=ASEmitterTokens.PAREN_OPEN.getToken();
  postFix=ASEmitterTokens.PAREN_CLOSE.getToken();
}
",0,0,0,,
1696,{,"if (fnode.isConstructor()) {
}
",0,0,0,,
1697,{,"if (!isDoc) {
}
",0,0,0,,
1698,{,"if (pnode instanceof IPackageNode) {
}
 else if (pnode instanceof IClassNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IInterfaceNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IFunctionNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof INamespaceNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IVariableNode) {
  getWalker().walk(pnode);
}
",0,0,0,,
1699,{,"if (!isDoc) {
}
",0,0,0,,
1700,{,"if (pnode instanceof IPackageNode) {
}
 else if (pnode instanceof IClassNode) {
}
 else if (pnode instanceof IInterfaceNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IFunctionNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof INamespaceNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IVariableNode) {
  getWalker().walk(pnode);
}
",0,0,0,,
1701,{,"if (pnode instanceof IClassNode) {
}
 else if (pnode instanceof IInterfaceNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IFunctionNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof INamespaceNode) {
  getWalker().walk(pnode);
}
 else if (pnode instanceof IVariableNode) {
  getWalker().walk(pnode);
}
",0,0,0,,
1702,{,"if (super.publish(problems)) {
}
",0,0,0,,
1703,{,"if (watcherInfoBase.isRoot && makeStaticWatcher) {
}
",0,0,0,,
1704,{,"if (""PropertyReference"".equals(functionCall.name)) {
}
 else if (""calc"".equals(functionCall.name)) {
  line.append(""null"");
}
 else if (""Embed"".equals(functionCall.name)) {
}
 else if (otherCSSFunctions.contains(functionCall.name)) {
  line.append(""null"");
}
 else {
  assert false : ""CSS parser bug: unexpected function call property value: "" + functionCall;
  throw new IllegalStateException(""Unexpected function call property value: "" + functionCall);
}
",0,0,0,,
1705,{,"if (""Embed"".equals(functionCall.name)) {
}
 else if (otherCSSFunctions.contains(functionCall.name)) {
  line.append(""null"");
}
 else {
  assert false : ""CSS parser bug: unexpected function call property value: "" + functionCall;
  throw new IllegalStateException(""Unexpected function call property value: "" + functionCall);
}
",0,0,0,,
1706,{,"if (trait_value == null) {
}
 else if (trait_value instanceof String) {
  visitPooledString((String)trait_value);
}
 else if (trait_value instanceof Namespace) {
  visitPooledNamespace((Namespace)trait_value);
}
 else if (trait_value instanceof Double) {
  visitPooledDouble((Double)trait_value);
}
 else if (trait_value instanceof Integer) {
  visitPooledInt((Integer)trait_value);
}
 else if (trait_value instanceof Long) {
  visitPooledUInt((Long)trait_value);
}
 else if (trait_value.equals(ABCConstants.UNDEFINED_VALUE) || trait_value.equals(ABCConstants.NULL_VALUE) || trait_value.equals(Boolean.TRUE)|| trait_value.equals(Boolean.FALSE)) {
}
 else {
  throw new IllegalStateException(""Unrecognized initializer type: "" + trait_value.getClass().toString());
}
",0,0,0,,
1707,{,"if (trait_value.equals(ABCConstants.UNDEFINED_VALUE) || trait_value.equals(ABCConstants.NULL_VALUE) || trait_value.equals(Boolean.TRUE)|| trait_value.equals(Boolean.FALSE)) {
}
 else {
  throw new IllegalStateException(""Unrecognized initializer type: "" + trait_value.getClass().toString());
}
",0,0,0,,
1708,{,"if (target.get(i) == null) {
  target.set(i,value);
}
 else {
}
",0,0,0,,
1709,{,"if (child instanceof TextGraphicNode) {
  definition=(IClassDefinition)getDefinition(packageRichText);
  if (definition != null) {
    varContext.setVar(definition,NodeType.RICHTEXT);
    elementVar=varContext.elementVar;
    generateTextVariable(child,srcContext,varContext);
    buf.append(""        "").append(contentVar).append("".push("").append(elementVar).append("");\r\n"");
  }
}
 else {
}
",0,0,0,,
1710,{,"if (modifier == ASModifier.DYNAMIC) {
}
",0,0,0,,
1711,{,"if (parent instanceof IMXMLModelPropertyNode) {
}
 else {
  System.err.println(""findDestinationString can't parse parent: "" + parent);
}
",0,0,0,,
1712,{,"if (left instanceof IIdentifierNode && right instanceof IIdentifierNode) {
  ret=((IIdentifierNode)left).getName() + ""."" + ((IIdentifierNode)right).getName();
}
 else {
}
",0,0,0,,
1713,{,"if (!(node instanceof InstructionListNode)) {
}
",0,0,0,,
1714,{,"if (watcherInfoBase.isRoot && makeStaticWatcher) {
}
",0,0,0,,
1715,{,"if (watcherInfo.isRoot && makeStaticWatcher) {
}
",0,0,0,,
1716,{,"if (name.equals(""advancedAntiAliasing"")) {
  advancedAAValue=value;
}
 else {
}
",0,0,0,,
1717,{,"if (""PropertyReference"".equals(functionCall.name)) {
}
 else if (""Embed"".equals(functionCall.name)) {
  final EmbedCompilationUnit embedCompilationUnit=session.resolvedEmbedProperties.get(functionCall);
  if (embedCompilationUnit == null) {
    final ICompilerProblem e=new CSSCodeGenProblem(new IllegalStateException(""Unable to find compilation unit for "" + functionCall));
    problems.add(e);
  }
 else {
    final String qName=embedCompilationUnit.getName();
    final IResolvedQualifiersReference reference=ReferenceFactory.packageQualifiedReference(project.getWorkspace(),qName);
    valueInstructions.addInstruction(ABCConstants.OP_getlex,reference.getMName());
  }
}
 else {
  if (project.isRoyale()) {
    valueInstructions.addInstruction(ABCConstants.OP_pushstring,functionCall.toString());
  }
 else {
    assert false : ""CSS parser bug: unexpected function call property value: "" + functionCall;
    throw new IllegalStateException(""Unexpected function call property value: "" + functionCall);
  }
}
",0,0,0,,
1718,{,"if (""null"".equals(functionCall.rawArguments)) {
}
 else {
  final String qName;
  if (CSSStringPropertyValue.isQuoted(functionCall.rawArguments))   qName=stripQuotes(functionCall.rawArguments);
 else   qName=functionCall.rawArguments;
  final IDefinition definition=project.resolveQNameToDefinition(qName);
  if (definition != null && definition instanceof IClassDefinition) {
    classReferences.add((IClassDefinition)definition);
  }
 else {
    final CSSUnresolvedClassReferenceProblem problem=new CSSUnresolvedClassReferenceProblem(functionCall);
    problems.add(problem);
  }
}
",0,0,0,,
1719,{,"if (EmbedAttribute.ADV_ANTI_ALIASING.equals(key) || EmbedAttribute.EMBED_AS_CFF.equals(key) || EmbedAttribute.UNICODE_RANGE.equals(key)|| EmbedAttribute.FONT_FAMILY.equals(key)|| EmbedAttribute.FONT_NAME.equals(key)|| EmbedAttribute.FONT_STYLE.equals(key)|| EmbedAttribute.FONT_WEIGHT.equals(key)|| EmbedAttribute.SYSTEM_FONT.equals(key)|| EmbedAttribute.SOURCE_LIST.equals(key)) {
}
 else {
  problems.add(new EmbedUnknownAttributeProblem(location,key));
  hadError=true;
}
",0,0,0,,
1720,{,"if (state == 2) {
  baos.write(b);
}
 else {
}
",0,0,0,,
1721,{,"if (isVersionGreaterThanCompiler()) {
}
 else {
  problems.add(new FXGInvalidNodeAttributeProblem(getDocumentPath(),getStartLine(),getStartColumn(),name,getNodeName()));
}
",0,0,0,,
1722,{,"if (FXG_ID_ATTRIBUTE.equals(name)) {
}
 else {
  super.setAttribute(name,value,problems);
}
",0,0,0,,
1723,{,"if (FXG_ID_ATTRIBUTE.equals(name)) {
}
 else {
  problems.add(new FXGInvalidNodeAttributeProblem(getDocumentPath(),getStartLine(),getStartColumn(),name,getNodeName()));
  return;
}
",0,0,0,,
1724,{,"if (curTag.isEmptyTag()) {
}
 else if (curTag.isOpenTag()) {
  tagStack.push(curTag);
}
 else if (curTag.isCloseTag()) {
  if (tagStack.isEmpty()) {
    return null;
  }
  IMXMLTagData pop=tagStack.pop();
  if (!pop.getName().equals(curTag.getName()) && !pop.getShortName().equals(curTag.getShortName())) {
    return null;
  }
  if (pop == this) {
    result=curTag;
  }
  if (tagStack.isEmpty()) {
    if (result != null && result.isImplicit() && !includeImplicit)     return null;
    return result;
  }
}
",0,0,0,,
1725,{,"if (metadataToken != null) {
  payload.add(metadataToken);
  setEnd(token.getEnd());
}
 else {
}
",0,0,0,,
1726,{,"if (nextToken == null) {
}
 else if (nextToken.getType() == ASTokenTypes.EOF) {
}
 else if (nextToken.getType() == ASTokenTypes.TOKEN_SEMICOLON) {
  consume();
}
 else if (nextToken.getTokenKind() == ASTokenKind.SCOPE_CLOSE) {
}
 else if (nextToken.getType() == ASTokenTypes.TOKEN_KEYWORD_ELSE) {
}
 else if (nextToken.getLine() > previous().getLine()) {
  insertSemicolon(false);
}
 else if (!nextToken.getSourcePath().equals(previous().getSourcePath())) {
  insertSemicolon(false);
}
 else {
  return false;
}
",0,0,0,,
1727,{,"if (nextToken.getType() == ASTokenTypes.EOF) {
}
 else if (nextToken.getType() == ASTokenTypes.TOKEN_SEMICOLON) {
  consume();
}
 else if (nextToken.getTokenKind() == ASTokenKind.SCOPE_CLOSE) {
}
 else if (nextToken.getType() == ASTokenTypes.TOKEN_KEYWORD_ELSE) {
}
 else if (nextToken.getLine() > previous().getLine()) {
  insertSemicolon(false);
}
 else if (!nextToken.getSourcePath().equals(previous().getSourcePath())) {
  insertSemicolon(false);
}
 else {
  return false;
}
",0,0,0,,
1728,{,"if (nextToken.getTokenKind() == ASTokenKind.SCOPE_CLOSE) {
}
 else if (nextToken.getType() == ASTokenTypes.TOKEN_KEYWORD_ELSE) {
}
 else if (nextToken.getLine() > previous().getLine()) {
  insertSemicolon(false);
}
 else if (!nextToken.getSourcePath().equals(previous().getSourcePath())) {
  insertSemicolon(false);
}
 else {
  return false;
}
",0,0,0,,
1729,{,"if (nextToken.getType() == ASTokenTypes.TOKEN_KEYWORD_ELSE) {
}
 else if (nextToken.getLine() > previous().getLine()) {
  insertSemicolon(false);
}
 else if (!nextToken.getSourcePath().equals(previous().getSourcePath())) {
  insertSemicolon(false);
}
 else {
  return false;
}
",0,0,0,,
1730,{,"if (newMetaTags != null) {
  IMetaTag[] oldMetaTags=currentClassDefinition.getAllMetaTags();
  IMetaTag[] mergedTags=newMetaTags;
  if (oldMetaTags != null) {
    mergedTags=new IMetaTag[oldMetaTags.length + newMetaTags.length];
    System.arraycopy(oldMetaTags,0,mergedTags,0,oldMetaTags.length);
    System.arraycopy(newMetaTags,0,mergedTags,oldMetaTags.length,newMetaTags.length);
  }
  currentClassDefinition.setMetaTags(mergedTags);
}
 else {
}
",0,0,0,,
1731,} else {,"if (node instanceof ConfigNamespaceNode) {
  if (!nsNames.contains(((ConfigNamespaceNode)node).getName())) {
    configNamespaces.add((ConfigNamespaceNode)node);
    nsNames.add(((ConfigNamespaceNode)node).getName());
  }
}
 else {
}
",0,0,0,,
1732,{,"if (parentDef instanceof IFunctionDefinition) {
}
 else {
  String qname=def.getQualifiedName();
  if (!apiMap.containsKey(qname)) {
    apiMap.put(qname,new Integer(1));
    return;
  }
 else {
    Integer counter=apiMap.get(qname);
    int newCounter=counter.intValue() + 1;
    apiMap.put(qname,new Integer(newCounter));
  }
}
",0,0,0,,
1733,{,"if (lookupKind.findInstance() && lookupKind.findStatics()) {
}
 else if (lookupKind.findStatics()) {
  defs=new FilteredCollection<IDefinition>(STATIC_ONLY_PREDICATE,defs);
}
 else if (lookupKind.findInstance()) {
  defs=new FilteredCollection<IDefinition>(INSTANCE_ONLY_PREDICATE,defs);
}
",0,0,0,,
1734,{,"if (return_type == null) {
}
 else if (def instanceof ISetterDefinition && (return_type != project.getBuiltinType(BuiltinType.VOID) && return_type != project.getBuiltinType(BuiltinType.ANY_TYPE))) {
  addProblem(new BadSetterReturnTypeProblem(iNode.getReturnTypeNode()));
}
",0,0,0,,
1735,{,"if (def instanceof SetterDefinition || def instanceof GetterDefinition) {
}
 else if (def instanceof IFunctionDefinition || def instanceof ClassDefinition) {
  if (is_incr)   addProblem(new InvalidIncrementOperandProblem(iNode));
 else   addProblem(new InvalidDecrementOperandProblem(iNode));
}
 else if (SemanticUtils.isConstDefinition(def)) {
  if (is_incr)   addProblem(new InvalidIncrementOperandProblem(iNode));
 else   addProblem(new InvalidDecrementOperandProblem(iNode));
}
",0,0,0,,
1736,{,"if (def instanceof SetterDefinition || def instanceof GetterDefinition) {
}
 else if (def instanceof IFunctionDefinition) {
  addProblem(new AssignToFunctionProblem(iNode,binding.getName().getBaseName()));
}
 else if (def instanceof ClassDefinition) {
  addProblem(new IllegalAssignmentToClassProblem(roundUpUsualSuspects(binding,iNode),binding.getName().getBaseName()));
}
",0,0,0,,
1737,{,"if (def instanceof GetterDefinition) {
}
 else if (def instanceof FunctionDefinition) {
  final FunctionDefinition func_def=(FunctionDefinition)def;
switch (func_def.getFunctionClassification()) {
case CLASS_MEMBER:
case INTERFACE_MEMBER:
    addProblem(new MethodCannotBeConstructorProblem(call_node));
  break;
}
if (func_def.isConstructor()) {
IDefinition class_def=func_def.getParent();
checkPrivateConstructorNewExpr(call_node,null,class_def,func_def);
}
}
 else if (def == null) {
addProblem(new UnresolvedClassReferenceProblem(call_node,func_name.getDisplayString()));
}
",0,0,0,,
1738,{,"if (def instanceof GetterDefinition) {
}
 else if (def instanceof FunctionDefinition) {
  FunctionDefinition func_def=(FunctionDefinition)def;
  IFunctionDefinition.FunctionClassification func_type=func_def.getFunctionClassification();
  if (func_def.isConstructor()) {
    IDefinition class_def=func_def.getParent();
    checkPrivateConstructorNewExpr(iNode,class_binding,class_def,func_def);
  }
 else   if (func_type.equals(IFunctionDefinition.FunctionClassification.CLASS_MEMBER) || func_type.equals(IFunctionDefinition.FunctionClassification.INTERFACE_MEMBER)) {
    addProblem(new MethodCannotBeConstructorProblem(roundUpUsualSuspects(class_binding,iNode)));
  }
}
 else if (def instanceof IVariableDefinition) {
  if (class_binding.isLocal()) {
    ITypeDefinition typeDef=def.resolveType(project);
    if (typeDef != null && !SemanticUtils.isBuiltin(typeDef,BuiltinType.CLASS,project) && !SemanticUtils.isBuiltin(typeDef,BuiltinType.FUNCTION,project) && !SemanticUtils.isBuiltin(typeDef,BuiltinType.OBJECT,project) && !SemanticUtils.isBuiltin(typeDef,BuiltinType.ANY_TYPE,project)) {
      addProblem(new CallUndefinedMethodProblem(roundUpUsualSuspects(class_binding,iNode),class_binding.getName().getBaseName()));
    }
  }
}
",0,0,0,,
1739,{,"if (iNode.getAncestorOfType(MXMLDocumentNode.class) != null) {
}
 else {
  addProblem(new ReturnCannotBeUsedInGlobalProblem(iNode));
}
",0,0,0,,
1740,{,"if (iNode.getAncestorOfType(MXMLDocumentNode.class) != null) {
}
 else {
  addProblem(new ReturnCannotBeUsedInGlobalProblem(iNode));
}
",0,0,0,,
1741,{,"if (typename.getNode() == null || typename.getName() == null) {
}
 else {
  IDefinition typeDef=utils.getDefinition(typename.getNode());
  if (!SemanticUtils.isType(typeDef)) {
    Name name=typename.getName();
    while (name != null && name.isTypeName() && name.getTypeNameParameter() != null)     name=name.getTypeNameParameter();
    if (name != null) {
      if (!name.isTypeName()) {
        addTypeProblem(typename.getNode(),typeDef,name.getBaseName(),false);
      }
 else {
        addTypeProblem(typename.getNode(),typeDef,name.toString(),false);
      }
    }
  }
}
",0,0,0,,
1742,{,"if (def instanceof ClassDefinition) {
  resolvedClasses.add((ClassDefinition)def);
  ICompilationUnit defCU=project.getScope().getCompilationUnitForDefinition(def);
  assert (defCU != null) : ""could not resolve def to CU"";
  frameCompilationUnits.add(defCU);
}
 else {
}
",0,0,0,,
1743,{,"if (isLinkageExternal(cu,targetSettings)) {
}
 else if (cu instanceof ResourceBundleCompilationUnit) {
  assert project instanceof RoyaleProject;
  processResourceBundle((RoyaleProject)project,(ResourceBundleCompilationUnit)cu,swc,problems);
}
 else {
  cuToWrite.add(cu);
}
",0,0,0,,
1744,{,"if (thisNamespace.indexOf('.') != -1 || namespace.indexOf('.') != -1) {
}
",0,0,0,,
1745,{,"if (value.equals(IASLanguageConstants.FALSE)) twoWay=false;
 else {
}
",0,0,0,,
1746,{,"if (rootNode == null) {
  rootNode=new MXMLModelRootNode(this);
  rootNode.initializeFromTag(builder,childTag);
}
 else {
}
",0,0,0,,
1747,{,"if (attribute.getPrefix() != null) {
}
",0,0,0,,
1748,{,"if (childTag.getPrefix() != null) {
}
",0,0,0,,
1749,{,"if (fileSpecification.get() == null) {
}
",0,0,0,,
1750,{,"if (showActions) {
  openCDATA();
  outputBase64(tag.getActions());
  closeCDATA();
}
 else {
}
",0,0,0,,
1751,} else {,"if (!setterSequenceCheck.equals(SETTER_ARG_SEQUENCE_VALUE_INDEX) && !setterSequenceCheck.equals(SETTER_ARG_SEQUENCE_INDEX_VALUE)) {
  pass=false;
  if (problems != null) {
    problems.add(new ArrayLikeConfigurationErrorProblem(arrayLikeTag,""Missing '"" + SETVALUE_ARG + ""' metadata argument""));
  }
}
 else {
}
",0,0,0,,
1752,} else {,"if (!lengthAccess.equals(LENGTH_ACCESS_GETTER) && !lengthAccess.equals(LENGTH_ACCESS_METHOD)) {
  pass=false;
  if (problems != null) {
    problems.add(new ArrayLikeConfigurationErrorProblem(arrayLikeTag,""Metadata argument for '"" + LENGTH_ACCESS_ARG + ""' missing or invalid""));
  }
}
 else {
}
",0,0,0,,
1753,{,"if (m_airLaunchInfo != null) {
}
 else if (m_launchUrl != null && m_launchUrl.length() > 0) {
  boolean closedAnyWindows=false;
  Set<String> runningApps=runningApplications();
  if (runningApps.contains(""Safari"")) {
    try {
      String url=m_launchUrl.replaceAll("" "",""%20"");
      String safariClosedAnyWindows=executeAppleScript(""appleScriptCloseSafariWindow.txt"",new String[]{url});
      if (""true"".equals(safariClosedAnyWindows)) {
        closedAnyWindows=true;
      }
 else       if (""appquit"".equals(safariClosedAnyWindows)) {
        closedAnyWindows=true;
        runningApps=waitForMacAppQuit(""Safari"");
      }
    }
 catch (    IOException e) {
    }
  }
  if (!closedAnyWindows && runningApps.contains(""Camino"")) {
    String url=m_launchUrl.replaceFirst(""^file:///"",""file://localhost/"");
    try {
      String caminoClosedAnyWindows=executeAppleScript(""appleScriptCloseCaminoWindow.txt"",new String[]{url});
      if (""true"".equals(caminoClosedAnyWindows)) {
        closedAnyWindows=true;
      }
 else       if (""appquit"".equals(caminoClosedAnyWindows)) {
        closedAnyWindows=true;
        runningApps=waitForMacAppQuit(""Camino"");
      }
    }
 catch (    IOException e) {
    }
  }
  String[] macStandalonePlayerNames={""Flash Player Debugger"",""Flash Player"",""SAFlashPlayer"",""standalone""};
  for (int i=0; !closedAnyWindows && i < macStandalonePlayerNames.length; ++i) {
    if (runningApps.contains(macStandalonePlayerNames[i])) {
      executeAppleScript(new String[]{""tell application \"""" + macStandalonePlayerNames[i] + ""\"" to quit""},null);
      waitForMacAppQuit(macStandalonePlayerNames[i]);
      closedAnyWindows=true;
    }
  }
}
",0,0,0,,
1754,{,"if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9') {
}
 else {
  return true;
}
",0,0,0,,
1755,{,"if (id != Value.UNKNOWN_ID) {
}
 else {
  id=determineContext(name);
  v=locateForNamed(id,name,true);
  if (v != null)   v=new VariableFacade(v,id,m_isolateId);
 else   if (m_createIfMissing && name.charAt(0) != '$')   v=new VariableFacade(id,name,m_isolateId);
}
",0,0,0,,
1756,{,"if (file != null) {
}
",0,0,0,,
1757,{,"if ((all || (var.indexOf(keyword) != -1) || ((description != null) && (description.toLowerCase().indexOf(keyword) != -1))|| (keyword.matches(var))|| ((sesaila.get(var) != null) && (sesaila.get(var)).indexOf(keyword) != -1)) && (!info.isHidden()) && (advanced || !info.isAdvanced())) {
  if (printaliases && sesaila.containsKey(var))   printSet.add(sesaila.get(var));
 else   printSet.add(var);
}
 else {
}
",0,0,0,,
1758,{,"if (element.equals(rootElement)) {
}
 else if (ctx.item != null) {
  ParseValue v=new ParseValue();
  v.name=element;
  v.value=text.toString();
  v.line=locator.getLineNumber();
  ctx.argList.add(v);
  text=new StringBuilder();
  ctx.item=null;
}
 else if (ctx.var != null) {
  if ((ctx.varArgCount > 1) && (ctx.argList.size() == 0)) {
    throw new SAXConfigurationException(new ConfigurationException.IncorrectArgumentCount(ctx.varArgCount,0,ctx.var,source,locator.getLineNumber()),locator);
  }
  if (ctx.varArgCount == 1) {
    ParseValue v=new ParseValue();
    v.name=null;
    v.value=text.toString();
    v.line=locator.getLineNumber();
    ctx.argList.add(v);
    text=new StringBuilder();
  }
 else {
    if (text.length() > 0) {
      throw new SAXConfigurationException(new ConfigurationException.UnexpectedCDATA(source,locator.getLineNumber()),locator);
    }
  }
  try {
    setVar(ctx.var,ctx.argList,locator.getLineNumber(),ctx.append);
    ctx.var=null;
    ctx.argList.clear();
    ctx.item=null;
    ctx.append=false;
  }
 catch (  ConfigurationException e) {
    throw new SAXConfigurationException(e,locator);
  }
}
 else {
  contextStack.pop();
}
",0,0,0,,
1759,{,"if (m.getLevel() == ILocalizableMessage.INFO) {
}
 else {
  assert false : ""Unhandled ILocalizableMessage type"";
}
",0,0,0,,
1760,{,"if (b != null) {
}
",0,0,0,,
1761,{,"if (logger != null) {
}
",0,0,0,,
1762,{,"if (b && resourceModulePath == null) {
}
",0,0,0,,
1763,{,"if (warning != null) {
}
 else {
}
",0,0,0,,
1764,{,"if (warning != null) {
}
 else {
}
",0,0,0,,
1765,{,"if (strict && es) {
}
",0,0,0,,
1766,{,"if (""help"".equals(var)) {
}
 else if (""output"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    setOutput(new File(value));
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""size-report"".equals(var)) {
  config.keepSizeReport(true);
}
 else if (""version"".equals(var)) {
}
 else if (""warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showActionScriptWarnings(true);
      config.showBindingWarnings(true);
      config.showDeprecationWarnings(true);
      config.showUnusedTypeSelectorWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showActionScriptWarnings(false);
      config.showBindingWarnings(false);
      config.showDeprecationWarnings(false);
      config.showUnusedTypeSelectorWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-actionscript-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showActionScriptWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showActionScriptWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-deprecation-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showDeprecationWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showDeprecationWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-shadowed-device-font-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showShadowedDeviceFontWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showShadowedDeviceFontWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-binding-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showBindingWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showBindingWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-unused-type-selector-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showUnusedTypeSelectorWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showUnusedTypeSelectorWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
",0,0,0,,
1767,{,"if (""version"".equals(var)) {
}
 else if (""warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showActionScriptWarnings(true);
      config.showBindingWarnings(true);
      config.showDeprecationWarnings(true);
      config.showUnusedTypeSelectorWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showActionScriptWarnings(false);
      config.showBindingWarnings(false);
      config.showDeprecationWarnings(false);
      config.showUnusedTypeSelectorWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-actionscript-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showActionScriptWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showActionScriptWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-deprecation-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showDeprecationWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showDeprecationWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-shadowed-device-font-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showShadowedDeviceFontWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showShadowedDeviceFontWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-binding-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showBindingWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showBindingWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""compiler.show-unused-type-selector-warnings"".equals(var)) {
  try {
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(value)) {
      config.showUnusedTypeSelectorWarnings(true);
    }
 else     if (""false"".equals(value)) {
      config.showUnusedTypeSelectorWarnings(false);
    }
  }
 catch (  ConfigurationException ex) {
  }
}
",0,0,0,,
1768,{,"if (""help"".equals(var)) {
}
 else if (""output"".equals(var)) {
  try {
    String isDirectory=cfgbuf.peekSimpleConfigurationVar(""directory"");
    String value=cfgbuf.peekSimpleConfigurationVar(var);
    if (""true"".equals(isDirectory)) {
      setDirectory(new File(value));
    }
 else {
      setOutput(new File(value));
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""size-report"".equals(var)) {
  config.keepSizeReport(true);
}
 else if (""directory"".equals(var)) {
}
 else if (""version"".equals(var)) {
}
 else if (""include-classes"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addComponent((String)valArgs.get(k));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-file"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      this.addArchiveFile((String)valArgs.get(0),new File((String)valArgs.get(1)));
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-namespaces"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        try {
          this.addComponent(new URI((String)valArgs.get(k)));
        }
 catch (        URISyntaxException ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-resource-bundles"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addResourceBundle((String)valArgs.get(k));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-sources"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addComponent(new File((String)valArgs.get(k)));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
",0,0,0,,
1769,{,"if (""directory"".equals(var)) {
}
 else if (""version"".equals(var)) {
}
 else if (""include-classes"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addComponent((String)valArgs.get(k));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-file"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      this.addArchiveFile((String)valArgs.get(0),new File((String)valArgs.get(1)));
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-namespaces"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        try {
          this.addComponent(new URI((String)valArgs.get(k)));
        }
 catch (        URISyntaxException ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-resource-bundles"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addResourceBundle((String)valArgs.get(k));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-sources"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addComponent(new File((String)valArgs.get(k)));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
",0,0,0,,
1770,{,"if (""version"".equals(var)) {
}
 else if (""include-classes"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addComponent((String)valArgs.get(k));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-file"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      this.addArchiveFile((String)valArgs.get(0),new File((String)valArgs.get(1)));
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-namespaces"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        try {
          this.addComponent(new URI((String)valArgs.get(k)));
        }
 catch (        URISyntaxException ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-resource-bundles"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addResourceBundle((String)valArgs.get(k));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
 else if (""include-sources"".equals(var)) {
  try {
    List l=cfgbuf.peekConfigurationVar(var);
    for (int j=0, len=l == null ? 0 : l.size(); j < len; j++) {
      ConfigurationValue val=(ConfigurationValue)l.get(j);
      List valArgs=val.getArgs();
      for (int k=0, size=valArgs == null ? 0 : valArgs.size(); k < size; k++) {
        this.addComponent(new File((String)valArgs.get(k)));
      }
    }
  }
 catch (  ConfigurationException ex) {
  }
}
",0,0,0,,
1771,{,"if (resourceModulePath == null) {
}
",0,0,0,,
1772,{,"if (value != null) {
  assert false;
}
 else {
}
",0,0,0,,
1773,{,"if (value != null) {
  assert false;
}
 else {
}
",0,0,0,,
1774,{,"if (""messages"".equals(qName)) {
}
 else if (""text"".equals(qName)) {
  if (textBuffer.length() > 0) {
    current.children.add(new XLRTextNode(textBuffer.toString()));
  }
}
 else if (""variable"".equals(qName)) {
  if (textBuffer.length() > 0) {
    ((XLRVariableNode)current).varname=textBuffer.toString();
  }
}
",0,0,0,,
1775,{,"if (actionList.getAction(i).code != opcodes[i]) {
  return false;
}
 else {
}
",0,0,0,,
1776,{,"if (f.name == null || f.name.length() == 0) {
}
 else if (!className.endsWith(f.name)) {
  f.name=className + ""."" + f.name;
}
 else {
  f.name=className + "".[constructor]"";
}
",0,0,0,,
1777,{,"if (to.renameTo(old) && !old.delete()) {
}
",0,0,0,,
1778,{,"if (compression == TIFF_COMPRESSION_UNCOMPRESSED) {
}
 else throw new ImageWriteException(""Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported)."");
",0,0,0,,
1779,{,"if ((i < 3) || ((i - rgbmap.length) > -3)) {
}
",0,0,0,,
1780,} else {,"if (repo != null) {
  CLIENT_REPO=repo;
}
 else {
}
",0,0,0,,
1781,} else {,"if (ce.getExceptionType() == CatalogException.PARSE_FAILED) {
  break;
}
 else {
}
",0,0,0,,
1782,} else {,"if (ce.getExceptionType() == CatalogException.PARSE_FAILED) {
  break;
}
 else {
}
",0,0,0,,
1783,} else {,"if (part.isMimeType(MailContentType.TEXT_HTML.getMimeType()) || part.isMimeType(MailContentType.TEXT_XML.getMimeType())) {
  try {
    content.put(KEY_BODY_HTML,(String)part.getContent());
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(""Unable to decode the mail because charset is not supported."",e);
  }
}
 else {
}
",0,0,0,,
1784,} else {,"if (tok != null && tok.trim().length() > 0) {
  list.add(new OID(tok.trim()));
}
 else {
}
",0,0,0,,
1785,} else {,"if (""reply"".equals(todo)) {
  NormalizedMessage out=exchange.createMessage();
  exchange.setMessage(out,""out"");
  MessageUtil.transfer(exchange.getMessage(""in""),out);
  channel.send(exchange);
}
 else {
}
",0,0,0,,
1786,if (parts[i].getStatus() == ExchangeStatus.DONE) {,"if (parts[i].getStatus() == ExchangeStatus.DONE) {
}
 else if (parts[i].getStatus() == ExchangeStatus.ERROR) {
  if (reportErrors) {
    fail(exchange,parts[i].getError());
    return;
  }
}
 else if (parts[i].getFault() != null) {
  if (reportErrors) {
    MessageUtil.transferToFault(MessageUtil.copyFault(parts[i]),exchange);
    done(parts[i]);
    sendSync(exchange);
    return;
  }
 else {
    done(parts[i]);
  }
}
 else {
  throw new IllegalStateException(""Exchange status is "" + ExchangeStatus.ACTIVE + "" but has no Fault message"");
}
",0,9,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1787,} else {,"if (WSAddressingConstants.EL_TO.equals(qname.getLocalPart())) {
  to=getHeaderText(value);
  String[] parts=URIResolver.split3(to);
  context.setProperty(Context.SERVICE,new QName(parts[0],parts[1]));
  context.setProperty(Context.ENDPOINT,parts[2]);
}
 else {
}
",0,0,0,,
1788,} else {,"if (WSAddressingConstants.EL_TO.equals(qname.getLocalPart())) {
  String to=getHeaderText(message.getSoapHeaders().get(qname));
  String[] parts=URIResolver.split3(to);
  svc=new QName(parts[0],parts[1]);
  ep=parts[2];
}
 else {
}
",0,0,0,,
1789,} else {,"if (element instanceof SOAPAddress) {
  SOAPAddress soapAddress=(SOAPAddress)element;
  binding.setLocationURI(soapAddress.getLocationURI());
}
 else {
}
",0,0,0,,
1790,} else {,"if (element instanceof SOAPBinding) {
  SOAPBinding soapBinding=(SOAPBinding)element;
  binding.setTransportURI(soapBinding.getTransportURI());
  binding.setStyle(getStyle(soapBinding.getStyle()));
}
 else {
}
",0,0,0,,
1791,} else {,"if (element instanceof SOAP12Address) {
  SOAP12Address soapAddress=(SOAP12Address)element;
  binding.setLocationURI(soapAddress.getLocationURI());
}
 else {
}
",0,0,0,,
1792,} else {,"if (element instanceof SOAP12Binding) {
  SOAP12Binding soapBinding=(SOAP12Binding)element;
  binding.setTransportURI(soapBinding.getTransportURI());
  binding.setStyle(getStyle(soapBinding.getStyle()));
}
 else {
}
",0,0,0,,
1793,} else {,"if (AccessController.doPrivileged(new GetPropertyAction(""jaxb.debug"")) != null) {
  logger.setUseParentHandlers(false);
  logger.setLevel(Level.ALL);
  ConsoleHandler handler=new ConsoleHandler();
  handler.setLevel(Level.ALL);
  logger.addHandler(handler);
}
 else {
}
",0,0,0,,
1794,} else {,"if (this.mbeanServer != null) {
  if (hasSubType(id)) {
    oName=new javax.management.ObjectName(String.format(""%s%s%s%s"",OBJECT_NAME_PREFIX,sanitize(getType(id)),OBJECT_NAME_POSTFIX,sanitize(getSubType(id))));
    this.mbeanServer.registerMBean(mbean,oName);
  }
 else {
    oName=new javax.management.ObjectName(String.format(""%s%s"",OBJECT_NAME_PREFIX,sanitize(id)));
    this.mbeanServer.registerMBean(mbean,oName);
  }
}
 else {
}
",0,0,0,,
1795,} else {,"if (this.mbeanServer != null) {
  this.mbeanServer.unregisterMBean(oName);
}
 else {
}
",0,0,0,,
1796,} else {,"if (ce.getExceptionType() == CatalogException.PARSE_FAILED) {
  break;
}
 else {
}
",0,0,0,,
1797,} else {,"if (ce.getExceptionType() == CatalogException.PARSE_FAILED) {
  break;
}
 else {
}
",0,0,0,,
1798,} else {,"if (partial) {
  if (!wsaHeaders.contains(Names.WSA_FROM_NAME)) {
  }
}
 else {
}
",0,0,0,,
1799,} else {,"if (AccessController.doPrivileged(new GetPropertyAction(""jaxb.debug"")) != null) {
  logger.setUseParentHandlers(false);
  logger.setLevel(Level.ALL);
  ConsoleHandler handler=new ConsoleHandler();
  handler.setLevel(Level.ALL);
  logger.addHandler(handler);
}
 else {
}
",0,0,0,,
1800,} else {,"if (reader.hasMoreChildren()) {
  Map<String,String> innerMap=Maps.newHashMap();
  while (reader.hasMoreChildren()) {
    reader.moveDown();
    String k=null;
    String v=null;
    while (reader.hasMoreChildren()) {
      reader.moveDown();
      if (""key"".equals(elname)) {
        k=reader.getValue();
      }
 else       if (""value"".equals(elname)) {
        v=reader.getValue();
      }
      reader.moveUp();
    }
    innerMap.put(k,v);
    reader.moveUp();
  }
  ov=innerMap;
}
 else {
}
",0,0,0,,
1801,} else {,"if (token.type != CssTokenType.SPACE && token.type != CssTokenType.PUNCTUATION) {
  inImport=false;
  builder.append(token.text);
}
 else {
}
",0,0,0,,
1802,} else {,"if (IPV4_PATTERN.matcher(wildcardsReplaced).matches()) {
  authorizedIps.put(host,wildcardsReplaced);
}
 else {
}
",0,0,0,,
1803,if (c instanceof EnumSet<?> || c instanceof CodeListSet<?>) {,"if (c instanceof EnumSet<?> || c instanceof CodeListSet<?>) {
}
 else {
  final Object[] array=c.toArray();
  for (int i=0; i < array.length; i++) {
    array[i]=copyRecursively(type,array[i]);
  }
  c=Arrays.asList(array);
  if (metadata instanceof Set<?>) {
    c=new LinkedHashSet<>(c);
  }
}
",0,0,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1804,} else {,"if (equalsIgnoreParent((DefaultNameSpace)existing)) {
  return existing;
}
 else {
}
",0,0,0,,
1805,} else {,"if (union) {
  λbgn=-180;
  λend=180;
}
 else {
}
",0,0,0,,
1806,} else {,"if (format instanceof NumberFormat) {
  int digits=Numerics.suggestFractionDigits(stats);
  digits-=DecimalFunctions.floorLog10(multiplier);
  digits=Math.max(0,digits);
  NumberFormat nf=(NumberFormat)format;
  if (digits != nf.getMinimumFractionDigits() || digits != nf.getMaximumFractionDigits()) {
    if (clone)     nf=(NumberFormat)nf.clone();
    nf.setMinimumFractionDigits(digits);
    nf.setMaximumFractionDigits(digits);
  }
  return nf;
}
 else {
}
",0,0,0,,
1807,} else {,"if (tree instanceof TreeFormatCustomization) {
  final TreeFormatCustomization custom=(TreeFormatCustomization)tree;
  final Predicate<TreeTable.Node> more=custom.filter();
  if (more != null) {
    filter=(filter != null) ? more.and(filter) : more;
  }
}
 else {
}
",0,0,0,,
1808,} else {,"if (view instanceof Channel) {
  String name=null;
  if (wrappedBy != null) {
    for (    Coupled c : wrappedBy) {
      if (c.view instanceof ChannelDataInput) {
        final ChannelDataInput in=((ChannelDataInput)c.view);
        if (view instanceof SeekableByteChannel) {
          ((SeekableByteChannel)view).position(in.channelOffset);
          return true;
        }
        name=in.filename;
      }
    }
  }
  if (name == null)   name=Classes.getShortClassName(view);
  throw new InvalidSeekException(Resources.format(Resources.Keys.StreamIsForwardOnly_1,name));
}
 else {
}
",0,0,0,,
1809,} else {,"if (!file.exists()) {
  throw new NoSuchFileException(path.toString());
}
 else {
}
",0,0,0,,
1810,} else {,"if (aKey.equals(slingId)) {
  logger.info(""init: my slingId is already mapped to by another clusterNodeId, deleting entry: key="" + aKey + "" mapped to ""+ value);
  idmap.remove(aKey);
}
 else {
}
",0,0,0,,
1811,} else {,"if (existingObject instanceof List) {
  ((List)existingObject).add(value);
}
 else {
}
",0,0,0,,
1812,{,"if (!mv.equals(""2"") && !clauses.isEmpty()) {
}
",0,0,0,,
1813,} else {,"if (propsFile == null) {
  app.getFrameworkProperties().put(""org.osgi.framework.bootdelegation"",""sun.*,com.sun.*"");
}
 else {
}
",0,0,0,,
1814,} else {,"if (service != null) {
  this.services.put(reference,service);
}
 else {
}
",0,0,0,,
1815,} else {,"if (service != null) {
  this.services.put(reference,service);
}
 else {
}
",0,0,0,,
1816,} else {,"if (graph.contains(isTextAnnotation)) {
  String name=EnhancementEngineHelper.getString(graph,placeEnhancement,ENHANCER_SELECTED_TEXT);
  if (name == null) {
    log.warn(""Unable to process TextAnnotation "" + placeEnhancement + "" because property""+ ENHANCER_SELECTED_TEXT+ "" is not present"");
  }
 else {
    Collection<BlankNodeOrIRI> placeEnhancements=name2placeEnhancementMap.get(name);
    if (placeEnhancements == null) {
      placeEnhancements=new ArrayList<BlankNodeOrIRI>();
      name2placeEnhancementMap.put(name,placeEnhancements);
    }
    placeEnhancements.add(placeEnhancement);
  }
}
 else {
}
",0,0,0,,
1817,else {,"if (onlyNERMode) {
  entityAnnotationMap.put(occ.id,textAnnotation);
}
 else {
}
",0,0,0,,
1818,} else {,"if (exampleIds != null && !exampleIds.isEmpty()) {
  for (  String exampleId : exampleIds) {
    trainingSet.registerExample(exampleId,null,null);
  }
}
 else {
}
",0,0,0,,
1819,} else {,"if (n instanceof IRI) {
  s.add((IRI)n);
}
 else {
}
",0,0,0,,
1820,} else {,"if (!nodeTypes.contains(typeRef)) {
  addValue(Properties.RDF_TYPE,typeRef);
}
 else {
}
",0,0,0,,
1821,} else {,"if (site instanceof ManagedSite) {
}
 else {
}
",0,0,0,,
1822,if (this.service.supportsTask(taskID) || taskID.equals(ReasoningServiceExecutor.TASK_CHECK)) {,"if (this.service.supportsTask(taskID) || taskID.equals(ReasoningServiceExecutor.TASK_CHECK)) {
}
 else {
  log.error(""Unsupported task (not found): {}"",taskID);
  throw new WebApplicationException(new Exception(""Unsupported task (not found): "" + taskID),Response.Status.NOT_FOUND);
}
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1823,} else {,"if (authMethod == AuthMethod.DIGEST) {
  try {
    LOG.debug(""Adding SaslStormClientHandler to pacemaker client pipeline."");
    pipeline.addLast(SASL_HANDLER,new SaslStormClientHandler(client));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
 else {
}
",0,0,0,,
1824,} else {,"if (currentBundle != null) {
  if (currentBundle.getSymbolicName().startsWith(""org.apache.felix.shell"")) {
    BundleContext currentBundleContext=currentBundle.getBundleContext();
    Object directShellServiceByClass=(currentBundleContext != null ? currentBundleContext.getServiceReference(org.apache.felix.shell.ShellService.class) : null);
    Object directShellServiceByName=(currentBundleContext != null ? currentBundleContext.getServiceReference(""org.apache.felix.shell.ShellService"") : null);
    if (ref == null) {
      ref=(directShellServiceByClass != null ? (ServiceReference)directShellServiceByClass : (ServiceReference)directShellServiceByName);
    }
  }
}
 else {
}
",0,0,0,,
1825,} else {,"if (bundles != null && bundles.length > 0) {
  for (  Bundle currentBundle : bundles) {
    if (currentBundle != null) {
      if (currentBundle.getSymbolicName().startsWith(""org.apache.felix.shell"")) {
        BundleContext currentBundleContext=currentBundle.getBundleContext();
        Object directShellServiceByClass=(currentBundleContext != null ? currentBundleContext.getServiceReference(org.apache.felix.shell.ShellService.class) : null);
        Object directShellServiceByName=(currentBundleContext != null ? currentBundleContext.getServiceReference(""org.apache.felix.shell.ShellService"") : null);
        if (ref == null) {
          ref=(directShellServiceByClass != null ? (ServiceReference)directShellServiceByClass : (ServiceReference)directShellServiceByName);
        }
      }
    }
 else {
    }
  }
}
 else {
}
",0,0,0,,
1826,} else {,"if (c == '$') {
  path.append(""$$"");
}
 else {
}
",0,0,0,,
1827,} else {,"if (vaction != null) {
  if (field == errors.GLOBAL_MESSAGE) {
    vaction.addActionError(msg);
  }
 else {
    vaction.addFieldError(field,msg);
  }
}
 else {
}
",0,0,0,,
1828,} else {,"if (_compilerJarTimestamp > strutsConfigFile.lastModified()) {
  app.writeToFile();
}
 else {
}
",0,0,0,,
1829,} else {,"if (targetEndpointAtt != null) {
  assert processor != null;
  processor.setTargetEndpoint(targetEndpointAtt.getAttributeValue());
}
 else {
}
",0,0,0,,
1830,} else {,"if (processor.getTargetEndpoint() != null) {
  processorElem.addAttribute(fac.createOMAttribute(""targetEndpoint"",nullNS,processor.getTargetEndpoint()));
}
 else {
}
",0,0,0,,
1831,"if (versionAtt == null || """".equals(versionAtt.getAttributeValue())) {","if (versionAtt == null || """".equals(versionAtt.getAttributeValue())) {
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1832,} else {,"if (category > 0 && category <= 5) {
  this.category=category;
}
 else {
}
",0,0,0,,
1833,} else {,"if (key instanceof String) {
  OMElement entry=fac.createOMElement(new QName(PayloadHelper.AXIOMPAYLOADNS,ENTRY),mapElement);
  entry.addAttribute(NAME,(String)key,attrNS);
  if (o instanceof Character) {
    entry.addAttribute(TYPE,CHAR,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof Boolean) {
    entry.addAttribute(TYPE,BOOLEAN,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof String) {
    entry.addAttribute(TYPE,STRING,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof Byte) {
    entry.addAttribute(TYPE,BYTE,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof byte[]) {
    entry.addAttribute(TYPE,BYTEARRAY,attrNS);
    OMText text=fac.createOMText(new DataHandler(new ByteArrayDataSource((byte[])o)),true);
    entry.addChild(text);
  }
 else   if (o instanceof Float) {
    entry.addAttribute(TYPE,FLOAT,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof Double) {
    entry.addAttribute(TYPE,DOUBLE,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof Long) {
    entry.addAttribute(TYPE,LONG,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof Short) {
    entry.addAttribute(TYPE,SHORT,attrNS);
    entry.setText(o.toString());
  }
 else   if (o instanceof Integer) {
    entry.addAttribute(TYPE,INTEGER,attrNS);
    entry.setText(o.toString());
  }
}
 else {
}
",0,0,0,,
1834,} else {,"if (e.isHardError()) {
  log.error(""Polling task for service '"" + serviceName + ""' received a ""+ ""shutdown signal"",e);
  Semaphore available=new Semaphore(0,true);
  String key=UUID.randomUUID().toString();
  haHandler.getBlockedTasks().add(new AMQPTransportHAEntry(available,key,connectionFactoryName));
  try {
    available.acquire();
  }
 catch (  InterruptedException ie) {
    log.error(""The blocking semaphore was interrupted"",e);
    Thread.currentThread().interrupt();
    return;
  }
  AMQPTransportHABrokerEntry brokerEntry=haHandler.getConnectionMap().get(key);
  if (brokerEntry == null) {
    log.error(""No new connection factory was found for key '"" + key + ""'"");
  }
 else {
    setChannel(brokerEntry.getChannel());
    stop();
    try {
      start();
      log.info(""Worker task for service '"" + serviceName + ""' is re-deployed"");
    }
 catch (    AMQPTransportException ex) {
      log.error(""Start of polling tasks failed. System must be restarted!"");
    }
  }
}
 else {
}
",0,0,0,,
1835,else {,"if (_op == OpOpData.FEDERATED) {
  Hop ranges=getInput().get(getParameterIndex(FED_RANGES));
  long nrow=-1, ncol=-1;
  for (  Hop c : ranges.getInput()) {
    if (!(c.getInput(0) instanceof LiteralOp && c.getInput(1) instanceof LiteralOp))     return;
    nrow=Math.max(nrow,HopRewriteUtils.getIntValueSafe(c.getInput(0)));
    ncol=Math.max(ncol,HopRewriteUtils.getIntValueSafe(c.getInput(1)));
  }
  setDim1(nrow);
  setDim2(ncol);
}
 else {
}
",0,0,0,,
1836,{,"if (getDataType() == DataType.SCALAR) {
}
 else {
switch (_op) {
case CTABLE:
    Hop input1=getInput().get(0);
  Hop input2=getInput().get(1);
Hop input3=getInput().get(2);
if (!dimsKnown()) {
if (isSequenceRewriteApplicable(true)) setDim1(input1.getDim1());
 else if (isSequenceRewriteApplicable(false)) setDim2(input2.getDim1());
Ctable.OperationTypes ternaryOp=Ctable.findCtableOperationByInputDataTypes(input1.getDataType(),input2.getDataType(),input3.getDataType());
if (ternaryOp == Ctable.OperationTypes.CTABLE_TRANSFORM_HISTOGRAM && input2 instanceof LiteralOp) {
  setDim2(HopRewriteUtils.getIntValueSafe((LiteralOp)input2));
}
if (getInput().size() >= 5) {
  if (getInput().get(3) instanceof LiteralOp)   setDim1(HopRewriteUtils.getIntValueSafe((LiteralOp)getInput().get(3)));
  if (getInput().get(4) instanceof LiteralOp)   setDim2(HopRewriteUtils.getIntValueSafe((LiteralOp)getInput().get(4)));
}
}
break;
case QUANTILE:
break;
case IFELSE:
case PLUS_MULT:
case MINUS_MULT:
if (getDataType() == DataType.MATRIX) {
setDim1(HopRewriteUtils.getMaxNrowInput(this));
setDim2(HopRewriteUtils.getMaxNcolInput(this));
}
break;
default :
throw new RuntimeException(""Size information for operation ("" + _op + "") can not be updated."");
}
}
",0,0,0,,
1837,{,"if (pb instanceof FunctionProgramBlock) {
}
 else if (pb instanceof BasicProgramBlock) {
  StatementBlock sb=pb.getStatementBlock();
  BasicProgramBlock bpb=(BasicProgramBlock)pb;
  ArrayList<Instruction> tmp=bpb.getInstructions();
  if (sb == null)   return;
  tmp=Recompiler.recompileHopsDag(sb,sb.getHops(),vars,status,status.isInPlace(),false,status.getTID());
  bpb.setInstructions(tmp);
  if (status.isInPlace())   Recompiler.extractDAGOutputStatistics(sb.getHops(),vars);
  if (ParForProgramBlock.RESET_RECOMPILATION_FLAGs && !containsRootFunctionOp(sb.getHops()) && status.isReset()) {
    Hop.resetRecompilationFlag(sb.getHops(),ExecType.CP,status.getReset());
    sb.updateRecompilationFlag();
  }
  status.trackRecompile(sb.requiresRecompilation());
}
",0,0,0,,
1838,} else {,"if (hop.getDataType() != DataType.TENSOR) {
  hop.refreshSizeInformation();
  if (!hop.dimsKnown()) {
    HashMap<Long,Long> memo=new HashMap<>();
    hop.refreshRowsParameterInformation(hop.getInput().get(1),vars,memo);
    hop.refreshColsParameterInformation(hop.getInput().get(2),vars,memo);
  }
}
 else {
}
",0,0,0,,
1839,{,"if (dop.getBlocksize() == -1) {
}
 else if (dop.getInput().get(0).requiresReblock() && dop.getInput().get(0).getParent().size() == 1) {
  dop.getInput().get(0).setBlocksize(dop.getBlocksize());
}
",0,0,0,,
1840,|| fnameStr.equals(Statement.GAGG_FN_VARIANCE)){},"if (fnameStr.equals(Statement.GAGG_FN_COUNT) || fnameStr.equals(Statement.GAGG_FN_SUM) || fnameStr.equals(Statement.GAGG_FN_MEAN)|| fnameStr.equals(Statement.GAGG_FN_VARIANCE)) {
}
 else {
  raiseValidateError(""fname is "" + fnameStr + "" but must be either centeralmoment, count, sum, mean, variance"",conditional);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(MethodInvocation-arguments, ),
Block(),
"
1841,} else {,"if (1.0 == update) {
  quickSetValue(r,0,newMaxIndex);
  cor.quickSetValue(r,0,newMaxValue);
}
 else {
}
",0,0,0,,
1842,} else {,"if (1.0 == update) {
  quickSetValue(r,0,newMaxIndex);
  quickSetValue(r,1,newMaxValue);
}
 else {
}
",0,0,0,,
1843,} else {,"if (!Datum.abortWhenDivideByZero) {
  fail(op + "" throws DivideByZeroException"");
}
 else {
}
",0,0,0,,
1844,} else {,"if (e instanceof OutOfMemoryError) {
  try {
    System.err.println(""Halting due to Out Of Memory Error..."");
  }
 catch (  Throwable err) {
  }
  ExitUtil.halt(-1);
}
 else {
}
",0,0,0,,
1845,if (response.getMaxRowNum() < 0 && queryId.equals(QueryIdFactory.NULL_QUERY_ID)) {,"if (response.getMaxRowNum() < 0 && queryId.equals(QueryIdFactory.NULL_QUERY_ID)) {
}
 else {
  res=TajoClientUtil.createResultSet(tajoClient,response,sizeLimit);
  MakeResultText(res,desc);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1846,} else {,"if (textBytes[fieldId] != null) {
  try {
    values[fieldId]=serializeDeserialize.deserialize(fieldId,textBytes[fieldId],0,textBytes[fieldId].length,nullBytes);
  }
 catch (  Exception e) {
    values[fieldId]=NullDatum.get();
  }
  textBytes[fieldId]=null;
}
 else {
}
",0,0,0,,
1847,{,"if (dayOfMSpec && !dayOfWSpec) {
}
 else if (dayOfWSpec && !dayOfMSpec) {
}
 else {
  throw new ParseException(""Support for specifying both a day-of-week AND a day-of-month parameter is not implemented."",0);
}
",0,0,0,,
1848,{,"if (dayOfWSpec && !dayOfMSpec) {
}
 else {
  throw new ParseException(""Support for specifying both a day-of-week AND a day-of-month parameter is not implemented."",0);
}
",0,0,0,,
1849,} else {,"if (dagStatus.getSource() == DagStatusSource.AM) {
  Preconditions.checkState(timeout > -1,""Should not reach here with a timeout of -1. File a bug"");
  return dagStatus;
}
 else {
}
",0,0,0,,
1850,} else {,"if (node.registerBadNodeAndShouldBlacklist()) {
  LOG.info(""Too many task attempt failures. "" + ""Blacklisting node: "" + node.getNodeId());
  node.blacklistSelf();
  return AMNodeState.BLACKLISTED;
}
 else {
}
",0,0,0,,
1851,} else {,"if (node.registerBadNodeAndShouldBlacklist()) {
  LOG.info(""Too many previous task failures after blacklisting re-enabled. "" + ""Blacklisting node: "" + node.getNodeId());
  node.blacklistSelf();
  return AMNodeState.BLACKLISTED;
}
 else {
}
",0,0,0,,
1852,} else {,"if (isProcessorContext) {
  ((ProcessorContext)context).setProgress(progress);
}
 else {
}
",0,0,0,,
1853,} else {,"if (old == null) {
  informGroupedInputs(input);
  condition.signalAll();
}
 else {
}
",0,0,0,,
1854,} else {,"if (failMissing && srcAttemptsRemaining.size() > 0) {
  if (isShutDown.get()) {
    if (isDebugEnabled) {
      LOG.debug(""Already shutdown, not reporting fetch failures for: "" + srcAttemptsRemaining.size() + "" remaining inputs"");
    }
  }
 else {
    failedFetches=InputAttemptFetchFailure.fromAttemptsLocalFetchFailure(srcAttemptsRemaining.values());
  }
}
 else {
}
",0,0,0,,
1855,"(new File(dir, ""vorbis"")).exists()) {","if ((new File(dir,""elf"")).exists() && (new File(dir,""mime"")).exists() && (new File(dir,""vorbis"")).exists()) {
}
 else {
  throw new IllegalArgumentException(magicDir + "" doesn't seem to hold uncompressed file magic entries"");
}
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1856,} else {,"if (loaded.size() > 1) {
  throw new TikaConfigException(""Composite not supported for "" + getParentTagName() + "". Must specify only one child!"");
}
 else {
}
",0,0,0,,
1857,} else {,"if (type == -1) {
  throw new IOException(""EOF while waiting for start beacon"");
}
 else {
}
",0,0,0,,
1858,} else {,"if (links < MAX_HYPERLINKS) {
  Hyperlink hyperlink=workbook.getCreationHelper().createHyperlink(linkType);
  String path=resultSet.getString(dbColNum);
  String address=urlBase + path;
  hyperlink.setAddress(address);
  cell.setHyperlink(hyperlink);
  cell.setCellStyle(style);
  String fName=Paths.get(path).getFileName().toString();
  cell.setCellValue(fName);
  links++;
}
 else {
}
",0,0,0,,
1859,} else {,"if (random.nextFloat() >= percentDeleted) {
  os.write(c);
}
 else {
}
",0,0,0,,
1860,} else {,"if (value != null) {
  entry.getKey().accept(this);
  getStandardOutput().write(SPACE);
  if (value instanceof COSDictionary) {
    COSDictionary dict=(COSDictionary)value;
    if (!incrementalUpdate) {
      COSBase item=dict.getItem(COSName.XOBJECT);
      if (item != null && !COSName.XOBJECT.equals(entry.getKey())) {
        item.setDirect(true);
      }
      item=dict.getItem(COSName.RESOURCES);
      if (item != null && !COSName.RESOURCES.equals(entry.getKey())) {
        item.setDirect(true);
      }
    }
    if (dict.isDirect()) {
      visitFromDictionary(dict);
    }
 else {
      addObjectToWrite(dict);
      writeReference(dict);
    }
  }
 else   if (value instanceof COSObject) {
    COSBase subValue=((COSObject)value).getObject();
    if (willEncrypt || incrementalUpdate || subValue instanceof COSDictionary|| subValue == null) {
      addObjectToWrite(value);
      writeReference(value);
    }
 else {
      subValue.accept(this);
    }
  }
 else {
    if (reachedSignature && COSName.CONTENTS.equals(entry.getKey())) {
      signatureOffset=getStandardOutput().getPos();
      value.accept(this);
      signatureLength=getStandardOutput().getPos() - signatureOffset;
    }
 else     if (reachedSignature && COSName.BYTERANGE.equals(entry.getKey())) {
      byteRangeArray=(COSArray)entry.getValue();
      byteRangeOffset=getStandardOutput().getPos() + 1;
      value.accept(this);
      byteRangeLength=getStandardOutput().getPos() - 1 - byteRangeOffset;
      reachedSignature=false;
    }
 else {
      value.accept(this);
    }
  }
  getStandardOutput().writeEOL();
}
 else {
}
",0,0,0,,
1861,} else {,"if (line.endsWith(""}"")) {
  return String.join("""",multiLineFieldValueList);
}
 else {
}
",0,0,0,,
1862,} else {,"if (numChannels == 2) {
  metadata.set(XMPDM.AUDIO_CHANNEL_TYPE,""Stereo"");
}
 else {
}
",0,0,0,,
1863,} else {,"if (valueType == 0x1e) {
  String val=StringUtil.getFromCompressedUnicode(value,0,length);
  if (propIdx < HEADER_2000_PROPERTIES_ENTRIES.length) {
    metadata.add(HEADER_2000_PROPERTIES_ENTRIES[propIdx],val);
    xhtml.element(""p"",val);
  }
 else   if (propIdx == 0x012c) {
    int splitAt=val.indexOf('=');
    if (splitAt > -1) {
      String propName=val.substring(0,splitAt);
      String propVal=val.substring(splitAt + 1);
      metadata.add(propName,propVal);
    }
  }
}
 else {
}
",0,0,0,,
1864,if (pe[0] == (byte) 'P' && pe[1] == (byte) 'E' && pe[2] == 0 && pe[3] == 0) {,"if (pe[0] == (byte)'P' && pe[1] == (byte)'E' && pe[2] == 0 && pe[3] == 0) {
}
 else {
  return;
}
",0,3,14,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(CastExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(CastExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1865,signature[2] == (byte) 'G' && signature[3] == (byte) 0xfb) {,"if (signature[0] == (byte)'B' && signature[1] == (byte)'P' && signature[2] == (byte)'G' && signature[3] == (byte)0xfb) {
}
 else {
  throw new TikaException(""BPG magic signature invalid"");
}
",0,0,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, ),
CharacterLiteral(CastExpression-expression, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, ),
NumberLiteral(CastExpression-expression, InfixExpression-rightOperand, ),
"
1866,} else {,"if (restart == -1 || startlevelNumber <= restart - 1) {
  counts.set(levelNumber,NOT_SEEN_YET);
}
 else {
}
",0,0,0,,
1867,} else {,"if (previousSid == FormulaRecord.sid) {
  StringRecord sr=(StringRecord)record;
  addTextCell(stringFormulaRecord,sr.getString());
}
 else {
}
",0,0,0,,
1868,} else {,"if (index >= 0) {
  System.arraycopy(data,index,chmPmgiHeader.getSignature(),0,count);
}
 else {
}
",0,0,0,,
1869,} else {,"if (fileChunk == null) {
  LOG.debug(""{} have not seen GUID {} yet"",getIndent(),extendedGUID);
}
 else {
}
",0,0,0,,
1870,} else {,"if (propertyValue.propertyId.propertyEnum == OneNotePropertyEnum.RichEditTextUnicode) {
  handleRichEditTextUnicode(content.size());
}
 else {
}
",0,0,0,,
1871,} else {,"if (property.isSetStorage() || property.isSetOstorage()) {
}
 else {
}
",0,0,0,,
1872,} else {,"if (paragraphStack.size() < maxStackSize) {
  paragraphStack.push(tag);
}
 else {
}
",0,0,0,,
1873,} else {,"if (paragraphStack.size() > 0) {
  String lastP=paragraphStack.pop();
  if (lastP.equals(LI)) {
    end(LI);
  }
 else {
    pushParagraphTag(lastP);
    badTagAlignment=true;
  }
}
 else {
}
",0,0,0,,
1874,} else {,"if (param >= 0) {
  if (groupState.pictDepth == 1) {
    try {
      embObjHandler.writeBytes(in,param);
    }
 catch (    IOException|TikaException e) {
      EmbeddedDocumentUtil.recordEmbeddedStreamException(e,metadata);
      embObjHandler.reset();
    }
  }
 else {
    IOUtils.skipFully(in,param);
  }
}
 else {
}
",0,0,0,,
1875,} else {,"if (paragraphStack.size() > 0) {
  String p=paragraphStack.pop();
  if (xl.equals(p)) {
    end(xl);
  }
}
 else {
}
",0,0,0,,
1876,} else {,"if (suffix.equals(""jb2"")) {
  metadata.set(Metadata.CONTENT_TYPE,""image/x-jbig2"");
}
 else {
}
",0,0,0,,
1877,} else {,"if (paragraphs.containsKey(mcid)) {
  if (state.inLink) {
    state.hrefAnchorBuilder.append(paragraphs.get(mcid));
  }
 else {
    try {
      writeString(paragraphs.get(mcid));
    }
 catch (    IOException e) {
      handleCatchableIOE(e);
    }
  }
  state.processedMCIDs.add(mcid);
}
 else {
}
",0,0,0,,
1878,} else {,"if (kids instanceof COSDictionary) {
  COSDictionary dict=(COSDictionary)kids;
  COSDictionary anchor=dict.getCOSDictionary(COSName.A);
  if (anchor != null) {
    state.uri=anchor.getString(COSName.URI);
  }
 else {
    if (dict.containsKey(COSName.K)) {
      recurse(dict.getDictionaryObject(COSName.K),currentPageRef,depth + 1,paragraphs,roleMap);
    }
 else     if (dict.containsKey(COSName.OBJ)) {
      recurse(dict.getDictionaryObject(COSName.OBJ),currentPageRef,depth + 1,paragraphs,roleMap);
    }
  }
}
 else {
}
",0,0,0,,
1879,} else {,"if (cleaned != null) {
  detector.setDeclaredEncoding(cleaned);
}
 else {
}
",0,0,0,,
1880,} else {,"if (response.getStatusLine().getStatusCode() != 200) {
  status=TikaEmitterResult.STATUS.NOT_OK;
}
 else {
}
",0,0,0,,
1881,} else {,"if (allowCorsPreflight == AllowCorsPreflight.FILTER) {
  if (DispatcherType.REQUEST == request.getDispatcherType()) {
    for (    FilterDef filterDef : request.getContext().findFilterDefs()) {
      if (CorsFilter.class.getName().equals(filterDef.getFilterClass())) {
        for (        FilterMap filterMap : context.findFilterMaps()) {
          if (filterMap.getFilterName().equals(filterDef.getFilterName())) {
            if ((filterMap.getDispatcherMapping() & FilterMap.REQUEST) > 0) {
              for (              String urlPattern : filterMap.getURLPatterns()) {
                if (""/*"".equals(urlPattern)) {
                  allowBypass=true;
                  break;
                }
              }
            }
            break;
          }
        }
        break;
      }
    }
  }
}
 else {
}
",0,0,0,,
1882,} else {,"if (f.isDirectory()) {
  addPermission(new FilePermission(path,""read""));
  addPermission(new FilePermission(path + File.separator + ""-"",""read""));
}
 else {
}
",0,0,0,,
1883,} else {,"if (path.contains(""\"""")) {
  throw new IllegalArgumentException(""The double quote [\""] character can only be used to quote paths. It must "" + ""not appear in a path. This loader path is not valid: ["" + value + ""]"");
}
 else {
}
",0,0,0,,
1884,} else {,"if (""Ljakarta/servlet/annotation/WebListener;"".equals(type)) {
  fragment.addListener(className);
}
 else {
}
",0,0,0,,
1885,} else {,"if (""value"".equals(evp.getNameString())) {
  initParamValue=evp.getValue().stringifyValue();
}
 else {
}
",0,0,0,,
1886,} else {,"if (bytes[valueStart] == '1' && valueEnd == (valueStart + 1)) {
  version=1;
}
 else {
}
",0,0,0,,
1887,} else {,"if (sslOutputBuffer.remaining() == 0) {
  sslOutputBuffer.clear();
  transfer(from,sslOutputBuffer);
  sslOutputBuffer.flip();
}
 else {
}
",0,0,0,,
1888,} else {,"if (BinaryStream.class.isAssignableFrom(decoderClazz)) {
  BinaryStream<?> decoder=(BinaryStream<?>)createDecoderInstance(decoderClazz);
  decoder.init(config);
  decoders.add(decoder);
}
 else {
}
",0,0,0,,
1889,} else {,"if (TextStream.class.isAssignableFrom(decoderClazz)) {
  TextStream<?> decoder=(TextStream<?>)createDecoderInstance(decoderClazz);
  decoder.init(config);
  decoders.add(decoder);
}
 else {
}
",0,0,0,,
1890,} else {,"if (method.getAnnotation(OnMessage.class) != null) {
  checkPublic(method);
  MessageHandlerInfo messageHandler=new MessageHandlerInfo(method,decoders);
  boolean found=false;
  for (  MessageHandlerInfo otherMessageHandler : onMessage) {
    if (messageHandler.targetsSameWebSocketMessageType(otherMessageHandler)) {
      found=true;
      if (currentClazz == clazzPojo || !isMethodOverride(messageHandler.m,otherMessageHandler.m)) {
        throw new DeploymentException(sm.getString(""pojoMethodMapping.duplicateAnnotation"",OnMessage.class,currentClazz));
      }
    }
  }
  if (!found) {
    onMessage.add(messageHandler);
  }
}
 else {
}
",0,0,0,,
1891,} else {,"if (sto > 0 && (now - time) > (sto * 1000L)) {
  suspect(con);
}
 else {
}
",0,0,0,,
1892,} else {,"if (shouldReleaseIdle(now,con,time)) {
  releasedIdleCount.incrementAndGet();
  release(con);
  idle.remove(con);
  setToNull=true;
}
 else {
}
",0,0,0,,
1893,} else {,"if (servletContext == sce.getServletContext()) {
  log.append(""PASS-02"");
}
 else {
}
",0,0,0,,
1894,} else {,"if (e == null) {
  Assert.assertTrue(client.isResponse400());
}
 else {
}
",0,0,0,,
1895,} else {,"if (scxml == null) {
  retVal=false;
  ((PageContext)ctx).getOut().write(""<!-- SCXMLDialog"" + "": Error parsing SCXML:"" + groupTag.getConfig() + ""-->\n"");
}
 else {
}
",0,0,0,,
1896,} else {,"if (i > -1) {
  String name=token.substring(0,i).trim();
  String value=token.substring(i + 1,token.length()).trim();
  value=stripQuote(value);
  ServerCookie cookie=addCookie();
  cookie.getName().setString(name);
  cookie.getValue().setString(value);
  if (dbg > 0)   log(""Add cookie "" + name + ""=""+ value);
}
 else {
}
",0,0,0,,
1897,} else {,"if (bytes[valueStart] == '1' && valueEnd == (valueStart + 1)) {
  version=1;
}
 else {
}
",0,0,0,,
1898,} else {,"if (!mod.isStarted()) {
  mod.start();
}
 else {
}
",0,0,0,,
1899,} else {,"if (f.isDirectory()) {
  addPermission(new FilePermission(path,""read""));
  addPermission(new FilePermission(path + File.separator + ""-"",""read""));
}
 else {
}
",0,0,0,,
1900,} else {,"if (path.contains(""\"""")) {
  throw new IllegalArgumentException(""The double quote [\""] character only be used to quote paths. It must "" + ""not appear in a path. This loader path is not valid: ["" + value + ""]"");
}
 else {
}
",0,0,0,,
1901,} else {,"if (""Ljavax/servlet/annotation/WebListener;"".equals(type)) {
  fragment.addListener(className);
}
 else {
}
",0,0,0,,
1902,} else {,"if (""value"".equals(evp.getNameString())) {
  initParamValue=evp.getValue().stringifyValue();
}
 else {
}
",0,0,0,,
1903,} else {,"if (processor.isUpgrade()) {
  if (((Nio2SocketWrapper)socket).isUpgradeInit()) {
    try {
      ((Nio2Endpoint)proto.endpoint).awaitBytes(socket);
    }
 catch (    ReadPendingException e) {
    }
  }
}
 else {
}
",0,0,0,,
1904,} else {,"if (sslOutputBuffer.remaining() == 0) {
  sslOutputBuffer.clear();
  if (left < SSL_OUTPUT_BUFFER_SIZE) {
    sslOutputBuffer.put(b,start,left);
  }
 else {
    sslOutputBuffer.put(b,start,SSL_OUTPUT_BUFFER_SIZE);
  }
  sslOutputBuffer.flip();
}
 else {
}
",0,0,0,,
1905,} else {,"if (bytes[valueStart] == '1' && valueEnd == (valueStart + 1)) {
  version=1;
}
 else {
}
",0,0,0,,
1906,} else {,"if (BinaryStream.class.isAssignableFrom(decoderClazz)) {
  BinaryStream<?> decoder=(BinaryStream<?>)decoderClazz.getConstructor().newInstance();
  decoder.init(config);
  decoders.add(decoder);
}
 else {
}
",0,0,0,,
1907,} else {,"if (TextStream.class.isAssignableFrom(decoderClazz)) {
  TextStream<?> decoder=(TextStream<?>)decoderClazz.getConstructor().newInstance();
  decoder.init(config);
  decoders.add(decoder);
}
 else {
}
",0,0,0,,
1908,} else {,"if (method.getAnnotation(OnMessage.class) != null) {
  checkPublic(method);
  MessageHandlerInfo messageHandler=new MessageHandlerInfo(method,decoders);
  boolean found=false;
  for (  MessageHandlerInfo otherMessageHandler : onMessage) {
    if (messageHandler.targetsSameWebSocketMessageType(otherMessageHandler)) {
      found=true;
      if (currentClazz == clazzPojo || !isMethodOverride(messageHandler.m,otherMessageHandler.m)) {
        throw new DeploymentException(sm.getString(""pojoMethodMapping.duplicateAnnotation"",OnMessage.class,currentClazz));
      }
    }
  }
  if (!found) {
    onMessage.add(messageHandler);
  }
}
 else {
}
",0,0,0,,
1909,} else {,"if (sto > 0 && (now - time) > (sto * 1000L)) {
  suspect(con);
}
 else {
}
",0,0,0,,
1910,} else {,"if (shouldReleaseIdle(now,con,time)) {
  releasedIdleCount.incrementAndGet();
  release(con);
  idle.remove(con);
  setToNull=true;
}
 else {
}
",0,0,0,,
1911,if (poolProperties.getDataSource()==null && poolProperties.getDataSourceJNDI()!=null) {,"if (poolProperties.getDataSource() == null && poolProperties.getDataSourceJNDI() != null) {
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1912,} else {,"if (!ch.getRequest().isAsyncStarted()) {
  ch.complete();
  if (recycle) {
    ch.release();
  }
}
 else {
}
",0,0,0,,
1913,} else {,"if (serverMode) {
  activeHttp=httpConnector.getServer();
  activeHttp.setConnection(this);
  if (httpConnector.defaultService != null) {
    activeHttp.setHttpService(httpConnector.defaultService);
  }
}
 else {
}
",0,0,0,,
1914,} else {,"if (bytes[valueStart] == '1' && valueEnd == (valueStart + 1)) {
  version=1;
}
 else {
}
",0,0,0,,
1915,} else {,"if (peerCh == null) {
  peerCh=(HttpChannel)doneCh.getRequest().getAttribute(""CLIENT"");
}
 else {
}
",0,0,0,,
1916,} else {,"if (attr.equalsIgnoreCase(""expires"")) {
  expirationDate=parseExpireDate(val);
}
 else {
}
",0,0,0,,
1917,} else {,"if (servletContext == sce.getServletContext()) {
  log.append(""PASS-02"");
}
 else {
}
",0,0,0,,
1918,} else {,"if (VERSION < 10002) {
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_AES_128_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_AES_256_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_AES_128_CBC_SHA256);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_AES_256_CBC_SHA256);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_AES_128_GCM_SHA256);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_AES_256_GCM_SHA384);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_DES_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_DSS_WITH_SEED_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_AES_128_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_AES_256_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_AES_128_CBC_SHA256);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_AES_256_CBC_SHA256);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_AES_128_GCM_SHA256);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_AES_256_GCM_SHA384);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_DES_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA);
  unimplemented.add(Cipher.TLS_DH_RSA_WITH_SEED_CBC_SHA);
}
 else {
}
",0,0,0,,
1919,} else {,"if ((""name"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final java.lang.String nameOrOthersItem1=elementReader.getElementAsString();
  if (nameOrOthers == null) {
    nameOrOthers=facesAbsoluteOrdering.nameOrOthers;
    if (nameOrOthers != null) {
      nameOrOthers.clear();
    }
 else {
      nameOrOthers=new ArrayList<Object>();
    }
  }
  nameOrOthers.add(nameOrOthersItem1);
}
 else {
}
",0,0,0,,
1920,} else {,"if ((""default-validators"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesValidator defaultValidatorsItem=readFacesValidator(elementReader,context);
  if (defaultValidators == null) {
    defaultValidators=facesApplication.defaultValidators;
    if (defaultValidators != null) {
      defaultValidators.clear();
    }
 else {
      defaultValidators=new ArrayList<FacesValidator>();
    }
  }
  defaultValidators.add(defaultValidatorsItem);
}
 else {
}
",0,0,0,,
1921,} else {,"if ((""behavior-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesBehaviorExtension behaviorExtensionItem=readFacesBehaviorExtension(elementReader,context);
  if (behaviorExtension == null) {
    behaviorExtension=facesBehavior.behaviorExtension;
    if (behaviorExtension != null) {
      behaviorExtension.clear();
    }
 else {
      behaviorExtension=new ArrayList<FacesBehaviorExtension>();
    }
  }
  behaviorExtension.add(behaviorExtensionItem);
}
 else {
}
",0,0,0,,
1922,} else {,"if ((""component-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesComponentExtension componentExtensionItem=readFacesComponentExtension(elementReader,context);
  if (componentExtension == null) {
    componentExtension=facesComponent.componentExtension;
    if (componentExtension != null) {
      componentExtension.clear();
    }
 else {
      componentExtension=new ArrayList<FacesComponentExtension>();
    }
  }
  componentExtension.add(componentExtensionItem);
}
 else {
}
",0,0,0,,
1923,} else {,"if ((""converter-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesConverterExtension converterExtensionItem=readFacesConverterExtension(elementReader,context);
  if (converterExtension == null) {
    converterExtension=facesConverter.converterExtension;
    if (converterExtension != null) {
      converterExtension.clear();
    }
 else {
      converterExtension=new ArrayList<FacesConverterExtension>();
    }
  }
  converterExtension.add(converterExtensionItem);
}
 else {
}
",0,0,0,,
1924,} else {,"if ((""factory-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesFactoryExtension factoryExtensionItem=readFacesFactoryExtension(elementReader,context);
  if (factoryExtension == null) {
    factoryExtension=facesFactory.factoryExtension;
    if (factoryExtension != null) {
      factoryExtension.clear();
    }
 else {
      factoryExtension=new ArrayList<FacesFactoryExtension>();
    }
  }
  factoryExtension.add(factoryExtensionItem);
}
 else {
}
",0,0,0,,
1925,} else {,"if ((""lifecycle-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesLifecycleExtension lifecycleExtensionItem=readFacesLifecycleExtension(elementReader,context);
  if (lifecycleExtension == null) {
    lifecycleExtension=facesLifecycle.lifecycleExtension;
    if (lifecycleExtension != null) {
      lifecycleExtension.clear();
    }
 else {
      lifecycleExtension=new ArrayList<FacesLifecycleExtension>();
    }
  }
  lifecycleExtension.add(lifecycleExtensionItem);
}
 else {
}
",0,0,0,,
1926,} else {,"if ((""navigation-rule-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesNavigationRuleExtension navigationRuleExtensionItem=readFacesNavigationRuleExtension(elementReader,context);
  if (navigationRuleExtension == null) {
    navigationRuleExtension=facesNavigationRule.navigationRuleExtension;
    if (navigationRuleExtension != null) {
      navigationRuleExtension.clear();
    }
 else {
      navigationRuleExtension=new ArrayList<FacesNavigationRuleExtension>();
    }
  }
  navigationRuleExtension.add(navigationRuleExtensionItem);
}
 else {
}
",0,0,0,,
1927,} else {,"if ((""before"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesOrderingOrdering before=readFacesOrderingOrdering(elementReader,context);
  facesOrdering.before=before;
}
 else {
}
",0,0,0,,
1928,} else {,"if ((""referenced-bean-class"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final String referencedBeanClassRaw=elementReader.getElementAsString();
  final String referencedBeanClass;
  try {
    referencedBeanClass=Adapters.collapsedStringAdapterAdapter.unmarshal(referencedBeanClassRaw);
  }
 catch (  final Exception e) {
    context.xmlAdapterError(elementReader,CollapsedStringAdapter.class,String.class,String.class,e);
    continue;
  }
  facesReferencedBean.referencedBeanClass=referencedBeanClass;
}
 else {
}
",0,0,0,,
1929,} else {,"if ((""render-kit-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesRenderKitExtension renderKitExtensionItem=readFacesRenderKitExtension(elementReader,context);
  if (renderKitExtension == null) {
    renderKitExtension=facesRenderKit.renderKitExtension;
    if (renderKitExtension != null) {
      renderKitExtension.clear();
    }
 else {
      renderKitExtension=new ArrayList<FacesRenderKitExtension>();
    }
  }
  renderKitExtension.add(renderKitExtensionItem);
}
 else {
}
",0,0,0,,
1930,} else {,"if ((""validator-extension"" == elementReader.getLocalName()) && (""http://java.sun.com/xml/ns/javaee"" == elementReader.getNamespaceURI())) {
  final FacesValidatorExtension validatorExtensionItem=readFacesValidatorExtension(elementReader,context);
  if (validatorExtension == null) {
    validatorExtension=facesValidator.validatorExtension;
    if (validatorExtension != null) {
      validatorExtension.clear();
    }
 else {
      validatorExtension=new ArrayList<FacesValidatorExtension>();
    }
  }
  validatorExtension.add(validatorExtensionItem);
}
 else {
}
",0,0,0,,
1931,} else {,"if (s.getInputStream() instanceof DelegatingInputStream) {
  cache((DelegatingInputStream)s.getInputStream());
}
 else {
}
",0,0,0,,
1932,} else {,"if (socketFactory == null) {
  final SSLContext ctx;
  if (tlsClientParameters.getSslContext() != null) {
    ctx=tlsClientParameters.getSslContext();
  }
 else {
    ctx=org.apache.cxf.transport.https.SSLUtils.getSSLContext(tlsClientParameters);
  }
  String[] cipherSuites=SSLUtils.getCiphersuitesToInclude(tlsClientParameters.getCipherSuites(),tlsClientParameters.getCipherSuitesFilter(),ctx.getSocketFactory().getDefaultCipherSuites(),SSLUtils.getSupportedCipherSuites(ctx),LOG);
  String protocol=tlsClientParameters.getSecureSocketProtocol() != null ? tlsClientParameters.getSecureSocketProtocol() : ctx.getProtocol();
  socketFactory=new SSLSocketFactoryWrapper(ctx.getSocketFactory(),cipherSuites,protocol);
  lastTlsHash=tlsClientParameters.hashCode();
}
 else {
}
",0,0,0,,
1933,} else {,"if (particle instanceof XmlSchemaGroupBase && !(particle instanceof XmlSchemaChoice)) {
  XmlSchemaGroupBase groupBase=(XmlSchemaGroupBase)particle;
  for (Iterator iterator=groupBase.getItems().getIterator(); iterator.hasNext(); ) {
    XmlSchemaParticle child=(XmlSchemaParticle)iterator.next();
    if (child instanceof XmlSchemaElement) {
      XmlSchemaElement element=(XmlSchemaElement)child;
      elements.add(element);
    }
  }
}
 else {
}
",0,0,0,,
1934,} else {,"if (wsdlReturnValueMapping.getWsdlMessagePartName() != null) {
  String wsdlMessagePartName=wsdlReturnValueMapping.getWsdlMessagePartName();
  if (outParamNames.contains(wsdlMessagePartName)) {
    throw new OpenEJBException(""output message part "" + wsdlMessagePartName + "" has both an INOUT or OUT mapping and a return value mapping for operation ""+ operationName);
  }
  if (bindingStyle.isWrapped()) {
    Part outPart=getWrappedPart(outputMessage);
    XmlElementInfo returnParticle=getWrapperChild(outPart,wsdlMessagePartName);
    returnQName=new QName("""",returnParticle.qname.getLocalPart());
    returnXmlType=returnParticle.xmlType;
  }
 else   if (bindingStyle.isRpc()) {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=new QName("""",part.getName());
    returnXmlType=part.getTypeName();
  }
 else {
    Part part=outputMessage.getPart(wsdlMessagePartName);
    if (part == null) {
      throw new OpenEJBException(""No part for wsdlMessagePartName "" + wsdlMessagePartName + "" in output message for operation ""+ operationName);
    }
    returnQName=getPartName(part);
    returnXmlType=returnQName;
  }
  outParamNames.add(wsdlMessagePartName);
}
 else {
}
",0,0,0,,
1935,} else {,"if (inMessage instanceof SoapMessage) {
  try {
    reserialize((SoapMessage)inMessage);
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Failed to reserialize soap message"",e);
  }
}
 else {
}
",0,0,0,,
1936,} else {,"if (token != null || HttpRequest.Method.GET.name().equals(request.getMethod())) {
  httpListener.onMessage(request,response);
}
 else {
}
",0,0,0,,
1937,} else {,"if (cst instanceof ConstantDynamic) {
}
 else {
}
",0,0,0,,
1938,{,"if (1 == 2) {
}
 else {
  if (true) {
    throw new ConfigurationException(""Use of avalon-style configuration not completed yet"");
  }
  final Configuration eventCartridgeConfs=conf.getChild(""event-cartriges"",false);
  if (eventCartridgeConfs == null) {
    ecconfig=Collections.EMPTY_LIST;
  }
 else {
    Configuration[] classNameConfs=eventCartridgeConfs.getChildren(""classname"");
    if (classNameConfs == null) {
      ecconfig=Collections.EMPTY_LIST;
    }
 else {
      ecconfig=new ArrayList(classNameConfs.length);
      for (int i=0; i < classNameConfs.length; i++) {
        ecconfig.add(classNameConfs[i].getValue());
      }
    }
  }
}
",0,0,0,,
1939,} else {,"if (currentDepth < depth) {
  Set tables=(Set)depthList.get(currentDepth);
  tables.remove(table);
  tables=(Set)depthList.get(depth);
  tables.add(table);
}
 else {
}
",0,0,0,,
1940,} else {,"if (sourceType.getFeedType().equals(""rss"")) {
  alerts=rssChecker.getNewAlerts(sourceType.getFeedAddress(),sourceType.getLastChecked());
}
 else {
}
",0,0,0,,
1941,} else {,"if (!componentType.isUnresolved()) {
  implementation.getServices().addAll(componentType.getServices());
  implementation.getReferences().addAll(componentType.getReferences());
  implementation.getProperties().addAll(componentType.getProperties());
}
 else {
}
",0,0,0,,
1942,} else {,"if (endpointsRequireAutomaticResolution) {
  for (  Endpoint endpoint : endpoints) {
    endpointBuilder.build(endpoint);
  }
  componentReference.getBindings().clear();
  if (componentReference.getCallback() != null) {
    componentReference.getCallback().getBindings().clear();
  }
  for (  Endpoint endpoint : endpoints) {
    if (endpoint.isUnresolved() == false) {
      componentReference.getBindings().add(endpoint.getSourceBinding());
      if (componentReference.getCallback() != null) {
        componentReference.getCallback().getBindings().add(endpoint.getSourceCallbackBinding());
      }
    }
  }
}
 else {
}
",0,0,0,,
1943,} else {,"if (!msg.getRecipientName().equals(MessageHelper.RPC_MBOX) && nodeElement.getBinding().isMbox()) {
  handleMsg(msg);
}
 else {
}
",0,0,0,,
1944,} else {,"if (BasicAuthenticationPolicy.class.isInstance(p)) {
  basicAuthenticationPolicy=(BasicAuthenticationPolicy)p;
}
 else {
}
",0,0,0,,
1945,} else {,"if (BasicAuthenticationPolicy.class.isInstance(p)) {
  basicAuthenticationPolicy=(BasicAuthenticationPolicy)p;
}
 else {
}
",0,0,0,,
1946,} else {,"if (RemoteBindingHelper.isTargetRemote() || ((serviceURI != null) && (serviceURI.isAbsolute()))) {
  distributedBinding=new DistributedSCABindingImpl();
  distributedBinding.setSCABinding(binding);
  distributedProvider=distributedProviderFactory.createServiceBindingProvider(component,service,distributedBinding);
}
 else {
}
",0,0,0,,
1947,} else {,"if (distributedProviderFactory != null) {
  URI serviceURI=null;
  try {
    serviceURI=new URI(binding.getURI());
  }
 catch (  Exception ex) {
  }
  if (RemoteBindingHelper.isTargetRemote() || ((serviceURI != null) && (serviceURI.isAbsolute()))) {
    distributedBinding=new DistributedSCABindingImpl();
    distributedBinding.setSCABinding(binding);
    distributedProvider=distributedProviderFactory.createServiceBindingProvider(component,service,distributedBinding);
  }
 else {
  }
}
 else {
}
",0,0,0,,
1948,}else {,"if (Axis2HeaderPolicy.class.isInstance(p)) {
  axis2HeaderPolicies.add((Axis2HeaderPolicy)p);
}
 else {
}
",0,0,0,,
1949,} else {,"if (Axis2HeaderPolicy.class.isInstance(p)) {
  axis2HeaderPolicies.add((Axis2HeaderPolicy)p);
}
 else {
}
",0,0,0,,
1950,} else {,"if (wsdlProvidedByUser) {
  WSDLFactory factory=null;
  try {
    factory=WSDLFactory.newInstance();
  }
 catch (  WSDLException e) {
    throw new WSDLGenerationException(e);
  }
  Definition newDef=factory.newDefinition();
  String nsName=component.getName() + ""/"" + contractName;
  String namespaceURI=null;
  try {
    URI userTNS=new URI(def.getTargetNamespace());
    namespaceURI=userTNS.resolve(""/"" + nsName).toString();
  }
 catch (  URISyntaxException e1) {
    throw new WSDLGenerationException(e1);
  }
catch (  IllegalArgumentException e2) {
    throw new WSDLGenerationException(e2);
  }
  String defsName=component.getName() + ""."" + contractName;
  newDef.setQName(new QName(namespaceURI,defsName));
  newDef.setTargetNamespace(namespaceURI);
  newDef.addNamespace(""tns"",namespaceURI);
  newDef.addNamespace(""wsdl"",""http://schemas.xmlsoap.org/wsdl/"");
  List<WSDLDefinition> imports=new ArrayList<WSDLDefinition>();
  Interface interfaze=wsBinding.getBindingInterfaceContract().getInterface();
  if (interfaze instanceof WSDLInterface) {
    PortType portType=((WSDLInterface)interfaze).getPortType();
    boolean ok=importPortType(portType,wsdlDefinition,newDef,imports);
    if (!ok) {
      error(monitor,""PortTypeNotFound"",wsBinding,portType.getQName().toString(),component.getName(),contract.getName());
    }
  }
  Binding binding=wsBinding.getBinding();
  if (binding != null) {
    boolean ok=importBinding(binding,wsdlDefinition,newDef,imports);
    if (ok) {
      boolean ok2=importPortType(binding.getPortType(),wsdlDefinition,newDef,imports);
      if (!ok2) {
        error(monitor,""PortTypeNotFound"",wsBinding,binding.getPortType().getQName().toString(),component.getName(),contract.getName());
      }
    }
 else {
      error(monitor,""BindingNotFound"",wsBinding,binding.getQName().toString(),component.getName(),contract.getName());
    }
  }
  QName serviceQName=wsBinding.getServiceName();
  String portName=wsBinding.getPortName();
  if (serviceQName != null) {
    Service service=def.getService(serviceQName);
    if (portName != null) {
      Port port=service.getPort(portName);
      Port newPort=copyPort(newDef,port,wsBinding);
      if (newPort != null) {
        importBinding(port.getBinding(),wsdlDefinition,newDef,imports);
        ports.add(newPort);
      }
 else {
        error(monitor,""InvalidPort"",wsBinding,serviceQName.toString(),portName,component.getName(),contract.getName());
      }
    }
 else {
      for (      Object port : service.getPorts().values()) {
        Port newPort=copyPort(newDef,(Port)port,wsBinding);
        if (newPort != null) {
          importBinding(((Port)port).getBinding(),wsdlDefinition,newDef,imports);
          ports.add(newPort);
        }
 else {
          warning(monitor,""IgnoringPort"",wsBinding,serviceQName.toString(),((Port)port).getName(),component.getName(),contract.getName());
        }
      }
      if (ports.size() == 0) {
        error(monitor,""NoValidPorts"",wsBinding,serviceQName.toString(),component.getName(),contract.getName());
      }
    }
  }
  def=newDef;
}
 else {
}
",0,0,0,,
1951,} else {,"if (!spaceFound) {
  sb.append(c);
  spaceFound=true;
}
 else {
}
",0,0,0,,
1952,if (callback != null && !(callback instanceof CallableReference)) {,"if (callback != null && !(callback instanceof CallableReference)) {
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1953,} else {,"if (pValue != null) {
  int i1=Array.getLength(pValue);
  for (int j=0; j < i1; j++) {
    Object o=Array.get(pValue,j);
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
1954,} else {,"if (objList != null && objList.size() > 0) {
  for (Iterator j=objList.iterator(); j.hasNext(); ) {
    Object o=j.next();
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
1955,} else {,"if (pValue != null) {
  int i1=Array.getLength(pValue);
  for (int j=0; j < i1; j++) {
    Object o=Array.get(pValue,j);
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
1956,} else {,"if (objList != null && objList.size() > 0) {
  for (Iterator j=objList.iterator(); j.hasNext(); ) {
    Object o=j.next();
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
1957,} else {,"if (actual > less || actual == '&' || actual == '#' || actual == '\'' || actual == ' ' || actual == '%' || actual == ':' || actual == '(' || actual == ')' || actual == '""') {
  sb.append(actual);
}
 else {
}
",0,0,0,,
1958,} else {,"if (endpoint.isUnresolved() != true) {
}
 else {
}
",0,0,0,,
1959,if (event.getType() == ServiceEvent.UNREGISTERING && reference.getBundle() == bundle) {,"if (event.getType() == ServiceEvent.UNREGISTERING && reference.getBundle() == bundle) {
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1960,} else {,"if (vm != null) {
  try {
    vm.stop();
  }
 catch (  InterruptedException e) {
    throw new ServiceRuntimeException(e);
  }
  nodeVMs.remove(vm);
}
 else {
}
",0,0,0,,
1961,"if (((String)pkg).startsWith(""org.osgi"")) {","if (((String)pkg).startsWith(""org.osgi"")) {
}
 else if (!version.matches("".*\\..*\\."")) {
  Version curVersion=new Version(version);
  Version nextVersion=new Version(curVersion.getMajor(),curVersion.getMinor() + 1,0);
  version='[' + version + ','+ nextVersion+ ')';
}
 else version='[' + version + ','+ version+ ']';
",0,0,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
1962,} else {,"if (id != null && id.length() > 0) {
  requestMessage.setBody(new Object[]{id});
}
 else {
}
",0,0,0,,
1963,} else {,"if (!spaceFound) {
  sb.append(c);
  spaceFound=true;
}
 else {
}
",0,0,0,,
1964,} else {,"if (invoker instanceof InterceptorAsync) {
  ((InterceptorAsync)invoker).setPrevious(asyncResponseInvoker);
}
 else {
}
",0,0,0,,
1965,} else {,"if (serviceBindingProvider instanceof EndpointAsyncProvider) {
  EndpointAsyncProvider asyncEndpointProvider=(EndpointAsyncProvider)serviceBindingProvider;
  InvokerAsyncResponse asyncResponseInvoker=asyncEndpointProvider.createAsyncResponseInvoker();
  for (  InvocationChain chain : getInvocationChains()) {
    Invoker invoker=chain.getHeadInvoker();
    if (invoker instanceof InterceptorAsync) {
      ((InterceptorAsync)invoker).setPrevious(asyncResponseInvoker);
    }
 else {
    }
  }
}
 else {
}
",0,0,0,,
1966,} else {,"if (chain.getHeadInvoker() instanceof InterceptorAsync) {
  ((InterceptorAsync)chain.getHeadInvoker()).setPrevious(asyncResponseInvoker);
}
 else {
}
",0,0,0,,
1967,} else {,"if (xmlString instanceof WSDLInfo) {
  WSDLDefinition wsdlDefinition=((WSDLInfo)xmlString).getWsdlDefintion();
  for (  Map.Entry<String,List<javax.wsdl.Import>> entry : ((Map<String,List<javax.wsdl.Import>>)wsdlDefinition.getDefinition().getImports()).entrySet()) {
    for (    javax.wsdl.Import imp : entry.getValue()) {
      String wsdlName=imp.getDefinition().getDocumentBaseURI();
      WSDLInfo wsdlInfo=(WSDLInfo)xmlMap.get(getFilenameWithoutPath(wsdlName));
      wsdlDefinition.getImportedDefinitions().add(wsdlInfo.getWsdlDefintion());
    }
  }
  Types types=wsdlDefinition.getDefinition().getTypes();
  if (types != null) {
    int index=0;
    for (    Object ext : types.getExtensibilityElements()) {
      ExtensibilityElement extElement=(ExtensibilityElement)ext;
      Element element=null;
      if (extElement instanceof Schema) {
        element=((Schema)extElement).getElement();
      }
      if (element != null) {
        XSDefinition xsDefinition=xsdFactory.createXSDefinition();
        xsDefinition.setUnresolved(true);
        xsDefinition.setNamespace(element.getAttribute(""targetNamespace""));
        xsDefinition.setDocument(element.getOwnerDocument());
        XmlSchema schema=schemaCollection.read(element,null);
        xsDefinition.setSchema(schema);
        xsDefinition.setLocation(URI.create(xmlString.getBaseURI() + ""#"" + index));
        wsdlDefinition.getXmlSchemas().add(xsDefinition);
        index++;
      }
    }
  }
}
 else {
}
",0,0,0,,
1968,} else {,"if (callbackHandler.getCallbackTargetURI() != null) {
  epr.getBinding().setURI(callbackHandler.getCallbackTargetURI());
}
 else {
}
",0,0,0,,
1969,} else {,"if (pValue != null) {
  int i1=Array.getLength(pValue);
  for (int j=0; j < i1; j++) {
    Object o=Array.get(pValue,j);
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
1970,} else {,"if (objList != null && objList.size() > 0) {
  for (Iterator j=objList.iterator(); j.hasNext(); ) {
    Object o=j.next();
    props.add(new BeanXmlNodeImpl(pName,o));
  }
}
 else {
}
",0,0,0,,
1971,} else {,"if (type != null) {
  if (mapper.isSimpleXSDType(type)) {
    String NS_URI=bpelDOM.getDocumentElement().getNamespaceURI();
    String valueText=getPropertyValueText(property.getValue());
    Element literalElement=bpelDOM.createElementNS(NS_URI,""literal"");
    literalElement.setTextContent(valueText);
    Element fromElement=bpelDOM.createElementNS(NS_URI,""from"");
    fromElement.appendChild(literalElement);
    Element toElement=bpelDOM.createElementNS(NS_URI,""to"");
    Attr variableAttribute=bpelDOM.createAttribute(""variable"");
    variableAttribute.setValue(property.getName());
    toElement.setAttributeNode(variableAttribute);
    Element copyElement=bpelDOM.createElementNS(NS_URI,""copy"");
    copyElement.appendChild(fromElement);
    copyElement.appendChild(toElement);
    Element assignElement=bpelDOM.createElementNS(NS_URI,""assign"");
    assignElement.appendChild(copyElement);
    return assignElement;
  }
}
 else {
}
",0,0,0,,
1972,} else {,"if (!wsdl.isUnresolved()) {
  bpelImport.setWSDLDefinition(wsdl);
}
 else {
}
",0,0,0,,
1973,} else {,"if (myData.value == null) {
  myData.value=new Order();
  myData.value.setStatus(Status.REJECTED);
}
 else {
}
",0,0,0,,
1974,} else {,"if (xmlString instanceof WSDLInfo) {
  wsdlDefinition=((WSDLInfo)xmlString).getWsdlDefintion();
  for (  Map.Entry<String,List<javax.wsdl.Import>> entry : ((Map<String,List<javax.wsdl.Import>>)wsdlDefinition.getDefinition().getImports()).entrySet()) {
    for (    javax.wsdl.Import imp : entry.getValue()) {
      String wsdlName=imp.getDefinition().getDocumentBaseURI();
      WSDLInfo wsdlInfo=(WSDLInfo)xmlMap.get(getFilenameWithoutPath(wsdlName));
      wsdlDefinition.getImportedDefinitions().add(wsdlInfo.getWsdlDefintion());
    }
  }
  Types types=wsdlDefinition.getDefinition().getTypes();
  if (types != null) {
    for (int i=0; i < types.getExtensibilityElements().size(); i++) {
      String schemaName=xmlString.getBaseURI() + ""#"" + i++;
      XSDInfo xsdInfo=(XSDInfo)xmlMap.get(getFilenameWithoutPath(schemaName));
      wsdlDefinition.getXmlSchemas().add(xsdInfo.getXsdDefinition());
    }
  }
}
 else {
}
",0,0,0,,
1975,{,"if (isRestriction && !XSDConstants.isURType(xsdComplexTypeDefinition)) {
}
 else {
  String name=getEcoreAttribute(xsdWildcard,""name"");
  if (name == null) {
    name=""anyAttribute"";
  }
  createFeature(eClass,name,ecorePackage.getEFeatureMapEntry(),xsdWildcard,0,-1);
}
",0,0,0,,
1976,} else {,"if (isSequenced) {
  EClass eClass=(EClass)type;
  ExtendedMetaData.INSTANCE.setContentKind(eClass,ExtendedMetaData.MIXED_CONTENT);
  EAttribute mixedFeature=(EAttribute)SDOFactory.eINSTANCE.createAttribute();
  mixedFeature.setName(""mixed"");
  mixedFeature.setUnique(false);
  mixedFeature.setEType(EcorePackage.eINSTANCE.getEFeatureMapEntry());
  mixedFeature.setLowerBound(0);
  mixedFeature.setUpperBound(-1);
  ((ClassImpl)eClass).setSequenceFeature(mixedFeature);
  ExtendedMetaData.INSTANCE.setFeatureKind(mixedFeature,ExtendedMetaData.ELEMENT_WILDCARD_FEATURE);
  ExtendedMetaData.INSTANCE.setName(mixedFeature,"":mixed"");
}
 else {
}
",0,0,0,,
1977,{,"if ('@' == c) {
}
 else {
  setFeatureName(token);
  if (eObject == null)   break;
}
",0,0,0,,
1978,{,"if (propertyID < 0) {
}
 else {
  properties[propertyID]=propertyValue;
}
",0,0,0,,
1979,else {,"if ((ann.getBegin() > trg.getEnd()) && (ann.getEnd() > trg.getEnd())) {
  result=CONSTANT_RIGHTRIGHT;
}
 else {
}
",0,0,0,,
1980,} else {,"if (controller != null && msgFrom != null) {
  if (ackClient(messageContext)) {
    try {
      getController().getOutputChannel().sendReply(AsynchAEMessage.ServiceInfo,messageContext.getEndpoint(),aMessage.getStringProperty(AsynchAEMessage.CasReference),true);
    }
 catch (    Exception ex) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING,CLASS_NAME.getName(),""produceTextMessage"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_exception__WARNING"",ex);
      return;
    }
  }
  if (msgSentFromIP != null) {
    if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE,CLASS_NAME.getName(),""onMessage"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_recvd_new_message_with_ip__FINE"",new Object[]{controller.getComponentName(),msgFrom,msgSentFromIP,messageType,command,casRefId});
    }
  }
 else {
    if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE,CLASS_NAME.getName(),""onMessage"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_recvd_new_message__FINE"",new Object[]{controller.getComponentName(),msgFrom,messageType,command,casRefId});
    }
  }
}
 else {
}
",0,0,0,,
1981,} else {,"if (!ll.contains(messageListener)) {
  ll.add(messageListener);
}
 else {
}
",0,0,0,,
1982,} else {,"if (anEndpoint.isRemote()) {
  if (anEndpoint.getSerialFormat() == SerialFormat.XMI) {
    String serializedCAS=getSerializedCas(true,entry.getCasReferenceId(),anEndpoint,anEndpoint.isRetryEnabled());
    sendCasToRemoteEndpoint(false,serializedCAS,entry,anEndpoint,false);
  }
 else {
    byte[] binaryCas=getBinaryCas(true,entry.getCasReferenceId(),anEndpoint,anEndpoint.isRetryEnabled());
    if (binaryCas == null) {
      return;
    }
    sendCasToRemoteEndpoint(false,binaryCas,entry,anEndpoint,false);
  }
}
 else {
}
",0,0,0,,
1983,} else {,"if (disableListener(t)) {
  handleQueueFailure(t);
}
 else {
}
",0,0,0,,
1984,} else {,"if (c.failed()) {
  fail(""Broker Failed - Reason:"" + c.getReasonForFailure());
}
 else {
}
",0,0,0,,
1985,} else {,"if (parentCasReferenceId != null) {
}
 else {
}
",0,0,0,,
1986,} else {,"if (parentCasReferenceId != null) {
}
 else {
}
",0,0,0,,
1987,} else {,"if (runNotifier != null) {
  this.runNotifier.pleaseStop();
}
 else {
}
",0,0,0,,
1988,} else {,"if (this.socket != null && !this.socket.isClosed()) {
  try {
    writer.write(""SHUTDOWN"");
    writer.flush();
    BufferedReader in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
    StringBuffer sb=new StringBuffer();
    int c=in.read();
    while (c >= 0) {
      sb.append((char)c);
      c=in.read();
      if (c == '\n') {
        break;
      }
    }
    System.out.println(""UimacppServiceManagement service reports shutdown "" + sb.toString());
    return;
  }
 catch (  SocketException e) {
    System.out.println(""UimacppServiceManagement.shutdown() - Socket is closed - unable to communicate with the process which may have terminated"");
  }
}
 else {
}
",0,0,0,,
1989,} else {,"if (!getController().getInProcessCache().isEmpty()) {
  getController().getInProcessCache().registerCallbackWhenCacheEmpty(getController().getEventListener());
}
 else {
}
",0,0,0,,
1990,} else {,"if (!waitingInGetNext) {
  waitingInGetNext=true;
  lastGetNextWaitTimeUpdate=System.nanoTime();
}
 else {
}
",0,0,0,,
1991,} else {,"if (object instanceof RemoteAEDeploymentMetaData) {
  return AsyncAggregateErrorConfiguration.class;
}
 else {
}
",0,0,0,,
1992,} else {,"if (object instanceof RemoteAEDeploymentMetaData) {
  RemoteAEDeploymentMetaData metaData=(RemoteAEDeploymentMetaData)object;
  Class cls=null;
  ResourceSpecifier rs=metaData.getResourceSpecifier();
  if (rs != null) {
    if (rs instanceof AnalysisEngineDescription) {
      cls=AsyncAggregateErrorConfiguration.class;
    }
  }
 else {
    String parentKey=metaData.getParent().getKey();
    if (parentKey == null) {
      parentKey=""Top Analysis Engine"";
    }
    updateStatus(""The analysis engine's key=\"""" + metaData.getKey() + ""\"" is not valid for the aggregate \""""+ parentKey+ ""\"""",IMessageProvider.ERROR);
  }
  return cls;
}
 else {
}
",0,0,0,,
1993,} else {,"if (source == buttonCollCompleteErrors) {
  tableCollCompleteErrors.setEnabled(buttonCollCompleteErrors.getSelection());
}
 else {
}
",0,0,0,,
1994,} else {,"if (((Element)aElement.getParentNode()).getTagName().equalsIgnoreCase(TAG_SERVICE)) {
  isTopAnalysisEngine=true;
}
 else {
}
",0,0,0,,
1995,} else {,"if (x instanceof RemoteAEDeploymentMetaData_Impl) {
  RemoteAEDeploymentMetaData_Impl aeDepl=(RemoteAEDeploymentMetaData_Impl)x;
  aeDepl.toXML(aContentHandler,aWriteDefaultNamespaceAttribute);
}
 else {
}
",0,0,0,,
1996,} else {,"if (controller != null && msgFrom != null) {
  if (ackClient(messageContext)) {
    try {
      getController().getOutputChannel().sendReply(AsynchAEMessage.ServiceInfo,messageContext.getEndpoint(),aMessage.getStringProperty(AsynchAEMessage.CasReference),true);
    }
 catch (    Exception ex) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING,CLASS_NAME.getName(),""produceTextMessage"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_exception__WARNING"",ex);
      return;
    }
  }
  if (msgSentFromIP != null) {
    if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE,CLASS_NAME.getName(),""onMessage"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_recvd_new_message_with_ip__FINE"",new Object[]{controller.getComponentName(),msgFrom,msgSentFromIP,messageType,command,casRefId});
    }
  }
 else {
    if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.FINE)) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.FINE,CLASS_NAME.getName(),""onMessage"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_recvd_new_message__FINE"",new Object[]{controller.getComponentName(),msgFrom,messageType,command,casRefId});
    }
  }
}
 else {
}
",0,0,0,,
1997,} else {,"if (!ll.contains(messageListener)) {
  ll.add(messageListener);
}
 else {
}
",0,0,0,,
1998,} else {,"if (anEndpoint.isRemote()) {
  if (anEndpoint.getSerialFormat() == SerialFormat.XMI) {
    String serializedCAS=getSerializedCas(true,entry.getCasReferenceId(),anEndpoint,anEndpoint.isRetryEnabled());
    sendCasToRemoteEndpoint(false,serializedCAS,entry,anEndpoint,false);
  }
 else {
    byte[] binaryCas=getBinaryCas(true,entry.getCasReferenceId(),anEndpoint,anEndpoint.isRetryEnabled());
    if (binaryCas == null) {
      return;
    }
    sendCasToRemoteEndpoint(false,binaryCas,entry,anEndpoint,false);
  }
}
 else {
}
",0,0,0,,
1999,} else {,"if (disableListener(t)) {
  handleQueueFailure(t);
}
 else {
}
",0,0,0,,
2000,} else {,"if (c.failed()) {
  fail(""Broker Failed - Reason:"" + c.getReasonForFailure());
}
 else {
}
",0,0,0,,
2001,} else {,"if (parentCasReferenceId != null) {
}
 else {
}
",0,0,0,,
2002,} else {,"if (parentCasReferenceId != null) {
}
 else {
}
",0,0,0,,
2003,} else {,"if (runNotifier != null) {
  this.runNotifier.pleaseStop();
}
 else {
}
",0,0,0,,
2004,} else {,"if (this.socket != null && !this.socket.isClosed()) {
  try {
    writer.write(""SHUTDOWN"");
    writer.flush();
    BufferedReader in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
    StringBuffer sb=new StringBuffer();
    int c=in.read();
    while (c >= 0) {
      sb.append((char)c);
      c=in.read();
      if (c == '\n') {
        break;
      }
    }
    System.out.println(""UimacppServiceManagement service reports shutdown "" + sb.toString());
    return;
  }
 catch (  SocketException e) {
    System.out.println(""UimacppServiceManagement.shutdown() - Socket is closed - unable to communicate with the process which may have terminated"");
  }
}
 else {
}
",0,0,0,,
2005,} else {,"if (!getController().getInProcessCache().isEmpty()) {
  getController().getInProcessCache().registerCallbackWhenCacheEmpty(getController().getEventListener());
}
 else {
}
",0,0,0,,
2006,} else {,"if (!waitingInGetNext) {
  waitingInGetNext=true;
  lastGetNextWaitTimeUpdate=System.nanoTime();
}
 else {
}
",0,0,0,,
2007,} else {,"if (object instanceof RemoteAEDeploymentMetaData) {
  return AsyncAggregateErrorConfiguration.class;
}
 else {
}
",0,0,0,,
2008,} else {,"if (object instanceof RemoteAEDeploymentMetaData) {
  RemoteAEDeploymentMetaData metaData=(RemoteAEDeploymentMetaData)object;
  Class cls=null;
  ResourceSpecifier rs=metaData.getResourceSpecifier();
  if (rs != null) {
    if (rs instanceof AnalysisEngineDescription) {
      cls=AsyncAggregateErrorConfiguration.class;
    }
  }
 else {
    String parentKey=metaData.getParent().getKey();
    if (parentKey == null) {
      parentKey=""Top Analysis Engine"";
    }
    updateStatus(""The analysis engine's key=\"""" + metaData.getKey() + ""\"" is not valid for the aggregate \""""+ parentKey+ ""\"""",IMessageProvider.ERROR);
  }
  return cls;
}
 else {
}
",0,0,0,,
2009,} else {,"if (source == buttonCollCompleteErrors) {
  tableCollCompleteErrors.setEnabled(buttonCollCompleteErrors.getSelection());
}
 else {
}
",0,0,0,,
2010,} else {,"if (((Element)aElement.getParentNode()).getTagName().equalsIgnoreCase(TAG_SERVICE)) {
  isTopAnalysisEngine=true;
}
 else {
}
",0,0,0,,
2011,} else {,"if (x instanceof RemoteAEDeploymentMetaData_Impl) {
  RemoteAEDeploymentMetaData_Impl aeDepl=(RemoteAEDeploymentMetaData_Impl)x;
  aeDepl.toXML(aContentHandler,aWriteDefaultNamespaceAttribute);
}
 else {
}
",0,0,0,,
2012,} else {,"if (!(e.getCause() instanceof InstanceNotFoundException)) {
  if (howManySeenSoFar > 3) {
    DuccService.getDuccLogger(this.getClass().getName()).info(""UimaAEJmxMonitor.run()"",null,e);
    howManySeenSoFar=1;
    throw e;
  }
  howManySeenSoFar++;
}
 else {
}
",0,0,0,,
2013,} else {,"if (!f.exists()) {
  this.cgroupBaseDir+=""/"" + SYSTEM + ""/"";
  legacyCgConfig=true;
}
 else {
}
",0,0,0,,
2014,else {,"if (loadedPrivate.get()) {
}
 else {
}
",0,0,0,,
2015,else {,"if (stateNodeInventory.get()) {
  retVal=false;
  stateNodeInventory.set(retVal);
  logger.info(methodName,jobid,retVal);
}
 else {
}
",0,0,0,,
2016,else {,"if (ckptMaster.get()) {
  ckptMaster.set(false);
  logger.info(location,jobid,"""");
}
 else {
}
",0,0,0,,
2017,} else {,"if (!(e.getCause() instanceof InstanceNotFoundException)) {
  if (howManySeenSoFar > 3) {
    if (logger.isLoggable(Level.INFO)) {
      logger.log(Level.INFO,"""",e);
    }
    howManySeenSoFar=1;
    throw e;
  }
  howManySeenSoFar++;
}
 else {
}
",0,0,0,,
2018,} else {,"if (!(e.getCause() instanceof InstanceNotFoundException)) {
  if (howManySeenSoFar > 3) {
    if (agent != null && agent.logger != null) {
      agent.logger.info(""UimaAEJmxMonitor.run()"",null,e);
    }
    howManySeenSoFar=1;
    throw e;
  }
  howManySeenSoFar++;
}
 else {
}
",0,0,0,,
2019,} else {,"if (outgoing != null) {
  conn.setRequestProperty(""Content-Type"",content_type);
  conn.setDoOutput(true);
  OutputStream postout=conn.getOutputStream();
  postout.write(outgoing.getBytes());
  postout.close();
}
 else {
}
",0,0,0,,
2020,} else {,"if (f.toString().contains(cp_entry)) {
  in.add(f.toURI().toURL());
  continue;
}
 else {
}
",0,0,0,,
2021,else {,"if (process.isInitialized()) {
  if (DuccProcessHelper.isFailedProcess(process)) {
    list.add(process.getDuccId());
  }
}
 else {
}
",0,0,0,,
2022,else {,"if (!process.isDeallocationNormal()) {
  list.add(process.getDuccId());
}
 else {
}
",0,0,0,,
2023,else {,"if (process.isInitialized()) {
  if (DuccProcessHelper.isFailedProcess(process)) {
    list.add(process.getDuccId());
  }
}
 else {
}
",0,0,0,,
2024,else {,"if (!process.isDeallocationNormal()) {
  list.add(process.getDuccId());
}
 else {
}
",0,0,0,,
2025,else {,"if (duccwork instanceof DuccWorkJob) {
  sb.append(""<input type=\""button\"" onclick=\""ducc_confirm_terminate_service("" + id + "")\"" value=\""Terminate\"" ""+ disabled+ ""/>"");
}
 else {
}
",0,0,0,,
2026,else {,"if (dw instanceof DuccWorkJob) {
  DuccWorkJob job=(DuccWorkJob)dw;
  sb.append(trGet(counter));
  buildReservationsListEntry(request,sb,job.getDuccId(),job,duccData,now);
}
 else {
}
",0,0,0,,
2027,else {,"if (dw instanceof DuccWorkJob) {
  DuccWorkJob job=(DuccWorkJob)dw;
  JsonArray row=buildReservationRow(request,job,duccData,now);
  data.add(row);
}
 else {
}
",0,0,0,,
2028,else {,"if (isServiceFileAccessForRead(reqUser,meta)) {
  retVal=DataAccessPermission.Read;
}
 else {
}
",0,0,0,,
2029,} else {,"if (that.isActive()) {
  retVal=1;
}
 else {
}
",0,0,0,,
2030,} else {,"if (range.getName().equals(CAS.TYPE_NAME_BOOLEAN)) {
  Boolean b=Boolean.parseBoolean(value);
  structure.setBooleanValue(targetFeature,b);
}
 else {
}
",0,0,0,,
2031,} else {,"if (floorEntry != null && ceilingEntry != null) {
  RutaBasic floor=floorEntry.getValue();
  RutaBasic ceiling=ceilingEntry.getValue();
  RutaBasic toSplit=null;
  if (floor.getEnd() > anchor) {
    toSplit=floor;
  }
 else {
    toSplit=ceiling;
  }
  int newEnd=toSplit.getEnd();
  if (newEnd == anchor) {
    return false;
  }
  cas.removeFsFromIndexes(toSplit);
  toSplit.setEnd(anchor);
  RutaBasic newRB=new RutaBasic(getJCas(),anchor,newEnd);
  newRB.setLowMemoryProfile(lowMemoryProfile);
  newRB.setEndMap(toSplit.getEndMap().clone());
  newRB.setPartOf(toSplit.getPartOf().clone());
  toSplit.clearEndMap();
  cas.addFsToIndexes(toSplit);
  cas.addFsToIndexes(newRB);
  beginAnchors.put(floor.getBegin(),floor);
  beginAnchors.put(newRB.getBegin(),newRB);
  beginAnchors.put(ceiling.getBegin(),ceiling);
  endAnchors.put(floor.getEnd(),floor);
  endAnchors.put(newRB.getEnd(),newRB);
  endAnchors.put(ceiling.getEnd(),ceiling);
  return true;
}
 else {
}
",0,0,0,,
2032,} else {,"if (range.getName().equals(CAS.TYPE_NAME_BOOLEAN)) {
  Boolean b=Boolean.parseBoolean(value);
  structure.setBooleanValue(targetFeature,b);
}
 else {
}
",0,0,0,,
2033,} else {,"if (colorTypes.size() == 1) {
  best=colorTypes.get(0);
}
 else {
}
",0,0,0,,
2034,"if (typeSystem.subsumes(jcas.getCasType(FSArray.type), range)) {","if (typeSystem.subsumes(jcas.getCasType(FSArray.type),range)) {
}
 else {
  int begin=delta + matchResult.start(cg);
  int end=delta + matchResult.end(cg);
  if (begin < end) {
    AnnotationFS a=cas.createAnnotation(range,begin,end);
    afs.setFeatureValue(feature,a);
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
2035,} else if (variableType != null && variableType.isAssignableFrom(AnnotationFS.class)) {,"if (variableType != null && variableType.isAssignableFrom(AnnotationFS.class)) {
}
 else {
  String type=variableType == null ? ""unknown"" : variableType.getSimpleName();
  throw new RuntimeException(""Overriding global variable '"" + label + ""' of type '""+ type+ ""' with a local label variable is not allowed (in script ""+ context.getParent().getName()+ "")!"");
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2036,} else {,"if (tme.equals(parent)) {
  blockApply.add(result);
}
 else {
}
",0,0,0,,
2037,} else {,"if (tme.equals(parent)) {
  blockApply.add(result);
}
 else {
}
",0,0,0,,
2038,if ((StringUtils.isBlank(featureValue2)) && StringUtils.isBlank(featureValue1)) {,"if ((StringUtils.isBlank(featureValue2)) && StringUtils.isBlank(featureValue1)) {
}
 else if (featureValue1 != null || featureValue2 != null) {
  String f1=featureValue1 == null ? ""null"" : featureValue1.toUpperCase();
  String f2=featureValue2 == null ? ""null"" : featureValue2.toUpperCase();
  a1.setFeatureValueFromString(eachFeature1,f1);
  a2.setFeatureValueFromString(eachFeature2,f2);
  return false;
}
 else if (featureValue2.trim().toLowerCase().contains(featureValue1.trim().toLowerCase())) {
  result&=true;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2039,} else {,"if (element instanceof TypeTreeNode) {
  text+="" ["" + ((TypeTreeNode)element).getChildren().length + ""]"";
}
 else {
}
",0,0,0,,
2040,} else {,"if (tsExpr != null) {
  String localPath=tsExpr.getName();
  processCompleteTypeSystemImport(tsExpr,localPath,typeToken,pkgToken,aliasToken);
}
 else {
}
",0,0,0,,
2041,} else {,"if (method.getSource() != null) {
  CaleeSourceElementRequestor requestor=new CaleeSourceElementRequestor();
  ISourceElementParser parser=DLTKLanguageManager.getSourceElementParser(RutaNature.NATURE_ID);
  parser.setRequestor(requestor);
  parser.parseSourceModule(new MethodSourceCode(method));
}
 else {
}
",0,0,0,,
2042,} else {,"if (tempNode != node) {
  Trace.trace("" 1 Duplicate (short name) Label:"" + node.getLabel());
  if (node.getObject() != null) {
    node.setLabel(((TypeDescription)node.getObject()).getName());
  }
  _rootSuper.insertChild(node);
}
 else {
}
",0,0,0,,
2043,} else {,"if (descriptor instanceof TypeSystemDescription) {
  tsDescription=(TypeSystemDescription)descriptor;
  try {
    tsDescription.resolveImports();
  }
 catch (  InvalidXMLException e) {
    return null;
  }
}
 else {
}
",0,0,0,,
2044,} else {,"if (descriptor instanceof TypeSystemDescription) {
  typeSystemDescription=(TypeSystemDescription)descriptor;
}
 else {
}
",0,0,0,,
2045,} else {,"if (descriptor instanceof TypeSystemDescription) {
  typeSystemDescription=(TypeSystemDescription)descriptor;
}
 else {
}
",0,0,0,,
2046,} else {,"if (showOneLine) {
  List aFeatures=fs.getType().getFeatures();
  if (aFeatures.size() > 0) {
    values+=""("";
    for (int i=0; i < aFeatures.size(); ++i) {
      Feature f=(Feature)aFeatures.get(i);
      if (f.getShortName().equalsIgnoreCase(""sofa"")) {
        continue;
      }
      String textFeature="""";
      if (f.getRange().isPrimitive()) {
        textFeature="": "" + fs.getFeatureValueAsString(f);
      }
 else {
        String extra="""";
        if (fs.getFeatureValue(f) == null) {
          if (hideNoValueFeature) {
            continue;
          }
          extra="" (no value)"";
        }
        textFeature="" - "" + f.getRange().getShortName() + extra;
      }
      values+=f.getShortName() + textFeature + "" ; "";
    }
    values+="")"";
  }
}
 else {
}
",0,0,0,,
2047,} else {,"if (element instanceof UFeatureStructure) {
  return getTypeBackground(((UFeatureStructure)element).getType().getName());
}
 else {
}
",0,0,0,,
2048,} else {,"if (element instanceof TypeNode) {
  if (((TypeNode)element).getBgColor() != null) {
    return (Color)((TypeNode)element).getBgColor();
  }
}
 else {
}
",0,0,0,,
2049,} else {,"if (ssel.getFirstElement() instanceof TypeNode) {
  _selectedTreeNode=(TypeNode)ssel.getFirstElement();
  return;
}
 else {
}
",0,0,0,,
2050,} else {,"if (element instanceof TypeNode) {
  if (((TypeNode)element).getBgColor() != null) {
    return (Color)((TypeNode)element).getBgColor();
  }
}
 else {
}
",0,0,0,,
2051,} else {,"if (ssel.getFirstElement() instanceof TypeNode) {
  _selectedTreeNode=(TypeNode)ssel.getFirstElement();
  return;
}
 else {
}
",0,0,0,,
2052,} else {,"if (element instanceof TypeNode) {
  if (((TypeNode)element).getBgColor() != null) {
    return (Color)((TypeNode)element).getBgColor();
  }
}
 else {
}
",0,0,0,,
2053,} else {,"if (ssel.getFirstElement() instanceof TypeNode) {
  _selectedTreeNode=(TypeNode)ssel.getFirstElement();
  return;
}
 else {
}
",0,0,0,,
2054,} else {,"if (element instanceof CEVTypeTreeNode) {
  text+="" ["" + ((CEVTypeTreeNode)element).getChildren().length + ""]"";
}
 else {
}
",0,0,0,,
2055,} else {,"if (typeMappings == null || typeMappings.size() == 0) {
  logger.warn(""Type mappings for type {} are not yet installed, delaying import until they are ready!"",GeonameEntry.ITEM_TYPE);
  schedulerService.getScheduleExecutorService().schedule(new TimerTask(){
    @Override public void run(){
      importGeoNameDatabase(f);
    }
  }
,refreshDbInterval,TimeUnit.MILLISECONDS);
  return;
}
 else {
}
",0,0,0,,
2056,} else {,"if (name != null) {
  if (sortByElement.endsWith("":desc"")) {
    searchSourceBuilder.sort(name,SortOrder.DESC);
  }
 else {
    searchSourceBuilder.sort(name,SortOrder.ASC);
  }
}
 else {
}
",0,0,0,,
2057,} else {,"if (fieldName != null) {
  bucketsAggregation=AggregationBuilders.terms(""buckets"").field(fieldName).size(queryBucketSize);
  if (aggregate instanceof TermsAggregate) {
    TermsAggregate termsAggregate=(TermsAggregate)aggregate;
    if (termsAggregate.getPartition() > -1 && termsAggregate.getNumPartitions() > -1) {
      ((TermsAggregationBuilder)bucketsAggregation).includeExclude(new IncludeExclude(termsAggregate.getPartition(),termsAggregate.getNumPartitions()));
    }
  }
}
 else {
}
",0,0,0,,
2058,} else {,"if (treeNode instanceof ObjectNode) {
  ObjectNode root=(ObjectNode)treeNode;
  Iterator<Map.Entry<String,JsonNode>> elementsIterator=root.fields();
  while (elementsIterator.hasNext()) {
    Map.Entry<String,JsonNode> element=elementsIterator.next();
    String name=element.getKey();
    if (fieldValuesToMatch.containsKey(name)) {
      Set<String> valuesToMatch=fieldValuesToMatch.get(name);
      for (      String valueToMatch : valuesToMatch) {
        if (element.getValue().asText().matches(valueToMatch)) {
          objectClass=registry.get(name + ""="" + valueToMatch);
          break;
        }
      }
      if (objectClass != null) {
        break;
      }
    }
  }
  if (objectClass == null) {
    objectClass=HashMap.class;
  }
}
 else {
}
",0,0,0,,
2059,else {,"if ((operator == Query.FilterOperator.IN) || (operator == Query.FilterOperator.WITHIN)) {
  if ((!(value instanceof Collection)) && (value instanceof Iterable)) {
    List newValue=new ArrayList();
    for (    Object val : ((Iterable)value)) {
      newValue.add(val);
    }
    value=newValue;
  }
}
 else {
}
",0,0,0,,
2060,} else {,"if ((e & '耀') == 0) {
  CQLUtils.getBytes(bb,e);
}
 else {
}
",0,0,0,,
2061,} else {,"if ((e & '耀') == 0) {
  CQLUtils.getBytes(bb,e);
}
 else {
}
",0,0,0,,
2062,} else {,"if ((e & '耀') == 0) {
  CQLUtils.getBytes(bb,e);
}
 else {
}
",0,0,0,,
2063,} else {,"if ((e & '耀') == 0) {
  CQLUtils.getBytes(bb,e);
}
 else {
}
",0,0,0,,
2064,} else {,"if (counterValue > (0.9 * qakkaFig.getMaxShardSize())) {
  UUID futureUUID=UUIDs.startOf(System.currentTimeMillis() + qakkaFig.getShardAllocationAdvanceTimeMillis());
  Shard newShard=new Shard(queueName,region,type,shard.getShardId() + 1,futureUUID);
  shardSerialization.createShard(newShard);
  shardCounterSerialization.incrementCounter(queueName,type,newShard.getShardId(),0);
  logger.info(""Allocated new shard for queue, newShardID: {}, queueName: {}, shardMessageCount: {}, usedPercent: {}%"",newShard.getShardId(),queueName,counterValue,(long)((double)counterValue / (double)qakkaFig.getMaxShardSize() * 100));
}
 else {
}
",0,0,0,,
2065,) {,"if (!fieldName.equalsIgnoreCase(fieldType) || (finalAppToFilter != null && !finalAppToFilter.equals(scopeUUID))) {
}
 else {
  if (row.getColumns() != null && row.getColumns().size() > 1) {
    final List<EntityVersion> values=new ArrayList<>(row.getColumns().size());
    Iterator<Column<EntityVersion>> columns=row.getColumns().iterator();
    columns.forEachRemaining(column -> {
      final EntityVersion entityVersion=column.getName();
      logger.trace(scopeType + "": "" + scopeUUID+ "", ""+ fieldName+ "": ""+ fieldValue+ "", ""+ ""entity type: ""+ entityVersion.getEntityId().getType()+ "", ""+ ""entity uuid: ""+ entityVersion.getEntityId().getUuid());
      if (entityType != null && entityVersion.getEntityId().getType().equalsIgnoreCase(entityType)) {
        if (values.size() == 0) {
          values.add(entityVersion);
        }
 else {
          if (!values.get(0).getEntityId().getUuid().equals(entityVersion.getEntityId().getUuid())) {
            values.add(entityVersion);
            logger.error(""Duplicate found for field [{}={}].  Entry 1: [{}], Entry 2: [{}]"",fieldName,fieldValue,values.get(0).getEntityId(),entityVersion.getEntityId());
          }
        }
      }
    }
);
  }
}
",0,0,0,,
2066,{,"if (currentFile == null || !file.exists()) {
}
 else if (currentFile.equals(file) && file.canRead()) {
  modified=(file.lastModified() != resource.getLastModified());
}
",0,0,0,,
2067,} else {,"if (ALGEBRICKS_MAP.containsKey(afce.getFunctionIdentifier())) {
  if (convertFunctionToAlgebricksExpression(search,afce,context,ALGEBRICKS_MAP)) {
    modified=true;
  }
}
 else {
}
",0,0,0,,
2068,} else {,"if (documentOrderVariables.get(variableId) == DocumentOrder.YES) {
  functionCall.setFunctionInfo(BuiltinOperators.DISTINCT_NODES_OR_ATOMICS);
  operatorChanged=true;
}
 else {
}
",0,0,0,,
2069,} else {,"if (nt.equals(AttributeType.ANYATTRIBUTE)) {
  return true;
}
 else {
}
",0,0,0,,
2070,} else {,"if (nt.equals(DocumentType.ANYDOCUMENT)) {
  return true;
}
 else {
}
",0,0,0,,
2071,} else {,"if (nt.equals(ElementType.ANYELEMENT)) {
  return true;
}
 else {
}
",0,0,0,,
2072,} else {,"if (schemaEl.getAttributeNode(""targetNamespace"") != null) {
  String contain=schemaEl.getAttribute(""targetNamespace"");
  schema.setTargetNamespace(contain);
}
 else {
}
",0,0,0,,
2073,{,"if (cls.isPrimitive()) {
}
 else if (cls.isArray()) {
  checked.put(original,null);
  Class<?> ccl=cls.getComponentType();
  if (!(ccl.isPrimitive())) {
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      if (!isKnownToBeSerializable(objs[i])) {
        CharSequence arrayPos=new StringBuilder(4).append('[').append(i).append(']');
        simpleName=arrayPos;
        fieldDescription+=arrayPos;
        check(objs[i]);
      }
    }
  }
}
 else if (obj instanceof Externalizable && (!Proxy.isProxyClass(cls))) {
  Externalizable extObj=(Externalizable)obj;
  try {
    extObj.writeExternal(new ObjectOutputAdaptor(){
      private int count=0;
      @Override public void writeObject(      Object streamObj) throws IOException {
        if (checked.containsKey(streamObj)) {
          return;
        }
        CharSequence arrayPos=new StringBuilder(10).append(""[write:"").append(count++).append(']');
        simpleName=arrayPos;
        fieldDescription+=arrayPos;
        check(streamObj);
        checked.put(streamObj,null);
      }
    }
);
  }
 catch (  Exception e) {
    if (e instanceof ObjectCheckException) {
      throw (ObjectCheckException)e;
    }
    log.warn(""Error delegating to Externalizable : {}, path: {}"",e.getMessage(),currentPath());
  }
}
 else {
  Method writeObjectMethod=null;
  if (writeObjectMethodMissing.contains(cls) == false) {
    try {
      writeObjectMethod=cls.getDeclaredMethod(""writeObject"",java.io.ObjectOutputStream.class);
    }
 catch (    SecurityException|NoSuchMethodException e) {
      writeObjectMethodMissing.add(cls);
    }
  }
  if (writeObjectMethod != null) {
class InterceptingObjectOutputStream extends ObjectOutputStream {
      private int counter;
      InterceptingObjectOutputStream() throws IOException {
        super(DUMMY_OUTPUT_STREAM);
        enableReplaceObject(true);
      }
      @Override protected Object replaceObject(      Object streamObj) throws IOException {
        if (streamObj == original) {
          return streamObj;
        }
        counter++;
        if (checked.containsKey(streamObj)) {
          return null;
        }
        CharSequence arrayPos=new StringBuilder(10).append(""[write:"").append(counter).append(']');
        simpleName=arrayPos;
        fieldDescription+=arrayPos;
        check(streamObj);
        checked.put(streamObj,null);
        return streamObj;
      }
    }
    try {
      InterceptingObjectOutputStream ioos=new InterceptingObjectOutputStream();
      ioos.writeObject(obj);
    }
 catch (    Exception e) {
      if (e instanceof ObjectCheckException) {
        throw (ObjectCheckException)e;
      }
      log.warn(""error delegating to writeObject : {}, path: {}"",e.getMessage(),currentPath());
    }
  }
 else {
    Object[] slots;
    try {
      slots=(Object[])GET_CLASS_DATA_LAYOUT_METHOD.invoke(desc,(Object[])null);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    for (    Object slot : slots) {
      ObjectStreamClass slotDesc;
      try {
        Field descField=slot.getClass().getDeclaredField(""desc"");
        descField.setAccessible(true);
        slotDesc=(ObjectStreamClass)descField.get(slot);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      checked.put(original,null);
      checkFields(obj,slotDesc);
    }
  }
}
",0,0,0,,
2074,{,"if (resourceKind == null && (!Objects.equal(locale,l) || !Objects.equal(style,s) || !Objects.equal(variation,v))) {
  locale=l;
  style=s;
  variation=v;
  resourceReference=null;
  resource=null;
}
 else {
}
",0,0,0,,
2075,{,"if (problemEscalation == ERR_INGORE) {
}
 else {
  throw new WicketParseException(msg,tag);
}
",0,0,0,,
2076,{,"if (matchesOne(currentRemoteIp,config.allowedInternalProxies)) {
}
 else if (matchesOne(currentRemoteIp,config.trustedProxies)) {
  proxiesHeaderValue.addFirst(currentRemoteIp);
}
 else {
  idx--;
  break;
}
",0,0,0,,
2077,{,"if (protocolHeaderValue == null) {
}
 else if (config.protocolHeaderSslValue.equalsIgnoreCase(protocolHeaderValue)) {
  xRequest.setSecure(true);
  xRequest.setScheme(""https"");
  xRequest.setServerPort(config.httpsServerPort);
}
 else {
  xRequest.setSecure(false);
  xRequest.setScheme(""http"");
  xRequest.setServerPort(config.httpServerPort);
}
",0,0,0,,
2078,{,"if (formComponent instanceof IFormSubmittingComponent) {
}
 else if (formComponent instanceof AbstractTextComponent) {
  return new String[]{getFormComponentValue(formComponent)};
}
 else {
  String value=getFormComponentValue(formComponent);
  if (!Strings.isEmpty(value)) {
    return value.split(FormComponent.VALUE_SEPARATOR);
  }
}
",0,0,0,,
2079,{,"if (!rememberMe) {
}
",0,0,0,,
2080,{,"if (!comp.isStateless()) {
  visit.stop(comp);
}
 else {
}
",0,0,0,,
2081,{,"if (getGame().isLost()) {
  setResponsePage(new Lose());
}
 else {
}
",0,0,0,,
2082,{,"if (target == null) {
}
 else {
  if (wrapInProxies) {
    target=LazyInitProxyFactory.createProxy(field.getType(),locator);
  }
}
",0,0,0,,
2083,{,"if (""."".equals(segment)) {
}
 else if ("".."".equals(segment) && url.segments.isEmpty() == false) {
  url.segments.remove(url.segments.size() - 1);
}
 else if ((i + 1) < segments.size() && "".."".equals(segments.get(i + 1))) {
  i++;
}
 else {
  url.segments.add(segment);
}
",0,0,0,,
2084,else{,"if (role.equals(""DistributorSignature"")) {
  target=SignerConstants.SIGN_TARGET_DISTRIBUTOR;
  roleURI=SignerConstants.ROLE_URI_DISTRIBUTOR;
}
 else {
}
",0,0,0,,
2085,"&& ((name.contains(""signature"")) && (name.endsWith("".xml"")))) {","if (role.equals(""author"") && ((name.contains(""signature"")) && (name.endsWith("".xml"")))) {
}
 else if (!role.equals(""author"") && name.contains(""signature"") && !name.contains(""author"")&& (name.endsWith("".xml""))) {
}
 else {
  filesList.add(name);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
2086,"&& !name.contains(""author"") && (name.endsWith("".xml""))) {","if (!role.equals(""author"") && name.contains(""signature"") && !name.contains(""author"")&& (name.endsWith("".xml""))) {
}
 else {
  filesList.add(name);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, ),
"
2087,} else {,"if ((mask.intValue() & FIXED_MASK) == 0) {
  if (((Boolean)value).booleanValue()) {
    params|=mask.intValue();
  }
 else {
    params&=~mask.intValue();
  }
}
 else {
}
",0,0,0,,
2088,} else {,"if (value instanceof Boolean) {
  if ((mask.intValue() & FIXED_MASK) == 0) {
    if (((Boolean)value).booleanValue()) {
      params|=mask.intValue();
    }
 else {
      params&=~mask.intValue();
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
2089,} else {,"if (mask != null) {
  if (value instanceof Boolean) {
    if ((mask.intValue() & FIXED_MASK) == 0) {
      if (((Boolean)value).booleanValue()) {
        params|=mask.intValue();
      }
 else {
        params&=~mask.intValue();
      }
    }
 else {
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
2090,&& Base64Constants.S_DECODETABLE[ch] >= 0) {,"if (ch == Base64Constants.S_BASE64PAD || ch < Base64Constants.S_DECODETABLE.length && Base64Constants.S_DECODETABLE[ch] >= 0) {
}
 else if (ch == '\r' || ch == '\n') {
}
 else {
  return false;
}
",0,0,3,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ),
"
2091,} else {,"if (arg1 instanceof Assertion) {
  return compare((Assertion)arg1,(Assertion)arg2);
}
 else {
}
",0,0,0,,
2092,} else {,"if (schemaEl.getAttributeNode(""targetNamespace"") != null) {
  String contain=schemaEl.getAttribute(""targetNamespace"");
  schema.setTargetNamespace(contain);
}
 else {
}
",0,0,0,,
2093,{,"if (indexOfColon > 0) {
}
 else {
  msg=""func:function name must have namespace"";
  handler.error(msg,new SAXException(msg));
}
",0,0,0,,
2094,{,"if ((attrLocalName.startsWith(""xmlns:"") || attrLocalName.equals(""xmlns"")) && value.equals(Constants.S_XSLNAMESPACEURL)) {
}
 else {
  lreAttrs.addAttribute(attrUri,attrLocalName,attributes.getQName(i),attributes.getType(i),attributes.getValue(i));
}
",0,0,0,,
2095,} else {,"if (hasFallbackChildren()) {
  executeFallbacks(transformer);
}
 else {
}
",0,0,0,,
2096,{,"if (DTM.NULL == newDoc) {
  if (null != diagnosticsString) {
    warn(xctxt,XSLTErrorResources.WG_CANNOT_LOAD_REQUESTED_DOC,new Object[]{diagnosticsString});
  }
 else   warn(xctxt,XSLTErrorResources.WG_CANNOT_LOAD_REQUESTED_DOC,new Object[]{uri == null ? ((base == null) ? """" : base) + uri : uri.toString()});
}
 else {
}
",0,0,0,,
2097,{,"if (DTM.NULL == docContext) {
}
",0,0,0,,
2098,{,"if (matchExpr instanceof UnionPattern) {
  UnionPattern upat=(UnionPattern)matchExpr;
  StepPattern[] pats=upat.getPatterns();
  int n=pats.length;
  for (int i=0; i < n; i++) {
    insertPatternInTable(pats[i],template);
  }
}
 else {
}
",0,0,0,,
2099,{,"if (""-XSLTC"".equalsIgnoreCase(argv[i])) {
}
 else if (""-TT"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceTemplates=true;
  }
 else   printInvalidXSLTCOption(""-TT"");
}
 else if (""-TG"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceGeneration=true;
  }
 else   printInvalidXSLTCOption(""-TG"");
}
 else if (""-TS"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceSelection=true;
  }
 else   printInvalidXSLTCOption(""-TS"");
}
 else if (""-TTC"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceElements=true;
  }
 else   printInvalidXSLTCOption(""-TTC"");
}
 else if (""-INDENT"".equalsIgnoreCase(argv[i])) {
  int indentAmount;
  if (((i + 1) < argv.length) && (argv[i + 1].charAt(0) != '-')) {
    indentAmount=Integer.parseInt(argv[++i]);
  }
 else {
    indentAmount=0;
  }
}
 else if (""-IN"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')   inFileName=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-IN""}));
}
 else if (""-MEDIA"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length)   media=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-MEDIA""}));
}
 else if (""-OUT"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')   outFileName=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-OUT""}));
}
 else if (""-XSL"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')   xslFileName=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XSL""}));
}
 else if (""-FLAVOR"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    flavor=argv[++i];
  }
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-FLAVOR""}));
}
 else if (""-PARAM"".equalsIgnoreCase(argv[i])) {
  if (i + 2 < argv.length) {
    String name=argv[++i];
    params.addElement(name);
    String expression=argv[++i];
    params.addElement(expression);
  }
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-PARAM""}));
}
 else if (""-E"".equalsIgnoreCase(argv[i])) {
}
 else if (""-V"".equalsIgnoreCase(argv[i])) {
  diagnosticsWriter.println(resbundle.getString(""version"") + Version.getVersion() + "", ""+ resbundle.getString(""version2""));
}
 else if (""-QC"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   quietConflictWarnings=true;
 else   printInvalidXSLTCOption(""-QC"");
}
 else if (""-Q"".equalsIgnoreCase(argv[i])) {
  setQuietMode=true;
}
 else if (""-DIAG"".equalsIgnoreCase(argv[i])) {
  doDiag=true;
}
 else if (""-XML"".equalsIgnoreCase(argv[i])) {
  outputType=""xml"";
}
 else if (""-TEXT"".equalsIgnoreCase(argv[i])) {
  outputType=""text"";
}
 else if (""-HTML"".equalsIgnoreCase(argv[i])) {
  outputType=""html"";
}
 else if (""-EDUMP"".equalsIgnoreCase(argv[i])) {
  doStackDumpOnError=true;
  if (((i + 1) < argv.length) && (argv[i + 1].charAt(0) != '-')) {
    dumpFileName=argv[++i];
  }
}
 else if (""-URIRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      uriResolver=(URIResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
      tfactory.setURIResolver(uriResolver);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-URIResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-URIResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-ENTITYRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      entityResolver=(EntityResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-EntityResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-EntityResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-CONTENTHANDLER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      contentHandler=(ContentHandler)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-ContentHandler""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-ContentHandler""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-L"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(XalanProperties.SOURCE_LOCATION,Boolean.TRUE);
 else   printInvalidXSLTCOption(""-L"");
}
 else if (""-INCREMENTAL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/incremental"",java.lang.Boolean.TRUE);
 else   printInvalidXSLTCOption(""-INCREMENTAL"");
}
 else if (""-NOOPTIMIZE"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/optimize"",java.lang.Boolean.FALSE);
 else   printInvalidXSLTCOption(""-NOOPTIMIZE"");
}
 else if (""-RL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (i + 1 < argv.length)     recursionLimit=Integer.parseInt(argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-rl""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXSLTCOption(""-RL"");
  }
}
 else if (""-XO"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""translet-name"",argv[++i]);
    }
 else     tfactory.setAttribute(""generate-translet"",""true"");
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XO"");
  }
}
 else if (""-XD"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""destination-directory"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XD""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XD"");
  }
}
 else if (""-XJ"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""jar-name"",argv[++i]);
    }
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XJ""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XJ"");
  }
}
 else if (""-XP"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""package-name"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XP""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XP"");
  }
}
 else if (""-XN"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""enable-inlining"",""true"");
  }
 else   printInvalidXalanOption(""-XN"");
}
 else if (""-XX"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""debug"",""true"");
  }
 else   printInvalidXalanOption(""-XX"");
}
 else if (""-XT"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""auto-translet"",""true"");
  }
 else   printInvalidXalanOption(""-XT"");
}
 else if (""-SECURE"".equalsIgnoreCase(argv[i])) {
  isSecureProcessing=true;
  try {
    tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  }
 catch (  TransformerConfigurationException e) {
  }
}
 else System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_OPTION,new Object[]{argv[i]}));
",0,0,0,,
2100,{,"if (""-E"".equalsIgnoreCase(argv[i])) {
}
 else if (""-V"".equalsIgnoreCase(argv[i])) {
  diagnosticsWriter.println(resbundle.getString(""version"") + Version.getVersion() + "", ""+ resbundle.getString(""version2""));
}
 else if (""-QC"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   quietConflictWarnings=true;
 else   printInvalidXSLTCOption(""-QC"");
}
 else if (""-Q"".equalsIgnoreCase(argv[i])) {
  setQuietMode=true;
}
 else if (""-DIAG"".equalsIgnoreCase(argv[i])) {
  doDiag=true;
}
 else if (""-XML"".equalsIgnoreCase(argv[i])) {
  outputType=""xml"";
}
 else if (""-TEXT"".equalsIgnoreCase(argv[i])) {
  outputType=""text"";
}
 else if (""-HTML"".equalsIgnoreCase(argv[i])) {
  outputType=""html"";
}
 else if (""-EDUMP"".equalsIgnoreCase(argv[i])) {
  doStackDumpOnError=true;
  if (((i + 1) < argv.length) && (argv[i + 1].charAt(0) != '-')) {
    dumpFileName=argv[++i];
  }
}
 else if (""-URIRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      uriResolver=(URIResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
      tfactory.setURIResolver(uriResolver);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-URIResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-URIResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-ENTITYRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      entityResolver=(EntityResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-EntityResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-EntityResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-CONTENTHANDLER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      contentHandler=(ContentHandler)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-ContentHandler""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-ContentHandler""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-L"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(XalanProperties.SOURCE_LOCATION,Boolean.TRUE);
 else   printInvalidXSLTCOption(""-L"");
}
 else if (""-INCREMENTAL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/incremental"",java.lang.Boolean.TRUE);
 else   printInvalidXSLTCOption(""-INCREMENTAL"");
}
 else if (""-NOOPTIMIZE"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/optimize"",java.lang.Boolean.FALSE);
 else   printInvalidXSLTCOption(""-NOOPTIMIZE"");
}
 else if (""-RL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (i + 1 < argv.length)     recursionLimit=Integer.parseInt(argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-rl""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXSLTCOption(""-RL"");
  }
}
 else if (""-XO"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""translet-name"",argv[++i]);
    }
 else     tfactory.setAttribute(""generate-translet"",""true"");
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XO"");
  }
}
 else if (""-XD"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""destination-directory"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XD""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XD"");
  }
}
 else if (""-XJ"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""jar-name"",argv[++i]);
    }
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XJ""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XJ"");
  }
}
 else if (""-XP"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""package-name"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XP""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XP"");
  }
}
 else if (""-XN"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""enable-inlining"",""true"");
  }
 else   printInvalidXalanOption(""-XN"");
}
 else if (""-XX"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""debug"",""true"");
  }
 else   printInvalidXalanOption(""-XX"");
}
 else if (""-XT"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""auto-translet"",""true"");
  }
 else   printInvalidXalanOption(""-XT"");
}
 else if (""-SECURE"".equalsIgnoreCase(argv[i])) {
  isSecureProcessing=true;
  try {
    tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  }
 catch (  TransformerConfigurationException e) {
  }
}
 else System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_OPTION,new Object[]{argv[i]}));
",0,0,0,,
2101,{,"if (null != diagnosticsWriter) {
}
",0,0,0,,
2102,{,"if (p == null || p instanceof Instruction || p instanceof TopLevelElement) {
}
 else {
  il.append(loadLocal);
}
",0,0,0,,
2103,else {,"if (element instanceof Output) {
  Output output=(Output)element;
  if (output.enabled())   _lastOutputElement=output;
}
 else {
}
",0,0,0,,
2104,} else {,"if (clone || !sameDoc) {
}
 else {
}
",0,0,0,,
2105,{,"if (m_contentHandler instanceof NodeConsumer) {
}
",0,0,0,,
2106,{,"if (m_contentHandler instanceof LexicalHandler) {
  ((LexicalHandler)this.m_contentHandler).startEntity(m_dtm.getNodeName(node));
}
 else {
}
",0,0,0,,
2107,{,"if (node.getLocalName() == null && (type == Node.ELEMENT_NODE || type == Node.ATTRIBUTE_NODE)) {
}
",0,0,0,,
2108,{,"if (null == url) {
  url=entity.getPublicId();
}
 else {
}
",0,0,0,,
2109,} else {,"if (is != null) {
  props.load(is);
  is.close();
}
 else {
}
",0,0,0,,
2110,{,"if (m_contentHandler instanceof LexicalHandler) {
  ((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());
}
 else {
}
",0,0,0,,
2111,} else {,"if (localName == null) {
  String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{attrName});
  if (fErrorHandler != null) {
    fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));
  }
}
 else {
}
",0,0,0,,
2112,} else {,"if (attrValue.length() != 0) {
  fNSBinder.declarePrefix(localName,attrValue);
}
 else {
}
",0,0,0,,
2113,} else {,"if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES).equals(key)) {
  if ((properties.getProperty(key).endsWith(""yes""))) {
    fSerializer.setDTDEntityExpansion(false);
  }
 else {
    fSerializer.setDTDEntityExpansion(true);
  }
}
 else {
}
",0,0,0,,
2114,{,"if (null != parent1) isNodeAfter=isNodeAfterSibling(parent1,node1,node2);
 else {
}
",0,0,0,,
2115,{,"if (null == url) {
  url=entity.getPublicId();
}
 else {
}
",0,0,0,,
2116,{,"if (null != namespaceContext) {
  String prefix=qname.substring(0,indexOfNSSep);
  _prefix=prefix;
  if (prefix.equals(""xml"")) {
    _namespaceURI=S_XMLNAMESPACEURI;
  }
 else   if (prefix.equals(""xmlns"")) {
    return;
  }
 else {
    _namespaceURI=resolver.getNamespaceForPrefix(prefix,namespaceContext);
  }
  if (null == _namespaceURI) {
    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));
  }
}
 else {
}
",0,0,0,,
2117,{,"if (m_contentHandler instanceof LexicalHandler) {
  ((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());
}
 else {
}
",0,0,0,,
2118,{,"if (null == ancestorPattern) {
}
 else {
  pattern.setRelativePathPattern(ancestorPattern);
}
",0,0,0,,
2119,{,"if (theIndex < theThirdStringLength) {
  sbuffer.append(theThirdString.charAt(theIndex));
}
 else {
}
",0,0,0,,
2120,{,"if (indexOfColon > 0) {
}
 else {
  msg=""func:function name must have namespace"";
  handler.error(msg,new SAXException(msg));
}
",0,0,0,,
2121,{,"if ((attrLocalName.startsWith(""xmlns:"") || attrLocalName.equals(""xmlns"")) && value.equals(Constants.S_XSLNAMESPACEURL)) {
}
 else {
  lreAttrs.addAttribute(attrUri,attrLocalName,attributes.getQName(i),attributes.getType(i),attributes.getValue(i));
}
",0,0,0,,
2122,} else {,"if (hasFallbackChildren()) {
  executeFallbacks(transformer);
}
 else {
}
",0,0,0,,
2123,{,"if (DTM.NULL == newDoc) {
  if (null != diagnosticsString) {
    warn(xctxt,XSLTErrorResources.WG_CANNOT_LOAD_REQUESTED_DOC,new Object[]{diagnosticsString});
  }
 else   warn(xctxt,XSLTErrorResources.WG_CANNOT_LOAD_REQUESTED_DOC,new Object[]{uri == null ? ((base == null) ? """" : base) + uri : uri.toString()});
}
 else {
}
",0,0,0,,
2124,{,"if (DTM.NULL == docContext) {
}
",0,0,0,,
2125,{,"if (matchExpr instanceof UnionPattern) {
  UnionPattern upat=(UnionPattern)matchExpr;
  StepPattern[] pats=upat.getPatterns();
  int n=pats.length;
  for (int i=0; i < n; i++) {
    insertPatternInTable(pats[i],template);
  }
}
 else {
}
",0,0,0,,
2126,{,"if (""-XSLTC"".equalsIgnoreCase(argv[i])) {
}
 else if (""-TT"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceTemplates=true;
  }
 else   printInvalidXSLTCOption(""-TT"");
}
 else if (""-TG"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceGeneration=true;
  }
 else   printInvalidXSLTCOption(""-TG"");
}
 else if (""-TS"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceSelection=true;
  }
 else   printInvalidXSLTCOption(""-TS"");
}
 else if (""-TTC"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (null == tracer)     tracer=new PrintTraceListener(diagnosticsWriter);
    tracer.m_traceElements=true;
  }
 else   printInvalidXSLTCOption(""-TTC"");
}
 else if (""-INDENT"".equalsIgnoreCase(argv[i])) {
  int indentAmount;
  if (((i + 1) < argv.length) && (argv[i + 1].charAt(0) != '-')) {
    indentAmount=Integer.parseInt(argv[++i]);
  }
 else {
    indentAmount=0;
  }
}
 else if (""-IN"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')   inFileName=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-IN""}));
}
 else if (""-MEDIA"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length)   media=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-MEDIA""}));
}
 else if (""-OUT"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')   outFileName=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-OUT""}));
}
 else if (""-XSL"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')   xslFileName=argv[++i];
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XSL""}));
}
 else if (""-FLAVOR"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    flavor=argv[++i];
  }
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-FLAVOR""}));
}
 else if (""-PARAM"".equalsIgnoreCase(argv[i])) {
  if (i + 2 < argv.length) {
    String name=argv[++i];
    params.addElement(name);
    String expression=argv[++i];
    params.addElement(expression);
  }
 else   System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-PARAM""}));
}
 else if (""-E"".equalsIgnoreCase(argv[i])) {
}
 else if (""-V"".equalsIgnoreCase(argv[i])) {
  diagnosticsWriter.println(resbundle.getString(""version"") + Version.getVersion() + "", ""+ resbundle.getString(""version2""));
}
 else if (""-QC"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   quietConflictWarnings=true;
 else   printInvalidXSLTCOption(""-QC"");
}
 else if (""-Q"".equalsIgnoreCase(argv[i])) {
  setQuietMode=true;
}
 else if (""-DIAG"".equalsIgnoreCase(argv[i])) {
  doDiag=true;
}
 else if (""-XML"".equalsIgnoreCase(argv[i])) {
  outputType=""xml"";
}
 else if (""-TEXT"".equalsIgnoreCase(argv[i])) {
  outputType=""text"";
}
 else if (""-HTML"".equalsIgnoreCase(argv[i])) {
  outputType=""html"";
}
 else if (""-EDUMP"".equalsIgnoreCase(argv[i])) {
  doStackDumpOnError=true;
  if (((i + 1) < argv.length) && (argv[i + 1].charAt(0) != '-')) {
    dumpFileName=argv[++i];
  }
}
 else if (""-URIRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      uriResolver=(URIResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
      tfactory.setURIResolver(uriResolver);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-URIResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-URIResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-ENTITYRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      entityResolver=(EntityResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-EntityResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-EntityResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-CONTENTHANDLER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      contentHandler=(ContentHandler)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-ContentHandler""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-ContentHandler""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-L"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(XalanProperties.SOURCE_LOCATION,Boolean.TRUE);
 else   printInvalidXSLTCOption(""-L"");
}
 else if (""-INCREMENTAL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/incremental"",java.lang.Boolean.TRUE);
 else   printInvalidXSLTCOption(""-INCREMENTAL"");
}
 else if (""-NOOPTIMIZE"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/optimize"",java.lang.Boolean.FALSE);
 else   printInvalidXSLTCOption(""-NOOPTIMIZE"");
}
 else if (""-RL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (i + 1 < argv.length)     recursionLimit=Integer.parseInt(argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-rl""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXSLTCOption(""-RL"");
  }
}
 else if (""-XO"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""translet-name"",argv[++i]);
    }
 else     tfactory.setAttribute(""generate-translet"",""true"");
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XO"");
  }
}
 else if (""-XD"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""destination-directory"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XD""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XD"");
  }
}
 else if (""-XJ"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""jar-name"",argv[++i]);
    }
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XJ""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XJ"");
  }
}
 else if (""-XP"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""package-name"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XP""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XP"");
  }
}
 else if (""-XN"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""enable-inlining"",""true"");
  }
 else   printInvalidXalanOption(""-XN"");
}
 else if (""-XX"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""debug"",""true"");
  }
 else   printInvalidXalanOption(""-XX"");
}
 else if (""-XT"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""auto-translet"",""true"");
  }
 else   printInvalidXalanOption(""-XT"");
}
 else if (""-SECURE"".equalsIgnoreCase(argv[i])) {
  isSecureProcessing=true;
  try {
    tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  }
 catch (  TransformerConfigurationException e) {
  }
}
 else System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_OPTION,new Object[]{argv[i]}));
",0,0,0,,
2127,{,"if (""-E"".equalsIgnoreCase(argv[i])) {
}
 else if (""-V"".equalsIgnoreCase(argv[i])) {
  diagnosticsWriter.println(resbundle.getString(""version"") + Version.getVersion() + "", ""+ resbundle.getString(""version2""));
}
 else if (""-QC"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   quietConflictWarnings=true;
 else   printInvalidXSLTCOption(""-QC"");
}
 else if (""-Q"".equalsIgnoreCase(argv[i])) {
  setQuietMode=true;
}
 else if (""-DIAG"".equalsIgnoreCase(argv[i])) {
  doDiag=true;
}
 else if (""-XML"".equalsIgnoreCase(argv[i])) {
  outputType=""xml"";
}
 else if (""-TEXT"".equalsIgnoreCase(argv[i])) {
  outputType=""text"";
}
 else if (""-HTML"".equalsIgnoreCase(argv[i])) {
  outputType=""html"";
}
 else if (""-EDUMP"".equalsIgnoreCase(argv[i])) {
  doStackDumpOnError=true;
  if (((i + 1) < argv.length) && (argv[i + 1].charAt(0) != '-')) {
    dumpFileName=argv[++i];
  }
}
 else if (""-URIRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      uriResolver=(URIResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
      tfactory.setURIResolver(uriResolver);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-URIResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-URIResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-ENTITYRESOLVER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      entityResolver=(EntityResolver)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-EntityResolver""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-EntityResolver""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-CONTENTHANDLER"".equalsIgnoreCase(argv[i])) {
  if (i + 1 < argv.length) {
    try {
      contentHandler=(ContentHandler)ObjectFactory.newInstance(argv[++i],ObjectFactory.findClassLoader(),true);
    }
 catch (    ObjectFactory.ConfigurationError cnfe) {
      msg=XSLMessages.createMessage(XSLTErrorResources.ER_CLASS_NOT_FOUND_FOR_OPTION,new Object[]{""-ContentHandler""});
      System.err.println(msg);
      doExit(msg);
    }
  }
 else {
    msg=XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-ContentHandler""});
    System.err.println(msg);
    doExit(msg);
  }
}
 else if (""-L"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(XalanProperties.SOURCE_LOCATION,Boolean.TRUE);
 else   printInvalidXSLTCOption(""-L"");
}
 else if (""-INCREMENTAL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/incremental"",java.lang.Boolean.TRUE);
 else   printInvalidXSLTCOption(""-INCREMENTAL"");
}
 else if (""-NOOPTIMIZE"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC)   tfactory.setAttribute(""http://xml.apache.org/xalan/features/optimize"",java.lang.Boolean.FALSE);
 else   printInvalidXSLTCOption(""-NOOPTIMIZE"");
}
 else if (""-RL"".equalsIgnoreCase(argv[i])) {
  if (!useXSLTC) {
    if (i + 1 < argv.length)     recursionLimit=Integer.parseInt(argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-rl""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXSLTCOption(""-RL"");
  }
}
 else if (""-XO"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""translet-name"",argv[++i]);
    }
 else     tfactory.setAttribute(""generate-translet"",""true"");
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XO"");
  }
}
 else if (""-XD"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""destination-directory"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XD""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XD"");
  }
}
 else if (""-XJ"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-') {
      tfactory.setAttribute(""generate-translet"",""true"");
      tfactory.setAttribute(""jar-name"",argv[++i]);
    }
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XJ""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XJ"");
  }
}
 else if (""-XP"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     tfactory.setAttribute(""package-name"",argv[++i]);
 else     System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_MISSING_ARG_FOR_OPTION,new Object[]{""-XP""}));
  }
 else {
    if (i + 1 < argv.length && argv[i + 1].charAt(0) != '-')     i++;
    printInvalidXalanOption(""-XP"");
  }
}
 else if (""-XN"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""enable-inlining"",""true"");
  }
 else   printInvalidXalanOption(""-XN"");
}
 else if (""-XX"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""debug"",""true"");
  }
 else   printInvalidXalanOption(""-XX"");
}
 else if (""-XT"".equalsIgnoreCase(argv[i])) {
  if (useXSLTC) {
    tfactory.setAttribute(""auto-translet"",""true"");
  }
 else   printInvalidXalanOption(""-XT"");
}
 else if (""-SECURE"".equalsIgnoreCase(argv[i])) {
  isSecureProcessing=true;
  try {
    tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  }
 catch (  TransformerConfigurationException e) {
  }
}
 else System.err.println(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_OPTION,new Object[]{argv[i]}));
",0,0,0,,
2128,{,"if (null != diagnosticsWriter) {
}
",0,0,0,,
2129,{,"if (p == null || p instanceof Instruction || p instanceof TopLevelElement) {
}
 else {
  il.append(loadLocal);
}
",0,0,0,,
2130,else {,"if (element instanceof Output) {
  Output output=(Output)element;
  if (output.enabled())   _lastOutputElement=output;
}
 else {
}
",0,0,0,,
2131,} else {,"if (clone || !sameDoc) {
}
 else {
}
",0,0,0,,
2132,{,"if (m_contentHandler instanceof NodeConsumer) {
}
",0,0,0,,
2133,{,"if (m_contentHandler instanceof LexicalHandler) {
  ((LexicalHandler)this.m_contentHandler).startEntity(m_dtm.getNodeName(node));
}
 else {
}
",0,0,0,,
2134,{,"if (node.getLocalName() == null && (type == Node.ELEMENT_NODE || type == Node.ATTRIBUTE_NODE)) {
}
",0,0,0,,
2135,{,"if (null == url) {
  url=entity.getPublicId();
}
 else {
}
",0,0,0,,
2136,} else {,"if (is != null) {
  props.load(is);
  is.close();
}
 else {
}
",0,0,0,,
2137,{,"if (m_contentHandler instanceof LexicalHandler) {
  ((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());
}
 else {
}
",0,0,0,,
2138,} else {,"if (localName == null) {
  String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{attrName});
  if (fErrorHandler != null) {
    fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));
  }
}
 else {
}
",0,0,0,,
2139,} else {,"if (attrValue.length() != 0) {
  fNSBinder.declarePrefix(localName,attrValue);
}
 else {
}
",0,0,0,,
2140,} else {,"if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES).equals(key)) {
  if ((properties.getProperty(key).endsWith(""yes""))) {
    fSerializer.setDTDEntityExpansion(false);
  }
 else {
    fSerializer.setDTDEntityExpansion(true);
  }
}
 else {
}
",0,0,0,,
2141,{,"if (null != parent1) isNodeAfter=isNodeAfterSibling(parent1,node1,node2);
 else {
}
",0,0,0,,
2142,{,"if (null == url) {
  url=entity.getPublicId();
}
 else {
}
",0,0,0,,
2143,{,"if (null != namespaceContext) {
  String prefix=qname.substring(0,indexOfNSSep);
  _prefix=prefix;
  if (prefix.equals(""xml"")) {
    _namespaceURI=S_XMLNAMESPACEURI;
  }
 else   if (prefix.equals(""xmlns"")) {
    return;
  }
 else {
    _namespaceURI=resolver.getNamespaceForPrefix(prefix,namespaceContext);
  }
  if (null == _namespaceURI) {
    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));
  }
}
 else {
}
",0,0,0,,
2144,{,"if (m_contentHandler instanceof LexicalHandler) {
  ((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());
}
 else {
}
",0,0,0,,
2145,{,"if (null == ancestorPattern) {
}
 else {
  pattern.setRelativePathPattern(ancestorPattern);
}
",0,0,0,,
2146,{,"if (theIndex < theThirdStringLength) {
  sbuffer.append(theThirdString.charAt(theIndex));
}
 else {
}
",0,0,0,,
2147,} else {,"if (value.length() != 0) {
  fNamespaceContext.declarePrefix(localpart,value);
}
 else {
}
",0,0,0,,
2148,} else {,"if (attr.getLocalName() == null) {
  if (fNamespaceValidation) {
    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,""NullLocalAttrName"",new Object[]{attr.getNodeName()});
    reportDOMError(fErrorHandler,fError,fLocator,msg,DOMError.SEVERITY_FATAL_ERROR,""NullLocalAttrName"");
  }
 else {
    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,""NullLocalAttrName"",new Object[]{attr.getNodeName()});
    reportDOMError(fErrorHandler,fError,fLocator,msg,DOMError.SEVERITY_ERROR,""NullLocalAttrName"");
  }
}
 else {
}
",0,0,0,,
2149,else {,"if (index < 0) {
  AttrImpl attr=(AttrImpl)((CoreDocumentImpl)fElement.getOwnerDocument()).createAttributeNS(qname.uri,qname.rawname,qname.localpart);
  attr.setNodeValue(attrValue);
  index=fElement.setXercesAttributeNode(attr);
  fDTDTypes.insertElementAt(attrType,index);
  fAugmentations.insertElementAt(new AugmentationsImpl(),index);
  attr.setSpecified(false);
}
 else {
}
",0,0,0,,
2150,if ( this.fElementDeclTab.containsKey( (String) elementName) ) {,"if (this.fElementDeclTab.containsKey((String)elementName)) {
}
 else {
  fCurrentElementIndex=createElementDecl();
  XMLElementDecl elementDecl=new XMLElementDecl();
  elementDecl.name.setValues(null,elementName,elementName,null);
  elementDecl.scope=-1;
  this.fElementDeclTab.put(elementName,elementDecl);
  setElementDecl(fCurrentElementIndex,elementDecl);
}
",0,0,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, IfStatement-expression, ),
"
2151,else {,"if (!skipSpace) {
  value.ch[current++]=' ';
  skipSpace=true;
}
 else {
}
",0,0,0,,
2152,else {,"if (contentType == XMLElementDecl.TYPE_SIMPLE) {
}
 else {
}
",0,0,0,,
2153,else {,"if (grammar != null) {
  targetNamespace=grammar.getTargetNamespace();
  if (jaxpSchemaSourceNamespaces.contains(targetNamespace)) {
    MessageFormatter mf=fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN);
    throw new java.lang.IllegalArgumentException(mf.formatMessage(fErrorReporter.getLocale(),""jaxp12-schema-source-ns"",null));
  }
 else {
    jaxpSchemaSourceNamespaces.add(targetNamespace);
  }
  if (objArr[i] instanceof InputStream || objArr[i] instanceof InputSource) {
    fJAXPCache.put(objArr[i],grammar);
  }
  fGrammarBucket.putGrammar(grammar);
}
 else {
}
",0,0,0,,
2154,} else {,"if (fSchemaType == null) {
  fSchemaDynamicValidation=true;
}
 else {
}
",0,0,0,,
2155,else {,"if (isg != null) {
  importedGrammars.add(isg);
}
 else {
}
",0,0,0,,
2156,else {,"if (isg != null) {
  if (!containedImportedGrammar(importedGrammars,isg)) {
    importedGrammars.add(isg);
  }
}
 else {
}
",0,0,0,,
2157,} else {,"if (value.length() != 0) {
  fNSBinder.declarePrefix(localpart,value);
}
 else {
}
",0,0,0,,
2158,} else {,"if (value.length() != 0) {
  if (localUri == null) {
    if (fNamespacePrefixes) {
      printNamespaceAttr(localpart,value);
    }
    fLocalNSBinder.declarePrefix(localpart,value);
  }
}
 else {
}
",0,0,0,,
2159,{,"if (result) {
}
 else {
  System.out.println(""'cloneNode' did not successfully clone this whole node tree (deep)!"");
  OK=false;
}
",0,0,0,,
2160,{,"if (!result) {
}
 else {
  System.out.println(""'cloneNode' was supposed to fail here, either it or 'treeCompare' failed!!!"");
  OK=false;
}
",0,0,0,,
2161,{,"if (design == null) {
}
 else if (design.equals(""vb"")) {
  inst2XsdOptions.setDesign(Inst2XsdOptions.DESIGN_VENETIAN_BLIND);
}
 else if (design.equals(""rd"")) {
  inst2XsdOptions.setDesign(Inst2XsdOptions.DESIGN_RUSSIAN_DOLL);
}
 else if (design.equals(""ss"")) {
  inst2XsdOptions.setDesign(Inst2XsdOptions.DESIGN_SALAMI_SLICE);
}
 else {
  printHelp();
  System.exit(0);
  return;
}
",0,0,0,,
2162,{,"if (simpleContent == null) {
}
 else if (simpleContent.equals(""smart"")) {
  inst2XsdOptions.setSimpleContentTypes(Inst2XsdOptions.SIMPLE_CONTENT_TYPES_SMART);
}
 else if (simpleContent.equals(""string"")) {
  inst2XsdOptions.setSimpleContentTypes(Inst2XsdOptions.SIMPLE_CONTENT_TYPES_STRING);
}
 else {
  printHelp();
  System.exit(0);
  return;
}
",0,0,0,,
2163,{,"if (enumerations == null) {
}
 else if (enumerations.equals(""never"")) {
  inst2XsdOptions.setUseEnumerations(Inst2XsdOptions.ENUMERATION_NEVER);
}
 else {
  try {
    int intVal=Integer.parseInt(enumerations);
    inst2XsdOptions.setUseEnumerations(intVal);
  }
 catch (  NumberFormatException e) {
    printHelp();
    System.exit(0);
    return;
  }
}
",0,0,0,,
2164,} else {,"if (i < sources.length) {
  TypeStoreUser current=(set == null) ? store.find_element_user(elemName,0) : store.find_element_user(set,0);
  if (current == sources[i]) {
    int j;
    for (j=0; j < i; j++) {
      TypeStoreUser user=(set == null) ? store.insert_element_user(elemName,j) : store.insert_element_user(set,elemName,j);
      ((XmlObjectBase)user).set(sources[j]);
    }
    for (i++, j++; i < sources.length; i++, j++) {
      XmlCursor c=sources[i].isImmutable() ? null : sources[i].newCursor();
      if (c != null && c.toParent() && c.getObject() == this) {
        c.dispose();
        current=(set == null) ? store.find_element_user(elemName,j) : store.find_element_user(set,j);
        if (current != sources[i]) {
          break;
        }
      }
 else {
        if (c != null) {
          c.dispose();
        }
        TypeStoreUser user=(set == null) ? store.insert_element_user(elemName,j) : store.insert_element_user(set,elemName,j);
        ((XmlObjectBase)user).set(sources[i]);
      }
    }
    startDest=j;
    startSrc=i;
    m=store.count_elements(elemName);
  }
}
 else {
}
",0,0,0,,
2165,} else {,"if (!minOk && maxOk) {
  if (minInclusive) {
    result=min;
  }
 else {
    result=min.add(increment);
  }
}
 else {
}
",0,0,0,,
2166,{,"if (resFromHash.getTime() == eachResult2.getTime()) {
}
 else {
  double diffPercent=((double)resFromHash.getTime() - (double)eachResult2.getTime()) / (double)resFromHash.getTime();
  diffPercent*=100;
  String testDetails=""Test Case Name\t:"" + resFromHash.getName() + ""\n""+ ""Test Case Spec\t:""+ resFromHash.getCustomArray(j).getName()+ ""=""+ resFromHash.getCustomArray(j).getValue()+ ""\n""+ ""Tolerance Spec\t:""+ tolerance;
  if (diffPercent < 0) {
    diffPercent*=-1.00;
    if (diffPercent >= 0) {
      if (diffPercent > tolerance) {
        diffPercent*=-1.00;
        System.out.println(""Regression Found! \n"" + testDetails + ""\n""+ ""% Deviation\t\t:""+ diffPercent);
        System.out.println(""------"");
      }
    }
  }
  if (diffPercent >= 0) {
    if (diffPercent > tolerance) {
    }
  }
}
",0,0,0,,
2167,{,"if (diffPercent > tolerance) {
}
",0,0,0,,
2168,} else {,"if (ncs != null) {
  Color specColor=new ColorWithAlternatives(ncs,new float[]{1.0f},opacity,null);
  return specColor;
}
 else {
}
",0,0,0,,
2169,} else {,"if (NamedColorProfileParser.isNamedColorProfile(iccProfile)) {
  NamedColorProfileParser parser=new NamedColorProfileParser();
  NamedColorProfile ncp;
  try {
    ncp=parser.parseProfile(iccProfile,iccProfileName,iccProfileSrc);
  }
 catch (  IOException ioe) {
    return null;
  }
  NamedColorSpace ncs=ncp.getNamedColor(c.getColorName());
  if (ncs != null) {
    Color specColor=new ColorWithAlternatives(ncs,new float[]{1.0f},opacity,null);
    return specColor;
  }
 else {
  }
}
 else {
}
",0,0,0,,
2170,} else {,"if (""jpeg"".equals(method)) {
  params.setCompressionMethod(""JPEG"");
}
 else {
}
",0,0,0,,
2171,} else {,"if (brkPairs[prevPrevCls][CHAR_CLASS_ID] == BREAK_ACTION_DIRECT) {
  as.addAttribute(WORD_LIMIT,wordCnt++,wordBegin,ich - 1);
  wordBegin=ich - 1;
}
 else {
}
",0,0,0,,
2172,((type & typeGRot)   == 0)) {,"if (glyphVectorTransformWorks && ((type & typeGTrans) == 0) && ((type & typeGRot) == 0)) {
}
 else {
  useHinting=false;
  break;
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
2173,} else {,"if (transform instanceof AbstractSVGTransform) {
  AbstractSVGTransform internal=(AbstractSVGTransform)transform;
  setRotate(internal.getAngle(),internal.getX(),internal.getY());
}
 else {
}
",0,0,0,,
2174,} else {,"if (token.startsWith(""u"")) {
  if (token.length() > 5) {
    return null;
  }
  if (token.length() < 5) {
    return null;
  }
  try {
    sb.append(hexToChar(token.substring(1,5)));
  }
 catch (  NumberFormatException nfe) {
    return null;
  }
}
 else {
}
",0,0,0,,
2175,} else {,"if (colorType == PNG_COLOR_PALETTE) {
  rawImage.setTransparent();
}
 else {
}
",0,0,0,,
2176,} else {,"if (""Description"".equals(localName)) {
}
 else {
}
",0,0,0,,
2177,} else {,"if (cachedObject == null) {
  if (log.isDebugEnabled()) {
    log.debug(""Adding included resource: "" + resourceName);
  }
  ResourceGroup resourceGroup=streamer.getResourceGroup(resourceLevel);
  if (truetype) {
    ResourceObject res=factory.createResource();
    res.setType(ResourceObject.TYPE_OBJECT_CONTAINER);
    ActiveEnvironmentGroup.setupTruetypeMDR(res,false);
    ObjectContainer oc=factory.createObjectContainer();
    InputStream is=accessor.createInputStream(uri);
    if (ttc != null) {
      oc.setData(extractTTC(ttc,is));
    }
 else {
      oc.setData(IOUtils.toByteArray(is));
    }
    ActiveEnvironmentGroup.setupTruetypeMDR(oc,true);
    res.addTriplet(new EncodingTriplet(1200));
    res.setFullyQualifiedName(FullyQualifiedNameTriplet.TYPE_REPLACE_FIRST_GID_NAME,FullyQualifiedNameTriplet.FORMAT_CHARSTR,resourceName,true);
    res.setDataObject(oc);
    resourceGroup.addObject(res);
  }
 else {
    ResourceObject resourceObject=factory.createResource(resourceName);
    IncludedResourceObject resourceContent=new IncludedResourceObject(resourceName,accessor,uri);
    resourceObject.setDataObject(resourceContent);
    resourceObject.setType(resourceObjectType);
    resourceGroup.addObject(resourceObject);
  }
  CachedObject newcachedObject=new CachedObject(resourceName,null);
  addToCache(resourceInfo,newcachedObject);
}
 else {
}
",0,0,0,,
2178,} else {,"if ("""".equals(uri)) {
  Maker maker=makers.get(localName);
  if (maker != null) {
    maker.endElement();
    content.clear();
  }
  ignoreCharacters=true;
}
 else {
}
",0,0,0,,
2179,} else {,"if (adjustingInfo.lineAlignment == EN_JUSTIFY) {
  if (log.isTraceEnabled()) {
    log.trace(""Applying variation factor to justified line: "" + adjustingInfo);
  }
  boolean bUnresolvedAreasPresent=false;
  for (  InlineArea inlineArea : inlineAreas) {
    bUnresolvedAreasPresent|=inlineArea.applyVariationFactor(adjustingInfo.variationFactor,adjustingInfo.availableStretch,adjustingInfo.availableShrink);
  }
  if (!bUnresolvedAreasPresent) {
    adjustingInfo=null;
  }
 else {
    if (!adjustingInfo.bAddedToAreaTree) {
      adjustingInfo.bAddedToAreaTree=true;
    }
    adjustingInfo.variationFactor=1.0;
  }
}
 else {
}
",0,0,0,,
2180,} else {,"if ((tcNew == null) || (tc != tcNew)) {
  maybeFinishTextContainer(tc,ia);
  maybeFinishInlineContainers(ich,tc,ia);
  update(ich,tc,ia);
}
 else {
}
",0,0,0,,
2181,} else {,"if (en < (MAX_LEVELS + 1)) {
  es[ei++]=ec;
  if ((bc == LRO) || (bc == RLO)) {
    ec=en | OVERRIDE;
  }
 else {
    ec=en & ~OVERRIDE;
  }
}
 else {
}
",0,0,0,,
2182,} else {,"if (ei > 0) {
  ec=es[--ei];
}
 else {
}
",0,0,0,,
2183,} else {,"if (href.startsWith(""url("") && (href.indexOf("")"") != -1)) {
  href=href.substring(4,href.lastIndexOf("")"")).trim();
  if (href.startsWith(""'"") && href.endsWith(""'"")) {
    href=href.substring(1,href.length() - 1);
  }
 else   if (href.startsWith(""\"""") && href.endsWith(""\"""")) {
    href=href.substring(1,href.length() - 1);
  }
}
 else {
}
",0,0,0,,
2184,} else {,"if (propertyMaker != null) {
  return propertyMaker.make(this);
}
 else {
}
",0,0,0,,
2185,} else {,"if (spMaker != null) {
  Property p=spMaker.make(propertyList,value,fo);
  if (p != null) {
    return setSubprop(baseProperty,subpropertyId & Constants.COMPOUND_MASK,p);
  }
}
 else {
}
",0,0,0,,
2186,} else {,"if (ch.hasSingleUnicodeValue()) {
  SingleByteFont.UnencodedCharacter uc=new SingleByteFont.UnencodedCharacter(ch,width,bbox);
  this.unencodedCharacters.put(ch.getSingleUnicodeValue(),uc);
}
 else {
}
",0,0,0,,
2187,} else {,"if (ch.hasSingleUnicodeValue()) {
  UnencodedCharacter uc=new UnencodedCharacter(ch,width,bbox);
  this.unencodedCharacters.put(ch.getSingleUnicodeValue(),uc);
}
 else {
}
",0,0,0,,
2188,} else {,"if (entry != null) {
  pad4();
  seekTab(in,post,0);
  int newTableSize=32;
  byte[] newPostTable=new byte[newTableSize];
  System.arraycopy(in.getBytes((int)entry.getOffset(),newTableSize),0,newPostTable,0,newTableSize);
  newPostTable[1]=0x03;
  writeBytes(newPostTable);
  updateCheckSum(currentPos,newTableSize,post);
  currentPos+=newTableSize;
  realSize+=newTableSize;
}
 else {
}
",0,0,0,,
2189,} else {,"if (hyp != null) {
  String hword=hyp.toString();
}
 else {
}
",0,0,0,,
2190,} else {,"if (pos instanceof SpaceHandlingBreakPosition) {
  positionList.add(pos);
}
 else {
}
",0,0,0,,
2191,} else {,"if (abProps.absolutePosition == EN_ABSOLUTE || abProps.absolutePosition == EN_FIXED) {
  Point offset=getAbsOffset();
  viewportBlockArea.setXOffset(offset.x);
  viewportBlockArea.setYOffset(offset.y);
}
 else {
}
",0,0,0,,
2192,} else {,"if (childLM instanceof LineLayoutManager) {
  childLC.setRefIPD(getContentAreaIPD());
}
 else {
}
",0,0,0,,
2193,} else {,"if (prevLM != this) {
  returnedList.addAll(prevLM.getChangedKnuthElements(oldList.subList(fromIndex,workListIterator.previousIndex()),alignment));
  somethingAdded=true;
}
 else {
}
",0,0,0,,
2194,} else {,"if (el.isGlue()) {
  len+=((KnuthElement)el).getWidth();
}
 else {
}
",0,0,0,,
2195,} else {,"if (allFootnotes > 0) {
  actualWidth+=footnoteSeparatorLength.getOpt();
  if (actualWidth + allFootnotes <= getLineWidth(activeNode.line)) {
    actualWidth+=allFootnotes;
    insertedFootnotesLength=pageNode.insertedFootnotes + allFootnotes;
    footnoteListIndex=footnotesList.size() - 1;
    footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;
  }
 else   if (((canDeferOldFN=canDeferOldFootnotes(pageNode,elementIndex)) || newFootnotes) && (footnoteSplit=getFootnoteSplit(pageNode,getLineWidth(activeNode.line) - actualWidth,canDeferOldFN)) > 0) {
    actualWidth+=footnoteSplit;
    insertedFootnotesLength=pageNode.insertedFootnotes + footnoteSplit;
  }
 else {
    actualWidth+=allFootnotes;
    insertedFootnotesLength=pageNode.insertedFootnotes + allFootnotes;
    footnoteListIndex=footnotesList.size() - 1;
    footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;
  }
}
 else {
}
",0,0,0,,
2196,} else {,"if (footnotesPending) {
  int allFootnotes=totalFootnotesLength - pageNode.insertedFootnotes;
  if (allFootnotes > 0) {
    actualWidth+=footnoteSeparatorLength.getOpt();
    if (actualWidth + allFootnotes <= getLineWidth(activeNode.line)) {
      actualWidth+=allFootnotes;
      insertedFootnotesLength=pageNode.insertedFootnotes + allFootnotes;
      footnoteListIndex=footnotesList.size() - 1;
      footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;
    }
 else     if (((canDeferOldFN=canDeferOldFootnotes(pageNode,elementIndex)) || newFootnotes) && (footnoteSplit=getFootnoteSplit(pageNode,getLineWidth(activeNode.line) - actualWidth,canDeferOldFN)) > 0) {
      actualWidth+=footnoteSplit;
      insertedFootnotesLength=pageNode.insertedFootnotes + footnoteSplit;
    }
 else {
      actualWidth+=allFootnotes;
      insertedFootnotesLength=pageNode.insertedFootnotes + allFootnotes;
      footnoteListIndex=footnotesList.size() - 1;
      footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;
    }
  }
 else {
  }
}
 else {
}
",0,0,0,,
2197,} else {,"if (footnoteListIndex < footnotesList.size()) {
  if (footnoteElementIndex < getFootnoteList(footnoteListIndex).size() - 1) {
    demerits+=splitFootnoteDemerits;
  }
}
 else {
}
",0,0,0,,
2198,} else {,"if (hc.getNextHyphPoint() == 1) {
  areaInfo.isHyphenated=true;
  somethingChanged=true;
}
 else {
}
",0,0,0,,
2199,} else {,"if (lastBox != null) {
  lastBox.setFootnoteBodyLM(bodyLM);
}
 else {
}
",0,0,0,,
2200,} else {,"if (node.line != bestActiveNode.line && node.totalDemerits > MAX_DEMERITS) {
  removeNode(i,node);
}
 else {
}
",0,0,0,,
2201,} else {,"if (knuthParagraphs == null) {
  knuthParagraphs=new ArrayList<KnuthSequence>();
  collectInlineKnuthElements(context);
}
 else {
}
",0,0,0,,
2202,} else {,"if (element.isBox() && !element.isAuxiliary()) {
  ((InlineLevelLayoutManager)element.getLayoutManager()).hyphenate(element.getPosition(),hc);
}
 else {
}
",0,0,0,,
2203,} else {,"if ((pos instanceof NonLeafPosition) && pos.generatesAreas()) {
  addBlockArea(context,pos,isLastPosition);
}
 else {
}
",0,0,0,,
2204,} else {,"if (pos instanceof SpaceHandlingBreakPosition) {
  positionList.add(pos);
}
 else {
}
",0,0,0,,
2205,} else {,"if (pvKeyOK && idRefOK) {
  Integer pageIndex=(Integer)pageIndices.get(pvKey);
  action=getGoToActionForID(idRef,(pageIndex != null ? pageIndex : -1));
}
 else {
}
",0,0,0,,
2206,} else {,"if (noted != null) {
  completeActions.add(action);
}
 else {
}
",0,0,0,,
2207,} else {,"if (h < 0) {
  h*=-1;
}
 else {
}
",0,0,0,,
2208,} else {,"if (typeface instanceof CustomFontMetricsMapper) {
  CustomFontMetricsMapper fontMetrics=(CustomFontMetricsMapper)typeface;
  CustomFont font=(CustomFont)fontMetrics.getRealFont();
  setFont((CustomFont)fontMetrics.getRealFont());
  String fontName=font.getFullName();
  fontStream=font.getInputStream();
  reader=new FontFileReader(fontStream);
  ttfFont=new TTFFile();
  String header=OFFontLoader.readHeader(reader);
  ttfFont.readFont(reader,header,fontName);
  readFontTables();
}
 else {
}
",0,0,0,,
2209,} else {,"if (inlineFormResources.containsValue(res)) {
  PSImageFormResource form=(PSImageFormResource)inlineFormResources.get(res);
  gen.writeln(""save"");
  generateFormForImage(gen,form);
  boolean execformFound=false;
  DSCEvent next=parser.nextEvent();
  if (next.isLine()) {
    PostScriptLine line=next.asLine();
    if (line.getLine().endsWith("" execform"")) {
      line.generate(gen);
      execformFound=true;
    }
  }
  if (!execformFound) {
    throw new IOException(""Expected a PostScript line in the form: <form> execform"");
  }
  gen.writeln(""restore"");
}
 else {
}
",0,0,0,,
2210,} else {,"if (cmd.equals(PARA_KEEP_OFF)) {
  ParagraphKeeptogetherContext.keepTogetherClose();
}
 else {
}
",0,0,0,,
2211,} else {,"if (stream != null) {
  iccProfile=ICC_Profile.getInstance(stream);
}
 else {
}
",0,0,0,,
2212,} else {,"if (typeface instanceof CustomFontMetricsMapper) {
  CustomFontMetricsMapper fontMetrics=(CustomFontMetricsMapper)typeface;
  CustomFont customFont=(CustomFont)fontMetrics.getRealFont();
  fontStream=customFont.getInputStream();
  reader=new FontFileReader(fontStream);
  ttfFont=new TTFFile();
  ttfFont.readFont(reader,customFont.getFullName());
  readFontTables();
}
 else {
}
",0,0,0,,
2213,} else {,"if (isOwnNamespace(uri)) {
  if (CATALOGUE.equals(localName)) {
  }
 else   if (MESSAGE.equals(localName)) {
    if (!CATALOGUE.equals(getParentElementName().getLocalName())) {
      throw new SAXException(MESSAGE + "" must be a child of "" + CATALOGUE);
    }
    this.currentKey=atts.getValue(""key"");
  }
 else {
    throw new SAXException(""Invalid element name: "" + elementName);
  }
}
 else {
}
",0,0,0,,
2214,} else {,"if (isOwnNamespace(uri)) {
  if (CATALOGUE.equals(localName)) {
  }
 else   if (MESSAGE.equals(localName)) {
    if (this.currentKey == null) {
      throw new SAXException(""current key is null (attribute 'key' might be mistyped)"");
    }
    resources.put(this.currentKey,this.valueBuffer.toString());
    this.currentKey=null;
  }
}
 else {
}
",0,0,0,,
2215,} else {,"if (""org.apache.fop.ResourceEventProducer.imageNotFound"".equals(event.getEventID())) {
  FileNotFoundException fnfe=(FileNotFoundException)event.getParam(""fnfe"");
  System.out.println(""---=== imageNotFound Event for "" + event.getParam(""uri"") + ""!!! ===---"");
  System.out.println(""Throwing a RuntimeException..."");
  throw new RuntimeException(EventFormatter.format(event),fnfe);
}
 else {
}
",0,0,0,,
2216,} else {,"if (hyp != null) {
  String hword=hyp.toString();
}
 else {
}
",0,0,0,,
2217,} else {,"if (base instanceof COSStream) {
  InputStream input=null;
  try {
    input=((COSStream)base).getUnfilteredStream();
    CMapParser parser=new CMapParser();
    return parser.parse(input);
  }
  finally {
    IOUtils.closeQuietly(input);
  }
}
 else {
}
",0,0,0,,
2218,} else {,"if (snapshotFile.length() == 0) {
  if (snapshotFile.delete()) {
    LOG.info(""Deleted empty snapshot file: {}"",snapshotFile.getAbsolutePath());
  }
 else {
    LOG.warn(""Could not delete empty snapshot file: {}"",snapshotFile.getAbsolutePath());
  }
}
 else {
}
",0,0,0,,
2219,} else {,"if (!disableAutoWatchReset) {
  e=localWatcher.events.poll(TIMEOUT,TimeUnit.MILLISECONDS);
  assertEquals(EventType.NodeDataChanged,e.getType(),e.getPath());
  assertEquals(""/watchtest/child"",e.getPath());
}
 else {
}
",0,0,0,,
2220,} else {,"if (!disableAutoWatchReset) {
  e=localWatcher.events.poll(TIMEOUT,TimeUnit.MILLISECONDS);
  assertEquals(EventType.NodeCreated,e.getType());
  assertEquals(""/watchtest/child2"",e.getPath());
}
 else {
}
",0,0,0,,
2221,} else {,"if (!disableAutoWatchReset) {
  e=localWatcher.events.poll(TIMEOUT,TimeUnit.MILLISECONDS);
  assertEquals(EventType.NodeChildrenChanged,e.getType());
  assertEquals(""/watchtest"",e.getPath());
}
 else {
}
",0,0,0,,
2222,} else {,"if (!disableAutoWatchReset) {
  e=localWatcher.events.poll(TIMEOUT,TimeUnit.MILLISECONDS);
  assertEquals(EventType.NodeDeleted,e.getType());
  assertEquals(""/watchtest/child"",e.getPath());
}
 else {
}
",0,0,0,,
2223,if (pathExceptionSuppressed && e.getCause() instanceof org.apache.cayenne.reflect.UnresolvablePathException) {,"if (pathExceptionSuppressed && e.getCause() instanceof org.apache.cayenne.reflect.UnresolvablePathException) {
}
 else {
  throw e;
}
",1,24,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2224,"} else if (state == State.INFO && ""ivyauthor"".equals(qName)) {","if (state == State.INFO && ""ivyauthor"".equals(qName)) {
}
 else if (state == State.INFO && ""repository"".equals(qName)) {
}
 else if (state == State.EXTRA_INFO || state == State.INFO && isOtherNamespace(qName)) {
  buffer=new StringBuilder();
  state=State.EXTRA_INFO;
  ExtraInfoHolder extraInfo=new ExtraInfoHolder();
  extraInfo.setName(qName);
  for (int i=0; i < attributes.getLength(); i++) {
    extraInfo.getAttributes().put(attributes.getQName(i),attributes.getValue(i));
  }
  extraInfoStack.push(extraInfo);
}
 else if (""configurations"".equals(qName)) {
  configurationStarted(attributes);
}
 else if (""publications"".equals(qName)) {
  publicationsStarted(attributes);
}
 else if (""dependencies"".equals(qName)) {
  dependenciesStarted(attributes);
}
 else if (""conflicts"".equals(qName)) {
  if (!descriptorVersion.startsWith(""1."")) {
    Message.deprecated(""using conflicts section is deprecated: "" + ""please use hints section instead. Ivy file URL: "" + descriptorURL);
  }
  state=State.CONFLICT;
  checkConfigurations();
}
 else if (""artifact"".equals(qName)) {
  artifactStarted(qName,attributes);
}
 else if (""include"".equals(qName) && state == State.DEP) {
  addIncludeRule(qName,attributes);
}
 else if (""exclude"".equals(qName) && state == State.DEP) {
  addExcludeRule(qName,attributes);
}
 else if (""exclude"".equals(qName) && state == State.DEPS) {
  state=State.EXCLUDE;
  parseRule(qName,attributes);
  getMd().addExcludeRule((ExcludeRule)confAware);
}
 else if (""dependency"".equals(qName)) {
  dependencyStarted(attributes);
}
 else if (""conf"".equals(qName)) {
  confStarted(attributes);
}
 else if (""mapped"".equals(qName)) {
  dd.addDependencyConfiguration(conf,settings.substitute(attributes.getValue(""name"")));
}
 else if (""conflict"".equals(qName) && state == State.DEPS || ""manager"".equals(qName) && state == State.CONFLICT) {
  managerStarted(attributes,state == State.CONFLICT ? ""name"" : ""manager"");
}
 else if (""override"".equals(qName) && state == State.DEPS) {
  mediationOverrideStarted(attributes);
}
 else if (""include"".equals(qName) && state == State.CONF) {
  includeConfStarted(attributes);
}
 else if (validate && state != State.EXTRA_INFO && state != State.DESCRIPTION) {
  addError(""unknown tag "" + qName);
}
",1,78,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2225,"if (!StringExpr.equal(bytes, 0, bytes.length, bytesExpected, 0, bytesExpected.length)) {","if (!StringExpr.equal(bytes,0,bytes.length,bytesExpected,0,bytesExpected.length)) {
}
",1,6,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
2226,if (items.get(i).getTModelInstanceDetails() != null) {,"if (items.get(i).getTModelInstanceDetails() != null) {
}
",1,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
2227,"if (!validateReplyMessage(replymsg, 1)) {","if (!validateReplyMessage(replymsg,1)) {
}
 else {
}
",1,1,3,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
2228,if (node.getSubscriptionListenerUrl() == null || node.getSubscriptionListenerUrl().length() == 0 || node.getSubscriptionListenerUrl().length() > 255) {,"if (node.getSubscriptionListenerUrl() == null || node.getSubscriptionListenerUrl().length() == 0 || node.getSubscriptionListenerUrl().length() > 255) {
}
",1,17,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2229,".summary(""check whether ""+altInstallDir+"" is set up"")).asTask().getUnchecked()==0) {","if (DynamicTasks.queue(SshEffectorTasks.ssh(""ls "" + altInstallDir + ""/pg_ctl"").allowingNonZeroExitCode().summary(""check whether "" + altInstallDir + "" is set up"")).asTask().getUnchecked() == 0) {
}
 else {
  DynamicTasks.queue(SshEffectorTasks.ssh(""mkdir -p "" + altInstallDir,""rm -rf '"" + altInstallDir + ""'"",""mv "" + getInstallDir() + "" ""+ altInstallDir,""rm -rf '"" + getInstallDir() + ""'"",""ln -s "" + altInstallDir + "" ""+ getInstallDir(),""mkdir -p "" + newRunDir,""chown -R postgres:postgres "" + altTarget).runAsRoot().requiringExitCodeZero().summary(""move install dir from user to postgres owned space""));
}
",1,1,7,,"SimpleName(),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(),
SimpleName(),
NumberLiteral(),
"
2230,"if (flags.containsKey(CassandraNode.TOKENS) || flags.containsKey(""tokens"") || flags.containsKey(""cassandra.tokens"")) {","if (flags.containsKey(CassandraNode.TOKENS) || flags.containsKey(""tokens"") || flags.containsKey(""cassandra.tokens"")) {
}
 else if (!useVnodes()) {
  BigInteger token=getTokenGenerator().newToken();
  if (token != null) {
    allflags.put(CassandraNode.TOKENS,ImmutableSet.of(token));
  }
}
",1,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
2231,"if ((flags.containsKey(CassandraNode.NUM_TOKENS_PER_NODE) || flags.containsKey(""numTokensPerNode""))) {","if ((flags.containsKey(CassandraNode.NUM_TOKENS_PER_NODE) || flags.containsKey(""numTokensPerNode""))) {
}
 else if (useVnodes()) {
  Integer numTokensPerNode=getConfig(NUM_TOKENS_PER_NODE);
  allflags.put(CassandraNode.NUM_TOKENS_PER_NODE,numTokensPerNode);
}
 else {
  allflags.put(CassandraNode.NUM_TOKENS_PER_NODE,1);
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
2232,"else if ("".:"".indexOf(c)>=0) ;","if ("".:"".indexOf(c) >= 0) ;
 else break;
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2233,if ((overwritten instanceof EffectorWithBody) && !(overwritten instanceof MethodEffector<?>)) {,"if ((overwritten instanceof EffectorWithBody) && !(overwritten instanceof MethodEffector<?>)) {
}
 else {
  result.put(eff.getName(),eff);
  Method overwrittenMethodSource=methodSources.put(eff.getName(),m);
  Field overwrittenFieldSource=fieldSources.remove(eff.getName());
  LOG.trace(""multiple definitions for effector {} on {}; preferring {} from {} to {} from {}"",new Object[]{eff.getName(),(optionalEntity != null ? optionalEntity : clazz),eff,m,overwritten,(overwrittenMethodSource != null ? overwrittenMethodSource : overwrittenFieldSource)});
}
",1,2,5,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2234,} else if (key.equals(RESIZE_UP_ITERATION_INCREMENT) || key.equals(RESIZE_UP_ITERATION_MAX) || key.equals(RESIZE_DOWN_ITERATION_INCREMENT) || key.equals(RESIZE_DOWN_ITERATION_MAX)) {,"if (key.equals(RESIZE_UP_ITERATION_INCREMENT) || key.equals(RESIZE_UP_ITERATION_MAX) || key.equals(RESIZE_DOWN_ITERATION_INCREMENT)|| key.equals(RESIZE_DOWN_ITERATION_MAX)) {
}
 else if (key.equals(MIN_POOL_SIZE)) {
  int newMin=(Integer)val;
  if (newMin > getConfig(MAX_POOL_SIZE)) {
    throw new IllegalArgumentException(""Min pool size "" + val + "" must not be greater than max pool size ""+ getConfig(MAX_POOL_SIZE));
  }
  onPoolSizeLimitsChanged(newMin,getConfig(MAX_POOL_SIZE));
}
 else if (key.equals(MAX_POOL_SIZE)) {
  int newMax=(Integer)val;
  if (newMax < getConfig(MIN_POOL_SIZE)) {
    throw new IllegalArgumentException(""Min pool size "" + val + "" must not be greater than max pool size ""+ getConfig(MAX_POOL_SIZE));
  }
  onPoolSizeLimitsChanged(getConfig(MIN_POOL_SIZE),newMax);
}
 else if (key.equals(INSUFFICIENT_CAPACITY_HIGH_WATER_MARK)) {
  Integer newVal=(Integer)val;
  Integer oldVal=config().get(INSUFFICIENT_CAPACITY_HIGH_WATER_MARK);
  if (oldVal != null && (newVal == null || newVal > oldVal)) {
    LOG.info(""{} resetting {} to {}, which will enable resizing above previous level of {}"",new Object[]{AutoScalerPolicy.this,INSUFFICIENT_CAPACITY_HIGH_WATER_MARK.getName(),newVal,oldVal});
  }
}
 else {
  throw new UnsupportedOperationException(""reconfiguring "" + key + "" unsupported for ""+ this);
}
",1,1,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
2235,if ((t.toString().contains(BailOutJcloudsLocation.ERROR_MESSAGE))) {,"if ((t.toString().contains(BailOutJcloudsLocation.ERROR_MESSAGE))) {
}
 else {
  Exceptions.propagate(t);
}
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
"
2236,(System.currentTimeMillis() - lastTimeStamp) < CHECK_PERIOD) {,"if ((System.currentTimeMillis() - lastTimeStamp) < CHECK_PERIOD) {
}
 else if ((System.currentTimeMillis() - lastTimeStamp) < (2 * CHECK_PERIOD)) {
  if (!(textFeld.getText().trim().equals(lastText.trim()))) {
    lastText=textFeld.getText();
    EventQueue.invokeLater(new Runnable(){
      public void run(){
        setFilter();
      }
    }
);
  }
}
 else {
}
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
"
2237,"if (osName.toLowerCase(Locale.ENGLISH).startsWith(""mac"")) {","if (osName.toLowerCase(Locale.ENGLISH).startsWith(""mac"")) {
}
 else if (osName.toLowerCase(Locale.ENGLISH).startsWith(""windows"")) {
  lookAndFeelClassName=""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"";
  model.setLookAndFeelClassName(lookAndFeelClassName);
}
 else if (osName.toLowerCase(Locale.ENGLISH).startsWith(""linux"")) {
  lookAndFeelClassName=""com.sun.java.swing.plaf.gtk.GTKLookAndFeel"";
  model.setLookAndFeelClassName(lookAndFeelClassName);
}
",1,4,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
2238,"if( ""$"".equals( token ) || ""("".equals( token ) || "")"".equals( token ) || ""["".equals( token ) || ""]"".equals( token ) ) {","if (""$"".equals(token) || ""("".equals(token) || "")"".equals(token)|| ""["".equals(token)|| ""]"".equals(token)) {
}
 else {
  paramName=token;
  return;
}
",1,12,15,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
2239,"} else if (methodHeaders[i].getName().equals(""Content-Length"")) {","if (methodHeaders[i].getName().equals(""Content-Length"")) {
}
 else {
  response.setHeader(methodHeaders[i].getName(),methodHeaders[i].getValue());
}
",1,7,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
2240,if (name.equals(CREATECONTEXT_ELEMENT) == true) {,"if (name.equals(CREATECONTEXT_ELEMENT) == true) {
}
 else if (name.equals(GETXML_ELEMENT) == true) {
}
 else if (name.equals(LOADCONTEXT_ELEMENT) == true) {
  String path=(String)stack.pop();
  String contextName=(String)stack.pop();
  SourceParameters pars=this.endParametersRecording((SourceParameters)null);
  pars.setSingleParameterValue(""contextname"",contextName);
  pars.setSingleParameterValue(""path"",path);
  this.getContextManager().getContext(contextName).loadXML(path,pars);
}
 else if (name.equals(SessionPreTransformer.CONTEXT_URL_ELEMENT) == true) {
  this.ignoreEventsCount--;
  String contextUrl=this.request.getScheme() + ""://"" + this.request.getServerName()+ "":""+ this.request.getServerPort()+ this.request.getContextPath();
  this.sendTextEvent(contextUrl);
}
 else {
  super.endTransformingElement(uri,name,raw);
}
",1,2,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
2241,if (vfeat.get(SUBSUMED_CHUNK)) { },"if (vfeat.get(SUBSUMED_CHUNK)) {
}
",1,1,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
2242,"} else if ((measurementMNode = findTemplate(deviceMNode, measurement, vectorId)) != null) {","if ((measurementMNode=findTemplate(deviceMNode,measurement,vectorId)) != null) {
}
 else {
  if (!config.isAutoCreateSchemaEnabled()) {
    throw new PathNotExistException(deviceId + PATH_SEPARATOR + measurement);
  }
 else {
    if (plan instanceof InsertRowPlan || plan instanceof InsertTabletPlan) {
      if (!plan.isAligned()) {
        internalCreateTimeseries(prefixPath.concatNode(measurement),plan.getDataTypes()[i]);
        measurementMNode=(MeasurementMNode)deviceMNode.left.getChild(measurement);
      }
 else {
        internalAlignedCreateTimeseries(prefixPath,Arrays.asList(measurementList),Arrays.asList(plan.getDataTypes()));
        measurementMNode=(MeasurementMNode)deviceMNode.left.getChild(vectorId);
      }
    }
 else {
      throw new MetadataException(String.format(""Only support insertRow and insertTablet, plan is [%s]"",plan.getOperatorType()));
    }
  }
}
",1,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
2243,if ( leftLength == rightLength );,"if (leftLength == rightLength) ;
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2244,"} else if (eks.equals(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0))) {","if (eks.equals(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0))) {
}
 else if (eks.equals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0))) {
}
",1,2,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
2245,if ((scopeStack.empty() ? null : scopeStack.peek()) == Scope.QUOTE) {,"if ((scopeStack.empty() ? null : scopeStack.peek()) == Scope.QUOTE) {
}
 else {
  scopeStack.push(Scope.getScope(curChar));
}
",1,1,6,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
2246,if (supported(buf[1]) && isEnabled(buf[1])) {,"if (supported(buf[1]) && isEnabled(buf[1])) {
}
 else {
  if (waitDOreply(buf[1]) && supported(buf[1])) {
    enable(buf[1]);
    setWait(DO,buf[1],false);
  }
 else {
    if (supported(buf[1])) {
      sendCommand(DO,buf[1],false);
      enable(buf[1]);
    }
 else {
      sendCommand(DONT,buf[1],false);
    }
  }
}
",1,1,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2247,if (this.sender.getProxy() == null || this.sender.getProxy().isDestroyed()) {,"if (this.sender.getProxy() == null || this.sender.getProxy().isDestroyed()) {
}
 else if (RecoverableExceptionPredicates.isRecoverableWhenReadingAck(ex)) {
  sleepBeforeRetry();
}
 else {
  logAndStopProcessor(ex);
}
",1,2,8,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
2248,"if(utf8Values005[i]==""+""||utf8Values005[i]==""#""){}","if (utf8Values005[i] == ""+"" || utf8Values005[i] == ""#"") {
}
 else {
  fail(""This is wrong."" + utf8Values005[i]);
}
",1,1,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
2249,"} else if (month == -1 && (month = parse(text, MONTHS)) != -1) {","if (month == -1 && (month=parse(text,MONTHS)) != -1) {
}
 else if (text.equals(""GMT"")) {
}
 else throw new IllegalArgumentException();
",1,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2250,"if (!isAttributeValueSupported(requestAttrs[i], flavor, attrs)) {","if (!isAttributeValueSupported(requestAttrs[i],flavor,attrs)) {
}
 else if (category.equals(Copies.class)) {
  Copies copies=(Copies)requestAttrs[i];
  printAttributes[COPIES_INDEX]=copies.getValue();
}
 else if (category.equals(Sides.class)) {
  Sides sides=(Sides)requestAttrs[i];
  printAttributes[SIDES_INDEX]=1;
  if (sides.equals(Sides.DUPLEX) || sides.equals(Sides.TWO_SIDED_LONG_EDGE)) {
    printAttributes[SIDES_INDEX]=2;
  }
 else   if (sides.equals(Sides.TUMBLE) || sides.equals(Sides.TWO_SIDED_SHORT_EDGE)) {
    printAttributes[SIDES_INDEX]=3;
  }
}
 else if (category.equals(Media.class)) {
  if (medias.containsKey(requestAttrs[i])) {
    Integer id=(Integer)medias.get(requestAttrs[i]);
    printAttributes[PAPER_ID_INDEX]=id.intValue();
  }
}
 else if (category.equals(Chromaticity.class)) {
  if (requestAttrs[i].equals(Chromaticity.MONOCHROME)) {
    printAttributes[CHROMATICITY_INDEX]=1;
  }
 else   if (requestAttrs[i].equals(Chromaticity.COLOR)) {
    printAttributes[CHROMATICITY_INDEX]=2;
  }
}
 else if (category.equals(OrientationRequested.class)) {
  if (requestAttrs[i].equals(OrientationRequested.PORTRAIT)) {
    printAttributes[ORIENTATION_INDEX]=1;
  }
 else   if (requestAttrs[i].equals(OrientationRequested.LANDSCAPE)) {
    printAttributes[ORIENTATION_INDEX]=2;
  }
}
 else if (category.equals(PrinterResolution.class)) {
  PrinterResolution res=(PrinterResolution)requestAttrs[i];
  int xres=res.getCrossFeedResolution(PrinterResolution.DPI);
  int yres=res.getFeedResolution(PrinterResolution.DPI);
  printAttributes[XRESOLUTION_INDEX]=xres;
  printAttributes[YRESOLUTION_INDEX]=yres;
}
 else if (category.equals(SheetCollate.class)) {
  SheetCollate collate=(SheetCollate)requestAttrs[i];
  if (collate == SheetCollate.COLLATED) {
    printAttributes[COLLATE_INDEX]=1;
  }
 else   if (collate == SheetCollate.UNCOLLATED) {
    printAttributes[COLLATE_INDEX]=0;
  }
}
",1,2,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
2251,&& !approveButtonText.equals(getUI().getApproveButtonText(this))) {,"if (approveButtonText != null && !approveButtonText.equals(getUI().getApproveButtonText(this))) {
}
",1,1,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, ),
"
2252,"if (RuntimeAdditionalTest0.os.equals(""Win"") || RuntimeAdditionalTest0.os.equals(""Lin"")) {","if (RuntimeAdditionalTest0.os.equals(""Win"") || RuntimeAdditionalTest0.os.equals(""Lin"")) {
}
 else {
  fail(""WARNING (test_41): unknown operating system."");
}
",1,1,6,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2253,"|| (('0' <= c) && (c <= '9')) || (c == '_') || (c == '.') || (c == '""')) {","if ((('a' <= c) && (c <= 'z')) || (('A' <= c) && (c <= 'Z')) || (('0' <= c) && (c <= '9'))|| (c == '_')|| (c == '.')|| (c == '""')) {
}
 else {
  throw parseException(""Expected identifier. -"" + c);
}
",1,1,10,,"CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
2254,&& steps[1].getNameTest() == null) {,"if (steps.length == 2 && steps[1].getIncludeDescendants() && steps[1].getNameTest() == null) {
}
 else if (steps.length == 1 && steps[0].getIncludeDescendants() && steps[0].getNameTest() == null) {
}
 else {
  if (predicates.length > 0) {
    sb.append("" AND "");
  }
 else {
    sb.append("" WHERE "");
  }
  node.getLocationNode().accept(this,sb);
}
",1,1,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
2255,occurrences.get(0).index ==occurrences.get(1).index) {,"if (occurrences.size() == 2 && occurrences.get(0).index <= 2 && occurrences.get(0).index == occurrences.get(1).index) {
}
 else {
  code[p++]=seen.add(var) ? GET_TEMP : UNIFY_TEMP;
  code[p++]=(byte)tempVars.indexOf(var);
  code[p++]=(byte)argi;
}
",1,1,8,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-rightOperand, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, ),
"
2256,if ( action.hasProperty(ShexT.semActs) ) {},"if (action.hasProperty(ShexT.semActs)) {
}
",1,1,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
2257,|| findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.APPROXIMATE_MATCH_TMODEL)) {,"if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.APPROXIMATE_MATCH) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.APPROXIMATE_MATCH_TMODEL)) {
}
 else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_INSENSITIVE_MATCH) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_INSENSITIVE_MATCH_TMODEL)) {
}
 else {
}
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(MethodInvocation-arguments, ),
"
2258,} else if (pt.length == 1 && pt[0] == String.class) {,"if (pt.length == 1 && pt[0] == String.class) {
}
 else {
  return false;
}
",1,1,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2259,if (!licenses.contains(license)) ;,"if (!licenses.contains(license)) ;
",1,2,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2260,if (null != currentValue && currentValue.equals(entry.getValue())) {,"if (null != currentValue && currentValue.equals(entry.getValue())) {
}
 else {
  if (key.equals(GlassfishModule.PASSWORD_ATTR)) {
    String serverName=attrMap.get(GlassfishModule.DISPLAY_NAME_ATTR);
    String userName=attrMap.get(GlassfishModule.USERNAME_ATTR);
    Keyring.save(GlassfishInstance.passwordKey(serverName,userName),entry.getValue().toCharArray(),""GlassFish administrator user password"");
    LOGGER.log(Level.FINEST,""{0} attribute stored in keyring: {1}"",new String[]{instance.getDisplayName(),key});
  }
 else {
    instanceFO.setAttribute(key,entry.getValue());
    LOGGER.log(Level.FINEST,""{0} attribute stored: {1} = {2}"",new String[]{instance.getDisplayName(),key,entry.getValue()});
  }
}
",1,2,6,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2261,if(owner == null || !owner.equals(product) ) {,"if (owner == null || !owner.equals(product)) {
}
 else {
  sb.append(""product="");
  sb.append(owner);
  List<String> data=ownerInfo.getExtraData();
  if (data != null && data.size() > 0) {
    sb.append(""&component="");
    sb.append(data.get(0));
  }
  urlParameters=sb.toString();
  selectFirstProduct();
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2262,"if (ProjectUtilities.closeAllDocuments(projects, false, null)) {","if (ProjectUtilities.closeAllDocuments(projects,false,null)) {
}
",1,1,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
2263,"if (e.getActionCommand ().equals (""SwitchMe!""));","if (e.getActionCommand().equals(""SwitchMe!"")) ;
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2264,else if ( t == HTML.Tag.A && (where == IN_DESCRIPTION_SUFFIX || where == IN_DESCRIPTION) ) {,"if (t == HTML.Tag.A && (where == IN_DESCRIPTION_SUFFIX || where == IN_DESCRIPTION)) {
}
 else if ((t == HTML.Tag.B || t == HTML.Tag.SPAN)) {
}
 else {
  where=IN_BALAST;
}
",1,4,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
2265,if (getCurrentService() instanceof JenaReasoningService) {} else if (getCurrentService() instanceof OWLApiReasoningService) {} else {,"if (getCurrentService() instanceof JenaReasoningService) {
}
 else if (getCurrentService() instanceof OWLApiReasoningService) {
}
 else {
  log.error(""This implementation of ReasoningService is not supported: {}"",getCurrentService().getClass());
  throw new WebApplicationException(new Exception(""This implementation of ReasoningService is not supported: "" + getCurrentService().getClass()),Response.Status.INTERNAL_SERVER_ERROR);
}
",1,4,6,,"SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, IfStatement-elseStatement, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, IfStatement-elseStatement, ),
Block(IfStatement-thenStatement, IfStatement-elseStatement, ),
"
2266,if ((this.prevSchemaPath != null) && (this.prevSchemaPath.equals(str))){,"if ((this.prevSchemaPath != null) && (this.prevSchemaPath.equals(str))) {
}
 else {
  if ((str != null) && (!"""".equals(str.trim()))) {
    guessSchemaType(str);
    this.prevSchemaPath=str;
    str=relativizePath(str);
    if ((str != null) && (!"""".equals(str.trim()))) {
      this.txtFilePath.setText(str);
    }
  }
}
",1,2,7,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
2267,if (m.vote != -1) {,"if (m.vote != -1) {
}
 else {
  optionalversion=""-"" + m.version;
}
",1,1,2,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2268,"if (UtilValidate.isNotEmpty(payPalConfig.getString(""imageUrl"")));","if (UtilValidate.isNotEmpty(payPalConfig.getString(""imageUrl""))) ;
",1,1,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2269,if ( fschema.alias == null && fother.alias == null ) {,"if (fschema.alias == null && fother.alias == null) {
}
 else if (fschema.alias == null) {
  return false;
}
 else if (!fschema.alias.equals(fother.alias)) {
  return false;
}
",1,1,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2270,"if (reference.compareAndSet(null, atomicLong)) {","if (reference.compareAndSet(null,atomicLong)) {
}
 else if (reference.get() != atomicLong) {
  throw new RuntimeException(""Reference should be same!"");
}
",1,1,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
2271,if (oldProps.get(oldKey).equals(newProps.get(oldKey))) {,"if (oldProps.get(oldKey).equals(newProps.get(oldKey))) {
}
 else {
  sb.append(""("" + oldKey + "" changed from ""+ oldProps.get(oldKey)+ "" to ""+ newProps.get(oldKey)+ "")"");
}
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
2272,&& LifecycleState.DESTROYED.compareTo(state) >= 0) {,"if (LifecycleState.STOPPING_PREP.compareTo(state) <= 0 && LifecycleState.DESTROYED.compareTo(state) >= 0) {
}
 else {
  s.stop();
  s.destroy();
}
",1,1,4,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ),
"
2273,if (!cache.contains(test + i)) {,"if (!cache.contains(test + i)) {
}
",1,1,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
2274,} else if (!session.isOpen() && root instanceof IOException) {,"if (!session.isOpen() && root instanceof IOException) {
}
 else {
  log.error(""onError: "" + t.toString(),t);
}
",1,1,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2275,if (!(args.get(0) instanceof AbstractStringExpression)) {,"if (!(args.get(0) instanceof AbstractStringExpression)) {
}
",1,1,4,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
2276,if (contentType != null);,"if (contentType != null) ;
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2277,if (lookupIndex == 1 && i == multiplier.getLength() - 1){},"if (lookupIndex == 1 && i == multiplier.getLength() - 1) {
}
 else buf[charPos++]=table[lookupIndex];
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
2278,|| (m_lineSepLen ==1 && m_lineSep[0] == CharInfo.S_LINEFEED)){,"if (!m_lineSepUse || (m_lineSepLen == 1 && m_lineSep[0] == CharInfo.S_LINEFEED)) {
}
 else {
  writeOutCleanChars(chars,i,lastProcessed);
  writer.write(m_lineSep,0,m_lineSepLen);
  lastProcessed=i;
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
2279,if (prefix != XMLSymbols.EMPTY_STRING && fLocalNSBinder.getURI(prefix) == null) {,"if (prefix != XMLSymbols.EMPTY_STRING && fLocalNSBinder.getURI(prefix) == null) {
}
 else {
  int counter=1;
  prefix=fSymbolTable.addSymbol(PREFIX + counter++);
  while (fLocalNSBinder.getURI(prefix) != null) {
    prefix=fSymbolTable.addSymbol(PREFIX + counter++);
  }
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2280,if (pos + contentLength + 1 > data) {,"if (pos + contentLength + 1 > data) {
}
 else {
  content=new byte[contentLength];
  System.arraycopy(workingBuffer,pos,content,0,contentLength);
  pos+=contentLength + 1;
}
",2,2,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
2281,if (option.getValue().equals(Option.EMPTY_OPTION.getValue())) {,"if (option.getValue().equals(Option.EMPTY_OPTION.getValue())) {
}
 else {
  return;
}
",2,35,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
2282,"if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class, e)) {","if (Utils.exceptionCauseIsInstanceOf(KeeperException.NoNodeException.class,e)) {
}
 else {
  throw Utils.wrapInRuntime(e);
}
",2,3,4,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
2283,&& ((returnCode > 499) && (returnCode < 600))) {,"if ((contentType != null) && !contentType.startsWith(""text/html"") && ((returnCode > 499) && (returnCode < 600))) {
}
 else if ((location != null) && ((returnCode == 302) || (returnCode == 307))) {
  inp.close();
  socketHolder.getSocket().close();
  msgContext.removeProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
  msgContext.setProperty(MessageContext.TRANS_URL,location);
  invoke(msgContext);
  return inp;
}
 else if (returnCode == 100) {
  msgContext.removeProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
  msgContext.removeProperty(HTTPConstants.MC_HTTP_STATUS_MESSAGE);
  readHeadersFromSocket(socketHolder,msgContext,inp,headers);
  return readFromSocket(socketHolder,msgContext,inp,headers);
}
 else {
  ByteArrayOutputStream buf=new ByteArrayOutputStream(4097);
  while (-1 != (b=(byte)inp.read())) {
    buf.write(b);
  }
  String statusMessage=msgContext.getStrProp(HTTPConstants.MC_HTTP_STATUS_MESSAGE);
  AxisFault fault=new AxisFault(""HTTP"",""("" + returnCode + "")""+ statusMessage,null,null);
  fault.setFaultDetailString(Messages.getMessage(""return01"","""" + returnCode,buf.toString()));
  fault.addFaultDetail(Constants.QNAME_FAULTDETAIL_HTTPERRORCODE,Integer.toString(returnCode));
  throw fault;
}
",2,2,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
2284,"if (""true"".equals(System.getProperty(""Testing Harmony""))) {","if (""true"".equals(System.getProperty(""Testing Harmony""))) {
}
 else {
  try {
    jrs.addRowSet(noInitialCrset,1);
    fail(""should throw SQLException"");
  }
 catch (  SQLException e) {
  }
}
",2,3,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
2285,if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {,"if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
}
 else if (LbStickinessMethod.StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
  String tablesize=""200k"";
  String expire=""30m"";
  for (  final Pair<String,String> paramKV : paramsList) {
    final String key=paramKV.first();
    final String value=paramKV.second();
    if (""tablesize"".equalsIgnoreCase(key)) {
      tablesize=value;
    }
    if (""expire"".equalsIgnoreCase(key)) {
      expire=value;
    }
  }
  if (expire != null && !containsOnlyNumbers(expire,timeEndChar)) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: expire is not in timeformat: ""+ expire);
  }
  if (tablesize != null && !containsOnlyNumbers(tablesize,""kmg"")) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: tablesize is not in size format: ""+ tablesize);
  }
}
 else if (LbStickinessMethod.StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {
  String length=null;
  String holdTime=null;
  for (  final Pair<String,String> paramKV : paramsList) {
    final String key=paramKV.first();
    final String value=paramKV.second();
    if (""length"".equalsIgnoreCase(key)) {
      length=value;
    }
    if (""holdtime"".equalsIgnoreCase(key)) {
      holdTime=value;
    }
  }
  if (length != null && !containsOnlyNumbers(length,null)) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: length is not a number: ""+ length);
  }
  if (holdTime != null && !containsOnlyNumbers(holdTime,timeEndChar) && !containsOnlyNumbers(holdTime,null)) {
    throw new InvalidParameterValueException(""Failed LB in validation rule id: "" + rule.getId() + "" Cause: holdtime is not in timeformat: ""+ holdTime);
  }
}
",2,4,5,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
2286,if (constraint.getExpectedJavaSuperType().isAssignableFrom(BrooklynObjectInternal.class)) {,"if (constraint.getExpectedJavaSuperType().isAssignableFrom(BrooklynObjectInternal.class)) {
}
 else {
  @SuppressWarnings(""unchecked"") Class<? extends AbstractBrooklynObjectSpec<?,?>> specType=RegisteredTypeLoadingContexts.lookupSpecTypeForTarget((Class<? extends BrooklynObject>)constraint.getExpectedJavaSuperType());
  if (specType == null) {
    Maybe.absent(object + "" is returned as spec for unexpected java supertype "" + constraint.getExpectedJavaSuperType());
  }
  if (!specType.isAssignableFrom(object.getClass())) {
    Maybe.absent(object + "" is not a spec of the expected java supertype "" + constraint.getExpectedJavaSuperType());
  }
}
",2,2,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, IfStatement-expression, ),
"
2287,&& Files.exists(trustStorePath = Paths.get(graalVmHome).resolve(CACERTS_REL_PATH))) {,"if (graalVmHome != null && !graalVmHome.isEmpty() && Files.exists(trustStorePath=Paths.get(graalVmHome).resolve(CACERTS_REL_PATH))) {
}
 else if (javaHome != null && !javaHome.isEmpty() && Files.exists(trustStorePath=Paths.get(javaHome).resolve(CACERTS_REL_PATH))) {
}
 else if (javaHome != null && !javaHome.isEmpty() && Files.exists(trustStorePath=Paths.get(javaHome).resolve(CACERTS_REL_PATH_ALT))) {
}
 else {
  throw new IllegalStateException(""Could not find any existing file to set javax.net.ssl.trustStore; tried $GRAALVM_HOME/"" + CACERTS_REL_PATH + "" and $JAVA_HOME/""+ CACERTS_REL_PATH+ "". You may need to set GRAALVM_HOME or JAVA_HOME properly. Found $GRAALVM_HOME = ""+ graalVmHome+ "" and $JAVA_HOME = ""+ graalVmHome);
}
",2,2,8,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, ),
"
2288,if (!idleQueue.offerFirst(this)) {,"if (!idleQueue.offerFirst(this)) {
}
",2,2,3,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
2289,if (historyOf==CONST.NE_HISTORY_OF_PRESENT && !options.ignoreHistory) {,"if (historyOf == CONST.NE_HISTORY_OF_PRESENT && !options.ignoreHistory) {
}
",2,2,3,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2290,} else if (schemaList.get(docBaseURI) != null && schemaList.containsValue(schemaEle)) {,"if (schemaList.get(docBaseURI) != null && schemaList.containsValue(schemaEle)) {
}
 else {
  String tns=schema.getDocumentBaseURI() + ""#"" + schema.getElement().getAttribute(""targetNamespace"");
  if (schemaList.get(tns) == null) {
    schemaList.put(tns,schema.getElement());
  }
}
",2,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2291,if (decodeStr.lastIndexOf('%') > i) {,"if (decodeStr.lastIndexOf('%') > i) {
}
 else {
  port=Integer.parseInt(decodeStr.substring(i + 1));
  host=decodeStr.substring(0,i);
}
",2,2,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
2292,if (new File(prog).isAbsolute()) {,"if (new File(prog).isAbsolute()) {
}
 else {
  FileUtil.chmod(new File(currentDir,prog).toString(),""a+x"");
}
",2,2,3,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
2293,"if (System.getProperty(""jdbc.drivers"") != null) {","if (System.getProperty(""jdbc.drivers"") != null) {
}
 else {
  try (InputStream is=JDBCUtil.class.getResourceAsStream(""/db.properties"")){
    Properties properties=new Properties();
    properties.load(is);
    for (    String k : properties.stringPropertyNames()) {
      Matcher m=Pattern.compile(""(?i)jdbc:"" + k).matcher(connectionString);
      if (m.find()) {
        this.driverClass=properties.getProperty(k);
      }
    }
  }
 catch (  IOException e) {
  }
}
",2,3,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
2294,if (columnsToIncludeTruncated != null && !columnsToIncludeTruncated[i]) {,"if (columnsToIncludeTruncated != null && !columnsToIncludeTruncated[i]) {
}
 else {
  final TypeInfo targetTypeInfo=targetTypeInfos[i];
  final TypeInfo sourceTypeInfo=sourceTypeInfos[i];
  if (!sourceTypeInfo.equals(targetTypeInfo)) {
    if (VectorPartitionConversion.isImplicitVectorColumnConversion(sourceTypeInfo,targetTypeInfo)) {
      initTargetEntry(i,i,sourceTypeInfo);
    }
 else {
      initTargetEntry(i,i,targetTypeInfo);
      initConvertSourceEntry(i,sourceTypeInfo);
    }
  }
 else {
    initTargetEntry(i,i,targetTypeInfo);
  }
}
",2,2,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2295,if ( thrown instanceof SocketException || thrown instanceof ConnectTimeoutException || thrown instanceof UnknownHostException )  {,"if (thrown instanceof SocketException || thrown instanceof ConnectTimeoutException || thrown instanceof UnknownHostException) {
}
 else {
  Assert.fail(String.format(""Expected SocketException or ConnectTimeoutException, instead got: %s %s"",thrown.getClass().getName(),thrown.getMessage()));
}
",2,2,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
2296,if (DialogDisplayer.getDefault().notify(d).equals(accept)) {,"if (DialogDisplayer.getDefault().notify(d).equals(accept)) {
}
",2,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
2297,else if (returnType == Graph.class) {},"if (returnType == Graph.class) {
}
",2,2,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
2298,"if (xmlResult.xml.contains(div + ""pdf_hays!ack"")) {","if (xmlResult.xml.contains(div + ""pdf_hays!ack"")) {
}
 else if (xmlResult.xml.contains(div + ""pdf_haystack"")) {
}
 else if (xmlResult.xml.contains(div + ""dehayslack"")) {
}
 else {
  fail(""couldn't find acceptable variants of haystack"");
}
",2,2,4,,"QualifiedName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
2299,} else if (child.isValid() && !child.hasTop()) {,"if (child.isValid() && !child.hasTop()) {
}
 else if (child.isValid() && child.hasTop()) {
  if (log.isDebugEnabled()) {
    log.debug(""handleAND, child OR, valid and has top, means not pureNegations"");
  }
  pureNegations=false;
  while (iter.hasNext()) {
    Key i=(Key)iter.next();
    if (child.isNegated()) {
      badSet.add(i);
      if (goodSet.contains(i)) {
        if (log.isDebugEnabled()) {
          log.debug(""handleAND, child OR, goodSet contains bad value: "" + i);
        }
        me.setValid(false);
        return;
      }
    }
 else {
      if (goodSetEmpty && !badSet.contains(i)) {
        goodSet.add(i);
        matchedOne=true;
      }
 else {
        if (goodSet.contains(i)) {
          matchedOne=true;
        }
      }
    }
  }
}
",3,88,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2300,if (x==null || !x.hasNext()) {},"if (x == null || !x.hasNext()) {
}
 else {
  x.next();
  count++;
  if (x.hasNext())   count++;
}
",3,21,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Block(IfStatement-thenStatement, ),
"
2301,if (!(info.userRecordType == JournalRecordIds.ADD_MESSAGE_PROTOCOL)) {,"if (!(info.userRecordType == JournalRecordIds.ADD_MESSAGE_PROTOCOL)) {
}
",3,3,2,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
2302,if(linaex.getComponent() != null && PromptFormAbstract.ID_CANCEL_BUTTON.equals(linaex.getComponent().getId())) {,"if (linaex.getComponent() != null && PromptFormAbstract.ID_CANCEL_BUTTON.equals(linaex.getComponent().getId())) {
}
 else {
  addMessage(null);
}
",3,14,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2303,"}else if(m.group(7).equals(""conditional"")){","if (m.group(7).equals(""conditional"")) {
}
",3,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
2304,} else if (o instanceof byte[]) {,"if (o instanceof byte[]) {
}
",3,3,3,,"SimpleName(InstanceofExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(ArrayType-elementType, InstanceofExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
2305,if (logged[REQUIRED] != total[REQUIRED] || logged[REQUISITE] != total[REQUISITE]) {,"if (logged[REQUIRED] != total[REQUIRED] || logged[REQUISITE] != total[REQUISITE]) {
}
 else {
  if (total[REQUIRED] == 0 && total[REQUISITE] == 0) {
    if (logged[OPTIONAL] != 0 || logged[SUFFICIENT] != 0) {
      fail=false;
    }
  }
 else {
    fail=false;
  }
}
",3,5,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2306,if (params == null || params.length == 0) {,"if (params == null || params.length == 0) {
}
 else if (params.length == 1) {
  precision=Integer.valueOf(params[0]);
  HiveDecimalUtils.validateParameter(precision,scale);
}
 else if (params.length == 2) {
  precision=Integer.parseInt(params[0]);
  scale=Integer.parseInt(params[1]);
  HiveDecimalUtils.validateParameter(precision,scale);
}
 else if (params.length > 2) {
  throw new IllegalArgumentException(""Type decimal only takes two parameter, but "" + params.length + "" is seen"");
}
",3,3,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2307,if (internalProxies !=null && internalProxies.matcher(currentRemoteIp).matches()) {,"if (internalProxies != null && internalProxies.matcher(currentRemoteIp).matches()) {
}
 else if (trustedProxies != null && trustedProxies.matcher(currentRemoteIp).matches()) {
  proxiesHeaderValue.addFirst(currentRemoteIp);
}
 else {
  idx--;
  break;
}
",3,3,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
2308,if (isCookieOctet[(b & 0xFF)]) {,"if (isCookieOctet[(b & 0xFF)]) {
}
 else if (b == SEMICOLON_BYTE || b == COMMA_BYTE || b == SPACE_BYTE || b == TAB_BYTE) {
  end=bb.position() - 1;
  bb.position(end);
  break;
}
 else if (quoted && b == QUOTE_BYTE) {
  end=bb.position() - 1;
  break;
}
 else {
  return null;
}
",3,3,3,,"SimpleName(ArrayAccess-array, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ArrayAccess-index, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ArrayAccess-index, IfStatement-expression, ),
"
2309,"if (e.toString().toLowerCase().matches("".*(problem|failure)(s?) rebinding.*"")) {","if (e.toString().toLowerCase().matches("".*(problem|failure)(s?) rebinding.*"")) {
}
 else {
  throw Exceptions.propagate(e);
}
",4,4,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
2310,"if (exception instanceof UserFacingException && exception.toString().contains(""Passwords did not match"")) {","if (exception instanceof UserFacingException && exception.toString().contains(""Passwords did not match"")) {
}
 else {
  throw new Exception(exception);
}
",4,4,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
2311,else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {,"if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true)&& (true)) {
}
 else {
  throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
",5,30,9,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
BooleanLiteral(ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
2312,if ((old == null && str == null) || (old != null && old.equals(str))) {,"if ((old == null && str == null) || (old != null && old.equals(str))) {
}
 else {
  project.getAntProjectHelper().setLibrariesLocation(str);
  ProjectManager.getDefault().saveProject(project);
}
",5,9,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
2313,if (e instanceof InterruptedException || e.getCause() instanceof InterruptedException) {,"if (e instanceof InterruptedException || e.getCause() instanceof InterruptedException) {
}
 else {
  throw e;
}
",6,355,5,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
2314,if (key.indexOf('.') >= 0) {,"if (key.indexOf('.') >= 0) {
}
 else {
  Object value=manifestProps.getProperty(longkey);
  String vs="""";
  if (value == null)   LOG.warn(""Invalid value for key "" + longkey + "": null"");
 else   if (value instanceof Collection) {
    Iterator<?> vi=((Collection<?>)value).iterator();
    if (!vi.hasNext())     LOG.warn(""Invalid value for key "" + longkey + "": empty list"");
 else {
      vs+=vi.next();
      while (vi.hasNext())       vs+="", "" + vi.next();
    }
  }
 else {
    vs=value.toString();
  }
  manifest.attribs.put(key,vs);
}
",7,7,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
2315,"} else if (""Value number"".equals(annotation.type)) {","if (""Value number"".equals(annotation.type)) {
}
 else if (""Value unit"".equals(annotation.type)) {
}
 else if (""allergy_indicator_class"".equals(annotation.type)) {
  String value=stringSlots.remove(""allergy_indicator_normalization"");
  MedicationAllergyModifier modifier=new MedicationAllergyModifier(jCas,coveringSpan.begin,coveringSpan.end);
  if (null == value) {
    modifier.setIndicated(false);
  }
 else   if (""indicator_present"".equals(value)) {
    modifier.setIndicated(true);
  }
 else   if (""indicator_absent"".equals(value)) {
    modifier.setIndicated(false);
  }
 else {
    LOGGER.error(String.format(""unrecognized allergy-indicator value \""%s\"" on annotation with id \""%s\"""",value,annotation.id));
  }
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Dosage"".equals(annotation.type)) {
  String value=stringSlots.remove(""dosage_values"");
  MedicationDosage attribute=new MedicationDosage(jCas);
  attribute.setValue(value);
  attribute.addToIndexes();
  MedicationDosageModifier modifier=new MedicationDosageModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Duration"".equals(annotation.type)) {
  String value=stringSlots.remove(""duration_values"");
  MedicationDuration attribute=new MedicationDuration(jCas);
  attribute.setValue(value);
  attribute.addToIndexes();
  MedicationDurationModifier modifier=new MedicationDurationModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Form"".equals(annotation.type)) {
  String value=stringSlots.remove(""form_values"");
  MedicationForm attribute=new MedicationForm(jCas);
  attribute.setValue(value);
  attribute.addToIndexes();
  MedicationFormModifier modifier=new MedicationFormModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Frequency"".equals(annotation.type)) {
  KnowtatorAnnotation unit=annotationSlots.remove(""frequency_unit"");
  KnowtatorAnnotation number=annotationSlots.remove(""frequency_number"");
  MedicationFrequency attribute=new MedicationFrequency(jCas);
  if (unit != null) {
    String unitString=unit.stringSlots.get(""frequency_unit_values"");
    attribute.setUnit(unitString);
  }
  if (number != null) {
    String numberString=number.stringSlots.get(""frequency_number_normalization"");
    attribute.setNumber(numberString);
  }
  attribute.addToIndexes();
  MedicationFrequencyModifier modifier=new MedicationFrequencyModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Frequency number"".equals(annotation.type)) {
  stringSlots.remove(""frequency_number_normalization"");
}
 else if (""Frequency unit"".equals(annotation.type)) {
  stringSlots.remove(""frequency_unit_values"");
}
 else if (""Route"".equals(annotation.type)) {
  String value=stringSlots.remove(""route_values"");
  MedicationRoute attribute=new MedicationRoute(jCas);
  attribute.setValue(value);
  attribute.addToIndexes();
  MedicationRouteModifier modifier=new MedicationRouteModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Status change"".equals(annotation.type)) {
  String value=stringSlots.remove(""change_status_value"");
  MedicationStatusChange attribute=new MedicationStatusChange(jCas);
  attribute.setValue(value);
  attribute.addToIndexes();
  MedicationStatusChangeModifier modifier=new MedicationStatusChangeModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Strength"".equals(annotation.type)) {
  KnowtatorAnnotation unit=annotationSlots.remove(""strength_unit"");
  KnowtatorAnnotation number=annotationSlots.remove(""strength_number"");
  MedicationStrength attribute=new MedicationStrength(jCas);
  if (unit != null) {
    KnowtatorAnnotation.Span unitSpan=unit.getCoveringSpan();
    String unitString=text.substring(unitSpan.begin,unitSpan.end);
    attribute.setUnit(unitString);
  }
  if (number != null) {
    KnowtatorAnnotation.Span numberSpan=number.getCoveringSpan();
    String numberString=text.substring(numberSpan.begin,numberSpan.end);
    attribute.setNumber(numberString);
  }
  attribute.addToIndexes();
  MedicationStrengthModifier modifier=new MedicationStrengthModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Strength number"".equals(annotation.type)) {
}
 else if (""Strength unit"".equals(annotation.type)) {
}
 else if (""device_class"".equals(annotation.type)) {
  String code=stringSlots.remove(""associatedCode"");
  ProcedureDevice attribute=new ProcedureDevice(jCas);
  attribute.setValue(code);
  ProcedureDeviceModifier modifier=new ProcedureDeviceModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""method_class"".equals(annotation.type)) {
  String code=stringSlots.remove(""associatedCode"");
  ProcedureMethod attribute=new ProcedureMethod(jCas);
  attribute.setValue(code);
  ProcedureMethodModifier modifier=new ProcedureMethodModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""severity_class"".equals(annotation.type)) {
  Severity attribute=new Severity(jCas);
  attribute.setValue(stringSlots.remove(""severity_normalization""));
  attribute.addToIndexes();
  SeverityModifier modifier=new SeverityModifier(jCas,coveringSpan.begin,coveringSpan.end);
  modifier.setTypeID(CONST.MODIFIER_TYPE_ID_SEVERITY_CLASS);
  modifier.setNormalizedForm(attribute);
  modifier.addToIndexes();
  idAnnotationMap.put(annotation.id,modifier);
}
 else if (""Date"".equals(annotation.type)) {
  String month=stringSlots.remove(""month"");
  String day=stringSlots.remove(""day"");
  Date date=new Date(jCas);
  date.setMonth(month);
  date.setDay(day);
  date.addToIndexes();
  TimeMention mention=new TimeMention(jCas,coveringSpan.begin,coveringSpan.end);
  mention.setDate(date);
  mention.addToIndexes();
  idAnnotationMap.put(annotation.id,mention);
}
 else {
  LOGGER.info(String.format(""unrecognized type '%s' for annotation with id \""%s\"""",annotation.type,annotation.id));
}
",7,7,3,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, IfStatement-expression, ),
"
2316,"(cm = ""C:\\WINDOWS\\system32\\cmd.exe"")).exists()) {","if (new java.io.File((cm=""C:\\WINDOWS\\system32\\cmd.exe"")).exists()) {
}
 else {
  cm=""cmd.exe"";
  System.out.println(""### WARNING: cmd.exe hasn't been found! Please, set the path to cmd.exe via java.library.path property."");
}
",7,7,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ),
StringLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, ),
SimpleName(),
"
2317,} else if ((this.name == null) && (epr.getName() == null)) {,"if ((this.name == null) && (epr.getName() == null)) {
}
 else {
  return false;
}
",10,28,6,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
2318,} else if ( ((TypeNode)parent).getObjectType() == IItemTypeConstants.ITEM_TYPE_LABEL_FEATURES ) {,"if (((TypeNode)parent).getObjectType() == IItemTypeConstants.ITEM_TYPE_LABEL_FEATURES) {
}
 else {
  if (((TypeNode)parent).getChildren() != null) {
    return ((TypeNode)parent).getChildrenArray();
  }
}
",11,11,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
2319,if(src.getException()!=null&&src.getException() instanceof NamingException){,"if (src.getException() != null && src.getException() instanceof NamingException) {
}
 else {
  fail(""The exception must be like NamingException"");
}
",21,30,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
