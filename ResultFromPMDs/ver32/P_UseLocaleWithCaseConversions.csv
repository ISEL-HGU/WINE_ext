Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"return startElement(name, namespace).writeAttribute(""type"", type != null ? type.name().toLowerCase() : ""text"");","return startElement(name,namespace).writeAttribute(""type"",type != null ? type.name().toLowerCase() : ""text"");
",0,633,11,23170,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
2,"assertTrue(rte.getMessage().contains(""The maximum name size for the "" + storeType.name().toLowerCase() + "" store table, when using Oracle12C is 30 characters.""));","assertTrue(rte.getMessage().contains(""The maximum name size for the "" + storeType.name().toLowerCase() + "" store table, when using Oracle12C is 30 characters.""));
",0,1694,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
3,"template = template.replaceAll(""\\Q{"" + var.name().toLowerCase() + ""}\\E"", rep);","template=template.replaceAll(""\\Q{"" + var.name().toLowerCase() + ""}\\E"",rep);
",0,1751,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
4,"String service = params.getOptions().get(""service."" + ctype.name().toLowerCase());","String service=params.getOptions().get(""service."" + ctype.name().toLowerCase());
",0,51,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
5,qry = ((BoundStatement)statement).preparedStatement().getQueryString().trim().toLowerCase();,"qry=((BoundStatement)statement).preparedStatement().getQueryString().trim().toLowerCase();
",0,70,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
6,"return String.format(""%s_%s"", this.internal.getTable(),this.internal.getPrefix()).toLowerCase();","return String.format(""%s_%s"",this.internal.getTable(),this.internal.getPrefix()).toLowerCase();
",0,102,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
7,"this.setAttributeValue(OpenSearchConstants.QUERY_ROLE_LN, role.name().toLowerCase());","this.setAttributeValue(OpenSearchConstants.QUERY_ROLE_LN,role.name().toLowerCase());
",0,3,6,,"ThisExpression(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
8,Parser parser = (T)((name != null) ? getParsers().get(name.toLowerCase()) : getParser());,"Parser parser=(T)((name != null) ? getParsers().get(name.toLowerCase()) : getParser());
",0,43,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
9,return (T)((name != null) ? getWriters().get(name.toLowerCase()) : getWriter());,"return (T)((name != null) ? getWriters().get(name.toLowerCase()) : getWriter());
",0,27,8,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
"
10,"this.action = SagaEndpointAction.valueOf(ObjectHelper.notNull(action, ""action"").toUpperCase());","this.action=SagaEndpointAction.valueOf(ObjectHelper.notNull(action,""action"").toUpperCase());
",0,243,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
11,"EasyMock.expect(sysConfig.getCustom(""volume.preferred."" + Scope.DEFAULT.name().toLowerCase()))","EasyMock.expect(sysConfig.getCustom(""volume.preferred."" + Scope.DEFAULT.name().toLowerCase())).andReturn(String.join("","",tableDirs)).times(timesToCallPreferredVolumeChooser);
",0,279,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
"
12,"return template.count(query(where(""pageType"").is(PageType.PERSON_PROFILE.toString().toUpperCase()).andOperator(where(""ownerId"").is(userId)))) > 0;","return template.count(query(where(""pageType"").is(PageType.PERSON_PROFILE.toString().toUpperCase()).andOperator(where(""ownerId"").is(userId)))) > 0;
",0,204,15,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
13,"outputFile = (project.getBuild().getDirectory() + ""/generated/"" + payload.toLowerCase() + ""/"" + name + "".""","outputFile=(project.getBuild().getDirectory() + ""/generated/"" + payload.toLowerCase()+ ""/""+ name+ "".""+ payload.toLowerCase()).replace(""/"",File.separator);
",0,22,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
14,"if (bits == 64 && !System.getProperty(""os.name"").toLowerCase().contains(""windows"")","if (bits == 64 && !System.getProperty(""os.name"").toLowerCase().contains(""windows"") && !SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9)) {
  argumentList.add(""-d64"");
}
",0,635,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
15,"Function<String,String> toLower = x -> x == null ? null : x.toLowerCase();","Function<String,String> toLower=x -> x == null ? null : x.toLowerCase();
",0,13,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
16,"TimeUnit timeUnit = TimeUnit.valueOf(config.getString(Segment.TIME_UNIT, ""DAYS"").toUpperCase());","TimeUnit timeUnit=TimeUnit.valueOf(config.getString(Segment.TIME_UNIT,""DAYS"").toUpperCase());
",0,127,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
17,"return CACHE_PROPERTY_BASE + prefix + ""."" + type.name().toLowerCase() + ""."";","return CACHE_PROPERTY_BASE + prefix + "".""+ type.name().toLowerCase()+ ""."";
",0,4,7,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
18,"return DatabaseMode.valueOf(getProperty(OdeConfigProperties.PROP_DB_MODE, DatabaseMode.EMBEDDED.toString()).trim()","return DatabaseMode.valueOf(getProperty(OdeConfigProperties.PROP_DB_MODE,DatabaseMode.EMBEDDED.toString()).trim().toUpperCase());
",0,11,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
19,"firewall = fWaaSApi.create(CreateFirewall.builder().name(String.format(""jclouds-test-%s-fw"", this.getClass().getCanonicalName().toLowerCase()))","firewall=fWaaSApi.create(CreateFirewall.builder().name(String.format(""jclouds-test-%s-fw"",this.getClass().getCanonicalName().toLowerCase())).description(""jclouds test firewall"").firewallPolicyId(firewallPolicy.getId()).build());
",0,118,13,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
20,"persistMasterKey = args[2].toLowerCase().equals(""true"");","persistMasterKey=args[2].toLowerCase().equals(""true"");
",0,10,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
21,final Field f = featuresClass.getField(FEATURE_FIELD_PREFIX + convertToUnderscore(annotation.name()).toUpperCase());,"final Field f=featuresClass.getField(FEATURE_FIELD_PREFIX + convertToUnderscore(annotation.name()).toUpperCase());
",0,19,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
22,"fileName = schRequest.getClusterName() + ""("" + Resource.InternalType.Cluster.toString().toUpperCase()+"")"";","fileName=schRequest.getClusterName() + ""("" + Resource.InternalType.Cluster.toString().toUpperCase()+ "")"";
",0,7,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
23,if (routingType != null && routingType.length() > 1 && queueControl.getRoutingType().equals(routingType.toUpperCase())) {,"if (routingType != null && routingType.length() > 1 && queueControl.getRoutingType().equals(routingType.toUpperCase())) {
  names.add(queueControl.getName());
}
 else if (routingType == null || routingType.isEmpty()) {
  names.add(queueControl.getName());
}
",0,46,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
24,"if (request.getContentLength() != 0 && (request.getContentType() == null || !request.getContentType().toLowerCase().startsWith(""application/x-www-form-urlencoded""))) {","if (request.getContentLength() != 0 && (request.getContentType() == null || !request.getContentType().toLowerCase().startsWith(""application/x-www-form-urlencoded""))) {
  try {
    Destination destination=getDestination(client,request);
    String body=getPostedMessageBody(request);
    TextMessage message=client.getSession().createTextMessage(body);
    appendParametersToMessage(request,message);
    client.send(destination,message);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Sent to destination: "" + destination + "" body: ""+ body);
    }
    messageIds+=message.getJMSMessageID() + ""\n"";
  }
 catch (  JMSException e) {
    throw new ServletException(e);
  }
}
",0,118,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
25,builder.priority(Message.Priority.valueOf(payload.get(priorityKey).toString().toUpperCase()));,"builder.priority(Message.Priority.valueOf(payload.get(priorityKey).toString().toUpperCase()));
",0,34,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
26,"name1 = Utils.convertToASCII(name1.replace(""/"", "" "").replace(""w/"", ""with "")).replace('!', ' ').toLowerCase();","name1=Utils.convertToASCII(name1.replace(""/"","" "").replace(""w/"",""with "")).replace('!',' ').toLowerCase();
",0,24,14,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
27,"result = prime * result + ((phoneContext == null) ? 0 : (isDomainPhoneContext ? phoneContext.toLowerCase().hashCode() : phoneContext.replaceAll(VISUAL_SEPARATORS, """").hashCode()));","result=prime * result + ((phoneContext == null) ? 0 : (isDomainPhoneContext ? phoneContext.toLowerCase().hashCode() : phoneContext.replaceAll(VISUAL_SEPARATORS,"""").hashCode()));
",0,31,15,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
28,values[idx] = (new String(fv.getValue())).toLowerCase();,"values[idx]=(new String(fv.getValue())).toLowerCase();
",0,14,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
29,(new String(field.getValue().iterator().next().getValue())).toLowerCase());,"ctx.set(field.getKey().toLowerCase(),(new String(field.getValue().iterator().next().getValue())).toLowerCase());
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
30,"return new ThemeResource(""icons/"" + iconName.toLowerCase() + "".png"");","return new ThemeResource(""icons/"" + iconName.toLowerCase() + "".png"");
",0,15,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
31,final String unitStr = value.substring(lastDigitIdx + 1).trim().toUpperCase();,"final String unitStr=value.substring(lastDigitIdx + 1).trim().toUpperCase();
",0,37,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
32,switch (duration.duration.value().toLowerCase().charAt(duration.duration.value().length() - 1)),"switch (duration.duration.value().toLowerCase().charAt(duration.duration.value().length() - 1)) {
case 's':
  this.durationUnits=TimeUnit.SECONDS;
break;
case 'm':
this.durationUnits=TimeUnit.MINUTES;
break;
case 'h':
this.durationUnits=TimeUnit.HOURS;
break;
case 'd':
this.durationUnits=TimeUnit.DAYS;
break;
default :
throw new IllegalStateException();
}
",0,221,8,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, SwitchStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, SwitchStatement-expression, ),
"
33,"Method m = getMethod(getMBeanInterface(), ""get"" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));","Method m=getMethod(getMBeanInterface(),""get"" + info.getName().substring(0,1).toUpperCase() + info.getName().substring(1));
",0,36,15,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
34,"String url = ""jdbc:drill:"" + mode.name().toLowerCase() + ""="" + host + "":"" + port;","String url=""jdbc:drill:"" + mode.name().toLowerCase() + ""=""+ host+ "":""+ port;
",0,12,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
35,"return (uri.toString().endsWith(""jar"") || scheme != null && scheme.toLowerCase().equals(""ivy""));","return (uri.toString().endsWith(""jar"") || scheme != null && scheme.toLowerCase().equals(""ivy""));
",0,6,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
36,"name += parts[i].substring(0, 1).toUpperCase() + parts[i].substring(1);","name+=parts[i].substring(0,1).toUpperCase() + parts[i].substring(1);
",0,76,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
37,"RoutingType routingType = RoutingType.valueOf((seg.length == 2 ? seg[1] : ""anycast"").toUpperCase());","RoutingType routingType=RoutingType.valueOf((seg.length == 2 ? seg[1] : ""anycast"").toUpperCase());
",0,33,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
38,"return System.getProperty(""os.name"", ""null"").toLowerCase().indexOf(""win"") >= 0;","return System.getProperty(""os.name"",""null"").toLowerCase().indexOf(""win"") >= 0;
",0,59,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
39,"String methodName = m + var.substring(0, 1).toUpperCase() + var.substring(1);","String methodName=m + var.substring(0,1).toUpperCase() + var.substring(1);
",0,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
40,"private BundlingMode bundlingMode = BundlingMode.valueOf(System.getProperty(""bundlingMode"", ""all"").toUpperCase());","private BundlingMode bundlingMode=BundlingMode.valueOf(System.getProperty(""bundlingMode"",""all"").toUpperCase());
",0,24,10,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
41,"Thread.getAllStackTraces().keySet().stream().filter(t -> t instanceof AutoCloseable && t.getName().toLowerCase().contains(""slot"")).forEach(t -> {","Thread.getAllStackTraces().keySet().stream().filter(t -> t instanceof AutoCloseable && t.getName().toLowerCase().contains(""slot"")).forEach(t -> {
  LOG.error(""Attempting to close thread: "" + t + "" with state: ""+ t.getState());
  try {
    t.stop();
    LOG.error(""Called thread.stop() on {}. State is: {}"",t.getName(),t.getState());
  }
 catch (  Exception e) {
  }
}
);
",0,17,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
42,"assertEquals(factor[i] * size[j], ByteUtil.convertTextBytes(factor[i] + type[j].toUpperCase() + ""B""));","assertEquals(factor[i] * size[j],ByteUtil.convertTextBytes(factor[i] + type[j].toUpperCase() + ""B""));
",0,8,13,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
43,"assertEquals(factor[i] * size[j], ByteUtil.convertTextBytes(factor[i] + "" "" + type[j].toUpperCase() + ""B""));","assertEquals(factor[i] * size[j],ByteUtil.convertTextBytes(factor[i] + "" "" + type[j].toUpperCase()+ ""B""));
",0,1,14,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
44,"return ObjectName.getInstance(String.format(""%s,component=addresses,address=%s,subcomponent=queues,routing-type=%s,queue=%s"", getActiveMQServerName(), ObjectName.quote(address.toString()), ObjectName.quote(routingType.toString().toLowerCase()), ObjectName.quote(name.toString())));","return ObjectName.getInstance(String.format(""%s,component=addresses,address=%s,subcomponent=queues,routing-type=%s,queue=%s"",getActiveMQServerName(),ObjectName.quote(address.toString()),ObjectName.quote(routingType.toString().toLowerCase()),ObjectName.quote(name.toString())));
",0,2,19,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
45,"return getRetroactiveResourceName(prefix, delimiter, address, trimLastCharacter(QUEUE).concat(delimiter).concat(routingType.toString().toLowerCase()));","return getRetroactiveResourceName(prefix,delimiter,address,trimLastCharacter(QUEUE).concat(delimiter).concat(routingType.toString().toLowerCase()));
",0,5,12,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
46,if (line.contains(new String(Long.toString(Long.MAX_VALUE / (1024 * 1024)))) && line.contains(limitsLogLevel.toUpperCase())) {,"if (line.contains(new String(Long.toString(Long.MAX_VALUE / (1024 * 1024)))) && line.contains(limitsLogLevel.toUpperCase())) {
  foundUsage=true;
}
",0,6,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
47,"out.println(""            return "" + jclass.getSimpleName() + "".ID_"" + jclass.getSimpleName().toUpperCase() + "";"");","out.println(""            return "" + jclass.getSimpleName() + "".ID_""+ jclass.getSimpleName().toUpperCase()+ "";"");
",0,4,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
48,"this.appId = String.format(""%s_%s"", this.getDescriptor().getType(), this.getSite().getSiteId()).toUpperCase();","this.appId=String.format(""%s_%s"",this.getDescriptor().getType(),this.getSite().getSiteId()).toUpperCase();
",0,11,12,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
49,if (String.valueOf(entity.getAttribute(ATTRIBUTE_QUERY_TEXT)).equals(event.getQueryStr().toLowerCase().trim())) {,"if (String.valueOf(entity.getAttribute(ATTRIBUTE_QUERY_TEXT)).equals(event.getQueryStr().toLowerCase().trim())) {
  guid=entity.getGuid();
}
",0,16,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
50,"final Action action = Action.valueOf(data.getOrDefault(ACTION, DEFAULT_ACTION.name()).toString().toUpperCase());","final Action action=Action.valueOf(data.getOrDefault(ACTION,DEFAULT_ACTION.name()).toString().toUpperCase());
",0,62,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
51,order = SortRequest.Order.valueOf(property.substring(idx + 1).toUpperCase());,"order=SortRequest.Order.valueOf(property.substring(idx + 1).toUpperCase());
",0,21,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
52,"expect(template.findOne(new Query(where(""pageType"").is(pageType.getPageType().toUpperCase()).andOperator(where(""defaultTemplate"").is(true))))).andReturn(found);","expect(template.findOne(new Query(where(""pageType"").is(pageType.getPageType().toUpperCase()).andOperator(where(""defaultTemplate"").is(true))))).andReturn(found);
",0,192,17,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
53,if (NotAllowedOnBindings.containsKey(items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey().toLowerCase())) {,"if (NotAllowedOnBindings.containsKey(items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey().toLowerCase())) {
  throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"",xpath + ""("" + i+ "").catbag.keyedReferenceGroup(""+ k+ "").keyedReference(""+ j+ "").tModel ""+ ""Value [""+ items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey()+ ""] not allowed on bindingtemplates for key ""+ key));
}
",0,10,14,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
54,return (value == null) ? null : value.name().toLowerCase();,"return (value == null) ? null : value.name().toLowerCase();
",0,12,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
55,"return !Optional.of(((GetObjectResponse) s3Object.response()).contentType()).orElse("""")","return !Optional.of(((GetObjectResponse)s3Object.response()).contentType()).orElse("""").toLowerCase().startsWith(""application/x-directory"");
",0,81,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
"
56,"CredentialStoreType type = Enums.getIfPresent(CredentialStoreType.class, typeString.toUpperCase()).orNull();","CredentialStoreType type=Enums.getIfPresent(CredentialStoreType.class,typeString.toUpperCase()).orNull();
",0,4,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
57,boolean b = Boolean.valueOf(expr.trim().toLowerCase()).booleanValue() ^ negate;,"boolean b=Boolean.valueOf(expr.trim().toLowerCase()).booleanValue() ^ negate;
",0,27,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
58,"return template.findOne(new Query(where(""pageType"").is(pageType.toUpperCase()).andOperator(where(""defaultTemplate"").is(true))));","return template.findOne(new Query(where(""pageType"").is(pageType.toUpperCase()).andOperator(where(""defaultTemplate"").is(true))));
",0,19,13,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
59,"return (""cluster."" + clusterName + ""."").toLowerCase();","return (""cluster."" + clusterName + ""."").toLowerCase();
",0,0,4,,"StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
60,return (clusterName == null) || canonicalizedAlias.toLowerCase().startsWith(createAliasPrefix(clusterName));,"return (clusterName == null) || canonicalizedAlias.toLowerCase().startsWith(createAliasPrefix(clusterName));
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
61,bdaInfo.setBeanDiscoveryMode(beanDiscoveryMode != null ? BeanDiscoveryMode.valueOf(beanDiscoveryMode.toUpperCase()) : null);,"bdaInfo.setBeanDiscoveryMode(beanDiscoveryMode != null ? BeanDiscoveryMode.valueOf(beanDiscoveryMode.toUpperCase()) : null);
",0,4,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
62,if (startsWith != null && !typeName.substring(typeName.lastIndexOf('.') + 1).toLowerCase(),"if (startsWith != null && !typeName.substring(typeName.lastIndexOf('.') + 1).toLowerCase().startsWith(startsWith.toLowerCase())) {
  continue;
}
",0,71,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
63,return (namedNode != null) ? Schema.Allowance.valueOf(namedNode.asText().toUpperCase()) : Schema.Allowance.CAN;,"return (namedNode != null) ? Schema.Allowance.valueOf(namedNode.asText().toUpperCase()) : Schema.Allowance.CAN;
",0,2,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
QualifiedName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
64,"return file.isFolder() || (""js"".equals(file.getExt().toLowerCase()) && file.getName().startsWith(prefix));","return file.isFolder() || (""js"".equals(file.getExt().toLowerCase()) && file.getName().startsWith(prefix));
",0,5,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
65,"String seqName = new String(entityName + ""_id_seq"").toLowerCase();","String seqName=new String(entityName + ""_id_seq"").toLowerCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
66,"return (idx == -1 ? contentType : contentType.substring(0, idx)).trim().toLowerCase();","return (idx == -1 ? contentType : contentType.substring(0,idx)).trim().toLowerCase();
",0,15,9,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
67,expect(cluster.getServiceComponentHosts(InetAddress.getLocalHost().getCanonicalHostName().toLowerCase())),"expect(cluster.getServiceComponentHosts(InetAddress.getLocalHost().getCanonicalHostName().toLowerCase())).andReturn(new ArrayList<>()).anyTimes();
",0,0,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
"
68,"assertEquals(""missing"", requestPropertyMap.get(KerberosHelperImpl.SupportedCustomOperation.REGENERATE_KEYTABS.name().toLowerCase()));","assertEquals(""missing"",requestPropertyMap.get(KerberosHelperImpl.SupportedCustomOperation.REGENERATE_KEYTABS.name().toLowerCase()));
",0,4,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
69,"assertEquals(""Bob"", map.get(""name"".toUpperCase()));","assertEquals(""Bob"",map.get(""name"".toUpperCase()));
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
70,for (String line: lines) { replaced.add(line.toLowerCase()); },"for (String line : lines) {
  replaced.add(line.toLowerCase());
}
",0,0,7,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, EnhancedForStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, EnhancedForStatement-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, EnhancedForStatement-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, EnhancedForStatement-body, ),
"
71,"expect(users.createUser(TEST_USER_NAME, TEST_USER_NAME.toLowerCase(), TEST_USER_NAME, true)).andReturn(userEntity).once();","expect(users.createUser(TEST_USER_NAME,TEST_USER_NAME.toLowerCase(),TEST_USER_NAME,true)).andReturn(userEntity).once();
",0,0,11,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
72,"servletRequestAttributes.setAttribute(eq(ambariUsername), eq(forceUsernameToLower ? ldapUsername.toLowerCase() : ldapUsername), eq(RequestAttributes.SCOPE_SESSION));","servletRequestAttributes.setAttribute(eq(ambariUsername),eq(forceUsernameToLower ? ldapUsername.toLowerCase() : ldapUsername),eq(RequestAttributes.SCOPE_SESSION));
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
73,"Shuffle.Type type = Shuffle.Type.valueOf(jsonNode.get(""type"").asText().toUpperCase());","Shuffle.Type type=Shuffle.Type.valueOf(jsonNode.get(""type"").asText().toUpperCase());
",0,14,9,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
74,"Firewall updatedFirewall = fWaaSApi.update(firewall.getId(), UpdateFirewall.builder().name(String.format(""jclouds-test-%s-fw_updated"", this.getClass()","Firewall updatedFirewall=fWaaSApi.update(firewall.getId(),UpdateFirewall.builder().name(String.format(""jclouds-test-%s-fw_updated"",this.getClass().getCanonicalName().toLowerCase())).build());
",0,19,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
75,"assertThat(layout.toLowerCase().contains(""%d{iso8601}""), is(true));","assertThat(layout.toLowerCase().contains(""%d{iso8601}""),is(true));
",0,0,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
76,"this.clazz = ""bi-"" + name().toLowerCase().replaceAll(""_"", ""-"");","this.clazz=""bi-"" + name().toLowerCase().replaceAll(""_"",""-"");
",0,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
77,String entityQueryText = String.valueOf(processExecutionEntity.getAttribute(ATTRIBUTE_QUERY_TEXT)).toLowerCase().trim();,"String entityQueryText=String.valueOf(processExecutionEntity.getAttribute(ATTRIBUTE_QUERY_TEXT)).toLowerCase().trim();
",0,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
78,"level.setName(("""" + levelPivot.getValue()).toUpperCase());","level.setName(("""" + levelPivot.getValue()).toUpperCase());
",0,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
79,"try (InputStream inputStream = classLoader.getResourceAsStream(""metrics_def/"" + appId.toUpperCase() + "".dat"")) {","try (InputStream inputStream=classLoader.getResourceAsStream(""metrics_def/"" + appId.toUpperCase() + "".dat"")){
  if (inputStream != null) {
    bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
    LOG.info(""Found split point candidate metrics for : "" + appId);
    while ((strLine=bufferedReader.readLine()) != null) {
      metricList.add(new MetricApp(strLine.trim(),appId));
    }
  }
 else {
    LOG.info(""Split point candidate metrics not found for : "" + appId);
  }
}
 catch (Exception e) {
  LOG.info(""Error reading split point candidate metrics for component : "" + component);
  LOG.error(e);
}
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
80,"String path = basePath.replace(resource, ""locales/"" + locale.toLanguageTag().toLowerCase() + ""/"" + resource);","String path=basePath.replace(resource,""locales/"" + locale.toLanguageTag().toLowerCase() + ""/""+ resource);
",0,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
81,final String s = isCaseSensitive() ? pattern : pattern.toUpperCase();,"final String s=isCaseSensitive() ? pattern : pattern.toUpperCase();
",0,0,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
82,"String pattern = new File(File.separator).getAbsolutePath().toUpperCase() + ""*"";","String pattern=new File(File.separator).getAbsolutePath().toUpperCase() + ""*"";
",0,3,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
83,"assertEquals(new File(""test/repositories/ivysettings.xml"").toURI().toURL().toExternalForm()","assertEquals(new File(""test/repositories/ivysettings.xml"").toURI().toURL().toExternalForm().toUpperCase(),settings.getVariables().getVariable(""ivy.settings.url"").toUpperCase());
",0,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
84,"new File(settings.getVariables().getVariable(""ivy.settings.file"")).getAbsolutePath()","assertEquals(new File(""test/repositories/ivysettings.xml"").getAbsolutePath().toUpperCase(),new File(settings.getVariables().getVariable(""ivy.settings.file"")).getAbsolutePath().toUpperCase());
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
"
85,return HttpUtil.getPreferredCharset((IServletRequest) charsetObject).name().toLowerCase();,"return HttpUtil.getPreferredCharset((IServletRequest)charsetObject).name().toLowerCase();
",0,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
86,"postfix = StringUtils.substringAfterLast( info.version, ""."" ).toLowerCase( );","postfix=StringUtils.substringAfterLast(info.version,""."").toLowerCase();
",0,4,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
87,mime = (String)theMimeTypes.get( f.getCanonicalPath().substring( dot + 1 ).toLowerCase());,"mime=(String)theMimeTypes.get(f.getCanonicalPath().substring(dot + 1).toLowerCase());
",0,11,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
88,"this.isSecure = uriInfo!=null && uriInfo.getAbsolutePath().toString().toLowerCase().startsWith(""https"");","this.isSecure=uriInfo != null && uriInfo.getAbsolutePath().toString().toLowerCase().startsWith(""https"");
",0,2,10,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
89,"return !""no"".equals( System.getProperty( SYSPROP_START_SERVER, ""yes"" ).toLowerCase( ) );","return !""no"".equals(System.getProperty(SYSPROP_START_SERVER,""yes"").toLowerCase());
",0,1,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ReturnStatement-expression, ),
"
90,"result.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, result.get(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE.toLowerCase()));","result.put(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE,result.get(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE.toLowerCase()));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
91,"sb.append(String.format(""%s %.3f\n"", k.sequence.toUpperCase(), (float)(k.count) * 100.0f / (double)sum));","sb.append(String.format(""%s %.3f\n"",k.sequence.toUpperCase(),(float)(k.count) * 100.0f / (double)sum));
",0,1,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
92,if (attNameAndVal.length == 2 && attNameAndVal[0].toLowerCase().trim().equals(attributeName)) {,"if (attNameAndVal.length == 2 && attNameAndVal[0].toLowerCase().trim().equals(attributeName)) {
  Boolean value=allowedValues.get(attNameAndVal[1].toLowerCase().trim());
  if (value == null) {
    throw new RuntimeDataException(ErrorCode.INVALID_REQ_PARAM_VAL,attributeName,attNameAndVal[1]);
  }
  return value.booleanValue();
}
",0,2,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
93,"throw new RuntimeDataException(ACTIVE_ENTITY_NOT_RUNNING, runtimeName, String.valueOf(state).toLowerCase());","throw new RuntimeDataException(ACTIVE_ENTITY_NOT_RUNNING,runtimeName,String.valueOf(state).toLowerCase());
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
94,return column -> StringUtils.capitalize(column.name().toLowerCase());,"return column -> StringUtils.capitalize(column.name().toLowerCase());
",0,5,6,,"SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ReturnStatement-expression, ),
"
95,"out.println(""  "" + name.toLowerCase() + padding.toString() + "" : "" + usage);","out.println(""  "" + name.toLowerCase() + padding.toString()+ "" : ""+ usage);
",0,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
96,mode = configuration.get(KEY_MODE) != null ? Mode.valueOf(configuration.get(KEY_MODE).toUpperCase()),"mode=configuration.get(KEY_MODE) != null ? Mode.valueOf(configuration.get(KEY_MODE).toUpperCase()) : Mode.AGGRESSIVE;
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
97,StringBuilder sb = new StringBuilder(words[0].toUpperCase());,"StringBuilder sb=new StringBuilder(words[0].toUpperCase());
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
98,"sb.append(""`"").append(path[i].toLowerCase()).append(""`"").append(""."");","sb.append(""`"").append(path[i].toLowerCase()).append(""`"").append(""."");
",0,8,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
99,"return this == DATASET ? dataset() + "" (or view)"" : name().toLowerCase();","return this == DATASET ? dataset() + "" (or view)"" : name().toLowerCase();
",0,1,6,,"ThisExpression(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
100,"primitiveTypeMap.put(f.getName().toUpperCase(), (IAType) f.get(null));","primitiveTypeMap.put(f.getName().toUpperCase(),(IAType)f.get(null));
",0,4,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
101,"return ""."" + types[0].name().toLowerCase() + "".drill"";","return ""."" + types[0].name().toLowerCase() + "".drill"";
",0,2,6,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
102,"calendar.set(Calendar.MONTH, monthValueMap.get(String.valueOf(month).toLowerCase()).ordinal());","calendar.set(Calendar.MONTH,monthValueMap.get(String.valueOf(month).toLowerCase()).ordinal());
",0,5,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
103,".matcher(WordUtils.capitalize(""z"" + s.toLowerCase(), '_', '-', ' ').substring(1)).replaceAll(""""));","return CAMEL_CACHE.computeIfAbsent(input,s -> SEPARATORS_PATTERN.matcher(WordUtils.capitalize(""z"" + s.toLowerCase(),'_','-',' ').substring(1)).replaceAll(""""));
",0,0,13,,"SimpleName(),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NumberLiteral(MethodInvocation-arguments, ),
SimpleName(),
StringLiteral(),
"
104,"String dataValue = ((_obj.get(randomIndex) != null)?_obj.get(randomIndex).toString().trim().replace(""\"""", """").toLowerCase():null);","String dataValue=((_obj.get(randomIndex) != null) ? _obj.get(randomIndex).toString().trim().replace(""\"""","""").toLowerCase() : null);
",0,9,16,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
105,return (table.getDbName() + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + getMetadataNamespace();,"return (table.getDbName() + QNAME_SEP_ENTITY_NAME + tableName+ QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + getMetadataNamespace();
",0,5,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
106,boolean skipTable = StringUtils.isNotEmpty(context.getIgnoreValuesTmpTableNamePrefix()) && tableName.toLowerCase().startsWith(context.getIgnoreValuesTmpTableNamePrefix());,"boolean skipTable=StringUtils.isNotEmpty(context.getIgnoreValuesTmpTableNamePrefix()) && tableName.toLowerCase().startsWith(context.getIgnoreValuesTmpTableNamePrefix());
",0,1,11,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
107,"return tblQualifiedName.substring(0, sepPos) + QNAME_SEP_ENTITY_NAME + column.getName().toLowerCase() + tblQualifiedName.substring(sepPos);","return tblQualifiedName.substring(0,sepPos) + QNAME_SEP_ENTITY_NAME + column.getName().toLowerCase()+ tblQualifiedName.substring(sepPos);
",0,3,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
108,"rb.forType(SamplerType.valueOf(sampler), ""Frequency of "" + sampler.toLowerCase().replaceAll(""_"", "" "") + "" by partition"")","rb.forType(SamplerType.valueOf(sampler),""Frequency of "" + sampler.toLowerCase().replaceAll(""_"","" "") + "" by partition"").addColumn(""Table"",""table"").addColumn(""Partition"",""value"").addColumn(""Count"",""count"").addColumn(""+/-"",""error"").print(probe.output().out);
",0,3,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
"
109,"builder.addItem(node.get(PLC_NODE_NAME), node.get(PLC_NODE_NAME) + "":"" + node.get(PLC_NODE_TYPE).toUpperCase());","builder.addItem(node.get(PLC_NODE_NAME),node.get(PLC_NODE_NAME) + "":"" + node.get(PLC_NODE_TYPE).toUpperCase());
",0,3,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
110,"return Mode.valueOf(destinationCfg.getProp(modeKey, Mode.POST_RECORDS.name()).toUpperCase());","return Mode.valueOf(destinationCfg.getProp(modeKey,Mode.POST_RECORDS.name()).toUpperCase());
",0,2,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
111,String tableQualifiedName = (fullTableName + AtlasImpalaHookContext.QNAME_SEP_METADATA_NAMESPACE).toLowerCase() +,"String tableQualifiedName=(fullTableName + AtlasImpalaHookContext.QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + CLUSTER_NAME;
",0,0,5,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
112,String      bucketQualifiedName = (path.toUri().getScheme() + SCHEME_SEPARATOR + path.toUri().getAuthority() + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;,"String bucketQualifiedName=(path.toUri().getScheme() + SCHEME_SEPARATOR + path.toUri().getAuthority()+ QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;
",0,6,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
113,"columns.add(String.format(""%s %s"", column.getName(), convertToSiddhiAttributeType(column.getType()).toString().toLowerCase()));","columns.add(String.format(""%s %s"",column.getName(),convertToSiddhiAttributeType(column.getType()).toString().toLowerCase()));
",0,5,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
114,"this.setStorageType(String.format(""%s (%s)"", storageType.substring(0, 1).toUpperCase() + storageType.substring(1), volumeType));","this.setStorageType(String.format(""%s (%s)"",storageType.substring(0,1).toUpperCase() + storageType.substring(1),volumeType));
",0,6,14,,"ThisExpression(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
115,this.state    = state == null ? EntityState.ACTIVE : EntityState.valueOf(state.toUpperCase());,"this.state=state == null ? EntityState.ACTIVE : EntityState.valueOf(state.toUpperCase());
",0,0,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
116,Object[] matchedSemanticArray = semanticList.stream().filter(str -> str.trim().contains(trimmedChunkString.toUpperCase())).toArray();,"Object[] matchedSemanticArray=semanticList.stream().filter(str -> str.trim().contains(trimmedChunkString.toUpperCase())).toArray();
",0,13,13,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
117,"fieldLowerCaseUpperCaseMap.put(name.toLowerCase() + metricName, StringUtils.capitalize(name));","fieldLowerCaseUpperCaseMap.put(name.toLowerCase() + metricName,StringUtils.capitalize(name));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
118,"return APEX_PREFIX + getSimpleName().replaceAll(""_"",""."").toLowerCase();","return APEX_PREFIX + getSimpleName().replaceAll(""_"",""."").toLowerCase();
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
119,if (oci.comment != null && oci.comment.toLowerCase().contains(searchTerm)) {,"if (oci.comment != null && oci.comment.toLowerCase().contains(searchTerm)) {
  result.add(clazz);
}
 else {
  for (  Map.Entry<String,String> entry : oci.tags.entrySet()) {
    if (entry.getValue().toLowerCase().contains(searchTerm)) {
      result.add(clazz);
      break;
    }
  }
}
",0,0,6,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
120,"long seekTo = consumer.initialOffset.toLowerCase().equals(""earliest"") ? OffsetRequest.EarliestTime()","long seekTo=consumer.initialOffset.toLowerCase().equals(""earliest"") ? OffsetRequest.EarliestTime() : OffsetRequest.LatestTime();
",0,0,8,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
121,"javaType = memsqlType.substring(0, memsqlType.indexOf('(')).toUpperCase();","javaType=memsqlType.substring(0,memsqlType.indexOf('(')).toUpperCase();
",0,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
122,sb.append(f.getName() + FIELD_SEPARATOR + f.getName() + FIELD_SEPARATOR + c.getSimpleName().toUpperCase(),"sb.append(f.getName() + FIELD_SEPARATOR + f.getName()+ FIELD_SEPARATOR+ c.getSimpleName().toUpperCase()+ RECORD_SEPARATOR);
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
123,"smtpAlert.emit(prefix + ""-"" + type.toString().toUpperCase() + "" alert at "" + alertTime + "" "" + type + "" usage breached current usage: "" + decimalVal.doubleValue() + ""% threshold: "" + percentileThreshold + ""%\n\n"" + machineKey);","smtpAlert.emit(prefix + ""-"" + type.toString().toUpperCase()+ "" alert at ""+ alertTime+ "" ""+ type+ "" usage breached current usage: ""+ decimalVal.doubleValue()+ ""% threshold: ""+ percentileThreshold+ ""%\n\n""+ machineKey);
",0,0,18,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
124,"smtpAlert.emit(resourceType.toUpperCase() + "" alert at "" + stime + "" "" + resourceType + "" usage breached current usage: "" + bd.doubleValue() + ""% threshold: "" + threshold + ""%\n\n"" + skey);","smtpAlert.emit(resourceType.toUpperCase() + "" alert at "" + stime+ "" ""+ resourceType+ "" usage breached current usage: ""+ bd.doubleValue()+ ""% threshold: ""+ threshold+ ""%\n\n""+ skey);
",0,4,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
125,"modelArguments.put(Queue.OVERFLOW_POLICY, OverflowPolicy.valueOf(String.valueOf(wireArguments.get(QPID_POLICY_TYPE)).toUpperCase()));","modelArguments.put(Queue.OVERFLOW_POLICY,OverflowPolicy.valueOf(String.valueOf(wireArguments.get(QPID_POLICY_TYPE)).toUpperCase()));
",0,1,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
126,"if (readAllColumns || columnNamesSet.contains(rsColumns.getString(""COLUMN_NAME"").toUpperCase())) {","if (readAllColumns || columnNamesSet.contains(rsColumns.getString(""COLUMN_NAME"").toUpperCase())) {
  columnNames.add(rsColumns.getString(""COLUMN_NAME""));
  columnNullabilities.add(rsColumns.getInt(""NULLABLE""));
  columnDataTypes.add(rsColumns.getInt(""DATA_TYPE""));
  remainingColumns--;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
127,"this.type = Types.getMajorTypeFromName(encodingType.split(""_"", 2)[0].toLowerCase());","this.type=Types.getMajorTypeFromName(encodingType.split(""_"",2)[0].toLowerCase());
",0,13,10,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
128,"timeStampColumns = Arrays.asList(timeStampColumnString.toLowerCase().replaceAll("" "", """").split("",""));","timeStampColumns=Arrays.asList(timeStampColumnString.toLowerCase().replaceAll("" "","""").split("",""));
",0,2,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
129,"return Enums.getIfPresent(Deserializers.class, props.getProperty(KAFKA_DESERIALIZER_TYPE).toUpperCase());","return Enums.getIfPresent(Deserializers.class,props.getProperty(KAFKA_DESERIALIZER_TYPE).toUpperCase());
",0,5,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
130,"if (charset == null || charset.name().toLowerCase().indexOf(""utf"") != -1) {","if (charset == null || charset.name().toLowerCase().indexOf(""utf"") != -1) {
  final byte bom[]=new byte[4];
  int unread;
  final PushbackInputStream pushbackInputStream=new PushbackInputStream(inputStream,bom.length);
  final int n=pushbackInputStream.read(bom,0,bom.length);
  if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {
    charset=UTF_8_CHARSET;
    unread=n - 3;
  }
 else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {
    charset=Charset.forName(""UTF-16BE"");
    unread=n - 2;
  }
 else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {
    charset=Charset.forName(""UTF-16LE"");
    unread=n - 2;
  }
 else   if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {
    charset=Charset.forName(""UTF-32BE"");
    unread=n - 4;
  }
 else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {
    charset=Charset.forName(""UTF-32LE"");
    unread=n - 4;
  }
 else {
    unread=n;
  }
  if (unread > 0) {
    pushbackInputStream.unread(bom,(n - unread),unread);
  }
 else   if (unread < -1) {
    pushbackInputStream.unread(bom,0,0);
  }
  inputStream=pushbackInputStream;
}
",0,16,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
131,args[ 0 ] = ( (String) args[ 0 ] ).toUpperCase();,"args[0]=((String)args[0]).toUpperCase();
",0,84,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
132,String schemaName = this._configuration.get().schemaName().get().toLowerCase();,"String schemaName=this._configuration.get().schemaName().get().toLowerCase();
",0,4,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
133,"textInBetween = jcas.getDocumentText().substring(begin, end).replaceAll(""[\r\n]"", "" "").toLowerCase();","textInBetween=jcas.getDocumentText().substring(begin,end).replaceAll(""[\r\n]"","" "").toLowerCase();
",0,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
134,"this.conf.addResource(getDriverResourcePath(getClass().getSimpleName().toLowerCase() + ""-site.xml""));","this.conf.addResource(getDriverResourcePath(getClass().getSimpleName().toLowerCase() + ""-site.xml""));
",0,7,8,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
135,"int deletedPages = repository.deletePages(USER_ID, PageType.USER.toString().toUpperCase());","int deletedPages=repository.deletePages(USER_ID,PageType.USER.toString().toUpperCase());
",0,0,8,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
136,"this.name = Check.notEmpty(name, ""name"").trim().toLowerCase();","this.name=Check.notEmpty(name,""name"").trim().toLowerCase();
",0,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
137,"md5Local = BaseEncoding.base16().encode(Files.hash(file, Hashing.md5()).asBytes()).toLowerCase();","md5Local=BaseEncoding.base16().encode(Files.hash(file,Hashing.md5()).asBytes()).toLowerCase();
",0,1,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
138,"return valueOf(value.replace('-', '_').toUpperCase().trim());","return valueOf(value.replace('-','_').toUpperCase().trim());
",0,13,7,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
139,"assertTrue(response3.readEntity(String.class).toLowerCase().contains(""unable to match""));","assertTrue(response3.readEntity(String.class).toLowerCase().contains(""unable to match""));
",0,2,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
140,if ((defect.getName() != null && !defect.getName().toLowerCase(),"if ((defect.getName() != null && !defect.getName().toLowerCase().contains(value)) && (defect.getDescription() != null && !defect.getDescription().toLowerCase().contains(value)) && (defect.getSeverity() != null && !defect.getSeverity().toLowerCase().contains(value))&& (defect.getStatus() != null && !defect.getStatus().toLowerCase().contains(value))) {
  logger.trace(""Defect "" + defect.getId() + "" was skipped, since it doesn't match ""+ DefectsResource.FTS+ "" parameter."");
  continue l_defects;
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
141,"fields.stream().map(field -> ""`"" + (hiveFieldNames ? field.getFieldName().toLowerCase() : field.getFieldName()) + ""` ""","hiveColumns.addAll(fields.stream().map(field -> ""`"" + (hiveFieldNames ? field.getFieldName().toLowerCase() : field.getFieldName()) + ""` ""+ getHiveTypeFromFieldType(field.getDataType(),hiveFieldNames)).collect(Collectors.toList()));
",0,1,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(InfixExpression-extendedOperands, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
"
142,"BASE_URI = (ServerEnvironmentInfo.getBaseURI() + ""/cookiestests"").toLowerCase();","BASE_URI=(ServerEnvironmentInfo.getBaseURI() + ""/cookiestests"").toLowerCase();
",0,1,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
143,String upper = String.valueOf(this.fieldVisibility).trim().toUpperCase();,"String upper=String.valueOf(this.fieldVisibility).trim().toUpperCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
144,this.existingEntityPolicy = ExistingEntityPolicy.valueOf(this.dataset.getProperties(),"this.existingEntityPolicy=ExistingEntityPolicy.valueOf(this.dataset.getProperties().getProperty(EXISTING_ENTITY_POLICY_KEY,DEFAULT_EXISTING_ENTITY_POLICY).toUpperCase());
",0,13,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
145,"String[] schemeParts = StringUtils.split(scheme.toLowerCase(), '+');","String[] schemeParts=StringUtils.split(scheme.toLowerCase(),'+');
",0,1,8,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
146,"XSLTUtils.addAttribute(model, ""caps-cname"", xmlName.substring(4, xmlName.length() -3 ).toUpperCase(), property);","XSLTUtils.addAttribute(model,""caps-cname"",xmlName.substring(4,xmlName.length() - 3).toUpperCase(),property);
",0,5,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
147,"methodName = methodName + ((propertyName.length()>0)?propertyName.substring(0,1).toUpperCase():"""");","methodName=methodName + ((propertyName.length() > 0) ? propertyName.substring(0,1).toUpperCase() : """");
",0,2,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
148,"private static final Set<String> VLAN_OR_VXLAN = new HashSet<>(Arrays.asList(BroadcastDomainType.Vlan.toString().toLowerCase(),","private static final Set<String> VLAN_OR_VXLAN=new HashSet<>(Arrays.asList(BroadcastDomainType.Vlan.toString().toLowerCase(),BroadcastDomainType.Vxlan.toString().toLowerCase()));
",0,15,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
149,"(file = new File(deploymentFile.getAbsolutePath(), MODULE_XML.toLowerCase()))","if (file.exists() || (file=new File(deploymentFile.getAbsolutePath(),MODULE_XML.toLowerCase())).exists()) {
  InputStream in=null;
  try {
    in=new FileInputStream(file);
    ModuleBuilder builder=new ModuleBuilder(in,module,axisConfig);
    module.setArchiveName(shortFileName);
    builder.populateModule();
  }
 catch (  FileNotFoundException e) {
    throw new DeploymentException(Messages.getMessage(DeploymentErrorMsgs.FILE_NOT_FOUND,e.getMessage()));
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
        log.info(Messages.getMessage(""errorininputstreamclose""));
      }
    }
  }
}
 else {
  throw new DeploymentException(Messages.getMessage(DeploymentErrorMsgs.MODULE_XML_MISSING,deploymentFile.getAbsolutePath()));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ),
"
150,"(this.getAnnoWebServiceServiceName() + "".wsdl"").toLowerCase());","wsdlComposite.setWsdlFileName((this.getAnnoWebServiceServiceName() + "".wsdl"").toLowerCase());
",0,0,4,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
151,ctxFileInputStream = serviceCL.getResourceAsStream(DeploymentConstants.META_INF,"ctxFileInputStream=serviceCL.getResourceAsStream(DeploymentConstants.META_INF.toLowerCase() + File.separator + axisService.getName()+ ""-application-context.xml"");
",0,0,4,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
152,"sb.append('/').append(Integer.toString(triggerIndex, TRIGGER_RADIX).toUpperCase());","sb.append('/').append(Integer.toString(triggerIndex,TRIGGER_RADIX).toUpperCase());
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
153,return (WindowedValue<String> str) -> str.withValue(str.getValue().toUpperCase());,"return (WindowedValue<String> str) -> str.withValue(str.getValue().toUpperCase());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, SingleVariableDeclaration-type, LambdaExpression-parameters, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, SingleVariableDeclaration-type, LambdaExpression-parameters, ReturnStatement-expression, ),
SimpleName(SingleVariableDeclaration-name, LambdaExpression-parameters, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ReturnStatement-expression, ),
"
154,"return String.valueOf(Math.min(Double.NEGATIVE_INFINITY, -100000)).intern().toLowerCase().concat(String.valueOf(Double.POSITIVE_INFINITY)).substring(1, 5);","return String.valueOf(Math.min(Double.NEGATIVE_INFINITY,-100000)).intern().toLowerCase().concat(String.valueOf(Double.POSITIVE_INFINITY)).substring(1,5);
",0,3,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
155,".collect(Collectors.toMap(f -> f.getName().toLowerCase(), Field::getName));","Map<String,String> nameMapping=BASE_SCHEMA.getFields().stream().collect(Collectors.toMap(f -> f.getName().toLowerCase(),Field::getName));
",0,2,9,,"SimpleName(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(ExpressionMethodReference-expression, MethodInvocation-arguments, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, ),
"
156,"return eventType.substring(0, index).toLowerCase() + ""_"" + new String(chars);","return eventType.substring(0,index).toLowerCase() + ""_"" + new String(chars);
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
157,"optionsDDL = optionsDDL.trim().toLowerCase().startsWith(""with"") ? optionsDDL.trim() : ""with "" + optionsDDL.trim();","optionsDDL=optionsDDL.trim().toLowerCase().startsWith(""with"") ? optionsDDL.trim() : ""with "" + optionsDDL.trim();
",0,3,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
158,"final String methodName = ""is"" + level.substring(0, 1).toUpperCase() + level.substring(1) + ""Enabled"";","final String methodName=""is"" + level.substring(0,1).toUpperCase() + level.substring(1)+ ""Enabled"";
",0,5,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
159,"if (!key.toLowerCase().startsWith(PROPERTY.asHeader() + ""-"")) {","if (!key.toLowerCase().startsWith(PROPERTY.asHeader() + ""-"")) {
  key=PROPERTY.asHeader() + ""-"" + key;
}
",0,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
160,"logRebindingDebug(""Upgrading search path entry of ""+bType.getSimpleName().toLowerCase()+"" ""+contextSuchAsId+"" from ""+searchItemId+"" to ""+newSearchItemId);","logRebindingDebug(""Upgrading search path entry of "" + bType.getSimpleName().toLowerCase() + "" ""+ contextSuchAsId+ "" from ""+ searchItemId+ "" to ""+ newSearchItemId);
",0,0,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
161,"logRebindingWarn(""Needed rebind catalog to resolve search path entry ""+searchItemId+"" (now ""+fixedSearchItemId+"") for ""+bType.getSimpleName().toLowerCase()+"" ""+contextSuchAsId+","logRebindingWarn(""Needed rebind catalog to resolve search path entry "" + searchItemId + "" (now ""+ fixedSearchItemId+ "") for ""+ bType.getSimpleName().toLowerCase()+ "" ""+ contextSuchAsId+ "", persistence should remove this in future but future versions will not support this and definitions should be fixed"");
",0,0,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
162,"LOG.warn(""Loaded java type ""+jType+"" for ""+bType.getSimpleName().toLowerCase()+"" ""+contextSuchAsId+"" but had errors: ""+Strings.join(warnings, "";""));","LOG.warn(""Loaded java type "" + jType + "" for ""+ bType.getSimpleName().toLowerCase()+ "" ""+ contextSuchAsId+ "" but had errors: ""+ Strings.join(warnings,"";""));
",0,2,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
163,"String msg = ""Class ""+jType+"" not found for ""+bType.getSimpleName().toLowerCase()+"" ""+contextSuchAsId+"" (""+catalogItemId+""): ""+Strings.join(warnings, "";"");","String msg=""Class "" + jType + "" not found for ""+ bType.getSimpleName().toLowerCase()+ "" ""+ contextSuchAsId+ "" (""+ catalogItemId+ ""): ""+ Strings.join(warnings,"";"");
",0,2,17,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
164,"highlightAction(String.format(formattedMessage, entity, Strings.removeFromStart(type.toString().toLowerCase(), ""entity_"")), null);","highlightAction(String.format(formattedMessage,entity,Strings.removeFromStart(type.toString().toLowerCase(),""entity_"")),null);
",0,0,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
165,"this.protocol = Protocol.valueOf(getProperty(this.properties, ""protocol"", ""tcp"").toUpperCase());","this.protocol=Protocol.valueOf(getProperty(this.properties,""protocol"",""tcp"").toUpperCase());
",0,1,10,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
166,Class<?> type = primCls.get(signature[i].getType().toLowerCase());,"Class<?> type=primCls.get(signature[i].getType().toLowerCase());
",0,29,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
167,"assertTrue(status != null && status.toLowerCase().contains(""waiting""), ""status=""+status);","assertTrue(status != null && status.toLowerCase().contains(""waiting""),""status="" + status);
",0,0,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
168,"return ""duration.since.first-"" + config().get(STATE).name().toLowerCase();","return ""duration.since.first-"" + config().get(STATE).name().toLowerCase();
",0,0,6,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
169,"throw Exceptions.propagateAnnotated(""Error electing primary (when ""+expected.toString().toLowerCase()+"")"", e);","throw Exceptions.propagateAnnotated(""Error electing primary (when "" + expected.toString().toLowerCase() + "")"",e);
",0,1,8,,"SimpleName(MethodInvocation-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, ThrowStatement-expression, ),
"
170,boolean hasUpperCase = !keys[i].equals(keys[i].toLowerCase());,"boolean hasUpperCase=!keys[i].equals(keys[i].toLowerCase());
",0,1,8,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
171,"Functor[] readFunctors = Arrays.stream(headers).map(name -> ""get"" + name.toUpperCase()).map(Functor::new).toArray(n -> new Functor[n]);","Functor[] readFunctors=Arrays.stream(headers).map(name -> ""get"" + name.toUpperCase()).map(Functor::new).toArray(n -> new Functor[n]);
",0,16,18,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CreationReference-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayCreation-dimensions, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
172,Extract.TableType tableType = Extract.TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());,"Extract.TableType tableType=Extract.TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());
",0,1,8,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
173,return request.getRequestLine().getMethod().equals(this.method.toUpperCase());,"return request.getRequestLine().getMethod().equals(this.method.toUpperCase());
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
174,"CallContext.current().setEventDetails("" Name: "" + name + "" New Value: "" + (name.toLowerCase().contains(""password"") ? ""*****"" : value == null ? """" : value));","CallContext.current().setEventDetails("" Name: "" + name + "" New Value: ""+ (name.toLowerCase().contains(""password"") ? ""*****"" : value == null ? """" : value));
",0,3,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
175,"return prefix + randomAlphabetic(5).toLowerCase() + ""."" + extension;","return prefix + randomAlphabetic(5).toLowerCase() + "".""+ extension;
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
176,"if (!System.getProperty(""os.name"").toLowerCase().contains(""mac"")) {","if (!System.getProperty(""os.name"").toLowerCase().contains(""mac"")) {
  watcherBuilder.watchService(this.baseDirectory.getFileSystem().newWatchService());
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
177,"assertTrue(!key.toLowerCase().startsWith(""camel""), ""Should not contain any Camel internal headers"");","assertTrue(!key.toLowerCase().startsWith(""camel""),""Should not contain any Camel internal headers"");
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
178,((Oas20Document) openApi).schemes.add(trimmedScheme.toLowerCase());,"((Oas20Document)openApi).schemes.add(trimmedScheme.toLowerCase());
",0,0,6,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
179,"String serverUrl = new StringBuilder().append(trimmedScheme.toLowerCase()).append("":","String serverUrl=new StringBuilder().append(trimmedScheme.toLowerCase()).append(""://"").append(host).append(basePath).toString();
",0,3,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
180,.process(exchange -> exchange.getMessage().setBody(exchange.getIn().getBody(String.class).toUpperCase())),"from(""direct:in"").process(exchange -> exchange.getMessage().setBody(exchange.getIn().getBody(String.class).toUpperCase())).to(""reactive-streams:my-stream"");
",0,8,10,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
"
181,return operation != null ? Operation.valueOf(operation.toUpperCase()) : Operation.PUBLISH;,"return operation != null ? Operation.valueOf(operation.toUpperCase()) : Operation.PUBLISH;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
QualifiedName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
182,"final ForwardingRule fwdRule = new ForwardingRule(rule.revoked(), rule.getProtocol().toLowerCase(), rule.getSrcIp(), rule.getStringSrcPortRange(), rule.getDstIp(),","final ForwardingRule fwdRule=new ForwardingRule(rule.revoked(),rule.getProtocol().toLowerCase(),rule.getSrcIp(),rule.getStringSrcPortRange(),rule.getDstIp(),rule.getStringDstPortRange());
",0,2,15,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
183,this.order = !options.contents.setByUser() ? PartitionGenerator.Order.ARBITRARY : PartitionGenerator.Order.valueOf(options.contents.value().toUpperCase());,"this.order=!options.contents.setByUser() ? PartitionGenerator.Order.ARBITRARY : PartitionGenerator.Order.valueOf(options.contents.value().toUpperCase());
",0,1,10,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
184,"return WIKI_BEGIN + wikiText.replace( ' ', '+' ).toLowerCase() + WIKI_CENTER + coveredText + WIKI_END;","return WIKI_BEGIN + wikiText.replace(' ','+').toLowerCase() + WIKI_CENTER+ coveredText+ WIKI_END;
",0,1,9,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
185,if (Arrays.stream(SECURITY_PREFIXES).anyMatch(word -> getName().toLowerCase().startsWith(word))) {,"if (Arrays.stream(SECURITY_PREFIXES).anyMatch(word -> getName().toLowerCase().startsWith(word))) {
  return true;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, IfStatement-expression, ),
"
186,"return Arrays.stream(extensionDirectory.listFiles(file -> file.isFile() && file.getName().toLowerCase().endsWith(""."" + NAR_EXTENSION)))","return Arrays.stream(extensionDirectory.listFiles(file -> file.isFile() && file.getName().toLowerCase().endsWith(""."" + NAR_EXTENSION))).map(file -> file.getName()).collect(Collectors.toSet());
",0,3,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
187,"return Enum.valueOf(Mode.class, args[1].toUpperCase());","return Enum.valueOf(Mode.class,args[1].toUpperCase());
",0,3,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
188,"if (""ITEM"".equals(((RexCall) condition).getOperator().getName().toUpperCase())) {","if (""ITEM"".equals(((RexCall)condition).getOperator().getName().toUpperCase())) {
  int index=0;
  for (  RexNode project : projects) {
    if (project.toString().equals(condition.toString())) {
      mapping.put(condition,new RexInputRef(index,project.getType()));
    }
    ++index;
  }
}
 else {
  for (  RexNode child : ((RexCall)condition).getOperands()) {
    rewriteConditionForProjectInternal(child,projects,mapping);
  }
}
",0,23,7,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
189,"final String propertyName = f.getName().substring(0, 1).toUpperCase() + f.getName().substring(1);","final String propertyName=f.getName().substring(0,1).toUpperCase() + f.getName().substring(1);
",0,10,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
190,"new ColumnIdentifier(""arg"" + i + '(' + fun.name().toString().toLowerCase() + ')', true),","return new ColumnSpecification(receiverKs,receiverCf,new ColumnIdentifier(""arg"" + i + '('+ fun.name().toString().toLowerCase()+ ')',true),fun.argTypes().get(i));
",0,0,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ),
CharacterLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
CharacterLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
BooleanLiteral(ClassInstanceCreation-arguments, ),
"
191,return (value == null) ? defaultValue : PATTERN_POSITIVE.matcher(value.toLowerCase()).matches();,"return (value == null) ? defaultValue : PATTERN_POSITIVE.matcher(value.toLowerCase()).matches();
",0,1,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
192,"EXEC exec = EXEC.valueOf(getConf().get(BLUR_EXEC_TYPE, EXEC.AUTOMATIC.name()).toUpperCase());","EXEC exec=EXEC.valueOf(getConf().get(BLUR_EXEC_TYPE,EXEC.AUTOMATIC.name()).toUpperCase());
",0,5,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
193,return getNamespaceName().append(QualifiedName.create(getName())).toString().toLowerCase() + String.valueOf(offsetRange.getStart()) + filePath;,"return getNamespaceName().append(QualifiedName.create(getName())).toString().toLowerCase() + String.valueOf(offsetRange.getStart()) + filePath;
",0,2,12,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
194,"if ((oom.getMessage() != null && oom.getMessage().toLowerCase().contains(""direct buffer memory"")) ||","if ((oom.getMessage() != null && oom.getMessage().toLowerCase().contains(""direct buffer memory"")) || Arrays.stream(oom.getStackTrace()).anyMatch(x -> x.getClassName().equals(""java.nio.Bits"") && x.getMethodName().equals(""reserveMemory""))) {
  logger.error(""Force heap space OutOfMemoryError in the presence of"",oom);
  List<long[]> ignored=new ArrayList<>();
  while (true) {
    ignored.add(new long[Integer.MAX_VALUE / 2]);
  }
}
",0,6,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
195,"durationUnits != null ? duration + "" "" + durationUnits.toString().toLowerCase()","output.println(String.format(""Running %s with %d threads %s"",operations.desc(),threadCount,durationUnits != null ? duration + "" "" + durationUnits.toString().toLowerCase() : opCount > 0 ? ""for "" + opCount + "" iteration"" : ""until stderr of mean < "" + settings.command.targetUncertainty));
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-thenExpression, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ConditionalExpression-thenExpression, ),
"
196,"json.put(parts[0].trim().toLowerCase(), parts[1].trim());","json.put(parts[0].trim().toLowerCase(),parts[1].trim());
",0,9,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
197,"stmts.put(e.getKey().toLowerCase(), jclient.prepare(e.getValue().cql));","stmts.put(e.getKey().toLowerCase(),jclient.prepare(e.getValue().cql));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
198,"args.put(e.getKey().toLowerCase(), e.getValue().fields == null","args.put(e.getKey().toLowerCase(),e.getValue().fields == null ? SchemaStatement.ArgSelect.MULTIROW : SchemaStatement.ArgSelect.valueOf(e.getValue().fields.toUpperCase()));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
199,: SchemaStatement.ArgSelect.valueOf(e.getValue().fields.toUpperCase()));,"args.put(e.getKey().toLowerCase(),e.getValue().fields == null ? SchemaStatement.ArgSelect.MULTIROW : SchemaStatement.ArgSelect.valueOf(e.getValue().fields.toUpperCase()));
",0,0,6,,"QualifiedName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
200,"names.add(this.toString().replaceAll(""_"", """").toLowerCase());","names.add(this.toString().replaceAll(""_"","""").toLowerCase());
",0,13,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
201,"super(opt.toString().toLowerCase() + ""="", ""[0-9]+(\\.[0-9]+)?"", defaultValue, ""Performs this many "" + opt + "" operations out of total"", false);","super(opt.toString().toLowerCase() + ""="",""[0-9]+(\\.[0-9]+)?"",defaultValue,""Performs this many "" + opt + "" operations out of total"",false);
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, SuperConstructorInvocation-arguments, ),
StringLiteral(InfixExpression-rightOperand, SuperConstructorInvocation-arguments, ),
StringLiteral(SuperConstructorInvocation-arguments, ),
SimpleName(SuperConstructorInvocation-arguments, ),
StringLiteral(InfixExpression-leftOperand, SuperConstructorInvocation-arguments, ),
SimpleName(InfixExpression-rightOperand, SuperConstructorInvocation-arguments, ),
StringLiteral(InfixExpression-extendedOperands, SuperConstructorInvocation-arguments, ),
BooleanLiteral(SuperConstructorInvocation-arguments, ),
"
202,"System.out.println(""    -"" + op.toString().toLowerCase() + (op.extraName != null ? "", "" + op.extraName : """"));","System.out.println(""    -"" + op.toString().toLowerCase() + (op.extraName != null ? "", "" + op.extraName : """"));
",0,9,11,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
203,compression = ProtocolOptions.Compression.valueOf(opts.useCompression.value().toUpperCase()).name();,"compression=ProtocolOptions.Compression.valueOf(opts.useCompression.value().toUpperCase()).name();
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
204,"return SUFFIXES.stream().anyMatch(suffix -> file.getName().toLowerCase().matches(""^.*\\."" + suffix + ""$""));","return SUFFIXES.stream().anyMatch(suffix -> file.getName().toLowerCase().matches(""^.*\\."" + suffix + ""$""));
",0,1,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
"
205,"return (entity.getFullyQualifiedName() + ""."" + attribute.getName()).toUpperCase();","return (entity.getFullyQualifiedName() + ""."" + attribute.getName()).toUpperCase();
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
206,"if (_categoryConverters.put(c.getCategory().toLowerCase(), c) != null)","if (_categoryConverters.put(c.getCategory().toLowerCase(),c) != null) {
  throw new IllegalStateException(String.format(""Category converter for category '%s' is already registered"",c.getCategory()));
}
",0,11,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
207,"keyBuffer.append(idPath.substring(0, dot).toLowerCase()).append(","keyBuffer.append(idPath.substring(0,dot).toLowerCase()).append(idPath.substring(dot));
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
208,"packageNames[i++] = packagePrefix+"".""+SaasUtil.toValidJavaName(schemaFile.getName()).toLowerCase();","packageNames[i++]=packagePrefix + ""."" + SaasUtil.toValidJavaName(schemaFile.getName()).toLowerCase();
",0,6,9,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
209,double[] featVec = this.vectors.get(feature.getValue().toString().toLowerCase());,"double[] featVec=this.vectors.get(feature.getValue().toString().toLowerCase());
",0,10,10,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
210,return new String((char[]) object).toUpperCase();,"return new String((char[])object).toUpperCase();
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
PrimitiveType(ArrayType-elementType, CastExpression-type, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
211,"if (!_connection.createTenantVDCPFRule(tenant, rule.getId(), policyIdentifier, rule.getProtocol().toUpperCase(), rule.getSrcIp(),","if (!_connection.createTenantVDCPFRule(tenant,rule.getId(),policyIdentifier,rule.getProtocol().toUpperCase(),rule.getSrcIp(),Integer.toString(rule.getSrcPortRange()[0]),Integer.toString(rule.getSrcPortRange()[1]))) {
  throw new ExecutionException(""Failed to create PF rule in VNMC for guest network with vlan "" + vlanId);
}
",0,4,11,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
212,"String extension = System.getProperty(""os.name"").toLowerCase().contains(""windows"") ? "".exe"" : """";","String extension=System.getProperty(""os.name"").toLowerCase().contains(""windows"") ? "".exe"" : """";
",0,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
213,"if (nl < 4 || !name.substring(nl - 3, nl).toLowerCase().equals("".js"")) {","if (nl < 4 || !name.substring(nl - 3,nl).toLowerCase().equals("".js"")) {
  name=name + "".js"";
}
",0,10,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
214,"String type = entry.getKey().substring(0, entry.getKey().indexOf('_')).toUpperCase();","String type=entry.getKey().substring(0,entry.getKey().indexOf('_')).toUpperCase();
",0,4,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
215,String desc = ((Fix) model.getElementAt(i)).getText().toUpperCase();,"String desc=((Fix)model.getElementAt(i)).getText().toUpperCase();
",0,14,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
216,"final String mockAnswer = String.format(""%s %s executed in %s &&  && 0"", args[0].toUpperCase(), args[1], vmInstance);","final String mockAnswer=String.format(""%s %s executed in %s &&  && 0"",args[0].toUpperCase(),args[1],vmInstance);
",0,2,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
217,"props.put(""userWorkflowName"", lifeCycle.name().toLowerCase() + ""-policy"");","props.put(""userWorkflowName"",lifeCycle.name().toLowerCase() + ""-policy"");
",0,2,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
218,return StringUtils.capitalize(databindingName.toLowerCase()) + ToolConstants.DATABIND_BEAN_NAME_SUFFIX;,"return StringUtils.capitalize(databindingName.toLowerCase()) + ToolConstants.DATABIND_BEAN_NAME_SUFFIX;
",0,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
219,if (this.userSource.equals(User.Source.UNKNOWN.toString().toLowerCase())) {,"if (this.userSource.equals(User.Source.UNKNOWN.toString().toLowerCase())) {
  this.userSource=User.Source.NATIVE.toString().toLowerCase();
}
",0,2,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
220,"this(xId, srcIpId, srcPort, srcPort, dstIp, dstPort, dstPort, protocol.toLowerCase(), networkId, accountId, domainId, instanceId);","this(xId,srcIpId,srcPort,srcPort,dstIp,dstPort,dstPort,protocol.toLowerCase(),networkId,accountId,domainId,instanceId);
",0,0,13,,"SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
"
221,"cmd.getHostDetails().put(KeyStoreUtils.SECURED, String.valueOf(isHostSecured()).toLowerCase());","cmd.getHostDetails().put(KeyStoreUtils.SECURED,String.valueOf(isHostSecured()).toLowerCase());
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
222,"def = new ChannelDef(name, ChannelDef.ChannelType.valueOf(type.toUpperCase()), new File(path));","def=new ChannelDef(name,ChannelDef.ChannelType.valueOf(type.toUpperCase()),new File(path));
",0,4,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
223,"enabledProtocolsList=new ArrayList<String>(Arrays.asList(enabledProtocols.toUpperCase().trim().split(""\\s*,\\s*"")));","enabledProtocolsList=new ArrayList<String>(Arrays.asList(enabledProtocols.toUpperCase().trim().split(""\\s*,\\s*"")));
",0,6,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
224,"DataType dataType = DataType.valueOf(config.getString(Column.getKeyFor(column, Column.DATA_TYPE)).toUpperCase());","DataType dataType=DataType.valueOf(config.getString(Column.getKeyFor(column,Column.DATA_TYPE)).toUpperCase());
",0,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
225,"if ( methodDescriptor.getName().toLowerCase().endsWith( name ) && !methodDescriptor.getName().startsWith( ""set"" )","if (methodDescriptor.getName().toLowerCase().endsWith(name) && !methodDescriptor.getName().startsWith(""set"") && methodDescriptor.getMethod().getReturnType() != Void.TYPE) {
  if (numParms > 0 && methodDescriptor.getMethod().getParameterTypes().length == numParms) {
    return methodDescriptor.getMethod();
  }
  if ((numParms < 0) && (method == null || (method.getParameterTypes().length > methodDescriptor.getMethod().getParameterTypes().length))) {
    method=methodDescriptor.getMethod();
  }
}
",0,2,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
226,"name = ""cs_"" + protocol.toLowerCase() + ""_"" + dstPorts.replace(',', '.') + ""_"" + srcPorts.replace(',', '.');","name=""cs_"" + protocol.toLowerCase() + ""_""+ dstPorts.replace(',','.')+ ""_""+ srcPorts.replace(',','.');
",0,1,14,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
227,LinkType linkType = LdapManager.LinkType.valueOf(cmd.getType().toUpperCase());,"LinkType linkType=LdapManager.LinkType.valueOf(cmd.getType().toUpperCase());
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
228,"scopeType = Enum.valueOf(ScopeType.class, cmd.getScope().toUpperCase());","scopeType=Enum.valueOf(ScopeType.class,cmd.getScope().toUpperCase());
",0,2,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
229,if (vmTypeString == null || VirtualMachine.Type.DomainRouter.toString().toLowerCase().equals(vmTypeString)) {,"if (vmTypeString == null || VirtualMachine.Type.DomainRouter.toString().toLowerCase().equals(vmTypeString)) {
  vmType=VirtualMachine.Type.DomainRouter;
  allowNetworkRate=true;
}
 else if (VirtualMachine.Type.ConsoleProxy.toString().toLowerCase().equals(vmTypeString)) {
  vmType=VirtualMachine.Type.ConsoleProxy;
}
 else if (VirtualMachine.Type.SecondaryStorageVm.toString().toLowerCase().equals(vmTypeString)) {
  vmType=VirtualMachine.Type.SecondaryStorageVm;
}
 else if (VirtualMachine.Type.InternalLoadBalancerVm.toString().toLowerCase().equals(vmTypeString)) {
  vmType=VirtualMachine.Type.InternalLoadBalancerVm;
}
 else {
  throw new InvalidParameterValueException(""Invalid systemVmType. Supported types are: "" + VirtualMachine.Type.DomainRouter + "", ""+ VirtualMachine.Type.ConsoleProxy+ "", ""+ VirtualMachine.Type.SecondaryStorageVm);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
230,"if ((isolationMethods.size() == 1 && isolationMethods.get(0).toLowerCase().equals(""vxlan""))","if ((isolationMethods.size() == 1 && isolationMethods.get(0).toLowerCase().equals(""vxlan"")) || (isolationMethod != null && isolationMethods.contains(isolationMethod) && isolationMethod.toLowerCase().equals(""vxlan""))) {
  NetworkVO publicNetwork=_networksDao.listByZoneAndTrafficType(network.getDataCenterId(),TrafficType.Public).get(0);
  if (publicNetwork != null) {
    s_logger.debug(""setting public network "" + publicNetwork + "" to broadcast type vxlan"");
    publicNetwork.setBroadcastDomainType(BroadcastDomainType.Vxlan);
    _networksDao.persist(publicNetwork);
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
231,"|| (isolationMethod != null && isolationMethods.contains(isolationMethod) && isolationMethod.toLowerCase().equals(""vxlan""))) {","if ((isolationMethods.size() == 1 && isolationMethods.get(0).toLowerCase().equals(""vxlan"")) || (isolationMethod != null && isolationMethods.contains(isolationMethod) && isolationMethod.toLowerCase().equals(""vxlan""))) {
  NetworkVO publicNetwork=_networksDao.listByZoneAndTrafficType(network.getDataCenterId(),TrafficType.Public).get(0);
  if (publicNetwork != null) {
    s_logger.debug(""setting public network "" + publicNetwork + "" to broadcast type vxlan"");
    publicNetwork.setBroadcastDomainType(BroadcastDomainType.Vxlan);
    _networksDao.persist(publicNetwork);
  }
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
232,} else if (purpose == Purpose.Firewall && !supportedTrafficTypes.contains(trafficType.toString().toLowerCase())) {,"if (purpose == Purpose.Firewall && !supportedTrafficTypes.contains(trafficType.toString().toLowerCase())) {
  throw new InvalidParameterValueException(""Traffic Type "" + trafficType + "" is currently supported by Firewall in network ""+ networkId);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
233,"} else if (hypervisorType == HypervisorType.VMware && !vm.getDetails().get(VmDetailConstants.ROOT_DISK_CONTROLLER).toLowerCase().contains(""scsi"")) {","if (hypervisorType == HypervisorType.VMware && !vm.getDetails().get(VmDetailConstants.ROOT_DISK_CONTROLLER).toLowerCase().contains(""scsi"")) {
  String error=""Found unsupported root disk controller: "" + vm.getDetails().get(VmDetailConstants.ROOT_DISK_CONTROLLER);
  s_logger.error(error);
  throw new InvalidParameterValueException(error);
}
 else {
  s_logger.debug(""Rootdisksize override validation successful. Template root disk size "" + toHumanReadableSize(templateVO.getSize()) + "" Root disk size specified ""+ rootDiskSize+ "" GB"");
}
",0,15,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
234,"throw new InvalidParameterValueException(""Protocol "" + NetUtils.TCP_PROTO.toLowerCase() + "" is not supported in zone "" + network.getDataCenterId());","throw new InvalidParameterValueException(""Protocol "" + NetUtils.TCP_PROTO.toLowerCase() + "" is not supported in zone ""+ network.getDataCenterId());
",0,2,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
235,"return CryptoAlgos.HMAC_MD5(NTOWFv1W(password), (user.toUpperCase() + domain).getBytes(RdpConstants.CHARSET_16));","return CryptoAlgos.HMAC_MD5(NTOWFv1W(password),(user.toUpperCase() + domain).getBytes(RdpConstants.CHARSET_16));
",0,2,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
236,final boolean unknownExtensionForFormat = SUPPORTED_EXTENSIONS_BY_FORMAT.get(format.toLowerCase()),"final boolean unknownExtensionForFormat=SUPPORTED_EXTENSIONS_BY_FORMAT.get(format.toLowerCase()).stream().noneMatch(lowerCaseUri::endsWith);
",0,0,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
237,"name = (""KEY_"" + name).toUpperCase();","name=(""KEY_"" + name).toUpperCase();
",0,0,4,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
238,"final String param = params[i].replaceAll(""\\||\\s"", """").toUpperCase();","final String param=params[i].replaceAll(""\\||\\s"","""").toUpperCase();
",0,7,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
239,"result = ScriptableObject.getProperty(s, ""get"" + propertyName.substring(0, 1).toUpperCase() + (propertyName.length() > 1 ? propertyName.substring(1) : """"));","result=ScriptableObject.getProperty(s,""get"" + propertyName.substring(0,1).toUpperCase() + (propertyName.length() > 1 ? propertyName.substring(1) : """"));
",0,1,17,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
240,"if (entityCoveredText.toLowerCase().startsWith(""neck:  supple."")) entityCoveredText = entityCoveredText.substring(0,""NECK:  Supple."".length());","if (entityCoveredText.toLowerCase().startsWith(""neck:  supple."")) entityCoveredText=entityCoveredText.substring(0,""NECK:  Supple."".length());
",0,3,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
241,"super.put(name.toUpperCase(), start, value);","super.put(name.toUpperCase(),start,value);
",0,1,5,,"SimpleName(SuperMethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, SuperMethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, SuperMethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, ExpressionStatement-expression, ),
"
242,"else if (((String) headers.get(""content-disposition"")).toLowerCase()","if (((String)headers.get(""content-disposition"")).toLowerCase().indexOf(""multipart"") > -1) {
  parseMultiPart(new TokenStream(ts,MAX_BOUNDARY_SIZE),""--"" + (String)headers.get(""boundary""));
  ts.read();
}
 else {
  throw new MultipartException(""Unknown part type"");
}
",0,2,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
243,"if (this.autoCachingPointSwitch.toLowerCase().equals(""on"")) {","if (this.autoCachingPointSwitch.toLowerCase().equals(""on"")) {
  this.autoCachingPoint=true;
}
 else {
  this.autoCachingPoint=false;
}
",0,0,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
244,"return StringUtils.camelToSplitName(name.substring(i, i + 1).toLowerCase() + name.substring(i + 1), ""."");","return StringUtils.camelToSplitName(name.substring(i,i + 1).toLowerCase() + name.substring(i + 1),""."");
",0,6,13,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
245,|| (!caseSensitive && value.indexOf(patterns[i].toLowerCase()) != -1)) {,"if ((caseSensitive && value.indexOf(patterns[i]) != -1) || (!caseSensitive && value.indexOf(patterns[i].toLowerCase()) != -1)) {
  getLogger().debug(expression + "" selected value "" + value);
  return true;
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
246,"final String propName = descriptor.getName().substring(0, 1)","final String propName=descriptor.getName().substring(0,1).toUpperCase() + descriptor.getName().substring(1);
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
247,final String ef = (isWindows ? url.toExternalForm().toLowerCase() : url.toExternalForm());,"final String ef=(isWindows ? url.toExternalForm().toLowerCase() : url.toExternalForm());
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
248,"assertEquals(element[0], new String(codec.decode(element[1].toLowerCase()), CHARSET_UTF8));","assertEquals(element[0],new String(codec.decode(element[1].toLowerCase()),CHARSET_UTF8));
",0,0,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
249,"assertEquals(expected.toUpperCase(), codec.encodeAsString((byte[])element[0]));","assertEquals(expected.toUpperCase(),codec.encodeAsString((byte[])element[0]));
",0,0,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
PrimitiveType(ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
250,final String datetime = timestamp.format(new Date()).toLowerCase();,"final String datetime=timestamp.format(new Date()).toLowerCase();
",0,1,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
251,"String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();","String name=clazz == JexlException.class ? ""JEXL"" : clazz.getSimpleName().toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
252,"Assert.assertTrue(new PoissonSampler(rng, 1.23).toString().toLowerCase().contains(""poisson""));","Assert.assertTrue(new PoissonSampler(rng,1.23).toString().toLowerCase().contains(""poisson""));
",0,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
253,command[COMMAND_IDX.OUT_SCHEMA.ordinal()] = outSchema.getColumn(0).getDataType().getType().name().toLowerCase();,"command[COMMAND_IDX.OUT_SCHEMA.ordinal()]=outSchema.getColumn(0).getDataType().getType().name().toLowerCase();
",0,5,10,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
254,"final List<String> valueList = Arrays.asList(EntityAccountType.LOAN.name().toLowerCase(),","final List<String> valueList=Arrays.asList(EntityAccountType.LOAN.name().toLowerCase(),EntityAccountType.SAVINGS.name().toLowerCase(),EntityAccountType.SHARES.name().toLowerCase());
",0,4,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
255,"this.key = text.replaceAll(""[ \\n\\t\\r]+"", """").toLowerCase().intern();","this.key=text.replaceAll(""[ \\n\\t\\r]+"","""").toLowerCase().intern();
",0,0,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
256,"final File[] java11JarFiles = java11Dir.listFiles(filename -> filename.getName().toLowerCase().endsWith("".jar""));","final File[] java11JarFiles=java11Dir.listFiles(filename -> filename.getName().toLowerCase().endsWith("".jar""));
",0,33,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
257,"String feat = ""pred:"" + pred.getCoveredText().replace(' ', '_').toLowerCase();","String feat=""pred:"" + pred.getCoveredText().replace(' ','_').toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
258,"feat = ""SRL: "" + curArg.getLabel() + "":"" + curArg.getCoveredText().replace(' ', '_').toLowerCase();","feat=""SRL: "" + curArg.getLabel() + "":""+ curArg.getCoveredText().replace(' ','_').toLowerCase();
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
259,headTree = new SimpleTree(node.getHead().getCoveredText().toLowerCase());,"headTree=new SimpleTree(node.getHead().getCoveredText().toLowerCase());
",0,3,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
260,final String lastColumn = splits[ splits.length - 1 ].trim().toLowerCase();,"final String lastColumn=splits[splits.length - 1].trim().toLowerCase();
",0,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
261,int rightLower = (int) Math.round(Math.log(tokenCounts.get(nextToken.toLowerCase())));,"int rightLower=(int)Math.round(Math.log(tokenCounts.get(nextToken.toLowerCase())));
",0,0,11,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
PrimitiveType(CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
262,"return WIKI_BEGIN + wikiText.replace( ' ', '+' )","return WIKI_BEGIN + wikiText.replace(' ','+').toLowerCase() + WIKI_CENTER+ coveredText+ WIKI_END;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
263,int freq = ((Integer) iv_hyphMap.get(tokenText,"int freq=((Integer)iv_hyphMap.get(tokenText.toLowerCase())).intValue();
",0,0,6,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
264,"if (afterEndOfInputToConsider-currentPosition >= 4 && mixedCaseText.substring(currentPosition, currentPosition+4).toLowerCase().equals(""www."")) {","if (afterEndOfInputToConsider - currentPosition >= 4 && mixedCaseText.substring(currentPosition,currentPosition + 4).toLowerCase().equals(""www."")) {
  return -1;
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
265,"hyphenTestBuilt = hyphenTestBuilt + s.toUpperCase() + "" "";","hyphenTestBuilt=hyphenTestBuilt + s.toUpperCase() + "" "";
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
266,"final List<String> capturedHeadersList = Arrays.asList(context.getProperty(CAPTURED_HEADERS).getValue().toLowerCase().split("":""));","final List<String> capturedHeadersList=Arrays.asList(context.getProperty(CAPTURED_HEADERS).getValue().toLowerCase().split("":""));
",0,3,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
267,"colNames[i] = String.format(""%s_%d"", types[i].toString().toLowerCase(), i);","colNames[i]=String.format(""%s_%d"",types[i].toString().toLowerCase(),i);
",0,39,10,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
268,"writer.write( createProperty( vocabulary.toLowerCase().replace( '.', '_' ).replace( '-', '_' )","writer.write(createProperty(vocabulary.toLowerCase().replace('.','_').replace('-','_') + ""Table"",VocabularyStore.getInstance().getCtakesClass(vocabulary)));
",0,2,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
269,"= v -> v.toLowerCase().replace( '.', '_' ).replace( '-', '_' );","static private final Function<String,String> fixVocabName=v -> v.toLowerCase().replace('.','_').replace('-','_');
",0,0,9,,"SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
CharacterLiteral(MethodInvocation-arguments, LambdaExpression-body, ),
CharacterLiteral(MethodInvocation-arguments, LambdaExpression-body, ),
"
270,"final String[] pageActions = StringUtils.split( actions.toLowerCase(), ACTION_SEPARATOR );","final String[] pageActions=StringUtils.split(actions.toLowerCase(),ACTION_SEPARATOR);
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
271,"if(ne.getCoveredText().replace('-',' ').toLowerCase().trim()","if (ne.getCoveredText().replace('-',' ').toLowerCase().trim().indexOf(pm.mat.group(1)) != -1 && ne.getPolarity() == -1) return false;
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
272,"if (sen.toLowerCase().trim().matches("".*"" + s + "".*"")) {","if (sen.toLowerCase().trim().matches("".*"" + s + "".*"")) {
  classVal=Const.CLASS_UNKNOWN;
  break;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, IfStatement-expression, ),
"
273,"TestReplicationScenarios.class.getCanonicalName().toLowerCase().replace('.','_') + ""_"" + System.currentTimeMillis();","private final static String tid=TestReplicationScenarios.class.getCanonicalName().toLowerCase().replace('.','_') + ""_"" + System.currentTimeMillis();
",0,3,9,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
"
274,"features.add(new Feature(FEAT_NAME, ancestor.getDeprel()+""_""+ancestor.getCoveredText().toLowerCase()));","features.add(new Feature(FEAT_NAME,ancestor.getDeprel() + ""_"" + ancestor.getCoveredText().toLowerCase()));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
275,"String singularAndLowercased = timeUnit.substring(0, timeUnit.length() - 1).toLowerCase();","String singularAndLowercased=timeUnit.substring(0,timeUnit.length() - 1).toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
276,"final String formattedBasename = this.basename.toLowerCase().replace("" "", """");","final String formattedBasename=this.basename.toLowerCase().replace("" "","""");
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
277,"""orcl"".equals(dbType) || ""hsql"".equals(dbType) ? mapInfo","rs=dmd.getColumns(null,""mssql"".equals(dbType) || ""hsql"".equals(dbType) ? dbSchema : null,""orcl"".equals(dbType) || ""hsql"".equals(dbType) ? mapInfo.getTableName().toUpperCase() : mapInfo.getTableName(),null);
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
"
278,"this.exportData(props, nameToFormatterMap.get(format.toLowerCase())","this.exportData(props,nameToFormatterMap.get(format.toLowerCase()).getFormatter(),null);
",0,0,7,,"ThisExpression(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
279,"localVariables.put(FIELD_SERVICE_TYPE, (serviceInstance.getServiceType() != null) ? serviceInstance.getServiceType().name().toLowerCase() : """");","localVariables.put(FIELD_SERVICE_TYPE,(serviceInstance.getServiceType() != null) ? serviceInstance.getServiceType().name().toLowerCase() : """");
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
280,"? ""query"" : ParameterType.REQUEST_BODY == pType ? ""plain"" : pType.toString().toLowerCase();","String style=ParameterType.PATH == pType ? ""template"" : isForm ? ""query"" : ParameterType.REQUEST_BODY == pType ? ""plain"" : pType.toString().toLowerCase();
",0,0,7,,"StringLiteral(),
QualifiedName(InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
281,"os.write(StringUtils.toBytesASCII(""{\"""" + type.getSimpleName().toLowerCase() + ""\"":""));","os.write(StringUtils.toBytesASCII(""{\"""" + type.getSimpleName().toLowerCase() + ""\"":""));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
282,return FaultThrowingInterceptor.MESSAGE_FORMAT.format(new Object[] {phase}).toUpperCase();,"return FaultThrowingInterceptor.MESSAGE_FORMAT.format(new Object[]{phase}).toUpperCase();
",0,0,6,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
283,"String s = greeter.greetMe(id + "": a"").toLowerCase();","String s=greeter.greetMe(id + "": a"").toLowerCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
284,if (type == null || nameSpace == null || !nameSpaces.contains(nameSpace.toLowerCase())) {,"if (type == null || nameSpace == null || !nameSpaces.contains(nameSpace.toLowerCase())) {
  return null;
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
285,sb.append(startUpper ? ss.get(0) : ss.get(0).toLowerCase());,"sb.append(startUpper ? ss.get(0) : ss.get(0).toLowerCase());
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
286,sb.append(startUpper ? ss[0] : ss[0].toLowerCase());,"sb.append(startUpper ? ss[0] : ss[0].toLowerCase());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
287,"return pkgName + '.' + wsdlVersion.toString().toLowerCase() + '.' + wsdlVersion + ""Generator"";","return pkgName + '.' + wsdlVersion.toString().toLowerCase()+ '.'+ wsdlVersion+ ""Generator"";
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
288,".getEdgesToEntities(Observable.just(CpNamingUtils.getApplicationScope(applicationId)),Optional.fromNullable(CpNamingUtils.getEdgeTypeFromCollectionName(collectionName.toLowerCase())),(this.lastEdge == null ? Optional.absent() : Optional.fromNullable(lastEdge)))","allEntityIdsObs.getEdgesToEntities(Observable.just(CpNamingUtils.getApplicationScope(applicationId)),Optional.fromNullable(CpNamingUtils.getEdgeTypeFromCollectionName(collectionName.toLowerCase())),(this.lastEdge == null ? Optional.absent() : Optional.fromNullable(lastEdge))).buffer(1000).finallyDo(() -> {
  entityIdWriter.shutdown();
  logger.info(""Finished fetching entity ids for {}. Shutting down entity id writer executor "",collectionName);
  while (!entityIdWriter.isTerminated()) {
    try {
      entityIdWriter.awaitTermination(10,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
    }
  }
  logger.info(""Entity id writer executor terminated after shutdown for {}"",collectionName);
}
).subscribe(edges -> {
  logger.info(""For collection {}"",collectionName);
  Integer batchId=batch.getAndIncrement();
  logger.info(""Started fetching details for collection {} batch {} "",collectionName,batchId);
  Observable.just(edges).subscribeOn(Schedulers.from(entityIdWriter)).subscribe(edgeScopes -> {
    List<UUID> entityIds=new ArrayList<UUID>(1000);
    for (    EdgeScope edgeScope : edgeScopes) {
      Id entityId=edgeScope.getEdge().getTargetNode();
      if (entityId != null) {
        entityIds.add(entityId.getUuid());
      }
 else {
        edgeScopes.remove(edgeScope);
      }
    }
    try {
      writeEntityIdsBatch(collectionDir,edgeScopes,batchId,collectionName);
      String type=edgeScopes.get(0).getEdge().getTargetNode().getType();
      Observable.just(entityIds).subscribeOn(Schedulers.from(entityFetcher)).subscribe(entIds -> {
        logger.info(""entIds count {} for type {}"",entIds.size(),type);
        Results entities=rootEm.getEntities(entIds,type);
        int size=entities.getEntities().size();
        logger.info(""Got {} entities."",size);
        if (!skipConnections || !skipDictionaries || !skipAssets) {
          ConnectableObservable<Results> entityObs=Observable.just(entities).publish();
          entityObs.subscribeOn(Schedulers.from(entityMemberFetcher));
          if (!skipConnections) {
            entityObs.subscribe(entity -> {
              fetchConnections(gm,ecm,entity,collectionDir,collectionName,batchId,gson);
            }
);
          }
          if (!skipDictionaries) {
            entityObs.subscribe(entity -> {
              fetchDictionaries(collectionDir,collectionName,rootEm,entity,gson,batchId);
            }
);
          }
          if (!skipAssets) {
            File assetsDir=createDir(collectionDir.getAbsolutePath(),""files"");
            entityObs.subscribe(entity -> {
              try {
                fetchAssets(assetsDir,applicationId,collectionName,batchId,entities);
              }
 catch (              Exception e) {
                logger.error(""Exception while trying to fetch assets for app {}, collection {}, batch {} "",applicationId,collectionName,batchId,e);
              }
            }
);
          }
          entityObs.connect();
        }
        writeEntities(collectionDir,entities,batchId,collectionName,gson);
      }
);
    }
 catch (    Exception e) {
      logger.error(""There was an error writing entity ids to file for "" + edgeScopes.get(0).getEdge(),e);
      System.exit(0);
    }
  }
);
  logger.info(""Finished fetching details for collection {} for batch {}"",collectionName,batchId);
}
);
",0,1,20,,"SimpleName(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
"
289,"return new Schema(new Schema.FieldSchema(getSchemaName(this.getClass().getName().toLowerCase(), input), bagSchema, DataType.BAG));","return new Schema(new Schema.FieldSchema(getSchemaName(this.getClass().getName().toLowerCase(),input),bagSchema,DataType.BAG));
",0,28,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
290,"Image flagImage = new Image(""flag"", new PackageResourceReference(BasePage.class, ""images/"" + model.getDisplayName(Locale.ENGLISH).toLowerCase() + ""-flag.png""));","Image flagImage=new Image(""flag"",new PackageResourceReference(BasePage.class,""images/"" + model.getDisplayName(Locale.ENGLISH).toLowerCase() + ""-flag.png""));
",0,9,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
291,"prepStmt.setString(1, getPlatform().isDelimitedIdentifierModeOn() ? table.getName() : table.getName().toUpperCase());","prepStmt.setString(1,getPlatform().isDelimitedIdentifierModeOn() ? table.getName() : table.getName().toUpperCase());
",0,4,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
292,String value  = (String)attributes.get(isCaseSensitive() ? column.getName() : column.getName().toLowerCase());,"String value=(String)attributes.get(isCaseSensitive() ? column.getName() : column.getName().toLowerCase());
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
293,String     level = (_verbosity == null ? Level.INFO.toString() : _verbosity.getValue()).toUpperCase();,"String level=(_verbosity == null ? Level.INFO.toString() : _verbosity.getValue()).toUpperCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
294,"private static final String[] LEVELS = { Level.FATAL.toString().toUpperCase(),","/** 
 * The possible levels. 
 */
private static final String[] LEVELS={Level.FATAL.toString().toUpperCase(),Level.ERROR.toString().toUpperCase(),Level.WARN.toString().toUpperCase(),Level.INFO.toString().toUpperCase(),Level.DEBUG.toString().toUpperCase(),Level.FATAL.toString().toLowerCase(),Level.ERROR.toString().toLowerCase(),Level.WARN.toString().toLowerCase(),Level.INFO.toString().toLowerCase(),Level.DEBUG.toString().toLowerCase()};
",0,4,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
"
295,"return isNotEmpty(postfix) ? "" "" + postfix.toLowerCase() : """";","return isNotEmpty(postfix) ? "" "" + postfix.toLowerCase() : """";
",0,1,6,,"SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
296,(new DummyReader( streamLength )).toString().toUpperCase(),"vetTable(streamLength,""clob generated always as (upper( myclob ))"",(new DummyReader(streamLength)).toString().toUpperCase());
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
297,return makeVTI( new String[][] { new String[] { contents.toLowerCase() } } );,"return makeVTI(new String[][]{new String[]{contents.toLowerCase()}});
",0,8,8,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
"
298,"if(mimeType != null && !(mimeType = mimeType.trim().toLowerCase()).equals(""""))","if (mimeType != null && !(mimeType=mimeType.trim().toLowerCase()).equals("""")) {
  if (!(mimeType.startsWith(""text/"") || Arrays.asList(""application/json"",""application/xml"").contains(mimeType))) {
    throw new IllegalArgumentException(message.getMimeType() + "" is invalid as a MIME type for this message. "" + ""Only MIME types of the text type can be used if a string is supplied as the content"");
  }
 else   if (mimeType.matches("".*;\\s*charset\\s*=.*"")) {
    throw new IllegalArgumentException(message.getMimeType() + "" is invalid as a MIME type for this message. "" + ""If a string is supplied as the content, the MIME type must not include a charset parameter"");
  }
}
",0,3,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
299,"final String fileName = arg.toUpperCase().endsWith("".XML"")","final String fileName=arg.toUpperCase().endsWith("".XML"") ? arg : (arg + "".xml"");
",0,0,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
300,"String roleName = raw.substring( 0, raw.indexOf( Config.getInstance().getDelimiter() ) ).toUpperCase();","String roleName=raw.substring(0,raw.indexOf(Config.getInstance().getDelimiter())).toUpperCase();
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
301,"op.setOperatorFor(lems.get(indClass+1)+""[] ""+verbChunk.getLemmas().get(verbChunk.getLemmas().size()-1).toLowerCase()","op.setOperatorFor(lems.get(indClass + 1) + ""[] "" + verbChunk.getLemmas().get(verbChunk.getLemmas().size() - 1).toLowerCase()+ "" = new ""+ lems.get(indClass + 1)+ ""[""+ arraySize+ ""]"");
",0,2,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
302,"assertEquals( UserTestData.class.getName() + "".assertEquals failed compare user userId"", getUserId( usr )","assertEquals(UserTestData.class.getName() + "".assertEquals failed compare user userId"",getUserId(usr).toUpperCase(),user.getUserId().toUpperCase());
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
303,"assertEquals( UserTestData.class.getName() + "".assertEquals failed compare user userId"", user2.getUserId()","assertEquals(UserTestData.class.getName() + "".assertEquals failed compare user userId"",user2.getUserId().toUpperCase(),user.getUserId().toUpperCase());
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
304,"{EXAMPLE_2, null, USER_NAME.toLowerCase()},","return new String[][]{{EXAMPLE_1,null,USER_NAME},{EXAMPLE_2,null,USER_NAME.toLowerCase()},{EXAMPLE_3,null,NAME_GIVEN_NAME},{EXAMPLE_4,CORE_USER_SCHEMA,USER_NAME},{EXAMPLE_5,CORE_USER_SCHEMA,USER_NAME.toLowerCase()},{EXAMPLE_6,CORE_USER_SCHEMA,NAME_GIVEN_NAME},{EXAMPLE_7,ENTERPRISE_USER_SCHEMA,EMPLOYEE_NUMBER}};
",0,0,4,,"SimpleName(ArrayInitializer-expressions, ),
NullLiteral(ArrayInitializer-expressions, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ),
"
305,result = prime * result + ((getTable() == null) ? 0 : getTable().getName().toLowerCase().hashCode());,"result=prime * result + ((getTable() == null) ? 0 : getTable().getName().toLowerCase().hashCode());
",0,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
306,return key instanceof String && underlyingMap.containsKey(((String) key).toLowerCase());,"return key instanceof String && underlyingMap.containsKey(((String)key).toLowerCase());
",0,0,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
307,"operatorTable.addOperatorWithInference(name, new HiveUDFOperator(name.toUpperCase(), new HiveSqlReturnTypeInference()));","operatorTable.addOperatorWithInference(name,new HiveUDFOperator(name.toUpperCase(),new HiveSqlReturnTypeInference()));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
308,if (_headersLowerCase == null || (header = _headersLowerCase.get(name.toLowerCase())) == null) {,"if (_headersLowerCase == null || (header=_headersLowerCase.get(name.toLowerCase())) == null) {
  return null;
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
309,final String property = String.valueOf(System.getProperty(StandardSystemProperty.JAVA_VENDOR.key())).toUpperCase();,"final String property=String.valueOf(System.getProperty(StandardSystemProperty.JAVA_VENDOR.key())).toUpperCase();
",0,2,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
310,"this.ending = '.' + name().toLowerCase() + "".drill"";","this.ending='.' + name().toLowerCase() + "".drill"";
",0,0,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
311,byte[] outB = org.apache.drill.common.types.BooleanType.get(String.valueOf(in.value)).name().toLowerCase().getBytes();,"byte[] outB=org.apache.drill.common.types.BooleanType.get(String.valueOf(in.value)).name().toLowerCase().getBytes();
",0,2,11,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
312,"return FunctionCallFactory.createExpression(call.getAggregation().getName().toLowerCase(), ExpressionPosition.UNKNOWN, args);","return FunctionCallFactory.createExpression(call.getAggregation().getName().toLowerCase(),ExpressionPosition.UNKNOWN,args);
",0,3,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
313,"return ""item"".equals(call.getOperator().getName().toLowerCase());","return ""item"".equals(call.getOperator().getName().toLowerCase());
",0,0,6,,"StringLiteral(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
314,switch (((ValueExpressions.QuotedString) args.get(0)).value.toUpperCase()) {,"switch (((ValueExpressions.QuotedString)args.get(0)).value.toUpperCase()) {
case ""LEADING"":
  trimFunc=""ltrim"";
break;
case ""TRAILING"":
trimFunc=""rtrim"";
break;
case ""BOTH"":
trimFunc=""btrim"";
break;
default :
throw new UnsupportedOperationException(""Invalid argument for TRIM function. "" + ""Expected one of the following: LEADING, TRAILING, BOTH"");
}
",0,4,6,,"QualifiedName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, SwitchStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
"
315,String timeUnitStr = ((ValueExpressions.QuotedString) args.get(0)).value.toUpperCase();,"String timeUnitStr=((ValueExpressions.QuotedString)args.get(0)).value.toUpperCase();
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
316,"LogicalExpression expr = new FunctionCall(call.getAggregation().getName().toLowerCase(), args, ExpressionPosition.UNKNOWN);","LogicalExpression expr=new FunctionCall(call.getAggregation().getName().toLowerCase(),args,ExpressionPosition.UNKNOWN);
",0,3,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
317,"if (bestMatch != null && bestMatch.length() > functionName.length() && bestMatch.toLowerCase().startsWith(""convert"")) {","if (bestMatch != null && bestMatch.length() > functionName.length() && bestMatch.toLowerCase().startsWith(""convert"")) {
  final StringBuilder s=new StringBuilder(""Did you mean "").append(bestMatch.substring(functionName.length())).append(""?"");
  exceptionBuilder.addContext(s.toString());
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
318,final String part = ((SqlCharStringLiteral) ((SqlCallBinding) opBinding).operand(0)),"final String part=((SqlCharStringLiteral)((SqlCallBinding)opBinding).operand(0)).getNlsString().getValue().toUpperCase();
",0,7,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
319,"return operators.contains(sqlCall.getOperator().getName().toUpperCase()) || checkOperator(sqlCall, operators, false);","return operators.contains(sqlCall.getOperator().getName().toUpperCase()) || checkOperator(sqlCall,operators,false);
",0,2,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
320,AbstractSchema subSchema = rootSchema.getSubSchema(schema.toLowerCase()).unwrap(AbstractSchema.class);,"AbstractSchema subSchema=rootSchema.getSubSchema(schema.toLowerCase()).unwrap(AbstractSchema.class);
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
321,"headerBuilder.append('""').append(fieldType.name().toLowerCase()).append('""').append("","");","headerBuilder.append('""').append(fieldType.name().toLowerCase()).append('""').append("","");
",0,2,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
322,"ordering = new Ordering((String) Ordering.ORDER_ASC.toLowerCase(), expr, (String) null);","ordering=new Ordering((String)Ordering.ORDER_ASC.toLowerCase(),expr,(String)null);
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
323,"{""upper"", strValue.toUpperCase(),""upper(a)"", inputSizeStr, 1 + """"},","String[][] functions={{""concat"",strValue + strValue,""concat(a,a)"",inputSizeStr,2 + """"},{""upper"",strValue.toUpperCase(),""upper(a)"",inputSizeStr,1 + """"},{""repeat"",strValue + strValue,""repeatstr(a, 2)"",inputSizeStr,5 + """"},{""substr"",strValue.substring(0,4),""substr(a, 1, 4)"",inputSizeStr,1 + """"}};
",0,0,7,,"StringLiteral(ArrayInitializer-expressions, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ),
StringLiteral(ArrayInitializer-expressions, ),
SimpleName(ArrayInitializer-expressions, ),
NumberLiteral(InfixExpression-leftOperand, ArrayInitializer-expressions, ),
StringLiteral(InfixExpression-rightOperand, ArrayInitializer-expressions, ),
"
324,String name = this.name == null ? null : this.name.toLowerCase();,"String name=this.name == null ? null : this.name.toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
325,"TransferPair tp = vector.getTransferPair(vector.getField().getType().getMinorType().name().toLowerCase(), vector.getAllocator());","TransferPair tp=vector.getTransferPair(vector.getField().getType().getMinorType().name().toLowerCase(),vector.getAllocator());
",0,1,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
326,this.convertFunction = CONVERT_FROM.equals(convertFunction.toLowerCase()) ? CONVERT_FROM : CONVERT_TO;,"this.convertFunction=CONVERT_FROM.equals(convertFunction.toLowerCase()) ? CONVERT_FROM : CONVERT_TO;
",0,0,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
327,return ((path == null) ? 0 : path.toLowerCase().hashCode());,"return ((path == null) ? 0 : path.toLowerCase().hashCode());
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
328,"return method.getName().length() > 3 ? method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : """";","return method.getName().length() > 3 ? method.getName().substring(3,4).toLowerCase() + method.getName().substring(4) : """";
",0,3,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
329,"if (!osProperty.toLowerCase().contains(""windows"")) return;","if (!osProperty.toLowerCase().contains(""windows"")) return;
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
330,keys.stream().filter(k -> k.toUpperCase().startsWith(DUBBO)).forEach(k ->,"keys.stream().filter(k -> k.toUpperCase().startsWith(DUBBO)).forEach(k -> attachments.put(k.substring(DUBBO.length()),headers.get(Metadata.Key.of(k,Metadata.ASCII_STRING_MARSHALLER))));
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
331,sortOrder = VisorTxSortOrder.valueOf(argIter.nextArg(TxCommandArg.TX_ORDER.toString()).toUpperCase());,"sortOrder=VisorTxSortOrder.valueOf(argIter.nextArg(TxCommandArg.TX_ORDER.toString()).toUpperCase());
",0,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
332,"return (scenarioName() + ""-"" + scenarioVersion() + ""-"" + testImageVersion()).toLowerCase();","return (scenarioName() + ""-"" + scenarioVersion()+ ""-""+ testImageVersion()).toLowerCase();
",0,0,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
333,"columns.add(String.format(""%s %s"", column.getName(), _EAGLE_SIDDHI_TYPE_MAPPING.get(column.getType().toString().toLowerCase())));","columns.add(String.format(""%s %s"",column.getName(),_EAGLE_SIDDHI_TYPE_MAPPING.get(column.getType().toString().toLowerCase())));
",0,0,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
334,"String dataSourceName = (getStreamDefinition().getStreamId() + ""_CUSTOMIZED"").toUpperCase();","String dataSourceName=(getStreamDefinition().getStreamId() + ""_CUSTOMIZED"").toUpperCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
335,"threadStatePercentages.put(state, (Integer) getMetric(REGISTRY_METRICSET_THREADS + ""."" + state.name().toLowerCase() + "".count"") / (double) totalThreadCount);","threadStatePercentages.put(state,(Integer)getMetric(REGISTRY_METRICSET_THREADS + ""."" + state.name().toLowerCase()+ "".count"") / (double)totalThreadCount);
",0,2,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
336,"String newString = split[i].substring(0, 1).toUpperCase() + split[i].substring(1, split[i].length());","String newString=split[i].substring(0,1).toUpperCase() + split[i].substring(1,split[i].length());
",0,1,15,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
337,"return String.format(Constants.HADOOP_HISTORY_MINUTE_METRIC_FORMAT, columnNames.get(columnNames.size() - 1).toLowerCase(), metric);","return String.format(Constants.HADOOP_HISTORY_MINUTE_METRIC_FORMAT,columnNames.get(columnNames.size() - 1).toLowerCase(),metric);
",0,1,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
338,"return String.format(""hadoop.%s"", ((String) event.get(""component"")).toLowerCase());","return String.format(""hadoop.%s"",((String)event.get(""component"")).toLowerCase());
",0,0,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
339,"log.error(""ELResolver error: Column '{}' cannot be resolved for table/view '{}'."", name.toUpperCase(), ((DBRowSet)base).getName());","log.error(""ELResolver error: Column '{}' cannot be resolved for table/view '{}'."",name.toUpperCase(),((DBRowSet)base).getName());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
340,"name  = name.substring(i, i+1).toLowerCase()+name.substring(i+1);","name=name.substring(i,i + 1).toLowerCase() + name.substring(i + 1);
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
341,keys[i] = t.getColumn(pkCols.get(i).toUpperCase());,"keys[i]=t.getColumn(pkCols.get(i).toUpperCase());
",0,0,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
342,"this.tableMap.put(tableName.toUpperCase(), new DBTable(tableName, this.remoteDb));","this.tableMap.put(tableName.toUpperCase(),new DBTable(tableName,this.remoteDb));
",0,5,9,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
343,"return ""CLASSID_"" + p.service().name().toString().toUpperCase() + ""_""","return ""CLASSID_"" + p.service().name().toString().toUpperCase() + ""_""+ p.name().toString().toUpperCase();
",0,0,7,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
344,if (!name.name.toUpperCase().equals( name.name )),"if (!name.name.toUpperCase().equals(name.name)) warn(""constant name should be all uppercase"",name.name,name.token);
",0,0,4,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
345,"assertEquals(this.clientSetup.getOrganizationName().toLowerCase(), app.get(""organizationName"").toString());","assertEquals(this.clientSetup.getOrganizationName().toLowerCase(),app.get(""organizationName"").toString());
",0,3,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
346,"return new TermQuery( new Term( indexerField.getKey(), query.toLowerCase().replaceAll( ""\\."",","return new TermQuery(new Term(indexerField.getKey(),query.toLowerCase().replaceAll(""\\."",""/"")));
",0,1,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
347,"if (Arrays.asList(new String[] {""type"", ""name""}).contains(orderBy.toLowerCase())) {","if (Arrays.asList(new String[]{""type"",""name""}).contains(orderBy.toLowerCase())) {
  return;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
348,"return ""("" + getEntityType().name().toLowerCase() + "") "" + getName();","return ""("" + getEntityType().name().toLowerCase() + "") ""+ getName();
",0,0,6,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
349,"""falcon/workflows/"" + entity.getEntityType().name().toLowerCase() + ""/"" + entity.getName());","return new Path(ClusterHelper.getLocation(cluster,ClusterLocationType.STAGING).getPath(),""falcon/workflows/"" + entity.getEntityType().name().toLowerCase() + ""/""+ entity.getName());
",0,0,8,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
"
350,return HDFS_SCHEME_PREFIXES.contains(scheme.toLowerCase().trim()) ? false : true;,"return HDFS_SCHEME_PREFIXES.contains(scheme.toLowerCase().trim()) ? false : true;
",0,0,7,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
BooleanLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
BooleanLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
351,"action.log.debug(action.request.getMethod().toUpperCase()+""->""+target);","action.log.debug(action.request.getMethod().toUpperCase() + ""->"" + target);
",0,2,7,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
352,"addExtensionJars(fs, new Path(libext, entity.getEntityType().name() + ""/"" + tag.name().toLowerCase()),","addExtensionJars(fs,new Path(libext,entity.getEntityType().name() + ""/"" + tag.name().toLowerCase()),wf);
",0,1,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
353,"props.put(output.getName() + ""."" + loc.getType().toString().toLowerCase(), path);","props.put(output.getName() + ""."" + loc.getType().toString().toLowerCase(),path);
",0,2,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
354,"if (!businessKey.toLowerCase().startsWith(""uddi:"") || !businessKey.substring(5).contains("":"")) {","if (!businessKey.toLowerCase().startsWith(""uddi:"") || !businessKey.substring(5).contains("":"")) {
  throw new ConfigurationException(""The businessKey '"" + businessKey + ""' does not implement a valid UDDI v3 key format. See config file at client.clerks.clerk(""+ i+ "").wsdl(""+ w+ "")[@businessKey]"");
}
",0,5,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
355,builder = builder.withCompression(ProtocolOptions.Compression.valueOf(compression.trim().toLowerCase()));,"builder=builder.withCompression(ProtocolOptions.Compression.valueOf(compression.trim().toLowerCase()));
",0,3,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
356,switch (Geospatial.Type.valueOf(matcher.group(3).toUpperCase())) {,"switch (Geospatial.Type.valueOf(matcher.group(3).toUpperCase())) {
case POINT:
  item=newPoint(SRID.valueOf(matcher.group(2)),matcher.group(4),isNullable,maxLength,precision,scale,isUnicode);
break;
case MULTIPOINT:
final List<Point> points=new ArrayList<>();
for (final String pointCoo : split(matcher.group(4),',')) {
points.add(newPoint(null,pointCoo.substring(1,pointCoo.length() - 1),isNullable,maxLength,precision,scale,isUnicode));
}
item=new MultiPoint(dimension,SRID.valueOf(matcher.group(2)),points);
break;
case LINESTRING:
item=newLineString(SRID.valueOf(matcher.group(2)),matcher.group(4),isNullable,maxLength,precision,scale,isUnicode);
break;
case MULTILINESTRING:
final List<LineString> lineStrings=new ArrayList<>();
for (final String coo : split(matcher.group(4),',')) {
lineStrings.add(newLineString(null,coo.substring(1,coo.length() - 1),isNullable,maxLength,precision,scale,isUnicode));
}
item=new MultiLineString(this.dimension,SRID.valueOf(matcher.group(2)),lineStrings);
break;
case POLYGON:
item=newPolygon(SRID.valueOf(matcher.group(2)),matcher.group(4),isNullable,maxLength,precision,scale,isUnicode);
break;
case MULTIPOLYGON:
final List<Polygon> polygons=new ArrayList<>();
for (final String coo : split(matcher.group(4),',')) {
polygons.add(newPolygon(null,coo.substring(1,coo.length() - 1),isNullable,maxLength,precision,scale,isUnicode));
}
item=new MultiPolygon(dimension,SRID.valueOf(matcher.group(2)),polygons);
break;
default :
}
",0,1,6,,"QualifiedName(MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, SwitchStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, SwitchStatement-expression, ),
"
357,"return this.service.path(""api/entities/delete/"" + entityType + ""/"" + entityName.toLowerCase())","return this.service.path(""api/entities/delete/"" + entityType + ""/""+ entityName.toLowerCase()).header(""Cookie"",getAuthenticationToken()).accept(MediaType.TEXT_XML).delete(ClientResponse.class);
",0,4,8,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
358,"indexesInfo.add(F.<Object>asList(name, type.toUpperCase(), !idx.unique(),","indexesInfo.add(F.<Object>asList(name,type.toUpperCase(),!idx.unique(),idx.name().toUpperCase(),++cnt,field,idx.descending(field)));
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
359,"p = System.getenv(propertyName.replace('.', '_').replace('-', '_').toUpperCase());","p=System.getenv(propertyName.replace('.','_').replace('-','_').toUpperCase());
",0,3,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
360,"process.out().println(""["" + job.id() + ""] "" + job.status().toString().toLowerCase()","process.out().println(""["" + job.id() + ""] ""+ job.status().toString().toLowerCase()+ "" ""+ job.command());
",0,1,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
361,"flowFile = session.putAttribute(flowFile, this.getClass().getSimpleName().toLowerCase() + "".remote.source"", source);","flowFile=session.putAttribute(flowFile,this.getClass().getSimpleName().toLowerCase() + "".remote.source"",source);
",0,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
362,"value = value.toUpperCase().replace(item, """" + i);","value=value.toUpperCase().replace(item,"""" + i);
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
363,String k = FileUtils.escapePathName(tblName).toLowerCase() + Path.SEPARATOR;,"String k=FileUtils.escapePathName(tblName).toLowerCase() + Path.SEPARATOR;
",0,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
364,"return text != null || ""|b|u|i|"".contains(""|"" + doc.getTagName(element).toLowerCase() + ""|"");","return text != null || ""|b|u|i|"".contains(""|"" + doc.getTagName(element).toLowerCase() + ""|"");
",0,10,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
365,"final String methodName = (bind ? """" : ""un"") + ""bind"" + referenceName.substring(0, 1).toUpperCase() + referenceName.substring(1);","final String methodName=(bind ? """" : ""un"") + ""bind"" + referenceName.substring(0,1).toUpperCase()+ referenceName.substring(1);
",0,0,15,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
366,"cond = EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(fieldName), fieldOp, EntityFunction.UPPER(((String)fieldValue).toUpperCase()));","cond=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(fieldName),fieldOp,EntityFunction.UPPER(((String)fieldValue).toUpperCase()));
",0,1,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
367,"boolean supportsGzip = (encoding != null && encoding.toLowerCase().indexOf(""gzip"") > -1);","boolean supportsGzip=(encoding != null && encoding.toLowerCase().indexOf(""gzip"") > -1);
",0,6,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
368,"this.indexName = clusterFig.getClusterName().toLowerCase() + ""_"" +","this.indexName=clusterFig.getClusterName().toLowerCase() + ""_"" + cassandraFig.getApplicationKeyspace().toLowerCase()+ ""_""+ coreIndexFig.getManagementAppIndexName().toLowerCase();
",0,1,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
369,"this.actionName = ""CREATE"" + ""_"" + command.toUpperCase();","this.actionName=""CREATE"" + ""_"" + command.toUpperCase();
",0,0,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
370,"&& !operator.equals(""<>"") && !operator.equals(""LIKE"") && !operator.equals(""like"") && !operator.toLowerCase().equals(""is"")) {","if (!operator.equals(""="") && !operator.equals(""<"") && !operator.equals("">"")&& !operator.equals(""<="")&& !operator.equals("">="")&& !operator.equals(""<>"")&& !operator.equals(""LIKE"")&& !operator.equals(""like"")&& !operator.toLowerCase().equals(""is"")) {
  throw new IllegalArgumentException(""criteria must end with valid SQL operator for WHERE: "" + trimmedCriteria);
}
",0,0,13,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
"
371,"Topic newTopic = new Topic(title, true, office.getId(), entityType, newRole.getName().toUpperCase());","Topic newTopic=new Topic(title,true,office.getId(),entityType,newRole.getName().toUpperCase());
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
372,"humanReadable = ""Every "" + recur.getInterval() + "" months on "" + nthDayName.getCode().toLowerCase() + "" ""","humanReadable=""Every "" + recur.getInterval() + "" months on ""+ nthDayName.getCode().toLowerCase()+ "" ""+ weekdayType.getCode().toLowerCase();
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
373,if (StringUtils.isNotBlank(command) && !RescheduleLoansApiConstants.commandParams.contains(command.toLowerCase())) {,"if (StringUtils.isNotBlank(command) && !RescheduleLoansApiConstants.commandParams.contains(command.toLowerCase())) {
  throw new UnrecognizedQueryParamException(""command"",command,new Object[]{RescheduleLoansApiConstants.allCommandParamName,RescheduleLoansApiConstants.pendingCommandParamName,RescheduleLoansApiConstants.approveCommandParamName,RescheduleLoansApiConstants.rejectCommandParamName});
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
374,"StringUtils.capitalize(accountType.toString().toLowerCase()) + "" account with identifier "" + id + "" does not exist"", id, e);","super(""error.msg."" + accountType.getCode().toLowerCase() + "".id.invalid"",StringUtils.capitalize(accountType.toString().toLowerCase()) + "" account with identifier "" + id+ "" does not exist"",id,e);
",0,1,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ),
SimpleName(InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(),
SimpleName(),
"
375,"return f.isDirectory() || name.toLowerCase().endsWith("".xml"") && !name.contains(""include"");","return f.isDirectory() || name.toLowerCase().endsWith("".xml"") && !name.contains(""include"");
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
376,"&& !build.trim().toUpperCase().equals(""N/A"") && props != null) {","if (project != null && build != null && !build.trim().toUpperCase().equals(""N/A"") && props != null) {
  File file=new File(props);
  if (file.exists()) {
    metricsManager=new MetricsManager(project,build,file);
    metricsManager.newRun();
    metricsManager.newMetric(""AMF Deserialization Time"",""ms"");
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
377,"if (selectExpr.getChild(0).getChild(0).getText().toLowerCase().equals(""default"")) {","if (selectExpr.getChild(0).getChild(0).getText().toLowerCase().equals(""default"")) {
  if (defaultConstraints == null) {
    defaultConstraints=getDefaultConstraints(targetTable,null);
  }
  ASTNode newNode=getNodeReplacementforDefault(defaultConstraints.get(i - 1));
  selectExpr.replaceChildren(0,0,newNode);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""DEFAULT keyword replacement - Inserted {} for table: {}"",newNode.getText(),targetTable.getTableName());
  }
}
",0,3,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
378,String columnType = children.get(1 - constIdx).getTypeString().toLowerCase();,"String columnType=children.get(1 - constIdx).getTypeString().toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
379,"return (getClient().getTable(tblName.toLowerCase(), false) != null);","return (getClient().getTable(tblName.toLowerCase(),false) != null);
",0,2,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
380,String table_name = getUnescapedName((ASTNode) ast.getChild(0).getChild(0)).toLowerCase();,"String table_name=getUnescapedName((ASTNode)ast.getChild(0).getChild(0)).toLowerCase();
",0,4,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
381,"&& valueClause.getChild(j).getChild(0).getText().toLowerCase().equals(""default"")) {","if (valueClause.getChild(j).getType() == HiveParser.TOK_TABLE_OR_COL && valueClause.getChild(j).getChild(0).getText().toLowerCase().equals(""default"")) {
  if (defaultConstraints == null) {
    defaultConstraints=getDefaultConstraints(targetTable,targetSchema);
  }
  ASTNode newNode=getNodeReplacementforDefault(defaultConstraints.get(j - 1));
  valueClause.replaceChildren(j,j,newNode);
  LOG.debug(""DEFAULT keyword replacement - Inserted {} for table: {}"",newNode.getText(),targetTable.getTableName());
}
",0,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
"
382,"genericName = (grandChild == null ? """" : grandChild.getText()).trim().toUpperCase();","genericName=(grandChild == null ? """" : grandChild.getText()).trim().toUpperCase();
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
383,"if (compare.toLowerCase().trim().startsWith(SPF1Constants.SPF_VERSION1 + "" "") || compare.trim().equalsIgnoreCase(SPF1Constants.SPF_VERSION1)) {","if (compare.toLowerCase().trim().startsWith(SPF1Constants.SPF_VERSION1 + "" "") || compare.trim().equalsIgnoreCase(SPF1Constants.SPF_VERSION1)) {
  if (returnValue == null) {
    returnValue=compare;
  }
 else {
    throw new PermErrorException(""More than 1 SPF record found"");
  }
}
",0,1,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
384,if (!nullKeyModes.contains(tableOptions.get(MAP_NULL_KEY_MODE).toUpperCase())) {,"if (!nullKeyModes.contains(tableOptions.get(MAP_NULL_KEY_MODE).toUpperCase())) {
  throw new ValidationException(String.format(""Unsupported value '%s' for option %s. Supported values are %s."",tableOptions.get(MAP_NULL_KEY_MODE),MAP_NULL_KEY_MODE.key(),nullKeyModes));
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
385,"executionState.name().toLowerCase(), perState[executionState.ordinal()]);","jsonGenerator.writeNumberField(executionState.name().toLowerCase(),perState[executionState.ordinal()]);
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(ArrayAccess-array, ),
SimpleName(MethodInvocation-expression, ArrayAccess-index, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, ),
"
386,return EncodingUtils.hex(x.getBytes(StandardCharsets.UTF_8)).toUpperCase();,"return EncodingUtils.hex(x.getBytes(StandardCharsets.UTF_8)).toUpperCase();
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
387,"final String month = source.substring(current, current + 3).toLowerCase();","final String month=source.substring(current,current + 3).toLowerCase();
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
388,"Configurable.class.getField(name.toUpperCase() + ""_KEY"");","Configurable.class.getField(name.toUpperCase() + ""_KEY"");
",0,0,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
389,"s = new String(b, bp, p - bp, ""ISO-8859-1"").toLowerCase();","s=new String(b,bp,p - bp,""ISO-8859-1"").toLowerCase();
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
390,"return pos > 0 ? raw.substring(0, pos).toLowerCase() : raw;","return pos > 0 ? raw.substring(0,pos).toLowerCase() : raw;
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
391,"if (isEmpty(raw) || !raw.contains("";"") || !raw.toLowerCase().contains(""charset"")) {","if (isEmpty(raw) || !raw.contains("";"") || !raw.toLowerCase().contains(""charset"")) {
  return null;
}
",0,3,9,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
392,"return fileName != null && (fileName.toLowerCase().endsWith("".jar"")","return fileName != null && (fileName.toLowerCase().endsWith("".jar"") || fileName.toLowerCase().endsWith("".war"") || fileName.toLowerCase().endsWith("".ear""));
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
393,return ((FullBulkStringRedisMessage) redisArray.children().get(index)),"return ((FullBulkStringRedisMessage)redisArray.children().get(index)).content().toString(CharsetUtil.UTF_8).toLowerCase();
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
394,"""SELECT DISTINCT * FROM "" + SEPARATOR + ""Keywords where \"""" + keywords[i].toUpperCase()","String qStr=""SELECT DISTINCT * FROM "" + SEPARATOR + ""Keywords where \""""+ keywords[i].toUpperCase()+ ""\""()"";
",0,0,6,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
"
395,"String[] inputQueryColumns = query.substring(startIndex, endIndex).toLowerCase().replaceAll("" "", """").split("","");","String[] inputQueryColumns=query.substring(startIndex,endIndex).toLowerCase().replaceAll("" "","""").split("","");
",0,3,13,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
396,if (arg.toLowerCase().startsWith(validArgs[i]) || arg.startsWith(validArgs[i])) {,"if (arg.toLowerCase().startsWith(validArgs[i]) || arg.startsWith(validArgs[i])) {
  String argValue=arg.substring(validArgs[i].length());
  if (validArgs[i].equals(""-dir="")) {
    sysDirName=argValue;
  }
 else   if (validArgs[i].equals(""-archive="")) {
    archiveOption.add(new File(argValue));
  }
 else   if (validArgs[i].equals(""-port="")) {
    portOption=argValue;
  }
 else   if (validArgs[i].equals(""-address="")) {
    addressOption=argValue;
  }
 else   if (validArgs[i].equals(""-region="")) {
    regionOption=argValue;
  }
 else   if (validArgs[i].equals(""-maxOplogSize="")) {
    maxOplogSize=parseLong(argValue);
  }
 else   if (validArgs[i].equals(""-lru="")) {
    lruOption=argValue;
  }
 else   if (validArgs[i].equals(""-lruAction="")) {
    lruActionOption=argValue;
  }
 else   if (validArgs[i].equals(""-lruLimit="")) {
    lruLimitOption=argValue;
  }
 else   if (validArgs[i].equals(""-concurrencyLevel="")) {
    concurrencyLevelOption=argValue;
  }
 else   if (validArgs[i].equals(""-initialCapacity="")) {
    initialCapacityOption=argValue;
  }
 else   if (validArgs[i].equals(""-loadFactor="")) {
    loadFactorOption=argValue;
  }
 else   if (validArgs[i].equals(""-compressor="")) {
    compressorClassNameOption=argValue;
  }
 else   if (validArgs[i].equals(""-statisticsEnabled="")) {
    statisticsEnabledOption=argValue;
  }
 else   if (validArgs[i].equals(""-properties="")) {
    gemfirePropertiesFileOption=argValue;
  }
 else   if (validArgs[i].equals(""-out="")) {
    outOption=argValue;
  }
 else   if (validArgs[i].equals(""-starttime="")) {
    startTime=parseTime(argValue);
  }
 else   if (validArgs[i].equals(""-endtime="")) {
    endTime=parseTime(argValue);
  }
 else   if (validArgs[i].equals(""-peer="")) {
    peerOption=""true"".equalsIgnoreCase(argValue);
  }
 else   if (validArgs[i].equals(""-server="")) {
    serverOption=""true"".equalsIgnoreCase(argValue);
  }
 else   if (validArgs[i].equals(""-hostname-for-clients="")) {
    hostnameForClientsOption=argValue;
  }
 else   if (validArgs[i].equals(""-D"")) {
    int idx=argValue.indexOf('=');
    String key=argValue.substring(0,idx);
    String value=argValue.substring(idx + 1);
    propertyOption.setProperty(key,value);
  }
 else   if (validArgs[i].equals(""-X"")) {
    xoptions.add(arg);
  }
 else   if (validArgs[i].equals(""-baseline="")) {
    baselineDir=argValue;
  }
 else   if (validArgs[i].equals(""-outputDir="")) {
    outputDir=argValue;
  }
 else {
    throw new InternalGemFireException(String.format(""unexpected valid option %s"",validArgs[i]));
  }
  return true;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
397,"if (validArgs[i].equals(""-h"") || validArgs[i].toLowerCase().matches(""-{0,2}help"")) {","if (validArgs[i].equals(""-h"") || validArgs[i].toLowerCase().matches(""-{0,2}help"")) {
  help=true;
}
 else if (validArgs[i].equals(""-debug"")) {
  debug=true;
}
 else if (validArgs[i].equals(""-remove"")) {
  remove=true;
}
 else if (validArgs[i].equals(""-q"")) {
  quiet=true;
}
 else if (validArgs[i].equals(""-details"")) {
  details=true;
}
 else if (validArgs[i].equals(""-nofilter"")) {
  nofilter=true;
}
 else if (validArgs[i].equals(""-persec"")) {
  persec=true;
}
 else if (validArgs[i].equals(""-persample"")) {
  persample=true;
}
 else if (validArgs[i].equals(""-prunezeros"")) {
  prunezeros=true;
}
 else if (validArgs[i].equals(""-monitor"")) {
  monitor=true;
}
 else if (validArgs[i].equalsIgnoreCase(""-buckets"")) {
  showBuckets=true;
}
 else if (validArgs[i].equals(""-all-threads"")) {
  printStacksOption=arg;
}
 else {
  throw new InternalGemFireException(String.format(""unexpected valid option %s"",validArgs[i]));
}
",0,0,9,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
398,"List<String> lines = format((String) helpMap.get(cmd.toLowerCase()), 80);","List<String> lines=format((String)helpMap.get(cmd.toLowerCase()),80);
",0,0,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
399,"String existing = String.join("" "", inputTokens.subList(1, inputTokens.size())).toLowerCase();","String existing=String.join("" "",inputTokens.subList(1,inputTokens.size())).toLowerCase();
",0,1,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
400,candidates.addAll(all.stream().filter(c -> c.getValue().toLowerCase().startsWith(existing)),"candidates.addAll(all.stream().filter(c -> c.getValue().toLowerCase().startsWith(existing)).map(c -> new Completion(prefix + c.getValue())).collect(Collectors.toList()));
",0,3,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
401,"Predicate<Path> logFileSelector = (Path file) -> file.toString().toLowerCase().contains("".log"");","Predicate<Path> logFileSelector=(Path file) -> file.toString().toLowerCase().contains("".log"");
",0,1,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, LambdaExpression-parameters, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SingleVariableDeclaration-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
402,"line.substring(indexFrom + 1, indexTo).toLowerCase().contains(permittedLogLevel);","boolean flag=line.substring(indexFrom + 1,indexTo).toLowerCase().contains(permittedLogLevel);
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
"
403,"String all = new String(out.toByteArray(), ""US-ASCII"").toUpperCase();","String all=new String(out.toByteArray(),""US-ASCII"").toUpperCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
404,"return fontUris.getEmbed().toASCIIString().toLowerCase().endsWith("".pfb"") || fontUris.getAfm() != null","return fontUris.getEmbed().toASCIIString().toLowerCase().endsWith("".pfb"") || fontUris.getAfm() != null || fontUris.getPfm() != null;
",0,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
405,"return getServletContext().getServerInfo().toLowerCase().indexOf(""jetty"") > -1 ? ""jetty"" : ""tomcat"";","return getServletContext().getServerInfo().toLowerCase().indexOf(""jetty"") > -1 ? ""jetty"" : ""tomcat"";
",0,1,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
406,"return artifactFile != null && artifactFile.isFile() && artifactFile.getName().toLowerCase().endsWith( "".jar"" );","return artifactFile != null && artifactFile.isFile() && artifactFile.getName().toLowerCase().endsWith("".jar"");
",0,5,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
407,"secretId = existingFunctionAuthData.map(functionAuthData -> new String(functionAuthData.getData())).orElseGet(() -> RandomStringUtils.random(5, true, true).toLowerCase());","secretId=existingFunctionAuthData.map(functionAuthData -> new String(functionAuthData.getData())).orElseGet(() -> RandomStringUtils.random(5,true,true).toLowerCase());
",0,2,14,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
408,"""|"" + d.mirrorUrl + ""[icon:download[] "" + d.name.replace(""Apache "", """") + "" "" + d.format.toUpperCase() + ""] "" +","System.out.println("""" + ""|"" + d.mirrorUrl + ""[icon:download[] ""+ d.name.replace(""Apache "","""")+ "" ""+ d.format.toUpperCase()+ ""] ""+ ""|""+ d.version+ ""|""+ new SimpleDateFormat(""d MMM yyyy"").format(Date.from(LocalDateTime.parse(d.date,RFC_1123_DATE_TIME).toInstant(ZoneOffset.UTC)))+ ""|""+ d.size+ "" MB ""+ ""|""+ d.asc+ ""[icon:download[] PGP] ""+ hash);
",0,1,11,,"StringLiteral(),
QualifiedName(),
StringLiteral(),
QualifiedName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, ),
StringLiteral(),
QualifiedName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(),
"
409,jobInstance.setState(status == null ? null : State.valueOf(status,"jobInstance.setState(status == null ? null : State.valueOf(status.toString().toUpperCase()));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
410,if (items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue() != null && NotAllowedOnTModels.containsKey(items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue().toLowerCase())) {,"if (items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue() != null && NotAllowedOnTModels.containsKey(items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue().toLowerCase())) {
  throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"",""Value ["" + items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey() + ""] not allowed on tModels for key ""+ key));
}
",0,4,20,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
411,"return root + ""."" + name.substring(0, 1).toUpperCase() + name.substring(1);","return root + ""."" + name.substring(0,1).toUpperCase()+ name.substring(1);
",0,0,10,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
412,return String.valueOf(accessorName.charAt(prefixLength)).toLowerCase() + accessorName.substring(prefixLength + 1);,"return String.valueOf(accessorName.charAt(prefixLength)).toLowerCase() + accessorName.substring(prefixLength + 1);
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
413,"return (T) Enum.valueOf(cls, value.toUpperCase().replace('-', '_'));","return (T)Enum.valueOf(cls,value.toUpperCase().replace('-','_'));
",0,1,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
414,"return super.getName().substring(4).replaceAll(""([A-Z])"", "" $1"").toLowerCase();","return super.getName().substring(4).replaceAll(""([A-Z])"","" $1"").toLowerCase();
",0,0,7,,"SimpleName(SuperMethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
415,"return schema.getCodecName().toUpperCase() + ""-"" +","return schema.getCodecName().toUpperCase() + ""-"" + schema.getNumDataUnits()+ ""-""+ schema.getNumParityUnits()+ ""-""+ cellSize / 1024 + ""k"";
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
416,"boolean wildfly =  productName == null || !productName.toLowerCase().contains(""eap"");","boolean wildfly=productName == null || !productName.toLowerCase().contains(""eap"");
",0,1,8,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
417,String opt = options[i][0].toLowerCase();,"String opt=options[i][0].toLowerCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
418,"aclType = Enum.valueOf(AclEntryType.class, split[index].toUpperCase());","aclType=Enum.valueOf(AclEntryType.class,split[index].toUpperCase());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
419,"return parameters.get(""op"").get(0).toUpperCase();","return parameters.get(""op"").get(0).toUpperCase();
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
420,"String groupId = ""group-"" + splits[splits.length-1].toUpperCase();","String groupId=""group-"" + splits[splits.length - 1].toUpperCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
421,"filter = Enum.valueOf(TaskLog.LogName.class, logFilter.toUpperCase());","filter=Enum.valueOf(TaskLog.LogName.class,logFilter.toUpperCase());
",0,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
422,"String[] genres = split[2].toLowerCase().split(""[|]"");","String[] genres=split[2].toLowerCase().split(""[|]"");
",0,0,8,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
423,"iri.scheme = factory.getScheme(get(SCHEME).toLowerCase(),this);","iri.scheme=factory.getScheme(get(SCHEME).toLowerCase(),this);
",0,1,7,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
424,"return cacheName.toLowerCase().contains(""fat-values"") ? ModelUtil.fatValueClasses() :","return cacheName.toLowerCase().contains(""fat-values"") ? ModelUtil.fatValueClasses() : ModelUtil.simpleValueClasses();
",0,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
"
425,"return scheme.isEmpty() ? fsCounter.name() : scheme.toUpperCase() + ""_"" + fsCounter.name();","return scheme.isEmpty() ? fsCounter.name() : scheme.toUpperCase() + ""_"" + fsCounter.name();
",0,2,9,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
426,Object arr[] = cache.get(charsetName.toUpperCase());,"Object arr[]=cache.get(charsetName.toUpperCase());
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
427,.filter(x -> x.srcAlias.equals(tabident.getText().toLowerCase())).findFirst();,"Optional<PickedExpression> exprOptional=pickedExpressionsPerCandidate.values().stream().filter(x -> x.containsKey(column)).map(x -> x.get(column)).flatMap(Collection::stream).filter(x -> x.srcAlias.equals(tabident.getText().toLowerCase())).findFirst();
",0,1,8,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
QualifiedName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(),
"
428,"n -> DataBlockEncoding.valueOf(n.toUpperCase()), DataBlockEncoding.NONE);","return getStringOrDefault(DATA_BLOCK_ENCODING_BYTES,n -> DataBlockEncoding.valueOf(n.toUpperCase()),DataBlockEncoding.NONE);
",0,0,6,,"SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
QualifiedName(),
"
429,"n -> MemoryCompactionPolicy.valueOf(n.toUpperCase()), null);","return getStringOrDefault(IN_MEMORY_COMPACTION_BYTES,n -> MemoryCompactionPolicy.valueOf(n.toUpperCase()),null);
",0,0,6,,"SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
NullLiteral(),
"
430,"return getStringOrDefault(BLOOMFILTER_BYTES, n -> BloomType.valueOf(n.toUpperCase()),","return getStringOrDefault(BLOOMFILTER_BYTES,n -> BloomType.valueOf(n.toUpperCase()),DEFAULT_BLOOMFILTER);
",0,0,7,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
"
431,"String rsPort = rs.split(ServerName.SERVERNAME_SEPARATOR)[0].toLowerCase() + "":"" + rs","String rsPort=rs.split(ServerName.SERVERNAME_SEPARATOR)[0].toLowerCase() + "":"" + rs.split(ServerName.SERVERNAME_SEPARATOR)[1];
",0,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
432,"String topicName = getTopicPrefix(conf) + ""."" + newTbl.getDbName().toLowerCase();","String topicName=getTopicPrefix(conf) + ""."" + newTbl.getDbName().toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
433,"(System.getProperty(""os.name"").toLowerCase()","File f=new File(System.getProperty(""user.home""),(System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1 ? """" : ""."") + ""beeline"").getAbsoluteFile();
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ),
"
434,String propName = m[i].getName().substring(3).toLowerCase();,"String propName=m[i].getName().substring(3).toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
435,"return (s == null) ? ""null"" : s.replaceAll(""[\\W]"", """").toLowerCase();","return (s == null) ? ""null"" : s.replaceAll(""[\\W]"","""").toLowerCase();
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
436,"else if (type.equalsIgnoreCase(""REAL"") || type.equalsIgnoreCase(""FLOAT"") || type.toUpperCase().startsWith(""DOUBLE"") ||","if (type.equalsIgnoreCase(""REAL"") || type.equalsIgnoreCase(""FLOAT"") || type.toUpperCase().startsWith(""DOUBLE"")|| type.equalsIgnoreCase(""BINARY_FLOAT"")|| type.toUpperCase().startsWith(""BINARY_DOUBLE"")|| type.equalsIgnoreCase(""SIMPLE_FLOAT"")|| type.toUpperCase().startsWith(""SIMPLE_DOUBLE"")) {
  return Type.DOUBLE;
}
 else if (type.equalsIgnoreCase(""DATE"")) {
  return Type.DATE;
}
 else if (type.equalsIgnoreCase(""TIMESTAMP"")) {
  return Type.TIMESTAMP;
}
 else if (type.equalsIgnoreCase(""BOOL"") || type.equalsIgnoreCase(""BOOLEAN"")) {
  return Type.BOOL;
}
 else if (type.equalsIgnoreCase(""SYS_REFCURSOR"")) {
  return Type.CURSOR;
}
 else if (type.equalsIgnoreCase(""UTL_FILE.FILE_TYPE"")) {
  return Type.FILE;
}
 else if (type.toUpperCase().startsWith(""RESULT_SET_LOCATOR"")) {
  return Type.RS_LOCATOR;
}
 else if (type.equalsIgnoreCase(Var.DERIVED_TYPE)) {
  return Type.DERIVED_TYPE;
}
 else if (type.equalsIgnoreCase(Type.HPL_OBJECT.name())) {
  return Type.HPL_OBJECT;
}
 else if (type.equalsIgnoreCase(Type.ROW.name())) {
  return Type.ROW;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
437,keys.add(evalPop(ctx.func_param(i).expr()).toString().toUpperCase());,"keys.add(evalPop(ctx.func_param(i).expr()).toString().toUpperCase());
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
438,"if (keys.contains(parts[i].split(""="")[0].toUpperCase())) {","if (keys.contains(parts[i].split(""="")[0].toUpperCase())) {
  if (k.length() > 0) {
    k.append(""/"");
  }
  k.append(parts[i]);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
439,"String partitionRelativeSrcPath = dbName.toLowerCase()+"".db"" + File.separator + ""ptned"" + File.separator + ""b=1"";","String partitionRelativeSrcPath=dbName.toLowerCase() + "".db"" + File.separator+ ""ptned""+ File.separator+ ""b=1"";
",0,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
440,"runAndAssertExitCode(ExitCode.SUCCESS, ""-o"", tempDir.getAbsolutePath(), ""-n"", TlsConfig.DEFAULT_HOSTNAME, ""-T"", KeystoreType.PKCS12.toString().toLowerCase(),","runAndAssertExitCode(ExitCode.SUCCESS,""-o"",tempDir.getAbsolutePath(),""-n"",TlsConfig.DEFAULT_HOSTNAME,""-T"",KeystoreType.PKCS12.toString().toLowerCase(),""-K"",""change"",""-S"",""change"",""-P"",""change"");
",0,1,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
441,"partitionRelativeSrcPath = dbName.toLowerCase()+"".db"" + File.separator + ""ptned"" + File.separator + ""b=2"";","partitionRelativeSrcPath=dbName.toLowerCase() + "".db"" + File.separator+ ""ptned""+ File.separator+ ""b=2"";
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
442,": new Path(replica.warehouseRoot, replicatedDbName.toLowerCase()  + "".db"" + ""/"" + tname );","Path tblPathOnTgt=customLocOntgt ? new Path(replDb.getManagedLocationUri(),tname) : new Path(replica.warehouseRoot,replicatedDbName.toLowerCase() + "".db"" + ""/""+ tname);
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
QualifiedName(ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
"
443,".getFileStatus(new Path(locationPathTarget, "".snapshot"" + ""/"" + firstSnapshot(primaryDbName.toLowerCase()))));","assertNotNull(dfsTarget.getFileStatus(new Path(locationPathTarget,"".snapshot"" + ""/"" + firstSnapshot(primaryDbName.toLowerCase()))));
",0,0,8,,"SimpleName(),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(ClassInstanceCreation-arguments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ),
"
444,"String dbName = ""hive"" + this.getClass().getSimpleName().toLowerCase();","String dbName=""hive"" + this.getClass().getSimpleName().toLowerCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
445,"assertFalse(tableName + "" should not appear"", res.output.toLowerCase().contains(tableName));","assertFalse(tableName + "" should not appear"",res.output.toLowerCase().contains(tableName));
",0,0,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
446,"assertTrue(res.output.toLowerCase().contains(""no current connection""));","assertTrue(res.output.toLowerCase().contains(""no current connection""));
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
447,"Literal value = con.getValueFactory().createLiteral(propValue, loc != null ? loc.getLanguage().toLowerCase() : null);","Literal value=con.getValueFactory().createLiteral(propValue,loc != null ? loc.getLanguage().toLowerCase() : null);
",0,3,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
448,"execFetchFirst(""select * from "" + dataTypeTableName, dataTypeTableName.toLowerCase() + ""."" + ""c4"", false);","execFetchFirst(""select * from "" + dataTypeTableName,dataTypeTableName.toLowerCase() + ""."" + ""c4"",false);
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
449,"return ""sqlserver"".equalsIgnoreCase(metastoreType) ? ""MSSQL"" : metastoreType.toUpperCase();","return ""sqlserver"".equalsIgnoreCase(metastoreType) ? ""MSSQL"" : metastoreType.toUpperCase();
",0,0,6,,"StringLiteral(MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
450,"Arrays.stream(JmsPropertySetterEnum.values()).forEach(e -> propertySetterMap.put(e.name().toLowerCase(), e));","Arrays.stream(JmsPropertySetterEnum.values()).forEach(e -> propertySetterMap.put(e.name().toLowerCase(),e));
",0,2,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
451,rootNode.addtoMemoizedString(next.getType() != HiveParser.StringLiteral ? str.toLowerCase() : str);,"rootNode.addtoMemoizedString(next.getType() != HiveParser.StringLiteral ? str.toLowerCase() : str);
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
452,rootNode.addtoMemoizedString((next.getType() == HiveParser.StringLiteral || null == str) ? str :  str.toLowerCase());,"rootNode.addtoMemoizedString((next.getType() == HiveParser.StringLiteral || null == str) ? str : str.toLowerCase());
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
453,(new StringBuilder().append(dbName).append('.').append(table.getTableName())).toString().toLowerCase();,"String dbAndTableName=(new StringBuilder().append(dbName).append('.').append(table.getTableName())).toString().toLowerCase();
",0,0,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
454,"List<String> elements = Arrays.asList(input.trim().toLowerCase().split(""\\s""));","List<String> elements=Arrays.asList(input.trim().toLowerCase().split(""\\s""));
",0,1,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
455,"tableName.getTable().toLowerCase(), (short) -1);","List<String> parts=context.getDb().getPartitionNames(tableName.getDb().toLowerCase(),tableName.getTable().toLowerCase(),(short)-1);
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
PrimitiveType(CastExpression-type, ),
NumberLiteral(PrefixExpression-operand, CastExpression-expression, ),
"
456,"children.add(new ExprNodeColumnDesc(pti, entry.getKey().toLowerCase(), null, true));","children.add(new ExprNodeColumnDesc(pti,entry.getKey().toLowerCase(),null,true));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
457,"functionName, functionType, (Class<? extends UDF>) udfClass, false, functionName.toLowerCase(), resources);","return registerUDF(functionName,functionType,(Class<? extends UDF>)udfClass,false,functionName.toLowerCase(),resources);
",0,0,9,,"SimpleName(),
SimpleName(),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(CastExpression-expression, ),
BooleanLiteral(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(),
"
458,"Function func = Hive.get(conf).getFunction(parts[0].toLowerCase(), parts[1]);","Function func=Hive.get(conf).getFunction(parts[0].toLowerCase(),parts[1]);
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
459,String message = e.getMessage() == null ? null : e.getMessage().toLowerCase();,"String message=e.getMessage() == null ? null : e.getMessage().toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
460,"return TableName.fromString(tableName, null, dbName).getNotEmptyDbTable().toLowerCase();","return TableName.fromString(tableName,null,dbName).getNotEmptyDbTable().toLowerCase();
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
461,"String c = StringUtils.split(s, '.')[0].toLowerCase();","String c=StringUtils.split(s,'.')[0].toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
462,"this(new String[] {tbl.getDbName(), FileUtils.escapePathName(tbl.getTableName()).toLowerCase()}, lockData);","this(new String[]{tbl.getDbName(),FileUtils.escapePathName(tbl.getTableName()).toLowerCase()},lockData);
",0,5,10,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ConstructorInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
"
463,"aggregations.add(new AggregationDesc(udafAttr.udafName.toLowerCase(), udafAttr.udafEvaluator,","aggregations.add(new AggregationDesc(udafAttr.udafName.toLowerCase(),udafAttr.udafEvaluator,udafAttr.udafParams,udafAttr.isDistinctUDAF,amode));
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
464,"colList.add(new Order(unescapeIdentifier(child.getChild(0).getText()).toLowerCase(), directionCode));","colList.add(new Order(unescapeIdentifier(child.getChild(0).getText()).toLowerCase(),directionCode));
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
465,String tab_alias = unescapeIdentifier(gByExpr.getChild(0).getChild(0),"String tab_alias=unescapeIdentifier(gByExpr.getChild(0).getChild(0).getText().toLowerCase());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
466,"expr.getChildCount() == 0 ? null : getUnescapedName((ASTNode) expr.getChild(0)).toLowerCase(),","pos=genRexNodeRegex("".*"",expr.getChildCount() == 0 ? null : getUnescapedName((ASTNode)expr.getChild(0)).toLowerCase(),expr,columnList,excludedColumns,inputRR,starRR,pos,outputRR,qb.getAliases(),true);
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
467,String foldString = conf.getChild(URL_CASE_FOLDING_KEY).getValue(URLCaseFolding.NONE.name()).toLowerCase();,"String foldString=conf.getChild(URL_CASE_FOLDING_KEY).getValue(URLCaseFolding.NONE.name()).toLowerCase();
",0,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
468,if (list[i] != null && list[i].toLowerCase().equals(elem)) {,"if (list[i] != null && list[i].toLowerCase().equals(elem)) {
  return i;
}
",0,0,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
469,assertTrue(rangeWhere.substring(((CommonToken) parsed.getToken()).getStopIndex() + 1),"assertTrue(rangeWhere.substring(((CommonToken)parsed.getToken()).getStopIndex() + 1).toLowerCase().contains(dTimeWhereClause));
",0,3,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
470,"get(getUnescapedName((ASTNode) ast.getChild(0), ts.tableHandle.getDbName()).toLowerCase()) != null);","isTableWrittenTo|=(qb.getParseInfo().getInsertOverwriteTables().get(getUnescapedName((ASTNode)ast.getChild(0),ts.tableHandle.getDbName()).toLowerCase()) != null);
",0,1,10,,"SimpleName(),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NullLiteral(),
"
471,"if (ast.getChildCount() >= 2 && ast.getChild(1).getText().toLowerCase().equals(""local"")) {","if (ast.getChildCount() >= 2 && ast.getChild(1).getText().toLowerCase().equals(""local"")) {
  isDfsFile=false;
}
",0,2,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
472,String colAlias = unescapeIdentifier(((ASTNode) collist.getChild(i)),"String colAlias=unescapeIdentifier(((ASTNode)collist.getChild(i)).getText()).toLowerCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
473,String colAlias = unescapeIdentifier(((ASTNode) child.getChild(0)),"String colAlias=unescapeIdentifier(((ASTNode)child.getChild(0)).getText()).toLowerCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
474,: unescapeIdentifier(child.getChild(child.getChildCount() - 1),"String alias=child.getChildCount() == 1 ? tableName : unescapeIdentifier(child.getChild(child.getChildCount() - 1).getText().toLowerCase());
",0,0,6,,"SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
"
475,return getUnescapedUnqualifiedTableName((ASTNode) node.getChild(0)).toLowerCase();,"return getUnescapedUnqualifiedTableName((ASTNode)node.getChild(0)).toLowerCase();
",0,0,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
476,return unescapeIdentifier(node.getChild(i).getText().toLowerCase());,"return unescapeIdentifier(node.getChild(i).getText().toLowerCase());
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
477,"rwsch.put(alias, vc.getName().toLowerCase(), new ColumnInfo(vc.getName(),","rwsch.put(alias,vc.getName().toLowerCase(),new ColumnInfo(vc.getName(),vc.getTypeInfo(),alias,true,vc.getIsHidden()));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
478,"String name = (grandChild == null ? """" : grandChild.getText()).trim().toUpperCase();","String name=(grandChild == null ? """" : grandChild.getText()).trim().toUpperCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
479,if (!availableCommands.contains(cmd[0].trim().toLowerCase())) {,"if (!availableCommands.contains(cmd[0].trim().toLowerCase())) {
  throw new SQLException(""Insufficient privileges to execute "" + cmd[0],""42000"");
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
480,"String prefix = FileUtils.escapePathName(table.getDbName()).toLowerCase() + ""."" +","String prefix=FileUtils.escapePathName(table.getDbName()).toLowerCase() + ""."" + FileUtils.escapePathName(table.getTableName()).toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
481,return MillisIn.valueOf(((String) o).toUpperCase()).millis;,"return MillisIn.valueOf(((String)o).toUpperCase()).millis;
",0,1,6,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, ReturnStatement-expression, ),
"
482,return cache.query(new SqlFieldsQuery(sql)).getAll().get(0).get(0).toString().toLowerCase();,"return cache.query(new SqlFieldsQuery(sql)).getAll().get(0).get(0).toString().toLowerCase();
",0,3,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
483,"throw new UDFArgumentTypeException(1,getFuncName().toUpperCase() + "" scale argument for ""","throw new UDFArgumentTypeException(1,getFuncName().toUpperCase() + "" scale argument for "" + ""decimal must be constant"");
",0,3,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
484,"if (r.length()<6 || !r.substring(0, 6).toLowerCase().equals(""select""))","if (r.length() < 6 || !r.substring(0,6).toLowerCase().equals(""select"")) {
  r=""select "" + r;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
485,"this.scheme = scheme == null || scheme.isEmpty() ? """" : scheme.toUpperCase();","this.scheme=scheme == null || scheme.isEmpty() ? """" : scheme.toUpperCase();
",0,0,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
486,"Path bucket = AcidUtils.createBucketFile(new Path(new Path(getWarehouseDir(), table.toString().toLowerCase()), AcidUtils.deltaSubdir(writeId, writeId, stmtId)), bucketNum);","Path bucket=AcidUtils.createBucketFile(new Path(new Path(getWarehouseDir(),table.toString().toLowerCase()),AcidUtils.deltaSubdir(writeId,writeId,stmtId)),bucketNum);
",0,1,16,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
487,"FileStatus[] fileStatuses = fs.globStatus(new Path(TEST_WAREHOUSE_DIR + ""/"" + Table.ACIDTBL.name().toLowerCase() + ""","FileStatus[] fileStatuses=fs.globStatus(new Path(TEST_WAREHOUSE_DIR + ""/"" + Table.ACIDTBL.name().toLowerCase()+ ""/*""));
",0,4,12,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
488,"status = fs.listStatus(new Path(TEST_WAREHOUSE_DIR + ""/"" + tblName.toString().toLowerCase()),","status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + ""/"" + tblName.toString().toLowerCase()),FileUtils.HIDDEN_FILES_PATH_FILTER);
",0,1,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
489,"System.getProperty(SYS_PROP_METASTORE_DB) == null ? ""derby"" : System.getProperty(SYS_PROP_METASTORE_DB)","String metastoreType=System.getProperty(SYS_PROP_METASTORE_DB) == null ? ""derby"" : System.getProperty(SYS_PROP_METASTORE_DB).toLowerCase();
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
"
490,"new Path(getWarehouseDir(), Table.ACIDTBLPART.toString().toLowerCase()), true, hiveConf);","FileUtil.copy(fs,new Path(getWarehouseDir() + ""/"" + ""mybackup""+ ""/p=p1""),fs,new Path(getWarehouseDir(),Table.ACIDTBLPART.toString().toLowerCase()),true,hiveConf);
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
BooleanLiteral(),
SimpleName(),
"
491,"assertEquals(fieldNames2.get(i - 3).toLowerCase(), fields.get(i)","assertEquals(fieldNames2.get(i - 3).toLowerCase(),fields.get(i).getFieldName());
",0,0,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
492,pkColNames.contains(column.getName().toLowerCase()) ? DatabaseMetaData.columnNoNulls,"Object[] rowData=new Object[]{null,table.getDbName(),table.getTableName(),column.getName(),column.getType().toJavaSQLType(),column.getTypeName(),column.getTypeDescriptor().getColumnSize(),null,column.getTypeDescriptor().getDecimalDigits(),column.getType().getNumPrecRadix(),pkColNames.contains(column.getName().toLowerCase()) ? DatabaseMetaData.columnNoNulls : DatabaseMetaData.columnNullable,column.getComment(),null,null,null,null,column.getOrdinalPosition(),pkColNames.contains(column.getName().toLowerCase()) ? ""NO"" : ""YES"",null,null,null,null,""NO""};
",0,0,6,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ),
QualifiedName(ConditionalExpression-thenExpression, ),
"
493,"return ""<div class=\""restriction\"" title=\""name or id of a"" + (VOWELS.contains(type.getSimpleName().toLowerCase().charAt(0)) ? ""n "" : "" "") + type.getSimpleName() + ""\"">string</div>"";","return ""<div class=\""restriction\"" title=\""name or id of a"" + (VOWELS.contains(type.getSimpleName().toLowerCase().charAt(0)) ? ""n "" : "" "") + type.getSimpleName()+ ""\"">string</div>"";
",0,1,13,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
494,"if (Strings.nullToEmpty(System.getProperty(""os.name"")).toLowerCase().contains(""mac"")) {","if (Strings.nullToEmpty(System.getProperty(""os.name"")).toLowerCase().contains(""mac"")) {
  osxTestOpts=Strings.nullToEmpty(System.getenv(OSX_TEST_OPTS));
}
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
495,"String opcode = utype.name().split(""_"")[1].toLowerCase();","String opcode=utype.name().split(""_"")[1].toLowerCase();
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
496,String catName = request.isSetCatName() ? request.getCatName().toLowerCase() : getDefaultCatalog(conf);,"String catName=request.isSetCatName() ? request.getCatName().toLowerCase() : getDefaultCatalog(conf);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
497,statsDesc.setCatName(statsDesc.isSetCatName() ? statsDesc.getCatName().toLowerCase() : getDefaultCatalog(conf));,"statsDesc.setCatName(statsDesc.isSetCatName() ? statsDesc.getCatName().toLowerCase() : getDefaultCatalog(conf));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
498,assert catName.equals(catName.toLowerCase());,"assert catName.equals(catName.toLowerCase());
",0,0,4,,"SimpleName(MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, AssertStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, AssertStatement-expression, ),
"
499,"String anyTypeKind = task.getAnyTypeKind() == null ? ""realm"" : task.getAnyTypeKind().name().toLowerCase();","String anyTypeKind=task.getAnyTypeKind() == null ? ""realm"" : task.getAnyTypeKind().name().toLowerCase();
",0,4,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
500,"if (path.getName().endsWith(""."" + format.toString().toLowerCase())) {","if (path.getName().endsWith(""."" + format.toString().toLowerCase())) {
  paths.add(path.toString());
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
501,this.type = InputType.valueOf(getDataType().get(TYPE_KEY).getAsString().toUpperCase());,"this.type=InputType.valueOf(getDataType().get(TYPE_KEY).getAsString().toUpperCase());
",0,1,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
502,this.col = el.hasAttribute(COLUMN_ATTR) ? el.getAttribute(COLUMN_ATTR).trim() : name.toLowerCase();,"this.col=el.hasAttribute(COLUMN_ATTR) ? el.getAttribute(COLUMN_ATTR).trim() : name.toLowerCase();
",0,0,11,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
503,"loadColIdxs.put(col.toUpperCase(), idx++);","loadColIdxs.put(col.toUpperCase(),idx++);
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
504,"rows.add(Arrays.<Object>asList((String)null, s.getKey().toUpperCase(),","rows.add(Arrays.<Object>asList((String)null,s.getKey().toUpperCase(),t.getKey().toUpperCase(),""_KEY"",1,""_KEY""));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
505,"return left(ori.toLowerCase().replaceAll(""[^a-zA-Z0-9-_\\.]"", ""-"").replaceAll(""^[^a-zA-Z0-9]"", ""0"").replaceAll(""[^a-zA-Z0-9]$"", ""0""), maxLabelSize);","return left(ori.toLowerCase().replaceAll(""[^a-zA-Z0-9-_\\.]"",""-"").replaceAll(""^[^a-zA-Z0-9]"",""0"").replaceAll(""[^a-zA-Z0-9]$"",""0""),maxLabelSize);
",0,1,13,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
506,sb.a(m.name().toLowerCase()).a('=').a(m.bit(flags));,"sb.a(m.name().toLowerCase()).a('=').a(m.bit(flags));
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
507,"indexesCol.add(new GridCacheQueryManager.CacheSqlIndexMetadata(e.getKey().toUpperCase(),","indexesCol.add(new GridCacheQueryManager.CacheSqlIndexMetadata(e.getKey().toUpperCase(),idxFields,descendings,false));
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
508,"if (uppercaseProps.put(name.toUpperCase(), prop) != null && failOnDuplicate)","if (uppercaseProps.put(name.toUpperCase(),prop) != null && failOnDuplicate) throw new IgniteCheckedException(""Property with upper cased name '"" + name + ""' already exists."");
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
509,return ((idx >= 0) ? taskName.substring(idx + 1) : taskName).toLowerCase().contains(s);,"return ((idx >= 0) ? taskName.substring(idx + 1) : taskName).toLowerCase().contains(s);
",0,0,10,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
510,"Enumeration<URL> pluginUrls = ldr.getResources(""META-INF/"" + plugin.name().toLowerCase()","Enumeration<URL> pluginUrls=ldr.getResources(""META-INF/"" + plugin.name().toLowerCase() + "".classnames.properties"");
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
511,"assertEquals((GridBinaryTestClass1.class.getName() + ""$InnerClass"").toLowerCase().hashCode(),","assertEquals((GridBinaryTestClass1.class.getName() + ""$InnerClass"").toLowerCase().hashCode(),mapper.typeId(GridBinaryTestClass1.class.getName() + ""$InnerClass""));
",0,4,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
512,"String plan = cache.query(new SqlFieldsQuery(""explain select _key from Geometry where _val && ?"")","String plan=cache.query(new SqlFieldsQuery(""explain select _key from Geometry where _val && ?"").setArgs(r.read(""POLYGON((5 70, 5 80, 30 80, 30 70, 5 70))"")).setLocal(true)).getAll().get(0).get(0).toString().toLowerCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
513,"String plan = cache.query(new SqlFieldsQuery(""explain select * from EnemyCamp "" +","String plan=cache.query(new SqlFieldsQuery(""explain select * from EnemyCamp "" + ""where coords && 'POINT(25 75)'"")).getAll().get(0).get(0).toString().toLowerCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
514,"return validColsStr == null ? null : new HashSet<>(Arrays.asList(StringUtils.split(validColsStr.toLowerCase(),","return validColsStr == null ? null : new HashSet<>(Arrays.asList(StringUtils.split(validColsStr.toLowerCase(),',')));
",0,13,10,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
515,"ClientCache<Integer, Person> cache = client.cache(""SQL_PUBLIC_"" + TBL.toUpperCase());","ClientCache<Integer,Person> cache=client.cache(""SQL_PUBLIC_"" + TBL.toUpperCase());
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
516,"GenericValue productContentType = EntityQuery.use(delegator).from(""ProductContentType"").where(""productContentTypeId"", ""XTRA_IMG_"" + viewNumber + ""_"" + sizeType.toUpperCase()).cache().queryOne();","GenericValue productContentType=EntityQuery.use(delegator).from(""ProductContentType"").where(""productContentTypeId"",""XTRA_IMG_"" + viewNumber + ""_""+ sizeType.toUpperCase()).cache().queryOne();
",0,2,16,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
517,"String plan = cache.query(new SqlFieldsQuery(""explain select min(_key), max(_key) from Val"")).getAll()","String plan=cache.query(new SqlFieldsQuery(""explain select min(_key), max(_key) from Val"")).getAll().get(0).get(0).toString().toUpperCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
518,"String plan = qryProc.querySqlFields(new SqlFieldsQuery(sql), true)","String plan=qryProc.querySqlFields(new SqlFieldsQuery(sql),true).getAll().get(0).get(0).toString().toUpperCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
519,? (!plan.contains(SCAN_INDEX_NAME_SUFFIX) && plan.contains(idxName.toUpperCase())),"return idxName != null ? (!plan.contains(SCAN_INDEX_NAME_SUFFIX) && plan.contains(idxName.toUpperCase())) : !plan.contains(SCAN_INDEX_NAME_SUFFIX);
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
520,"return cache.query(new SqlFieldsQuery(""EXPLAIN "" + sql).setSchema(POI_SCHEMA_NAME))","return cache.query(new SqlFieldsQuery(""EXPLAIN "" + sql).setSchema(POI_SCHEMA_NAME)).getAll().get(0).get(0).toString().toLowerCase();
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
521,"m.appendReplacement(sb, ':' + m.group(1).toLowerCase() + '(');","m.appendReplacement(sb,':' + m.group(1).toLowerCase() + '(');
",0,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
522,"setText(NbBundle.getMessage(JShellOptions2.class, ""JShellOptions.loader."" + pol.name().toLowerCase()));","setText(NbBundle.getMessage(JShellOptions2.class,""JShellOptions.loader."" + pol.name().toLowerCase()));
",0,1,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
523,"checkPrecisionAndScale(SalaryWithAnnotations.class.getSimpleName().toUpperCase(), ""amount"", PRECISION, SCALE);","checkPrecisionAndScale(SalaryWithAnnotations.class.getSimpleName().toUpperCase(),""amount"",PRECISION,SCALE);
",0,0,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
524,"assertTrue(""__ explain: \n"" + res, ((String) res.get(0).get(0)).toLowerCase().contains(""_val_idx""));","assertTrue(""__ explain: \n"" + res,((String)res.get(0).get(0)).toLowerCase().contains(""_val_idx""));
",0,6,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
525,String res = ((String)result.get(0).get(0)).toLowerCase();,"String res=((String)result.get(0).get(0)).toLowerCase();
",0,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
526,return sql.toLowerCase(),"return sql.toLowerCase().replaceAll(""/\\*(?:.|\r|\n)*?\\*/"","" "").replaceAll(""\\s*on\\s+1\\s*=\\s*1\\s*"","" on true "").replaceAll(""\\s+"","" "").replaceAll(""\\( +"",""("").replaceAll("" +\\)"","")"").trim();
",0,0,2,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
527,"if (node instanceof Element && ""a"".equals(node.getNodeName().toLowerCase())) {","if (node instanceof Element && ""a"".equals(node.getNodeName().toLowerCase())) {
  Element element=(Element)node;
  String href=element.getAttribute(""href"");
  if (href != null && !href.isEmpty()) {
    URL url=null;
    try {
      url=new URL(href);
    }
 catch (    MalformedURLException e) {
      try {
        url=new URL(baseUrl.getProtocol(),baseUrl.getHost(),baseUrl.getPort(),href.charAt(0) == '/' ? href : baseUrl.getFile() + '/' + href);
      }
 catch (      MalformedURLException e1) {
        U.error(scanCtx.getLogger(),""Skipping bad URL: "" + href,e1);
      }
    }
    if (url != null)     res.add(url.toString());
  }
}
",0,0,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
528,"workflows = conn.fetchWorkflows(WorkflowFields.valueOf(field), sortDir.toUpperCase().equals(PostgresConnector.SORT_ASC), offset, limit);","workflows=conn.fetchWorkflows(WorkflowFields.valueOf(field),sortDir.toUpperCase().equals(PostgresConnector.SORT_ASC),offset,limit);
",0,0,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
529,"Assert.assertEquals(dbEntity.get(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME), dbName.toLowerCase() + ""@"" + CLUSTER_NAME);","Assert.assertEquals(dbEntity.get(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME),dbName.toLowerCase() + ""@"" + CLUSTER_NAME);
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
530,"Assert.assertEquals(colEntity.get(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME), String.format(""%s.%s.%s@%s"", dbName.toLowerCase(),","Assert.assertEquals(colEntity.get(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME),String.format(""%s.%s.%s@%s"",dbName.toLowerCase(),tableName.toLowerCase(),colName.toLowerCase(),CLUSTER_NAME));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
531,@Override public String toString() { return super.toString().toLowerCase(); },"return super.toString().toLowerCase();
",0,0,2,,"SimpleName(SuperMethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
"
532,"cache.put(clazz.getAnnotation(Alias.class).value().toUpperCase(), clazz);","cache.put(clazz.getAnnotation(Alias.class).value().toUpperCase(),clazz);
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
533,} else if (recordSplit.get(i).isEmpty() || recordSplit.get(i).toLowerCase().equals(NULL)) {,"if (recordSplit.get(i).isEmpty() || recordSplit.get(i).toLowerCase().equals(NULL)) {
  outputRecord.add(outputSchema.get(i).getAsJsonObject().get(""columnName"").getAsString(),JsonNull.INSTANCE);
}
 else {
  outputRecord.addProperty(outputSchema.get(i).getAsJsonObject().get(""columnName"").getAsString(),recordSplit.get(i));
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
534,this.tableType = TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());,"this.tableType=TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());
",0,3,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
535,"return Arrays.asList(watermarkColumn.toLowerCase().split("","")).size() > 1;","return Arrays.asList(watermarkColumn.toLowerCase().split("","")).size() > 1;
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
536,.valueOf(this.dataset.getProperties().getProperty(DELETE_FILES_ON_DEREGISTER).toUpperCase()),"this.deleteMethod=this.dataset.getProperties().containsKey(DELETE_FILES_ON_DEREGISTER) ? DeregisterFileDeleteMethod.valueOf(this.dataset.getProperties().getProperty(DELETE_FILES_ON_DEREGISTER).toUpperCase()) : DEFAULT_DEREGISTER_DELETE_METHOD;
",0,0,7,,"SimpleName(),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
537,"Schema schema = this.parseSchemaFromTypeInfo(fieldTypeInfo, recordNamespace + ""."" + recordName.toLowerCase(),","Schema schema=this.parseSchemaFromTypeInfo(fieldTypeInfo,recordNamespace + ""."" + recordName.toLowerCase(),StringUtils.capitalize(fieldName));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
538,"Preconditions.checkArgument(this.indexName.equals(this.indexName.toLowerCase()),","Preconditions.checkArgument(this.indexName.equals(this.indexName.toLowerCase()),""Index name must be lowercase, you provided "" + this.indexName);
",0,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
539,String indexType = (recordVariant.getName()+malformedDocPolicy.name()).toLowerCase();,"String indexType=(recordVariant.getName() + malformedDocPolicy.name()).toLowerCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
540,"Enums.getIfPresent(Deserializers.class, props.getProperty(KAFKA_DESERIALIZER_TYPE).toUpperCase());","Optional<Deserializers> deserializerType=Enums.getIfPresent(Deserializers.class,props.getProperty(KAFKA_DESERIALIZER_TYPE).toUpperCase());
",0,0,7,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
541,String type = this.getDataType().get(itemKey).getAsString().toUpperCase();,"String type=this.getDataType().get(itemKey).getAsString().toUpperCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
542,"this.workUnitState.getProp(ConfigurationKeys.SOURCE_QUERYBASED_WATERMARK_TYPE, ""TIMESTAMP"").toUpperCase());","WatermarkType wmType=WatermarkType.valueOf(this.workUnitState.getProp(ConfigurationKeys.SOURCE_QUERYBASED_WATERMARK_TYPE,""TIMESTAMP"").toUpperCase());
",0,0,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
543,ColumnNameCase caseType = ColumnNameCase.valueOf(this.workUnitState,"ColumnNameCase caseType=ColumnNameCase.valueOf(this.workUnitState.getProp(ConfigurationKeys.SOURCE_COLUMN_NAME_CASE,ConfigurationKeys.DEFAULT_COLUMN_NAME_CASE).toUpperCase());
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
544,"Destination dest = Destination.of(DestinationType.valueOf(destType.toUpperCase()), this.state);","Destination dest=Destination.of(DestinationType.valueOf(destType.toUpperCase()),this.state);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
545,"return AUTO_GENERATED_HASH_PREFIX + DigestUtils.sha256Hex(text).substring(0, AUTO_GENERATED_HASH_LENGTH)","return AUTO_GENERATED_HASH_PREFIX + DigestUtils.sha256Hex(text).substring(0,AUTO_GENERATED_HASH_LENGTH).toUpperCase();
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
546,"return build(Dimension.COUNTRY.toString(), FilterOperator.EQUALS.toString().toLowerCase(), countryCode);","return build(Dimension.COUNTRY.toString(),FilterOperator.EQUALS.toString().toLowerCase(),countryCode);
",0,0,7,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
547,"return null != input ? input.toLowerCase() : """";","return null != input ? input.toLowerCase() : """";
",0,0,5,,"NullLiteral(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
548,"return Enums.getIfPresent(HttpDatasetDescriptor.Platform.class, getPlatform().toUpperCase()).isPresent();","return Enums.getIfPresent(HttpDatasetDescriptor.Platform.class,getPlatform().toUpperCase()).isPresent();
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
549,Optional<String> adjustedTable = ignoreCase && table.isPresent() ? Optional.of(table.get().toLowerCase()) : table;,"Optional<String> adjustedTable=ignoreCase && table.isPresent() ? Optional.of(table.get().toLowerCase()) : table;
",0,0,12,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
550,if (!this.topologyName.equals(this.topologyName.toLowerCase())) {,"if (!this.topologyName.equals(this.topologyName.toLowerCase())) {
  LOG.log(Level.SEVERE,""Marathon scheduler does not allow upper case topologies"");
  return false;
}
",0,0,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
551,"fun.accept(String.format(""%s-%d"", alphabet[i].toUpperCase(), i));","fun.accept(String.format(""%s-%d"",alphabet[i].toUpperCase(),i));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
552,clonedStreamlet.get(1).map((String month) -> month.toUpperCase());,"clonedStreamlet.get(1).map((String month) -> month.toUpperCase());
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SingleVariableDeclaration-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
553,".forEach((k, v) -> res.put(new Text(k.toString().toLowerCase()), v));","getCurrentValue(deviceIdList,currentIndex,timestamp,isReadTime,isReadDeviceId,fields,measurementIds).forEach((k,v) -> res.put(new Text(k.toString().toLowerCase()),v));
",0,0,10,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, ),
"
554,final String dataType = ctx.dataType().getChild(0).getText().toUpperCase();,"final String dataType=ctx.dataType().getChild(0).getText().toUpperCase();
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
555,String indicator = args[i + 1].toLowerCase();,"String indicator=args[i + 1].toLowerCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
556,"if (map.containsKey(RW_MODE) && map.get(RW_MODE).toLowerCase().equals(""rw"")) {","if (map.containsKey(RW_MODE) && map.get(RW_MODE).toLowerCase().equals(""rw"")) {
  mode=Protos.Volume.Mode.RW;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
557,final FieldParser<? extends ParsedField> field = parsers.get(name.toLowerCase());,"final FieldParser<? extends ParsedField> field=parsers.get(name.toLowerCase());
",0,2,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
558,SortType sortType = sortTypeStr != null ? SortType.valueOf(sortTypeStr.toUpperCase()) : SortType.NAME;,"SortType sortType=sortTypeStr != null ? SortType.valueOf(sortTypeStr.toUpperCase()) : SortType.NAME;
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
559,(arguments.size() >= 3) ? ((LiteralTransformFunction) arguments.get(2)).getLiteral().toUpperCase(),"String inputTimeUnitStr=(arguments.size() >= 3) ? ((LiteralTransformFunction)arguments.get(2)).getLiteral().toUpperCase() : TimeUnit.MILLISECONDS.name();
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
"
560,arguments.size() >= 5 ? ((LiteralTransformFunction) arguments.get(4)).getLiteral().toUpperCase(),"String outputTimeUnitStr=arguments.size() >= 5 ? ((LiteralTransformFunction)arguments.get(4)).getLiteral().toUpperCase() : inputTimeUnitStr;
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
"
561,"TimeUnit.valueOf(((LiteralTransformFunction) arguments.get(1)).getLiteral().toUpperCase()),","_timeUnitTransformer=TimeUnitTransformerFactory.getTimeUnitTransformer(TimeUnit.valueOf(((LiteralTransformFunction)arguments.get(1)).getLiteral().toUpperCase()),((LiteralTransformFunction)arguments.get(2)).getLiteral());
",0,0,8,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
562,"return AggregationFunctionType.COUNTMV.getName().toLowerCase() + ""("" + _expression + "")"";","return AggregationFunctionType.COUNTMV.getName().toLowerCase() + ""("" + _expression+ "")"";
",0,0,6,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
563,"return AggregationFunctionType.DISTINCT.getName().toLowerCase() + ""("" + AggregationFunctionUtils","return AggregationFunctionType.DISTINCT.getName().toLowerCase() + ""("" + AggregationFunctionUtils.concatArgs(_columns)+ "")"";
",0,0,5,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
564,TimeUnit inputTimeUnit = TimeUnit.valueOf(timeConvertOperands.get(1).getLiteral().getStringValue().toUpperCase());,"TimeUnit inputTimeUnit=TimeUnit.valueOf(timeConvertOperands.get(1).getLiteral().getStringValue().toUpperCase());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
565,"""New"" + StringUtils.capitalize(dataType.toString().toLowerCase()) + (singleValue ? ""SV"" : ""MV"") + ""Dimension"";","String column=""New"" + StringUtils.capitalize(dataType.toString().toLowerCase()) + (singleValue ? ""SV"" : ""MV"")+ ""Dimension"";
",0,0,10,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
"
566,"String column = ""New"" + StringUtils.capitalize(dataType.toString().toLowerCase()) + ""Metric"";","String column=""New"" + StringUtils.capitalize(dataType.toString().toLowerCase()) + ""Metric"";
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
567,"return dists.getFileObject(name.toLowerCase().replace(""_"", ""-"") + "".jar"", false);","return dists.getFileObject(name.toLowerCase().replace(""_"",""-"") + "".jar"",false);
",0,1,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
568,"FieldType.valueOf(config.getString(Column.getKeyFor(column, Column.COLUMN_TYPE)).toUpperCase());","FieldType fieldType=FieldType.valueOf(config.getString(Column.getKeyFor(column,Column.COLUMN_TYPE)).toUpperCase());
",0,0,9,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
569,"return envVarEntry.getKey().substring(6).replace(""_"", ""."").toLowerCase();","return envVarEntry.getKey().substring(6).replace(""_"",""."").toLowerCase();
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
570,"TimeUnit unit = TimeUnit.valueOf(configuration.get(BLUR_SHARD_METRICS_REPORTER_PREFIX + ""csv."" + ""unit"", ""SECONDS"")","TimeUnit unit=TimeUnit.valueOf(configuration.get(BLUR_SHARD_METRICS_REPORTER_PREFIX + ""csv."" + ""unit"",""SECONDS"").toUpperCase());
",0,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
571,"String value = get(key, String.valueOf(defaultValue)).trim().toLowerCase();","String value=get(key,String.valueOf(defaultValue)).trim().toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
572,"result = new StdAttributeValue<String>(XACML.ID_DATATYPE_STRING, convertedArguments.get(0)","result=new StdAttributeValue<String>(XACML.ID_DATATYPE_STRING,convertedArguments.get(0).toLowerCase());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
573,return accountStoreBasePath + File.separator + id.getAddress().toLowerCase(),"return accountStoreBasePath + File.separator + id.getAddress().toLowerCase()+ ACCOUNT_FILE_EXTENSION;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
574,"return e.getTagName().toLowerCase().equals(""br"") && !NodeManager.hasBackReference(e);","return e.getTagName().toLowerCase().equals(""br"") && !NodeManager.hasBackReference(e);
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
575,"&& e.<Element>cast().getTagName().toLowerCase().equals(""a"")) {","if (e != null && !DomHelper.isTextNode(e) && e.<Element>cast().getTagName().toLowerCase().equals(""a"")) {
  FocusedPointRange<Node> selection=editorInteractor.getHtmlSelection();
  if (selection.isCollapsed() && selection.getFocus().getTextOffset() == 0) {
    editorInteractor.noteWebkitEndOfLinkHackOccurred(textNode);
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
"
576,"return f.isDirectory() || f.getName().toLowerCase().endsWith(""."" + DEFAULT_EXPORT_TYPE);","return f.isDirectory() || f.getName().toLowerCase().endsWith(""."" + DEFAULT_EXPORT_TYPE);
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
577,"update.newPathChange(authzObj.toLowerCase() + ""."" + childObj).addToDelPaths(","update.newPathChange(authzObj.toLowerCase() + ""."" + childObj).addToDelPaths(Lists.newArrayList(PathsUpdate.ALL_PATHS));
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
578,return restrictedColsStr == null ? new HashSet<>() : new HashSet<>(Arrays.asList(StringUtils.split(restrictedColsStr,"return restrictedColsStr == null ? new HashSet<>() : new HashSet<>(Arrays.asList(StringUtils.split(restrictedColsStr.toLowerCase(),',')));
",0,1,9,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
579,switch (System.getenv(BackendConfigKeys.PRIORITIZED_PROTOCOL).toLowerCase()) {,"switch (System.getenv(BackendConfigKeys.PRIORITIZED_PROTOCOL).toLowerCase()) {
case ""mqtt"":
  protocolList=Arrays.asList(SpProtocol.MQTT,SpProtocol.KAFKA,SpProtocol.JMS);
break;
case ""kafka"":
protocolList=Arrays.asList(SpProtocol.KAFKA,SpProtocol.MQTT,SpProtocol.JMS);
break;
case ""jms"":
protocolList=Arrays.asList(SpProtocol.JMS,SpProtocol.KAFKA,SpProtocol.MQTT);
break;
default :
protocolList=Arrays.asList(SpProtocol.KAFKA,SpProtocol.MQTT,SpProtocol.JMS);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, SwitchStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
"
580,"join(SiddhiConstants.EMPTY, ""'"", order.toString().toLowerCase(), ""'""))));","return join(SiddhiConstants.EMPTY,windowExpression(),""sort"",windowValue(join(SiddhiConstants.COMMA,String.valueOf(windowValue),property.toSiddhiEpl(),join(SiddhiConstants.EMPTY,""'"",order.toString().toLowerCase(),""'""))));
",0,0,7,,"SimpleName(MethodInvocation-name, ),
QualifiedName(MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, ),
"
581,"boolean isPopProtocol = this.config.getProtocol().toLowerCase().indexOf(""pop"") > -1;","boolean isPopProtocol=this.config.getProtocol().toLowerCase().indexOf(""pop"") > -1;
",0,1,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
582,"if (""PARCEL"".equals(serviceCode.toUpperCase()) && (weightPounds.compareTo(BigDecimal.ONE) < 0)) {","if (""PARCEL"".equals(serviceCode.toUpperCase()) && (weightPounds.compareTo(BigDecimal.ONE) < 0)) {
  weightPounds=BigDecimal.ONE;
  packageWeight=BigDecimal.ZERO;
}
",0,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
583,"String serialNumber = new BigInteger(1, ((X509Certificate) certs[0])","String serialNumber=new BigInteger(1,((X509Certificate)certs[0]).getSerialNumber().toByteArray()).toString(16).toUpperCase();
",0,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
584,"String serialNumber = new BigInteger(1, cert.getSerialNumber()","String serialNumber=new BigInteger(1,cert.getSerialNumber().toByteArray()).toString(16).toUpperCase();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
585,"if(s.contains(""mimetype"")||s.toLowerCase().contains(""license"")||s.contains("".ro"")){","if (s.contains(""mimetype"") || s.toLowerCase().contains(""license"") || s.contains("".ro"")) {
}
 else {
  if (!set.contains(s)) {
    this.infoWarningList.add(path.toString());
  }
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
586,"String cName = ""'"" + escapeName(c.getClass().getSimpleName().toLowerCase());","String cName=""'"" + escapeName(c.getClass().getSimpleName().toLowerCase());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
587,"return new BigInteger(1, cert.getSerialNumber().toByteArray())","return new BigInteger(1,cert.getSerialNumber().toByteArray()).toString(16).toUpperCase();
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
588,"|| !strDataFormat.toLowerCase().equals(""binary"")) { throw new Exception(","throw new Exception(""Unsupported workflow data format. Details:\nContent encoding: "" + strEncoding + ""\nFormat: ""+ strDataFormat);
",0,0,1,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, ),
"
589,"StringBuffer strBuff = new StringBuffer(new BigInteger(1, bFingerPrint)","StringBuffer strBuff=new StringBuffer(new BigInteger(1,bFingerPrint).toString(16).toUpperCase());
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
590,"return ""A"" + ("" "" + managedObject.getSpecification().getSingularName()).toLowerCase();","return ""A"" + ("" "" + managedObject.getSpecification().getSingularName()).toLowerCase();
",0,0,6,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
591,"val fileName = String.format(""%s.%s"", pathsToInclude.name(), snapshotType.name().toLowerCase());","val fileName=String.format(""%s.%s"",pathsToInclude.name(),snapshotType.name().toLowerCase());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
592,"final String swaggerSpecName = fileNamePrefix + ""-"" + visibility + ""."" + format.name().toLowerCase();","final String swaggerSpecName=fileNamePrefix + ""-"" + visibility+ "".""+ format.name().toLowerCase();
",0,0,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
593,"super(property, checkProhibited(value.toLowerCase()));","super(property,checkProhibited(value.toLowerCase()));
",0,0,4,,"SimpleName(SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, SuperConstructorInvocation-arguments, ),
"
594,String resultColumnName = (StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();,"String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();
",0,1,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
595,"list.set(0, Sync.Command.valueOf(cmd.toUpperCase()));","list.set(0,Sync.Command.valueOf(cmd.toUpperCase()));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
596,"return prefix + name.substring(0, 1).toUpperCase() + name.substring(1);","return prefix + name.substring(0,1).toUpperCase() + name.substring(1);
",0,0,9,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
597,sb.append(';').append(e.option.toString().toLowerCase());,"sb.append(';').append(e.option.toString().toLowerCase());
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
598,PackageTask.Type type = PackageTask.Type.valueOf(elem.getAttribute(ATTR_CMD).toUpperCase());,"PackageTask.Type type=PackageTask.Type.valueOf(elem.getAttribute(ATTR_CMD).toUpperCase());
",0,0,8,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
599,"setProperty(PROP_SYNC_ONCE, syncOnce == null ? """" : syncOnce.name().toLowerCase());","setProperty(PROP_SYNC_ONCE,syncOnce == null ? """" : syncOnce.name().toLowerCase());
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
600,"try (ContentSession cs = login(new SimpleCredentials(USER_ID.toUpperCase(), new char[0]))) {","try (ContentSession cs=login(new SimpleCredentials(USER_ID.toUpperCase(),new char[0]))){
  root.refresh();
  assertUser(userManager,idp);
}
 ",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
601,"assertEquals(Normalizer.normalize(id.toLowerCase(), Normalizer.Form.NFKC), user.getID());","assertEquals(Normalizer.normalize(id.toLowerCase(),Normalizer.Form.NFKC),user.getID());
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
602,"TokenInfo info = tp.createToken(userId.toUpperCase(), Collections.<String, Object>emptyMap());","TokenInfo info=tp.createToken(userId.toUpperCase(),Collections.<String,Object>emptyMap());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
603,"String continent = a.getProperty(""continent"")[0].getString().toLowerCase();","String continent=a.getProperty(""continent"")[0].getString().toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
604,"if (spfRecord.toLowerCase().startsWith(SPF1Constants.SPF_VERSION1 + "" "") || spfRecord.equalsIgnoreCase(SPF1Constants.SPF_VERSION1)) {","if (spfRecord.toLowerCase().startsWith(SPF1Constants.SPF_VERSION1 + "" "") || spfRecord.equalsIgnoreCase(SPF1Constants.SPF_VERSION1)) {
  if (!spfRecord.toLowerCase().startsWith(SPF1Constants.SPF_VERSION1 + "" ""))   throw new NeutralException(""Empty SPF Record"");
}
 else {
  throw new NoneException(""No valid SPF Record: "" + spfRecord);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
605,"if (!spfRecord.toLowerCase().startsWith(SPF1Constants.SPF_VERSION1 + "" "")) throw new NeutralException(""Empty SPF Record"");","if (!spfRecord.toLowerCase().startsWith(SPF1Constants.SPF_VERSION1 + "" "")) throw new NeutralException(""Empty SPF Record"");
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
606,"return flagCleartext == null || !""extern"".equals(flagCleartext.toLowerCase().trim());","return flagCleartext == null || !""extern"".equals(flagCleartext.toLowerCase().trim());
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
607,"toSign.append(HttpUtils.nullToEmpty(request.getHeaders().get(""Range"")).toLowerCase()).append(""\n"");","toSign.append(HttpUtils.nullToEmpty(request.getHeaders().get(""Range"")).toLowerCase()).append(""\n"");
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
608,"return returnValue != null ? new JsonBall(returnValue.toString().replaceAll(""[ -]"", """").toLowerCase()) : null;","return returnValue != null ? new JsonBall(returnValue.toString().replaceAll(""[ -]"","""").toLowerCase()) : null;
",0,0,10,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
609,"return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, name()).toLowerCase();","return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,name()).toLowerCase();
",0,0,5,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
610,String stringToSign = Joiner.on('&').join(builder.build()).toLowerCase();,"String stringToSign=Joiner.on('&').join(builder.build()).toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
611,"private static final String name = System.getProperty(""user.name"").replace('.', '-').toLowerCase();","private static final String name=System.getProperty(""user.name"").replace('.','-').toLowerCase();
",0,3,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
612,"assertEquals(firewallRule.getName(), String.format(""jclouds-test-%s-fw-rule-%s"", this.getClass().getCanonicalName().toLowerCase(), inboundPort));","assertEquals(firewallRule.getName(),String.format(""jclouds-test-%s-fw-rule-%s"",this.getClass().getCanonicalName().toLowerCase(),inboundPort));
",0,6,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
613,"stringToSign.append(request.getFirstHeaderOrNull(HttpHeaders.HOST).toLowerCase()).append(""\n"");","stringToSign.append(request.getFirstHeaderOrNull(HttpHeaders.HOST).toLowerCase()).append(""\n"");
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
614,"builder.put(String.format(format, i + 1), checkNotNull(values[i], format.toLowerCase() + ""s["" + i + ""]""));","builder.put(String.format(format,i + 1),checkNotNull(values[i],format.toLowerCase() + ""s["" + i+ ""]""));
",0,0,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
615,"builder.put(prefix + ""."" + (i++ + 1), checkNotNull(o.toString(), prefix.toLowerCase() + ""s["" + i + ""]""));","builder.put(prefix + ""."" + (i++ + 1),checkNotNull(o.toString(),prefix.toLowerCase() + ""s["" + i+ ""]""));
",0,0,14,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
616,if (!(s == null || s.toLowerCase().equals(s))) {,"if (!(s == null || s.toLowerCase().equals(s))) {
  throw new IllegalArgumentException(String.format(""Object '%s' doesn't match the lower case"",s));
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
617,"this.headers.put(""x-ms-blob-public-access"", access.name().toLowerCase());","this.headers.put(""x-ms-blob-public-access"",access.name().toLowerCase());
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
618,return new ImageTemplateBuilder.CloneImageTemplateBuilder().nodeId(id).name(name.toLowerCase()).build();,"return new ImageTemplateBuilder.CloneImageTemplateBuilder().nodeId(id).name(name.toLowerCase()).build();
",0,0,7,,"QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
619,"private static final String lbName = String.format(""lb-%s-%s"", LoadBalancerApiLiveTest.class.getSimpleName()","private static final String lbName=String.format(""lb-%s-%s"",LoadBalancerApiLiveTest.class.getSimpleName().toLowerCase(),System.getProperty(""user.name""));
",0,3,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
620,RAND + StorageAccountApiLiveTest.class.getSimpleName().toLowerCase());,"private static final String NAME=String.format(""%3.24s"",RAND + StorageAccountApiLiveTest.class.getSimpleName().toLowerCase());
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
"
621,"String upperCamelValue = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_UNDERSCORE, value.toLowerCase());","String upperCamelValue=CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_UNDERSCORE,value.toLowerCase());
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
622,"int ttl = creepyGeoRegionGroup.ttl.get(type.toLowerCase() + ""_ttl"");","int ttl=creepyGeoRegionGroup.ttl.get(type.toLowerCase() + ""_ttl"");
",0,0,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
623,return image.platform().toUpperCase().startsWith(OsFamily.WINDOWS.name());,"return image.platform().toUpperCase().startsWith(OsFamily.WINDOWS.name());
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
624,"Optional<Status> status = Enums.getIfPresent(InstanceStatus.Status.class, value.toUpperCase());","Optional<Status> status=Enums.getIfPresent(InstanceStatus.Status.class,value.toUpperCase());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
625,canonicalizedHeadersBuffer.append(key.toLowerCase()).append(':').append(header.getValue()).append('\n');,"canonicalizedHeadersBuffer.append(key.toLowerCase()).append(':').append(header.getValue()).append('\n');
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
626,String propertyName = headerName.substring(PROPERTY.asHeader().length() + 1).toLowerCase();,"String propertyName=headerName.substring(PROPERTY.asHeader().length() + 1).toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
627,return HEADER_PREFIX + name().charAt(0) + name().substring(1).toLowerCase();,"return HEADER_PREFIX + name().charAt(0) + name().substring(1).toLowerCase();
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
628,{ return new ExprVar(exprVar.getVarName().toUpperCase()) ; },"return new ExprVar(exprVar.getVarName().toUpperCase());
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, Block-statements, ),
"
629,"return f.isDirectory() || (f.getName().toLowerCase().endsWith("".jar"") && isOSGiBundle(f));","return f.isDirectory() || (f.getName().toLowerCase().endsWith("".jar"") && isOSGiBundle(f));
",0,3,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
630,return (allowDirs && f.isDirectory()) || accept(f.getName().toLowerCase());,"return (allowDirs && f.isDirectory()) || accept(f.getName().toLowerCase());
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
631,String appendString = ((CompoundVariable) values[2]).execute().toLowerCase().trim();,"String appendString=((CompoundVariable)values[2]).execute().toLowerCase().trim();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
632,"String unit = limitRate.substring(limitRate.length() - 1, limitRate.length()).toLowerCase();","String unit=limitRate.substring(limitRate.length() - 1,limitRate.length()).toLowerCase();
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
633,"int value = Integer.parseInt(limitRate.substring(0, limitRate.length() - 1).toLowerCase());","int value=Integer.parseInt(limitRate.substring(0,limitRate.length() - 1).toLowerCase());
",0,5,11,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
634,"new PhrasePair(new BasicPhrase((byte) 1, pp.getF().toString().toLowerCase()),","PhrasePair lowercase_pp=new PhrasePair(new BasicPhrase((byte)1,pp.getF().toString().toLowerCase()),new BasicPhrase((byte)1,pp.getE().toString().toLowerCase()),pp.getAlignment());
",0,0,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ),
PrimitiveType(CastExpression-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
NumberLiteral(CastExpression-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
"
635,"new BasicPhrase((byte) 1, pp.getE().toString().toLowerCase()), pp.getAlignment());","PhrasePair lowercase_pp=new PhrasePair(new BasicPhrase((byte)1,pp.getF().toString().toLowerCase()),new BasicPhrase((byte)1,pp.getE().toString().toLowerCase()),pp.getAlignment());
",0,0,9,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
PrimitiveType(CastExpression-type, ClassInstanceCreation-arguments, ),
NumberLiteral(CastExpression-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
636,final String[] groupActions = actions.toLowerCase().split( ACTION_SEPARATOR );,"final String[] groupActions=actions.toLowerCase().split(ACTION_SEPARATOR);
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
637,"final String[] pageActions = actions.toLowerCase().split( "","" );","final String[] pageActions=actions.toLowerCase().split("","");
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
638,if( wikiname.toLowerCase().contains( m_queries[ j ].word ) && m_queries[j].type != QueryItem.FORBIDDEN ) {,"if (wikiname.toLowerCase().contains(m_queries[j].word) && m_queries[j].type != QueryItem.FORBIDDEN) {
  scores[j]+=5;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
639,"(DynamicQuery.WILDCARD + KeyGenerator.KEYGENERATOR_SUFFIX).toUpperCase(),","DynamicQuery.Parameter keyParam=new DynamicQuery.Parameter(""UPPER(t.entityKey)"",(DynamicQuery.WILDCARD + KeyGenerator.KEYGENERATOR_SUFFIX).toUpperCase(),DynamicQuery.PREDICATE_LIKE);
",0,0,3,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
640,"String partition = keygenKey.toUpperCase().substring(0, keygenKey.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));","String partition=keygenKey.toUpperCase().substring(0,keygenKey.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
641,"if (!replicationConfiguration.getOperator().get(i).getSoapReplicationURL().toLowerCase().startsWith(""http"")) {","if (!replicationConfiguration.getOperator().get(i).getSoapReplicationURL().toLowerCase().startsWith(""http"")) {
  throw new InvalidValueException(new ErrorMessage(""errors.replication.contactNull"",""Replication URL is invalid, only HTTP is supported""));
}
",0,4,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
642,&& NotAllowedOnTModels.containsKey(items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getKeyValue().toLowerCase())) {,"if (items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getKeyValue() != null && NotAllowedOnTModels.containsKey(items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getKeyValue().toLowerCase())) {
  throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"",""Value ["" + items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey() + ""] not allowed on tModels for key ""+ key));
}
",0,0,14,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
643,"cpb.setIf(! ""DEFAULT"".equalsIgnoreCase(a.asideFloat()), HTMLDOC_asideFloat, a.asideFloat().toUpperCase());","cpb.setIf(!""DEFAULT"".equalsIgnoreCase(a.asideFloat()),HTMLDOC_asideFloat,a.asideFloat().toUpperCase());
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
644,"props.put(""type"", topic.substring(topic.lastIndexOf(""/"") + 1).toLowerCase());","props.put(""type"",topic.substring(topic.lastIndexOf(""/"") + 1).toLowerCase());
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
645,"return metadata != null && (checkTableExists(tableName.toLowerCase(), metadata));","return metadata != null && (checkTableExists(tableName.toLowerCase(),metadata));
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
646,this.systemService.setFramework(FrameworkType.valueOf(framework.toLowerCase()));,"this.systemService.setFramework(FrameworkType.valueOf(framework.toLowerCase()));
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
647,"return super.toString().toLowerCase().replace('_', '-');","return super.toString().toLowerCase().replace('_','-');
",0,0,5,,"SimpleName(SuperMethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
648,"return doCreate(getValidPath(path, false, true), ignoreIfExists)","return doCreate(getValidPath(path,false,true),ignoreIfExists).getStatus().toString().toLowerCase();
",0,0,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
649,"return doUpdate(entity, getValidPath(path, false, true))","return doUpdate(entity,getValidPath(path,false,true)).getStatus().toString().toLowerCase();
",0,0,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
650,"return getClass().getSimpleName().substring(4, getClass().getSimpleName().indexOf(""Command"")).toLowerCase();","return getClass().getSimpleName().substring(4,getClass().getSimpleName().indexOf(""Command"")).toLowerCase();
",0,0,9,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
651,"this.alterTablePartitionCache((Storage.getPrefix(storageName) + cubeTableName).toLowerCase(), updatePeriod,","this.alterTablePartitionCache((Storage.getPrefix(storageName) + cubeTableName).toLowerCase(),updatePeriod,storageTableName);
",0,1,8,,"ThisExpression(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
652,if (typeStr == null || CubeTableType.valueOf(typeStr.toUpperCase()) != type) {,"if (typeStr == null || CubeTableType.valueOf(typeStr.toUpperCase()) != type) {
  if (throwException) {
    throw new LensException(LensCubeErrorCode.ENTITY_NOT_FOUND.getLensErrorInfo(),typeName,tableName);
  }
 else {
    return null;
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
653,"allSegmentations.put(segmentName.trim().toLowerCase(), new Segmentation(refreshTable(segmentName)));","allSegmentations.put(segmentName.trim().toLowerCase(),new Segmentation(refreshTable(segmentName)));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
654,return attributeMap.get(attr == null ? attr : attr.toLowerCase());,"return attributeMap.get(attr == null ? attr : attr.toLowerCase());
",0,0,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
655,"CubeMeasure cm = new ColumnMeasure(new FieldSchema(xm.getName(), xm.getType().name().toLowerCase(),","CubeMeasure cm=new ColumnMeasure(new FieldSchema(xm.getName(),xm.getType().name().toLowerCase(),xm.getDescription()),xm.getDisplayString(),xm.getFormatString(),xm.getDefaultAggr(),xm.getUnit(),startDate,endDate,null,xm.getMin(),xm.getMax(),mapFromXProperties(xm.getTags()));
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
656,if (!(prop.toLowerCase().startsWith(MetastoreConstants.SEGMENTATION_KEY_PFX))) {,"if (!(prop.toLowerCase().startsWith(MetastoreConstants.SEGMENTATION_KEY_PFX))) {
  props.put(prop,mapFromXProperties(seg.getProperties()).get(prop));
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
657,"List<String> list = StringUtils.isBlank(str) ? null : Arrays.asList(StringUtils.split(str.toLowerCase(), "",""));","List<String> list=StringUtils.isBlank(str) ? null : Arrays.asList(StringUtils.split(str.toLowerCase(),"",""));
",0,2,14,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
658,"refColToDim.computeIfAbsent(col.toLowerCase(), k -> Sets.newHashSet()).add(dim);","refColToDim.computeIfAbsent(col.toLowerCase(),k -> Sets.newHashSet()).add(dim);
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
659,"allExprsQueried.computeIfAbsent(expr.getExprCol().getName().toLowerCase(), k -> new LinkedHashSet<>()).add(expr);","allExprsQueried.computeIfAbsent(expr.getExprCol().getName().toLowerCase(),k -> new LinkedHashSet<>()).add(expr);
",0,1,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
660,colname = ((ASTNode) node.getChild(0)).getText().toLowerCase();,"colname=((ASTNode)node.getChild(0)).getText().toLowerCase();
",0,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
661,"validDimTables = StringUtils.isBlank(str) ? null : Arrays.asList(StringUtils.split(str.toLowerCase(), "",""));","validDimTables=StringUtils.isBlank(str) ? null : Arrays.asList(StringUtils.split(str.toLowerCase(),"",""));
",0,0,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
662,"double weight = driver.getConf().getDouble(UPDATE_PERIOD_WEIGHT_PREFIX + updatePeriod.name().toLowerCase(),","double weight=driver.getConf().getDouble(UPDATE_PERIOD_WEIGHT_PREFIX + updatePeriod.name().toLowerCase(),updatePeriod.getNormalizationFactor());
",0,0,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
663,assertTrue(client.getAllFacts(client.getCube(VIRTUAL_CUBE_NAME)).get(0).getName().equals(virtualFactName.trim(),"assertTrue(client.getAllFacts(client.getCube(VIRTUAL_CUBE_NAME)).get(0).getName().equals(virtualFactName.trim().toLowerCase()));
",0,1,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
664,"assertFalse(rangeWhere.substring(0, ((CommonToken) parsed.getToken()).getStartIndex())","assertFalse(rangeWhere.substring(0,((CommonToken)parsed.getToken()).getStartIndex()).toLowerCase().contains(""and""));
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
665,dataBase = TestRemoteHiveDriver.class.getSimpleName().toLowerCase();,"dataBase=TestRemoteHiveDriver.class.getSimpleName().toLowerCase();
",0,0,4,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
666,|| (filterByQueryName && !context.getQueryName().toLowerCase().contains(queryName)),"if ((!statuses.contains(context.getStatus().getStatus())) || (filterByQueryName && !context.getQueryName().toLowerCase().contains(queryName)) || (filterByDriver && !context.getSelectedDriver().getFullyQualifiedName().equalsIgnoreCase(driver))|| (!""all"".equalsIgnoreCase(userName) && !userName.equalsIgnoreCase(context.getSubmittedUser()))|| (!(fromTime <= querySubmitTime && querySubmitTime < toTime))) {
  itr.remove();
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
667,"String command = ""add "" + resource.getType().toLowerCase() + "" "" + resource.getUri();","String command=""add "" + resource.getType().toLowerCase() + "" ""+ resource.getUri();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
668,"String finalLocation = ss.add_resource(SessionState.ResourceType.valueOf(type.toUpperCase()), path);","String finalLocation=ss.add_resource(SessionState.ResourceType.valueOf(type.toUpperCase()),path);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
669,"return invocationOnMock.getArguments()[0].toString().toLowerCase().contains(""cube"");","return invocationOnMock.getArguments()[0].toString().toLowerCase().contains(""cube"");
",0,0,7,,"SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
670,"boolean new_index = (clear != null && clear.toLowerCase().equals(""true"")) ? true","boolean new_index=(clear != null && clear.toLowerCase().equals(""true"")) ? true : false;
",0,1,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
671,"ret.protocol = urlStr.substring(pidx, idx).toLowerCase();","ret.protocol=urlStr.substring(pidx,idx).toLowerCase();
",0,1,6,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
672,this.headerPrefix = annotation != null ? ((HeaderPrefix) annotation).value().toLowerCase() : DEFAULT_HEADER_PREFIX;,"this.headerPrefix=annotation != null ? ((HeaderPrefix)annotation).value().toLowerCase() : DEFAULT_HEADER_PREFIX;
",0,0,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
673,return mapping.getScope() == Scope.CHAIN && !mappings.containsKey(mapping.getChainKey().toLowerCase());,"return mapping.getScope() == Scope.CHAIN && !mappings.containsKey(mapping.getChainKey().toLowerCase());
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
674,"stats = PigRunner.run(new String[] { ""-x"", cluster.getExecType().name().toLowerCase(),","stats=PigRunner.run(new String[]{""-x"",cluster.getExecType().name().toLowerCase(),""-f"",scriptFile.getAbsolutePath(),""arg0"",file1 + "","" + file2},null);
",0,2,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
675,} else if(loc != null && ((Literal)node).getLanguage() != null && ((Literal)node).getLanguage().equals(loc.getLanguage().toLowerCase()) ) {,"if (loc != null && ((Literal)node).getLanguage() != null && ((Literal)node).getLanguage().equals(loc.getLanguage().toLowerCase())) {
  return (Literal)node;
}
",0,1,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
676,if(loc == null || ((Literal)t.getObject()).getLanguage().equals(loc.getLanguage().toLowerCase())) {,"if (loc == null || ((Literal)t.getObject()).getLanguage().equals(loc.getLanguage().toLowerCase())) {
  remove.add(t);
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
677,final String lang = loc == null ? null : loc.getLanguage().toLowerCase();,"final String lang=loc == null ? null : loc.getLanguage().toLowerCase();
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
678,"resultRow.addBinding(sv.getSparqlName(), new LiteralImpl(svalue.toLowerCase(), XSD.Boolean));","resultRow.addBinding(sv.getSparqlName(),new LiteralImpl(svalue.toLowerCase(),XSD.Boolean));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
679,"if(!(dialect instanceof H2Dialect) && System.getProperty(database.toLowerCase()+"".url"") != null) {","if (!(dialect instanceof H2Dialect) && System.getProperty(database.toLowerCase() + "".url"") != null) {
  config=new KiWiConfiguration(database,System.getProperty(database.toLowerCase() + "".url""),System.getProperty(database.toLowerCase() + "".user"",""kiwi""),System.getProperty(database.toLowerCase() + "".pass"",""kiwi""),dialect);
}
 else if (dialect instanceof H2Dialect) {
  config=new KiWiConfiguration(""default-H2"",""jdbc:h2:mem:kiwitest;MVCC=true;DB_CLOSE_ON_EXIT=TRUE;DB_CLOSE_DELAY=-1"",""kiwi"",""kiwi"",dialect);
}
 else {
  return null;
}
",0,3,8,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
680,"final String transitUri = String.format(""%s:","final String transitUri=String.format(""%s://%s:%d"",protocol.toString().toLowerCase(),LOCALHOST_ADDRESS,port);
",0,1,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
681,"if(endpoint.getName().replaceAll(""[^A-Za-z0-9 ]"", """").toLowerCase().equals(id)) return endpoint;","if (endpoint.getName().replaceAll(""[^A-Za-z0-9 ]"","""").toLowerCase().equals(id)) return endpoint;
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
682,"responseBuilder.header(""Content-Disposition"", String.format(""attachment; filename=\""%s.%s\"""", queryType.toString().toLowerCase(), fmt.getDefaultFileExtension()));","responseBuilder.header(""Content-Disposition"",String.format(""attachment; filename=\""%s.%s\"""",queryType.toString().toLowerCase(),fmt.getDefaultFileExtension()));
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
683,"return passwd == null ? null : "":"" + this.toString().toLowerCase() + ""::"" + this.hash(passwd);","return passwd == null ? null : "":"" + this.toString().toLowerCase() + ""::""+ this.hash(passwd);
",0,0,11,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
684,final String resultValue = String.valueOf(resultList.get(0).getValue()).toUpperCase();,"final String resultValue=String.valueOf(resultList.get(0).getValue()).toUpperCase();
",0,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
685,( version.toUpperCase().endsWith( Artifact.SNAPSHOT_VERSION ) || Artifact.VERSION_FILE_PATTERN.matcher( version ),"return (version != null) && (version.toUpperCase().endsWith(Artifact.SNAPSHOT_VERSION) || Artifact.VERSION_FILE_PATTERN.matcher(version).matches());
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
686,"File sum = new File( localPath + ""."" + packaging + ""."" + csum.getKey().toLowerCase().replace( ""-"", """" ) );","File sum=new File(localPath + ""."" + packaging+ "".""+ csum.getKey().toLowerCase().replace(""-"",""""));
",0,3,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
687,"qpQuery.toLowerCase().replaceAll( ""\\*"", ""X"" ).replaceAll( ""\\.|-|_|/"", "" "" ).replaceAll( ""X"",","qpQuery=qpQuery.toLowerCase().replaceAll(""\\*"",""X"").replaceAll(""\\.|-|_|/"","" "").replaceAll(""X"",""*"").replaceAll("" \\* "","""").replaceAll(""^\\* "","""").replaceAll("" \\*$"","""");
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
"
688,"&& ( !format.equals( ouputPath.substring( ouputPath.lastIndexOf( ""."" ) + 1 ).toLowerCase() ) ) )","if ((ouputPath.lastIndexOf(""."") != -1) && (!format.equals(ouputPath.substring(ouputPath.lastIndexOf(""."") + 1).toLowerCase()))) {
  output=new File(ouputPath + ""."" + format);
}
",0,0,9,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, ),
"
689,"if ( !FileUtils.extension( output.getAbsolutePath() ).toLowerCase().equals( ""svg"" ) )","if (!FileUtils.extension(output.getAbsolutePath()).toLowerCase().equals(""svg"")) {
  String img=""<a href=\"""" + link + ""\"" target=\""_blank\""><img src=\""""+ link+ ""\"" title=\""""+ getDiagramLabel()+ ""\"" width=\""800\"" title=\""""+ diagramLabel+ ""\""/></a>"";
  getSink().rawText(img);
}
 else {
  SVGConverter converter=new SVGConverter();
  converter.setWidth(800);
  converter.setSources(new String[]{output.getAbsolutePath()});
  converter.setDst(new File(output.getParentFile(),""small-"" + output.getName() + "".png""));
  converter.setDestinationType(DestinationType.PNG);
  InputStream is=null;
  OutputStream os=null;
  try {
    is=new FileInputStream(output);
    String content=IOUtil.toString(is);
    IOUtil.close(is);
    content=StringUtils.replace(content,""font-weight:regular;"","""");
    os=new FileOutputStream(output);
    IOUtil.copy(content,os);
  }
  finally {
    IOUtil.close(is);
    IOUtil.close(os);
  }
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(UmlReport.class.getClassLoader());
    converter.execute();
  }
 catch (  SVGConverterException e) {
    throw new IOException(""SVGConverterException: "" + e.getMessage());
  }
 finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
  String smalllink=StringUtils.replace(link,output.getName(),""small-"" + output.getName() + "".png"");
  String img=""<a href=\"""" + link + ""\"" target=\""_blank\""><img src=\""""+ smalllink+ ""\"" title=\""""+ getDiagramLabel()+ ""\"" width=\""800\"" title=\""""+ diagramLabel+ ""\""/></a>"";
  getSink().rawText(img);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
690,"String rightTable = rightPart.substring(0, rightPart.toUpperCase().lastIndexOf("" ON ""));","String rightTable=rightPart.substring(0,rightPart.toUpperCase().lastIndexOf("" ON ""));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
691,"assertTrue(""Mismatched prompt: "" + prompt[0], prompt[0].toLowerCase().contains(""password""));","assertTrue(""Mismatched prompt: "" + prompt[0],prompt[0].toLowerCase().contains(""password""));
",0,1,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
692,"final String type = _type == null ? """" : _type.toLowerCase();","final String type=_type == null ? """" : _type.toLowerCase();
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
693,"if(res instanceof String && res.toString().toUpperCase().endsWith(""C"")) {","if (res instanceof String && res.toString().toUpperCase().endsWith(""C"")) {
  numThreads*=ConversionUtils.convert(res.toString().trim().replace(""C"",""""),Integer.class);
}
 else {
  numThreads=ConversionUtils.convert(res,Integer.class);
}
",0,0,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
694,".map(group -> String.format(""%s%s"", SECURITY_ROLE_PREFIX, group.toUpperCase()))","List<GrantedAuthority> grantedAuths=ldapTemplate.search(query().where(""objectclass"").is(""groupOfNames"").and(""member"").is(ldapName),(AttributesMapper<String>)attrs -> (String)attrs.get(""cn"").get()).stream().map(group -> String.format(""%s%s"",SECURITY_ROLE_PREFIX,group.toUpperCase())).map(SimpleGrantedAuthority::new).collect(Collectors.toList());
",0,0,8,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
"
695,((String) field.get(ParserConfigConstants.RECORD_TYPE.getName())).toLowerCase();,"String recordType=((String)field.get(ParserConfigConstants.RECORD_TYPE.getName())).toLowerCase();
",0,0,6,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
696,"Map<Pattern, Set<String>> patternMap = recordTypePatternMap.get(recordType.toLowerCase());","Map<Pattern,Set<String>> patternMap=recordTypePatternMap.get(recordType.toLowerCase());
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
697,"String protocol = tmp.substring(tmp.indexOf(""{"") + 1,","String protocol=tmp.substring(tmp.indexOf(""{"") + 1,tmp.indexOf(""}"")).toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
698,"return algo + "":"" + BufferUtils.toHex(':', data).toLowerCase();","return algo + "":"" + BufferUtils.toHex(':',data).toLowerCase();
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
699,"return algo.replace(""-"", """").toUpperCase() + "":"" + encoder.encodeToString(data).replaceAll(""="", """");","return algo.replace(""-"","""").toUpperCase() + "":"" + encoder.encodeToString(data).replaceAll(""="","""");
",0,0,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
700,"String resourceKey = identity.getName().toUpperCase() + ""-"" + KeyPair.class.getSimpleName();","String resourceKey=identity.getName().toUpperCase() + ""-"" + KeyPair.class.getSimpleName();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
701,"return testLoadRSAPrivateKey(DEFAULT_PASSWORD.replace(' ', '-') + ""-RSA-"" + algorithm.toUpperCase() + ""-key"");","return testLoadRSAPrivateKey(DEFAULT_PASSWORD.replace(' ','-') + ""-RSA-"" + algorithm.toUpperCase()+ ""-key"");
",0,1,9,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
702,".valueOf(itemElement.getAttribute(""subscription"").getValue().toUpperCase()) : SubscriptionType.NONE;","SubscriptionType subscription=verifier.attributePresent(""subscription"") ? SubscriptionType.valueOf(itemElement.getAttribute(""subscription"").getValue().toUpperCase()) : SubscriptionType.NONE;
",0,1,7,,"SimpleName(),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(),
"
703,"fieldType = Field.Type.valueOf(typeName.toUpperCase().replace('-', '_'));","fieldType=Field.Type.valueOf(typeName.toUpperCase().replace('-','_'));
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
704,"fieldinfo.name = String.format(""m_%s_%s"", methodname.substring(3).toLowerCase(), Utils.genRandomString());","fieldinfo.name=String.format(""m_%s_%s"",methodname.substring(3).toLowerCase(),Utils.genRandomString());
",0,1,10,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
705,"return UUID.randomUUID().toString().replaceAll(""-"", """").toUpperCase().substring(0, len);","return UUID.randomUUID().toString().replaceAll(""-"","""").toUpperCase().substring(0,len);
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
706,"return new Locale(s.substring(0, 2), s.substring(3, 5).toUpperCase(), s.substring(6, s.length()));","return new Locale(s.substring(0,2),s.substring(3,5).toUpperCase(),s.substring(6,s.length()));
",0,1,15,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
707,"sb.append(""#"" + (m.group(2) + m.group(3) + m.group(4) + m.group(5) + m.group(6) + m.group(7)).toLowerCase());","sb.append(""#"" + (m.group(2) + m.group(3) + m.group(4)+ m.group(5)+ m.group(6)+ m.group(7)).toLowerCase());
",0,3,22,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
708,"return new Measure(s.substring(0, pos), Unit.valueOf(s.substring(pos).toUpperCase()));","return new Measure(s.substring(0,pos),Unit.valueOf(s.substring(pos).toUpperCase()));
",0,0,11,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
709,"value = name().equals(""PERCENT"") ? ""%"" : name().toLowerCase();","value=name().equals(""PERCENT"") ? ""%"" : name().toLowerCase();
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
710,"final Object levelObject = parse.invoke(null, level.toUpperCase());","final Object levelObject=parse.invoke(null,level.toUpperCase());
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
711,"if(Arrays.binarySearch(_INCLUDED_HEADERS, key.toLowerCase()) >= 0 && null != entry.getValue())","if (Arrays.binarySearch(_INCLUDED_HEADERS,key.toLowerCase()) >= 0 && null != entry.getValue()) {
  for (  String value : entry.getValue()) {
    response.addHeader(key,value);
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
712,"d.add(new Field(types[i].toString().toLowerCase() + ""."" + FIELD_CONTENT, text, Field.Store.COMPRESS, Field.Index.ANALYZED));","d.add(new Field(types[i].toString().toLowerCase() + ""."" + FIELD_CONTENT,text,Field.Store.COMPRESS,Field.Index.ANALYZED));
",0,1,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
713,"super(HTMLRendererFactory.HTML_NAMESPACE, localName.toLowerCase());","super(HTMLRendererFactory.HTML_NAMESPACE,localName.toLowerCase());
",0,0,3,,"QualifiedName(SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
714,"return productName == null || !productName.toLowerCase().contains(""eap"");","return productName == null || !productName.toLowerCase().contains(""eap"");
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
715,return (protocol == null || protocol.length() == 0 || protocol.toLowerCase().startsWith(HTTP)),"return (protocol == null || protocol.length() == 0 || protocol.toLowerCase().startsWith(HTTP)) && (scheme == null || !scheme.toLowerCase().equals(HTTPS)) && (secure == null || !secure.toLowerCase().equals(TRUE));
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
716,"if(!item.toLowerCase().startsWith(prefix) && !item.equalsIgnoreCase(""$color_chooser"")){","if (!item.toLowerCase().startsWith(prefix) && !item.equalsIgnoreCase(""$color_chooser"")) {
  sb.append(item).append(""\n"");
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
717,"if (targetName.equalsIgnoreCase(beanName) && targetName.substring(0, 1).toLowerCase().equals(beanName.substring(0, 1))) {","if (targetName.equalsIgnoreCase(beanName) && targetName.substring(0,1).toLowerCase().equals(beanName.substring(0,1))) {
  templateProperties.put(""classAnnotation"",""@ManagedBean"");
}
 else {
  templateProperties.put(""classAnnotation"",""@ManagedBean(name=\"""" + beanName + ""\"")"");
}
",0,0,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
718,"if (managedBeanClass!=null && targetName.equals(managedBeanClass.substring(0, 1).toUpperCase()+ managedBeanClass.substring(1))) {","if (managedBeanClass != null && targetName.equals(managedBeanClass.substring(0,1).toUpperCase() + managedBeanClass.substring(1))) {
  return;
}
 else {
  managedBeanClass=targetName.substring(0,1).toLowerCase() + targetName.substring(1);
}
",0,0,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
719,"if (wsdlName.toUpperCase().endsWith(""?WSDL"")) wsdlName = wsdlName.substring(0,wsdlName.length()-5);","if (wsdlName.toUpperCase().endsWith(""?WSDL"")) wsdlName=wsdlName.substring(0,wsdlName.length() - 5);
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
720,"addPathAnnotation(workingCopy, new String[]{javaClass.getSimpleName().toString().toLowerCase()});","addPathAnnotation(workingCopy,new String[]{javaClass.getSimpleName().toString().toLowerCase()});
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
721,".append(name().substring(1).toLowerCase().replace('_', ' '))","displayName=new StringBuilder().append(name().charAt(0)).append(name().substring(1).toLowerCase().replace('_',' ')).toString();
",0,0,8,,"SimpleName(),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
CharacterLiteral(MethodInvocation-arguments, ),
CharacterLiteral(MethodInvocation-arguments, ),
"
722,"return ((String) entry.getModel().getValueAt(entry.getIdentifier(), referenzColumn)).toLowerCase().contains(referenz);","return ((String)entry.getModel().getValueAt(entry.getIdentifier(),referenzColumn)).toLowerCase().contains(referenz);
",0,3,10,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
723,"if (""INNODB"".equals(rs.getString(1).toUpperCase()) &&","if (""INNODB"".equals(rs.getString(1).toUpperCase()) && (""YES"".equals(rs.getString(2).toUpperCase()) || ""DEFAULT"".equals(rs.getString(2).toUpperCase()))) {
  return true;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
724,"if (SQLKeywords.isSQL99Keyword(value.toString().toUpperCase(), true)) {","if (SQLKeywords.isSQL99Keyword(value.toString().toUpperCase(),true)) {
  return SQLTokenId.KEYWORD;
}
 else {
  return SQLTokenId.IDENTIFIER;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
725,"col.setNullAllowed((rset.get(new Integer(18))).toUpperCase().equals(""YES""));","col.setNullAllowed((rset.get(new Integer(18))).toUpperCase().equals(""YES""));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
726,if (upperSource.substring(nameIdx + toFind.length()).trim().startsWith(owner.toUpperCase() + '.')) {,"if (upperSource.substring(nameIdx + toFind.length()).trim().startsWith(owner.toUpperCase() + '.')) {
  return source;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
727,"return NbBundle.getMessage(PostMessageDisplayer.class, ""FAILED"", actionName.toUpperCase());","return NbBundle.getMessage(PostMessageDisplayer.class,""FAILED"",actionName.toUpperCase());
",0,0,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
728,String p1 = (winfile.getParentFile().getAbsolutePath() + '\\').toLowerCase();,"String p1=(winfile.getParentFile().getAbsolutePath() + '\\').toLowerCase();
",0,2,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
729,String p2 = (shell.bindir.getParentFile().getAbsolutePath() + '\\').toLowerCase();,"String p2=(shell.bindir.getParentFile().getAbsolutePath() + '\\').toLowerCase();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
730,"DockerfileTokenId id = filter(KW_TO_TKN.get(input.readText().toString().toUpperCase()), currentState);","DockerfileTokenId id=filter(KW_TO_TKN.get(input.readText().toString().toUpperCase()),currentState);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
731,"return (hintValue != null) && ""false"".equals(hintValue.toLowerCase());","return (hintValue != null) && ""false"".equals(hintValue.toLowerCase());
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
732,String actionName = getValue(NAME) != null ? getValue(NAME).toString().toLowerCase() : null;,"String actionName=getValue(NAME) != null ? getValue(NAME).toString().toLowerCase() : null;
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
733,+ (upperCaseKeyConstants() ? key.toUpperCase() : key));,"kwdConstants.put(key,getKwdConstantPrefix() + (upperCaseKeyConstants() ? key.toUpperCase() : key));
",0,0,4,,"SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
"
734,if (item.getName() != GitBranch.NO_BRANCH && item.getName().toLowerCase().contains(needle)) {,"if (item.getName() != GitBranch.NO_BRANCH && item.getName().toLowerCase().contains(needle)) {
  return true;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
735,visible = rev.getLog().getUsername().toLowerCase().contains(filterText),"visible=rev.getLog().getUsername().toLowerCase().contains(filterText) || rev.getLog().getAuthor().toLowerCase().contains(filterText);
",0,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
736,"(token.id() == HTMLTokenId.DECLARATION && token.text().toString().toUpperCase().startsWith(""<!""));","return token.id() == HTMLTokenId.TAG_OPEN || (token.id() == HTMLTokenId.DECLARATION && token.text().toString().toUpperCase().startsWith(""<!""));
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
737,"map.put((tag.getName() + ""#"" + attribute.getName()).toUpperCase(), attribute);","map.put((tag.getName() + ""#"" + attribute.getName()).toUpperCase(),attribute);
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
738,if (  (violator.toLowerCase().contains(list[i])) ) {,"if ((violator.toLowerCase().contains(list[i]))) {
  filtered=false;
  break;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
"
739,"int indexOf = convertedTypeName.indexOf(caseSensitive ? camelCasePart : camelCasePart.toLowerCase(), startIndex);","int indexOf=convertedTypeName.indexOf(caseSensitive ? camelCasePart : camelCasePart.toLowerCase(),startIndex);
",0,0,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
740,"} else if ((pos = message.toLowerCase().indexOf("": auth cancel"")) != -1) {","if ((pos=message.toLowerCase().indexOf("": auth cancel"")) != -1) {
  String repositoryUrl=message.substring(0,pos);
  throw new GitException.AuthorizationException(repositoryUrl,message,e);
}
 else if (e.getCause() instanceof JSchException) {
  if (message.contains(""timeout:"") || message.contains(""ProxyHTTP"") || message.contains(""ProxySOCKS4"")|| message.contains(""ProxySOCKS5"")) {
    throw new GitException(message,e);
  }
 else {
    throw new GitException.AuthorizationException(uri.toString(),message,e);
  }
}
 else {
  throw new GitException(message,e);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
741,sb.append(Pattern.quote(caseSensitive ? token : token.toLowerCase()));,"sb.append(Pattern.quote(caseSensitive ? token : token.toLowerCase()));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
742,"return name.replace('-', '_').replace('#', '_').replace('.', '_').replace(':', '_').toUpperCase();","return name.replace('-','_').replace('#','_').replace('.','_').replace(':','_').toUpperCase();
",0,0,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
743,"return (file.getParentFile().getName().equalsIgnoreCase(""pngsuite"") && file","return (file.getParentFile().getName().equalsIgnoreCase(""pngsuite"") && file.getName().toLowerCase().startsWith(""x""));
",0,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
744,"boolean isCertain = !segments[i].getClass().getSimpleName().toLowerCase().contains(""uncertain"");","boolean isCertain=!segments[i].getClass().getSimpleName().toLowerCase().contains(""uncertain"");
",0,0,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
745,if( null == searchString || items[i].getDisplayName().toLowerCase().contains(searchString) ),"if (null == searchString || items[i].getDisplayName().toLowerCase().contains(searchString)) newModel.addElement(items[i]);
",0,1,8,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
746,"String[] expected = {""genfiles.properties"", ""build-impl.xml"", ""JavaApp.java"", ""manifest.mf"", ""src"", ""project.xml"", PROJECT_NAME.toLowerCase(), ""nbproject"", ""project.properties"", ""test"", ""build.xml""};","String[] expected={""genfiles.properties"",""build-impl.xml"",""JavaApp.java"",""manifest.mf"",""src"",""project.xml"",PROJECT_NAME.toLowerCase(),""nbproject"",""project.properties"",""test"",""build.xml""};
",0,0,15,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
747,"assertTrue(SvnClientExceptionHandler.isUnversionedResource(e.getMessage()) || e.getMessage().toLowerCase().contains(""not found"")","assertTrue(SvnClientExceptionHandler.isUnversionedResource(e.getMessage()) || e.getMessage().toLowerCase().contains(""not found"") || e.getMessage().toLowerCase().contains(""some targets don't exist""));
",0,0,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
748,"String authorText = sd.getText(pos, doclen - pos).toLowerCase();","String authorText=sd.getText(pos,doclen - pos).toLowerCase();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
749,if (nlc > 0 && !item.messageExpanded && entry.getMessage().toLowerCase().contains(highlightMessage)) {,"if (nlc > 0 && !item.messageExpanded && entry.getMessage().toLowerCase().contains(highlightMessage)) {
  sd.setCharacterAttributes(doclen,sd.getLength(),hiliteStyle,false);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
750,if (item.children.contains(newItem.tagName.toString().toUpperCase())) {,"if (item.children.contains(newItem.tagName.toString().toUpperCase())) {
  break;
}
 else {
  for (  CharSequence s : item.children) {
    if (isOpeningTagOptional(s)) {
      break LOOP;
    }
  }
  newItems.add(MarkupAbstractIndenter.createVirtualMarkupItem(item.tagName,item.empty));
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
751,"if((docContent != null) && (docContent.toLowerCase().indexOf(""catalog"") != -1))","if ((docContent != null) && (docContent.toLowerCase().indexOf(""catalog"") != -1)) return true;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
752,"resultStr = resultStr.substring(0, resultStr.lastIndexOf('.'))+fileExtension.toLowerCase();","resultStr=resultStr.substring(0,resultStr.lastIndexOf('.')) + fileExtension.toLowerCase();
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
753,pName = pType.substring(pType.lastIndexOf('.') + 1).toLowerCase();,"pName=pType.substring(pType.lastIndexOf('.') + 1).toLowerCase();
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
754,if (token.getImage().substring(1).trim().toLowerCase().equals(tag),"if (token.getImage().substring(1).trim().toLowerCase().equals(tag) && !isSingletonTag(token)) {
  if (poss == 0) {
    start=token.getOffset();
    end=token.getOffset() + token.getImage().length();
    TokenItem next=token.getNext();
    if (next != null && next.getTokenID() == XMLTokenIDs.TAG && "">"".equals(next.getImage()))     end++;
    return new int[]{start,end};
  }
 else {
    poss--;
  }
}
 else {
  if ((token.getImage().substring(2).toLowerCase().indexOf(tag) > -1) && !isSingletonTag(token)) {
    poss++;
  }
}
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
755,if ((token.getImage().substring(2).toLowerCase().indexOf(tag) > -1),"if ((token.getImage().substring(2).toLowerCase().indexOf(tag) > -1) && !isSingletonTag(token)) {
  poss++;
}
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
756,if (token.getImage().substring(2).trim().toLowerCase().equals(tag)) {,"if (token.getImage().substring(2).trim().toLowerCase().equals(tag)) {
  if (poss == 0) {
    start=token.getOffset();
    end=token.getOffset() + token.getImage().length() + 1;
    return new int[]{start,end};
  }
 else   poss--;
}
 else {
  if (token.getImage().substring(1).toLowerCase().equals(tag) && !isSingletonTag(token))   poss++;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
757,String java = (String) Convertors.EncodingUtil.getIANA2JavaMap ().get (iana.toUpperCase ());,"String java=(String)Convertors.EncodingUtil.getIANA2JavaMap().get(iana.toUpperCase());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
758,"colName = colName.substring(colName.lastIndexOf(""."") + 1).toLowerCase();","colName=colName.substring(colName.lastIndexOf(""."") + 1).toLowerCase();
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
759,"if (all || columns.contains(colName) || columns.contains(tables.get(j).toString().toLowerCase() + ""."" + colName)) {","if (all || columns.contains(colName) || columns.contains(tables.get(j).toString().toLowerCase() + ""."" + colName)) {
  continue;
}
 else {
  fk.set(k,null);
  break;
}
",0,0,13,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
760,"result = ! (prop.getValue().toString().toLowerCase().contains(""evaluating""));","result=!(prop.getValue().toString().toLowerCase().contains(""evaluating""));
",0,2,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
761,"eventSetMenu = new JMenuPlus(name.substring(0,1).toUpperCase()","eventSetMenu=new JMenuPlus(name.substring(0,1).toUpperCase() + name.substring(1));
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
762,if ((trimText.length() == 0) || trimText.toLowerCase().equals(NULL_STR)) {,"if ((trimText.length() == 0) || trimText.toLowerCase().equals(NULL_STR)) {
  return null;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
763,"if (htmlText != null && htmlText.length() >= 6 && htmlText.trim().toLowerCase().startsWith(""<html>"")) {","if (htmlText != null && htmlText.length() >= 6 && htmlText.trim().toLowerCase().startsWith(""<html>"")) {
  return STATUS_RESIZABLE;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
764,"Node testClass = getClassNode(DEFAULT_PROJECT_NAME, ROOT_PACKAGE_NAME + TREE_SEPARATOR + DEFAULT_PROJECT_NAME.toLowerCase() + TREE_SEPARATOR + TEST_CLASS + "".java"");","Node testClass=getClassNode(DEFAULT_PROJECT_NAME,ROOT_PACKAGE_NAME + TREE_SEPARATOR + DEFAULT_PROJECT_NAME.toLowerCase()+ TREE_SEPARATOR+ TEST_CLASS+ "".java"");
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
765,return (Character.toString(typeName.charAt(0))).toUpperCase();,"return (Character.toString(typeName.charAt(0))).toUpperCase();
",0,0,6,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
766,"String relrelInstanceName = ""old"" + otherName.substring(3) + ""Of"" + scalarRelFieldName.substring(0, 1).toUpperCase() + (scalarRelFieldName.length() > 1 ? scalarRelFieldName.substring(1) : """");","String relrelInstanceName=""old"" + otherName.substring(3) + ""Of""+ scalarRelFieldName.substring(0,1).toUpperCase()+ (scalarRelFieldName.length() > 1 ? scalarRelFieldName.substring(1) : """");
",0,1,19,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
767,"String candidate = makeFirstLower ? className.substring(0,1).toLowerCase() + className.substring(1) : className;","String candidate=makeFirstLower ? className.substring(0,1).toLowerCase() + className.substring(1) : className;
",0,0,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
768,"return makeFirstLower ? name.substring(3,4).toLowerCase() + name.substring(4) : name.substring(3);","return makeFirstLower ? name.substring(3,4).toLowerCase() + name.substring(4) : name.substring(3);
",0,0,12,,"SimpleName(ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
769,&& name.contentEquals(Utilities.isCaseSensitive() ? e.getSimpleName() : e.getSimpleName().toString().toLowerCase()),"if ((e.getKind().isField() || e.getKind() == ElementKind.METHOD) && name.contentEquals(Utilities.isCaseSensitive() ? e.getSimpleName() : e.getSimpleName().toString().toLowerCase()) && e.getModifiers().contains(Modifier.STATIC)&& (Utilities.isShowDeprecatedMembers() || !elements.isDeprecated(e))&& trees.isAccessible(scope,e,(DeclaredType)te.asType())) {
  if (element != null) {
    multiVersion=true;
    break;
  }
  element=e;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
"
770,"if (NbBundle.getMessage(HintsPanel.class, key).toLowerCase().contains(filterText)) {","if (NbBundle.getMessage(HintsPanel.class,key).toLowerCase().contains(filterText)) {
  return true;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
771,"String modifier = desiredAccess.isEmpty() ? Bundle.FIX_DefaultAccess(name) : Bundle.FIX_ChangeModifiers(name, desiredAccess.iterator().next().name().toLowerCase());","String modifier=desiredAccess.isEmpty() ? Bundle.FIX_DefaultAccess(name) : Bundle.FIX_ChangeModifiers(name,desiredAccess.iterator().next().name().toLowerCase());
",0,0,15,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
772,"FileObject jar = jdkDir.getFileObject(name.toLowerCase().replace(""_"", ""-"") + "".jar"");","FileObject jar=jdkDir.getFileObject(name.toLowerCase().replace(""_"",""-"") + "".jar"");
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
773,"if (""</title"".equals(new String(buf, offset - 7, 7).toLowerCase())) {","if (""</title"".equals(new String(buf,offset - 7,7).toLowerCase())) {
  state=State.EXIT;
  if (charset == null) {
    title=new String(buf,0,offset - 7).trim();
  }
 else {
    title=new String(buf,0,offset - 7,charset).trim();
  }
  title=StringEscapeUtils.unescapeHtml(title);
  return;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
774,"return (f.isDirectory() || f.getName().toLowerCase().endsWith("".jar""));","return (f.isDirectory() || f.getName().toLowerCase().endsWith("".jar""));
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
775,"return ""PROP_"" + desc.field.getSimpleName().toString().toUpperCase();","return ""PROP_"" + desc.field.getSimpleName().toString().toUpperCase();
",0,0,5,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
776,"(getBean().getGroupName() + ""."" +","getBean().addOutputWrapperPackageName((getBean().getGroupName() + ""."" + getBean().getDisplayName()).toLowerCase() + ""."" + nsUri.substring(nsUri.lastIndexOf("":"") + 1).toLowerCase());
",0,0,3,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
"
777,"String name = rawName.substring(0,1).toUpperCase() + rawName.substring(1) + NbBundle.getMessage(GenerateDOMScannerSupport.class, ""NAME_SUFFIX_Scanner"");","String name=rawName.substring(0,1).toUpperCase() + rawName.substring(1) + NbBundle.getMessage(GenerateDOMScannerSupport.class,""NAME_SUFFIX_Scanner"");
",0,1,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
778,cssName = support.getParent().getCurrentFileName().toLowerCase() + FXMLTemplateWizardIterator.CSS_FILE_EXTENSION;,"cssName=support.getParent().getCurrentFileName().toLowerCase() + FXMLTemplateWizardIterator.CSS_FILE_EXTENSION;
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
779,"return name != null && name.toLowerCase().indexOf(""windows"") >= 0;","return name != null && name.toLowerCase().indexOf(""windows"") >= 0;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
780,"{""Foo\\Bar\\Baz\\"" + ANNOTATION_NAME.toLowerCase(), ANNOTATION_NAME},","return Arrays.asList(new Object[][]{{""\\Foo\\Bar\\Baz\\"" + ANNOTATION_NAME,ANNOTATION_NAME},{""Foo\\Bar\\Baz\\"" + ANNOTATION_NAME,ANNOTATION_NAME},{ANNOTATION_NAME,ANNOTATION_NAME},{ANNOTATION_NAME.toLowerCase(),ANNOTATION_NAME},{""Foo\\Bar\\Baz\\"" + ANNOTATION_NAME.toLowerCase(),ANNOTATION_NAME}});
",0,0,4,,"StringLiteral(InfixExpression-leftOperand, ArrayInitializer-expressions, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ArrayInitializer-expressions, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ArrayInitializer-expressions, ),
SimpleName(ArrayInitializer-expressions, ),
"
781,"return camelCaseQueryToPattern(query.toUpperCase(), true).matcher(nameToCheck).matches();","return camelCaseQueryToPattern(query.toUpperCase(),true).matcher(nameToCheck).matches();
",0,0,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
782,"String query = qnk.isUnqualified() ? prepareIdxQuery(textForQuery, regexpKinds, kind).toLowerCase() : textForQuery;","String query=qnk.isUnqualified() ? prepareIdxQuery(textForQuery,regexpKinds,kind).toLowerCase() : textForQuery;
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
783,sb.append(getType().getName().toLowerCase()).append(Separator.SEMICOLON);,"sb.append(getType().getName().toLowerCase()).append(Separator.SEMICOLON);
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
784,"elementDocument.addPair(Index.FIELD_BASE_NAME_INSENSITIVE, object.getName().toLowerCase(), true, false);","elementDocument.addPair(Index.FIELD_BASE_NAME_INSENSITIVE,object.getName().toLowerCase(),true,false);
",0,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
785,return fileObject == null || fileObject.getExt().isEmpty() || REGISTERED_PHP_EXTENSIONS.contains(fileObject.getExt().toLowerCase());,"return fileObject == null || fileObject.getExt().isEmpty() || REGISTERED_PHP_EXTENSIONS.contains(fileObject.getExt().toLowerCase());
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
786,"private static final String PHPDOCTAG = ""@"" + PHPDocTag.Type.VAR.name().toLowerCase();","private static final String PHPDOCTAG=""@"" + PHPDocTag.Type.VAR.name().toLowerCase();
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
787,"char firstChar = ("""" + key).toLowerCase().charAt(0);","char firstChar=("""" + key).toLowerCase().charAt(0);
",0,0,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
788,"return SymfonyUtils.ACTION_METHOD_PREFIX + group.substring(0, 1).toUpperCase() + group.substring(1);","return SymfonyUtils.ACTION_METHOD_PREFIX + group.substring(0,1).toUpperCase() + group.substring(1);
",0,0,9,,"QualifiedName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
789,"return ACTION_METHOD_PREFIX + parts[0].replaceAll(VIEW_FILE_SUFFIX + ""$"", """").toLowerCase();","return ACTION_METHOD_PREFIX + parts[0].replaceAll(VIEW_FILE_SUFFIX + ""$"","""").toLowerCase();
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
790,return Character.toLowerCase(value.charAt(0)) + value.substring(1).toUpperCase();,"return Character.toLowerCase(value.charAt(0)) + value.substring(1).toUpperCase();
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
791,UnitCategoryTableModel.this.filter = filter.toLowerCase ();,"UnitCategoryTableModel.this.filter=filter.toLowerCase();
",0,0,4,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
792,this.pattern = (regExp || matchCase) ? pattern : pattern.toLowerCase();,"this.pattern=(regExp || matchCase) ? pattern : pattern.toLowerCase();
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
793,return matchCase ? str.contains(pattern) : str.toLowerCase().contains(pattern);,"return matchCase ? str.contains(pattern) : str.toLowerCase().contains(pattern);
",0,1,8,,"SimpleName(ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
794,return ((BaseUtilities.isWindows () || (BaseUtilities.getOperatingSystem () == BaseUtilities.OS_OS2))) ? rootPath.toLowerCase() : rootPath;,"return ((BaseUtilities.isWindows() || (BaseUtilities.getOperatingSystem() == BaseUtilities.OS_OS2))) ? rootPath.toLowerCase() : rootPath;
",0,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
795,"String txt = new String(arr, 0, (len >= 0) ? len : 0).toUpperCase();","String txt=new String(arr,0,(len >= 0) ? len : 0).toUpperCase();
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
796,"if (!BaseUtilities.isWindows() || !(ioe instanceof FileNotFoundException) || !fo.isValid() || !fo.getName().toLowerCase().contains(""ntuser"")) {","if (!BaseUtilities.isWindows() || !(ioe instanceof FileNotFoundException) || !fo.isValid()|| !fo.getName().toLowerCase().contains(""ntuser"")) {
  throw ioe;
}
",0,0,11,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
797,"text = ((JButton) source).getText().toUpperCase().replaceAll("" "", ""_"");","text=((JButton)source).getText().toUpperCase().replaceAll("" "",""_"");
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
798,"return getValueAt(row, userFindColumn).toString().toLowerCase().indexOf(internalFindString) != -1;","return getValueAt(row,userFindColumn).toString().toLowerCase().indexOf(internalFindString) != -1;
",0,0,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
799,"isHeap = ts.token().text().toString().trim().toLowerCase().equals(""heap"");","isHeap=ts.token().text().toString().trim().toLowerCase().equals(""heap"");
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
800,"if (ts.token().text().toString().trim().toLowerCase().equals(""heap"")) {","if (ts.token().text().toString().trim().toLowerCase().equals(""heap"")) {
  ts.moveNext();
  for (  String method : heapMethods) {
    resultSet.addItem(new FunctionCompletionItem(""00"",method,ts.offset() + 1));
  }
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
801,.append(getName().equals(Binding.textInput.name()) ? getName().toLowerCase() : getName()),"return new StringBuilder().append(DOC_URL_BASE).append(getName().equals(Binding.textInput.name()) ? getName().toLowerCase() : getName()).append(DOC_URL_POSTFIX).toString();
",0,0,8,,"SimpleName(),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
802,"mainFile = getFileObject(projectDir, projectName.toLowerCase() + "".js"");","mainFile=getFileObject(projectDir,projectName.toLowerCase() + "".js"");
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
803,if (lastTag != null && SCRIPT_TAG_NAME.equals(lastTag.text().toString().toLowerCase()) && ts.moveNext()) {,"if (lastTag != null && SCRIPT_TAG_NAME.equals(lastTag.text().toString().toLowerCase()) && ts.moveNext()) {
  token=ts.token();
  while (token.id() == JadeTokenId.EOL && ts.moveNext()) {
    token=ts.token();
  }
  if (token.id() == JadeTokenId.PLAIN_TEXT || token.id() == JadeTokenId.JAVASCRIPT) {
    embeddings.add(snapshot.create(ts.offset(),token.length(),JS_MIME_TYPE));
  }
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
804,if (jsonValue != null && jsonValue instanceof String && moduleName.equals(((String) jsonValue).toLowerCase())) {,"if (jsonValue != null && jsonValue instanceof String && moduleName.equals(((String)jsonValue).toLowerCase())) {
  jsonValue=jsonModule.get(DESCRIPTION);
  if (jsonValue != null && jsonValue instanceof String) {
    return (String)jsonValue;
  }
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
805,"String name = value.toLowerCase().endsWith("".js"") ? value : value + "".js"";","String name=value.toLowerCase().endsWith("".js"") ? value : value + "".js"";
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
806,"this.ident = ident.toLowerCase().replace(' ', '-');","this.ident=ident.toLowerCase().replace(' ','-');
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
807,"elements[i] = new HTMLElement(node.getName().toLowerCase(), node.getDisplayName());","elements[i]=new HTMLElement(node.getName().toLowerCase(),node.getDisplayName());
",0,0,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
808,"return methodName = ""get"" + methodName.substring(0, 1).toUpperCase() + methodName.substring(1);","return methodName=""get"" + methodName.substring(0,1).toUpperCase() + methodName.substring(1);
",0,0,10,,"SimpleName(Assignment-leftHandSide, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ReturnStatement-expression, ),
"
809,"case ""upper"": reply = sb.toString().toUpperCase(); break;","case ""upper"":
",0,0,1,,"StringLiteral(SwitchCase-expression, ),
"
810,"final Predicate<String> isHttps = url -> url.toLowerCase().startsWith(""https:"");","final Predicate<String> isHttps=url -> url.toLowerCase().startsWith(""https:"");
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
811,"boolean isAtlasApiSecure = urls.stream().anyMatch(url -> url.toLowerCase().startsWith(""https""));","boolean isAtlasApiSecure=urls.stream().anyMatch(url -> url.toLowerCase().startsWith(""https""));
",0,0,10,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
812,String method = trimToEmpty(context.getProperty(PROP_METHOD).evaluateAttributeExpressions(requestFlowFile).getValue()).toUpperCase();,"String method=trimToEmpty(context.getProperty(PROP_METHOD).evaluateAttributeExpressions(requestFlowFile).getValue()).toUpperCase();
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
813,final String logLevelValue = context.getProperty(LOG_LEVEL).evaluateAttributeExpressions(flowFile).getValue().toLowerCase();,"final String logLevelValue=context.getProperty(LOG_LEVEL).evaluateAttributeExpressions(flowFile).getValue().toLowerCase();
",0,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
814,"result.append(String.format(""%02X"", bytes[position + index]).toLowerCase());","result.append(String.format(""%02X"",bytes[position + index]).toLowerCase());
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
815,List<String> ipAddresses = Collections.list(ni.getInetAddresses()).stream().map(inetAddress -> inetAddress.getHostAddress().toLowerCase()).collect(Collectors.toList());,"List<String> ipAddresses=Collections.list(ni.getInetAddresses()).stream().map(inetAddress -> inetAddress.getHostAddress().toLowerCase()).collect(Collectors.toList());
",0,0,16,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
816,hiveFields.add((hiveFieldNames ? recordField.getFieldName().toLowerCase() : recordField.getFieldName()),"hiveFields.add((hiveFieldNames ? recordField.getFieldName().toLowerCase() : recordField.getFieldName()) + "":"" + getHiveTypeFromFieldType(recordField.getDataType(),hiveFieldNames));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
817,int fpos = typeInfo.getAllStructFieldNames().stream().map((s) -> s == null ? null : s.toLowerCase()).collect(Collectors.toList()).indexOf(normalizedFieldName);,"int fpos=typeInfo.getAllStructFieldNames().stream().map((s) -> s == null ? null : s.toLowerCase()).collect(Collectors.toList()).indexOf(normalizedFieldName);
",0,0,17,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
818,"String type = flowFileAttributes.getOrDefault(entry.getKey().concat("".type""), ""unknown"").toLowerCase();","String type=flowFileAttributes.getOrDefault(entry.getKey().concat("".type""),""unknown"").toLowerCase();
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
819,switch (context.getProperty(RATE_CONTROL_CRITERIA).getValue().toLowerCase()) {,"switch (context.getProperty(RATE_CONTROL_CRITERIA).getValue().toLowerCase()) {
case DATA_RATE:
  rateValidator=StandardValidators.DATA_SIZE_VALIDATOR;
break;
case ATTRIBUTE_RATE:
rateValidator=StandardValidators.POSITIVE_LONG_VALIDATOR;
final String rateAttr=context.getProperty(RATE_CONTROL_ATTRIBUTE_NAME).getValue();
if (rateAttr == null) {
validationResults.add(new ValidationResult.Builder().subject(RATE_CONTROL_ATTRIBUTE_NAME.getName()).explanation(""<Rate Controlled Attribute> property must be set if using <Rate Control Criteria> of 'attribute value'"").build());
}
break;
case FLOWFILE_RATE:
default :
rateValidator=StandardValidators.POSITIVE_LONG_VALIDATOR;
break;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
"
820,"attributes.put(this.getClass().getSimpleName().toLowerCase() + "".remote.source"", hostname);","attributes.put(this.getClass().getSimpleName().toLowerCase() + "".remote.source"",hostname);
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
821,"if (TIME_DURATION_PATTERN.matcher(input.toLowerCase()).matches() || input.equals(""-1"")) {","if (TIME_DURATION_PATTERN.matcher(input.toLowerCase()).matches() || input.equals(""-1"")) {
  return new ValidationResult.Builder().subject(subject).input(input).valid(true).build();
}
 else {
  return new ValidationResult.Builder().subject(subject).input(input).valid(false).explanation(""Must be of format <duration> <TimeUnit> where <duration> is a "" + ""non-negative integer and TimeUnit is a supported Time Unit, such "" + ""as: nanos, millis, secs, mins, hrs, days"").build();
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
822,"throw new CommandException(exceptions.size() + "" components could not be "" + state.toLowerCase() + "", "" +","throw new CommandException(exceptions.size() + "" components could not be "" + state.toLowerCase()+ "", ""+ ""run command with -verbose to obtain more details"");
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
823,"String reversedURLPath = reversedURL[0] + ""/"" + DigestUtils.sha256Hex(url).toUpperCase();","String reversedURLPath=reversedURL[0] + ""/"" + DigestUtils.sha256Hex(url).toUpperCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
824,"noFollow = (link.getRel().toLowerCase().equals(""nofollow"")) ? true","noFollow=(link.getRel().toLowerCase().equals(""nofollow"")) ? true : false;
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
825,"attContentType = attContentType.toLowerCase().substring(0, attContentType.indexOf("";""));","attContentType=attContentType.toLowerCase().substring(0,attContentType.indexOf("";""));
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
826,".where(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(""infoString""), EntityOperator.LIKE, EntityFunction.UPPER((""%"" + email.toUpperCase()) + ""%"")))","List<GenericValue> c=EntityQuery.use(delegator).from(""PartyAndContactMech"").where(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(""infoString""),EntityOperator.LIKE,EntityFunction.UPPER((""%"" + email.toUpperCase()) + ""%""))).orderBy(""infoString"").filterByDate().queryList();
",0,0,13,,"SimpleName(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
827,"s.append(""0x"" + codes[1].replaceFirst(""^0+"", """").toLowerCase() + "" "");","s.append(""0x"" + codes[1].replaceFirst(""^0+"","""").toLowerCase() + "" "");
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
828,"result = addImageResource(dispatcher, delegator, context, imageUrl, ""XTRA_IMG_"" + viewNumber + ""_"" + sizeType.toUpperCase());","result=addImageResource(dispatcher,delegator,context,imageUrl,""XTRA_IMG_"" + viewNumber + ""_""+ sizeType.toUpperCase());
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
829,"if (""PARCEL"".equals(serviceCode.toUpperCase()) && (weightPoundsOunces[0] < 1)) {","if (""PARCEL"".equals(serviceCode.toUpperCase()) && (weightPoundsOunces[0] < 1)) {
  weightPoundsOunces[0]=1;
  weightPoundsOunces[1]=0;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
830,"boolean isNotNull = ""NO"".equals(ccInfo.isNullable.toUpperCase());","boolean isNotNull=""NO"".equals(ccInfo.isNullable.toUpperCase());
",0,0,6,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
831,"fields.add(new Field(fieldName, UtilValidate.isNotEmpty(function) ? Function.valueOf(function.toUpperCase()) : null));","fields.add(new Field(fieldName,UtilValidate.isNotEmpty(function) ? Function.valueOf(function.toUpperCase()) : null));
",0,0,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
832,return name().charAt(0) + name().substring(1).toLowerCase();,"return name().charAt(0) + name().substring(1).toLowerCase();
",0,0,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
833,"redirectPathIsUrl = (redirectPath != null && redirectPath.toLowerCase().startsWith(""http""));","redirectPathIsUrl=(redirectPath != null && redirectPath.toLowerCase().startsWith(""http""));
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
834,"if (indexName != null && indexName.toUpperCase().startsWith(""PK_"")) continue;","if (indexName != null && indexName.toUpperCase().startsWith(""PK_"")) continue;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
835,"return !(content.toLowerCase().contains(""freemarker"")","return !(content.toLowerCase().contains(""freemarker"") || content.toLowerCase().contains(""import=\""java"") || content.toLowerCase().contains(""Runtime.getRuntime().exec("")|| content.toLowerCase().contains(""<%@ page"")|| content.toLowerCase().contains(""<script"")|| content.toLowerCase().contains(""<body>"")|| content.toLowerCase().contains(""<form"")|| content.toLowerCase().contains(""php"")|| content.toLowerCase().contains(""javascript"")|| content.toLowerCase().contains(""%eval"")|| content.toLowerCase().contains(""@eval"")|| content.toLowerCase().contains(""import os"")|| content.toLowerCase().contains(""passthru"")|| content.toLowerCase().contains(""exec"")|| content.toLowerCase().contains(""shell_exec"")|| content.toLowerCase().contains(""assert"")|| content.toLowerCase().contains(""str_rot13"")|| content.toLowerCase().contains(""system"")|| content.toLowerCase().contains(""phpinfo"")|| content.toLowerCase().contains(""base64_decode"")|| content.toLowerCase().contains(""chmod"")|| content.toLowerCase().contains(""mkdir"")|| content.toLowerCase().contains(""fopen"")|| content.toLowerCase().contains(""fclose"")|| content.toLowerCase().contains(""new file"")|| content.toLowerCase().contains(""import"")|| content.toLowerCase().contains(""upload"")|| content.toLowerCase().contains(""getFileName"")|| content.toLowerCase().contains(""Download"")|| content.toLowerCase().contains(""getOutputString"")|| content.toLowerCase().contains(""readfile""));
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, ReturnStatement-expression, ),
"
836,"&& (value.length() <= 6 || !value.toLowerCase().startsWith(""time'"") || !value.endsWith(""'""))) {","if (literalKind == EdmLiteralKind.URI && (value.length() <= 6 || !value.toLowerCase().startsWith(""time'"") || !value.endsWith(""'""))) {
  throw new EdmSimpleTypeException(EdmSimpleTypeException.LITERAL_ILLEGAL_CONTENT.addContent(value));
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
837,return new StringBuilder(dimension.name().toLowerCase()).append('\'').,"return new StringBuilder(dimension.name().toLowerCase()).append('\'').append(""SRID="").append(srid).append(';');
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
838,boolean useCDATA = customArgs.length > 1 && ((String) customArgs[1]),"boolean useCDATA=customArgs.length > 1 && ((String)customArgs[1]).toLowerCase().equals(""true"");
",0,0,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
839,Class<? extends Authenticator> authClass = getAuthenticators().get(authOption.toUpperCase());,"Class<? extends Authenticator> authClass=getAuthenticators().get(authOption.toUpperCase());
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
840,"return ""INSERT INTO "" + dbName + ""."" + OozieTable.VERSION.name().toUpperCase() + ""(""","return ""INSERT INTO "" + dbName + "".""+ OozieTable.VERSION.name().toUpperCase()+ ""(""+ OozieColumn.VER_versionNumber.columnName()+ "") VALUES(""+ OOZIE_VERSION+ "")"";
",0,0,7,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
841,"this.logLevels.put(levels[i].toUpperCase(), 1);","this.logLevels.put(levels[i].toUpperCase(),1);
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
842,"if (!entry.getKey().toLowerCase().endsWith(""port"")) continue;","if (!entry.getKey().toLowerCase().endsWith(""port"")) continue;
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
843,"if (!file.getName().toLowerCase().endsWith(""ar"")) return false;","if (!file.getName().toLowerCase().endsWith(""ar"")) return false;
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
844,"final boolean unix = !System.getProperty(""os.name"").toLowerCase().startsWith(""win"");","final boolean unix=!System.getProperty(""os.name"").toLowerCase().startsWith(""win"");
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
845,"return Boolean.getBoolean(""qpid.plugin.disabled:""+clazz.getSimpleName().toLowerCase()+"".""+next.getType())","return Boolean.getBoolean(""qpid.plugin.disabled:"" + clazz.getSimpleName().toLowerCase() + "".""+ next.getType()) || (next instanceof ConfiguredObjectTypeFactory && isDisabledConfiguredType((ConfiguredObjectTypeFactory<?>)next));
",0,4,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
846,"if (name.toLowerCase().endsWith("".war"") || isRoot(name) || name.equalsIgnoreCase(""META-INF"") || name.equalsIgnoreCase(""WEB-INF"")) {","if (name.toLowerCase().endsWith("".war"") || isRoot(name) || name.equalsIgnoreCase(""META-INF"")|| name.equalsIgnoreCase(""WEB-INF"")) {
  continue;
}
",0,1,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
847,if (name.length() == 0) name = clazz.getSimpleName().toLowerCase();,"if (name.length() == 0) name=clazz.getSimpleName().toLowerCase();
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
848,"String alias = path.getAliasHint(this).substring(0,1).toLowerCase();","String alias=path.getAliasHint(this).substring(0,1).toLowerCase();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
849,"final List<String> keys = new ArrayList<>(Arrays.asList(word.toLowerCase(), postag));","final List<String> keys=new ArrayList<>(Arrays.asList(word.toLowerCase(),postag));
",0,0,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
850,"String lemma = StringUtil.decodeShortestEditScript(toks[i].toLowerCase(), preds[i]);","String lemma=StringUtil.decodeShortestEditScript(toks[i].toLowerCase(),preds[i]);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
851,"return  NameFinderME.train(lang.toString().toLowerCase(), null, samples,","return NameFinderME.train(lang.toString().toLowerCase(),null,samples,params,new TokenNameFinderFactory());
",0,0,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
852,"Assert.assertEquals(""11SKU528111"".toLowerCase(), tokens[mgrsSpan1.getStart()]);","Assert.assertEquals(""11SKU528111"".toLowerCase(),tokens[mgrsSpan1.getStart()]);
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
853,"placeNameQueryString = ""(placename:("" + searchString.toLowerCase() + "") AND hierarchy:("" + formatForHierarchy(searchString) + ""))""","placeNameQueryString=""(placename:("" + searchString.toLowerCase() + "") AND hierarchy:(""+ formatForHierarchy(searchString)+ ""))""+ "" AND ""+ whereClause;
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
854,"doc.add(new StringField(""admincode"", (ccode + ""."" + admincode).toLowerCase(), Field.Store.YES));","doc.add(new StringField(""admincode"",(ccode + ""."" + admincode).toLowerCase(),Field.Store.YES));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
855,"private Function<String, String[]> tokenizer = s -> s.toLowerCase().split("" "");","private Function<String,String[]> tokenizer=s -> s.toLowerCase().split("" "");
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
856,if (word.equals(word.toLowerCase()) && (!Arrays.asList(englishPrepositions).contains(word)),"if (word.equals(word.toLowerCase()) && (!Arrays.asList(englishPrepositions).contains(word)) && word.length() > 3 && StringUtils.isAlphanumeric(word)) continue;
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
857,"if (f.getName().toString().toLowerCase().indexOf("".html_"")>-1)","if (f.getName().toString().toLowerCase().indexOf("".html_"") > -1) continue;
",0,2,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
858,"if ((c.equals(""so"")||c.equals(""such"")) && lems.get(i+1).toLowerCase().equals(""that"")){","if ((c.equals(""so"") || c.equals(""such"")) && lems.get(i + 1).toLowerCase().equals(""that"")) {
  op.setOperatorIf(""if"");
  bIfSet=true;
}
",0,1,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
859,"if((c.equals(""go"") && lems.get(i+1).toLowerCase().equals(""to"")) || c.equals(""goto"")  ){","if ((c.equals(""go"") && lems.get(i + 1).toLowerCase().equals(""to"")) || c.equals(""goto"")) {
  op.setOperatorIf("" break "" + lems.get(i + 1).toLowerCase() + "" _label_ "");
  bIfSet=true;
}
",0,17,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
860,"op.setOperatorIf("" break ""+lems.get(i+1).toLowerCase()+"" _label_ "");","op.setOperatorIf("" break "" + lems.get(i + 1).toLowerCase() + "" _label_ "");
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
861,"if (verbChunk.getLemmas().get(1).toLowerCase().equals(""class"") ||","if (verbChunk.getLemmas().get(1).toLowerCase().equals(""class"") || verbChunk.getLemmas().get(2).toLowerCase().equals(""class"")) {
  String className=verbChunk.getLemmas().get(verbChunk.getLemmas().size() - 1).toLowerCase();
  className=className.substring(0,1).toUpperCase() + className.substring(1,className.length());
  op.setOperatorIf(""class "" + className + ""{"");
  op.setOperatorFor(""{"");
  classBeingDefined=true;
  break;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
862,"className = className.substring(0, 1).toUpperCase()+className.substring(1, className.length());","className=className.substring(0,1).toUpperCase() + className.substring(1,className.length());
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
863,"if (classBeingDefined && Arrays.asList(dataTypesList).contains(dataType) && verbChunk.getLemmas().get(2).toLowerCase().equals(""attribute"")){","if (classBeingDefined && Arrays.asList(dataTypesList).contains(dataType) && verbChunk.getLemmas().get(2).toLowerCase().equals(""attribute"")) {
  op.setOperatorFor(dataType + "" "" + verbChunk.getLemmas().get(verbChunk.getLemmas().size() - 1).toLowerCase());
  classBeingDefined=true;
  break;
}
",0,0,13,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
864,"if (Arrays.asList(dataTypesList).contains(dataType) && verbChunk.getLemmas().get(2).toLowerCase().equals(""attribute"")){","if (Arrays.asList(dataTypesList).contains(dataType) && verbChunk.getLemmas().get(2).toLowerCase().equals(""attribute"")) {
  op.setOperatorFor(dataType + "" "" + verbChunk.getLemmas().get(verbChunk.getLemmas().size() - 1).toLowerCase());
  classBeingDefined=true;
  break;
}
",0,0,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
865,String p2 = (String) tokens.get(i + 1).toLowerCase();,"String p2=(String)tokens.get(i + 1).toLowerCase();
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
866,if (!WSDHelper.stopWords.contains(wordToDisambiguate.getSentence()[i],"if (!WSDHelper.stopWords.contains(wordToDisambiguate.getSentence()[i].toLowerCase()) && (wordToDisambiguate.getWordIndex() != i)) {
  String lemma=wordToDisambiguate.getLemmas()[i].toLowerCase().replaceAll(""[^a-z_]"","""").trim();
  if (lemma.length() > 1) {
    contextWords.add(lemma);
  }
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
867,String lemma = wordToDisambiguate.getLemmas()[i].toLowerCase(),"String lemma=wordToDisambiguate.getLemmas()[i].toLowerCase().replaceAll(""[^a-z_]"","""").trim();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
868,"return createColumnDescriptor(typeName, ""fake_"" + typeName.name().toLowerCase() + ""_col"");","return createColumnDescriptor(typeName,""fake_"" + typeName.name().toLowerCase() + ""_col"");
",0,0,7,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
869,"SCHEMA_NAME + ""."" + MigrateSystemTablesToSystemNamespaceIT.class.getSimpleName().toUpperCase();","private static final String TABLE_NAME=SCHEMA_NAME + ""."" + MigrateSystemTablesToSystemNamespaceIT.class.getSimpleName().toUpperCase();
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
"
870,"pkIds.add(Bytes.toString(Base64.getEncoder().encode(PhoenixRuntime.encodeColumnValues(conn, tableOrViewName.toUpperCase(), values, columns))));","pkIds.add(Bytes.toString(Base64.getEncoder().encode(PhoenixRuntime.encodeColumnValues(conn,tableOrViewName.toUpperCase(),values,columns))));
",0,0,14,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
871,"Object[] pkParts = PhoenixRuntime.decodeColumnValues(conn, tableName.toUpperCase(), Base64.getDecoder().decode(cursorIds[i]), columns);","Object[] pkParts=PhoenixRuntime.decodeColumnValues(conn,tableName.toUpperCase(),Base64.getDecoder().decode(cursorIds[i]),columns);
",0,0,14,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
872,"tenantKeyParts[4] = Bytes.toBytes(SCHEMA_NAME + ""."" +viewName.toUpperCase());;","tenantKeyParts[4]=Bytes.toBytes(SCHEMA_NAME + ""."" + viewName.toUpperCase());
",0,1,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
873,"steps.add(""    PARALLEL "" + parent.joinInfo.getJoinTypes()[index].toString().toUpperCase()","steps.add(""    PARALLEL "" + parent.joinInfo.getJoinTypes()[index].toString().toUpperCase() + ""-JOIN TABLE ""+ index+ (earlyEvaluation ? """" : ""(DELAYED EVALUATION)"")+ (skipMerge ? "" (SKIP MERGE)"" : """"));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
874,"ret.put(columnInfoList.get(i).getColumnName().replace(""\"""", """").toLowerCase(), columnValues[i]);","ret.put(columnInfoList.get(i).getColumnName().replace(""\"""","""").toLowerCase(),columnValues[i]);
",0,0,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
875,"boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(""COUNT("") ? true : false;","boolean isSelectCountStatement=query.getStatement().toUpperCase().trim().contains(""COUNT("") ? true : false;
",0,1,10,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
876,"ddl.append(""  "").append(""constraint pk_"").append(PhoenixUtil.getTableSchema(tableName.toUpperCase())[1]).append("" primary key("")","ddl.append(""  "").append(""constraint pk_"").append(PhoenixUtil.getTableSchema(tableName.toUpperCase())[1]).append("" primary key("").append(realRowKeys.deleteCharAt(realRowKeys.length() - 1)).append("")\n)\n"");
",0,0,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
"
877,"host = new URL(referer).getHost().toLowerCase().replaceFirst(""^www."", """");","host=new URL(referer).getHost().toLowerCase().replaceFirst(""^www."","""");
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
878,return this.supportedCodecs.contains(TEMPFILE_CODEC.valueOf(codec.toUpperCase()));,"return this.supportedCodecs.contains(TEMPFILE_CODEC.valueOf(codec.toUpperCase()));
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
879,"mathMethod = Math.class.getDeclaredMethod(func.toLowerCase(), double.class);","mathMethod=Math.class.getDeclaredMethod(func.toLowerCase(),double.class);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
PrimitiveType(TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
880,"String[] args = { ""-x"", cluster.getExecType().name().toLowerCase(), ""-g"", ""jython"", scriptName };","String[] args={""-x"",cluster.getExecType().name().toLowerCase(),""-g"",""jython"",scriptName};
",0,0,11,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
881,"if(fs.alias != null && fs.alias.toLowerCase().startsWith(""nullalias"")){","if (fs.alias != null && fs.alias.toLowerCase().startsWith(""nullalias"")) {
  fs.alias=null;
}
",0,0,6,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
882,"return ""plc4c_"" + camelCaseToSnakeCase(getProtocolName()).toLowerCase() +","return ""plc4c_"" + camelCaseToSnakeCase(getProtocolName()).toLowerCase() + ""_""+ camelCaseToSnakeCase(getFlavorName()).toLowerCase()+ ""_""+ camelCaseToSnakeCase(typeName).toLowerCase();
",0,0,4,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
883,ArrayField.LoopType loopType = ArrayField.LoopType.valueOf(ctx.loopType.getText().toUpperCase());,"ArrayField.LoopType loopType=ArrayField.LoopType.valueOf(ctx.loopType.getText().toUpperCase());
",0,0,7,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
884,"String dataTypeString = matcher.group(""datatype"") != null ? matcher.group(""datatype"").toUpperCase() : ""NULL"";","String dataTypeString=matcher.group(""datatype"") != null ? matcher.group(""datatype"").toUpperCase() : ""NULL"";
",0,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
885,"switch (matcher.group(""dataType"").toUpperCase()) {","switch (matcher.group(""dataType"").toUpperCase()) {
case ""INTEGER"":
  dataType=""DINT"";
break;
case ""BYTE"":
dataType=""BYTE"";
break;
case ""SHORT"":
dataType=""INT"";
break;
case ""LONG"":
dataType=""LINT"";
break;
case ""FLOAT"":
dataType=""REAL"";
break;
case ""DOUBLE"":
dataType=""LREAL"";
break;
case ""BOOLEAN"":
dataType=""BOOL"";
break;
default :
dataType=matcher.group(""dataType"").toUpperCase();
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, SwitchStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
"
886,"return (viewName == null) || viewName.toString().trim().toLowerCase().equals(""null"");","return (viewName == null) || viewName.toString().trim().toLowerCase().equals(""null"");
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
887,"boolean isLocalRun = cmdPos < args.length && ""localrun"".equals(args[cmdPos].toLowerCase());","boolean isLocalRun=cmdPos < args.length && ""localrun"".equals(args[cmdPos].toLowerCase());
",0,0,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
888,"result.getStdout().contains(""\""archive\"": \""builtin:","assertTrue(result.getStdout().contains(""\""archive\"": \""builtin://"" + tester.getSinkType().getValue().toLowerCase() + ""\""""),result.getStdout());
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ),
"
889,"pw.print(methodElement.getSimpleName().toString().replaceAll(""([A-Z])"", ""_$1"").toUpperCase() + ""_MAP_CREATOR"");","pw.print(methodElement.getSimpleName().toString().replaceAll(""([A-Z])"",""_$1"").toUpperCase() + ""_MAP_CREATOR"");
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
890,"boolean isLdaps = String.valueOf(env.get(Context.PROVIDER_URL)).trim().toLowerCase().startsWith(""ldaps:"");","boolean isLdaps=String.valueOf(env.get(Context.PROVIDER_URL)).trim().toLowerCase().startsWith(""ldaps:"");
",0,0,11,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
891,if (String.valueOf(System.getProperty(StandardSystemProperty.JAVA_VENDOR.key())),"if (String.valueOf(System.getProperty(StandardSystemProperty.JAVA_VENDOR.key())).toUpperCase().contains(""IBM"")) {
  credentialLifetime=GSSCredential.INDEFINITE_LIFETIME;
}
 else {
  credentialLifetime=GSSCredential.DEFAULT_LIFETIME;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
"
892,"return String.valueOf(path).toLowerCase().startsWith(""data:"") ? ""data:..."" : path;","return String.valueOf(path).toLowerCase().startsWith(""data:"") ? ""data:..."" : path;
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
893,"closeConnection(AmqpError.INVALID_FIELD, String.format(""%s frame received on channel %d which is not mapped"", frame.getClass().getSimpleName().toLowerCase(), channel));","closeConnection(AmqpError.INVALID_FIELD,String.format(""%s frame received on channel %d which is not mapped"",frame.getClass().getSimpleName().toLowerCase(),channel));
",0,0,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
894,"assertEquals((TABLE_PREFIX + TableName.LOGGING_EVENT.name()).toLowerCase(),","assertEquals((TABLE_PREFIX + TableName.LOGGING_EVENT.name()).toLowerCase(),_dbNameResolver.getTableName(TableName.LOGGING_EVENT));
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
895,|| (!tableName.equals(tableName.toUpperCase()),"return tableExistsCase(tableName.toUpperCase(),metaData) || tableExistsCase(tableName.toLowerCase(),metaData) || (!tableName.equals(tableName.toUpperCase()) && !tableName.equals(tableName.toLowerCase()) && tableExistsCase(tableName,metaData));
",0,0,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
"
896,Class<? extends ConfiguredObject>[] hierarchy = finder.getHierarchy(category.toLowerCase());,"Class<? extends ConfiguredObject>[] hierarchy=finder.getHierarchy(category.toLowerCase());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
897,final boolean isGzipCompressed = GZIP_CONTENT_ENCODING.equals(headers.get(CONTENT_ENCODING_HEADER.toUpperCase()));,"final boolean isGzipCompressed=GZIP_CONTENT_ENCODING.equals(headers.get(CONTENT_ENCODING_HEADER.toUpperCase()));
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
898,"s.append(""0x"" + fields[UNICODE].replaceFirst(""^0+"", """").toLowerCase() + "" "");","s.append(""0x"" + fields[UNICODE].replaceFirst(""^0+"","""").toLowerCase() + "" "");
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
899,if (!statistics.getName().toLowerCase().contains(typeSuffix),"if (!statistics.getName().toLowerCase().contains(typeSuffix) && statistics.getUnits() != StatisticUnit.ABSOLUTE_TIME && statistics.getUnits() != StatisticUnit.TIME_DURATION) {
  if (statistics.getUnits() == StatisticUnit.MESSAGES || statistics.getUnits() == StatisticUnit.BYTES) {
    final String units=statistics.getUnits().toString() + ""s"";
    if (!metricName.contains(units)) {
      suffix=""_"" + units;
    }
  }
  suffix=suffix + ""_"" + typeSuffix;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
900,return (Color) Color.class.getField(colourName.toLowerCase()).get(null);,"return (Color)Color.class.getField(colourName.toLowerCase()).get(null);
",0,0,7,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
901,"return Arrays.asList(supportedSaslMechanisms.split("","")).contains(mechanismName.toUpperCase());","return Arrays.asList(supportedSaslMechanisms.split("","")).contains(mechanismName.toUpperCase());
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
902,_rejectBehaviour = rejectBehaviourValue == null ? null : RejectBehaviour.valueOf(rejectBehaviourValue.toUpperCase());,"_rejectBehaviour=rejectBehaviourValue == null ? null : RejectBehaviour.valueOf(rejectBehaviourValue.toUpperCase());
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
903,int result = _host != null ? _host.toLowerCase().hashCode() : 0;,"int result=_host != null ? _host.toLowerCase().hashCode() : 0;
",0,0,8,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
904,if (accessTypes.contains(aclName.toLowerCase()) && (users.contains(hivePrincipal.getName()),"if (accessTypes.contains(aclName.toLowerCase()) && (users.contains(hivePrincipal.getName()) || groups.contains(hivePrincipal.getName()))) {
  creationDate=(policy.getCreateTime() == null) ? creationDate : (int)(policy.getCreateTime().getTime() / 1000);
  delegateAdmin=(policyItem.getDelegateAdmin() == null) ? delegateAdmin : policyItem.getDelegateAdmin().booleanValue();
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
905,"return !StringUtils.isEmpty(url) && url.toLowerCase().startsWith(""https"");","return !StringUtils.isEmpty(url) && url.toLowerCase().startsWith(""https"");
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
906,"return fieldName + "":*"" + ClientUtils.escapeQueryChars(value.toString().trim().toLowerCase()) + ""*"";","return fieldName + "":*"" + ClientUtils.escapeQueryChars(value.toString().trim().toLowerCase())+ ""*"";
",0,0,9,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
907,List<String> valuesList = this.queryPairs.get(key.toLowerCase());,"List<String> valuesList=this.queryPairs.get(key.toLowerCase());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
908,if (idx < args.length && Options.REDIS_AGGREGATE.name().equals(args[idx].toUpperCase())) {,"if (idx < args.length && Options.REDIS_AGGREGATE.name().equals(args[idx].toUpperCase())) {
  builder.param(Options.REDIS_AGGREGATE,args[idx + 1]);
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
909,if (Options.REDIS_BEFORE.name().equals(args[0].toUpperCase())) {,"if (Options.REDIS_BEFORE.name().equals(args[0].toUpperCase())) {
  builder.param(Options.REDIS_BEFORE,Boolean.TRUE);
}
 else {
  builder.param(Options.REDIS_AFTER,Boolean.TRUE);
}
",0,0,6,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
910,switch (args[idx].toUpperCase()) {,"switch (args[idx].toUpperCase()) {
case RedisConstants.IDLE:
  builder.param(Options.REDIS_IDLE,Long.parseLong(args[idx + 1]));
idx+=2;
break;
case RedisConstants.TIME:
builder.param(Options.REDIS_TIME,Long.parseLong(args[idx + 1]));
idx+=2;
break;
case RedisConstants.RETRYCOUNT:
builder.param(Options.REDIS_RETRYCOUNT,Integer.parseInt(args[idx + 1]));
idx+=2;
break;
case RedisConstants.FORCE:
builder.param(Options.REDIS_FORCE,Boolean.TRUE);
idx+=1;
break;
case RedisConstants.JUSTID:
builder.param(Options.REDIS_JUSTID,Boolean.TRUE);
idx+=1;
break;
default :
idx+=1;
break;
}
",0,0,3,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
"
911,"ConfigOptions.key(""startTimeMs"".toLowerCase()).longType().defaultValue(-1L);","public static final ConfigOption<Long> OPTIONAL_START_TIME_MILLS=ConfigOptions.key(""startTimeMs"".toLowerCase()).longType().defaultValue(-1L);
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, ),
"
912,"doc.add(new StringField(FieldConstants.LOCALE, data.getLocale()","doc.add(new StringField(FieldConstants.LOCALE,data.getLocale().toLowerCase(),Field.Store.YES));
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
913,"if (val.toLowerCase().startsWith(""mailto:"") && val.indexOf('@') >= 0) {","if (val.toLowerCase().startsWith(""mailto:"") && val.indexOf('@') >= 0) {
  String val1=""http://www."" + val.substring(val.indexOf('@') + 1);
  if (new UrlValidator(customSchemes).isValid(val1)) {
    foundURL=true;
  }
 else {
    ret.invalidTags.add(attr + "" "" + val);
    val="""";
  }
}
 else {
  ret.invalidTags.add(attr + "" "" + val);
  val="""";
}
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
914,return locale == null ? tag.toLowerCase() : tag.toLowerCase(locale);,"return locale == null ? tag.toLowerCase() : tag.toLowerCase(locale);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
915,"return Enum.valueOf(FontFaceSourceType.class, source.name.toUpperCase());","return Enum.valueOf(FontFaceSourceType.class,source.name.toUpperCase());
",0,0,5,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
916,"public static final boolean caseInsensitive = (System.getProperty(""os.name"").toLowerCase().startsWith(""windows"") ||","public static final boolean caseInsensitive=(System.getProperty(""os.name"").toLowerCase().startsWith(""windows"") || System.getProperty(""os.name"").toLowerCase().startsWith(""mac""));
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
917,"tableName = tablePrefix + ""INDEX_"" + UUID.randomUUID().toString().replace(""-"", """").toUpperCase();","tableName=tablePrefix + ""INDEX_"" + UUID.randomUUID().toString().replace(""-"","""").toUpperCase();
",0,0,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
918,"return CompressionType.valueOf(get(String.format(SYSTEM_COMPRESSION_TYPE, systemName), SYSTEM_COMPRESSION_TYPE_DEFAULT.name()).toUpperCase());","return CompressionType.valueOf(get(String.format(SYSTEM_COMPRESSION_TYPE,systemName),SYSTEM_COMPRESSION_TYPE_DEFAULT.name()).toUpperCase());
",0,0,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
919,"return registry.newGauge(groupName, new Gauge<T>((prefix + name).toLowerCase(), valueFunc.getValue()) {","return registry.newGauge(groupName,new Gauge<T>((prefix + name).toLowerCase(),valueFunc.getValue()){
  @Override public T getValue(){
    return valueFunc.getValue();
  }
}
);
",0,2,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
920,"ApplicationConfig.ApplicationMode.BATCH.name().toLowerCase(), ApplicationConfig.APP_RUN_ID, ""run-id"")));","storageConfig=new StorageConfig(new MapConfig(ImmutableMap.of(String.format(StorageConfig.CHANGELOG_STREAM,STORE_NAME0),""changelog-system.changelog-stream0"",ApplicationConfig.APP_MODE,ApplicationConfig.ApplicationMode.BATCH.name().toLowerCase(),ApplicationConfig.APP_RUN_ID,""run-id"")));
",0,0,5,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(),
StringLiteral(),
"
921,"if (!impliesResource(model.getImplyMethodMap().get(policyKey.toLowerCase()),","if (!impliesResource(model.getImplyMethodMap().get(policyKey.toLowerCase()),part.getValue(),otherPart.getValue())) {
  return false;
}
",0,0,6,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
922,"addCustomParam(prefix + "":"" + vName, vName, (toLowerCase) ? name.trim().toLowerCase() : name.trim());","addCustomParam(prefix + "":"" + vName,vName,(toLowerCase) ? name.trim().toLowerCase() : name.trim());
",0,0,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
923,"if (! (extParentDir.toLowerCase().startsWith(""hdfs:","if (!(extParentDir.toLowerCase().startsWith(""hdfs://"") || extParentDir.toLowerCase().startsWith(""s3://"") || extParentDir.contains(""://""))) {
  String scheme=fileSystem.getUri().toString();
  LOGGER.info(""scheme = "" + scheme);
  extParentDir=scheme + extParentDir;
  extTableDir=scheme + extTableDir;
  LOGGER.info(""Add scheme in extParentDir = "" + extParentDir + "", extTableDir = ""+ extTableDir);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
924,"return this.protocol == null ? """" : this.protocol.toLowerCase();","return this.protocol == null ? """" : this.protocol.toLowerCase();
",0,0,7,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
925,"buff.append(colNames[i].toLowerCase() + ""='"" + rs.getString(i + 1) + ""' "");","buff.append(colNames[i].toLowerCase() + ""='"" + rs.getString(i + 1)+ ""' "");
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
926,"windows = System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1;","windows=System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1;
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
927,"return getExchangeIds(type.toLowerCase() + ""."" + FIELD_PROPERTIES + ""."" + property, value);","return getExchangeIds(type.toLowerCase() + ""."" + FIELD_PROPERTIES+ "".""+ property,value);
",0,0,8,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
928,"document.add(new Field(type.toString().toLowerCase() + ""."" + FIELD_PROPERTIES + ""."" + entry.getKey(), (String) entry.getValue(), Field.Store.YES, Field.Index.ANALYZED));","document.add(new Field(type.toString().toLowerCase() + ""."" + FIELD_PROPERTIES+ "".""+ entry.getKey(),(String)entry.getValue(),Field.Store.YES,Field.Index.ANALYZED));
",0,0,16,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
929,fieldName = prefix + method.getName().substring(3).toLowerCase();,"fieldName=prefix + method.getName().substring(3).toLowerCase();
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
930,"int offset = parts[1].toLowerCase().indexOf(""charset="");","int offset=parts[1].toLowerCase().indexOf(""charset="");
",0,0,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
931,"String normalized = content.substring(0, Math.min(100, content.length())).toUpperCase();","String normalized=content.substring(0,Math.min(100,content.length())).toUpperCase();
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
932,"for (String s : Splitter.on(',').trimResults().omitEmptyStrings().split(defaultTags.toLowerCase())) {","for (String s : Splitter.on(',').trimResults().omitEmptyStrings().split(defaultTags.toLowerCase())) {
  includeTagsBuilder.add(s);
}
",0,0,10,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
933,return fields.contains(BeanFilter.ALL_FIELDS) || fields.contains(name.toLowerCase());,"return fields.contains(BeanFilter.ALL_FIELDS) || fields.contains(name.toLowerCase());
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
934,"assertEquals(result, getVisitReserved(tag.toUpperCase(), true, true, attrs));","assertEquals(result,getVisitReserved(tag.toUpperCase(),true,true,attrs));
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
935,"if (sql.toLowerCase().startsWith(""select * from "") == false) {","if (sql.toLowerCase().startsWith(""select * from "") == false) {
  String message=format(Level.WARNING,""excp.limited_feature_syntax"",sql);
  throw new SQLInvalidStatementException(message,this.rs.getSQL(),this.rs.getFile());
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
936,"if (ArrayUtils.contains(attributes, atts.getLocalName(i).toLowerCase())","if (ArrayUtils.contains(attributes,atts.getLocalName(i).toLowerCase()) && atts.getValue(i).startsWith(""/"")) {
  log.trace(""Updating attribute {}"",atts.getLocalName(i));
  value=slingRequest.getResourceResolver().map(slingRequest,atts.getValue(i));
  log.trace(""Mapped value {}"",value);
}
 else {
  log.trace(""Skipping attribute {}"",atts.getLocalName(i));
  value=atts.getValue(i);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
937,"this.method = (method == null) ? ""GET"" : method.toUpperCase();","this.method=(method == null) ? ""GET"" : method.toUpperCase();
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
938,"String topic = JobHandlingDistributionQueue.DISTRIBUTION_QUEUE_TOPIC + '/' + type.name().toLowerCase() + '/' + prefix + ""/"" + queueName;","String topic=JobHandlingDistributionQueue.DISTRIBUTION_QUEUE_TOPIC + '/' + type.name().toLowerCase()+ '/'+ prefix+ ""/""+ queueName;
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
939,"char[] target = tmp.substring(0, at).toLowerCase().toCharArray();","char[] target=tmp.substring(0,at).toLowerCase().toCharArray();
",0,0,9,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
940,} else if (engineNames.length == 1 && ANY_ENGINE.contains(engineNames[0].toUpperCase())) {,"if (engineNames.length == 1 && ANY_ENGINE.contains(engineNames[0].toUpperCase())) {
  genericBindingsValuesProviders.put(ref,(BindingsValuesProvider)service);
}
 else {
  for (  String engineName : engineNames) {
    Map<ServiceReference,BindingsValuesProvider> langProviders=langBindingsValuesProviders.get(engineName);
    if (langProviders == null) {
      langProviders=new ConcurrentSkipListMap<ServiceReference,BindingsValuesProvider>();
      langBindingsValuesProviders.put(engineName,langProviders);
    }
    langProviders.put(ref,(BindingsValuesProvider)service);
  }
}
",0,0,7,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
941,scope = (scope != null && scope.trim().length() > 0 ? scope.trim(),"scope=(scope != null && scope.trim().length() > 0 ? scope.trim().toUpperCase() : null);
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
942,"sqoopOptions.getConf().get(OraOopConstants.ORAOOP_DISABLED, ""false"")","String oraOopDisabled=sqoopOptions.getConf().get(OraOopConstants.ORAOOP_DISABLED,""false"").toLowerCase();
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
"
943,if (!updateKeysUppercase.contains(colNames[i].toUpperCase())) {,"if (!updateKeysUppercase.contains(colNames[i].toUpperCase())) {
  outColNames[j++]=colNames[i];
}
",0,0,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
944,colNames[2 + i] =  cols[i].getName().toUpperCase();,"colNames[2 + i]=cols[i].getName().toUpperCase();
",0,0,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
945,"Path tablePath = new Path(hiveMiniCluster.getTempFolderPath() + ""/"" + getTableName().toLowerCase());","Path tablePath=new Path(hiveMiniCluster.getTempFolderPath() + ""/"" + getTableName().toLowerCase());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
946,"updateStr += manager.escapeColName(colNames[i].toUpperCase()) + "" = ""+vals[count * colNames.length + i];","updateStr+=manager.escapeColName(colNames[i].toUpperCase()) + "" = "" + vals[count * colNames.length + i];
",0,1,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
947,this.localName = localName != null ? localName : name().toLowerCase();,"this.localName=localName != null ? localName : name().toLowerCase();
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
948,if (Entityhub.ENTITYHUB_IDS.contains(this.referencedSiteID.toLowerCase())) {,"if (Entityhub.ENTITYHUB_IDS.contains(this.referencedSiteID.toLowerCase())) {
  log.debug(""Init NamedEntityTaggingEngine instance for the Entityhub"");
  this.referencedSiteID=null;
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
949,return new IRI(prefix+SHA1.toLowerCase()+ '-' + ((FileBlob)blob).getSha1());,"return new IRI(prefix + SHA1.toLowerCase() + '-'+ ((FileBlob)blob).getSha1());
",0,0,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
950,"return new IRI(baseUri + SHA1.toLowerCase() + ""-"" + hexDigest);","return new IRI(baseUri + SHA1.toLowerCase() + ""-""+ hexDigest);
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
951,"File siteConfigDir = new File(configRoot,CONFIG_PATH+config.getName().toLowerCase());","File siteConfigDir=new File(configRoot,CONFIG_PATH + config.getName().toLowerCase());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
952,"this.name = defaultName.substring(0, 1).toLowerCase() + defaultName.substring(1);","this.name=defaultName.substring(0,1).toLowerCase() + defaultName.substring(1);
",0,0,10,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
953,"String localName = argument2Splitted[0].substring(0, 1).toLowerCase()","String localName=argument2Splitted[0].substring(0,1).toLowerCase() + argument2Splitted[0].substring(1,argument2Splitted[0].length());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
954,"newString += "" "" + split[i].substring(0, 1).toLowerCase()","newString+="" "" + split[i].substring(0,1).toLowerCase() + split[i].substring(1,split[i].length());
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
955,"CgroupUtils.writeFileByLine(CgroupUtils.getDir(this.dir, FREEZER_STATE), state.name().toUpperCase());","CgroupUtils.writeFileByLine(CgroupUtils.getDir(this.dir,FREEZER_STATE),state.name().toUpperCase());
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
956,char unitChar = m.group(2).toLowerCase().charAt(0);,"char unitChar=m.group(2).toLowerCase().charAt(0);
",0,0,8,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
957,String includeParams = (urlComponent.getUrlIncludeParams() != null ? urlComponent.getUrlIncludeParams().toLowerCase() : UrlProvider.GET);,"String includeParams=(urlComponent.getUrlIncludeParams() != null ? urlComponent.getUrlIncludeParams().toLowerCase() : UrlProvider.GET);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
958,"return new BigInteger(165, RANDOM).toString(36).toUpperCase();","return new BigInteger(165,RANDOM).toString(36).toUpperCase();
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
959,"if ((""property"".equals(property.getLocalName().toLowerCase()))) {","if ((""property"".equals(property.getLocalName().toLowerCase()))) {
  String propertyName=property.getAttributeValue(new QName(""name""));
  String mName=""set"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
  if (property.getAttributeValue(new QName(""value"")) != null) {
    String value=property.getAttributeValue(new QName(""value""));
    setInstanceProperty(propertyName,value,o);
  }
 else {
    OMElement value=property.getFirstElement();
    if (value != null) {
      try {
        Method method=o.getClass().getMethod(mName,OMElement.class);
        if (log.isDebugEnabled()) {
          log.debug(""Setting property :: invoking method "" + mName + ""(""+ value+ "")"");
        }
        method.invoke(o,value);
      }
 catch (      Exception e) {
        handleException(""Error setting property : "" + propertyName + "" as an OMElement property into class mediator : ""+ o.getClass()+ "" : ""+ e.getMessage(),e);
      }
    }
  }
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
"
960,"String method = request.getRequest() != null ? request.getRequest().getRequestLine().getMethod().toUpperCase():"""";","String method=request.getRequest() != null ? request.getRequest().getRequestLine().getMethod().toUpperCase() : """";
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
961,syncopeStatus = Status.valueOf(((UserTO) any).getStatus().toUpperCase());,"syncopeStatus=Status.valueOf(((UserTO)any).getStatus().toUpperCase());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
962,"""attachment; filename="" + reportExec.getReport().getName() + '.' + format.name().toLowerCase()).","return Response.ok(sout).header(HttpHeaders.CONTENT_DISPOSITION,""attachment; filename="" + reportExec.getReport().getName() + '.'+ format.name().toLowerCase()).build();
",0,0,8,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
CharacterLiteral(InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
"
963,String cipherPlusPassword = ('{' + cipherAlgorithm.toLowerCase() + '}' + base64EncodedPassword);,"String cipherPlusPassword=('{' + cipherAlgorithm.toLowerCase() + '}'+ base64EncodedPassword);
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
964,"end(AnyTypeKind.USER, ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);","end(AnyTypeKind.USER,ResourceOperation.DELETE.name().toLowerCase(),Result.SUCCESS,null,null,delta);
",0,2,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
965,File file = new File(reportTemplatesDirName + name + '.' + format.name().toLowerCase());,"File file=new File(reportTemplatesDirName + name + '.'+ format.name().toLowerCase());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
966,"case VECT_SPROP:return ""u(v""+_type.name().toLowerCase()+"")"";","case VECT_SPROP:
",0,0,1,,"SimpleName(SwitchCase-expression, ),
"
967,"String opcode = ""ROW_""+((AggUnaryOp)hop).getOp().name().toUpperCase()+""S"";","String opcode=""ROW_"" + ((AggUnaryOp)hop).getOp().name().toUpperCase() + ""S"";
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
968,return CompressConfig.valueOf(ConfigurationManager.getDMLConfig().getTextValue(DMLConfig.COMPRESSED_LINALG),"return CompressConfig.valueOf(ConfigurationManager.getDMLConfig().getTextValue(DMLConfig.COMPRESSED_LINALG).toUpperCase()) == CompressConfig.WORKLOAD;
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
969,"raiseValidateError(""Invalid number of arguments for function "" + this.getOpCode().toString().toLowerCase()","raiseValidateError(""Invalid number of arguments for function "" + this.getOpCode().toString().toLowerCase() + ""(). This function only takes 1 or 2 arguments."",false);
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
970,case DataExpression.DATATYPEPARAM: setDataType(Types.DataType.valueOf(((String) val).toUpperCase())); break;,"case DataExpression.DATATYPEPARAM:
",0,0,1,,"QualifiedName(SwitchCase-expression, ),
"
971,"if(_formatTypeString != null && EnumUtils.isValidEnum(Types.FileFormat.class, _formatTypeString.toUpperCase()))","if (_formatTypeString != null && EnumUtils.isValidEnum(Types.FileFormat.class,_formatTypeString.toUpperCase())) setFileFormat(Types.FileFormat.safeValueOf(_formatTypeString));
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
972,"_mvMethodList[listIx] = MVMethod.valueOf(mvobj.get(""method"").toString().toUpperCase());","_mvMethodList[listIx]=MVMethod.valueOf(mvobj.get(""method"").toString().toUpperCase());
",0,0,9,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
973,return DATE_FORMATS.keySet().parallelStream().filter(e -> dateString.toLowerCase().matches(e)).findFirst(),"return DATE_FORMATS.keySet().parallelStream().filter(e -> dateString.toLowerCase().matches(e)).findFirst().map(DATE_FORMATS::get).orElseThrow(() -> new NullPointerException(""Unknown date format.""));
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
974,"TestUtils.compareScalars(String.valueOf(input[i].toUpperCase()), output[i]);","TestUtils.compareScalars(String.valueOf(input[i].toUpperCase()),output[i]);
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
975,"""inc="" + String.valueOf(inc).toUpperCase(), ""tol="" + tol, ""reg="" + reg, ""maxOut="" + maxOut, ""maxIn=""+maxIn, ""verbose=FALSE""};","programArgs=new String[]{""-nvargs"",""X="" + input(""X""),""Y="" + input(""Y""),""output="" + output(""betas""),""inc="" + String.valueOf(inc).toUpperCase(),""tol="" + tol,""reg="" + reg,""maxOut="" + maxOut,""maxIn="" + maxIn,""verbose=FALSE""};
",0,2,14,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(),
"
976,"String[] lin = new String[] {""-stats"", ""-lineage"", ReuseCacheType.REUSE_HYBRID.name().toLowerCase()};","String[] lin=new String[]{""-stats"",""-lineage"",ReuseCacheType.REUSE_HYBRID.name().toLowerCase()};
",0,0,10,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
977,"+ "" "" + String.valueOf(!dp).toUpperCase() + "" "" + expectedDir();","rCmd=""Rscript"" + "" "" + fullRScriptName + "" ""+ inputDir()+ "" ""+ String.valueOf(K)+ "" ""+ String.valueOf(!dp).toUpperCase()+ "" ""+ expectedDir();
",0,0,7,,"StringLiteral(),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(),
SimpleName(MethodInvocation-name, ),
"
978,"""single="" + String.valueOf(singleWorker).toUpperCase(), ""runs="" + String.valueOf(runs), ""out="" + output(""Z"")};","programArgs=new String[]{""-stats"",""-nvargs"",""in_X1="" + TestUtils.federatedAddress(port1,input(""X1"")),""in_X2="" + TestUtils.federatedAddress(port2,input(""X2"")),""rows="" + rows,""cols="" + cols,""single="" + String.valueOf(singleWorker).toUpperCase(),""runs="" + String.valueOf(runs),""out="" + output(""Z"")};
",0,1,12,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ),
"
979,"programArgs = new String[] {""-args"", input(""X1""), input(""X2""), input(""Y""), Boolean.toString(rowPartitioned).toUpperCase(), expected(""Z"")};","programArgs=new String[]{""-args"",input(""X1""),input(""X2""),input(""Y""),Boolean.toString(rowPartitioned).toUpperCase(),expected(""Z"")};
",0,0,16,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
980,"input(""X1""), input(""X2""), input(""X3""), input(""X4""), Boolean.toString(reversedInputs).toUpperCase(),","programArgs=new String[]{""-stats"",""100"",""-args"",input(""X1""),input(""X2""),input(""X3""),input(""X4""),Boolean.toString(reversedInputs).toUpperCase(),Boolean.toString(weighted).toUpperCase(),expected(""F"")};
",0,0,12,,"SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
981,"Boolean.toString(rowPartitioned).toUpperCase(), input(""v""), input(""w""), expected(""S"")};","programArgs=new String[]{""-stats"",""100"",""-args"",input(""X1""),input(""X2""),input(""X3""),input(""X4""),Boolean.toString(rowPartitioned).toUpperCase(),input(""v""),input(""w""),expected(""S"")};
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
"
982,"rCmd = ""Rscript"" + "" "" + fullRScriptName + "" "" + csvOutputName + "" "" + Boolean.toString(header).toUpperCase()","rCmd=""Rscript"" + "" "" + fullRScriptName + "" ""+ csvOutputName+ "" ""+ Boolean.toString(header).toUpperCase()+ "" ""+ sep+ "" ""+ rOutput;
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
983,"String.valueOf(et == ExecType.SPARK).toUpperCase(),","programArgs=new String[]{""-stats"",""-args"",input(""X""),String.valueOf(et == ExecType.SPARK).toUpperCase(),String.valueOf(row).toUpperCase(),output(""R"")};
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
984,"testname.equals(TEST_NAME1) ? String.valueOf(pred).toUpperCase() : input(""X""), output(""R"") };","programArgs=new String[]{""-explain"",""hops"",""-stats"",""-args"",testname.equals(TEST_NAME1) ? String.valueOf(pred).toUpperCase() : input(""X""),output(""R"")};
",0,0,11,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
"
985,"rCmd = getRCmd(testname.equals(TEST_NAME1) ? String.valueOf(pred).toUpperCase() : inputDir(), expectedDir());","rCmd=getRCmd(testname.equals(TEST_NAME1) ? String.valueOf(pred).toUpperCase() : inputDir(),expectedDir());
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
986,"this.signature = new FunctionSignature(funcType, funcName.toLowerCase(), retType, params);","this.signature=new FunctionSignature(funcType,funcName.toLowerCase(),retType,params);
",0,0,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
987,"return returnType.getType().name().toLowerCase() + "" "" + buildSimpleFunctionSignature(funcName, paramTypes);","return returnType.getType().name().toLowerCase() + "" "" + buildSimpleFunctionSignature(funcName,paramTypes);
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
988,"throw new TajoRuntimeException(new UnsupportedException(""data type '"" + fieldType.toUpperCase() + ""'""));","throw new TajoRuntimeException(new UnsupportedException(""data type '"" + fieldType.toUpperCase() + ""'""));
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
989,"params[0].toUpperCase(), null);","ResultSet data=metadata.getUDTs(null,baseSchema.getSchemaName() != null && !baseSchema.getSchemaName().isEmpty() ? baseSchema.getSchemaName().toUpperCase() : null,params[0].toUpperCase(),null);
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NullLiteral(),
"
990,"params[0].toUpperCase(), false, true);","ResultSet indexes=metadata.getIndexInfo(null,baseSchema.getSchemaName() != null && !baseSchema.getSchemaName().isEmpty() ? baseSchema.getSchemaName().toUpperCase() : null,params[0].toUpperCase(),false,true);
",0,0,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
BooleanLiteral(),
BooleanLiteral(),
"
991,"if (indexes.getString(""INDEX_NAME"").equals(params[1].toUpperCase())) {","if (indexes.getString(""INDEX_NAME"").equals(params[1].toUpperCase())) {
  result=true;
  break;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
992,"params[0].toUpperCase(), new String[] { ""TABLE"" });","ResultSet tables=metadata.getTables(null,baseSchema.getSchemaName() != null && !baseSchema.getSchemaName().isEmpty() ? baseSchema.getSchemaName().toUpperCase() : null,params[0].toUpperCase(),new String[]{""TABLE""});
",0,0,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
993,"pstmt.setString(paramIdx, params[paramIdx-1].toUpperCase());","pstmt.setString(paramIdx,params[paramIdx - 1].toUpperCase());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
994,return isDelimited(part) ? stripQuote(part) : part.toLowerCase();,"return isDelimited(part) ? stripQuote(part) : part.toLowerCase();
",0,0,6,,"SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
995,"assertEquals(""AF4B5965-B176-4552-B3C1-FBBE2F52C305"".toLowerCase(), idValue.get(""elementId"").get(1).asText());","assertEquals(""AF4B5965-B176-4552-B3C1-FBBE2F52C305"".toLowerCase(),idValue.get(""elementId"").get(1).asText());
",0,1,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
996,"return new SetSession(ctx.name.getText().toUpperCase(), value);","return new SetSession(ctx.name.getText().toUpperCase(),value);
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
997,return pattern.split(e.getClass().getCanonicalName().substring(24))[0].toUpperCase();,"return pattern.split(e.getClass().getCanonicalName().substring(24))[0].toUpperCase();
",0,0,9,,"SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
998,return (groupAndContextNames[0] + DELIMITER + groupAndContextNames[1] + DELIMITER + e.name()).toUpperCase();,"return (groupAndContextNames[0] + DELIMITER + groupAndContextNames[1]+ DELIMITER+ e.name()).toUpperCase();
",0,0,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
999,return exception.getMessage() == null ? new Object[0] : new Object[]{exception.getMessage().toLowerCase()};,"return exception.getMessage() == null ? new Object[0] : new Object[]{exception.getMessage().toLowerCase()};
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1000,return handler.handleResult(context[0].toString().toUpperCase());,"return handler.handleResult(context[0].toString().toUpperCase());
",0,0,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1001,"m.appendReplacement(sb, "":first-"" + m.group(1).toLowerCase() + "" "" + m.group(2));","m.appendReplacement(sb,"":first-"" + m.group(1).toLowerCase() + "" ""+ m.group(2));
",0,0,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1002,"m.appendReplacement(sb, m.group(2).toLowerCase() + m.group(3) + s);","m.appendReplacement(sb,m.group(2).toLowerCase() + m.group(3) + s);
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1003,"sb.append(""#"" + (m.group(3) + m.group(5) + m.group(7)).toLowerCase());","sb.append(""#"" + (m.group(3) + m.group(5) + m.group(7)).toLowerCase());
",0,0,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1004,"return StringFactory.stepString(this, this.returnClass.getSimpleName().toLowerCase(), Arrays.toString(this.ids));","return StringFactory.stepString(this,this.returnClass.getSimpleName().toLowerCase(),Arrays.toString(this.ids));
",0,3,11,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1005,"return StringFactory.stepString(this, this.direction, Arrays.asList(this.edgeLabels), this.returnClass.getSimpleName().toLowerCase());","return StringFactory.stepString(this,this.direction,Arrays.asList(this.edgeLabels),this.returnClass.getSimpleName().toLowerCase());
",0,1,13,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1006,"return traversalSource.getClass().getSimpleName().toLowerCase() + L_BRACKET + graphString + COMMA_SPACE + (optional.isPresent() ? optional.get().toString() : ""standard"") + R_BRACKET;","return traversalSource.getClass().getSimpleName().toLowerCase() + L_BRACKET + graphString+ COMMA_SPACE+ (optional.isPresent() ? optional.get().toString() : ""standard"")+ R_BRACKET;
",0,0,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1007,"if (pattern != null && !(Pattern.matches(pattern.toLowerCase(),","if (pattern != null && !(Pattern.matches(pattern.toLowerCase(),((String)newValue).toLowerCase()))) {
  if (setErrorCode)   setErrorCode(ERR_INVALID_ALPHANUM);
  return Boolean.FALSE;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1008,if (!checksum(((String) newValue).toUpperCase())) {,"if (!checksum(((String)newValue).toUpperCase())) {
  if (setErrorCode)   setErrorCode(ERR_INVALID_ISBN_CODE);
  return Boolean.FALSE;
}
",0,0,4,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1009,if (!isAttribute || (inputStr.toLowerCase().indexOf('x') == -1)) {,"if (!isAttribute || (inputStr.toLowerCase().indexOf('x') == -1)) {
  java.util.Date canonVal=formatter.parse(inputStr,new ParsePosition(0));
  if (canonVal == null) {
    if (isAttribute) {
      throw new IllegalArgumentException(""Cannot canonicalize "" + ""value "" + inputStr + "" for time tag with ID ""+ getId());
    }
 else {
      setErrorCode(ERR_INVALID_TIME);
    }
  }
  return canonVal;
}
 else if (isAttribute && inputStr.toLowerCase().indexOf('x') != -1) {
  String hh=inputStr.substring(0,2);
  String mm=inputStr.substring(2,4);
  Calendar thisDay=new GregorianCalendar();
  try {
    if (!hh.equals(""xx"")) {
      thisDay.add(GregorianCalendar.HOUR,Integer.parseInt(hh));
    }
    if (!mm.equals(""xx"")) {
      thisDay.add(GregorianCalendar.MINUTE,Integer.parseInt(mm));
    }
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""Cannot canonicalize "" + ""value "" + inputStr + "" for time tag with ID ""+ getId());
  }
  return formatter.parse(formatter.format(thisDay.getTime()),new ParsePosition(0));
}
 else {
  return input;
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1010,} else if (isAttribute && inputStr.toLowerCase().indexOf('x') != -1) {,"if (isAttribute && inputStr.toLowerCase().indexOf('x') != -1) {
  String hh=inputStr.substring(0,2);
  String mm=inputStr.substring(2,4);
  Calendar thisDay=new GregorianCalendar();
  try {
    if (!hh.equals(""xx"")) {
      thisDay.add(GregorianCalendar.HOUR,Integer.parseInt(hh));
    }
    if (!mm.equals(""xx"")) {
      thisDay.add(GregorianCalendar.MINUTE,Integer.parseInt(mm));
    }
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""Cannot canonicalize "" + ""value "" + inputStr + "" for time tag with ID ""+ getId());
  }
  return formatter.parse(formatter.format(thisDay.getTime()),new ParsePosition(0));
}
 else {
  return input;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1011,"(args[0].toLowerCase().endsWith("".tomcat"") ||","if (args != null && args.length > 0 && (args[0].toLowerCase().endsWith("".tomcat"") || args[0].toLowerCase().endsWith("".loader"") || args[0].toLowerCase().endsWith(""loader.properties""))) {
  String props=args[0];
  String args2[]=new String[args.length - 1];
  System.arraycopy(args,1,args2,0,args2.length);
  args=args2;
  setPropertiesFile(props);
}
 else {
  loadProperties();
}
",0,0,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
"
1012,"if (docBase.toLowerCase().endsWith("".war"") && !file.isDirectory() && unpackWARs) {","if (docBase.toLowerCase().endsWith("".war"") && !file.isDirectory() && unpackWARs) {
  URL war=new URL(""jar:"" + (new File(docBase)).toURI().toURL() + ""!/"");
  docBase=ExpandWar.expand(host,war,pathName);
  file=new File(docBase);
  docBase=file.getCanonicalPath();
  if (context instanceof StandardContext) {
    ((StandardContext)context).setOriginalDocBase(origDocBase);
  }
}
 else if (docBase.toLowerCase().endsWith("".war"") && !file.isDirectory() && !unpackWARs) {
  URL war=new URL(""jar:"" + (new File(docBase)).toURI().toURL() + ""!/"");
  ExpandWar.validate(host,war,pathName);
}
 else {
  File docDir=new File(docBase);
  if (!docDir.exists()) {
    File warFile=new File(docBase + "".war"");
    if (warFile.exists()) {
      URL war=new URL(""jar:"" + warFile.toURI().toURL() + ""!/"");
      if (unpackWARs) {
        docBase=ExpandWar.expand(host,war,pathName);
        file=new File(docBase);
        docBase=file.getCanonicalPath();
      }
 else {
        docBase=warFile.getCanonicalPath();
        ExpandWar.validate(host,war,pathName);
      }
    }
    if (context instanceof StandardContext) {
      ((StandardContext)context).setOriginalDocBase(origDocBase);
    }
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, IfStatement-expression, ),
"
1013,"if (files[i].toLowerCase().endsWith("".war"") && dir.isFile() &&","if (files[i].toLowerCase().endsWith("".war"") && dir.isFile() && !invalidWars.contains(files[i])) {
  String contextPath=""/"" + files[i].replace('#','/');
  int period=contextPath.lastIndexOf(""."");
  contextPath=contextPath.substring(0,period);
  if (!validateContextPath(appBase,contextPath)) {
    log.error(sm.getString(""hostConfig.illegalWarName"",files[i]));
    invalidWars.add(files[i]);
    continue;
  }
  if (contextPath.equals(""/ROOT""))   contextPath="""";
  if (isServiced(contextPath))   continue;
  String file=files[i];
  deployWAR(contextPath,dir,file);
}
",0,0,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1014,"basename = war.substring(0, war.toLowerCase().indexOf("".war""));","basename=war.substring(0,war.toLowerCase().indexOf("".war""));
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1015,if (operation == null || (!OPERATIONS.contains(operation.toUpperCase()))) {,"if (operation == null || (!OPERATIONS.contains(operation.toUpperCase()))) {
  displayUsage(resp);
  return;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1016,"""| "" + d.url + ""[icon:download[] "" + d.format.toUpperCase() + ""] "" + d.sha1 + ""[icon:download[] SHA1] "" + d.md5 + ""[icon:download[] MD5] "" + d.asc + ""[icon:download[] PGP]"");","System.out.println("""" + ""|"" + d.name.replace(""Apache "","""") + (d.classifier.isEmpty() ? """" : ("" "" + d.classifier))+ ""|""+ d.version+ ""|""+ new SimpleDateFormat(""d MMM yyyy"").format(Date.from(LocalDateTime.parse(d.date,RFC_1123_DATE_TIME).toInstant(ZoneOffset.UTC)))+ ""|""+ d.size+ "" MB ""+ ""|""+ d.format.toUpperCase()+ ""| ""+ d.url+ ""[icon:download[] ""+ d.format.toUpperCase()+ ""] ""+ d.sha1+ ""[icon:download[] SHA1] ""+ d.md5+ ""[icon:download[] MD5] ""+ d.asc+ ""[icon:download[] PGP]"");
",0,0,12,,"StringLiteral(),
QualifiedName(),
StringLiteral(),
QualifiedName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(),
QualifiedName(),
StringLiteral(),
QualifiedName(),
StringLiteral(),
QualifiedName(),
StringLiteral(),
"
1017,".createQuery(""from "" + Group.class.getName() + "" g where g.name=:name"").setString(""name"", name.toLowerCase()).list();","List<Group> groups=getPersistenceHelper().retrieveSession().createQuery(""from "" + Group.class.getName() + "" g where g.name=:name"").setString(""name"",name.toLowerCase()).list();
",0,0,10,,"SimpleName(),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(),
StringLiteral(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(),
"
1018,"PackageProcessor archiveProcessor = entry.getName().toLowerCase().endsWith("".war"") ? new WarContributionProcessor() : new JarContributionProcessor();","PackageProcessor archiveProcessor=entry.getName().toLowerCase().endsWith("".war"") ? new WarContributionProcessor() : new JarContributionProcessor();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1019,"if (System.getProperty(""java.vendor"").toUpperCase().contains(""SUN"") && System.getProperty(""java.version"").contains(""1.5.0"")","if (System.getProperty(""java.vendor"").toUpperCase().contains(""SUN"") && System.getProperty(""java.version"").contains(""1.5.0"") || System.getProperty(""java.vendor"").toUpperCase().contains(""APPLE INC."") && System.getProperty(""java.version"").contains(""1.5.0"")) {
  SAMPLE_VALUES.put(""gMonth"",""--02--"");
}
 else {
  SAMPLE_VALUES.put(""gMonth"",""--02"");
}
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1020,"System.getProperty(""java.vendor"").toUpperCase().contains(""APPLE INC."") && System.getProperty(""java.version"").contains(""1.5.0"")) {","if (System.getProperty(""java.vendor"").toUpperCase().contains(""SUN"") && System.getProperty(""java.version"").contains(""1.5.0"") || System.getProperty(""java.vendor"").toUpperCase().contains(""APPLE INC."") && System.getProperty(""java.version"").contains(""1.5.0"")) {
  SAMPLE_VALUES.put(""gMonth"",""--02--"");
}
 else {
  SAMPLE_VALUES.put(""gMonth"",""--02"");
}
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ),
"
1021,"result = editDistanceClever(root, query.toLowerCase(), """", distance, 0, true, fragment, edcm,","result=editDistanceClever(root,query.toLowerCase(),"""",distance,0,true,fragment,edcm,false,false);
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1022,boolean typeConstraint = StringUtils.isEmpty(manualTypeFilter) || annotationFS.getType(),"boolean typeConstraint=StringUtils.isEmpty(manualTypeFilter) || annotationFS.getType().getName().toLowerCase().indexOf(manualTypeFilter.toLowerCase()) != -1;
",0,1,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1023,"if (name.toLowerCase().equals(""__init__"" + RutaEngine.SCRIPT_FILE_EXTENSION)) {","if (name.toLowerCase().equals(""__init__"" + RutaEngine.SCRIPT_FILE_EXTENSION)) {
  return true;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
1024,"final String eventName = typeName.substring(0, index).toLowerCase() + ""_"" + new String(chars);","final String eventName=typeName.substring(0,index).toLowerCase() + ""_"" + new String(chars);
",0,0,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1025,"return indexPrefix + ""-"" + itemType.toLowerCase() + ""-"" + INDEX_DATE_PREFIX + ""*"";","return indexPrefix + ""-"" + itemType.toLowerCase()+ ""-""+ INDEX_DATE_PREFIX+ ""*"";
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1026,"ConsoleUtils.printMessage(session, ""Index "" + getIndexName(destIndexPrefix, itemType.toLowerCase()) + "" already exists, skipping re-indexation..."");","ConsoleUtils.printMessage(session,""Index "" + getIndexName(destIndexPrefix,itemType.toLowerCase()) + "" already exists, skipping re-indexation..."");
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1027,"return ((collectionName.startsWith(EDGE_COLL_PREFIX) ? collectionName  : EDGE_COLL_PREFIX + ""|"" + collectionName) ).toLowerCase();","return ((collectionName.startsWith(EDGE_COLL_PREFIX) ? collectionName : EDGE_COLL_PREFIX + ""|"" + collectionName)).toLowerCase();
",0,0,8,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1028,"this.roleName = StringUtils.stringOrSubstringAfterLast( roleName.toLowerCase(), ':' );","this.roleName=StringUtils.stringOrSubstringAfterLast(roleName.toLowerCase(),':');
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1029,"return """" + Character.toUpperCase( result.charAt( 0 ) ) + result.substring( 1 ).toLowerCase();","return """" + Character.toUpperCase(result.charAt(0)) + result.substring(1).toLowerCase();
",0,0,10,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1030,String stringValue = ((value instanceof String) ? (String)value : value.toString()).toLowerCase().trim();,"String stringValue=((value instanceof String) ? (String)value : value.toString()).toLowerCase().trim();
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1031,if (ignoreList != null && ignoreList.contains(k.toLowerCase())) continue;,"if (ignoreList != null && ignoreList.contains(k.toLowerCase())) continue;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
1032,"ApiResponse rolesResponse = pathResource( orgName.toLowerCase() + ""/"" + appName + ""/roles"" )","ApiResponse rolesResponse=pathResource(orgName.toLowerCase() + ""/"" + appName+ ""/roles"").get(ApiResponse.class,adminTokenParams,false);
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1033,"assertEquals( clientSetup.getOrganizationName().toLowerCase() + ""/mgmt-org-app"", app.get( ""name"" ).toString() );","assertEquals(clientSetup.getOrganizationName().toLowerCase() + ""/mgmt-org-app"",app.get(""name"").toString());
",0,0,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1034,boolean isCapital = !singular.substring(singular.length() - 1),"boolean isCapital=!singular.substring(singular.length() - 1).toLowerCase().equals(singular.substring(singular.length() - 1));
",0,0,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1035,return key == null ? null : lowercaseUserAgentString.indexOf(key.toLowerCase()) != -1;,"return key == null ? null : lowercaseUserAgentString.indexOf(key.toLowerCase()) != -1;
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1036,identity = entityMap.get((entity + separator + major).toLowerCase());,"identity=entityMap.get((entity + separator + major).toLowerCase());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1037,"parmsMap.put(temp[0].toLowerCase(), java.net.URLDecoder.decode(temp[1], ""UTF-8""));","parmsMap.put(temp[0].toLowerCase(),java.net.URLDecoder.decode(temp[1],""UTF-8""));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1038,"String outputFileName = fileName.substring(0, fileName.toLowerCase().indexOf(WMF_EXTENSION)) + SVG_EXTENSION;","String outputFileName=fileName.substring(0,fileName.toLowerCase().indexOf(WMF_EXTENSION)) + SVG_EXTENSION;
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1039,final StringBuilder sb = new StringBuilder(getPeerState().toString().toLowerCase());,"final StringBuilder sb=new StringBuilder(getPeerState().toString().toLowerCase());
",0,0,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1040,"return components[0] + ""/"" + hostname.toLowerCase() + ""@"" + components[2];","return components[0] + ""/"" + hostname.toLowerCase()+ ""@""+ components[2];
",0,2,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1041,"ControlCommand.createCommandUri(ControlCommand.Action.PING, null).toLowerCase());","Assert.assertEquals(""command/ping"",ControlCommand.createCommandUri(ControlCommand.Action.PING,null).toLowerCase());
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1042,"return ""set"" + name.substring(0, 1).toUpperCase() + name.substring(1, name.length());","return ""set"" + name.substring(0,1).toUpperCase() + name.substring(1,name.length());
",1,1111,11,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1043,"HashSet<String> fields = new HashSet<String>(Arrays.asList(fieldStr.toUpperCase().split("","")));","HashSet<String> fields=new HashSet<String>(Arrays.asList(fieldStr.toUpperCase().split("","")));
",1,1496,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1044,if (values.get(i).getClass().getName().toLowerCase().indexOf(classes[c].getName().toLowerCase()) != -1) {,"if (values.get(i).getClass().getName().toLowerCase().indexOf(classes[c].getName().toLowerCase()) != -1) {
  found=true;
  args[c]=values.get(i);
}
",1,783,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1045,"Assert.assertTrue(filter.getOrderBy().split("","")[1].trim().toLowerCase().equals(""test.fld_long asc""));","Assert.assertTrue(filter.getOrderBy().split("","")[1].trim().toLowerCase().equals(""test.fld_long asc""));
",1,1320,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1046,"property = (token.substring(0, token.indexOf(""="")))","property=(token.substring(0,token.indexOf(""=""))).trim().toLowerCase();
",1,203,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1047,"tokens[0].substring(0, 1).toUpperCase() + tokens[0].substring(1).toLowerCase() + tokens[1];","String methodName=tokens[0].substring(0,1).toUpperCase() + tokens[0].substring(1).toLowerCase() + tokens[1];
",1,6,13,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-array, InfixExpression-extendedOperands, ),
NumberLiteral(ArrayAccess-index, InfixExpression-extendedOperands, ),
"
1048,return (headers != null) ? (String) headers.get(name.toLowerCase()) : null;,"return (headers != null) ? (String)headers.get(name.toLowerCase()) : null;
",1,14,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1049,"return container.getParent().getName().toLowerCase() + ""_"" + container.getName().toLowerCase() + ""_"" + identityName;","return container.getParent().getName().toLowerCase() + ""_"" + container.getName().toLowerCase()+ ""_""+ identityName;
",1,126,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1050,"Lifecycle state = Lifecycle.valueOf(m.group(1).toUpperCase().replace('-', '_'));","Lifecycle state=Lifecycle.valueOf(m.group(1).toUpperCase().replace('-','_'));
",1,213,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1051,"return s.isEmpty() ? s : s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();","return s.isEmpty() ? s : s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase();
",1,107,12,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1052,"if(entry.getName().indexOf(""/"") == -1 && (entry.getName().toLowerCase().endsWith("".war"") || entry.getName().toLowerCase().endsWith("".jar""))) {","if (entry.getName().indexOf(""/"") == -1 && (entry.getName().toLowerCase().endsWith("".war"") || entry.getName().toLowerCase().endsWith("".jar""))) {
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  int b;
  while ((b=jar.read()) != -1) {
    bout.write(b);
  }
  bout.close();
  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());
  PackageProcessor archiveProcessor=entry.getName().toLowerCase().endsWith("".war"") ? new WarContributionProcessor() : new JarContributionProcessor();
  List<URI> artifacts=archiveProcessor.getArtifacts(packageSourceURL,bin);
  bin.close();
  for (  URI artifact : artifacts) {
    if ((artifact.toString().endsWith(""ejb-jar.composite"") == false) && (artifact.toString().endsWith(""web.composite"") == false)) {
      names.add(entry.getName() + ""!/"" + artifact);
    }
  }
}
",1,67,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1053,"language = matcher.group(1).replace('_', '-').toLowerCase();","language=matcher.group(1).replace('_','-').toLowerCase();
",1,8,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1054,"m = getMethod(getMBeanInterface(), ""is"" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));","m=getMethod(getMBeanInterface(),""is"" + info.getName().substring(0,1).toUpperCase() + info.getName().substring(1));
",1,71,14,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1055,"accessor = new Method().setPublic().setName(""get"" + name.substring(0, 1).toUpperCase() + name.substring(1))","accessor=new Method().setPublic().setName(""get"" + name.substring(0,1).toUpperCase() + name.substring(1)).setReturnType(type).setBody(""return "" + name + "";\n"");
",1,48,13,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1056,"String regex = searchString.toLowerCase().replace(""..?"", "".?"").replace(""..*"", "".*"").replaceAll(""\\?"", "".?"")","String regex=searchString.toLowerCase().replace(""..?"","".?"").replace(""..*"","".*"").replaceAll(""\\?"","".?"").replaceAll(""\\*"","".*?"");
",1,45,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1057,"boolean IS_WINDOWS = System.getProperty(""os.name"").toLowerCase().trim().startsWith(""win"");","boolean IS_WINDOWS=System.getProperty(""os.name"").toLowerCase().trim().startsWith(""win"");
",1,63,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1058,"} else if ((truststorePath == null || truststorePath.isEmpty() || truststorePath.equalsIgnoreCase(NONE)) && (truststoreProvider == null || !truststoreProvider.toUpperCase().contains(""PKCS11""))) {","if ((truststorePath == null || truststorePath.isEmpty() || truststorePath.equalsIgnoreCase(NONE)) && (truststoreProvider == null || !truststoreProvider.toUpperCase().contains(""PKCS11""))) {
  return null;
}
 else {
  TrustManagerFactory trustMgrFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  KeyStore trustStore=SSLSupport.loadKeystore(truststoreProvider,truststoreType,truststorePath,truststorePassword);
  boolean ocsp=Boolean.valueOf(Security.getProperty(""ocsp.enable""));
  boolean initialized=false;
  if ((ocsp || crlPath != null) && TrustManagerFactory.getDefaultAlgorithm().equalsIgnoreCase(""PKIX"")) {
    PKIXBuilderParameters pkixParams=new PKIXBuilderParameters(trustStore,new X509CertSelector());
    if (crlPath != null) {
      pkixParams.setRevocationEnabled(true);
      Collection<? extends CRL> crlList=loadCRL();
      if (crlList != null) {
        pkixParams.addCertStore(CertStore.getInstance(""Collection"",new CollectionCertStoreParameters(crlList)));
      }
    }
    trustMgrFactory.init(new CertPathTrustManagerParameters(pkixParams));
    initialized=true;
  }
  if (!initialized) {
    trustMgrFactory.init(trustStore);
  }
  return trustMgrFactory;
}
",1,24,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1059,"testResourceMulticastQueueName = baseName + ResourceNames.QUEUE.replace('.', delimiterChar) + RoutingType.MULTICAST.toString().toLowerCase() + delimiter + ResourceNames.RETROACTIVE_SUFFIX;","testResourceMulticastQueueName=baseName + ResourceNames.QUEUE.replace('.',delimiterChar) + RoutingType.MULTICAST.toString().toLowerCase()+ delimiter+ ResourceNames.RETROACTIVE_SUFFIX;
",1,1,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1060,"throw new CloudRuntimeException(""Unable to create a volume from a "" + dataObject.getType().toString().toLowerCase() + "" (copyCmdAnswer == null)"");","throw new CloudRuntimeException(""Unable to create a volume from a "" + dataObject.getType().toString().toLowerCase() + "" (copyCmdAnswer == null)"");
",1,27,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
1061,addressSettings.setDefaultQueueRoutingType(defaultQueueRoutingType == null || defaultQueueRoutingType.isEmpty() ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : RoutingType.valueOf(defaultQueueRoutingType.toUpperCase()));,"addressSettings.setDefaultQueueRoutingType(defaultQueueRoutingType == null || defaultQueueRoutingType.isEmpty() ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : RoutingType.valueOf(defaultQueueRoutingType.toUpperCase()));
",1,3,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1062,String key = new String(new char[]{tmodelkey.charAt(0)}).toUpperCase() + tmodelkey.substring(1).toLowerCase();,"String key=new String(new char[]{tmodelkey.charAt(0)}).toUpperCase() + tmodelkey.substring(1).toLowerCase();
",1,111,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1063,suffix = storeType == null || storeType.length() == 0 ? storeProvider.toLowerCase() : storeType.toLowerCase();,"suffix=storeType == null || storeType.length() == 0 ? storeProvider.toLowerCase() : storeType.toLowerCase();
",1,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1064,String suffix = storeType == null || storeType.length() == 0 ? storeProvider.toLowerCase() : storeType.toLowerCase();,"String suffix=storeType == null || storeType.length() == 0 ? storeProvider.toLowerCase() : storeType.toLowerCase();
",1,6,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1065,"String key = head.getHead().getCoveredText().toLowerCase() + ""::"" + head.getDeprel();","String key=head.getHead().getCoveredText().toLowerCase() + ""::"" + head.getDeprel();
",1,50,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1066,for (char c : cond.getExpression().toLowerCase().toCharArray()) {,"for (char c : cond.getExpression().toLowerCase().toCharArray()) {
  if (c == '%') {
    output.append("".*"");
  }
 else   if (Character.isLetter(c)) {
    output.append('[').append(c).append(Character.toUpperCase(c)).append(']');
  }
 else {
    output.append(c);
  }
}
",1,2,6,,"PrimitiveType(SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
"
1067,if(!CssTokenIdCategory.WHITESPACES.name().toLowerCase().equals(t.id().primaryCategory())) {,"if (!CssTokenIdCategory.WHITESPACES.name().toLowerCase().equals(t.id().primaryCategory())) {
  return NodeUtil.findNonTokenNodeAtOffset(getParseTreeRoot(),ts.offset() + t.length());
}
 else {
  if (!ts.movePrevious()) {
    break;
  }
}
",1,101,7,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1068,"str = str.replaceAll(v.getString(""mapKey"").toUpperCase(), v.getString(""mapValue"").toUpperCase());","str=str.replaceAll(v.getString(""mapKey"").toUpperCase(),v.getString(""mapValue"").toUpperCase());
",1,2,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1069,boolean isInteresting = !UNINTERESTING_METHODS.contains(httpRequest.getMethod().toUpperCase());,"boolean isInteresting=!UNINTERESTING_METHODS.contains(httpRequest.getMethod().toUpperCase());
",1,30,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1070,if (!fileStatus.isDirectory() && path.toString().toLowerCase().endsWith(extension.toLowerCase())) {,"if (!fileStatus.isDirectory() && path.toString().toLowerCase().endsWith(extension.toLowerCase())) {
  HadoopUtils.deleteIfExists(fs,new Path(destination),true);
  HadoopUtils.copyPath(fs,path,fs,new Path(destination),getConfiguration());
}
",1,2,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1071,return na.parent().name().name.toLowerCase();,"return na.parent().name().name.toLowerCase();
",1,2,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1072,hash = 97 * hash + (this.name != null ? this.name.toUpperCase().hashCode() : 0);,"hash=97 * hash + (this.name != null ? this.name.toUpperCase().hashCode() : 0);
",1,5,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1073,"consoleReader.printString(DeployUtils.reformat(""  `-> ""+child.getModuleID()+(child.getWebURL() == null || getAction().toLowerCase().indexOf(""started"") == -1 ? """" : "" @ ""+child.getWebURL()),4, 72));","consoleReader.printString(DeployUtils.reformat(""  `-> "" + child.getModuleID() + (child.getWebURL() == null || getAction().toLowerCase().indexOf(""started"") == -1 ? """" : "" @ "" + child.getWebURL()),4,72));
",1,73,21,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1074,"if (!isOperationExcludedFromAudit(whatRequest, whatUrlPath.toLowerCase(), null)) {","if (!isOperationExcludedFromAudit(whatRequest,whatUrlPath.toLowerCase(),null)) {
  audit(new AuditLog(who,fromAddress,whatRequest,whatURL,when,httpStatus,timeTaken));
}
 else {
  if (LOG.isDebugEnabled()) {
    LOG.debug("" Skipping Audit for {} "",whatURL);
  }
}
",1,2,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1075,"result.add(new KeyValPair<>(input.getValue().substring(0, i).toLowerCase(), input));","result.add(new KeyValPair<>(input.getValue().substring(0,i).toLowerCase(),input));
",1,5,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1076,"onWindows ? elem.toLowerCase().replace('\\', '/') : elem;","String cmpElem=onWindows ? elem.toLowerCase().replace('\\','/') : elem;
",1,1,7,,"SimpleName(ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
CharacterLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ),
CharacterLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ),
SimpleName(ConditionalExpression-elseExpression, ),
"
1077,root = new File(File.separator).getAbsolutePath().toUpperCase();,"root=new File(File.separator).getAbsolutePath().toUpperCase();
",1,1,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1078,"assertEquals(new File(""test/repositories"").getAbsolutePath().toUpperCase(), settings","assertEquals(new File(""test/repositories"").getAbsolutePath().toUpperCase(),settings.getVariables().getVariable(""ivy.settings.dir"").toUpperCase());
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1079,if (packageString==null || exportedPackage.getName().toLowerCase().indexOf(packageString.trim().toLowerCase())!= -1) {,"if (packageString == null || exportedPackage.getName().toLowerCase().indexOf(packageString.trim().toLowerCase()) != -1) {
  PackageInfo packageInfo=new PackageInfo(exportedPackage.getName(),exportedPackage.getVersion().toString());
  fillPackageBundlesMap(packageExportBundles,packageInfo,exportBundleInfo);
  Bundle[] importingBundles=exportedPackage.getImportingBundles();
  if (importingBundles != null) {
    for (    Bundle importingBundle : importingBundles) {
      BundleInfo importBundleInfo=new SimpleBundleInfo(importingBundle);
      fillPackageBundlesMap(packageImportBundles,packageInfo,importBundleInfo);
    }
  }
}
",1,15,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1080,String lowerCase = checkKey(keyObj == null ? null : keyObj.toString()).toLowerCase();,"String lowerCase=checkKey(keyObj == null ? null : keyObj.toString()).toLowerCase();
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1081,private FileAttribute() {symbol = toString().toLowerCase().charAt(0);},"symbol=toString().toLowerCase().charAt(0);
",1,2,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, MethodDeclaration-body, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, MethodDeclaration-body, ),
"
1082,if(dirName.getScheme().compareTo(JournalType.FILE.name().toLowerCase()),"if (dirName.getScheme().compareTo(JournalType.FILE.name().toLowerCase()) == 0) {
  this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),dirType));
}
",1,25,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
1083,return (name != null) && name.toLowerCase().contains(pattern.toLowerCase());,"return (name != null) && name.toLowerCase().contains(pattern.toLowerCase());
",1,3,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1084,return str != null && strToFind != null && str.toLowerCase().contains(strToFind.toLowerCase());,"return str != null && strToFind != null && str.toLowerCase().contains(strToFind.toLowerCase());
",1,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1085,"return id.toLowerCase().trim().endsWith("".consumer"") || id.toLowerCase().trim().endsWith("".provider"");","return id.toLowerCase().trim().endsWith("".consumer"") || id.toLowerCase().trim().endsWith("".provider"");
",1,2,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1086,"return collator.compare(((Table)obj1).getName().toUpperCase(), ((Table)obj2).getName().toUpperCase());","return collator.compare(((Table)obj1).getName().toUpperCase(),((Table)obj2).getName().toUpperCase());
",1,2,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1087,"s = s.substring(0, i) + s.substring(i + 1, i + 2).toUpperCase() + s.substring(i + 2);","s=s.substring(0,i) + s.substring(i + 1,i + 2).toUpperCase() + s.substring(i + 2);
",1,7,16,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1088,"ref.set(AtlasClient.NAME, Path.getPathWithoutSchemeAndAuthority(path).toString().toLowerCase());","ref.set(AtlasClient.NAME,Path.getPathWithoutSchemeAndAuthority(path).toString().toLowerCase());
",1,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1089,return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_ENTITY_NAME + colName + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;,"return (dbName + QNAME_SEP_ENTITY_NAME + tableName+ QNAME_SEP_ENTITY_NAME+ colName+ QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;
",1,1,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1090,assert tableName.toLowerCase().equals(aliasTableName);,"assert tableName.toLowerCase().equals(aliasTableName);
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, AssertStatement-expression, ),
SimpleName(MethodInvocation-arguments, AssertStatement-expression, ),
"
1091,"String feat = ""entpointer:"" + node.getDeprel() + "":"" + node.getCoveredText().replace(' ', '_').toLowerCase();","String feat=""entpointer:"" + node.getDeprel() + "":""+ node.getCoveredText().replace(' ','_').toLowerCase();
",1,5,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1092,"buf.append(String.format("", placement: { from: '%s', align: '%s' }"", messagePopups.getPlacement().getVertical().name().toLowerCase(), messagePopups.getPlacement().getHorizontal().name().toLowerCase()));","buf.append(String.format("", placement: { from: '%s', align: '%s' }"",messagePopups.getPlacement().getVertical().name().toLowerCase(),messagePopups.getPlacement().getHorizontal().name().toLowerCase()));
",1,4,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1093,final String state = shard.getValue().getStr(ZkStateReader.STATE_PROP).toUpperCase();,"final String state=shard.getValue().getStr(ZkStateReader.STATE_PROP).toUpperCase();
",1,6,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1094,"Table table = testTables.createTable(shell, type.typeId().toString().toLowerCase() + ""_table_"" + i,","Table table=testTables.createTable(shell,type.typeId().toString().toLowerCase() + ""_table_"" + i,schema,PartitionSpec.unpartitioned(),fileFormat,expected);
",1,11,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1095,} else if (appName.toLowerCase().contains(matchString) || (appAlias != null && appAlias.toLowerCase(),"if (appName.toLowerCase().contains(matchString) || (appAlias != null && appAlias.toLowerCase().contains(matchString))) {
  result.add(ac);
}
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1096,"|| !ai.name.toLowerCase().matches("".*"" + matchAppName.toLowerCase() + "".*"")) {","if ((commandLineInfo.exactMatch && !ai.name.equals(matchAppName)) || !ai.name.toLowerCase().matches("".*"" + matchAppName.toLowerCase() + "".*"")) {
  it.remove();
}
",1,1,7,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, PrefixExpression-operand, ),
"
1097,"rsColumns = meta.getColumns(null, null, getTablename().toUpperCase(), null);","rsColumns=meta.getColumns(null,null,getTablename().toUpperCase(),null);
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1098,if (CodeUtils.extractClassName(node).toLowerCase().endsWith(Zend2Utils.CONTROLLER_CLASS_SUFFIX.toLowerCase())) {,"if (CodeUtils.extractClassName(node).toLowerCase().endsWith(Zend2Utils.CONTROLLER_CLASS_SUFFIX.toLowerCase())) {
  super.visit(node);
}
",1,5,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1099,"this.bucketKey = new String(""target-"" + description.getMethodName()).toLowerCase();","this.bucketKey=new String(""target-"" + description.getMethodName()).toLowerCase();
",1,4,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1100,"String pseStr = pse.ne.getCoveredText().replace('-',' ').toLowerCase().trim();","String pseStr=pse.ne.getCoveredText().replace('-',' ').toLowerCase().trim();
",1,5,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1101,"if (toMatch.toLowerCase().indexOf(""centos"") != -1 || toMatch.toLowerCase().indexOf(""rhel"") != -1","if (toMatch.toLowerCase().indexOf(""centos"") != -1 || toMatch.toLowerCase().indexOf(""rhel"") != -1 || toMatch.toLowerCase().replace("" "","""").indexOf(""redhate"") != -1 || toMatch.toLowerCase().indexOf(""fedora"") != -1) return true;
",1,7,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1102,"return new String(sb2.toString().substring(begin, begin + 18)).toUpperCase();","return new String(sb2.toString().substring(begin,begin + 18)).toUpperCase();
",1,7,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1103,"query.setParameter(JpaUser.PARAM_SEARCHTERM, ""%"" + searchTerm.toLowerCase() + ""%"");","query.setParameter(JpaUser.PARAM_SEARCHTERM,""%"" + searchTerm.toLowerCase() + ""%"");
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1104,this.consistencyLevel = ConsistencyLevel.valueOf(options.consistencyLevel.value().toUpperCase());,"this.consistencyLevel=ConsistencyLevel.valueOf(options.consistencyLevel.value().toUpperCase());
",1,16,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1105,JpaPageTemplate pt = (JpaPageTemplate)pageTemplateRepository.getDefaultPage(PageType.PERSON_PROFILE.toString().toUpperCase());,"JpaPageTemplate pt=(JpaPageTemplate)pageTemplateRepository.getDefaultPage(PageType.PERSON_PROFILE.toString().toUpperCase());
",1,4,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1106,"if (method.getName().toLowerCase().equals(""get"" + field.toLowerCase())) {","if (method.getName().toLowerCase().equals(""get"" + field.toLowerCase())) {
  try {
    String val=(String)method.invoke(person);
    assertThat(""Value doesn't match"",val,equalTo(value));
    return;
  }
 catch (  Exception ex) {
    fail(""Exception thrown"");
  }
}
",1,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
1107,"assertEquals(getHeader(msg, 1, ""Content-Type"").toLowerCase(), ""text/xml; charset=UTF-8"".toLowerCase());","assertEquals(getHeader(msg,1,""Content-Type"").toLowerCase(),""text/xml; charset=UTF-8"".toLowerCase());
",1,1,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1108,"return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();","return s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase();
",1,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1109,"private static final byte typeHeader[] = (HTTPConstants.HEADER_CONTENT_TYPE.toLowerCase() + "": "").getBytes();","private static final byte typeHeader[]=(HTTPConstants.HEADER_CONTENT_TYPE.toLowerCase() + "": "").getBytes();
",1,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1110,"String topicName = getTopicPrefix(tableEvent.getHandler().getHiveConf()) + ""."" + table.getDbName().toLowerCase();","String topicName=getTopicPrefix(tableEvent.getHandler().getHiveConf()) + ""."" + table.getDbName().toLowerCase();
",1,5,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1111,if (spfR1.toLowerCase().equals(spfR2.toLowerCase()) == false) {,"if (spfR1.toLowerCase().equals(spfR2.toLowerCase()) == false) {
  throw new PermErrorException(""Published SPF records not equals"");
}
 else {
  return spfR1;
}
",1,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1112,"final String oldConstraintName = datatableName.toLowerCase().replaceAll(""\\s"", ""_"") + ""_"" + oldFKName;","final String oldConstraintName=datatableName.toLowerCase().replaceAll(""\\s"",""_"") + ""_"" + oldFKName;
",1,3,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1113,"if (!listOfNames.contains((cName + ""E"").toLowerCase())){","if (!listOfNames.contains((cName + ""E"").toLowerCase())) {
  cName=cName + ""E"";
}
 else {
  cName=cName + count++;
}
",1,1,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1114,String convertorClassNameProp = suffix.toUpperCase() + className.substring(i + 1);,"String convertorClassNameProp=suffix.toUpperCase() + className.substring(i + 1);
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1115,"name = name.substring(0, j - 1).toLowerCase() + name.substring(j - 1);","name=name.substring(0,j - 1).toLowerCase() + name.substring(j - 1);
",1,3,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1116,new GsonBuilder().setFieldNamingStrategy(f -> f.getName().toLowerCase()).create();,"private static final Gson GSON=new GsonBuilder().setFieldNamingStrategy(f -> f.getName().toLowerCase()).create();
",1,1,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1117,"if (osName==null) osName = """"; else osName = osName.toLowerCase();","if (osName == null) osName="""";
 else osName=osName.toLowerCase();
",1,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
"
1118,public String getRoleName() { return getRole().name().toLowerCase(); },"return getRole().name().toLowerCase();
",1,4,3,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
"
1119,"return new EqualsBuilder().append(_name.toUpperCase(), other._name.toUpperCase())","return new EqualsBuilder().append(_name.toUpperCase(),other._name.toUpperCase()).append(_size,other._size).isEquals();
",1,3,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
1120,"if (""https"".equals(contender.toLowerCase())) return true;","if (""https"".equals(contender.toLowerCase())) return true;
",1,1,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1121,"return (qb.getId() == null ? alias : qb.getId() + "":"" + alias).toLowerCase();","return (qb.getId() == null ? alias : qb.getId() + "":"" + alias).toLowerCase();
",1,6,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1122,if (FORMATS.contains(planFormat.toLowerCase())) return 0.9;,"if (FORMATS.contains(planFormat.toLowerCase())) return 0.9;
",1,1,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1123,"assertTrue(table2.getLocation().toLowerCase().matches("".*"" + (""/"" + db + "".db/"" + tableTwo).toLowerCase()));","assertTrue(table2.getLocation().toLowerCase().matches("".*"" + (""/"" + db + "".db/""+ tableTwo).toLowerCase()));
",1,3,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1124,"return getName()!=null && getName().toLowerCase().contains(""microsoft"");","return getName() != null && getName().toLowerCase().contains(""microsoft"");
",1,1,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1125,"return sanitize(groupId + separator + Identifiers.makeRandomId(Math.min(requestedSaltLength, availSaltLength))).toLowerCase();","return sanitize(groupId + separator + Identifiers.makeRandomId(Math.min(requestedSaltLength,availSaltLength))).toLowerCase();
",1,3,10,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1126,"return sanitize(generateNewIdReservingLength(setup, getLengthForMachineUniqueNameSalt(setup, true))).toLowerCase();","return sanitize(generateNewIdReservingLength(setup,getLengthForMachineUniqueNameSalt(setup,true))).toLowerCase();
",1,1,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1127,"contender.getBrooklynVersion().toLowerCase().indexOf(""snapshot"")>=0 ? -1 :","score.versionBias=contender.getBrooklynVersion() == null ? -2 : contender.getBrooklynVersion().toLowerCase().indexOf(""snapshot"") >= 0 ? -1 : 0;
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
NumberLiteral(PrefixExpression-operand, ConditionalExpression-thenExpression, ),
"
1128,"String expectedFilename = (entitySimpleType+""-""+entityVersion+"".""+fileSuffix).toLowerCase();","String expectedFilename=(entitySimpleType + ""-"" + entityVersion+ "".""+ fileSuffix).toLowerCase();
",1,10,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1129,"String result = value.substring(value.lastIndexOf(""."")+1,value.length()).toLowerCase();","String result=value.substring(value.lastIndexOf(""."") + 1,value.length()).toLowerCase();
",1,6,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1130,"runSetHostname(""br-""+Identifiers.makeRandomId(8).toLowerCase()+"".brooklyn.incubator.apache.org"", null, false);","runSetHostname(""br-"" + Identifiers.makeRandomId(8).toLowerCase() + "".brooklyn.incubator.apache.org"",null,false);
",1,8,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1131,"assertTrue(t.getStatusDetail(false).toLowerCase().contains(""cancel""));","assertTrue(t.getStatusDetail(false).toLowerCase().contains(""cancel""));
",1,3,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1132,"assertTrue(osName != null && osName.toLowerCase().contains(expectedNamePart), ""osDetails="" + osDetails);","assertTrue(osName != null && osName.toLowerCase().contains(expectedNamePart),""osDetails="" + osDetails);
",1,1,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1133,"MutableSet<String> explicitValuesSet = MutableSet.copyOf(Iterables.transform(Arrays.asList(explicitValues), StringFunctions.toLowerCase()));","MutableSet<String> explicitValuesSet=MutableSet.copyOf(Iterables.transform(Arrays.asList(explicitValues),StringFunctions.toLowerCase()));
",1,2,12,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1134,if (i>=2) return result.toString().toLowerCase();,"if (i >= 2) return result.toString().toLowerCase();
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
1135,"if (!adm.getCountyCode().toLowerCase().equals(""no_data_found"") && !adm.getCountyName().toLowerCase().equals(""no_data_found"")) {","if (!adm.getCountyCode().toLowerCase().equals(""no_data_found"") && !adm.getCountyName().toLowerCase().equals(""no_data_found"")) {
  Map<String,String> counties=countyMap.get(adm.getCountryCode() + ""."" + adm.getProvCode());
  if (counties == null) {
    counties=new HashMap<>();
  }
  String countyid=adm.getCountryCode() + ""."" + adm.getProvCode()+ "".""+ adm.getCountyCode();
  counties.put(countyid,adm.getCountyName());
  countyMap.put(adm.getCountryCode() + ""."" + adm.getProvCode(),counties);
}
",1,6,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1136,"this.includeExt = endpoint.getIncludeExt() != null ? endpoint.getIncludeExt().toLowerCase().split("","") : null;","this.includeExt=endpoint.getIncludeExt() != null ? endpoint.getIncludeExt().toLowerCase().split("","") : null;
",1,3,11,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1137,"return len > 1 ? simpleEntityName.substring(0,1).toLowerCase() + simpleEntityName.substring(1) : simpleEntityName.toLowerCase();","return len > 1 ? simpleEntityName.substring(0,1).toLowerCase() + simpleEntityName.substring(1) : simpleEntityName.toLowerCase();
",1,2,12,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1138,".map(v -> v.substring(0, 1).toUpperCase() + v.substring(1).toLowerCase())","String result=Stream.of(text.split(""[^a-zA-Z0-9]"")).map(v -> v.substring(0,1).toUpperCase() + v.substring(1).toLowerCase()).collect(Collectors.joining());
",1,2,11,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, ),
"
1139,"final String type = column.has(""type"") ? column.get(""type"").getAsString().toLowerCase() : null;","final String type=column.has(""type"") ? column.get(""type"").getAsString().toLowerCase() : null;
",1,11,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1140,".to(getUrl() + OPERATION.toLowerCase() + ""="" + Web3jConstants.WEB3_CLIENT_VERSION);","from(""direct:start"").to(getUrl() + OPERATION.toLowerCase() + ""=""+ Web3jConstants.WEB3_CLIENT_VERSION);
",1,1,6,,"SimpleName(),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
QualifiedName(InfixExpression-extendedOperands, ),
"
1141,"vmName = String.format(""%3.24s"", System.getProperty(""user.name"") + RAND + this.getClass().getSimpleName()).toLowerCase().substring(0, 15);","vmName=String.format(""%3.24s"",System.getProperty(""user.name"") + RAND + this.getClass().getSimpleName()).toLowerCase().substring(0,15);
",1,5,15,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1142,return Scope.valueOf(scope != null ? scope.toUpperCase() : null);,"return Scope.valueOf(scope != null ? scope.toUpperCase() : null);
",1,1,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1143,"super(""error.msg."" + accountType.getCode().toLowerCase() + "".id.invalid"",","super(""error.msg."" + accountType.getCode().toLowerCase() + "".id.invalid"",StringUtils.capitalize(accountType.toString().toLowerCase()) + "" account with identifier "" + id+ "" does not exist"",id);
",1,4,5,,"StringLiteral(InfixExpression-leftOperand, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, SuperConstructorInvocation-arguments, ),
StringLiteral(InfixExpression-extendedOperands, SuperConstructorInvocation-arguments, ),
"
1144,return exchange.getMessage().getBody(String.class).toUpperCase();,"return exchange.getMessage().getBody(String.class).toUpperCase();
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1145,"GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count(), new Duration());","GroupedOptions.printOptions(System.out,type.toLowerCase(),new Uncertainty(),new Count(),new Duration());
",1,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1146,"System.out.println(String.format(""%-20s : %s"", cmd.toString().toLowerCase(), cmd.description));","System.out.println(String.format(""%-20s : %s"",cmd.toString().toLowerCase(),cmd.description));
",1,2,9,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1147,"(dir, name) -> name != null && name.toLowerCase().endsWith("".map.xml"")","return additionalMaps.listFiles((dir,name) -> name != null && name.toLowerCase().endsWith("".map.xml""));
",1,1,8,,"SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, LambdaExpression-body, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, ),
"
1148,&& (nameSchemaMap.get(name.toLowerCase()) != null || nameSchemaMap.get(name.toUpperCase()) != null)) {,"if (nameSchemaMap.get(name) != null || !ent.getDataMap().isQuotingSQLIdentifiers() && (nameSchemaMap.get(name.toLowerCase()) != null || nameSchemaMap.get(name.toUpperCase()) != null)) {
  Collection<String> sc=nameSchemaMap.get(name);
  if (sc == null) {
    if (nameSchemaMap.get(name.toLowerCase()) != null) {
      sc=nameSchemaMap.get(name.toLowerCase());
    }
 else {
      sc=nameSchemaMap.get(name.toUpperCase());
    }
  }
  if (sc.size() == 1) {
    mapTableInDB.put(name,sc.iterator().next());
  }
 else {
    errorMessage="" enter the schema. Table found in the schemas: "";
    Iterator<String> it=sc.iterator();
    String names="""";
    while (it.hasNext()) {
      names+=it.next() + "", "";
    }
    errorMessage=errorMessage + names;
  }
}
 else {
  tableNoInDB.add(name);
}
",1,1,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1149,"String propTypeName = (""""+arrayValue.charAt(0)).toUpperCase()+arrayValue.substring(1).toLowerCase();","String propTypeName=("""" + arrayValue.charAt(0)).toUpperCase() + arrayValue.substring(1).toLowerCase();
",1,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1150,"return url != null && url.toLowerCase().startsWith(""jdbc:jtds:sybase:"")","return url != null && url.toLowerCase().startsWith(""jdbc:jtds:sybase:"") ? objectFactory.newInstance(DbAdapter.class,SybaseAdapter.class.getName()) : null;
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
"
1151,return pathSeparator < 0 ? idPath.toLowerCase() : idPath.substring(,"return pathSeparator < 0 ? idPath.toLowerCase() : idPath.substring(0,pathSeparator).toLowerCase() + idPath.substring(pathSeparator);
",1,1,6,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1152,if (!column.getHeaderValue().toString().toUpperCase().equals(ChainsawColumns.getColumnName(ChainsawColumns.INDEX_THROWABLE_COL_NAME))) {,"if (!column.getHeaderValue().toString().toUpperCase().equals(ChainsawColumns.getColumnName(ChainsawColumns.INDEX_THROWABLE_COL_NAME))) {
  return;
}
",1,5,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1153,if (thisEntry.toLowerCase(Locale.ENGLISH).contains(textToMatch.toLowerCase())) {,"if (thisEntry.toLowerCase(Locale.ENGLISH).contains(textToMatch.toLowerCase())) {
  model.addElement(thisEntry);
}
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1154,"setHighlightAttributesInternal(matches.get(LoggingEventFieldResolver.PROP_FIELD + ChainsawConstants.LOG4J_MARKER_COL_NAME_LOWERCASE.toUpperCase()), (StyledDocument) textPane.getDocument());","setHighlightAttributesInternal(matches.get(LoggingEventFieldResolver.PROP_FIELD + ChainsawConstants.LOG4J_MARKER_COL_NAME_LOWERCASE.toUpperCase()),(StyledDocument)textPane.getDocument());
",1,3,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1155,"String urlPropName = PhoenixRuntime.JDBC_PROTOCOL_TERMINATOR + propName.toUpperCase() + ""="";","String urlPropName=PhoenixRuntime.JDBC_PROTOCOL_TERMINATOR + propName.toUpperCase() + ""="";
",1,2,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1156,whereExists = (sqlStatement.toUpperCase().indexOf(WHERE_CLAUSE) > -1);,"whereExists=(sqlStatement.toUpperCase().indexOf(WHERE_CLAUSE) > -1);
",1,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1157,"strDigest += Integer.toString((digest[i] & 0xff) + 0x100, 16)","strDigest+=Integer.toString((digest[i] & 0xff) + 0x100,16).substring(1).toUpperCase();
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1158,"if (!Enums.getIfPresent(EncryptionLevel.class, encryptionLevel.toUpperCase()).isPresent()) {","if (!Enums.getIfPresent(EncryptionLevel.class,encryptionLevel.toUpperCase()).isPresent()) {
  throw new IOException(""Invalid encryption level "" + encryptionLevel);
}
",1,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
"
1159,"String.format(""01-%s"", nic.getMacAddress().replaceAll("":"", ""-"")).toLowerCase(), tuple.get(0), nic.getMacAddress().toLowerCase());","String cmd=String.format(""/opt/cloud/bin/prepare_pxe.sh %s %s %s %s %s %s"",tuple.get(1),tuple.get(2),profile.getTemplate().getUuid(),String.format(""01-%s"",nic.getMacAddress().replaceAll("":"",""-"")).toLowerCase(),tuple.get(0),nic.getMacAddress().toLowerCase());
",1,1,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NumberLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1160,"return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,","return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()),poolName,uuid,host,port,pool,authUsername,LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()),uuid);
",1,3,11,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
1161,constraintName = BaseSemanticAnalyzer.unescapeIdentifier(grandChild.getChild(0).getText().toLowerCase());,"constraintName=BaseSemanticAnalyzer.unescapeIdentifier(grandChild.getChild(0).getText().toLowerCase());
",1,3,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1162,final SimulatorHAProvider simulatorHAProvider = (SimulatorHAProvider) haManager.getHAProvider(SimulatorHAProvider.class.getSimpleName().toLowerCase());,"final SimulatorHAProvider simulatorHAProvider=(SimulatorHAProvider)haManager.getHAProvider(SimulatorHAProvider.class.getSimpleName().toLowerCase());
",1,15,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1163,"metricsList.add(new ItemVolume(zoneName, zoneUuid, Volume.State.Ready.name().toLowerCase(), ready));","metricsList.add(new ItemVolume(zoneName,zoneUuid,Volume.State.Ready.name().toLowerCase(),ready));
",1,4,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1164,"Assert.assertTrue(""Wrong business name was returned:"" + bi.getName().get(0).getValue()  + "" - got instead: "" + businessName, bi.getName().get(0).getValue().toLowerCase().equals(businessName.toLowerCase()));","Assert.assertTrue(""Wrong business name was returned:"" + bi.getName().get(0).getValue() + "" - got instead: ""+ businessName,bi.getName().get(0).getValue().toLowerCase().equals(businessName.toLowerCase()));
",1,5,19,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1165,"a_params.put(""element"", ""<protocol><"" + protocol.toLowerCase() + "">"" + dstPortXML + srcPortXML + ""</"" + protocol.toLowerCase() + ""></protocol>"");","a_params.put(""element"",""<protocol><"" + protocol.toLowerCase() + "">""+ dstPortXML+ srcPortXML+ ""</""+ protocol.toLowerCase()+ ""></protocol>"");
",1,1,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1166,"+ (System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1 ? """" : ""."")","public static final String DEFAULT_BEELINE_SITE_LOCATION=System.getProperty(""user.home"") + File.separator + (System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1 ? """" : ""."")+ ""beeline""+ File.separator;
",1,8,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
"
1167,if (ct != null && ct.toLowerCase().startsWith(HttpHeaderConstants.VALUE_URLENCODED_FORM.toLowerCase())) {,"if (ct != null && ct.toLowerCase().startsWith(HttpHeaderConstants.VALUE_URLENCODED_FORM.toLowerCase())) {
  content.mark();
  try {
    setParameters(content.getString(HttpCodecUtils.DEFAULT_CHARSET.newDecoder()));
  }
 catch (  CharacterCodingException e) {
    throw new IllegalArgumentException(""Failed to decode the url-encoded content."",e);
  }
 finally {
    content.reset();
  }
}
",1,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1168,"nameArray[i] = word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();","nameArray[i]=word.substring(0,1).toUpperCase() + word.substring(1).toLowerCase();
",1,5,11,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1169,"String cmd[] = command.name().toLowerCase().split(""_"");","String cmd[]=command.name().toLowerCase().split(""_"");
",1,2,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1170,"boolean isForwardedSecure = UtilValidate.isNotEmpty(forwardedProto) && ""HTTPS"".equals(forwardedProto.toUpperCase());","boolean isForwardedSecure=UtilValidate.isNotEmpty(forwardedProto) && ""HTTPS"".equals(forwardedProto.toUpperCase());
",1,2,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1171,String header = (headers != null) ? (String) headers.get(name.toLowerCase()) : null;,"String header=(headers != null) ? (String)headers.get(name.toLowerCase()) : null;
",1,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1172,"private static final ImageFilter JPEG_IMAGE_FILTER = file -> file.getName().toLowerCase().endsWith("".jpg"");","private static final ImageFilter JPEG_IMAGE_FILTER=file -> file.getName().toLowerCase().endsWith("".jpg"");
",1,1,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1173,"if ( args.length > 0 && args[0].toLowerCase().indexOf( ""-shutdown"" ) != -1 )","if (args.length > 0 && args[0].toLowerCase().indexOf(""-shutdown"") != -1) {
  try {
    final ICacheServiceAdmin admin=lookupCacheServiceAdmin(prop,port);
    admin.shutdown();
  }
 catch (  final Exception ex) {
    log.error(""Problem calling shutdown."",ex);
  }
  log.debug(""done."");
  System.exit(0);
}
",1,7,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1174,"String id =  RandomStringUtils.random(5, true, true).toLowerCase();","String id=RandomStringUtils.random(5,true,true).toLowerCase();
",1,6,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1175,if ( ( method.getName().equalsIgnoreCase( name ) || method.getName().toLowerCase().equals(,"if ((method.getName().equalsIgnoreCase(name) || method.getName().toLowerCase().equals(name.toLowerCase()) || method.getName().toLowerCase().equals(""set"" + name.toLowerCase())) && !method.getName().startsWith(""get"")) {
  if (numParms > 0 && method.getMethod().getParameterTypes().length == numParms) {
    return method.getMethod();
  }
  if (numParms < 0) {
    return method.getMethod();
  }
}
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1176,"return str.contains(""_"") || str.equals(str.toLowerCase()) || str.equals(str.toUpperCase());","return str.contains(""_"") || str.equals(str.toLowerCase()) || str.equals(str.toUpperCase());
",1,2,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1177,if (str1.toLowerCase().indexOf(str2.toLowerCase()) >= 0 ||,"if (str1.toLowerCase().indexOf(str2.toLowerCase()) >= 0 || str2.toLowerCase().indexOf(str1.toLowerCase()) >= 0) {
  return true;
}
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1178,final String term = columns[ termIndex ].trim().toLowerCase();,"final String term=columns[termIndex].trim().toLowerCase();
",1,2,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1179,"String textInArg1 = jcas.getDocumentText().substring(arg1.getBegin(), arg1.getEnd()).replaceAll(""[\r\n]"", "" "").toLowerCase();","String textInArg1=jcas.getDocumentText().substring(arg1.getBegin(),arg1.getEnd()).replaceAll(""[\r\n]"","" "").toLowerCase();
",1,1,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1180,"WebResource resource = this.service.path(""api/entities/submitAndSchedule/"" + entityType.name().toLowerCase());","WebResource resource=this.service.path(""api/entities/submitAndSchedule/"" + entityType.name().toLowerCase());
",1,4,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1181,"&& !contentType.toLowerCase().contains(""multipart/related"") && cos.size() > 0) {","if (!truncated && isPrettyLogging() && contentType != null && contentType.contains(""xml"") && !contentType.toLowerCase().contains(""multipart/related"") && cos.size() > 0) {
  StringWriter swriter=new StringWriter();
  XMLStreamWriter xwriter=StaxUtils.createXMLStreamWriter(swriter);
  xwriter=new PrettyPrintXMLStreamWriter(xwriter,2);
  try (InputStream in=cos.getInputStream()){
    InputStreamReader inputStreamReader=StringUtils.isEmpty(encoding) ? new InputStreamReader(in) : new InputStreamReader(in,encoding);
    StaxUtils.copy(new StreamSource(inputStreamReader),xwriter);
  }
 catch (  XMLStreamException xse) {
  }
 finally {
    try {
      xwriter.flush();
      xwriter.close();
    }
 catch (    XMLStreamException xse2) {
    }
  }
  String result=swriter.toString();
  if (result.length() < limit || limit == -1) {
    builder.append(result);
  }
 else {
    builder.append(result.substring(0,limit));
  }
}
 else {
  if (StringUtils.isEmpty(encoding)) {
    cos.writeCacheTo(builder,limit);
  }
 else {
    cos.writeCacheTo(builder,encoding,limit);
  }
}
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ),
"
1182,return javaDocsBuiltByVersion == JAVA_VERSION_16 ? tag : tag.toLowerCase();,"return javaDocsBuiltByVersion == JAVA_VERSION_16 ? tag : tag.toLowerCase();
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1183,"s = greeter.greetMe(id + "": b"").toLowerCase();","s=greeter.greetMe(id + "": b"").toLowerCase();
",1,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1184,Schema outputSchema = new Schema(new Schema.FieldSchema(getSchemaName(this.getClass(),"Schema outputSchema=new Schema(new Schema.FieldSchema(getSchemaName(this.getClass().getName().toLowerCase(),input),bagSchema,DataType.BAG));
",1,3,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1185,CascadeActionEnum enumValue = value == null ? null : CascadeActionEnum.getEnum(value.toLowerCase());,"CascadeActionEnum enumValue=value == null ? null : CascadeActionEnum.getEnum(value.toLowerCase());
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1186,fk1Name = (fk1Name != null ? fk1Name.toLowerCase() : null);,"fk1Name=(fk1Name != null ? fk1Name.toLowerCase() : null);
",1,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1187,table         = (Table)_preparedQueryHints.get(_caseSensitive ? columnName : columnName.toLowerCase());,"table=(Table)_preparedQueryHints.get(_caseSensitive ? columnName : columnName.toLowerCase());
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1188,"return Arrays.asList(builder.equal(builder.upper(path.<String>get(getAtt())), getValue().toUpperCase()));","return Arrays.asList(builder.equal(builder.upper(path.<String>get(getAtt())),getValue().toUpperCase()));
",1,1,12,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1189,"if ((srvJvm!=null) && ((srvJvm.toUpperCase().startsWith(""J9"")) || (srvJvm.equalsIgnoreCase(""wsdd5.6""))))","if ((srvJvm != null) && ((srvJvm.toUpperCase().startsWith(""J9"")) || (srvJvm.equalsIgnoreCase(""wsdd5.6"")))) {
  String wshome=guessWSHome();
  setJavaCmd(wshome + ""/wsdd5.6/ive/bin/j9"");
}
 else setJavaCmd(""j9"");
",1,1,9,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1190,if (!linkDetails.getOriginalURL().toLowerCase().equals(connection.getURL().toString().toLowerCase())),"if (!linkDetails.getOriginalURL().toLowerCase().equals(connection.getURL().toString().toLowerCase())) linkDetails.setFinalURL(connection.getURL().toString());
",1,3,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1191,"AdminRoleUtil.updateHier(this.contextId, new Relationship(role.getName().toUpperCase(), parent.toUpperCase()), Hier.Op.REM);","AdminRoleUtil.updateHier(this.contextId,new Relationship(role.getName().toUpperCase(),parent.toUpperCase()),Hier.Op.REM);
",1,1,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1192,"mods.add( new DefaultModification( ModificationOperation.REPLACE_ATTRIBUTE, SYSTEM_USER, entity","mods.add(new DefaultModification(ModificationOperation.REPLACE_ATTRIBUTE,SYSTEM_USER,entity.isSystem().toString().toUpperCase()));
",1,2,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1193,if ((s != null) && (s.toUpperCase().indexOf(prefix.toUpperCase()))!= -1   ) {,"if ((s != null) && (s.toUpperCase().indexOf(prefix.toUpperCase())) != -1) {
  results.add(new Integer(startIndex));
  if (maxPrefix == null) {
    maxPrefix=s;
  }
  maxPrefix=findMaxPrefix(maxPrefix,s);
}
",1,2,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1194,"List<GenericValue> cityLookup = EntityUtil.filterByAnd(zipLookup, UtilMisc.toMap(""city"", city.toUpperCase()));","List<GenericValue> cityLookup=EntityUtil.filterByAnd(zipLookup,UtilMisc.toMap(""city"",city.toUpperCase()));
",1,2,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1195,"private static final String AUTH = DB.toLowerCase() + ""."" + TABLE.toLowerCase();","private static final String AUTH=DB.toLowerCase() + ""."" + TABLE.toLowerCase();
",1,2,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1196,"if ( ""dn"".toUpperCase().startsWith( dnAttr.toUpperCase() ) )","if (""dn"".toUpperCase().startsWith(dnAttr.toUpperCase())) {
  String replacementString=""dn:"";
  String displayString=""dn: ()"";
  ICompletionProposal proposal=new CompletionProposal(replacementString,offset,dnAttr.length(),replacementString.length(),null,displayString,null,null);
  proposalList.add(proposal);
}
",1,1,5,,"StringLiteral(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1197,"if ( proposal.toUpperCase().startsWith( string.toUpperCase() ) && !"""".equals( string ) )","if (proposal.toUpperCase().startsWith(string.toUpperCase()) && !"""".equals(string)) {
  IContentProposal p=new IContentProposal(){
    public String getContent(){
      return proposal;
    }
    public String getDescription(){
      return proposal;
    }
    public String getLabel(){
      return proposal;
    }
    public int getCursorPosition(){
      return proposal.length();
    }
  }
;
  proposalList.add(p);
}
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1198,if ( value.isString() && value.getStringValue().toUpperCase().indexOf( quickFilterValue.toUpperCase() ) == -1 ),"if (value.isString() && value.getStringValue().toUpperCase().indexOf(quickFilterValue.toUpperCase()) == -1) {
  return false;
}
 else if (value.isBinary()) {
  return false;
}
",1,3,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1199,"message = MessageFormat.format(bundle.getString(""CaptureFK""), new String[] {((String) event.getNewValue()).toUpperCase(), bundle.getString(""CaptureFKtable"")});","message=MessageFormat.format(bundle.getString(""CaptureFK""),new String[]{((String)event.getNewValue()).toUpperCase(),bundle.getString(""CaptureFKtable"")});
",1,12,15,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1200,return key instanceof String ? underlyingMap.get(((String) key).toLowerCase()) : null;,"return key instanceof String ? underlyingMap.get(((String)key).toLowerCase()) : null;
",1,1,8,,"SimpleName(InstanceofExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1201,policy = CompilerPolicy.valueOf((value != null) ? value.string_val.toUpperCase() : config.getString(JAVA_COMPILER_CONFIG).toUpperCase());,"policy=CompilerPolicy.valueOf((value != null) ? value.string_val.toUpperCase() : config.getString(JAVA_COMPILER_CONFIG).toUpperCase());
",1,1,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1202,"return new FunctionCall(call.getAggregation().getName().toLowerCase(), args, ExpressionPosition.UNKNOWN);","return new FunctionCall(call.getAggregation().getName().toLowerCase(),args,ExpressionPosition.UNKNOWN);
",1,1,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
1203,"private static final boolean isWindows = System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0;","private static final boolean isWindows=System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0;
",1,7,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1204,"final boolean isTableNotFound = ex.getMessage().toLowerCase().contains(String.format(""%s' not found"", table).toLowerCase());","final boolean isTableNotFound=ex.getMessage().toLowerCase().contains(String.format(""%s' not found"",table).toLowerCase());
",1,10,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1205,return buf == null ? camelName.toLowerCase() : buf.toString().toLowerCase();,"return buf == null ? camelName.toLowerCase() : buf.toString().toLowerCase();
",1,1,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1206,"ret.append(elems[i].substring(0, 1).toUpperCase());","ret.append(elems[i].substring(0,1).toUpperCase());
",1,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1207,DBTableColumn c1 = (DBTableColumn) getTable(fkTable).getColumn(fkColumn.toUpperCase());,"DBTableColumn c1=(DBTableColumn)getTable(fkTable).getColumn(fkColumn.toUpperCase());
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1208,"getClassIdVarName(thrown),getExcept(thrown).service().name().toString().toLowerCase(),getExcept(thrown).service().name().toString().toLowerCase(),thrown);","return String.format(""(etch_object*)etchvtor_custom_get( ETCHTYPEB_USER,get_dynamic_classid_unique(&%s), %s_valufact_get_static()->_mt_%s_%s,0)"",getClassIdVarName(thrown),getExcept(thrown).service().name().toString().toLowerCase(),getExcept(thrown).service().name().toString().toLowerCase(),thrown);
",1,1,15,,"SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(),
"
1209,"return ""CLASSID_"" + n.efqname(this).toUpperCase();","return ""CLASSID_"" + n.efqname(this).toUpperCase();
",1,1,5,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1210,"return Util.getStoreInfo(this, ""/archive/"" + getEntityType().toUpperCase());","return Util.getStoreInfo(this,""/archive/"" + getEntityType().toUpperCase());
",1,1,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1211,if (args.length < 1 || !commandMap.containsKey(args[0].toLowerCase())) {,"if (args.length < 1 || !commandMap.containsKey(args[0].toLowerCase())) {
  printUsage();
  return ERR_INVALID_ARGS;
}
",1,2,7,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1212,"PojoServiceRegistry.class.getName().toLowerCase() + "".bundles"";","public static final String BUNDLE_DESCRIPTORS=PojoServiceRegistry.class.getName().toLowerCase() + "".bundles"";
",1,1,4,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ),
"
1213,"? System.getProperty(DirectoryWatcher.LOG_LEVEL.toUpperCase().replace('.', '_'))","s=(s == null) ? System.getProperty(DirectoryWatcher.LOG_LEVEL.toUpperCase().replace('.','_')) : s;
",1,1,7,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
1214,Element[] elems = (Element[]) m_elements.get(name.toLowerCase());,"Element[] elems=(Element[])m_elements.get(name.toLowerCase());
",1,1,9,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1215,if (this.value == null || !valuesList.contains(this.value.toString().toLowerCase())) {,"if (this.value == null || !valuesList.contains(this.value.toString().toLowerCase())) {
  final StringBuilder validationErrorCode=new StringBuilder(""validation.msg."").append(this.resource).append(""."").append(this.parameter).append("".is.not.one.of.expected.enumerations"");
  final StringBuilder defaultEnglishMessage=new StringBuilder(""The parameter "").append(this.parameter).append("" must be one of [ "").append(valuesListStr).append("" ] "").append(""."");
  final ApiParameterError error=ApiParameterError.parameterError(validationErrorCode.toString(),defaultEnglishMessage.toString(),this.parameter,this.value,values);
  this.dataValidationErrors.add(error);
}
",1,3,9,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1216,"msg = msg.toLowerCase().replace(""\r\n"", ""\n"").replace(""\r"", ""\n"").replace(""\n"", "" "");","msg=msg.toLowerCase().replace(""\r\n"",""\n"").replace(""\r"",""\n"").replace(""\n"","" "");
",1,3,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1217,InteropIdentifierType idType = InteropIdentifierType.valueOf(split.get(length - 3).toUpperCase());,"InteropIdentifierType idType=InteropIdentifierType.valueOf(split.get(length - 3).toUpperCase());
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1218,"humanReadable = ""Monthly on "" + nthDayName.getCode().toLowerCase() + "" "" + weekdayType.getCode().toLowerCase();","humanReadable=""Monthly on "" + nthDayName.getCode().toLowerCase() + "" ""+ weekdayType.getCode().toLowerCase();
",1,1,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1219,if (nameCodesMap.get(link.getItemName().toLowerCase()).contains(link.getItemParentID())) {,"if (nameCodesMap.get(link.getItemName().toLowerCase()).contains(link.getItemParentID())) {
  score=(score + .75) > 1.0 ? 1d : (score + .75);
  if (link.getItemParentID().equals(dominantCode)) {
    score=(score + .25) > 1.0 ? 1d : (score + .25);
  }
}
",1,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1220,colAlias = unescapeIdentifier(selExpr.getChild(1).getText().toLowerCase());,"colAlias=unescapeIdentifier(selExpr.getChild(1).getText().toLowerCase());
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1221,"assertEquals(false, client.removeDirectory(""/"" + TEST_CWD.getName().toUpperCase()));","assertEquals(false,client.removeDirectory(""/"" + TEST_CWD.getName().toUpperCase()));
",1,1,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1222,"String laction = ra.getLossAction().toString().toLowerCase().replace('_', '-');","String laction=ra.getLossAction().toString().toLowerCase().replace('_','-');
",1,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1223,"String laName = ((String) attrs[0]).toUpperCase().replace('-', '_');","String laName=((String)attrs[0]).toUpperCase().replace('-','_');
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1224,"if (option.toLowerCase().startsWith(taboo) || option.toLowerCase().startsWith(""d"" + taboo)) {","if (option.toLowerCase().startsWith(taboo) || option.toLowerCase().startsWith(""d"" + taboo)) {
  return true;
}
",1,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1225,"return this.text.substring(0, 1).toUpperCase();","return this.text.substring(0,1).toUpperCase();
",1,1,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1226,.filter(t -> buffer == null || t.toLowerCase().startsWith(buffer.toLowerCase())),"List<String> topicKeys=this.topics.keySet().stream().filter(t -> buffer == null || t.toLowerCase().startsWith(buffer.toLowerCase())).sorted().collect(Collectors.toList());
",1,1,9,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, LambdaExpression-body, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, ),
"
1227,"emails[i] = firstNames[i].toLowerCase() + ""."" + lastNames[i].toLowerCase() + ""@example.com"";","emails[i]=firstNames[i].toLowerCase() + ""."" + lastNames[i].toLowerCase()+ ""@example.com"";
",1,1,10,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1228,int names = name.toLowerCase().compareTo(o.name.toLowerCase());,"int names=name.toLowerCase().compareTo(o.name.toLowerCase());
",1,1,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1229,|| (bundle.getSymbolicName() != null && bundle.getSymbolicName().toLowerCase().indexOf(searchString.trim().toLowerCase()) == -1)){,"if (bundle.getSymbolicName() == null || (bundle.getSymbolicName() != null && bundle.getSymbolicName().toLowerCase().indexOf(searchString.trim().toLowerCase()) == -1)) {
  return false;
}
",1,6,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1230,".p(""openejb.log.color"", Boolean.toString(!System.getProperty(""os.name"").toLowerCase().contains(""win"")))","container=EJBContainer.createEJBContainer(new PropertiesBuilder().p(""openejb.jul.forceReload"",Boolean.TRUE.toString()).p(""openejb.log.color"",Boolean.toString(!System.getProperty(""os.name"").toLowerCase().contains(""win""))).p(loggerName + "".level"",""INFO"").p(""openejb.jdbc.log"",Boolean.FALSE.toString()).p(""jdbc/orderDB"",""new://Resource?type=DataSource"").p(""jdbc/orderDB.JdbcDriver"",EmbeddedDriver.class.getName()).p(""jdbc/orderDB.JdbcUrl"",""jdbc:derby:memory:orderDB"" + "";create=true"").p(""jdbc/orderDB.UserName"",""app"").p(""jdbc/orderDB.Password"",""app"").p(""jdbc/orderDB.JtaManaged"",Boolean.TRUE.toString()).p(""jdbc/batchee"",""new://Resource?type=DataSource"").p(""jdbc/batchee.JdbcDriver"",EmbeddedDriver.class.getName()).p(""jdbc/batchee.JdbcUrl"",""jdbc:derby:memory:batchee"" + "";create=true"").p(""jdbc/batchee.UserName"",""app"").p(""jdbc/batchee.Password"",""app"").p(""jdbc/batchee.JtaManaged"",Boolean.FALSE.toString()).build());
",1,1,10,,"SimpleName(),
StringLiteral(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, MethodInvocation-arguments, ),
"
1231,return (address == null) ? 0 : address.toLowerCase().hashCode();,"return (address == null) ? 0 : address.toLowerCase().hashCode();
",1,1,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1232,return headerName.toLowerCase().hashCode() + super.hashCode();,"return headerName.toLowerCase().hashCode() + super.hashCode();
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(SuperMethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1233,result = 31 * result + getType().toLowerCase().hashCode();,"result=31 * result + getType().toLowerCase().hashCode();
",1,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1234,"private static final boolean UNIX = !System.getProperty(""os.name"").toLowerCase().contains(""win"");","private static final boolean UNIX=!System.getProperty(""os.name"").toLowerCase().contains(""win"");
",1,1,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1235,"if (urls[i].toLowerCase().startsWith(""https:","if (urls[i].toLowerCase().startsWith(""https://localhost:"") || urls[i].toLowerCase().startsWith(""http://localhost:"")) {
  indexOfLocalUrl=i;
}
",1,1,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1236,"name = RandomWord.getNewWord(seed).toLowerCase() + ""-"" + RandomWord","name=RandomWord.getNewWord(seed).toLowerCase() + ""-"" + RandomWord.getNewWord(seed2).toLowerCase();
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1237,"return p.getName().toLowerCase().equals(id.toLowerCase() + "".aocx"");","return p.getName().toLowerCase().equals(id.toLowerCase() + "".aocx"");
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1238,"return getHostnameVerifier(conf.get(SSL_HOSTNAME_VERIFIER_KEY, ""DEFAULT"").","return getHostnameVerifier(conf.get(SSL_HOSTNAME_VERIFIER_KEY,""DEFAULT"").trim().toUpperCase());
",1,1,5,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1239,"fileSys.checkPath(new Path(""hdfs:","fileSys.checkPath(new Path(""hdfs://"" + add.getHostName().toUpperCase() + "":""+ add.getPort()));
",1,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1240,"dataType = OutputType.valueOf(key.substring(0, place).toUpperCase());","dataType=OutputType.valueOf(key.substring(0,place).toUpperCase());
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1241,"} else if (""true"".equals(arr[i].toLowerCase()) || ""false"".equals(arr[i].toLowerCase())) {","if (""true"".equals(arr[i].toLowerCase()) || ""false"".equals(arr[i].toLowerCase())) {
  map.put(keyValues[i],Boolean.parseBoolean(arr[i]));
}
 else {
  try {
    Double doubleValue=Double.parseDouble(arr[i]);
    map.put(keyValues[i],doubleValue);
  }
 catch (  NumberFormatException e) {
    map.put(keyValues[i],arr[i]);
  }
}
",1,6,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1242,if(!roleNamesForGroups.contains(request.getRoleName().trim().toLowerCase())) {,"if (!roleNamesForGroups.contains(request.getRoleName().trim().toLowerCase())) {
  throw new SentryAccessDeniedException(""Access denied to "" + subject);
}
",1,2,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1243,this.id = PREFIX + this.name().toLowerCase();,"this.id=PREFIX + this.name().toLowerCase();
",1,1,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1244,"return getDimensionTablePrefix(dimTblName) + ""."" + storage.toLowerCase() + DUMP_PERIOD_SFX;","return getDimensionTablePrefix(dimTblName) + ""."" + storage.toLowerCase()+ DUMP_PERIOD_SFX;
",1,2,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1245,"FontProperty[] fps = getFontProperties(family.toLowerCase() + ""."" + style);","FontProperty[] fps=getFontProperties(family.toLowerCase() + ""."" + style);
",1,1,8,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1246,String str = strMas[i].substring(strMas[i].length() - 3).toLowerCase();,"String str=strMas[i].substring(strMas[i].length() - 3).toLowerCase();
",1,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1247,"(""YES"".equals(rs.getString(2).toUpperCase()) || ""DEFAULT"".equals(rs.getString(2).toUpperCase()))) {","if (""INNODB"".equals(rs.getString(1).toUpperCase()) && (""YES"".equals(rs.getString(2).toUpperCase()) || ""DEFAULT"".equals(rs.getString(2).toUpperCase()))) {
  return true;
}
",1,3,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1248,Attribute attribute = ignoreCaseAttributes.get(attributes[i],"Attribute attribute=ignoreCaseAttributes.get(attributes[i].getID().toUpperCase());
",1,1,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1249,"result.append(s.substring(index + 1, index + 3).toLowerCase());","result.append(s.substring(index + 1,index + 3).toLowerCase());
",1,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1250,"assertTrue(""Invalid conversion"", !s.toUpperCase().equals(s));","assertTrue(""Invalid conversion"",!s.toUpperCase().equals(s));
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1251,assertTrue(isoLang[length / 2].toLowerCase().equals(isoLang[length / 2]));,"assertTrue(isoLang[length / 2].toLowerCase().equals(isoLang[length / 2]));
",1,1,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1252,"currentLine.substring(lineIndex++, lineIndex).toLowerCase();","String character=currentLine.substring(lineIndex++,lineIndex).toLowerCase();
",1,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1253,: ((ignoreCase ? line.toLowerCase(),"if (whole ? (ignoreCase ? line.equalsIgnoreCase(str) : line.equals(str)) : ((ignoreCase ? line.toLowerCase() : line).indexOf(str) >= 0)) {
  return;
}
",1,1,3,,"SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
"
1254,"byte[] bytes = dns.toLowerCase().getBytes(""UTF-8"");","byte[] bytes=dns.toLowerCase().getBytes(""UTF-8"");
",1,1,7,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1255,return index != -1 ? index : text.toLowerCase().indexOf(mnemonicChar);,"return index != -1 ? index : text.toLowerCase().indexOf(mnemonicChar);
",1,1,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1256,return tag.length() > 0 ? tag.toLowerCase() : null;,"return tag.length() > 0 ? tag.toLowerCase() : null;
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1257,return dtd == null ? new DTD(name.toLowerCase()) : (DTD)dtd;,"return dtd == null ? new DTD(name.toLowerCase()) : (DTD)dtd;
",1,1,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1258,{ String tagName = yytext().substring(1).toLowerCase();,"String tagName=yytext().substring(1).toLowerCase();
",1,3,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, Block-statements, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, Block-statements, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, Block-statements, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, Block-statements, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, Block-statements, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, Block-statements, ),
"
1259,return text != null ? text.toUpperCase().indexOf(Character.toUpperCase(mnemonicChar)) : -1;,"return text != null ? text.toUpperCase().indexOf(Character.toUpperCase(mnemonicChar)) : -1;
",1,1,9,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1260,"assertEquals(1, AttributeList.name2type(names[i]","assertEquals(1,AttributeList.name2type(names[i].toLowerCase()));
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1261,return (typeString = sb.toString().toLowerCase());,"return (typeString=sb.toString().toLowerCase());
",1,1,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
1262,"return new Path(wh.getWhRoot(), dbName.toLowerCase() + DATABASE_WAREHOUSE_SUFFIX);","return new Path(wh.getWhRoot(),dbName.toLowerCase() + DATABASE_WAREHOUSE_SUFFIX);
",1,3,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
1263,"pattern = builder.toString().toLowerCase().replace(""_"", ""."").replace(""%"", "".*?"");","pattern=builder.toString().toLowerCase().replace(""_"",""."").replace(""%"","".*?"");
",1,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1264,"name.append(escapePathName((partCols.get(i)).toLowerCase(), defaultStr));","name.append(escapePathName((partCols.get(i)).toLowerCase(),defaultStr));
",1,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1265,"throw new IllegalArgumentException(token.string.toUpperCase() + "" not a valid format for ""","throw new IllegalArgumentException(token.string.toUpperCase() + "" not a valid format for "" + ""timestamp or date."");
",1,1,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
1266,if (value == null || !expected.contains(caseSensitive ? value : value.toLowerCase())) {,"if (value == null || !expected.contains(caseSensitive ? value : value.toLowerCase())) {
  return ""Invalid value.. expects one of "" + expected;
}
",1,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1267,String str = evalPop(ctx.func_param(0).expr()).toString().toLowerCase();,"String str=evalPop(ctx.func_param(0).expr()).toString().toLowerCase();
",1,6,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1268,"exec.dropPackage(ctx, ctx.ident().getText().toUpperCase(), ctx.T_EXISTS() != null);","exec.dropPackage(ctx,ctx.ident().getText().toUpperCase(),ctx.T_EXISTS() != null);
",1,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1269,"return l.get(0).toLowerCase().split(""="")[1].endsWith(""+"");","return l.get(0).toLowerCase().split(""="")[1].endsWith(""+"");
",1,3,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
1270,"assertIsOriginal(new Path(TEST_WAREHOUSE_DIR, Table.ACIDTBL.toString().toLowerCase()), false);","assertIsOriginal(new Path(TEST_WAREHOUSE_DIR,Table.ACIDTBL.toString().toLowerCase()),false);
",1,1,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1271,"path = new Path(path, dbName.toLowerCase()+"".db"");","path=new Path(path,dbName.toLowerCase() + "".db"");
",1,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1272,"run(""CREATE DATABASE "" + name + "" LOCATION '"" + extLocation + ""/"" + name.toLowerCase() + "".db' MANAGEDLOCATION '"" + mgdLocation + ""/"" + name.toLowerCase() + "".db' WITH DBPROPERTIES ( '"" +","run(""CREATE DATABASE "" + name + "" LOCATION '""+ extLocation+ ""/""+ name.toLowerCase()+ "".db' MANAGEDLOCATION '""+ mgdLocation+ ""/""+ name.toLowerCase()+ "".db' WITH DBPROPERTIES ( '""+ SOURCE_OF_REPLICATION+ ""' = '1,2,3')"",myDriver);
",1,1,14,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1273,"assertEquals(data[i].toLowerCase().trim(), results.get(i).toLowerCase().trim());","assertEquals(data[i].toLowerCase().trim(),results.get(i).toLowerCase().trim());
",1,1,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1274,"Path path = new Path(primary.warehouseRoot, dbName.toLowerCase()+"".db"");","Path path=new Path(primary.warehouseRoot,dbName.toLowerCase() + "".db"");
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1275,"assertNotNull(dfs.getFileStatus(new Path(locationPath, "".snapshot/"" + firstSnapshot(primaryDbName.toLowerCase()))));","assertNotNull(dfs.getFileStatus(new Path(locationPath,"".snapshot/"" + firstSnapshot(primaryDbName.toLowerCase()))));
",1,7,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1276,allMatch(prefix -> !tableName.toUpperCase().startsWith(prefix.toUpperCase()));,"return TABLE_PREFIXES_TO_BE_EXCLUDED.stream().allMatch(prefix -> !tableName.toUpperCase().startsWith(prefix.toUpperCase()));
",1,2,7,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, LambdaExpression-body, ),
"
1277,dataMatched &= data[i].toLowerCase().equals(results.get(i).toLowerCase());,"dataMatched&=data[i].toLowerCase().equals(results.get(i).toLowerCase());
",1,1,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1278,"assertEquals(""Should not find 'not exist'"", -1, strVal.toLowerCase().indexOf(""not exist""));","assertEquals(""Should not find 'not exist'"",-1,strVal.toLowerCase().indexOf(""not exist""));
",1,1,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1279,"result.databaseName = ""test_db_"" + name.toLowerCase();","result.databaseName=""test_db_"" + name.toLowerCase();
",1,1,4,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1280,"String key = (dbName.toLowerCase() + ""."" + tableName.toLowerCase());","String key=(dbName.toLowerCase() + ""."" + tableName.toLowerCase());
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1281,"Path path = new Path(rootDir, database.getName().toLowerCase() + DATABASE_PATH_SUFFIX);","Path path=new Path(rootDir,database.getName().toLowerCase() + DATABASE_PATH_SUFFIX);
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1282,String tableName = SemanticAnalyzer.getUnescapedUnqualifiedTableName((ASTNode) left.getChild(0)).toLowerCase();,"String tableName=SemanticAnalyzer.getUnescapedUnqualifiedTableName((ASTNode)left.getChild(0)).toLowerCase();
",1,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1283,"private static String KEY_FIELD_PREFIX = (Utilities.ReduceField.KEY + ""."").toLowerCase();","private static String KEY_FIELD_PREFIX=(Utilities.ReduceField.KEY + ""."").toLowerCase();
",1,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1284,"List<Integer> weights = creepyGeoRegionGroup.weight.get(type.toLowerCase() + ""_weight"");","List<Integer> weights=creepyGeoRegionGroup.weight.get(type.toLowerCase() + ""_weight"");
",1,2,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1285,return ((p1.toString().toLowerCase().indexOf(p2.toString().toLowerCase()) > -1) ||,"return ((p1.toString().toLowerCase().indexOf(p2.toString().toLowerCase()) > -1) || (p2.toString().toLowerCase().indexOf(p1.toString().toLowerCase()) > -1)) ? true : false;
",1,7,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
"
1286,(p2.toString().toLowerCase().indexOf(p1.toString().toLowerCase()) > -1)) ? true : false;,"return ((p1.toString().toLowerCase().indexOf(p2.toString().toLowerCase()) > -1) || (p2.toString().toLowerCase().indexOf(p1.toString().toLowerCase()) > -1)) ? true : false;
",1,1,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
BooleanLiteral(),
BooleanLiteral(),
"
1287,return !tableName.toLowerCase().startsWith(,"return !tableName.toLowerCase().startsWith(SemanticAnalyzer.VALUES_TMP_TABLE_NAME_PREFIX.toLowerCase()) && !replScope.tableIncludedInReplScope(tableName);
",1,1,3,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
1288,&& !DataUnit.DATA_SIZE_PATTERN.matcher(batchSize.trim().toUpperCase()).matches()) {,"if (isNotNull(batchSize) && batchSize.length() > 0 && !DataUnit.DATA_SIZE_PATTERN.matcher(batchSize.trim().toUpperCase()).matches()) {
  validationErrors.add(String.format(""Batch size for port '%s' must be of format <Data Size> <Data Unit>"" + "" where <Data Size> is a non-negative integer and <Data Unit> is a supported Data"" + "" Unit, such as: B, KB, MB, GB, TB"",remoteGroupPort.getName()));
}
",1,2,6,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
"
1289,return unescapeIdentifier(node.getChild(1).getText().toLowerCase());,"return unescapeIdentifier(node.getChild(1).getText().toLowerCase());
",1,1,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1290,&& inputRR.hasTableAlias(unescapeIdentifier(expr.getChild(0),"if (expr.getType() == HiveParser.DOT && expr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL && inputRR.hasTableAlias(unescapeIdentifier(expr.getChild(0).getChild(0).getText().toLowerCase())) && !hasAsClause && !inputRR.getIsExprResolver() && isRegex(unescapeIdentifier(expr.getChild(1).getText()),conf)) {
  pos=genRexNodeRegex(unescapeIdentifier(expr.getChild(1).getText()),unescapeIdentifier(expr.getChild(0).getChild(0).getText().toLowerCase()),expr,columnList,excludedColumns,inputRR,starRR,pos,outputRR,qb.getAliases(),true);
}
 else if (ParseUtils.containsTokenOfType(expr,HiveParser.TOK_FUNCTIONDI) && !ParseUtils.containsTokenOfType(expr,HiveParser.TOK_WINDOWSPEC) && !(srcRel instanceof HiveAggregate || (srcRel.getInputs().size() == 1 && srcRel.getInput(0) instanceof HiveAggregate))) {
  throw new CalciteSemanticException(""Distinct without an aggregation."",UnsupportedFeature.Distinct_without_an_aggreggation);
}
 else {
  TypeCheckCtx tcCtx=new TypeCheckCtx(inputRR,cluster.getRexBuilder());
  tcCtx.setAllowStatefulFunctions(true);
  if (!qbp.getDestToGroupBy().isEmpty()) {
    expr=rewriteGroupingFunctionAST(getGroupByForClause(qbp,selClauseName),expr,!cubeRollupGrpSetPresent);
  }
  RexNode expression=genRexNode(expr,inputRR,tcCtx);
  String recommended=recommendName(expression,colAlias,inputRR);
  if (recommended != null && outputRR.get(null,recommended) == null) {
    colAlias=recommended;
  }
  columnList.add(expression);
  TypeInfo typeInfo=expression.isA(SqlKind.LITERAL) ? TypeConverter.convertLiteralType((RexLiteral)expression) : TypeConverter.convert(expression.getType());
  ColumnInfo colInfo=new ColumnInfo(SemanticAnalyzer.getColumnInternalName(pos),TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo(typeInfo),tabAlias,false);
  outputRR.put(tabAlias,colAlias,colInfo);
  pos=Integer.valueOf(pos.intValue() + 1);
}
",1,1,6,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
1291,(ci.type != null ? ci.type.toString().toLowerCase() : null);,"String cleanerMetric=MetricsConstants.COMPACTION_CLEANER_CYCLE + ""_"" + (ci.type != null ? ci.type.toString().toLowerCase() : null);
",1,4,6,,"QualifiedName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
"
1292,"locale = new Locale(language.toString().toLowerCase(), country.toString().toUpperCase());","locale=new Locale(language.toString().toLowerCase(),country.toString().toUpperCase());
",1,2,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1293,"String fakeFile0 = TEST_WAREHOUSE_DIR + ""/"" + (Table.NONACIDORCTBL).toString().toLowerCase() +","String fakeFile0=TEST_WAREHOUSE_DIR + ""/"" + (Table.NONACIDORCTBL).toString().toLowerCase()+ ""/subdir/000000_0"";
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1294,"WORKER_CYCLE_KEY + ""_"" + CompactionType.MINOR.toString().toLowerCase(), 1);","MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,WORKER_CYCLE_KEY + ""_"" + CompactionType.MINOR.toString().toLowerCase(),1);
",1,1,6,,"SimpleName(InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
NumberLiteral(),
"
1295,"String catName = filter.catName.toLowerCase(), dbName = filter.dbName.toLowerCase(),","String catName=filter.catName.toLowerCase(), dbName=filter.dbName.toLowerCase(), tblName=filter.tableName.toLowerCase(), sqlFilter=filter.filter;
",1,2,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1296,"srv.cache(""SQL_PUBLIC_"" + CLIENT_CACHE_NAME.toUpperCase() + i).put(1, ""abc_cli"" + i);","srv.cache(""SQL_PUBLIC_"" + CLIENT_CACHE_NAME.toUpperCase() + i).put(1,""abc_cli"" + i);
",1,1,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1297,if (((String)row.get(0)).toUpperCase().contains(sqlMatch.toUpperCase())),"if (((String)row.get(0)).toUpperCase().contains(sqlMatch.toUpperCase())) return (String)row.get(1);
",1,1,8,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1298,boolean result = ((p2 != null) && (value != null) && (p2.toString().toLowerCase().indexOf(value.toLowerCase()) > -1));,"boolean result=((p2 != null) && (value != null) && (p2.toString().toLowerCase().indexOf(value.toLowerCase()) > -1));
",1,2,13,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1299,"new CacheConfiguration().setName(""CACHE"").setSqlSchema(QueryUtils.SCHEMA_SYS.toLowerCase())","node.getOrCreateCache(new CacheConfiguration().setName(""CACHE"").setSqlSchema(QueryUtils.SCHEMA_SYS.toLowerCase()));
",1,1,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
1300,"StatisticsTarget[] targets = Arrays.stream(tables).map(tbl -> new StatisticsTarget(SCHEMA, tbl.toUpperCase()))","StatisticsTarget[] targets=Arrays.stream(tables).map(tbl -> new StatisticsTarget(SCHEMA,tbl.toUpperCase())).toArray(StatisticsTarget[]::new);
",1,1,12,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1301,"if (in.toLowerCase().replaceAll(""\\s"", """").indexOf(os.toString()) != -1) {","if (in.toLowerCase().replaceAll(""\\s"","""").indexOf(os.toString()) != -1) {
  myOs=os;
}
",1,2,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1302,"return Enums.getIfPresent(TaskSchedulerType.class, name.toUpperCase()).or(SCHEDULEDEXECUTORSERVICE);","return Enums.getIfPresent(TaskSchedulerType.class,name.toUpperCase()).or(SCHEDULEDEXECUTORSERVICE);
",1,2,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
1303,ExtractType.valueOf(this.state.getProp(ConfigurationKeys.SOURCE_QUERYBASED_EXTRACT_TYPE).toUpperCase());,"ExtractType extractType=ExtractType.valueOf(this.state.getProp(ConfigurationKeys.SOURCE_QUERYBASED_EXTRACT_TYPE).toUpperCase());
",1,5,7,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
1304,if (ac.transport() != null && ac.transport ().name ().toLowerCase ().indexOf (s) > -1),"if (ac.transport() != null && ac.transport().name().toLowerCase().indexOf(s) > -1) return ac;
",1,2,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1305,sourceType = map.isType(UNION) ? UNION.toString().toLowerCase() : map.getType().toString().toLowerCase();,"sourceType=map.isType(UNION) ? UNION.toString().toLowerCase() : map.getType().toString().toLowerCase();
",1,1,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1306,this.firstType = buildBaseSchema(Type.valueOf(type1.getAsString().toUpperCase()));,"this.firstType=buildBaseSchema(Type.valueOf(type1.getAsString().toUpperCase()));
",1,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1307,? Extract.TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase()) : null;,"Extract.TableType tableType=state.contains(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY) ? Extract.TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase()) : null;
",1,1,7,,"QualifiedName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
NullLiteral(),
"
1308,"this.format = ConfigUtils.getString(config, DatasetDescriptorConfigKeys.FORMAT_KEY, DatasetDescriptorConfigKeys.DATASET_DESCRIPTOR_CONFIG_ANY).toLowerCase();","this.format=ConfigUtils.getString(config,DatasetDescriptorConfigKeys.FORMAT_KEY,DatasetDescriptorConfigKeys.DATASET_DESCRIPTOR_CONFIG_ANY).toLowerCase();
",1,2,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1309,".flatMap(sentence -> Arrays.asList(sentence.toLowerCase().split(""\\s+"")))","processingGraphBuilder.newSource(() -> StreamletUtils.randomFromList(SENTENCES)).setName(""random-sentences-source"").flatMap(sentence -> Arrays.asList(sentence.toLowerCase().split(""\\s+""))).setName(""flatten-into-individual-words"").consume(w -> {
  String logMessage=String.format(""(word: %s)"",w);
  LOG.info(logMessage);
}
).setName(""consumer"");
",1,1,8,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, LambdaExpression-body, ),
"
1310,"return _osName.substring(0, _osName.indexOf(' ')).toLowerCase();","return _osName.substring(0,_osName.indexOf(' ')).toLowerCase();
",1,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1311,String unit = ((LiteralTransformFunction) arguments.get(0)).getLiteral().toLowerCase();,"String unit=((LiteralTransformFunction)arguments.get(0)).getLiteral().toLowerCase();
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1312,public static MR_string toLowerCase ( MR_string x ) { return new MR_string(x.get().toLowerCase()); },"return new MR_string(x.get().toLowerCase());
",1,4,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, Block-statements, MethodDeclaration-body, ),
"
1313,"if (!""body"".equals(target.getTagName().toLowerCase())) {","if (!""body"".equals(target.getTagName().toLowerCase())) {
  return;
}
",1,1,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1314,"assert acl.principal().getPrincipalType().toLowerCase().equals(""role"") : ""Only Acls with KafkaPrincipal of type \""role;\"" is supported."";","assert acl.principal().getPrincipalType().toLowerCase().equals(""role"") : ""Only Acls with KafkaPrincipal of type \""role;\"" is supported."";
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, AssertStatement-expression, ),
StringLiteral(MethodInvocation-arguments, AssertStatement-expression, ),
StringLiteral(AssertStatement-message, ),
"
1315,public static final String PRIVILEGE_PREFIX = (PRIVILEGE_NAME + KV_SEPARATOR).toLowerCase();,"public static final String PRIVILEGE_PREFIX=(PRIVILEGE_NAME + KV_SEPARATOR).toLowerCase();
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1316,"return NONAMED_COLUMN_PREFIX + prefix.toLowerCase() + (sequence > 0 ? ""_"" + sequence : """");","return NONAMED_COLUMN_PREFIX + prefix.toLowerCase() + (sequence > 0 ? ""_"" + sequence : """");
",1,1,8,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1317,this.storeType = CatalogProtos.StoreType.valueOf(conf.getVar(ConfVars.SHUFFLE_FILE_FORMAT).toUpperCase());,"this.storeType=CatalogProtos.StoreType.valueOf(conf.getVar(ConfVars.SHUFFLE_FILE_FORMAT).toUpperCase());
",1,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1318,if (enabledStats && CatalogProtos.StoreType.CSV == CatalogProtos.StoreType.valueOf(store.toUpperCase())) {,"if (enabledStats && CatalogProtos.StoreType.CSV == CatalogProtos.StoreType.valueOf(store.toUpperCase())) {
  isShuffle=true;
}
 else {
  isShuffle=false;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1319,"String.format(""tajo.storage.scanner-handler.%s.class"",storeType.name().toLowerCase()), null, Scanner.class);","scannerClass=conf.getClass(String.format(""tajo.storage.scanner-handler.%s.class"",storeType.name().toLowerCase()),null,Scanner.class);
",1,2,8,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
NullLiteral(),
SimpleName(SimpleType-name, TypeLiteral-type, ),
"
1320,"StringBuilder strBuff = new StringBuilder(new BigInteger(1, cert","StringBuilder strBuff=new StringBuilder(new BigInteger(1,cert.getSerialNumber().toByteArray()).toString(16).toUpperCase());
",1,2,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1321,return Bytes.wrap(certificateFingerprint(certificate)).toHexString().substring(2).toLowerCase();,"return Bytes.wrap(certificateFingerprint(certificate)).toHexString().substring(2).toLowerCase();
",1,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1322,return strings.get(0)==null?null:strings.get(0).toString().toLowerCase();,"return strings.get(0) == null ? null : strings.get(0).toString().toLowerCase();
",1,3,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1323,"SimpleCredentials creds = new SimpleCredentials(TEST_USER1_UID.toUpperCase(), ""pass"".toCharArray());","SimpleCredentials creds=new SimpleCredentials(TEST_USER1_UID.toUpperCase(),""pass"".toCharArray());
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1324,"String[] andNames = new String[] {AND.name(), AND.toString(), AND.name().toLowerCase(), AND.name().toUpperCase(), ""any"", """"};","String[] andNames=new String[]{AND.name(),AND.toString(),AND.name().toLowerCase(),AND.name().toUpperCase(),""any"",""""};
",1,2,17,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1325,"assertTrue(pwValue.toLowerCase().startsWith(""{"" + PasswordUtil.DEFAULT_ALGORITHM.toLowerCase()));","assertTrue(pwValue.toLowerCase().startsWith(""{"" + PasswordUtil.DEFAULT_ALGORITHM.toLowerCase()));
",1,1,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1326,"Term term = new Term(PREDICTED_TAGS_REL_PATH + fragment.toLowerCase(), ""1"");","Term term=new Term(PREDICTED_TAGS_REL_PATH + fragment.toLowerCase(),""1"");
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1327,"(""@"" + getValue(""d"")).toLowerCase())","if (!identity.toString().toLowerCase().endsWith((""@"" + getValue(""d"")).toLowerCase()) && !getIdentity().toString().toLowerCase().endsWith((""."" + getValue(""d"")).toLowerCase())) throw new IllegalStateException(""Identity (i=) domain mismatch: expected [optional]@[optional.]domain-from-d-attribute"");
",1,1,4,,"StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1328,"formParameters.put(prefix + ""."" + (i + 1), checkNotNull(values[i], prefix.toLowerCase() + ""s["" + i + ""]""));","formParameters.put(prefix + ""."" + (i + 1),checkNotNull(values[i],prefix.toLowerCase() + ""s["" + i+ ""]""));
",1,1,14,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1329,"metadata.getUserMetadata().put((header.getKey().substring(metadataPrefix.length())).toLowerCase(),","metadata.getUserMetadata().put((header.getKey().substring(metadataPrefix.length())).toLowerCase(),header.getValue());
",1,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1330,"public static final String CONTAINER_PREFIX = (System.getProperty(""user.name"") + ""-blobstore"").toLowerCase();","public static final String CONTAINER_PREFIX=(System.getProperty(""user.name"") + ""-blobstore"").toLowerCase();
",1,2,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1331,"checkArgument(protocol.toUpperCase().equals(""HTTP"") || protocol.toUpperCase().equals(""TCP""),","checkArgument(protocol.toUpperCase().equals(""HTTP"") || protocol.toUpperCase().equals(""TCP""),""Acceptable values for protocol are HTTP or TCP"");
",1,1,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1332,"return iExt > iSlash ? filename.substring(iExt + 1).toLowerCase() : """" ;","return iExt > iSlash ? filename.substring(iExt + 1).toLowerCase() : """";
",1,1,8,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1333,final String cleanWikiName = MarkupParser.cleanLink(wikiName).toLowerCase() + filename;,"final String cleanWikiName=MarkupParser.cleanLink(wikiName).toLowerCase() + filename;
",1,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1334,"if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().toLowerCase().contains(""expired"")) {","if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().toLowerCase().contains(""expired"")) {
  return true;
}
",1,1,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
1335,return apply(x->x == null ? null : x.toLowerCase());,"return apply(x -> x == null ? null : x.toLowerCase());
",1,1,7,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1336,"String env = (pid + ""."" + key).toUpperCase().replaceAll(""\\."", ""_"");","String env=(pid + ""."" + key).toUpperCase().replaceAll(""\\."",""_"");
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1337,String key = group + Configurations.SEPARATOR + category + Configurations.SEPARATOR + listType + Configurations.SEPARATOR + type.name().toLowerCase();,"String key=group + Configurations.SEPARATOR + category+ Configurations.SEPARATOR+ listType+ Configurations.SEPARATOR+ type.name().toLowerCase();
",1,1,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1338,"return doAddStorage(tableName, getValidPath(path, false, true)).toString().toLowerCase();","return doAddStorage(tableName,getValidPath(path,false,true)).toString().toLowerCase();
",1,1,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1339,return _host.toLowerCase().equals(bd.getHost() == null ? null : bd.getHost().toLowerCase()) &&,"return _host.toLowerCase().equals(bd.getHost() == null ? null : bd.getHost().toLowerCase()) && (_port == bd.getPort()) && _transport.toLowerCase().equals(bd.getTransport() == null ? null : bd.getTransport().toLowerCase());
",1,2,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
1340,"hiveDim = new ReferencedDimAttribute(new FieldSchema(xd.getName(), xd.getType().toLowerCase(),","hiveDim=new ReferencedDimAttribute(new FieldSchema(xd.getName(),xd.getType().toLowerCase(),xd.getDescription()),xd.getDisplayString(),getChainRefColumns(xd.getChainRefColumn()),startDate,endDate,null,xd.getNumDistinctValues(),xd.getValues(),mapFromXProperties(xd.getTags()));
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1341,left.getChildCount() == 1 ? tableName : SemanticAnalyzer.unescapeIdentifier(left,"String alias=left.getChildCount() == 1 ? tableName : SemanticAnalyzer.unescapeIdentifier(left.getChild(left.getChildCount() - 1).getText().toLowerCase());
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, ),
"
1342,assertTrue(columns.get(0).getName().toLowerCase().equals(expectedCol.toLowerCase()),"assertTrue(columns.get(0).getName().toLowerCase().equals(expectedCol.toLowerCase()) || columns.get(0).getName().toLowerCase().equals(""ID"".toLowerCase()));
",1,1,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1343,"|| columns.get(0).getName().toLowerCase().equals(""ID"".toLowerCase()));","assertTrue(columns.get(0).getName().toLowerCase().equals(expectedCol.toLowerCase()) || columns.get(0).getName().toLowerCase().equals(""ID"".toLowerCase()));
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
1344,if ((force  && qTrim.contains(aBackTrackStr.toLowerCase()))|| qTrim.endsWith(aBackTrackStr.toLowerCase())) {,"if ((force && qTrim.contains(aBackTrackStr.toLowerCase())) || qTrim.endsWith(aBackTrackStr.toLowerCase())) {
  backTrackIndex=q.lastIndexOf(aBackTrackStr.toLowerCase());
  break;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1345,metadata.getColumns().get(i).getName().toLowerCase().equals(outputTablePfx + columns[i][0].toLowerCase()),"assertTrue(metadata.getColumns().get(i).getName().toLowerCase().equals(outputTablePfx + columns[i][0].toLowerCase()) || metadata.getColumns().get(i).getName().toLowerCase().equals(columns[i][0].toLowerCase()));
",1,3,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, ),
"
1346,"assertEquals(columns[i][1].toLowerCase(), metadata.getColumns().get(i).getType().name().toLowerCase());","assertEquals(columns[i][1].toLowerCase(),metadata.getColumns().get(i).getType().name().toLowerCase());
",1,1,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1347,int result = names1[0].toUpperCase().compareTo(names2[0].toUpperCase());,"int result=names1[0].toUpperCase().compareTo(names2[0].toUpperCase());
",1,3,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1348,} else if (attrParts[1].toLowerCase().startsWith(ARFFType.NOMINAL.getIndicator())) {,"if (attrParts[1].toLowerCase().startsWith(ARFFType.NOMINAL.getIndicator())) {
  type=ARFFType.NOMINAL;
  String[] classes=ARFFIterator.splitCSV(attrParts[1].substring(1,attrParts[1].length() - 1));
  for (int i=0; i < classes.length; i++) {
    model.addNominal(label,ARFFType.removeQuotes(classes[i]),i + 1);
  }
}
 else if (attrParts[1].toLowerCase().startsWith(ARFFType.DATE.getIndicator())) {
  type=ARFFType.DATE;
  DateFormat format=new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"",Locale.ENGLISH);
  String formStr=attrParts[1].substring(ARFFType.DATE.getIndicator().length()).trim();
  if (!formStr.isEmpty()) {
    if (formStr.startsWith(""\"""")) {
      formStr=formStr.substring(1,formStr.length() - 1);
    }
    format=new SimpleDateFormat(formStr,Locale.ENGLISH);
  }
  model.addDateFormat(labelNumInt,format);
}
 else {
  throw new UnsupportedOperationException(""Invalid attribute: "" + attrParts[1]);
}
",1,1,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1349,"if (dn.toLowerCase().endsWith((current + "","" + suffix).toLowerCase())) {","if (dn.toLowerCase().endsWith((current + "","" + suffix).toLowerCase())) {
  next=dn;
  break;
}
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1350,"String generatedId = theArtifact.getType().toUpperCase() + ""_"" + theArtifact.getGroupId() + "".""","String generatedId=theArtifact.getType().toUpperCase() + ""_"" + theArtifact.getGroupId()+ "".""+ theArtifact.getArtifactId();
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1351,final String mode = libraryDirectoryMode == null ? DEFAULT : libraryDirectoryMode.toUpperCase();,"final String mode=libraryDirectoryMode == null ? DEFAULT : libraryDirectoryMode.toUpperCase();
",1,4,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1352,"assertTrue( readed.toLowerCase().contains( ""</dt>"" + LINE_SEPARATOR + ""  <dd>1.0</dd>"" ) || readed.toLowerCase().contains(","assertTrue(readed.toLowerCase().contains(""</dt>"" + LINE_SEPARATOR + ""  <dd>1.0</dd>"") || readed.toLowerCase().contains(""</dt>"" + LINE_SEPARATOR + ""<dd>1.0</dd>""));
",1,2,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1353,if ( 'y' != inputHandler.readLine().toLowerCase().charAt( 0 ) ),"if ('y' != inputHandler.readLine().toLowerCase().charAt(0)) {
  disableMaterialization=false;
}
",1,3,6,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1354,"usageFormatter.printHelp(LatencySummarizer.class.getSimpleName().toLowerCase(), null, options, null, true);","usageFormatter.printHelp(LatencySummarizer.class.getSimpleName().toLowerCase(),null,options,null,true);
",1,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1355,this.host = (host == null) ? ANY_HOST : host.toLowerCase();,"this.host=(host == null) ? ANY_HOST : host.toLowerCase();
",1,1,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1356,"if ((sql.toUpperCase().indexOf(""CREATE"") != -1) || (sql.toUpperCase().indexOf(""DROP"") != -1)) {","if ((sql.toUpperCase().indexOf(""CREATE"") != -1) || (sql.toUpperCase().indexOf(""DROP"") != -1)) {
  task.addTaskListener(new TaskListener(){
    @Override public void taskFinished(    Task task){
      task.removeTaskListener(this);
      refresh();
    }
  }
);
}
",1,4,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1357,return getCipherName().toLowerCase() + getCipherType() + '-' + getCipherMode().toLowerCase();,"return getCipherName().toLowerCase() + getCipherType() + '-'+ getCipherMode().toLowerCase();
",1,1,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1358,"subscriptionType = SubscriptionType.valueOf(typeString == null ? ""NONE"" : typeString.toUpperCase());","subscriptionType=SubscriptionType.valueOf(typeString == null ? ""NONE"" : typeString.toUpperCase());
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1359,return -1 != name.toUpperCase().indexOf(searchString.toUpperCase());,"return -1 != name.toUpperCase().indexOf(searchString.toUpperCase());
",1,1,6,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1360,"out.println(""return "" + fieldPropName + ""== null? EMPTY_"" + type.toUpperCase() + ""_ARRAY : "" + fieldPropName + "".toArray(new "" + type + ""["" + fieldPropName + "".size()]);"");","out.println(""return "" + fieldPropName + ""== null? EMPTY_""+ type.toUpperCase()+ ""_ARRAY : ""+ fieldPropName+ "".toArray(new ""+ type+ ""[""+ fieldPropName+ "".size()]);"");
",1,1,14,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1361,"final String name = field.getName().toLowerCase().replace('_', '-');","final String name=field.getName().toLowerCase().replace('_','-');
",1,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1362,if (dataRow[2].toLowerCase().startsWith(prefix.toLowerCase())) {,"if (dataRow[2].toLowerCase().startsWith(prefix.toLowerCase())) {
  final AutoSuggestItem item=new AutoSuggestItem();
  item.setLabel(dataRow[0]);
  item.setValue(dataRow[2]);
  final List<AutoSuggestExtensionItem> extensionItems=new ArrayList<>(2);
  extensionItems.add(createExtensionItem(""page:isZip"",dataRow[1]));
  if (dataRow[3] != null) {
    extensionItems.add(createExtensionItem(""page:isState"",dataRow[3]));
  }
  item.setExtensionItems(extensionItems);
  items.add(item);
}
",1,1,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1363,if (null == searchString || keyNode.getDisplayName().toLowerCase().indexOf(searchString) != -1) {,"if (null == searchString || keyNode.getDisplayName().toLowerCase().indexOf(searchString) != -1) {
  return new Node[]{keyNode};
}
",1,1,8,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1364,&& (scheme == null || !scheme.toLowerCase().equals(HTTPS)),"return (protocol == null || protocol.length() == 0 || protocol.toLowerCase().startsWith(HTTP)) && (scheme == null || !scheme.toLowerCase().equals(HTTPS)) && (secure == null || !secure.toLowerCase().equals(TRUE));
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1365,String methodPrefix = methodAnnotations[0].substring(index + 1).toLowerCase();,"String methodPrefix=methodAnnotations[0].substring(index + 1).toLowerCase();
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1366,"return operationName.substring(0,1).toUpperCase() + operationName.substring(1)+""Response"";","return operationName.substring(0,1).toUpperCase() + operationName.substring(1) + ""Response"";
",1,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1367,"names = toDelete.length + "" "" + NbBundle.getMessage(DashboardViewer.class, ""LBL_Categories"").toLowerCase();","names=toDelete.length + "" "" + NbBundle.getMessage(DashboardViewer.class,""LBL_Categories"").toLowerCase();
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1368,if (findStr.substring(1).equals(findStr.substring(1).toUpperCase())) {,"if (findStr.substring(1).equals(findStr.substring(1).toUpperCase())) {
  replStr=Character.toLowerCase(replStr.charAt(0)) + replStr.substring(1).toUpperCase();
}
 else {
  replStr=Character.toLowerCase(replStr.charAt(0)) + replStr.substring(1);
}
",1,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1369,"return new String(arr, 0, len, encoding).toUpperCase();","return new String(arr,0,len,encoding).toUpperCase();
",1,1,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1370,String letter = Character.toString(words[i].charAt(0)).toLowerCase();,"String letter=Character.toString(words[i].charAt(0)).toLowerCase();
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1371,String letter = Character.toString(words[i].charAt(j)).toLowerCase();,"String letter=Character.toString(words[i].charAt(j)).toLowerCase();
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1372,"setValue(""sortkey"", zeros[sortable.length()] + sortable + ""\t"" + shortPath + ""\t"" + DiffNode.this.getName().toUpperCase());","setValue(""sortkey"",zeros[sortable.length()] + sortable + ""\t""+ shortPath+ ""\t""+ DiffNode.this.getName().toUpperCase());
",1,1,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ThisExpression-qualifier, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1373,if( null == filterText || child.getNodeDelegate().getDisplayName().toLowerCase().contains( filterText.toLowerCase() ) ) {,"if (null == filterText || child.getNodeDelegate().getDisplayName().toLowerCase().contains(filterText.toLowerCase())) {
  hasFilteredChildren=true;
  break;
}
",1,3,9,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1374,res = null == filterText || dobj.getNodeDelegate().getDisplayName().toLowerCase().contains( filterText.toLowerCase() );,"res=null == filterText || dobj.getNodeDelegate().getDisplayName().toLowerCase().contains(filterText.toLowerCase());
",1,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1375,"File fileToCompare = new File(getDataDir() + File.separator + ""projects"" + File.separator + DEFAULT_PROJECT_NAME + File.separator + DEF_DIR + File.separator + DEFAULT_PROJECT_NAME.toLowerCase() + File.separator + fileName + "".properties"");","File fileToCompare=new File(getDataDir() + File.separator + ""projects""+ File.separator+ DEFAULT_PROJECT_NAME+ File.separator+ DEF_DIR+ File.separator+ DEFAULT_PROJECT_NAME.toLowerCase()+ File.separator+ fileName+ "".properties"");
",1,1,16,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1376,if ((isCaseSensitive() && packageName.equals(packageLocation)) || (!isCaseSensitive() && packageName.toLowerCase().equals(packageLocation.toLowerCase()))) {,"if ((isCaseSensitive() && packageName.equals(packageLocation)) || (!isCaseSensitive() && packageName.toLowerCase().equals(packageLocation.toLowerCase()))) {
  return null;
}
",1,1,10,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1377,"private static final boolean IS_WINDOWS = System.getProperty(""os.name"", """").toLowerCase().startsWith(""win"");","private static final boolean IS_WINDOWS=System.getProperty(""os.name"","""").toLowerCase().startsWith(""win"");
",1,1,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1378,if ((pIndex = clazz.toLowerCase().lastIndexOf(aPackage.trim().toLowerCase())) != -1) {,"if ((pIndex=clazz.toLowerCase().lastIndexOf(aPackage.trim().toLowerCase())) != -1) {
  thePackage=clazz.substring(pIndex,pIndex + aPackage.trim().length() - 1);
  clazz=clazz.substring(pIndex + aPackage.trim().length(),clazz.length() - 5);
  int ei;
  if ((ei=clazz.indexOf('.')) != -1) {
    filename=clazz.substring(0,ei);
  }
 else   filename=clazz;
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1379,int idx = ((TypeMemberElement) elem).getType().getName().toLowerCase().indexOf(getName().toLowerCase());,"int idx=((TypeMemberElement)elem).getType().getName().toLowerCase().indexOf(getName().toLowerCase());
",1,1,10,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1380,return CodeUtils.extractMethodName(node).toLowerCase().equalsIgnoreCase(ACTION_METHOD_PREFIX + actionName);,"return CodeUtils.extractMethodName(node).toLowerCase().equalsIgnoreCase(ACTION_METHOD_PREFIX + actionName);
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1381,int indexOf = fqn.toLowerCase().indexOf(qn.toNamespaceName().toString().toLowerCase());,"int indexOf=fqn.toLowerCase().indexOf(qn.toNamespaceName().toString().toLowerCase());
",1,1,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1382,"} else if (!new File(sandbox).getName().toLowerCase().endsWith("".zip"")) {","if (!new File(sandbox).getName().toLowerCase().endsWith("".zip"")) {
  result.addWarning(new ValidationResult.Message(SymfonyOptions.SANDBOX,Bundle.SymfonyOptionsValidator_sandbox_notZip()));
}
",1,1,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1383,String controllerName = String.valueOf(tokenText.charAt(0)).toUpperCase(),"String controllerName=String.valueOf(tokenText.charAt(0)).toUpperCase().concat(tokenText.substring(1)).concat(AngularConfigInterceptor.CONTROLLER_SUFFIX);
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1384,"m.appendReplacement(sb, '@' + m.group(1).toLowerCase());","m.appendReplacement(sb,'@' + m.group(1).toLowerCase());
",1,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1385,"currentClassDocument.add(new Field(""classSimpleNameLower"", node.getSimpleName().toString().toLowerCase(), Store.YES, Index.NOT_ANALYZED));","currentClassDocument.add(new Field(""classSimpleNameLower"",node.getSimpleName().toString().toLowerCase(),Store.YES,Index.NOT_ANALYZED));
",1,2,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1386,return commandMap.get(args[0].toLowerCase()).function.apply(args);,"return commandMap.get(args[0].toLowerCase()).function.apply(args);
",1,1,8,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
1387,return new StringQueryResult(subjectValue == null ? null : subjectValue.toLowerCase());,"return new StringQueryResult(subjectValue == null ? null : subjectValue.toLowerCase());
",1,1,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
1388,"details.add(type + "" : "" + total + "" Total, "" + stateMap.toString().toLowerCase());","details.add(type + "" : "" + total+ "" Total, ""+ stateMap.toString().toLowerCase());
",1,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1389,"|| (deleteMode.equals(DELETE_ATTR.getValue()) && deleteAttr.toLowerCase().equals(""one"") )) {","if (deleteMode.equals(DELETE_ONE.getValue()) || (deleteMode.equals(DELETE_ATTR.getValue()) && deleteAttr.toLowerCase().equals(""one""))) {
  result=collection.deleteOne(query);
}
 else {
  result=collection.deleteMany(query);
}
",1,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1390,"queryBuilder.add(new BooleanClause(new WildcardQuery(new Term(searchTerm.getSearchableField().getSearchableFieldName(), searchTerm.getValue().toLowerCase())), occur));","queryBuilder.add(new BooleanClause(new WildcardQuery(new Term(searchTerm.getSearchableField().getSearchableFieldName(),searchTerm.getValue().toLowerCase())),occur));
",1,1,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1391,"return colName == null ? null : (translateColumnNames ? colName.toUpperCase().replace(""_"", """") : colName);","return colName == null ? null : (translateColumnNames ? colName.toUpperCase().replace(""_"","""") : colName);
",1,2,10,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1392,"fields.add(new RecordField(fieldType.name().toLowerCase(), fieldType.getMapDataType(RecordFieldType.INT.getDataType())));","fields.add(new RecordField(fieldType.name().toLowerCase(),fieldType.getMapDataType(RecordFieldType.INT.getDataType())));
",1,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1393,return Boolean.toString(!key.endsWith(currentDatabase)).toLowerCase();,"return Boolean.toString(!key.endsWith(currentDatabase)).toLowerCase();
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1394,"assertEquals(TlsCertificateAuthorityServiceCommandLine.NIFI_CA_KEYSTORE + tlsConfig.getKeyStoreType().toLowerCase(), tlsConfig.getKeyStore());","assertEquals(TlsCertificateAuthorityServiceCommandLine.NIFI_CA_KEYSTORE + tlsConfig.getKeyStoreType().toLowerCase(),tlsConfig.getKeyStore());
",1,2,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1395,".where(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(""userLoginId""), EntityOperator.LIKE, EntityFunction.UPPER(""%"" + userLoginId.toUpperCase() + ""%"")))","Collection<GenericValue> ulc=EntityQuery.use(delegator).from(""PartyAndUserLogin"").where(EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(""userLoginId""),EntityOperator.LIKE,EntityFunction.UPPER(""%"" + userLoginId.toUpperCase() + ""%""))).orderBy(""userLoginId"").queryList();
",1,3,13,,"SimpleName(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
1396,"addrExprs.add(EntityCondition.makeCondition(""stateProvinceGeoId"", EntityOperator.EQUALS, stateProvinceGeoId.toUpperCase()));","addrExprs.add(EntityCondition.makeCondition(""stateProvinceGeoId"",EntityOperator.EQUALS,stateProvinceGeoId.toUpperCase()));
",1,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1397,"} else if (viewType.toLowerCase().contains(""additional"") && viewNumber != null && !viewNumber.equals(""0"")) {","if (viewType.toLowerCase().contains(""additional"") && viewNumber != null && !viewNumber.equals(""0"")) {
  String filenameFormat=EntityUtilProperties.getPropertyValue(""catalog"",""image.filename.additionalviewsize.format"",(Delegator)context.get(""delegator""));
  filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);
  id=(String)context.get(""productId"");
  if (filenameFormat.endsWith(""${id}"")) {
    id=id + ""_View_"" + viewNumber;
  }
 else {
    viewType=""additional"" + viewNumber;
  }
  fileLocation=filenameExpander.expandString(UtilMisc.toMap(""location"",""products"",""id"",id,""viewtype"",viewType,""sizetype"",""original""));
}
 else {
  return ServiceUtil.returnError(UtilProperties.getMessage(resource,""ProductImageViewType"",UtilMisc.toMap(""viewType"",type),locale));
}
",1,4,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1398,if (UtilValidate.isNotEmpty(passwordHint) && (passwordHint.toUpperCase().indexOf(newPassword.toUpperCase()) >= 0)) {,"if (UtilValidate.isNotEmpty(passwordHint) && (passwordHint.toUpperCase().indexOf(newPassword.toUpperCase()) >= 0)) {
  errMsg=UtilProperties.getMessage(resource,""loginservices.password_hint_may_not_contain_password"",locale);
  errorMessageList.add(errMsg);
}
",1,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1399,String checkIndexName = needsUpperCase[0] ? relIndexName.toUpperCase() : relIndexName;,"String checkIndexName=needsUpperCase[0] ? relIndexName.toUpperCase() : relIndexName;
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1400,"rsCols = dbData.getIndexInfo(null, lookupSchemaName, needsUpperCase[0] ? curTableName.toLowerCase() : curTableName, false, true);","rsCols=dbData.getIndexInfo(null,lookupSchemaName,needsUpperCase[0] ? curTableName.toLowerCase() : curTableName,false,true);
",1,3,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1401,if (string.length() <= 1) return string.toLowerCase();,"if (string.length() <= 1) return string.toLowerCase();
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
1402,"if (value.length() > 10 && value.toLowerCase().startsWith(""datetime'"") && value.endsWith(""'"")) {","if (value.length() > 10 && value.toLowerCase().startsWith(""datetime'"") && value.endsWith(""'"")) {
  valueString=value.substring(9,value.length() - 1);
}
 else {
  throw new EdmSimpleTypeException(EdmSimpleTypeException.LITERAL_ILLEGAL_CONTENT.addContent(value));
}
",1,1,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1403,"if (literalKind == EdmLiteralKind.URI && value.toLowerCase().startsWith(""guid'"") && value.endsWith(""'"")) {","if (literalKind == EdmLiteralKind.URI && value.toLowerCase().startsWith(""guid'"") && value.endsWith(""'"")) {
  cleanValue=value.substring(5,value.length() - 1);
}
 else {
  cleanValue=value;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1404,"final String beanMethodName = ""ejbHome"" + method.getName().substring(0, 1).toUpperCase() + method.getName().substring(1);","final String beanMethodName=""ejbHome"" + method.getName().substring(0,1).toUpperCase() + method.getName().substring(1);
",1,1,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1405,if (value instanceof String) value = ((String) value).toLowerCase();,"if (value instanceof String) value=((String)value).toLowerCase();
",1,1,6,,"SimpleName(InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1406,final String name = isWindows ? jarNames[j].toLowerCase() : jarNames[j];,"final String name=isWindows ? jarNames[j].toLowerCase() : jarNames[j];
",1,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1407,"assertTrue(sql.get(0).toUpperCase().indexOf(""LIKE"") > 0);","assertTrue(sql.get(0).toUpperCase().indexOf(""LIKE"") > 0);
",1,1,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1408,"assertEquals(""MAPPINGTEST1"", vers.getColumns()[0].getTable().","assertEquals(""MAPPINGTEST1"",vers.getColumns()[0].getTable().getName().toUpperCase());
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1409,"if (nameCodesMap.containsKey(link.getItemName().toLowerCase()) || regexMatch(link.getItemName(), link.getItemParentID())) {","if (nameCodesMap.containsKey(link.getItemName().toLowerCase()) || regexMatch(link.getItemName(),link.getItemParentID())) {
  if (nameCodesMap.get(link.getItemName().toLowerCase()).contains(link.getItemParentID())) {
    score=(score + .75) > 1.0 ? 1d : (score + .75);
    if (link.getItemParentID().equals(dominantCode)) {
      score=(score + .25) > 1.0 ? 1d : (score + .25);
    }
  }
}
",1,1,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1410,"Double ld = (double) getLevenshteinDistance(linkedSpan.getSearchTerm().toLowerCase(), hierarchy.toLowerCase());","Double ld=(double)getLevenshteinDistance(linkedSpan.getSearchTerm().toLowerCase(),hierarchy.toLowerCase());
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
PrimitiveType(CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1411,"String lc = (wordToDisambiguate.getSentence()[i] + "" "" + wordToDisambiguate","String lc=(wordToDisambiguate.getSentence()[i] + "" "" + wordToDisambiguate.getSentence()[i + 1]).toLowerCase();
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1412,if (!WSDHelper.stopWords.contains(toks[i].toLowerCase()) && (index,"if (!WSDHelper.stopWords.contains(toks[i].toLowerCase()) && (index != i)) {
  String lemma=lemmas[i].toLowerCase().replaceAll(""[^a-z_]"","""").trim();
  if (lemma.length() > 1) {
    contextWords.add(lemma);
  }
}
",1,6,6,,"QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1413,"return Arrays.asList(generateUniqueName().toUpperCase(), ""\"""" + generateUniqueName().toLowerCase() + ""\"""");","return Arrays.asList(generateUniqueName().toUpperCase(),""\"""" + generateUniqueName().toLowerCase() + ""\"""");
",1,1,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1414,String resultStr = locale == null ? sourceStr.toLowerCase() : sourceStr.toLowerCase(locale);,"String resultStr=locale == null ? sourceStr.toLowerCase() : sourceStr.toLowerCase(locale);
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1415,"tokenFs.add(new Schema.FieldSchema( this.tupleColName.toUpperCase(), this.fieldType ));","tokenFs.add(new Schema.FieldSchema(this.tupleColName.toUpperCase(),this.fieldType));
",1,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1416,"Schema.FieldSchema tupleFs = new Schema.FieldSchema( this.bagColName.toUpperCase(), tupleSchema, DataType.TUPLE);","Schema.FieldSchema tupleFs=new Schema.FieldSchema(this.bagColName.toUpperCase(),tupleSchema,DataType.TUPLE);
",1,1,8,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1417,this.match = (match == null ? null : match.toLowerCase());,"this.match=(match == null ? null : match.toLowerCase());
",1,1,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1418,"String variable = s.substring(0, 1).toLowerCase().concat(s.substring(1));","String variable=s.substring(0,1).toLowerCase().concat(s.substring(1));
",1,1,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1419,"String id = (pm != null) ? pm.toUpperCase() : """";","String id=(pm != null) ? pm.toUpperCase() : """";
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1420,if(!StringUtils.isEmpty(s) && s.toLowerCase().startsWith(AUTH_COOKIE_NAME.toLowerCase())){,"if (!StringUtils.isEmpty(s) && s.toLowerCase().startsWith(AUTH_COOKIE_NAME.toLowerCase())) {
  int ustr=s.indexOf(""u="");
  if (ustr != -1) {
    int andStr=s.indexOf(""&"",ustr);
    if (andStr != -1) {
      try {
        userName=s.substring(ustr + 2,andStr);
      }
 catch (      Exception e) {
        userName=null;
      }
    }
  }
}
",1,3,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1421,"portletModes.put(f[i].get(f[i]).toString().toUpperCase(), f[i].get(f[i]));","portletModes.put(f[i].get(f[i]).toString().toUpperCase(),f[i].get(f[i]));
",1,2,14,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1422,System.out.println(getAdmin().namespaces().getSchemaAutoUpdateCompatibilityStrategy(namespace),"System.out.println(getAdmin().namespaces().getSchemaAutoUpdateCompatibilityStrategy(namespace).toString().toUpperCase());
",1,1,6,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1423,"final String shortHash = DigestUtils.sha1Hex(hashName).toLowerCase().substring(0, 8);","final String shortHash=DigestUtils.sha1Hex(hashName).toLowerCase().substring(0,8);
",1,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1424,"return StringFactory.graphString(this, fromString.toLowerCase() + ""->"" + toString.toLowerCase());","return StringFactory.graphString(this,fromString.toLowerCase() + ""->"" + toString.toLowerCase());
",1,2,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1425,"userMeta.put(DataBlockUtils.METADATA_FORMAT_VERSION_KEY.toLowerCase(), String.valueOf(-12345));","userMeta.put(DataBlockUtils.METADATA_FORMAT_VERSION_KEY.toLowerCase(),String.valueOf(-12345));
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1426,"userMeta.put(DataBlockUtils.METADATA_FORMAT_VERSION_KEY.toLowerCase(), String.valueOf(12345));","userMeta.put(DataBlockUtils.METADATA_FORMAT_VERSION_KEY.toLowerCase(),String.valueOf(12345));
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1427,"String name = baseName.length() == 1 ? baseName.toLowerCase() : baseName.substring(0,1).toLowerCase() + baseName.substring(1);","String name=baseName.length() == 1 ? baseName.toLowerCase() : baseName.substring(0,1).toLowerCase() + baseName.substring(1);
",1,1,15,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1428,private static final char[] CHARACTERS = (NUMBERS + LETTERS + LETTERS.toUpperCase() + OTHERS).toCharArray();,"private static final char[] CHARACTERS=(NUMBERS + LETTERS + LETTERS.toUpperCase()+ OTHERS).toCharArray();
",1,1,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1429,_transport.toLowerCase().equals(bd.getTransport() == null ? null : bd.getTransport().toLowerCase());,"return _host.toLowerCase().equals(bd.getHost() == null ? null : bd.getHost().toLowerCase()) && (_port == bd.getPort()) && _transport.toLowerCase().equals(bd.getTransport() == null ? null : bd.getTransport().toLowerCase());
",1,1,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ),
NullLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ),
"
1430,"this.matchMode = MatchType.valueOf(params.get(MODE_PROP, DEFAULT_MODE_PROP).toUpperCase());","this.matchMode=MatchType.valueOf(params.get(MODE_PROP,DEFAULT_MODE_PROP).toUpperCase());
",1,1,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1431,return (getContentType().toLowerCase().startsWith(MediaFileType.IMAGE,"return (getContentType().toLowerCase().startsWith(MediaFileType.IMAGE.getContentTypePrefix().toLowerCase()));
",1,1,4,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
1432,"if (tableName.toLowerCase().equals(rs.getString(""TABLE_NAME"").toLowerCase())) {","if (tableName.toLowerCase().equals(rs.getString(""TABLE_NAME"").toLowerCase())) {
  return true;
}
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1433,|| ((description != null) && (description.toLowerCase().indexOf(keyword) != -1)),"if ((all || (var.indexOf(keyword) != -1) || ((description != null) && (description.toLowerCase().indexOf(keyword) != -1))|| (keyword.matches(var))|| ((sesaila.get(var) != null) && (sesaila.get(var)).indexOf(keyword) != -1)) && (!info.isHidden()) && (!info.isRemoved())&& (advanced || !info.isAdvanced())) {
  if (printaliases && sesaila.containsKey(var))   printSet.add(sesaila.get(var));
 else   printSet.add(var);
}
 else {
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1434,DatePropertiesSetters propSetter = DatePropertiesSetters.valueOf(((IIdentifierNode)rightNode).getName().toUpperCase());,"DatePropertiesSetters propSetter=DatePropertiesSetters.valueOf(((IIdentifierNode)rightNode).getName().toUpperCase());
",1,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1435,pType = ProxyInfo.ProxyType.valueOf(this.proxyType.toUpperCase());,"pType=ProxyInfo.ProxyType.valueOf(this.proxyType.toUpperCase());
",1,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1436,"globalConstraint += sqlLikeConstraint(sqlLower(msgField), value.toLowerCase()) + OR;","globalConstraint+=sqlLikeConstraint(sqlLower(msgField),value.toLowerCase()) + OR;
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1437,"sqoopRecordFields.put(fieldName.toLowerCase(), new Pair<String, String>(fieldName,","sqoopRecordFields.put(fieldName.toLowerCase(),new Pair<String,String>(fieldName,fieldTypeName));
",1,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1438,"builder.setProperty(Builder.EXPORT_PACKAGE,CONFIG_PACKAGE+config.getName().toLowerCase());","builder.setProperty(Builder.EXPORT_PACKAGE,CONFIG_PACKAGE + config.getName().toLowerCase());
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1439,"member = FooBar.class.getMethod(""get"" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1));","member=FooBar.class.getMethod(""get"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1));
",1,1,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1440,if (incomingURI.toLowerCase().contains(((String) key).toLowerCase())) {,"if (incomingURI.toLowerCase().contains(((String)key).toLowerCase())) {
  return (String)serviceURIMap.get(key);
}
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1441,if (preserveServerHeader && !preserveHttpHeaders.contains(HTTP.SERVER_HEADER.toUpperCase())) {,"if (preserveServerHeader && !preserveHttpHeaders.contains(HTTP.SERVER_HEADER.toUpperCase())) {
  preserveHttpHeaders.add(HTTP.SERVER_HEADER.toUpperCase());
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1442,return new StringBuilder(MatchingRule.class.getSimpleName()).,"return new StringBuilder(MatchingRule.class.getSimpleName()).append('_').append(rule.name()).toString().toLowerCase();
",1,1,3,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
1443,return domain.toLowerCase() + '_' + kind.name().toLowerCase();,"return domain.toLowerCase() + '_' + kind.name().toLowerCase();
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1444,"if ((!urlString.toLowerCase().startsWith(""http:"")) && (!urlString.toLowerCase().startsWith(""https:""))) {","if ((!urlString.toLowerCase().startsWith(""http:"")) && (!urlString.toLowerCase().startsWith(""https:""))) {
  throw new MLContextException(""Currently only reading from http and https URLs is supported"");
}
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1445,"this.getOpCode().toString().toLowerCase() + ""()."", false);","raiseValidateError(""Expected "" + e.getText() + "" to be a matrix argument for function ""+ this.getOpCode().toString().toLowerCase()+ ""()."",false);
",1,1,6,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(),
BooleanLiteral(),
"
1446,"String.valueOf(!dp).toUpperCase(), String.valueOf(selCols).toUpperCase(),","programArgs=new String[]{""-args"",input(""X""),input(""e""),String.valueOf(K),String.valueOf(!dp).toUpperCase(),String.valueOf(selCols).toUpperCase(),String.valueOf(VERBOSE).toUpperCase(),output(""R"")};
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1447,"""rows="" + rows, ""cols="" + cols, ""revIn="" + Boolean.toString(reversedInputs).toUpperCase(),","programArgs=new String[]{""-stats"",""100"",""-nvargs"",""in_X1="" + TestUtils.federatedAddress(port1,input(""X1"")),""in_X2="" + TestUtils.federatedAddress(port2,input(""X2"")),""in_X3="" + TestUtils.federatedAddress(port3,input(""X3"")),""in_X4="" + TestUtils.federatedAddress(port4,input(""X4"")),""in_Y="" + input(""Y""),""rows="" + rows,""cols="" + cols,""revIn="" + Boolean.toString(reversedInputs).toUpperCase(),""weighted="" + Boolean.toString(weighted).toUpperCase(),""out="" + output(""F"")};
",1,1,9,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
"
1448,"String[] writeArgs = new String[] {""-args"", txtFile, csvFile, Boolean.toString(_header).toUpperCase(), _delim,","String[] writeArgs=new String[]{""-args"",txtFile,csvFile,Boolean.toString(_header).toUpperCase(),_delim,Boolean.toString(_sparse).toUpperCase()};
",1,1,13,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1449,"&& !baseSchema.getSchemaName().isEmpty() ? baseSchema.getSchemaName().toUpperCase() : null,","ResultSet indexes=metadata.getIndexInfo(null,baseSchema.getSchemaName() != null && !baseSchema.getSchemaName().isEmpty() ? baseSchema.getSchemaName().toUpperCase() : null,params[0].toUpperCase(),false,true);
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NullLiteral(),
"
1450,if (rs.getString(1).toUpperCase().equals(params[params.length - 1].toUpperCase())) {,"if (rs.getString(1).toUpperCase().equals(params[params.length - 1].toUpperCase())) {
  result=true;
  break;
}
",1,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1451,"out.append(formatString(months_full[tm.monthOfYear - 1].toUpperCase(),","out.append(formatString(months_full[tm.monthOfYear - 1].toUpperCase(),S_FM(node.suffix) != 0 ? 0 : -9));
",1,7,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1452,"out.append(formatString(days_full[tm.getDayOfWeek()].toUpperCase(),","out.append(formatString(days_full[tm.getDayOfWeek()].toUpperCase(),S_FM(node.suffix) != 0 ? 0 : -9));
",1,3,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1453,DateToken dateToken =  DateTimeConstants.dateTokenMap.get(fields[i].toLowerCase());,"DateToken dateToken=DateTimeConstants.dateTokenMap.get(fields[i].toLowerCase());
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1454,this.returnTypes[i] = tokens.length == 1 ? tokens[0].toUpperCase() : tokens[1].toUpperCase();,"this.returnTypes[i]=tokens.length == 1 ? tokens[0].toUpperCase() : tokens[1].toUpperCase();
",1,1,11,,"ThisExpression(FieldAccess-expression, ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1455,"m.appendReplacement(sb, m.group(1).toLowerCase() + "":0 0"" + m.group(2));","m.appendReplacement(sb,m.group(1).toLowerCase() + "":0 0"" + m.group(2));
",1,1,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1456,"o.name().substring(0,1).toUpperCase() + o.name().substring(1).toLowerCase() :","final String e=o instanceof Direction ? o.name().substring(0,1).toUpperCase() + o.name().substring(1).toLowerCase() : o.name().substring(0,1).toUpperCase() + o.name().substring(1);
",1,1,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
"
1457,"StringFactory.stepString(this, this.returnClass.getSimpleName().toLowerCase(), Arrays.toString(this.ids), this.hasContainers);","return 0 == this.ids.length ? StringFactory.stepString(this,this.returnClass.getSimpleName().toLowerCase(),this.hasContainers) : StringFactory.stepString(this,this.returnClass.getSimpleName().toLowerCase(),Arrays.toString(this.ids),this.hasContainers);
",1,1,13,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(MethodInvocation-arguments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ),
"
1458,"assertNull(""Signature key not removed"", jar.getEntry(""META-INF/"" + algorithm.toUpperCase() + ""."" + algorithm.toUpperCase()));","assertNull(""Signature key not removed"",jar.getEntry(""META-INF/"" + algorithm.toUpperCase() + "".""+ algorithm.toUpperCase()));
",1,2,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1459,return ((stopWords != null) && stopWords.contains(tokenText.toLowerCase()));,"return ((stopWords != null) && stopWords.contains(tokenText.toLowerCase()));
",1,1,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
1460,User user = InjectorFactory.getInstance( UserDao.class ).get( username.toLowerCase() );,"User user=InjectorFactory.getInstance(UserDao.class).get(username.toLowerCase());
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1461,this.withCollectionName = Optional.fromNullable( CpNamingUtils.getEdgeTypeFromCollectionName( collectionName.toLowerCase() ) );,"this.withCollectionName=Optional.fromNullable(CpNamingUtils.getEdgeTypeFromCollectionName(collectionName.toLowerCase()));
",1,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1462,"return new Identifier( Type.EMAIL, ( ( String ) obj ).toLowerCase() );","return new Identifier(Type.EMAIL,((String)obj).toLowerCase());
",1,1,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
1463,"((LinkedHashMap)(collectionHashMap.get( ""collections"" ))).get( collectionName.toLowerCase() ));","assertNotSame(null,((LinkedHashMap)(collectionHashMap.get(""collections""))).get(collectionName.toLowerCase()));
",1,1,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
1464,"final boolean performDelete = StringUtils.isNotEmpty(performDeleteOption) && performDeleteOption.toLowerCase().equals(""yes"");","final boolean performDelete=StringUtils.isNotEmpty(performDeleteOption) && performDeleteOption.toLowerCase().equals(""yes"");
",1,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1465,"final boolean removeOrphans = !isBlank(removeOrphanConnectionsOption) && removeOrphanConnectionsOption.toLowerCase().equals(""yes"");","final boolean removeOrphans=!isBlank(removeOrphanConnectionsOption) && removeOrphanConnectionsOption.toLowerCase().equals(""yes"");
",1,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1466,"assertTrue(""entry "" + num + ""/"" + uas.size() + "": wrong browser detected: browser={"" + expected + ""}, found={"" + found + ""}, ua={"" + ua + ""}"", expected.toLowerCase().startsWith(found.toLowerCase()));","assertTrue(""entry "" + num + ""/""+ uas.size()+ "": wrong browser detected: browser={""+ expected+ ""}, found={""+ found+ ""}, ua={""+ ua+ ""}"",expected.toLowerCase().startsWith(found.toLowerCase()));
",1,1,18,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1467,"assertEquals(""entry "" + num + ""/"" + uas.size()+"": operating system not correctly detected: os={"" + expected + ""}, found={"" + os.getName() + ""}, ua={"" + ua + ""}"", expected.toLowerCase(), os.getName().toLowerCase());","assertEquals(""entry "" + num + ""/""+ uas.size()+ "": operating system not correctly detected: os={""+ expected+ ""}, found={""+ os.getName()+ ""}, ua={""+ ua+ ""}"",expected.toLowerCase(),os.getName().toLowerCase());
",1,1,19,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1468,"return fileName.toLowerCase().endsWith("".xml"") && new File(dir.toString(),fileName).isFile();","return fileName.toLowerCase().endsWith("".xml"") && new File(dir.toString(),fileName).isFile();
",1,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1469,"String capitalized = parts[i].substring(0, 1).toUpperCase() + parts[i].substring(1).toLowerCase();","String capitalized=parts[i].substring(0,1).toUpperCase() + parts[i].substring(1).toLowerCase();
",1,1,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1470,"return (name.toLowerCase().contains(""password"") || name.toLowerCase().contains(""keystorepass"") || name.toLowerCase().contains(""truststorepass""))? ENCRYPTED: PLAINTEXT;","return (name.toLowerCase().contains(""password"") || name.toLowerCase().contains(""keystorepass"") || name.toLowerCase().contains(""truststorepass"")) ? ENCRYPTED : PLAINTEXT;
",2,31,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1471,"Assert.assertEquals(""application/json"", res.getHeaders().getFirst(""Content-Type"").toString().toLowerCase());","Assert.assertEquals(""application/json"",res.getHeaders().getFirst(""Content-Type"").toString().toLowerCase());
",2,53,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1472,"requestProperties.put(SupportedCustomOperation.REGENERATE_KEYTABS.name().toLowerCase(), ""missing"");","requestProperties.put(SupportedCustomOperation.REGENERATE_KEYTABS.name().toLowerCase(),""missing"");
",2,4,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1473,"List<PageUser> pageUserPages = repository.getPagesForUser(USER_ID, PageType.USER.toString().toUpperCase());","List<PageUser> pageUserPages=repository.getPagesForUser(USER_ID,PageType.USER.toString().toUpperCase());
",2,19,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1474,this.userName = (userName == null) ? null : userName.toLowerCase();,"this.userName=(userName == null) ? null : userName.toLowerCase();
",2,4,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1475,"if (type == null || type.toUpperCase().equals(""FLOAT"") || type.toUpperCase().equals(""DOUBLE"") || type.toUpperCase()","if (type == null || type.toUpperCase().equals(""FLOAT"") || type.toUpperCase().equals(""DOUBLE"") || type.toUpperCase().equals(""BIGINT"")) {
  try {
    return (new BigDecimal(value)).stripTrailingZeros().toPlainString();
  }
 catch (  NumberFormatException e) {
  }
}
",2,9,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1476,"serviceName != null && serviceName.toLowerCase().equals(""hbase"") ? serviceName.toLowerCase() : componentName.toLowerCase(),","metricsDefinitionSet.add(new MetricDefinition(startTime,endTime,recordTypeContext,recordTypeName,tagPairsPattern,metricName,serviceName != null && serviceName.toLowerCase().equals(""hbase"") ? serviceName.toLowerCase() : componentName.toLowerCase(),hostName,propertyKey,id,temporalInfo));
",2,3,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
1477,return super.sequenceName(entity).toUpperCase();,"return super.sequenceName(entity).toUpperCase();
",2,30,3,,"SimpleName(SuperMethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1478,"if ((docBase.toLowerCase().endsWith("".war"") || docBase.toLowerCase().endsWith("".jar"")||docBase.toLowerCase().endsWith("".zip"")) && !file.isDirectory() && unpackWARs) {","if ((docBase.toLowerCase().endsWith("".war"") || docBase.toLowerCase().endsWith("".jar"") || docBase.toLowerCase().endsWith("".zip"")) && !file.isDirectory() && unpackWARs) {
  URL war=new URL(""jar:"" + (new File(docBase)).toURI().toURL() + ""!/"");
  docBase=ExpandWar.expand(host,war,contextPath);
  file=new File(docBase);
  docBase=file.getCanonicalPath();
  if (context instanceof StandardContext) {
    ((StandardContext)context).setOriginalDocBase(origDocBase);
  }
}
 else {
  File docDir=new File(docBase);
  if (!docDir.exists()) {
    File warFile=new File(docBase + "".war"");
    if (warFile.exists()) {
      if (unpackWARs) {
        URL war=new URL(""jar:"" + warFile.toURI().toURL() + ""!/"");
        docBase=ExpandWar.expand(host,war,contextPath);
        file=new File(docBase);
        docBase=file.getCanonicalPath();
      }
 else {
        docBase=warFile.getCanonicalPath();
      }
    }
 else {
      warFile=new File(docBase + "".jar"");
      if (warFile.exists()) {
        if (unpackWARs) {
          URL war=new URL(""jar:"" + warFile.toURI().toURL() + ""!/"");
          docBase=ExpandWar.expand(host,war,contextPath);
          file=new File(docBase);
          docBase=file.getCanonicalPath();
        }
 else {
          docBase=warFile.getCanonicalPath();
        }
      }
 else {
        warFile=new File(docBase + "".zip"");
        if (warFile.exists()) {
          if (unpackWARs) {
            URL war=new URL(""jar:"" + warFile.toURI().toURL() + ""!/"");
            docBase=ExpandWar.expand(host,war,contextPath);
            file=new File(docBase);
            docBase=file.getCanonicalPath();
          }
 else {
            docBase=warFile.getCanonicalPath();
          }
        }
      }
    }
    if (context instanceof StandardContext) {
      ((StandardContext)context).setOriginalDocBase(origDocBase);
    }
  }
}
",2,3,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, IfStatement-expression, ),
"
1479,Boolean value = allowedValues.get(attNameAndVal[1].toLowerCase().trim());,"Boolean value=allowedValues.get(attNameAndVal[1].toLowerCase().trim());
",2,13,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1480,"Assert.assertEquals(colEntity.getAttribute(ATTRIBUTE_QUALIFIED_NAME), String.format(""%s.%s.%s@%s"", dbName.toLowerCase(), tableName.toLowerCase(), colName.toLowerCase(), CLUSTER_NAME));","Assert.assertEquals(colEntity.getAttribute(ATTRIBUTE_QUALIFIED_NAME),String.format(""%s.%s.%s@%s"",dbName.toLowerCase(),tableName.toLowerCase(),colName.toLowerCase(),CLUSTER_NAME));
",2,2,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1481,"if (numArgs >= 3 && args[0].toLowerCase().equals(""addfile"")) {","if (numArgs >= 3 && args[0].toLowerCase().equals(""addfile"")) {
  doAddFile(c,args[1],args[2]);
}
 else if (numArgs >= 3 && args[0].toLowerCase().equals(""removefile"")) {
  doRemoveFile(c,args[1],args[2]);
}
 else if (numArgs >= 1 && args[0].toLowerCase().equals(""list"")) {
  doList(c);
}
 else if (numArgs >= 1 && args[0].equalsIgnoreCase(""removeall"")) {
  doRemoveAll(c);
}
 else {
  System.err.println(""usage: ChukwaClient addfile <apptype> <filename> [-h hostname] [-p portnumber]"");
  System.err.println(""       ChukwaClient removefile adaptorID [-h hostname] [-p portnumber]"");
  System.err.println(""       ChukwaClient removefile <apptype> <filename> [-h hostname] [-p portnumber]"");
  System.err.println(""       ChukwaClient list [IP] [port]"");
  System.err.println(""       ChukwaClient removeAll [IP] [port]"");
}
",2,11,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1482,private static final String WARNING = MessageBundle.getMessages(CommonMessages.class),"private static final String WARNING=MessageBundle.getMessages(CommonMessages.class).strWarning().toUpperCase();
",2,2,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1483,"rb.cookie(new NewCookie(""name"", ""value"", uri.getBaseUri().getPath() + uri.getPath(), uri","rb.cookie(new NewCookie(""name"",""value"",uri.getBaseUri().getPath() + uri.getPath(),uri.getBaseUri().getHost().toLowerCase(),""comment"",10,false));
",2,3,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1484,"if (""1"".equals(s) || s.toLowerCase().equals(""true"")) {","if (""1"".equals(s) || s.toLowerCase().equals(""true"")) {
  returnValue=true;
}
 else if (!""0"".equals(s) && !s.toLowerCase().equals(""false"")) {
  throw new RuntimeException(""in valid string -"" + s + "" for boolean value"");
}
",2,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1485,"String ct1 = (contentType1 == null) ? """" : contentType1.trim().toLowerCase();","String ct1=(contentType1 == null) ? """" : contentType1.trim().toLowerCase();
",2,5,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1486,"String vectName = StringUtils.capitalize(type.name().substring(4, type.name().length()-1).toLowerCase());","String vectName=StringUtils.capitalize(type.name().substring(4,type.name().length() - 1).toLowerCase());
",2,9,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1487,assertTrue(p.getValue().toLowerCase().indexOf(s[0].toLowerCase() + File.pathSeparator + s[1].toLowerCase()) >= 0);,"assertTrue(p.getValue().toLowerCase().indexOf(s[0].toLowerCase() + File.pathSeparator + s[1].toLowerCase()) >= 0);
",2,3,13,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1488,"private static final Pattern PATTERN = Pattern.compile(""("" + MULTI + ""|"" + MULTI.toUpperCase() + "")"" + "":?"" + ""\\((.*)\\)$"");","private static final Pattern PATTERN=Pattern.compile(""("" + MULTI + ""|""+ MULTI.toUpperCase()+ "")""+ "":?""+ ""\\((.*)\\)$"");
",2,6,15,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1489,"displayHints==null ? null : (""""+displayHints).toLowerCase(),","return doSensorTestUntyped(displayHints == null ? null : ("""" + displayHints).toLowerCase(),raw == null ? null : ("""" + raw).toLowerCase(),acceptsType == null ? null : new String[]{acceptsType.toString()},expectedValue);
",2,2,6,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
1490,"headers.put(HttpHeaders.ACCEPT, contentType.withCharset("""").toString().toLowerCase());","headers.put(HttpHeaders.ACCEPT,contentType.withCharset("""").toString().toLowerCase());
",2,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1491,"final boolean isWindows = System.getProperty(""os.name"", ""unknown"").toLowerCase().startsWith(""windows"");","final boolean isWindows=System.getProperty(""os.name"",""unknown"").toLowerCase().startsWith(""windows"");
",2,17,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1492,"if(!elements_core[i].getValue().toLowerCase().endsWith(""derbynet.jar"")){","if (!elements_core[i].getValue().toLowerCase().endsWith(""derbynet.jar"")) {
  jarURL=new URL(pluginURL,elements_core[i].getValue());
  localURL=Platform.asLocalURL(jarURL);
  derbyCPEntry=JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(localURL.getPath()));
  derbyCPEntry.setClasspathProperty(IRuntimeClasspathEntry.USER_CLASSES);
  classpath.add(derbyCPEntry.getMemento());
}
",2,11,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1493,"def.defFileBasedDisk(diskFile, diskLabel, DiskDef.DiskBus.valueOf(bus.toUpperCase()), fmt);","def.defFileBasedDisk(diskFile,diskLabel,DiskDef.DiskBus.valueOf(bus.toUpperCase()),fmt);
",2,2,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1494,"return System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1;","return System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") != -1;
",2,4,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1495,"stmt.setString(1, getPlatform().isDelimitedIdentifierModeOn() ? tableName : tableName.toUpperCase());","stmt.setString(1,getPlatform().isDelimitedIdentifierModeOn() ? tableName : tableName.toUpperCase());
",2,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1496,return ((optionValue != null) && optionValue.toUpperCase().equals(ODBC_DRIVER_OPTION));,"return ((optionValue != null) && optionValue.toUpperCase().equals(ODBC_DRIVER_OPTION));
",2,2,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
1497,"cp = dm.getColumnPrivileges(null, schema.toUpperCase(), table.toUpperCase(), columns[i].toUpperCase());","cp=dm.getColumnPrivileges(null,schema.toUpperCase(),table.toUpperCase(),columns[i].toUpperCase());
",2,4,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1498,"value = map.get(methodName.substring(3, 4).toLowerCase() + methodName.substring(4));","value=map.get(methodName.substring(3,4).toLowerCase() + methodName.substring(4));
",2,2,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1499,EntityList.EntityFilterByFields.valueOf(tempKeyVal[0].toUpperCase());,"EntityList.EntityFilterByFields.valueOf(tempKeyVal[0].toUpperCase());
",2,2,5,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1500,"if (columns.contains(colName.toLowerCase()) || columns.contains(tables.get(j).toString().toLowerCase() + ""."" + colName.toLowerCase()))","if (columns.contains(colName.toLowerCase()) || columns.contains(tables.get(j).toString().toLowerCase() + ""."" + colName.toLowerCase())) continue;
 else {
  capture=false;
  break;
}
",2,6,14,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1501,"final String errorMessage = ""cannot.be.before."" + entityType.name().toLowerCase() + "".activation.date"";","final String errorMessage=""cannot.be.before."" + entityType.name().toLowerCase() + "".activation.date"";
",2,3,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1502,"journalEntryOne.setClerk(""Mr. "" + journalEntryOne.getClerk().toUpperCase().charAt(0) + journalEntryOne.getClerk().substring(1, 5));","journalEntryOne.setClerk(""Mr. "" + journalEntryOne.getClerk().toUpperCase().charAt(0) + journalEntryOne.getClerk().substring(1,5));
",2,2,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1503,"return getProtocol().toLowerCase() + "":","return getProtocol().toLowerCase() + ""://"" + connectHost+ (getPort() == getDefaultPort() ? """" : "":"" + getPort());
",2,2,9,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1504,"scheme = uri.getScheme() == null ? """" : uri.getScheme().toLowerCase();","scheme=uri.getScheme() == null ? """" : uri.getScheme().toLowerCase();
",2,3,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1505,"Path file2 = new Path(localDir, name.getMethodName().toLowerCase() + ""2"");","Path file2=new Path(localDir,name.getMethodName().toLowerCase() + ""2"");
",2,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1506,".append(""["" + AbsoluteResourceType.MEMORY.toString().toLowerCase() + ""=""","resourceString.append(""["" + AbsoluteResourceType.MEMORY.toString().toLowerCase() + ""=""+ resource.getMemorySize()+ "",""+ AbsoluteResourceType.VCORES.toString().toLowerCase()+ ""=""+ resource.getVirtualCores()+ ResourceUtils.getCustomResourcesStrings(resource)+ ""]"");
",2,2,6,,"SimpleName(),
StringLiteral(InfixExpression-leftOperand, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
"
1507,qop[i] = QualityOfProtection.valueOf(qop[i].toUpperCase()).getSaslQop();,"qop[i]=QualityOfProtection.valueOf(qop[i].toUpperCase()).getSaslQop();
",2,2,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1508,this.namespace = (namespace != null) ? namespace.toLowerCase() : null;,"this.namespace=(namespace != null) ? namespace.toLowerCase() : null;
",2,3,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1509,"txnHandler.compact(new CompactionRequest(""default"", Table.ACIDTBL.name().toLowerCase(), CompactionType.MAJOR));","txnHandler.compact(new CompactionRequest(""default"",Table.ACIDTBL.name().toLowerCase(),CompactionType.MAJOR));
",2,5,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1510,".collect(Collectors.toMap(e -> e.name().toLowerCase(), e -> e));","this.values=Arrays.stream(enumCls.getEnumConstants()).collect(Collectors.toMap(e -> e.name().toLowerCase(),e -> e));
",2,2,9,,"SimpleName(),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ),
SimpleName(LambdaExpression-body, MethodInvocation-arguments, ),
"
1511,": AggregationFunctionType.PERCENTILE.getName().toLowerCase() + ""("" + _expression + "", "" + _percentile + "")"";","return _version == 0 ? AggregationFunctionType.PERCENTILE.getName().toLowerCase() + (int)_percentile + ""(""+ _expression+ "")"" : AggregationFunctionType.PERCENTILE.getName().toLowerCase() + ""("" + _expression+ "", ""+ _percentile+ "")"";
",2,5,8,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
StringLiteral(InfixExpression-rightOperand, ),
SimpleName(InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
"
1512,"builder.put(prefix + ""."" + i + ""."" + keySuffix, checkNotNull(e.getKey().toString(), keySuffix.toLowerCase() + ""s["" + i + ""]""));","builder.put(prefix + ""."" + i+ "".""+ keySuffix,checkNotNull(e.getKey().toString(),keySuffix.toLowerCase() + ""s["" + i+ ""]""));
",2,2,16,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1513,"""https:","assertEquals(g.getScalingPolicies().get(0).getLinks().get(0).getHref().toString(),""https://"" + region.toLowerCase() + "".autoscale.api.rackspacecloud.com/v1.0/""+ api.getCurrentTenantId().get().getId()+ ""/groups/""+ g.getId()+ ""/policies/""+ g.getScalingPolicies().get(0).getId()+ ""/"");
",2,5,18,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
"
1514,"recordField -> (""`"" + (hiveFieldNames ? recordField.getFieldName().toLowerCase() : recordField.getFieldName()) + ""`:""","List<String> hiveFields=recordFields.stream().map(recordField -> (""`"" + (hiveFieldNames ? recordField.getFieldName().toLowerCase() : recordField.getFieldName()) + ""`:""+ getHiveTypeFromFieldType(recordField.getDataType(),hiveFieldNames))).collect(Collectors.toList());
",2,3,9,,"SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, LambdaExpression-body, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, LambdaExpression-body, ),
"
1515,"(domainPartition + KeyGenerator.PARTITION_SEPARATOR + KeyGenerator.KEYGENERATOR_SUFFIX).toUpperCase(),","params.add(new DynamicQuery.Parameter(""UPPER(t.entityKey)"",(domainPartition + KeyGenerator.PARTITION_SEPARATOR + KeyGenerator.KEYGENERATOR_SUFFIX).toUpperCase(),DynamicQuery.PREDICATE_EQUALS));
",2,2,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, ),
QualifiedName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
1516,"url = (url.toLowerCase().contains(""create=true"")) ? url : url + "";create=true"";","url=(url.toLowerCase().contains(""create=true"")) ? url : url + "";create=true"";
",2,3,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1517,"lowerRoot.put(((String) entry.getKey()).toLowerCase(), entry.getValue());","lowerRoot.put(((String)entry.getKey()).toLowerCase(),entry.getValue());
",2,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1518,"return ""Driver:"" + getDriver() + ""Database:"" + getDatabase().toLowerCase() + ""User:"" + getUser().toLowerCase() + ""Schema:"" + getSchema().toLowerCase();","return ""Driver:"" + getDriver() + ""Database:""+ getDatabase().toLowerCase()+ ""User:""+ getUser().toLowerCase()+ ""Schema:""+ getSchema().toLowerCase();
",2,2,11,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1519,replStr = Character.toLowerCase(replStr.charAt(0)) + replStr.substring(1).toUpperCase();,"replStr=Character.toLowerCase(replStr.charAt(0)) + replStr.substring(1).toUpperCase();
",2,2,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1520,if (s.toLowerCase().startsWith(queryText) && s.length() != queryText.length()) {,"if (s.toLowerCase().startsWith(queryText) && s.length() != queryText.length()) {
  SearchCompletionItem searchCompletionItem=new SearchCompletionItem(s);
  results.add(searchCompletionItem);
}
",2,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1521,String host = new URL(url.toString()).getHost().toLowerCase();,"String host=new URL(url.toString()).getHost().toLowerCase();
",2,3,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1522,"boolean isWin = System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0;","boolean isWin=System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0;
",2,2,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1523,"statement.setString(paramIndex++, ""%"" + historyQuery.getUserIdentity().toUpperCase() + ""%"");","statement.setString(paramIndex++,""%"" + historyQuery.getUserIdentity().toUpperCase() + ""%"");
",2,3,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1524,"if (entry.getItemParentID().toLowerCase().equals(parentid.toLowerCase()) || parentid.toLowerCase().equals("""")) {","if (entry.getItemParentID().toLowerCase().equals(parentid.toLowerCase()) || parentid.toLowerCase().equals("""")) {
  if (!linkedData.contains(entry)) {
    linkedData.add(entry);
    GazetteerSearchCache.put(placeNameQueryString,linkedData);
  }
}
",2,2,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1525,"List<String> venueToks = removeVenuePart(TextProcessor.fastTokenize(venue.toLowerCase(), false));","List<String> venueToks=removeVenuePart(TextProcessor.fastTokenize(venue.toLowerCase(),false));
",2,6,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1526,"String v1 = line1[attrIndex].toLowerCase().replace(""\"""", """").replace("",  "", "", "").replace("", "", "","");;","String v1=line1[attrIndex].toLowerCase().replace(""\"""","""").replace("",  "","", "").replace("", "","","");
",2,4,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1527,"return ""is"" + field.getName().substring( 0, 1 ).toUpperCase() + field.getName().substring( 1 );","return ""is"" + field.getName().substring(0,1).toUpperCase() + field.getName().substring(1);
",2,2,11,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1528,"d.add(new Field(FIELD_MEP, String.valueOf(exchange.getPattern()).toLowerCase(), Field.Store.YES, Field.Index.NOT_ANALYZED));","d.add(new Field(FIELD_MEP,String.valueOf(exchange.getPattern()).toLowerCase(),Field.Store.YES,Field.Index.NOT_ANALYZED));
",2,2,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1529,"final String clazz = action.getType().name().toLowerCase() + "".class"";","final String clazz=action.getType().name().toLowerCase() + "".class"";
",2,2,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1530,"assertEquals(Encryptor.getInstance().encode(""password123"", CipherAlgorithm.SHA1), value.toUpperCase());","assertEquals(Encryptor.getInstance().encode(""password123"",CipherAlgorithm.SHA1),value.toUpperCase());
",2,2,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1531,"assertThat(meta.getTables(null, manager.getCatalogStore().getSchema().getSchemaName().toUpperCase(),","assertThat(meta.getTables(null,manager.getCatalogStore().getSchema().getSchemaName().toUpperCase(),null,new String[]{""TABLE""}),allOf(hasItemInResultSet(""TESTTABLE1"",""TABLE_NAME""),hasItemInResultSet(""TESTTABLE2"",""TABLE_NAME"")));
",2,3,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1532,"header.put( line.substring(0,p).trim().toLowerCase(), line.substring(p+1).trim());","header.put(line.substring(0,p).trim().toLowerCase(),line.substring(p + 1).trim());
",2,3,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1533,parameterPart = contentType.substring(subTypeSeparator + 1).toLowerCase().trim();,"parameterPart=contentType.substring(subTypeSeparator + 1).toLowerCase().trim();
",3,17,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1534,"final String type = contentType.substring(0, subTypeSeparator).toLowerCase().trim();","final String type=contentType.substring(0,subTypeSeparator).toLowerCase().trim();
",3,357,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1535,return value != null && value.toLowerCase().equals(node2.getAttributes().get(NAME).toLowerCase());,"return value != null && value.toLowerCase().equals(node2.getAttributes().get(NAME).toLowerCase());
",3,35,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1536,addressSettings.setAddressFullMessagePolicy(addressFullMessagePolicy == null || addressFullMessagePolicy.isEmpty() ? AddressSettings.DEFAULT_ADDRESS_FULL_MESSAGE_POLICY : AddressFullMessagePolicy.valueOf(addressFullMessagePolicy.toUpperCase()));,"addressSettings.setAddressFullMessagePolicy(addressFullMessagePolicy == null || addressFullMessagePolicy.isEmpty() ? AddressSettings.DEFAULT_ADDRESS_FULL_MESSAGE_POLICY : AddressFullMessagePolicy.valueOf(addressFullMessagePolicy.toUpperCase()));
",3,6,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1537,"if (sw.getType().equals(StageWrapper.Type.RESTART) && sw.getText().toLowerCase().contains(""NameNode"".toLowerCase())) {","if (sw.getType().equals(StageWrapper.Type.RESTART) && sw.getText().toLowerCase().contains(""NameNode"".toLowerCase())) {
  for (  TaskWrapper tw : sw.getTasks()) {
    for (    String hostName : tw.getHosts()) {
      orderedNameNodes.add(hostName);
    }
  }
}
",3,21,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1538,"validHosts.add(InetAddress.getLocalHost().getHostName().toLowerCase() + "":"" + serverPort);","validHosts.add(InetAddress.getLocalHost().getHostName().toLowerCase() + "":"" + serverPort);
",3,9,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1539,if (jsonObj.get(keys.next()).toString().toLowerCase().contains(args[1].toLowerCase())) {,"if (jsonObj.get(keys.next()).toString().toLowerCase().contains(args[1].toLowerCase())) {
  jsonArray.put(jsonObj);
  break;
}
",3,6,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1540,"if(pool.getDriverName().toLowerCase().indexOf(""oracle"") > -1) target.setVendor(JDBCPool.VENDOR_ORACLE);","if (pool.getDriverName().toLowerCase().indexOf(""oracle"") > -1) target.setVendor(JDBCPool.VENDOR_ORACLE);
",3,45,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1541,switch (commandSplits[0].toLowerCase()) {,"switch (commandSplits[0].toLowerCase()) {
case ""gen"":
case ""generate"":
  String type=commandSplits[1];
switch (type.toLowerCase()) {
case ""seq"":
case ""sequence"":
  if (commandSplits.length < 5) {
    LOGGER.log(Level.ERROR,""generate sequence command is not formatted properly: "" + command);
    throw new Exception(""generate sequence command is not formatted properly: "" + command);
  }
int startPosition=Integer.parseInt(commandSplits[2]);
int endPosition=Integer.parseInt(commandSplits[3]);
String valuesSeparator=commandSplits[4];
substitute=IntStream.range(startPosition,endPosition).mapToObj(Integer::toString).collect(Collectors.joining(valuesSeparator));
break;
case ""and"":
if (commandSplits.length < 4) {
LOGGER.log(Level.ERROR,""generate \""and\"" command is not formatted properly: "" + command);
throw new Exception(""generate \""and\"" command is not formatted properly: "" + command);
}
int count=Integer.parseInt(commandSplits[2]);
String valueSeparator=commandSplits[3];
StringBuilder builder=new StringBuilder();
for (int i=0; i < count - 1; i++) {
builder.append(""AND 1 = 1"").append(valueSeparator);
}
builder.append(""AND 1 = 1"");
substitute=builder.toString();
break;
default :
LOGGER.log(Level.ERROR,""gen command - unknown type: "" + type);
throw new Exception(""gen command - unknown type: "" + type);
}
break;
default :
LOGGER.log(Level.ERROR,""Unknown macro command"");
throw new Exception(""Unknown macro command"");
}
",3,3,3,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, SwitchStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, SwitchStatement-expression, ),
"
1542,return getAuditExcludedOperations(config).contains(httpMethod.toLowerCase() + SEPARATOR + httpUrl.toLowerCase());,"return getAuditExcludedOperations(config).contains(httpMethod.toLowerCase() + SEPARATOR + httpUrl.toLowerCase());
",3,4,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1543,"if (cookie.toLowerCase().startsWith(AuthenticatedURL.AUTH_COOKIE.toLowerCase()) && cookie.contains(""u="")) {","if (cookie.toLowerCase().startsWith(AuthenticatedURL.AUTH_COOKIE.toLowerCase()) && cookie.contains(""u="")) {
  String[] split=cookie.split("";"");
  if (split != null) {
    for (    String s : split) {
      if (!StringUtils.isEmpty(s) && s.toLowerCase().startsWith(AuthenticatedURL.AUTH_COOKIE.toLowerCase())) {
        int ustr=s.indexOf(""u="");
        if (ustr != -1) {
          int andStr=s.indexOf(""&"",ustr);
          if (andStr != -1) {
            try {
              userName=s.substring(ustr + 2,andStr);
              break;
            }
 catch (            Exception e) {
              userName=null;
            }
          }
        }
      }
    }
  }
}
",3,6,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1544,if (!StringUtils.isEmpty(s) && s.toLowerCase().startsWith(AuthenticatedURL.AUTH_COOKIE.toLowerCase())) {,"if (!StringUtils.isEmpty(s) && s.toLowerCase().startsWith(AuthenticatedURL.AUTH_COOKIE.toLowerCase())) {
  int ustr=s.indexOf(""u="");
  if (ustr != -1) {
    int andStr=s.indexOf(""&"",ustr);
    if (andStr != -1) {
      try {
        userName=s.substring(ustr + 2,andStr);
        break;
      }
 catch (      Exception e) {
        userName=null;
      }
    }
  }
}
",3,4,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1545,if (!(a1.getID().toLowerCase().equals(a2.getID().toLowerCase())),"if (!(a1.getID().toLowerCase().equals(a2.getID().toLowerCase())) || a1.size() != a2.size()) {
  return false;
}
",3,16,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1546,"collect.put(name, ((String)row.get(column)).toUpperCase());","collect.put(name,((String)row.get(column)).toUpperCase());
",3,15,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1547,"return new StringBuilder( prefix.toUpperCase() ).append( ""_"" ).append( propertyDescriptor.getPropertyName().toUpperCase() ).append( ""_LIGHTNING"" ).toString();","return new StringBuilder(prefix.toUpperCase()).append(""_"").append(propertyDescriptor.getPropertyName().toUpperCase()).append(""_LIGHTNING"").toString();
",3,16,12,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
1548,source.setPageType(source.getPageType() == null ? null : source.getPageType().toUpperCase());,"source.setPageType(source.getPageType() == null ? null : source.getPageType().toUpperCase());
",3,5,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1549,"assertLastThrowableContainsIgnoreCase(""expected class "" + TestingCustomType.class.getName().toLowerCase(), ""but found"", ""map"");","assertLastThrowableContainsIgnoreCase(""expected class "" + TestingCustomType.class.getName().toLowerCase(),""but found"",""map"");
",3,4,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1550,"pattern = Pattern.compile(""(""+prefix+""|""+prefix.toLowerCase()+""|""+prefix.toUpperCase()+"")"" + ""(:)?"" + ""(\\((.*)\\))?$"");","pattern=Pattern.compile(""("" + prefix + ""|""+ prefix.toLowerCase()+ ""|""+ prefix.toUpperCase()+ "")""+ ""(:)?""+ ""(\\((.*)\\))?$"");
",3,7,14,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1551,"return img.getName().toLowerCase().matches(""(.*[^a-z])?""+pattern.toLowerCase()+""([^a-z].*)?"");","return img.getName().toLowerCase().matches(""(.*[^a-z])?"" + pattern.toLowerCase() + ""([^a-z].*)?"");
",3,20,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1552,private static final String DATABASE_NAME = RandomStringUtils.randomAlphabetic(10).toLowerCase();,"private static final String DATABASE_NAME=RandomStringUtils.randomAlphabetic(10).toLowerCase();
",3,5,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1553,"assertEquals(""phno"", Kfields.get(5).schema.getFields().get(0).schema.getFields().get(0).alias.toLowerCase());","assertEquals(""phno"",Kfields.get(5).schema.getFields().get(0).schema.getFields().get(0).alias.toLowerCase());
",3,24,15,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1554,this.vmType = vmType == null ? null : vmType.toString().toLowerCase();,"this.vmType=vmType == null ? null : vmType.toString().toLowerCase();
",3,6,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1555,if ((this.url == null) ? (other.url != null) : !this.url.toLowerCase().equals(other.url.toLowerCase())) {,"if ((this.url == null) ? (other.url != null) : !this.url.toLowerCase().equals(other.url.toLowerCase())) {
  return false;
}
",3,7,11,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-thenExpression, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-thenExpression, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ConditionalExpression-elseExpression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ConditionalExpression-elseExpression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ConditionalExpression-elseExpression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ConditionalExpression-elseExpression, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ConditionalExpression-elseExpression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ConditionalExpression-elseExpression, IfStatement-expression, ),
"
1556,"if( StringUtils.hasText( command.getEmail() ) && !Pattern.matches( SIMPLE_EMAIL_REGEX, command.getEmail().toUpperCase() ) ) {","if (StringUtils.hasText(command.getEmail()) && !Pattern.matches(SIMPLE_EMAIL_REGEX,command.getEmail().toUpperCase())) {
  errors.rejectValue(""email"",""error.email.invalid"",""Please enter a valid email address."");
}
",3,5,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1557,"for (String word : input.toLowerCase().split(""\\W+"")) {","for (String word : input.toLowerCase().split(""\\W+"")) {
  if (!word.isEmpty()) {
    String firstChar=word.substring(0,1);
    if (last != null) {
      Map<String,Long> cc=ImmutableMap.of(firstChar,1L);
      emitter.emit(Pair.of(last,cc));
    }
    last=firstChar;
  }
}
",3,3,6,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
StringLiteral(MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
1558,"if ( dn.toLowerCase().contains( getRootDn( contextId, GlobalIds.PSU_ROOT ).toLowerCase() ) )","if (dn.toLowerCase().contains(getRootDn(contextId,GlobalIds.PSU_ROOT).toLowerCase())) {
  entity.setType(OrgUnit.Type.PERM);
  entity.setChildren(PsoUtil.getInstance().getChildren(entity.getName().toUpperCase(),contextId));
}
 else if (dn.toLowerCase().contains(getRootDn(contextId,GlobalIds.OSU_ROOT).toLowerCase())) {
  entity.setType(OrgUnit.Type.USER);
  entity.setChildren(UsoUtil.getInstance().getChildren(entity.getName().toUpperCase(),contextId));
}
",3,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1559,if (!Arrays.asList(validAttNames).contains(name.toLowerCase())) {,"if (!Arrays.asList(validAttNames).contains(name.toLowerCase())) {
  throw new IllegalArgumentException(String.format(""Unknown configuration attribute name %s. Valid attribute names are: %s ."",name,SystemAdmin.join(validAttNames)));
}
",3,3,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1560,"return (contentType != null && contentType.toLowerCase().startsWith(""multipart/""));","return (contentType != null && contentType.toLowerCase().startsWith(""multipart/""));
",3,3,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
1561,return (this.type.toLowerCase() + this.subtype.toLowerCase()).hashCode() + this.parameters.hashCode();,"return (this.type.toLowerCase() + this.subtype.toLowerCase()).hashCode() + this.parameters.hashCode();
",3,3,10,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1562,"System.out.print(rwop.name().toUpperCase() + "" "" + fn + "": "");","System.out.print(rwop.name().toUpperCase() + "" "" + fn+ "": "");
",3,3,8,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1563,name += new String(new char[] {part.charAt(0)}).toUpperCase() +,"name+=new String(new char[]{part.charAt(0)}).toUpperCase() + part.substring(1).toLowerCase();
",3,3,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1564,currentColor = Colors.valueOf(colorValueAttr.toUpperCase()).color;,"currentColor=Colors.valueOf(colorValueAttr.toUpperCase()).color;
",3,3,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, FieldAccess-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, FieldAccess-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1565,"private static final String tableName1 = (TestHiveAuthorizerShowFilters.class.getSimpleName() + ""table1"")","private static final String tableName1=(TestHiveAuthorizerShowFilters.class.getSimpleName() + ""table1"").toLowerCase();
",3,3,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1566,&& (fieldName.trim().toUpperCase().equals(SORT_ORDER_TYPE.ASC.name()) || fieldName.trim().toUpperCase(),"if (i != 1 && (i == arguments.length - 1) && (fieldName.trim().toUpperCase().equals(SORT_ORDER_TYPE.ASC.name()) || fieldName.trim().toUpperCase().equals(SORT_ORDER_TYPE.DESC.name()))) {
  sortOrder=SORT_ORDER_TYPE.valueOf(fieldName.trim().toUpperCase());
  noOfInputFields-=1;
  continue;
}
",3,4,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
1567,HelixMessageSubTypes.APPLICATION_MASTER_SHUTDOWN.toString().toLowerCase() + UUID.randomUUID().toString());,"final Message shutdownRequest=new Message(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,HelixMessageSubTypes.APPLICATION_MASTER_SHUTDOWN.toString().toLowerCase() + UUID.randomUUID().toString());
",3,3,6,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
"
1568,"String virtualNetworkName = String.format(""vn-%s-%s"", this.getClass().getSimpleName().toLowerCase(), System.getProperty(""user.name""));","String virtualNetworkName=String.format(""vn-%s-%s"",this.getClass().getSimpleName().toLowerCase(),System.getProperty(""user.name""));
",3,4,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1569,"Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator().toUpperCase(), ""DISTINCT"");","Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator().toUpperCase(),""DISTINCT"");
",3,8,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1570,"return Table.HorizontalAlignment.valueOf(((String) getAttribute(""halign"", ""left"")).toUpperCase());","return Table.HorizontalAlignment.valueOf(((String)getAttribute(""halign"",""left"")).toUpperCase());
",3,3,7,,"QualifiedName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1571,"int indexOfUserBaseDN = userDNNamespace.toLowerCase().indexOf("","" + options.getUserBaseDn().toLowerCase());","int indexOfUserBaseDN=userDNNamespace.toLowerCase().indexOf("","" + options.getUserBaseDn().toLowerCase());
",3,3,9,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1572,"if (""gz"".equalsIgnoreCase(Files.getFileExtension(filename.toLowerCase()))) {","if (""gz"".equalsIgnoreCase(Files.getFileExtension(filename.toLowerCase()))) {
  compressedInputStream=new GZIPInputStream(is);
}
 else if (""zip"".equalsIgnoreCase(Files.getFileExtension(filename.toLowerCase()))) {
  compressedInputStream=new ZipInputStream(is);
}
 else {
  compressedInputStream=is;
}
",3,3,6,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
1573,"new Object[] { MD5_FULL, MD5_PREFIX.toUpperCase() + MD5 },","return Arrays.asList(new Object[]{MD5_FULL,MD5_FULL},new Object[]{MD5_FULL,MD5_FULL.toUpperCase()},new Object[]{MD5_FULL,MD5_FULL.toLowerCase()},new Object[]{MD5_FULL,MD5_PREFIX.toUpperCase() + MD5},new Object[]{MD5_FULL,MD5_PREFIX.toLowerCase() + MD5},new Object[]{MD5_FULL,MD5.toLowerCase()},new Object[]{MD5_FULL,MD5.toUpperCase()},new Object[]{SHA1_FULL,SHA1_FULL},new Object[]{SHA1_FULL,SHA1_PREFIX.toUpperCase() + SHA1},new Object[]{SHA1_FULL,SHA1_PREFIX.toLowerCase() + SHA1});
",3,3,6,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
1574,String identifier = SQLKeywords.SQL99_RESERVED[i].toUpperCase();,"String identifier=SQLKeywords.SQL99_RESERVED[i].toUpperCase();
",3,3,5,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1575,"if (_str.toLowerCase().equals(actionName.toLowerCase()) || _str.toLowerCase().equals(actionName.toLowerCase() + "" (alternative shortcut)"")) {","if (_str.toLowerCase().equals(actionName.toLowerCase()) || _str.toLowerCase().equals(actionName.toLowerCase() + "" (alternative shortcut)"")) {
  _scStr=tm.getValueAt(i,1).toString().toLowerCase();
  lstr.add(_scStr);
  System.out.println(""[TEST_DEBUG]  -> found action \"""" + _str + ""\"" with shortcut ""+ _scStr);
}
",3,5,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1576,"if (_str.toLowerCase().startsWith(actionName.toLowerCase()) && tm.getValueAt(i, 1).toString().toLowerCase().equals(shortcutStr.toLowerCase())) {","if (_str.toLowerCase().startsWith(actionName.toLowerCase()) && tm.getValueAt(i,1).toString().toLowerCase().equals(shortcutStr.toLowerCase())) {
  System.out.println(""[TEST_DEBUG]  Action "" + actionName + ""was found"");
  JListOperator jli=clickShortcutEllipsisButton(tab,i);
  jli.clickOnItem(""Clear"");
  sleep(100);
  System.out.println(""[TEST_DEBUG] ### Unassigning alternative shortcut for "" + actionName + "" - OK"");
  break;
}
",3,3,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1577,"private static final String[] LIST = {HG.toLowerCase(),CVS.toLowerCase(),SVN.toLowerCase(),GIT.toLowerCase()};","private static final String[] LIST={HG.toLowerCase(),CVS.toLowerCase(),SVN.toLowerCase(),GIT.toLowerCase()};
",3,3,14,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1578,"return file.isDirectory() || file.getName().toLowerCase().endsWith("".gif"") || file.getName().toLowerCase().endsWith("".jpg"");","return file.isDirectory() || file.getName().toLowerCase().endsWith("".gif"") || file.getName().toLowerCase().endsWith("".jpg"");
",3,3,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
1579,if (typedPrefix.length() == 0 || entity.getClass2().toLowerCase().startsWith(typedPrefix.toLowerCase()) || entity.getName().toLowerCase().startsWith(typedPrefix.toLowerCase())) {,"if (typedPrefix.length() == 0 || entity.getClass2().toLowerCase().startsWith(typedPrefix.toLowerCase()) || entity.getName().toLowerCase().startsWith(typedPrefix.toLowerCase())) {
  JPACompletionItem item=JPACompletionItem.createAttribValueItem(substitutionOffset,entity.getClass2());
  results.add(item);
}
",3,3,15,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1580,return (Arrays.stream(values()).map(ca -> ca.getType().toLowerCase()).collect(Collectors.toList()).contains(type.toLowerCase()));,"return (Arrays.stream(values()).map(ca -> ca.getType().toLowerCase()).collect(Collectors.toList()).contains(type.toLowerCase()));
",3,3,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
1581,"(KeystoreType.isValidKeystoreType(keystoreType) ? KeystoreType.valueOf(keystoreType.toUpperCase()) : null),","this(keystorePath,keystorePassword,keyPassword,(KeystoreType.isValidKeystoreType(keystoreType) ? KeystoreType.valueOf(keystoreType.toUpperCase()) : null),truststorePath,truststorePassword,(KeystoreType.isValidKeystoreType(truststoreType) ? KeystoreType.valueOf(truststoreType.toUpperCase()) : null),TLS_PROTOCOL_VERSION);
",3,3,8,,"SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ),
"
1582,if (key.toLowerCase().startsWith(ATTRIBUTE_PREFIX.toLowerCase()) && !key.toLowerCase().endsWith(ATTRIBUTE_TYPE_SUFFIX.toLowerCase())) {,"if (key.toLowerCase().startsWith(ATTRIBUTE_PREFIX.toLowerCase()) && !key.toLowerCase().endsWith(ATTRIBUTE_TYPE_SUFFIX.toLowerCase())) {
  final String jmsPropName=key.substring(ATTRIBUTE_PREFIX.length());
  final String type=attributes.get(key + ATTRIBUTE_TYPE_SUFFIX);
  try {
    if (type == null || type.equalsIgnoreCase(PROP_TYPE_STRING)) {
      message.setStringProperty(jmsPropName,value);
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_INTEGER)) {
      message.setIntProperty(jmsPropName,Integer.parseInt(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_BOOLEAN)) {
      message.setBooleanProperty(jmsPropName,Boolean.parseBoolean(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_SHORT)) {
      message.setShortProperty(jmsPropName,Short.parseShort(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_LONG)) {
      message.setLongProperty(jmsPropName,Long.parseLong(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_BYTE)) {
      message.setByteProperty(jmsPropName,Byte.parseByte(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_DOUBLE)) {
      message.setDoubleProperty(jmsPropName,Double.parseDouble(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_FLOAT)) {
      message.setFloatProperty(jmsPropName,Float.parseFloat(value));
    }
 else     if (type.equalsIgnoreCase(PROP_TYPE_OBJECT)) {
      message.setObjectProperty(jmsPropName,value);
    }
 else {
      logger.warn(""Attribute key '{}' for {} has value '{}', but expected one of: integer, string, object, byte, double, float, long, short, boolean; not adding this property"",new Object[]{key,flowFile,value});
    }
  }
 catch (  NumberFormatException e) {
    logger.warn(""Attribute key '{}' for {} has value '{}', but attribute key '{}' has value '{}'. Not adding this JMS property"",new Object[]{key,flowFile,value,key + ATTRIBUTE_TYPE_SUFFIX,PROP_TYPE_INTEGER});
  }
}
",3,3,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1583,"if (getPartContentType(sidx) != null && getPartContentType(sidx).toLowerCase().startsWith(""text"")) {","if (getPartContentType(sidx) != null && getPartContentType(sidx).toLowerCase().startsWith(""text"")) {
  if (getPartDisposition(sidx) == null || getPartDisposition(sidx).equals(Part.INLINE)) {
    body.append(getPartText(sidx)).append(""\n"");
  }
}
",3,3,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1584,if (conn.getMetaData().getDriverName().toLowerCase().contains(DBType.HSQL.name().toLowerCase())) {,"if (conn.getMetaData().getDriverName().toLowerCase().contains(DBType.HSQL.name().toLowerCase())) {
  return true;
}
",3,5,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1585,"final String fullPrefix = serviceType.toUpperCase() + ""."" + serviceId + ""."";","final String fullPrefix=serviceType.toUpperCase() + ""."" + serviceId+ ""."";
",3,3,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1586,"assertTrue(clause + "" is not present in "" + last, last.toUpperCase().indexOf(clause) != -1);","assertTrue(clause + "" is not present in "" + last,last.toUpperCase().indexOf(clause) != -1);
",3,3,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1587,"this.service.getMimeType((""file."" + TXT).toUpperCase()));","assertEquals(TEXT_PLAIN,this.service.getMimeType((""file."" + TXT).toUpperCase()));
",3,3,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
1588,"assertEquals(TEXT_PLAIN, this.service.getMimeType((TXT).toUpperCase()));","assertEquals(TEXT_PLAIN,this.service.getMimeType((TXT).toUpperCase()));
",3,3,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1589,assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));,"assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));
",3,3,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1590,"query += name.toLowerCase() + ""="" + ((String[])value)[0].toLowerCase();","query+=name.toLowerCase() + ""="" + ((String[])value)[0].toLowerCase();
",3,7,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, ParenthesizedExpression-expression, ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, ParenthesizedExpression-expression, ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, ArrayAccess-array, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1591,"if( (""CORE"".equals(feature.toUpperCase()) || ""XML"".equals(feature.toUpperCase()))","if ((""CORE"".equals(feature.toUpperCase()) || ""XML"".equals(feature.toUpperCase())) && (""1.0"".equals(version) || ""2.0"".equals(version))) return true;
",3,3,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1592,"filePrefixName = m_clusterName + ""("" + Resource.InternalType.Cluster.toString().toUpperCase()+"")"";","filePrefixName=m_clusterName + ""("" + Resource.InternalType.Cluster.toString().toUpperCase()+ "")"";
",4,4,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1593,"for (final File file : Objects.requireNonNull(libJava11Dir.listFiles((dir, filename) -> filename.toLowerCase().endsWith("".jar"")))) {","for (final File file : Objects.requireNonNull(libJava11Dir.listFiles((dir,filename) -> filename.toLowerCase().endsWith("".jar"")))) {
  cpFiles.add(file.getAbsolutePath());
}
",4,6,13,,"Modifier(SingleVariableDeclaration-modifiers, EnhancedForStatement-parameter, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
1594,"return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());","return name.substring(0,1).toLowerCase() + name.substring(1,name.length());
",4,6,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1595,"message.put(""adapter."" + adapter.getClass().getSimpleName().toLowerCase() + "".begin.ts"", """" + System.currentTimeMillis());","message.put(""adapter."" + adapter.getClass().getSimpleName().toLowerCase() + "".begin.ts"","""" + System.currentTimeMillis());
",4,6,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1596,String extension = result.substring(result.lastIndexOf('.')+1).toUpperCase();,"String extension=result.substring(result.lastIndexOf('.') + 1).toUpperCase();
",4,9,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1597,".transform().body(String.class, b -> b.toUpperCase());","from(""platform-http:/post"").routeId(""post"").transform().body(String.class,b -> b.toUpperCase());
",4,4,6,,"SimpleName(),
SimpleName(),
SimpleName(SimpleType-name, TypeLiteral-type, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
"
1598,if(!caseSensitive) line = line.toLowerCase();,"if (!caseSensitive) line=line.toLowerCase();
",4,4,4,,"SimpleName(PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1599,"throw new NoteNotFoundException(noteId, resourceId, noteType.name().toLowerCase(), e);","throw new NoteNotFoundException(noteId,resourceId,noteType.name().toLowerCase(),e);
",4,4,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
1600,final Sort.Direction direction = sortDirection != null ? Sort.Direction.valueOf(sortDirection.toUpperCase()) : Sort.Direction.ASC;,"final Sort.Direction direction=sortDirection != null ? Sort.Direction.valueOf(sortDirection.toUpperCase()) : Sort.Direction.ASC;
",4,4,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1601,"assertTrue(sql.get(0).toUpperCase().indexOf("" GROUP BY "") != -1);","assertTrue(sql.get(0).toUpperCase().indexOf("" GROUP BY "") != -1);
",4,5,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1602,"if (values[i].trim().toLowerCase().equals(""`default`"")) {","if (values[i].trim().toLowerCase().equals(""`default`"")) {
  replacedValues[i]=MapUtils.getString(colNameToDefaultConstraint,columnNames[i],""null"");
}
 else {
  replacedValues[i]=values[i];
}
",4,4,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
1603,"Assert.assertTrue(new File(newWarehouseDir, ACIDTBL.toString().toLowerCase()).exists());","Assert.assertTrue(new File(newWarehouseDir,ACIDTBL.toString().toLowerCase()).exists());
",4,4,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1604,return String.valueOf(name.charAt(0)).toUpperCase() + name.substring(1);,"return String.valueOf(name.charAt(0)).toUpperCase() + name.substring(1);
",4,4,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1605,"res.append(NbBundle.getMessage(PostMessageDisplayer.class, ""FAILED"", actionName.toUpperCase()));","res.append(NbBundle.getMessage(PostMessageDisplayer.class,""FAILED"",actionName.toUpperCase()));
",4,5,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1606,"indexDocument.addPair(PHPIndexer.FIELD_SUPER_CLASS, String.format(""%s;%s;%s"", name.toLowerCase(), name, namespaceName), true, true);","indexDocument.addPair(PHPIndexer.FIELD_SUPER_CLASS,String.format(""%s;%s;%s"",name.toLowerCase(),name,namespaceName),true,true);
",4,4,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1607,"getLogger().debug(""Using default \'"" + property + ""="" + anEnum.name().toLowerCase() + ""\'.  Possible values are: "" + possibleValues(anEnum));","getLogger().debug(""Using default \'"" + property + ""=""+ anEnum.name().toLowerCase()+ ""\'.  Possible values are: ""+ possibleValues(anEnum));
",4,4,11,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1608,"Member member = FooBar.class.getMethod(""get"" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1));","Member member=FooBar.class.getMethod(""get"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1));
",4,4,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1609,"this.maxAmount = (String)canonicalize(maxAmount.toUpperCase(), true);","this.maxAmount=(String)canonicalize(maxAmount.toUpperCase(),true);
",4,4,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1610,"if (cardinality != null && ""N"".equals(cardinality.toUpperCase())) {","if (cardinality != null && ""N"".equals(cardinality.toUpperCase())) {
  return """" + Integer.MAX_VALUE;
}
 else {
  return cardinality;
}
",5,41,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1611,"String type = (""ow_"" + name).toUpperCase() + ""_TYPE"";","String type=(""ow_"" + name).toUpperCase() + ""_TYPE"";
",5,18,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1612,"if (deviceBusName != null && (deviceBusName.toLowerCase().contains(""scsi"") || deviceBusName.toLowerCase().contains(""lsi""))) {","if (deviceBusName != null && (deviceBusName.toLowerCase().contains(""scsi"") || deviceBusName.toLowerCase().contains(""lsi""))) {
  resizingSupported=true;
}
",5,11,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1613,"params.put(Config.XenServerMaxNics.toString().toLowerCase(), _configDao.getValue(Config.XenServerMaxNics.toString()));","params.put(Config.XenServerMaxNics.toString().toLowerCase(),_configDao.getValue(Config.XenServerMaxNics.toString()));
",5,43,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1614,if (Strings.isBlank(s) || (Strings.isNonBlank(provider) && !s.toLowerCase().contains(provider.toLowerCase()))),"if (Strings.isBlank(s) || (Strings.isNonBlank(provider) && !s.toLowerCase().contains(provider.toLowerCase()))) s2+="" "" + provider;
",5,10,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1615,"columnNameKeywordMap.put(ChainsawConstants.ID_COL_NAME.toUpperCase(), LoggingEventFieldResolver.PROP_FIELD + Constants.LOG4J_ID_KEY);","columnNameKeywordMap.put(ChainsawConstants.ID_COL_NAME.toUpperCase(),LoggingEventFieldResolver.PROP_FIELD + Constants.LOG4J_ID_KEY);
",5,5,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1616,"return name.substring(0, offset1).toLowerCase() + name.substring(offset1);","return name.substring(0,offset1).toLowerCase() + name.substring(offset1);
",5,5,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1617,"final String loweredParamName = policyText.substring( paramNameIndices[ 0 ], paramNameIndices[ 1 ] ).toLowerCase();","final String loweredParamName=policyText.substring(paramNameIndices[0],paramNameIndices[1]).toLowerCase();
",5,7,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1618,"(TableExtended.MMTBLPART).toString().toLowerCase() + pStrings[i]), FileUtils.STAGING_DIR_PATH_FILTER);","status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + ""/"" + (TableExtended.MMTBLPART).toString().toLowerCase()+ pStrings[i]),FileUtils.STAGING_DIR_PATH_FILTER);
",5,11,6,,"QualifiedName(ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(ArrayAccess-array, ),
SimpleName(ArrayAccess-index, ),
QualifiedName(),
"
1619,"fs.listStatus(new Path(getWarehouseDir(), Table.ACIDTBLPART.toString().toLowerCase() + ""/p=a""), AcidUtils.baseFileFilter);","FileStatus[] stat=fs.listStatus(new Path(getWarehouseDir(),Table.ACIDTBLPART.toString().toLowerCase() + ""/p=a""),AcidUtils.baseFileFilter);
",5,7,9,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, ),
"
1620,"return _version == 0 ? AggregationFunctionType.PERCENTILE.getName().toLowerCase() + (int) _percentile + ""(""","return _version == 0 ? AggregationFunctionType.PERCENTILE.getName().toLowerCase() + (int)_percentile + ""(""+ _expression+ "")"" : AggregationFunctionType.PERCENTILE.getName().toLowerCase() + ""("" + _expression+ "", ""+ _percentile+ "")"";
",5,5,8,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
"
1621,"nicName = String.format(""nic-%s-%s"", this.getClass().getSimpleName().toLowerCase(), System.getProperty(""user.name""));","nicName=String.format(""nic-%s-%s"",this.getClass().getSimpleName().toLowerCase(),System.getProperty(""user.name""));
",5,5,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1622,"getters.put((tmp.substring(3,4).toLowerCase() + (tmp.length()>4 ? tmp.substring(4):"""")).toUpperCase(), method);","getters.put((tmp.substring(3,4).toLowerCase() + (tmp.length() > 4 ? tmp.substring(4) : """")).toUpperCase(),method);
",5,6,16,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1623,"if (locale!=null) setDisplayNameXmlLang(size, locale.toLowerCase());","if (locale != null) setDisplayNameXmlLang(size,locale.toLowerCase());
",5,5,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1624,"final int[] expectedFinds = {docText.toLowerCase().indexOf(findWhat), docText.toLowerCase().indexOf(findWhat) + findWhat.length()};","final int[] expectedFinds={docText.toLowerCase().indexOf(findWhat),docText.toLowerCase().indexOf(findWhat) + findWhat.length()};
",5,5,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1625,return this.displayName.toLowerCase().compareTo(o.displayName.toLowerCase());,"return this.displayName.toLowerCase().compareTo(o.displayName.toLowerCase());
",5,5,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
1626,return prefix.length() == 0 ? true : theString.toLowerCase().startsWith(prefix.toLowerCase());,"return prefix.length() == 0 ? true : theString.toLowerCase().startsWith(prefix.toLowerCase());
",5,5,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
BooleanLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1627,if (VisibilityQuery.getDefault().isVisible(current) && current.getNameExt().toLowerCase().startsWith(filePrefix.toLowerCase()) && filter.accept(current)) {,"if (VisibilityQuery.getDefault().isVisible(current) && current.getNameExt().toLowerCase().startsWith(filePrefix.toLowerCase()) && filter.accept(current)) {
  result.add(new FSCompletionItem(current,pathPrefix != null ? pathPrefix + ""/"" : ""./"",anchor));
}
",5,5,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
1628,"value = map.get(key.substring(0, key.length() - 3)).toLowerCase();","value=map.get(key.substring(0,key.length() - 3)).toLowerCase();
",5,5,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1629,": new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());","UserWorkflowResult<String> updated=statusR.isOnSyncope() ? uwfAdapter.activate(statusR.getKey(),statusR.getToken(),updater,context) : new UserWorkflowResult<>(statusR.getKey(),null,null,statusR.getType().name().toLowerCase());
",5,5,9,,"SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
"
1630,"""in_Y="" + input(""Y""), ""rP="" + Boolean.toString(rowPartitioned).toUpperCase(), ""out="" + output(""Z"")};","programArgs=new String[]{""-stats"",""-nvargs"",""in_X1="" + TestUtils.federatedAddress(port1,input(""X1"")),""in_X2="" + TestUtils.federatedAddress(port2,input(""X2"")),""rows="" + rows,""cols="" + cols,""in_Y="" + input(""Y""),""rP="" + Boolean.toString(rowPartitioned).toUpperCase(),""out="" + output(""Z"")};
",5,6,11,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ),
"
1631,"h.write(""#ifndef __"" + mName.toUpperCase().replace('.', '_') + ""__\n"");","h.write(""#ifndef __"" + mName.toUpperCase().replace('.','_') + ""__\n"");
",5,5,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1632,return (medium != null) ? MediaConstants.Medium.valueOf(medium.toUpperCase()) : null;,"return (medium != null) ? MediaConstants.Medium.valueOf(medium.toUpperCase()) : null;
",6,97,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
1633,"TimeUnit rateUnit = TimeUnit.valueOf(config.getString(""rateUnit"", ""seconds"").toUpperCase());","TimeUnit rateUnit=TimeUnit.valueOf(config.getString(""rateUnit"",""seconds"").toUpperCase());
",6,9,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1634,while (listOfNames.contains(cName.toLowerCase())) {,"while (listOfNames.contains(cName.toLowerCase())) {
  if (!listOfNames.contains((cName + ""E"").toLowerCase())) {
    cName=cName + ""E"";
  }
 else {
    cName=cName + count++;
  }
  cName=cName + CStructWriter.count++;
}
",6,6,4,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, WhileStatement-expression, ),
"
1635,"assertEquals(fromString(""A""), ((BinaryStringData) row.getString(0)).toUpperCase());","assertEquals(fromString(""A""),((BinaryStringData)row.getString(0)).toUpperCase());
",6,6,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1636,"org.junit.Assume.assumeFalse(super.fixture.toString().toLowerCase().contains(""rdb""));","org.junit.Assume.assumeFalse(super.fixture.toString().toLowerCase().contains(""rdb""));
",6,6,7,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SuperFieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1637,"Assert.assertTrue(result.indexOf(""-""+Strings.maxlen(app.getId(), 4).toLowerCase()) >= 0);","Assert.assertTrue(result.indexOf(""-"" + Strings.maxlen(app.getId(),4).toLowerCase()) >= 0);
",7,11,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1638,"final String extension = StringUtils.substringAfterLast(name, ""."").toLowerCase();","final String extension=StringUtils.substringAfterLast(name,""."").toLowerCase();
",7,21,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1639,"if (explicitValuesSet.remove(CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, e.name()).toLowerCase())) continue;","if (explicitValuesSet.remove(CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL,e.name()).toLowerCase())) continue;
",7,24,9,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
1640,String langValue = n.getLang().endsWith(DynamicQuery.WILDCARD)?n.getLang().toUpperCase():n.getLang().toUpperCase() + DynamicQuery.WILDCARD;,"String langValue=n.getLang().endsWith(DynamicQuery.WILDCARD) ? n.getLang().toUpperCase() : n.getLang().toUpperCase() + DynamicQuery.WILDCARD;
",7,11,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-rightOperand, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1641,"return v.image.toLowerCase().startsWith( ""0x"" ) && checkByte( v.image.substring( 2 ), 16 );","return v.image.toLowerCase().startsWith(""0x"") && checkByte(v.image.substring(2),16);
",7,7,9,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
1642,"final int[] expectedFinds = {docText.toLowerCase().indexOf(findWhat.toLowerCase()), docText.toLowerCase().indexOf(findWhat.toLowerCase()) + findWhat.length()};","final int[] expectedFinds={docText.toLowerCase().indexOf(findWhat.toLowerCase()),docText.toLowerCase().indexOf(findWhat.toLowerCase()) + findWhat.length()};
",7,14,16,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1643,"if (System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") >= 0) {","if (System.getProperty(""os.name"").toLowerCase().indexOf(""windows"") >= 0) {
  try {
    if (res.getColorSpaceType() == ColorSpace.TYPE_RGB && res.getDataSize(icSigMediaWhitePointTag) > 0 && res.getDataSize(icSigRedColorantTag) > 0 && res.getDataSize(icSigGreenColorantTag) > 0 && res.getDataSize(icSigBlueColorantTag) > 0 && res.getDataSize(icSigRedTRCTag) > 0 && res.getDataSize(icSigGreenTRCTag) > 0 && res.getDataSize(icSigBlueTRCTag) > 0) {
      res=new ICC_ProfileRGB(res.getProfileHandle());
    }
 else     if (res.getColorSpaceType() == ColorSpace.TYPE_GRAY && res.getDataSize(icSigMediaWhitePointTag) > 0 && res.getDataSize(icSigGrayTRCTag) > 0) {
      res=new ICC_ProfileGray(res.getProfileHandle());
    }
  }
 catch (  CMMException e) {
  }
}
",7,7,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1644,"assertEquals(""testQualifier1"".toLowerCase(), fields.get(1).alias.toLowerCase());","assertEquals(""testQualifier1"".toLowerCase(),fields.get(1).alias.toLowerCase());
",7,16,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1645,"int d = ElementHeaders.getDistance(e.getSimpleName().toString().toLowerCase(), name.toLowerCase());","int d=ElementHeaders.getDistance(e.getSimpleName().toString().toLowerCase(),name.toLowerCase());
",7,7,10,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1646,"from(getUrl() + ""&"" + OPERATION.toLowerCase() + ""="" + NETWORK_MAP_FEED)","from(getUrl() + ""&"" + OPERATION.toLowerCase()+ ""=""+ NETWORK_MAP_FEED).to(""mock:result"");
",8,8,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
"
1647,"f.format(((String)tripleE[i][pattern]).toUpperCase(), tripleE[i][input]);","f.format(((String)tripleE[i][pattern]).toUpperCase(),tripleE[i][input]);
",9,11,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1648,"return super.put(key, value.toLowerCase());","return super.put(key,value.toLowerCase());
",10,19,4,,"SimpleName(SuperMethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, SuperMethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, SuperMethodInvocation-arguments, ReturnStatement-expression, ),
"
1649,t.cat = t.cat.toLowerCase();,"t.cat=t.cat.toLowerCase();
",10,10,3,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1650,"FileUtil.copy(fs, new Path(getWarehouseDir() + ""/"" + Table.ACIDTBLPART.toString().toLowerCase() + ""/p=p1""), fs,","FileUtil.copy(fs,new Path(getWarehouseDir() + ""/"" + Table.ACIDTBLPART.toString().toLowerCase()+ ""/p=p1""),fs,new Path(getWarehouseDir(),acidTblPartMsck),false,hiveConf);
",11,227,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1651,"assertEquals(httpUrl.toLowerCase(), (""http:","assertEquals(httpUrl.toLowerCase(),(""http://"" + URI.create(httpUrl).getHost() + "":""+ server.getAttribute(JBoss7Server.HTTP_PORT)+ ""/"").toLowerCase());
",11,71,14,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1652,"from(getUrl() + OPERATION.toLowerCase() + ""="" + BLOCK_OBSERVABLE)","from(getUrl() + OPERATION.toLowerCase() + ""=""+ BLOCK_OBSERVABLE).to(""mock:result"");
",11,11,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
"
1653,|| searchResource.toLowerCase().contains(SearchSupportedResources.CLIENTS.name().toLowerCase())) ? true : false;,"this.clientSearch=(null == searchResource || searchResource.toLowerCase().contains(SearchSupportedResources.CLIENTS.name().toLowerCase())) ? true : false;
",11,11,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
BooleanLiteral(),
BooleanLiteral(),
"
1654,chars = (matchCase ? s : s.toLowerCase()).toCharArray();,"chars=(matchCase ? s : s.toLowerCase()).toCharArray();
",11,11,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1655,"default: return s.substring(0,1).toUpperCase() + s.substring(1);","default :
",11,11,1,,"SwitchCase(),
"
1656,if (getCapitializeUsername() && schemaPattern != null) schemaPattern = schemaPattern.toUpperCase();,"if (getCapitializeUsername() && schemaPattern != null) schemaPattern=schemaPattern.toUpperCase();
",13,13,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1657,"UsoUtil.getInstance().updateHier(this.contextId, new Relationship(child.getName().toUpperCase(), parent.getName().toUpperCase()), Hier.Op.ADD);","UsoUtil.getInstance().updateHier(this.contextId,new Relationship(child.getName().toUpperCase(),parent.getName().toUpperCase()),Hier.Op.ADD);
",15,25,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1658,"expectedFinds = new int[] {docText.toLowerCase().indexOf(findWhat.toLowerCase()), docText.toLowerCase().indexOf(findWhat.toLowerCase()) + findWhat.length()};","expectedFinds=new int[]{docText.toLowerCase().indexOf(findWhat.toLowerCase()),docText.toLowerCase().indexOf(findWhat.toLowerCase()) + findWhat.length()};
",15,15,15,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
1659,"Optional<HttpVerb> state = Enums.getIfPresent(HttpVerb.class, httpVerb.toUpperCase());","Optional<HttpVerb> state=Enums.getIfPresent(HttpVerb.class,httpVerb.toUpperCase());
",16,16,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
1660,"if (""-write-job-trace"".equals(args[i].toLowerCase())) {","if (""-write-job-trace"".equals(args[i].toLowerCase())) {
  ++i;
  jobTraceFilename=new Path(args[i]);
  continue;
}
",19,19,5,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
1661,"assertTrue(broJson.get(""original_string"").toString().startsWith(rawMessageMap.keySet().iterator().next().toString().toUpperCase()));","assertTrue(broJson.get(""original_string"").toString().startsWith(rawMessageMap.keySet().iterator().next().toString().toUpperCase()));
",23,23,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1662,"private static final KeyStroke keystroke = System.getProperty(""os.name"").toLowerCase().indexOf(""mac"") > -1 ?","private static final KeyStroke keystroke=System.getProperty(""os.name"").toLowerCase().indexOf(""mac"") > -1 ? KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.META_MASK) : KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.CTRL_MASK);
",23,23,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
1663,"Assert.assertEquals(""c1_testFact2_raw"".toLowerCase(), ((StorageCandidate) candidate)","Assert.assertEquals(""c1_testFact2_raw"".toLowerCase(),((StorageCandidate)candidate).getStorageTable().toLowerCase());
",25,25,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1664,"supportedFindqualifiers.put(FindQualifiers.AND_ALL_KEYS.toLowerCase(), true);","supportedFindqualifiers.put(FindQualifiers.AND_ALL_KEYS.toLowerCase(),true);
",41,41,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1665,assertThat(LogLevel.getLevel(Level.OFF.name().toLowerCase())).isEqualTo(Level.OFF);,"assertThat(LogLevel.getLevel(Level.OFF.name().toLowerCase())).isEqualTo(Level.OFF);
",47,63,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1666,"put(canonicalize(TransformFunctionType.ADD.getName().toLowerCase()), AdditionTransformFunction.class);","put(canonicalize(TransformFunctionType.ADD.getName().toLowerCase()),AdditionTransformFunction.class);
",50,50,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
1667,if (fqTable.get(FindQualifiers.OR_ALL_KEYS.toUpperCase()) != null || fqTable.get(FindQualifiers.OR_ALL_KEYS_TMODEL.toUpperCase()) != null) {,"if (fqTable.get(FindQualifiers.OR_ALL_KEYS.toUpperCase()) != null || fqTable.get(FindQualifiers.OR_ALL_KEYS_TMODEL.toUpperCase()) != null) {
  throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"",fq + "" & "" + FindQualifiers.OR_ALL_KEYS));
}
",59,60,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1668,switch (ignoreCase ? name.toLowerCase() : name) {,"switch (ignoreCase ? name.toLowerCase() : name) {
case ""brokerurl"":
case ""brokerURL"":
  target.setBrokerURL(property(camelContext,java.lang.String.class,value));
return true;
case ""trustallpackages"":
case ""trustAllPackages"":
target.setTrustAllPackages(property(camelContext,boolean.class,value));
return true;
case ""usepooledconnection"":
case ""usePooledConnection"":
target.setUsePooledConnection(property(camelContext,boolean.class,value));
return true;
case ""usesingleconnection"":
case ""useSingleConnection"":
target.setUseSingleConnection(property(camelContext,boolean.class,value));
return true;
default :
return super.configure(camelContext,obj,name,value,ignoreCase);
}
",2792,2792,4,,"SimpleName(ConditionalExpression-expression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, SwitchStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, SwitchStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, SwitchStatement-expression, ),
"
