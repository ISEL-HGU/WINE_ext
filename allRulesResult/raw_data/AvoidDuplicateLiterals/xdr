95000,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFileAppend.java,83,,"    writer.append(2L, ""two"");"
95001,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFileAppend.java,98,,"    writer.append(3L, ""three"");"
95002,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFileAppend.java,99,,"    writer.append(4L, ""four"");"
95003,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/TestSequenceFileAppend.java,120,,"      fail(""Expected IllegalArgumentException for compression options"");"
95004,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java,98,,"    codecTest(conf, seed, 0, ""org.apache.hadoop.io.compress.DefaultCodec"");"
95005,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java,104,,"    codecTest(conf, seed, 0, ""org.apache.hadoop.io.compress.GzipCodec"");"
95006,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java,111,,"    conf.set(""io.compression.codec.bzip2.library"", ""java-builtin"");"
95007,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java,112,,"    codecTest(conf, seed, 0, ""org.apache.hadoop.io.compress.BZip2Codec"");"
95008,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java,146,,"    codecTest(conf, seed, 0, ""org.apache.hadoop.io.compress.Lz4Codec"");"
95009,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodec.java,157,,"    codecTest(conf, seed, 0, ""org.apache.hadoop.io.compress.DeflateCodec"");"
95010,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodecFactory.java,157,,"    checkCodec(""default factory for gzip codec"", GzipCodec.class, codec);"
95011,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodecFactory.java,172,,"    checkCodec(""default factory for bzip2 codec"", BZip2Codec.class, codec);"
95012,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodecFactory.java,183,,"    checkCodec(""default factory for deflate codec"", DeflateCodec.class, codec);"
95013,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodecFactory.java,233,,"    checkCodec(""full factory bar codec"", BarCodec.class, codec);"
95014,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodecFactory.java,242,,"    checkCodec(""full factory foo bar codec"", FooBarCodec.class, codec);"
95015,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/compress/TestCodecFactory.java,251,,"    checkCodec(""full factory foo codec"", FooCodec.class, codec);"
95016,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/erasurecode/TestECSchema.java,72,,"        new ECSchema(""one"", 1, 2, null),"
95017,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/erasurecode/rawcoder/TestDecodingValidator.java,122,,"      Assert.fail(""Should not get Exception: "" + e.getMessage());"
95018,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/erasurecode/rawcoder/TestRawCoderBase.java,185,,"      Assert.fail(""Should not get IOException: "" + e.getMessage());"
95019,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/erasurecode/rawcoder/TestRawErasureCoderBenchmark.java,32,,"    RawErasureCoderBenchmark.performBench(""encode"","
95020,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/erasurecode/rawcoder/TestRawErasureCoderBenchmark.java,34,,"    RawErasureCoderBenchmark.performBench(""decode"","
95021,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFile.java,94,,"    String value = ""value"";"
95022,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFile.java,358,,"    basicWithSomeCodec(""none"");"
95023,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileByteArrays.java,244,,"    Location locX = locate(scanner, ""keyX"".getBytes());"
95024,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileByteArrays.java,271,,"    writer.append(""keyX"".getBytes(), ""valueX"".getBytes());"
95025,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileByteArrays.java,275,,"        writer.prepareMetaBlock(""testX"", Compression.Algorithm.GZ.getName());"
95026,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileSeqFileComparison.java,68,,"    conf.setInt(""tfile.fs.input.buffer.size"", options.fsInputBufferSize);"
95027,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileSeqFileComparison.java,69,,"    conf.setInt(""tfile.fs.output.buffer.size"", options.fsOutputBufferSize);"
95028,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileSeqFileComparison.java,255,,"      if (""lzo"".equals(compress)) {"
95029,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileSeqFileComparison.java,261,,"      else if (!""none"".equals(compress))"
95030,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileSeqFileComparison.java,409,,"    System.out.println(""=== TFile: Creation ("" + parameters + "") === "");"
95031,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileSplit.java,158,,"      assertEquals(""Locaton to RecNum conversion not symmetric"", i, reader"
95032,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileStreams.java,155,,"    dos.write(""key0"".getBytes());"
95033,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileStreams.java,172,,"      outValue.write(""value0"".getBytes());"
95034,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestTFileUnsortedByteArrays.java,75,,"    writer.append(""keyM"".getBytes(), ""valueM"".getBytes());"
95035,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/file/tfile/TestVLong.java,69,,"    Assert.assertEquals(""Incorrect encoded size"", (1 << Byte.SIZE) + 96, fs"
95036,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/nativeio/TestNativeIO.java,298,,"        fail(""Got unexpected exception: "" + writerException.getMessage());"
95037,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/nativeio/TestNativeIO.java,791,,"    assumeNotWindows(""Native PMDK not supported on Windows"");"
95038,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestConnectionRetryPolicy.java,77,,"    rp1 = getDefaultRetryPolicy(true, ""10000,2"");"
95039,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestDefaultRetryPolicy.java,62,,"        conf, ""Test.No.Such.Key"","
95040,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestFailoverProxy.java,90,,"        new UnreliableImplementation(""impl1""),"
95041,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestFailoverProxy.java,91,,"        new UnreliableImplementation(""impl2""));"
95042,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestRetryProxy.java,101,,"      fail(""Should fail"");"
95043,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,71,,"  @SuppressWarnings(""deprecation"")"
95044,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,306,,"      scheduler.addResponseTime(""ignored"", mockCall(""LOW""), callDetailsLow);"
95045,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,306,,"      scheduler.addResponseTime(""ignored"", mockCall(""LOW""), callDetailsLow);"
95046,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,308,,"    scheduler.addResponseTime(""ignored"", mockCall(""MED""), callDetailsMedium);"
95047,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,309,,"    scheduler.addResponseTime(""ignored"", mockCall(""HIGH""), callDetailsHigh);"
95048,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,404,,"    assertTrue(scheduler.getServiceUserNames().contains(""service1""));"
95049,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,405,,"    assertTrue(scheduler.getServiceUserNames().contains(""service2""));"
95050,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestDecayRpcScheduler.java,408,,"      getPriorityIncrementCallCount(""user1"");"
95051,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestFairCallQueue.java,84,,"    conf.setInt(""ns."" + FairCallQueue.IPC_CALLQUEUE_PRIORITY_LEVELS_KEY, 2);"
95052,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestFairCallQueue.java,262,,"      fail(""didn't fail"");"
95053,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestIPC.java,401,,"      fail(""Expected an exception to have been thrown"");"
95054,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestIPC.java,420,,"      throw new IOException(""Injected fault"");"
95055,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestIPC.java,440,,"  @SuppressWarnings(""unused"")"
95056,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestIPCServerResponder.java,241,,"      Assert.fail(""unexpected exception:""+ex);"
95057,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestProtoBufRPCCompatibility.java,52,,"  @ProtocolInfo(protocolName = ""testProto"", protocolVersion = 1)"
95058,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestProtoBufRpc.java,247,,"        .setMessage(""hello"").build();"
95059,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestRPC.java,772,,"    int threadsBefore = countThreads(""Server$Listener$Reader"");"
95060,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestRPC.java,1085,,"          0, getDoubleGauge(""RpcLockWaitTimeAvgTime"", rpcMetrics), 0.001);"
95061,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestRPC.java,1132,,"        .getInternalState(server, ""callQueue""));"
95062,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestRPCCompatibility.java,154,,"    Method strMethod = TestProtocol3.class.getMethod(""echo"", String.class);"
95063,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestSaslRPC.java,417,,"        new TestPlainCallbacks.Client(""user"", ""pass""),"
95064,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestServer.java,46,,"    InetSocketAddress address = new InetSocketAddress(""0.0.0.0"",0);"
95065,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestServer.java,51,,"      conf.set(""TestRange"", min+""-""+max);"
95066,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,130,,"    assertFalse(validateCommand(new String[] {""-getlevel"" }));"
95067,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,131,,"    assertFalse(validateCommand(new String[] {""-setlevel"" }));"
95068,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,132,,"    assertFalse(validateCommand(new String[] {""-getlevel"", ""foo.bar:8080"" }));"
95069,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,138,,"        new String[] {""-setlevel"", ""foo.bar:8080"", className, ""DEBUG"" }));"
95070,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,140,,"        new String[] {""-getlevel"", ""foo.bar:8080"", className, ""-protocol"","
95071,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,144,,"            ""https"" }));"
95072,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,368,,"      GenericTestUtils.assertExceptionContains(""Error while authenticating """
95073,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogLevel.java,369,,"          + ""with endpoint"", e);"
95074,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogThrottlingHelper.java,105,,"    assertTrue(helper.record(""foo"", 0).shouldLog());"
95075,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogThrottlingHelper.java,106,,"    assertTrue(helper.record(""bar"", 0).shouldLog());"
95076,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/log/TestLogThrottlingHelper.java,151,,"    assertTrue(helper.record(""baz"", 0, 3, 3).shouldLog());"
95077,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/filter/TestPatternFilter.java,54,,"        .add(""p.include"", ""foo"")"
95078,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/filter/TestPatternFilter.java,55,,"        .add(""p.include.tags"", ""foo:f"").subset(""p"");"
95079,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/filter/TestPatternFilter.java,57,,"    shouldAccept(wl, Arrays.asList(tag(""bar"", """", """"),"
95080,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/filter/TestPatternFilter.java,110,,"    shouldAccept(c, ""foobar"");"
95081,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/filter/TestPatternFilter.java,132,,"    assertTrue(""accepts ""+ s, newGlobFilter(conf).accepts(s));"
95082,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/filter/TestPatternFilter.java,199,,"    assertTrue(""rejects ""+ s, !newGlobFilter(conf).accepts(s));"
95083,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestGraphiteMetrics.java,67,,"        metrics.add(makeMetric(""foo1"", 1.25));"
95084,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestGraphiteMetrics.java,73,,"        Whitebox.setInternalState(sink, ""graphite"", mockGraphite);"
95085,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestGraphiteMetrics.java,85,,"            result.equals(""null.all.Context.Context=all.Hostname=host.foo1 1.25 10\n"" +"
95086,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestGraphiteMetrics.java,86,,"            ""null.all.Context.Context=all.Hostname=host.foo2 2.25 10\n"") ||"
95087,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsCollectorImpl.java,32,,"        .add(""p.exclude"", ""foo"").subset(""p"");"
95088,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsConfig.java,48,,"        .add(""p1.t1.i1.name"", ""p1.t1.i1.name"")"
95089,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsConfig.java,49,,"        .add(""p1.t1.42.bar"", ""p1.t1.42.bar"")"
95090,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsConfig.java,50,,"        .add(""p1.t2.i1.foo"", ""p1.t2.i1.foo"")"
95091,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsConfig.java,92,,"        .add(""foo"", ""p1.t2.i1.foo"").config;"
95092,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSourceAdapter.java,90,,"              .setContext(""test"");"
95093,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,99,,"    new ConfigBuilder().add(""*.period"", 8)"
95094,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,101,,"        .add(""test.sink.test.class"", TestSink.class.getName())"
95095,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,106,,"        .save(TestMetricsConfig.getTestFilename(""hadoop-metrics2-test""));"
95096,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,107,,"    MetricsSystemImpl ms = new MetricsSystemImpl(""Test"");"
95097,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,350,,"    TestSource ts1 = new TestSource(""ts1"");"
95098,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,351,,"    TestSource ts2 = new TestSource(""ts2"");"
95099,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java,364,,"    MetricsSystem ms = new MetricsSystemImpl(""test"");"
95100,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestSinkQueue.java,48,,"    assertEquals(""queue back"", 1, (int) q.back());"
95101,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestSinkQueue.java,49,,"    assertEquals(""element"", 1, (int) q.dequeue());"
95102,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestSinkQueue.java,51,,"    assertTrue(""should enqueue"", q.enqueue(2));"
95103,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestSinkQueue.java,59,,"    assertEquals(""queue size"", 0, q.size());"
95104,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestInterns.java,31,,"    MetricsInfo info = info(""m"", ""m desc"");"
95105,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestInterns.java,36,,"    MetricsTag tag = tag(""t"", ""t desc"", ""t value"");"
95106,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestInterns.java,36,,"    MetricsTag tag = tag(""t"", ""t desc"", ""t value"");"
95107,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMetricsAnnotations.java,128,,"  @Metrics(about=""My metrics"", context=""foo"")"
95108,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMetricsRegistry.java,74,,"        ""illegal whitespace character"", new Runnable() {"
95109,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,58,,"    MetricsRegistry registry = new MetricsRegistry(""test"");"
95110,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,64,,"    registry.newStat(""s1"", ""stat"", ""Ops"", ""Time"", true).add(0);"
95111,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,64,,"    registry.newStat(""s1"", ""stat"", ""Ops"", ""Time"", true).add(0);"
95112,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,80,,"    verify(mb).addCounter(info(""S1NumOps"", ""Number of ops for stat""), 1L);"
95113,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,133,,"    assertCounter(""FooNumOps"", 0L, rb);"
95114,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,134,,"    assertGauge(""FooAvgTime"", 0.0, rb);"
95115,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,135,,"    assertCounter(""BarNumOps"", 0L, rb);"
95116,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,136,,"    assertGauge(""BarAvgTime"", 0.0, rb);"
95117,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,168,,"    rates.add(""foo"", 1);"
95118,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,202,,"      rates.add(""metric"" + i, 0);"
95119,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestMutableMetrics.java,356,,"        info(""FooNumOps"", ""Number of ops for stat with 5s interval""),"
95120,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestUniqNames.java,29,,"    assertEquals(""foo"", u.uniqueName(""foo""));"
95121,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/lib/TestUniqNames.java,30,,"    assertEquals(""foo-1"", u.uniqueName(""foo""));"
95122,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSink.java,42,,"        builder.add(""sink.roll-interval"", ""10m"")"
95123,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSink.java,48,,"            .subset(""sink"");"
95124,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSink.java,120,,"    assertTrue(""The initial flush time was calculated incorrectly: "" + diff,"
95125,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/ganglia/TestGangliaSink.java,36,,"                .subset(""test.sink.ganglia"");"
95126,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/source/TestJvmMetrics.java,71,,"    JvmMetrics jvmMetrics = new JvmMetrics(""test"", ""test"", false);"
95127,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestMBeans.java,85,,"    ObjectName mBeanName = MBeans.getMBeanName(""Service"","
95128,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestSampleStat.java,35,,"    assertEquals(""num samples"", 0, stat.numSamples());"
95129,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestSampleStat.java,36,,"    assertEquals(""mean"", 0.0, stat.mean(), EPSILON);"
95130,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestSampleStat.java,37,,"    assertEquals(""variance"", 0.0, stat.variance(), EPSILON);"
95131,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestSampleStat.java,38,,"    assertEquals(""stddev"", 0.0, stat.stddev(), EPSILON);"
95132,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestSampleStat.java,39,,"    assertEquals(""min"", SampleStat.MinMax.DEFAULT_MIN_VALUE, stat.min(), EPSILON);"
95133,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/util/TestSampleStat.java,40,,"    assertEquals(""max"", SampleStat.MinMax.DEFAULT_MAX_VALUE, stat.max(), EPSILON);"
95134,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestClusterTopology.java,91,,"    NodeElement node3 = getNewNode(""node3"", ""/d1/r3"");"
95135,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestClusterTopology.java,198,,"    Node val = cluster.chooseRandom(""/d1"", ""/d"", Collections.emptyList());"
95136,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestClusterTopology.java,215,,"    NodeElement node1 = getNewNode(""node1"", ""/a1/b1/c1"");"
95137,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestClusterTopology.java,224,,"    Node node = cluster.chooseRandom(""/a1/b1"", ""/a1/b1/c1"", null);"
95138,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,80,,"    socket.bind(new InetSocketAddress(""127.0.0.1"", 0));"
95139,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,244,,"    IOException e = new ConnectException(""failed"");"
95140,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,248,,"    assertInException(wrapped, ""localhost"");"
95141,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,331,,"    NetUtils.addStaticResolution(""host"", ""127.0.0.1"");"
95142,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,345,,"        ""127.0.0.1:12345"", 1000, ""myconfig"");"
95143,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,491,,"    verifyGetByExactNameSearch(""unknown"", ""unknown."");"
95144,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,496,,"    verifyGetByExactNameSearch(""unknown.domain"", ""unknown.domain."");"
95145,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,519,,"    verifyGetByNameWithSearch(host, host+"".a.b."", host+"".b."", host+"".c."");"
95146,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,519,,"    verifyGetByNameWithSearch(host, host+"".a.b."", host+"".b."", host+"".c."");"
95147,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,519,,"    verifyGetByNameWithSearch(host, host+"".a.b."", host+"".b."", host+"".c."");"
95148,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestNetUtils.java,597,,"    verifyInetAddress(addr, ""host.a.b"", ""1.1.1.1"");"
95149,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestScriptBasedMapping.java,52,,"    assertTrue(""Expected to be single switch"", mapping.isSingleSwitch());"
95150,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestScriptBasedMappingWithDependency.java,58,,"    assertTrue(""Expected to be single switch"", mapping.isSingleSwitch());"
95151,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestStaticMapping.java,123,,"    StaticMapping.addNodeToRack(""n1"", ""/r1"");"
95152,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestSwitchMapping.java,76,,"    assertTrue(""Did not find "" + scriptname + "" in "" + scriptMapping,"
95153,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestSwitchMapping.java,76,,"    assertTrue(""Did not find "" + scriptname + "" in "" + scriptMapping,"
95154,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/TestTableMapping.java,43,,"        "".testResolve"", "".txt"");"
95155,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/unix/TestDomainSocket.java,115,,"          throw new RuntimeException(""unexpected IOException"", e);"
95156,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/unix/TestDomainSocket.java,700,,"          ""chmod"", ""0700"", prefix + ""/foo/bar/baz"" });"
95157,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/net/unix/TestDomainSocket.java,700,,"          ""chmod"", ""0700"", prefix + ""/foo/bar/baz"" });"
95158,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestCredentials.java,116,,"    assertTrue(""Token for alias "" + alias1 + "" must be present"","
95159,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestDoAsEffectiveUser.java,52,,"  final private static String GROUP1_NAME = ""group1"";"
95160,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestDoAsEffectiveUser.java,240,,"      Assert.fail(""The RPC must have failed "" + retVal);"
95161,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestFixKerberosTicketOrder.java,101,,"      if (ticket.getServer().getName().startsWith(""krbtgt"")) {"
95162,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupFallback.java,45,,"    String username = System.getProperty(""user.name"");"
95163,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupFallback.java,48,,"    LOG.info(username + "" has GROUPS: "" + groupList.toString());"
95164,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java,229,,"    FakeGroupMapping.addToBlackList(""user1"");"
95165,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java,289,,"    userGroups = groups.getGroups(""user2"");"
95166,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java,315,,"      GenericTestUtils.assertExceptionContains(""No groups found for user"", e);"
95167,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestGroupsCaching.java,778,,"    FakeGroupMapping.addToBlackList(""dne"");"
95168,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestKDiag.java,165,,"        ARG_PRINCIPAL, ""foo@EXAMPLE.COM"");"
95169,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestLdapGroupsMapping.java,249,,"    writer.write(""hadoop"");"
95170,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestLdapGroupsMapping.java,261,,"    final Path jksPath = new Path(testDir.toString(), ""test.jks"");"
95171,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestLdapGroupsMappingWithBindUserSwitch.java,131,,"    conf.set(BIND_USERS_KEY + "".bob"" + BIND_USER_SUFFIX, ""bobUsername"");"
95172,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestLdapGroupsMappingWithBindUserSwitch.java,135,,"        createPasswordFile(""bobPasswordFile1.txt"", ""bobBindPassword""));"
95173,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestLdapGroupsMappingWithFailover.java,60,,"    conf.setStrings(LDAP_URL_KEY, ""ldap://test"", ""ldap://test1"","
95174,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestRuleBasedLdapGroupsMapping.java,49,,"        .doGetGroups(eq(""admin""), anyInt());"
95175,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java,96,,"    String service = ""hdfs/"";"
95176,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java,97,,"    String realm = ""@REALM"";"
95177,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java,165,,"    assertEquals(""127.0.0.1:123"","
95178,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java,189,,"        SecurityUtil.buildTokenService(new InetSocketAddress(""127.0.0.1"", 123)).toString()"
95179,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java,199,,"    InetSocketAddress compare = NetUtils.createSocketAddrForHost(""localhost"", 123);"
95180,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestSecurityUtil.java,369,,"    NetUtils.addStaticResolution(staticHost, ""255.255.255.255"");"
95181,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestShellBasedIdMapping.java,105,,"        + "" | cut -d: -f1,3"";"
95182,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestShellBasedIdMapping.java,117,,"    assertEquals(""hdfs"", uMap.get(10));"
95183,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestShellBasedUnixGroupsMapping.java,193,,"        ""Expected the group names executor to carry the configured timeout"","
95184,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUGILoginFromKeytab.java,345,,"    File keytab1 = new File(workDir, ""user1.keytab"");"
95185,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,201,,"    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(""user1"");"
95186,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,205,,"    ugi = UserGroupInformation.createProxyUser(""user2"", ugi);"
95187,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,318,,"    testConstructorSuccess(""user2@DEFAULT.REALM"", ""user2"");"
95188,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,319,,"    testConstructorSuccess(""user3/cron@DEFAULT.REALM"", ""user3"");    "
95189,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,320,,"    testConstructorSuccess(""user4@OTHER.REALM"", ""user4"");"
95190,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,321,,"    testConstructorSuccess(""user5/cron@OTHER.REALM"", ""user5"");"
95191,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,333,,"    conf.set(HADOOP_SECURITY_AUTH_TO_LOCAL_MECHANISM, ""hadoop"");"
95192,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,443,,"    UserGroupInformation.createUserForTesting(""someone"", new String[0]);"
95193,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestUserGroupInformation.java,522,,"  @SuppressWarnings(""unchecked"") // from Mockito mocks"
95194,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestWhitelistBasedResolver.java,38,,"    String[] fixedIps = {""10.119.103.112"", ""10.221.102.0/23""};"
95195,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestWhitelistBasedResolver.java,40,,"    TestFileBasedIPList.createFileWithEntries (""fixedwhitelist.txt"", fixedIps);"
95196,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestWhitelistBasedResolver.java,42,,"    String[] variableIps = {""10.222.0.0/16"", ""10.113.221.221""};"
95197,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/TestWhitelistBasedResolver.java,44,,"    TestFileBasedIPList.createFileWithEntries (""variablewhitelist.txt"", variableIps);"
95198,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,64,,"    String[] args1 = {""create"", ""credential1"", ""-value"", ""p@ssw0rd"", ""-provider"","
95199,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,64,,"    String[] args1 = {""create"", ""credential1"", ""-value"", ""p@ssw0rd"", ""-provider"","
95200,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,64,,"    String[] args1 = {""create"", ""credential1"", ""-value"", ""p@ssw0rd"", ""-provider"","
95201,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,64,,"    String[] args1 = {""create"", ""credential1"", ""-value"", ""p@ssw0rd"", ""-provider"","
95202,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,64,,"    String[] args1 = {""create"", ""credential1"", ""-value"", ""p@ssw0rd"", ""-provider"","
95203,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,81,,"    String[] args2 = {""list"", ""-provider"","
95204,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredShell.java,88,,"    String[] args4 = {""delete"", ""credential1"", ""-f"", ""-provider"","
95205,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredentialProviderFactory.java,72,,"    final Path jksPath = new Path(tmpDir.toString(), ""test.jks"");"
95206,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredentialProviderFactory.java,74,,"        ""://file"" + jksPath.toUri();"
95207,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredentialProviderFactory.java,136,,"      provider.createCredentialEntry(""pass"", passwd);"
95208,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/alias/TestCredentialProviderFactory.java,159,,"    provider.createCredentialEntry(""pass2"", passTwo);"
95209,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,228,,"    acl = new AccessControlList(""drwho tardis"");"
95210,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,231,,"    assertThat(users.iterator().next()).isEqualTo(""drwho"");"
95211,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,234,,"    assertThat(groups.iterator().next()).isEqualTo(""tardis"");"
95212,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,243,,"    acl = new AccessControlList(""drwho "");"
95213,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,263,,"    assertThat(iter.next()).isEqualTo(""joe"");"
95214,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,268,,"    assertThat(iter.next()).isEqualTo(""users"");"
95215,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestAccessControlList.java,343,,"      acl.addUser("" * "");"
95216,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestProxyUsers.java,55,,"  private static final String PROXY_IP = ""1.2.3.4"";"
95217,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestProxyUsers.java,160,,"    assertNotAuthorized(proxyUserUgi, ""1.2.3.5"");"
95218,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestServiceAuthorization.java,44,,"  private static final String AUTHORIZED_IP = ""1.2.3.4"";"
95219,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestServiceAuthorization.java,113,,"    conf.set(ACL_CONFIG, ""user1 group1"");"
95220,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestServiceAuthorization.java,134,,"        UserGroupInformation.createUserForTesting(""drwho@EXAMPLE.COM"","
95221,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestServiceAuthorization.java,135,,"            new String[] { ""group1"", ""group2"" });"
95222,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestServiceAuthorization.java,135,,"            new String[] { ""group1"", ""group2"" });"
95223,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/authorize/TestServiceAuthorization.java,296,,"          InetAddress.getByName(""10.222.0.0""));"
95224,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/http/TestCrossOriginFilter.java,80,,"    Assert.assertTrue(filter.areOriginsAllowed(""example.com""));"
95225,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/http/TestCrossOriginFilter.java,127,,"    Assert.assertFalse(filter.areOriginsAllowed(""foo.nomatch1.com foo.nomatch2.com""));"
95226,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/KeyStoreTestUtil.java,326,,"      KeyStoreTestUtil.createKeyStore(clientKS, clientPassword, ""client"","
95227,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509KeyManager.java,60,,"                new ReloadingX509KeystoreManager(""jks"", keystoreLocation,"
95228,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509KeyManager.java,61,,"                        ""password"","
95229,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509KeyManager.java,80,,"        KeyPair kp = generateKeyPair(""RSA"");"
95230,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509KeyManager.java,82,,"                        ""SHA1withRSA"");"
95231,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509KeyManager.java,84,,"        createKeyStore(keystoreLocation, ""password"", ""cert1"", kp.getPrivate(), sCert);"
95232,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,69,,"            new ReloadingX509TrustManager(""jks"", truststoreLocation, ""password"");"
95233,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,69,,"            new ReloadingX509TrustManager(""jks"", truststoreLocation, ""password"");"
95234,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,85,,"    KeyPair kp = generateKeyPair(""RSA"");"
95235,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,86,,"    cert1 = generateCertificate(""CN=Cert1"", kp, 30, ""SHA1withRSA"");"
95236,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,86,,"    cert1 = generateCertificate(""CN=Cert1"", kp, 30, ""SHA1withRSA"");"
95237,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,87,,"    cert2 = generateCertificate(""CN=Cert2"", kp, 30, ""SHA1withRSA"");"
95238,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestReloadingX509TrustManager.java,89,,"    createTrustStore(truststoreLocation, ""password"", ""cert1"", cert1);"
95239,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestSSLFactory.java,80,,"          ""keystorePassword"", ""keyPassword"","
95240,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestSSLFactory.java,352,,"    conf.set(SSLFactory.SSL_HOSTNAME_VERIFIER_KEY, ""STRICT_IE6"");"
95241,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/TestSSLFactory.java,407,,"    checkSSLFactoryInitWithPasswords(SSLFactory.Mode.SERVER, ""password"","
95242,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/TestDtUtilShell.java,129,,"    args = new String[] {""print"", tokenFilename};"
95243,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/TestDtUtilShell.java,148,,"        ""print"", ""-alias"", SERVICE.toString(), tokenFilename};"
95244,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/TestDtUtilShell.java,223,,"    args = new String[] {""get"", getUrl, tokenFilenameGet};"
95245,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestDelegationToken.java,228,,"        new TestDelegationTokenIdentifier(new Text(""owner""), null, null);"
95246,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestDelegationToken.java,249,,"    Text realUser = new Text(""realUser"");"
95247,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestDelegationToken.java,272,,"          generateDelegationToken(dtSecretManager, ""SomeUser"", ""JobTracker"");"
95248,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestDelegationToken.java,272,,"          generateDelegationToken(dtSecretManager, ""SomeUser"", ""JobTracker"");"
95249,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestZKDelegationTokenSecretManager.java,103,,"  @SuppressWarnings(""unchecked"")"
95250,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestZKDelegationTokenSecretManager.java,110,,"      tm1 = new DelegationTokenManager(conf, new Text(""bla""));"
95251,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestZKDelegationTokenSecretManager.java,117,,"              UserGroupInformation.getCurrentUser(), ""foo"");"
95252,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestZKDelegationTokenSecretManager.java,125,,"        fail(""Expected InvalidToken"");"
95253,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestZKDelegationTokenSecretManager.java,131,,"          UserGroupInformation.getCurrentUser(), ""bar"");"
95254,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/TestZKDelegationTokenSecretManager.java,239,,"        ""Token seq should be the same"", 1, id1.getSequenceNumber());"
95255,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestDelegationTokenAuthenticationHandlerWithMocks.java,103,,"    conf.put(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND, ""foo"");"
95256,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestDelegationTokenAuthenticationHandlerWithMocks.java,181,,"    Mockito.when(token.getUserName()).thenReturn(""user"");"
95257,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestDelegationTokenAuthenticationHandlerWithMocks.java,233,,"  @SuppressWarnings(""unchecked"")"
95258,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestDelegationTokenManager.java,59,,"        new DelegationTokenManager(conf, new Text(""foo""));"
95259,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,134,,"      conf.setProperty(TOKEN_KIND, ""token-kind"");"
95260,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,160,,"        resp.setHeader(""UsingHeader"", ""true"");"
95261,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,225,,"    context.setContextPath(""/foo"");"
95262,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,229,,"    context.addServlet(new ServletHolder(PingServlet.class), ""/bar"");"
95263,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,232,,"      URL nonAuthURL = new URL(getJettyURL() + ""/foo/bar"");"
95264,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,274,,"      conn.setRequestMethod(""PUT"");"
95265,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,764,,"      kdc.createPrincipal(keytabFile, ""client"", ""HTTP/localhost"");"
95266,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/token/delegation/web/TestWebDelegationToken.java,915,,"        String ret = ""remoteuser="" + req.getRemoteUser() + "":ugi="" +"
95267,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/TestCompositeService.java,57,,"    ServiceManager serviceManager = new ServiceManager(""ServiceManager"");"
95268,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/TestCompositeService.java,80,,"      assertEquals(""For "" + services[i]"
95269,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/TestCompositeService.java,332,,"    assertEquals(""Incorrect number of services"","
95270,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/TestCompositeService.java,369,,"    CompositeService parent = new CompositeService(""parent"");"
95271,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/TestCompositeService.java,389,,"      fail(""Expected an exception, got "" + parent);"
95272,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/TestServiceLifecycle.java,119,,"      fail(""Expected a failure, got "" + svc);"
95273,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/launcher/TestServiceConf.java,45,,"    Configuration conf = newConf(RunningService.FAIL_IN_RUN, ""true"");"
95274,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/service/launcher/TestServiceLauncher.java,129,,"    Exception cause = new Exception(""cause"");"
95275,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/MetricsAsserts.java,153,,"    Assert.assertEquals(""Bad value for metric "" + name,"
95276,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TestLambdaTestUtils.java,167,,"      fail(""should not have got here"");"
95277,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TestLambdaTestUtils.java,284,,"      IOException ioe = intercept(IOException.class, () -> ""hello"");"
95278,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TestLambdaTestUtils.java,390,,"        ""oops"","
95279,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TestLambdaTestUtils.java,437,,"    intercept(OutOfMemoryError.class, ""OOM"","
95280,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/test/TestMultithreadedTestUtil.java,59,,"    assertTrue(""Test took "" + (et - st) + ""ms"","
95281,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/tools/GetGroupsTestBase.java,86,,"        new String[]{""does-not-exist1"", ""does-not-exist2""}, true);"
95282,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/tools/GetGroupsTestBase.java,86,,"        new String[]{""does-not-exist1"", ""does-not-exist2""}, true);"
95283,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestApplicationClassLoader.java,101,,"    assertFalse(isSystemClass(""org.example.Foo"" + nestedClass, null));"
95284,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,40,,"    String[] ips = {""10.119.103.112"", ""10.221.102.0/23"", ""10.113.221.221""};"
95285,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,40,,"    String[] ips = {""10.119.103.112"", ""10.221.102.0/23"", ""10.113.221.221""};"
95286,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,40,,"    String[] ips = {""10.119.103.112"", ""10.221.102.0/23"", ""10.113.221.221""};"
95287,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,42,,"    TestFileBasedIPList.createFileWithEntries (""ips.txt"", ips);"
95288,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,47,,"    assertFalse(""10.113.221.222 is in the list"","
95289,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,48,,"        cipl.isIn(""10.113.221.222""));"
95290,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,49,,"    assertFalse (""10.222.103.121 is  in the list"","
95291,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,50,,"        cipl.isIn(""10.222.103.121""));"
95292,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,54,,"        ""10.222.0.0/16"", ""10.113.221.221"", ""10.113.221.222""};"
95293,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,59,,"    assertTrue(""10.113.221.222 is not in the list"","
95294,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCacheableIPList.java,61,,"    assertTrue (""10.222.103.121 is not in the list"","
95295,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestCloseableReferenceCount.java,63,,"    assertFalse(""Reference count should be closed"", clr.isOpen());"
95296,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestConfTest.java,40,,"    String conf = ""<configuration>\n"""
95297,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestConfTest.java,41,,"        + ""<property>\n"""
95298,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestConfTest.java,42,,"        + ""<name>foo</name>\n"""
95299,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestConfTest.java,44,,"        + ""</property>\n"""
95300,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestConfTest.java,45,,"        + ""</configuration>"";"
95301,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestDataChecksum.java,91,,"      checksum.verifyChunkedSums(dataBuf, checksumBuf, ""fake file"", 0);"
95302,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestDiskChecker.java,46,,"  private final FsPermission invalidPerm = new FsPermission(""000"");"
95303,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestFileBasedIPList.java,33,,"    removeFile(""ips.txt"");"
95304,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestFileBasedIPList.java,44,,"    String[] ips = {""10.119.103.112"", ""10.221.102.0/23""};"
95305,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGSet.java,58,,"        LightWeightGSet.LOG.info(""GOOD: getting "" + e, e);"
95306,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGSet.java,243,,"    println(""DONE "" + test.stat());"
95307,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,67,,"    args[0] = ""-files"";"
95308,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,72,,"    String files = conf.get(""tmpfiles"");"
95309,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,315,,"    expectedMap.put(""key1"", ""value1"");"
95310,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,315,,"    expectedMap.put(""key1"", ""value1"");"
95311,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,318,,"    args = new String[]{""-fs"", ""hdfs://somefs/"", ""-Dkey1=value1"", ""arg1""};"
95312,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,318,,"    args = new String[]{""-fs"", ""hdfs://somefs/"", ""-Dkey1=value1"", ""arg1""};"
95313,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,318,,"    args = new String[]{""-fs"", ""hdfs://somefs/"", ""-Dkey1=value1"", ""arg1""};"
95314,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,334,,"        ""-fs"", ""someother"", ""-D"", ""key2"", ""value2"", ""arg1"", ""arg2""};"
95315,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestGenericOptionsParser.java,334,,"        ""-fs"", ""someother"", ""-D"", ""key2"", ""value2"", ""arg1"", ""arg2""};"
95316,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestHostsFileReader.java,72,,"    efw.write(""#DFS-Hosts-excluded\n"");"
95317,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestHostsFileReader.java,81,,"    ifw.write(""#Hosts-in-DFS\n"");"
95318,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestHostsFileReader.java,98,,"    assertTrue(hfp.getHosts().contains(""somehost5""));"
95319,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestHttpExceptionUtils.java,47,,"    Exception ex = new IOException(""Hello IOEX"");"
95320,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestHttpExceptionUtils.java,104,,"    Mockito.when(conn.getResponseMessage()).thenReturn(""msg"");"
95321,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestIndexedSort.java,41,,"    assertTrue(Arrays.toString(values) + ""\ndoesn't match\n"" +"
95322,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestJsonSerialization.java,132,,"    File tempFile = File.createTempFile(""Keyval"", "".json"");"
95323,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestJsonSerialization.java,132,,"    File tempFile = File.createTempFile(""Keyval"", "".json"");"
95324,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestLightWeightCache.java,86,,"    println(""DONE "" + test.stat());"
95325,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestLists.java,36,,"    list.add(""record1"");"
95326,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestLists.java,51,,"    List<String> list = Lists.newArrayList(""record1"", ""record2"", ""record3"");"
95327,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestLists.java,51,,"    List<String> list = Lists.newArrayList(""record1"", ""record2"", ""record3"");"
95328,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestLists.java,52,,"    list.add(""record4"");"
95329,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,84,,"    assertTrue(ml.includes(""10.119.103.112""));"
95330,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,85,,"    assertTrue(ml.includes(""1.2.3.4""));"
95331,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,97,,"    assertFalse(ml.includes(""10.119.103.111""));"
95332,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,126,,"    assertFalse(ml.includes(""1.2.3.5""));"
95333,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,171,,"    assertFalse(ml.includes(""10.221.255.255""));"
95334,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,172,,"    assertTrue(ml.includes(""10.222.0.0"")); "
95335,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,177,,"    assertTrue(ml.includes(""10.222.255.255""));"
95336,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,178,,"    assertFalse(ml.includes(""10.223.0.0""));"
95337,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,180,,"    assertTrue(ml.includes(""10.241.23.0""));"
95338,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestMachineList.java,183,,"    assertTrue(ml.includes(""10.241.23.255""));"
95339,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestShell.java,243,,"      expectedCommand = new String[] { ""bash"", ""-c"", ""kill -0 -- -'"" +"
95340,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestStringInterner.java,38,,"    String literalABC = ""ABC"";"
95341,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestSysInfoWindows.java,51,,"        ""1234567,2345678,3456789,4567890\r\n"");"
95342,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestVersionUtil.java,29,,"    assertEquals(0, VersionUtil.compareVersions(""2.0.0"", ""2.0.0""));"
95343,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestVersionUtil.java,35,,"    assertEquals(0, VersionUtil.compareVersions(""1"", ""1.0""));"
95344,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestVersionUtil.java,36,,"    assertEquals(0, VersionUtil.compareVersions(""1"", ""1.0.0""));"
95345,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestVersionUtil.java,88,,"    assertExpectedValues(""1.0.0"", ""1.0.1-SNAPSHOT"");"
95346,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,173,,"    chmod(""700"", a);"
95347,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,444,,"      Shell.execCommand(winutils, ""symlink"", link, target);"
95348,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,495,,"        ""readlink"","
95349,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,510,,"      fail(""Failed to get Shell.ExitCodeException when reading bad symlink"");"
95350,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,546,,"      fail(""Failed to get Shell.ExitCodeException with bad parameters"");"
95351,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,564,,"    Shell.execCommand(winutils, ""task"", ""create"", ""testTaskCreate"" + testNumber,"
95352,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,564,,"    Shell.execCommand(winutils, ""task"", ""create"", ""testTaskCreate"" + testNumber,"
95353,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,582,,"        ""job"" + jobId, ""cmd /c echo job"" + jobId);"
95354,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestWinUtils.java,582,,"        ""job"" + jobId, ""cmd /c echo job"" + jobId);"
95355,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/BloomFilterCommonTester.java,155,,"        assertTrue("" might contain key error "","
95356,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/BloomFilterCommonTester.java,360,,"          Assert.assertTrue("" filter might contains "" + i,"
95357,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/curator/TestZKCuratorManager.java,85,,"    assertFalse(curator.exists(""/node1""));"
95358,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/curator/TestZKCuratorManager.java,89,,"    assertFalse(curator.exists(""/node2""));"
95359,./TargetProjects/hadoop/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/curator/TestZKCuratorManager.java,110,,"    byte[] setData = ""setData"".getBytes(""UTF-8"");"
95360,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java,193,,"  public Response deleteKey(@PathParam(""name"") final String name)"
95361,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java,272,,"  @Path(KMSRESTConstants.KEY_RESOURCE + ""/{name:.*}/"""
95362,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java,451,,"      @PathParam(""versionName"") final String versionName) throws Exception {"
95363,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSAudit.java,227,,"    op(OpStatus.OK, op, user, key, ""Unknown"", extraMsg);"
95364,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,285,,"    newConf.set(""hadoop.kms.authentication.type"", ""simple"");"
95365,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,350,,"      options.put(""useKeyTab"", ""true"");"
95366,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,379,,"    principals.add(""HTTP/localhost"");"
95367,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,380,,"    principals.add(""client"");"
95368,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,383,,"    principals.add(""client/host"");"
95369,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,384,,"    principals.add(""client1"");"
95370,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,385,,"    principals.add(""foo"");"
95371,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,491,,"      conf.set(""hadoop.security.authentication"", ""kerberos"");"
95372,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,491,,"      conf.set(""hadoop.security.authentication"", ""kerberos"");"
95373,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,512,,"      conf.set(""hadoop.kms.authentication.kerberos.keytab"","
95374,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,514,,"      conf.set(""hadoop.kms.authentication.kerberos.principal"", ""HTTP/localhost"");"
95375,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,515,,"      conf.set(""hadoop.kms.authentication.kerberos.name.rules"", ""DEFAULT"");"
95376,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,515,,"      conf.set(""hadoop.kms.authentication.kerberos.name.rules"", ""DEFAULT"");"
95377,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,634,,"        options.setCipher(""AES/CTR/NoPadding"");"
95378,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,656,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""k1.ALL"", ""*"");"
95379,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,659,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""k3.ALL"", ""*"");"
95380,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,863,,"        Assert.assertEquals(""k2"", meta.getAttributes().get(""key.acl.name""));"
95381,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1009,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""test_key.MANAGEMENT"", ""CREATE"");"
95382,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1010,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""some_key.MANAGEMENT"", ""ROLLOVER"");"
95383,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1011,,"    conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + ""MANAGEMENT"", ""DECRYPT_EEK"");"
95384,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1011,,"    conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + ""MANAGEMENT"", ""DECRYPT_EEK"");"
95385,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1014,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""all_access.ALL"", ""GENERATE_EEK"");"
95386,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1053,,"              newAttribs.put(""key.acl.name"", ""all_access"");"
95387,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1281,,"        KMSACLs.Type.CREATE.toString() + "",SET_KEY_MATERIAL"");"
95388,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1286,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""k0.ALL"", ""*"");"
95389,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,1302,,"            doAs(""SET_KEY_MATERIAL"","
95390,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,2110,,"    conf.set(""hadoop.kms.proxyuser.client.users"", ""foo/localhost"");"
95391,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,2111,,"    conf.set(""hadoop.kms.proxyuser.client.hosts"", ""localhost"");"
95392,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,2138,,"            Assert.assertNotNull(kp.createKey(""kcc"","
95393,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,2743,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""kcc.ALL"", ""foo1"");"
95394,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java,2744,,"    conf.set(KeyAuthorizationKeyProvider.KEY_ACL + ""kdd.ALL"", ""bar"");"
95395,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,70,,"    conf.set(DEFAULT_KEY_ACL_PREFIX + ""MANAGEMENT"", ""ROLLOVER"");"
95396,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,71,,"    conf.set(WHITELIST_KEY_ACL_PREFIX + ""MANAGEMENT"", ""DECRYPT_EEK"");"
95397,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,92,,"    conf.set(KEY_ACL + ""test_key_1.DECRYPT_EEK"", ""decrypt2"");"
95398,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,115,,"    conf.set(DEFAULT_KEY_ACL_PREFIX + ""READ"", ""read1"");"
95399,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,117,,"    conf.set(DEFAULT_KEY_ACL_PREFIX + ""GENERATE_EEK"", ""*"");"
95400,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,119,,"    conf.set(KEY_ACL + ""testuser1.ALL"", ""testkey1"");"
95401,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,127,,"    conf.set(DEFAULT_KEY_ACL_PREFIX + ""READ"", ""read2"");"
95402,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,132,,"    conf.set(WHITELIST_KEY_ACL_PREFIX + ""READ"", ""admin_read2"");"
95403,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSACLs.java,135,,"    conf.set(WHITELIST_KEY_ACL_PREFIX + ""DECRYPT_EEK"", ""admin_decrypt2"");"
95404,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSAudit.java,100,,"    kmsAudit.ok(luser, KMSOp.DECRYPT_EEK, ""k1"", ""testmsg"");"
95405,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSAudit.java,123,,"            + ""interval=[^m]{1,4}ms\\] testmsg"""
95406,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSAudit.java,165,,"            + ""OK\\[op=GENERATE_EEK, key=k3, user=luser@REALM, accessCount=1,"""
95407,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMSAudit.java,166,,"            + "" interval=[^m]{1,4}ms\\] testmsg"""
95408,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKeyAuthorizationKeyProvider.java,53,,"    when(mock.isACLPresent(""foo"", KeyOpType.MANAGEMENT)).thenReturn(true);"
95409,./TargetProjects/hadoop/hadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKeyAuthorizationKeyProvider.java,109,,"    when(mock.isACLPresent(""testKey"", KeyOpType.MANAGEMENT)).thenReturn(true);"
95410,./TargetProjects/hadoop/hadoop-common-project/hadoop-minikdc/src/test/java/org/apache/hadoop/minikdc/TestMiniKdc.java,100,,"      options.put(""refreshKrb5Config"", ""true"");"
95411,./TargetProjects/hadoop/hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java,264,,"              "", allowing client '"" + address + ""', '"" + hostname + ""'"");"
95412,./TargetProjects/hadoop/hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/NfsExports.java,379,,"        LOG.debug(""Using match all for '"" + host + ""' and "" + privilege);"
95413,./TargetProjects/hadoop/hadoop-common-project/hadoop-nfs/src/test/java/org/apache/hadoop/oncrpc/TestRpcCallCache.java,44,,"    new RpcCallCache(""test"", 0);"
95414,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java,168,,"  @SuppressWarnings(""unchecked"")"
95415,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java,196,,"      return usageError(""Invalid syntax "" + exp, LS_USAGE);"
95416,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java,249,,"    Option rest = OptionBuilder.withArgName(""rest"")"
95417,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java,253,,"    Option webui = OptionBuilder.withArgName(""webui"")"
95418,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java,268,,"    Option apiOpt = OptionBuilder.withArgName(""api"")"
95419,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/api/RegistryOperationsFactory.java,63,,"    Preconditions.checkArgument(conf != null, ""Null configuration"");"
95420,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryPathUtils.java,98,,"    Preconditions.checkArgument(path != null, ""null path"");"
95421,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java,774,,"                                     ""true"");"
95422,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,64,,"    assertResult(cli, -1, ""foo"");"
95423,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,70,,"    assertResult(cli, -1, ""ls"", ""/path"", ""/extraPath"");"
95424,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,70,,"    assertResult(cli, -1, ""ls"", ""/path"", ""/extraPath"");"
95425,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,71,,"    assertResult(cli, -1, ""resolve"");"
95426,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,73,,"    assertResult(cli, -1, ""mknode"");"
95427,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,77,,"    assertResult(cli, -1, ""bind"");"
95428,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,79,,"    assertResult(cli, -1, ""bind"", ""-inet"", ""foo"");"
95429,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,80,,"    assertResult(cli, -1, ""bind"", ""-inet"", ""-api"", ""-p"", ""378"", ""-h"", ""host"", ""/foo"");"
95430,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,80,,"    assertResult(cli, -1, ""bind"", ""-inet"", ""-api"", ""-p"", ""378"", ""-h"", ""host"", ""/foo"");"
95431,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,80,,"    assertResult(cli, -1, ""bind"", ""-inet"", ""-api"", ""-p"", ""378"", ""-h"", ""host"", ""/foo"");"
95432,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,80,,"    assertResult(cli, -1, ""bind"", ""-inet"", ""-api"", ""-p"", ""378"", ""-h"", ""host"", ""/foo"");"
95433,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,81,,"    assertResult(cli, -1, ""bind"", ""-inet"", ""-api"", ""Api"", ""-p"", ""-h"", ""host"", ""/foo"");"
95434,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,85,,"    assertResult(cli, -1, ""bind"", ""-webui"", ""foo"");"
95435,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,87,,"    assertResult(cli, -1, ""bind"", ""-webui"", ""uriString"", ""-api"", ""/foo"");"
95436,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,89,,"    assertResult(cli, -1, ""bind"", ""-rest"", ""foo"");"
95437,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,99,,"        ""host"", ""/dir"");"
95438,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,104,,"    assertResult(cli, -1, ""ls"", ""NonSlashPath"");"
95439,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,123,,"    assertResult(cli, -1, ""ls"", ""/NonExistingDir/nonexisting_path"");"
95440,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,149,,"    assertResult(cli, 0, ""mknode"", ""/subdir"");"
95441,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/cli/TestRegistryCli.java,152,,"    assertResult(cli, 0, ""bind"", ""-inet"", ""-api"", ""Api"", ""-p"", ""378"", ""-h"", ""host"", ""/subdir/foo"");"
95442,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestMarshalling.java,121,,"    record.set(""key"", ""value"");"
95443,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestMarshalling.java,121,,"    record.set(""key"", ""value"");"
95444,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestMarshalling.java,122,,"    record.set(""intval"", ""2"");"
95445,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestRegistryOperationUtils.java,46,,"    assertEquals(""hbase"","
95446,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestRegistryPathUtils.java,74,,"    assertCreatedPathEquals(""/a/b"", ""/a"", ""b"");"
95447,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestRegistryPathUtils.java,79,,"    assertCreatedPathEquals(""/alice"", ""/"", ""/alice"");"
95448,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/binding/TestRegistryPathUtils.java,122,,"    assertEquals(3, split(""/a/b/c"").size());"
95449,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/impl/TestCuratorService.java,137,,"    mkPath(""/rm"", CreateMode.PERSISTENT);"
95450,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/impl/TestFSRegistryOperationsService.java,71,,"    result = registry.mknode(""test/registryTestNode"", false);"
95451,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/impl/TestFSRegistryOperationsService.java,78,,"      registry.mknode(""test/parent/registryTestNode"", false);"
95452,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/impl/TestFSRegistryOperationsService.java,137,,"    Assert.assertTrue(fs.exists(new Path(""test/registryTestNode/_record"")));"
95453,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/impl/TestFSRegistryOperationsService.java,196,,"    fs.mkdirs(new Path(""test/registryTestNode/child1""));"
95454,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/client/impl/TestFSRegistryOperationsService.java,197,,"    fs.mkdirs(new Path(""test/registryTestNode/child2""));"
95455,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/secure/KerberosConfiguration.java,62,,"      options.put(""refreshKrb5Config"", ""true"");"
95456,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/secure/TestSecureLogins.java,145,,"    options.put(""debug"", ""true"");"
95457,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,68,,"  private static final String APPLICATION_RECORD = ""{\n"""
95458,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,69,,"      + ""  \""type\"" : \""JSONServiceRecord\"",\n"""
95459,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,76,,"      + ""    \""addresses\"" : [ {\n"""
95460,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,79,,"      + ""    } ]\n"""
95461,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,82,,"      + ""    \""addressType\"" : \""uri\"",\n"""
95462,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,115,,"      + ""}\n"";"
95463,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,119,,"      + ""  \""external\"" : [ ],\n"""
95464,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,120,,"      + ""  \""internal\"" : [ ],\n"""
95465,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,163,,"    setRegistryDNS(new RegistryDNS(""TestRegistry""));"
95466,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,174,,"    conf.set(RegistryConstants.KEY_DNS_DOMAIN, ""dev.test"");"
95467,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,175,,"    conf.set(RegistryConstants.KEY_DNS_ZONE_SUBNET, ""172.17.0"");"
95468,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,191,,"    ServiceRecord record = getMarshal().fromBytes(""somepath"","
95469,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,197,,"    Record[] recs = assertDNSQuery(""test1.root.dev.test."");"
95470,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,198,,"    assertEquals(""wrong result"", ""192.168.1.5"","
95471,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,204,,"    assertTrue(""not an ARecord"", recs[isSecure() ? 2 : 1] instanceof ARecord);"
95472,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,237,,"        ""/registry/users/root/services/org-apache-slider/test1/components/"""
95473,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,238,,"            + ""ctr-e50-1451931954322-0016-01-000002"","
95474,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,243,,"        assertDNSQuery(""ctr-e50-1451931954322-0016-01-000002.dev.test."");"
95475,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,244,,"    assertEquals(""wrong result"", ""172.17.0.19"","
95476,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,247,,"    recs = assertDNSQuery(""httpd-1.test1.root.dev.test."", 1);"
95477,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestRegistryDNS.java,302,,"    Record[] recs = assertDNSQuery(""19.0.17.172.in-addr.arpa."", Type.PTR, 1);"
95478,./TargetProjects/hadoop/hadoop-common-project/hadoop-registry/src/test/java/org/apache/hadoop/registry/server/dns/TestReverseZoneUtils.java,29,,"  private static final String NET = ""172.17.4.0"";"
95479,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/fs/Hdfs.java,255,,"        throw new FileNotFoundException(""File "" + src + "" does not exist."");"
95480,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/fs/Hdfs.java,255,,"        throw new FileNotFoundException(""File "" + src + "" does not exist."");"
95481,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java,682,,"              LOG.debug(""Thread interrupted"", e);"
95482,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,329,,"            "" a symlink to a non-DistributedFileSystem: "" + f + "" -> "" + p);"
95483,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,798,,"                  + ""non-DistributedFileSystem: "" + src + "" -> "" + p);"
95484,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,905,,"  @SuppressWarnings(""deprecation"")"
95485,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,1108,,"      throw new FileNotFoundException(""File "" + p + "" does not exist."");"
95486,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,1108,,"      throw new FileNotFoundException(""File "" + p + "" does not exist."");"
95487,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,1761,,"          throw new FileNotFoundException(""File does not exist: "" + p);"
95488,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,2081,,"          throw new UnsupportedOperationException(""Cannot perform snapshot"""
95489,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,2082,,"              + "" operations on a symlink to a non-DistributedFileSystem: """
95490,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,2474,,"              + "" on a symlink to a non-DistributedFileSystem: """
95491,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java,2959,,"        errMessage += ""\r\n"" +"
95492,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ViewDistributedFileSystem.java,522,,"  @SuppressWarnings(""deprecation"")"
95493,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ViewDistributedFileSystem.java,1261,,"          ""No DFS available in child file systems."");"
95494,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/DfsClientConf.java,794,,"                    + "" = {}"", useLegacyBlockReaderLocal);"
95495,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java,331,,"                LOG.debug(""Lease renewer daemon for "" + clientsString()"
95496,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java,332,,"                    + "" with renew id "" + id + "" started"");"
95497,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/inotify/Event.java,91,,"          + "", timestamp="" + timestamp + ""]"";"
95498,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelperClient.java,1908,,"      throw new IllegalArgumentException(""Unexpected value: "" + a);"
95499,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/ECPolicyLoader.java,97,,"      throw new RuntimeException(""Bad EC policy configuration file: """
95500,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/JsonUtilClient.java,165,,"      ecPolicy = new ErasureCodingPolicy((String) ecPolicyObj.get(""name""),"
95501,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/fs/TestXAttr.java,38,,"      .setName(""name"")"
95502,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestDefaultNameNodePort.java,36,,"        DFSUtilClient.getNNAddress(""foo"").getPort());"
95503,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestPeerCache.java,155,,"    DatanodeID dnId = new DatanodeID(""192.168.0.1"","
95504,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestPeerCache.java,156,,"          ""fakehostname"", ""fake_datanode_id"","
95505,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/protocol/TestErasureCodingPolicy.java,33,,"  private static final ECSchema SCHEMA_1 = new ECSchema(""one"", 1, 2, null);"
95506,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/protocol/TestErasureCodingPolicy.java,40,,"      fail(""Instantiated invalid ErasureCodingPolicy"");"
95507,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestConfiguredFailoverProxyProvider.java,95,,"    ns1Uri = new URI(""hdfs://"" + ns1);"
95508,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestRequestHedgingProxyProvider.java,99,,"    Mockito.when(badMock.getStats()).thenThrow(new IOException(""Bad mock !!""));"
95509,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestRequestHedgingProxyProvider.java,277,,"      Assert.fail(""Should fail since previously successful proxy now fails "");"
95510,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestRequestHedgingProxyProvider.java,336,,"      provider.getProxy().proxy.getBlockLocations(""/tmp/test.file"", 0L, 20L);"
95511,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestRequestHedgingProxyProvider.java,337,,"      Assert.fail(""Should fail since the active namenode throws"""
95512,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestRequestHedgingProxyProvider.java,338,,"          + "" FileNotFoundException!"");"
95513,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,50,,"    out.println(""<?xml version=\""1.0\""?>"");"
95514,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,51,,"    out.println(""<configuration>"");"
95515,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,52,,"    out.println(""<layoutversion>1</layoutversion>"");"
95516,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,53,,"    out.println(""<schemas>"");"
95517,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,54,,"    out.println(""  <schema id=\""RSk12m4\"">"");"
95518,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,56,,"    out.println(""    <k>12</k>"");"
95519,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,57,,"    out.println(""    <m>4</m>"");"
95520,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,58,,"    out.println(""  </schema>"");"
95521,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,59,,"    out.println(""  <schema id=\""RS-legacyk12m4\"">"");"
95522,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,64,,"    out.println(""</schemas>"");"
95523,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,65,,"    out.println(""<policies>"");"
95524,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,66,,"    out.println(""  <policy>"");"
95525,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,67,,"    out.println(""    <schema>RSk12m4</schema>"");"
95526,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,69,,"    out.println(""  </policy>"");"
95527,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,74,,"    out.println(""</policies>"");"
95528,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,75,,"    out.println(""</configuration>"");"
95529,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,112,,"    out.println(""    <codec>RS</codec>"");"
95530,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/util/TestECPolicyLoader.java,117,,"    out.println(""    <codec>RS-legacy</codec>"");"
95531,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/web/TestByteRangeInputStream.java,148,,"    Whitebox.setInternalState(bris, ""status"","
95532,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/web/TestTokenAspect.java,182,,"    fs.initialize(new URI(""dummyfs://127.0.0.1:1234""), conf);"
95533,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java,145,,"  public static final String RENAME_JSON = ""boolean"";"
95534,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java,108,,"  @SuppressWarnings({""unchecked""})"
95535,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java,258,,"  @SuppressWarnings({""unchecked"", ""rawtypes""})"
95536,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java,1688,,"            + "". Please check your fs.defaultFS configuration"");"
95537,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/FSOperations.java,1909,,"            + ""not supported for HttpFs on "" + fs.getClass()"
95538,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java,243,,"  @Path(""{path:.*}"")"
95539,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java,246,,"  public Response get(@PathParam(""path"") String path,"
95540,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java,262,,"    MDC.put(""hostname"", request.getRemoteAddr());"
95541,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java,269,,"        final String js = JsonUtil.toJsonString(""Location"", redirectURL);"
95542,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java,304,,"      AUDIT_LOG.info(""[{}]"", path);"
95543,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java,362,,"    log.info(""    Version           : {}"", serverInfo.getProperty(name + "".version"", ""undef""));"
95544,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/instrumentation/InstrumentationService.java,65,,"  @SuppressWarnings(""unchecked"")"
95545,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,116,,"    assertTrue(new File(homeDir, ""conf"").mkdir());"
95546,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,197,,"    Path path = new Path(getProxiedFSTestDir(), ""foo.txt"");"
95547,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,323,,"    Path path = new Path(getProxiedFSTestDir(), ""foo"");"
95548,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,456,,"      Path path = new Path(""/tmp/tmp-snap-test"");"
95549,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,809,,"      final String name1 = ""user.a1"";"
95550,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,811,,"      final String name2 = ""user.a2"";"
95551,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,813,,"      final String name3 = ""user.a3"";"
95552,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,815,,"      final String name4 = ""trusted.a1"";"
95553,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,1602,,"      fs.createSnapshot(path, ""snap1"");"
95554,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/client/BaseTestHttpFSWith.java,1606,,"      fs.createSnapshot(path, ""snap2"");"
95555,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestCheckUploadContentTypeFilter.java,34,,"    test(""PUT"", HttpFSFileSystem.Operation.CREATE.toString(), ""application/octet-stream"", true, false);"
95556,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestCheckUploadContentTypeFilter.java,44,,"    test(""PUT"", HttpFSFileSystem.Operation.CREATE.toString(), ""plain/text"", false, false);"
95557,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSAccessControlled.java,96,,"    Assert.assertTrue(new File(homeDir, ""conf"").mkdir());"
95558,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSAccessControlled.java,173,,"    conn.setRequestMethod(""GET"");"
95559,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSAccessControlled.java,205,,"    conn.setRequestMethod(""PUT"");"
95560,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSAccessControlled.java,237,,"    conn.setRequestMethod(""DELETE"");"
95561,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSAccessControlled.java,269,,"    conn.setRequestMethod(""POST"");"
95562,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSAccessControlled.java,325,,"    conf.setStrings(""httpfs.access.mode"", ""read-write"");"
95563,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,133,,"          put(""LISTSTATUS"","
95564,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,135,,"          put(""MKDIRS"","
95565,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,137,,"          put(""GETFILESTATUS"","
95566,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,205,,"    Assert.assertTrue(new File(homeDir, ""conf"").mkdir());"
95567,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,348,,"    conn.setRequestMethod(""PUT"");"
95568,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,476,,"    fs.mkdirs(new Path(""/tmp""));"
95569,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,534,,"    conn.addRequestProperty(""Content-Type"", ""application/octet-stream"");"
95570,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,772,,"    createWithHttp(""/perm/p-777"", ""777"");"
95571,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,806,,"    String statusJson = getStatus(path, ""GETXATTRS"");"
95572,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,879,,"    Assert.assertEquals(-1, statusJson.indexOf(""aclBit""));"
95573,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,884,,"    statusJson = getStatus(path, ""GETACLSTATUS"");"
95574,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1068,,"        .setName(""user2"")"
95575,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1080,,"    createWithHttp(notUnmaskedFile, ""700"");"
95576,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1352,,"        ""CREATESNAPSHOT"","
95577,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1362,,"    result = getStatus(""/tmp/tmp-snap-test/.snapshot"","
95578,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1483,,"    dfs.createSnapshot(path, ""snap1"");"
95579,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1487,,"    dfs.createSnapshot(path, ""snap2"");"
95580,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java,1660,,"    String location = (String)json.get(""Location"");"
95581,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServerNoACLs.java,101,,"    Assert.assertTrue(new File(homeDir, ""conf"").mkdir());"
95582,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServerNoXAttrs.java,102,,"    Assert.assertTrue(new File(homeDir, ""conf"").mkdir());"
95583,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSWithKerberos.java,69,,"    Assert.assertTrue(new File(homeDir, ""conf"").mkdir());"
95584,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,54,,"    Server server = new Server(""server"", getAbsolutePath(""/a""),"
95585,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,63,,"    assertEquals(server.getPrefixedName(""name""), ""server.name"");"
95586,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,63,,"    assertEquals(server.getPrefixedName(""name""), ""server.name"");"
95587,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,99,,"  @TestException(exception = ServerException.class, msgRegExp = ""S01.*"")"
95588,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,102,,"    File homeDir = new File(TestDirHelper.getTestDir(), ""home"");"
95589,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,104,,"    conf.set(""server.services"", TestService.class.getName());"
95590,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,110,,"  @TestException(exception = ServerException.class, msgRegExp = ""S02.*"")"
95591,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,127,,"    assertTrue(new File(homeDir, ""log"").mkdir());"
95592,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,128,,"    assertTrue(new File(homeDir, ""temp"").mkdir());"
95593,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,143,,"    File configDir = new File(homeDir, ""conf"");"
95594,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,326,,"      LIFECYCLE.add(""serverStatusChange"");"
95595,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,392,,"    assertEquals(server.getConfig().get(""testserver.a""), ""default"");"
95596,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,665,,"    assertEquals(ORDER.get(4), ""s3.destroy"");"
95597,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServer.java,666,,"    assertEquals(ORDER.get(5), ""s1.destroy"");"
95598,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServerConstructor.java,39,,"      {""server"", null, null, null, null, null},"
95599,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServerConstructor.java,41,,"      {""server"", ""foo"", null, null, null, null},"
95600,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/server/TestServerConstructor.java,42,,"      {""server"", ""/tmp"", null, null, null, null},"
95601,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/hadoop/TestFileSystemAccessService.java,61,,"    hadoopConf.set(""foo"", ""FOO"");"
95602,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/hadoop/TestFileSystemAccessService.java,74,,"    conf.set(""server.services"", services);"
95603,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/hadoop/TestFileSystemAccessService.java,75,,"    Server server = new Server(""server"", dir, dir, dir, dir, conf);"
95604,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/hadoop/TestFileSystemAccessService.java,92,,"    conf.set(""server.hadoop.authentication.type"", ""kerberos"");"
95605,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/hadoop/TestFileSystemAccessService.java,110,,"    conf.set(""server.hadoop.authentication.kerberos.keytab"", ""/tmp/foo"");"
95606,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/hadoop/TestFileSystemAccessService.java,265,,"    conf.set(""server.hadoop.filesystem.cache.purge.timeout"", ""0"");"
95607,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/instrumentation/TestInstrumentationService.java,285,,"        return ""foo"";"
95608,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/instrumentation/TestInstrumentationService.java,348,,"    assertNotNull(snapshot.get(""jvm""));"
95609,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/instrumentation/TestInstrumentationService.java,349,,"    assertNotNull(snapshot.get(""counters""));"
95610,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/instrumentation/TestInstrumentationService.java,352,,"    assertNotNull(snapshot.get(""samplers""));"
95611,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/DummyGroupMapping.java,37,,"    else if (user.equals(""nobody"")) {"
95612,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/servlet/TestMDCFilter.java,48,,"    Mockito.when(request.getMethod()).thenReturn(""METHOD"");"
95613,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/servlet/TestMDCFilter.java,49,,"    Mockito.when(request.getPathInfo()).thenReturn(""/pathinfo"");"
95614,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/servlet/TestMDCFilter.java,59,,"        assertEquals(MDC.get(""hostname""), null);"
95615,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/servlet/TestMDCFilter.java,60,,"        assertEquals(MDC.get(""user""), null);"
95616,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/servlet/TestMDCFilter.java,61,,"        assertEquals(MDC.get(""method""), ""METHOD"");"
95617,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/servlet/TestMDCFilter.java,62,,"        assertEquals(MDC.get(""path""), ""/pathinfo"");"
95618,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestCheck.java,34,,"    assertEquals(Check.notNull(""value"", ""name""), ""value"");"
95619,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestCheck.java,34,,"    assertEquals(Check.notNull(""value"", ""name""), ""value"");"
95620,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestCheck.java,121,,"    assertEquals(Check.gt0(120, ""test""), 120);"
95621,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestConfigurationUtils.java,61,,"    srcConf.set(""testParameter1"", ""valueFromSource"");"
95622,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestConfigurationUtils.java,61,,"    srcConf.set(""testParameter1"", ""valueFromSource"");"
95623,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestConfigurationUtils.java,62,,"    srcConf.set(""testParameter2"", ""valueFromSource"");"
95624,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestConfigurationUtils.java,65,,"    targetConf.set(""testParameter3"", ""valueFromTarget"");"
95625,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestConfigurationUtils.java,82,,"    targetConf.set(""testParameter2"", ""originalValueFromTarget"");"
95626,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/util/TestConfigurationUtils.java,101,,"    conf.set(""b"", ""${a}"");"
95627,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/test/KerberosTestUtils.java,82,,"      options.put(""useKeyTab"", ""true"");"
95628,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/test/TestHFSTestCase.java,146,,"      OutputStream os = fs.create(new Path(TestHdfsHelper.getHdfsTestDir(), ""foo""));"
95629,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/test/TestHTestCase.java,128,,"      resp.getWriter().write(""foo"");"
95630,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/test/TestFuseDFS.java,90,,"    LOG.debug(""EXEC ""+cmd);"
95631,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/test/TestFuseDFS.java,293,,"    execAssertSucceeds(""rm "" + f.getAbsolutePath());"
95632,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java,117,,"      LOG.debug(""MOUNT NULLOP : "" + "" client: "" + client);"
95633,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java,348,,"      LOG.warn(""Exception"", r);"
95634,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java,365,,"      LOG.error(""Can't get path for fileId: {}"", handle.getFileId());"
95635,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java,537,,"        LOG.info(""Can't get path for dir fileId: {}"", dirHandle.getFileId());"
95636,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java,684,,"      if (rtmax < target.getBytes(Charset.forName(""UTF-8"")).length) {"
95637,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/WriteManager.java,260,,"        LOG.error(""Should not get commit return code: "" + ret.name());"
95638,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestExportsTable.java,52,,"    config.setInt(""nfs3.mountd.port"", 0);"
95639,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestExportsTable.java,53,,"    config.setInt(""nfs3.server.port"", 0);"
95640,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestExportsTable.java,54,,"    config.set(""nfs.http.address"", ""0.0.0.0:0"");"
95641,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestExportsTable.java,54,,"    config.set(""nfs.http.address"", ""0.0.0.0:0"");"
95642,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestExportsTable.java,109,,"      ConfigUtil.addLink(config, clusterName, ""/hdfs1"","
95643,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestExportsTable.java,111,,"      ConfigUtil.addLink(config, clusterName, ""/hdfs2"","
95644,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestOpenFileCtxCache.java,51,,"    OpenFileCtx context1 = new OpenFileCtx(fos, attr, ""/dumpFilePath"","
95645,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestReaddir.java,104,,"    DFSTestUtil.createFile(hdfs, new Path(testdir + ""/f2""), 0, (short) 1, 0);"
95646,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestReaddir.java,124,,"        securityHandler, new InetSocketAddress(""localhost"", 1234));"
95647,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestRpcProgramNfs3.java,187,,"    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");"
95648,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestRpcProgramNfs3.java,198,,"        new InetSocketAddress(""localhost"", 1234));"
95649,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestRpcProgramNfs3.java,199,,"    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,"
95650,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestRpcProgramNfs3.java,241,,"    LOOKUP3Request lookupReq = new LOOKUP3Request(handle, ""bar"");"
95651,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestRpcProgramNfs3.java,291,,"    SYMLINK3Request req = new SYMLINK3Request(handle, ""fubar"", new SetAttr3(),"
95652,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestRpcProgramNfs3.java,297,,"    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,"
95653,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestViewfsWithNfs3.java,149,,"    viewFs.delete(new Path(""/hdfs2/dir2""), true);"
95654,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestWrites.java,143,,"    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,"
95655,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestWrites.java,468,,"        System.getProperty(""user.name""));"
95656,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-nfs/src/test/java/org/apache/hadoop/hdfs/nfs/nfs3/TestWrites.java,503,,"          securityHandler, new InetSocketAddress(""localhost"", 1234));"
95657,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/NamenodeBeanMetrics.java,101,,"      this.fsBeanName = MBeans.register(""NameNode"", ""FSNamesystem"", bean);"
95658,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/NamenodeBeanMetrics.java,414,,"    return ""N/A"";"
95659,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java,550,,"    innerInfo.put(""min"", StringUtils.format(""%.2f%%"", min));"
95660,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RBFConfigKeys.java,71,,"      ""0.0.0.0:"" + DFS_ROUTER_RPC_PORT_DEFAULT;"
95661,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterFederationRename.java,180,,"        new Path(""hdfs://"" + srcLoc.getNameserviceId() + srcLoc.getDest());"
95662,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterFederationRename.java,273,,"      throw new IOException(""map="" + map + "" is negative. Please check """
95663,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java,444,,"          "" with params "" + Arrays.deepToString(params) + "" from """
95664,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java,831,,"    @SuppressWarnings(""unchecked"")"
95665,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterWebHdfsMethods.java,235,,"        final String js = JsonUtil.toJsonString(""Location"", uri);"
95666,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/protocol/impl/pb/FederationProtocolPBTranslator.java,55,,"  @SuppressWarnings(""unchecked"")"
95667,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,132,,"          {""-add"", ""-update"", ""-rm"", ""-ls"", ""-getDestination"", ""-setQuota"","
95668,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,132,,"          {""-add"", ""-update"", ""-rm"", ""-ls"", ""-getDestination"", ""-setQuota"","
95669,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,132,,"          {""-add"", ""-update"", ""-rm"", ""-ls"", ""-getDestination"", ""-setQuota"","
95670,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,132,,"          {""-add"", ""-update"", ""-rm"", ""-ls"", ""-getDestination"", ""-setQuota"","
95671,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,132,,"          {""-add"", ""-update"", ""-rm"", ""-ls"", ""-getDestination"", ""-setQuota"","
95672,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,132,,"          {""-add"", ""-update"", ""-rm"", ""-ls"", ""-getDestination"", ""-setQuota"","
95673,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,133,,"              ""-setStorageTypeQuota"", ""-clrQuota"", ""-clrStorageTypeQuota"","
95674,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,133,,"              ""-setStorageTypeQuota"", ""-clrQuota"", ""-clrStorageTypeQuota"","
95675,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,133,,"              ""-setStorageTypeQuota"", ""-clrQuota"", ""-clrStorageTypeQuota"","
95676,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,134,,"              ""-safemode"", ""-nameservice"", ""-getDisabledNameservices"","
95677,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,134,,"              ""-safemode"", ""-nameservice"", ""-getDisabledNameservices"","
95678,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,134,,"              ""-safemode"", ""-nameservice"", ""-getDisabledNameservices"","
95679,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,135,,"              ""-refresh"", ""-refreshRouterArgs"","
95680,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java,136,,"              ""-refreshSuperUserGroupsConfiguration""};"
95681,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/MiniRouterDFSCluster.java,491,,"            ""127.0.0.1:"" + context.rpcPort);"
95682,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/MiniRouterDFSCluster.java,495,,"            ""0.0.0.0"");"
95683,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/MiniRouterDFSCluster.java,549,,"    conf.set(DFS_ROUTER_RPC_ADDRESS_KEY, ""127.0.0.1:0"");"
95684,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/MockNamenode.java,341,,"        throw new FileNotFoundException(""File does not exist "" + src);"
95685,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/MockNamenode.java,375,,"          fs.put(path.toString(), ""DIRECTORY"");"
95686,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/MockNamenode.java,379,,"      fs.put(src, ""FILE"");"
95687,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/RouterConfigBuilder.java,182,,"      conf.set(RBFConfigKeys.DFS_ROUTER_RPC_ADDRESS_KEY, ""127.0.0.1:0"");"
95688,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/fairness/TestRouterRpcFairnessPolicyController.java,63,,"    conf.setInt(DFS_ROUTER_FAIR_HANDLER_COUNT_KEY_PREFIX + ""ns1"", 30);"
95689,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/fairness/TestRouterRpcFairnessPolicyController.java,75,,"      assertTrue(routerRpcFairnessPolicyController.acquirePermit(""ns2""));"
95690,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,100,,"    mountTable.addEntry(MountTable.newInstance(""/tmp"", map));"
95691,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,103,,"    map = getMountTableEntry(""3"", ""/user"");"
95692,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,112,,"    mountTable.addEntry(MountTable.newInstance(""/user/a"", map));"
95693,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,116,,"    mountTable.addEntry(MountTable.newInstance(""/user/b/file1.txt"", map));"
95694,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,120,,"    mountTable.addEntry(MountTable.newInstance(""/user/a/demo/test/a"", map));"
95695,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,135,,"    MountTable multiEntry = MountTable.newInstance(""/multi"", map);"
95696,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,211,,"        mountTable.getDestinationForPath(""/unknown"").toString());"
95697,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,309,,"    compareLists(mounts, new String[] {""tmp"", ""user"", ""usr"","
95698,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,309,,"    compareLists(mounts, new String[] {""tmp"", ""user"", ""usr"","
95699,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,309,,"    compareLists(mounts, new String[] {""tmp"", ""user"", ""usr"","
95700,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,310,,"        ""readonly"", ""multi""});"
95701,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,310,,"        ""readonly"", ""multi""});"
95702,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,385,,"        ""user/a"", ""/user/a/demo/a"", ""/user/a/demo/b"", ""/user/b/file1.txt"","
95703,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,385,,"        ""user/a"", ""/user/a/demo/a"", ""/user/a/demo/b"", ""/user/b/file1.txt"","
95704,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,385,,"        ""user/a"", ""/user/a/demo/a"", ""/user/a/demo/b"", ""/user/b/file1.txt"","
95705,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,600,,"    mountTable.addEntry(MountTable.newInstance(""/testupdate"", map));"
95706,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,669,,"    Map<String, String> map1 = getMountTableEntry(""1"", ""/testlocationcache"");"
95707,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMountTableResolver.java,674,,"            ""/anothertestlocationcache"");"
95708,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,52,,"    map1.put(""subcluster0"", ""/tmp"");"
95709,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,58,,"    mapDefault.put(""subcluster1"", ""/"");"
95710,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,59,,"    mapDefault.put(""subcluster2"", ""/"");"
95711,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,65,,"    mapHash.put(""subcluster0"", ""/hash"");"
95712,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,74,,"    mapHashAll.put(""subcluster0"", ""/hashall"");"
95713,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,83,,"    mapLocal.put(""subcluster0"", ""/local"");"
95714,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,92,,"    mapRandom.put(""subcluster0"", ""/random"");"
95715,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/TestMultipleDestinationResolver.java,101,,"    mapReadOnly.put(""subcluster0"", ""/readonly"");"
95716,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/order/TestAvailableSpaceResolver.java,66,,"    PathLocation loc = mountTableResolver.getDestinationForPath(""/space"");"
95717,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/order/TestAvailableSpaceResolver.java,117,,"      records.add(newMembershipState(""subcluster"" + i, i));"
95718,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/order/TestLocalResolver.java,70,,"    records.add(newMembershipState(""client0"", ""subcluster0""));"
95719,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/order/TestLocalResolver.java,96,,"    mapLocal.put(""subcluster0"", ""/local"");"
95720,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/resolver/order/TestLocalResolver.java,104,,"    PathLocation dest = resolver.getDestinationForPath(""/local/file0.txt"");"
95721,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestDisableNameservices.java,108,,"    destinations.put(""ns0"", ""/dirns0"");"
95722,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouter.java,68,,"    conf.set(RBFConfigKeys.DFS_ROUTER_RPC_BIND_HOST_KEY, ""0.0.0.0"");"
95723,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouter.java,69,,"    conf.set(RBFConfigKeys.DFS_ROUTER_RPC_ADDRESS_KEY, ""127.0.0.1:0"");"
95724,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouter.java,77,,"    conf.set(DFSConfigKeys.DFS_NAMESERVICES, ""ns0"");"
95725,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java,107,,"        createNamenodeReport(""ns0"", ""nn1"", HAServiceState.ACTIVE));"
95726,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java,109,,"        createNamenodeReport(""ns1"", ""nn1"", HAServiceState.ACTIVE));"
95727,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java,134,,"        new RemoteLocation(""ns0"", ""/testdir"", null);"
95728,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java,175,,"        ""/testpath"", Collections.singletonMap(""ns0"", ""/testdir""),"
95729,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdmin.java,229,,"        ""/readonly"", Collections.singletonMap(""ns0"", ""/testdir""),"
95730,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,120,,"        createNamenodeReport(""ns0"", ""nn1"", HAServiceState.ACTIVE));"
95731,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,122,,"        createNamenodeReport(""ns1"", ""nn1"", HAServiceState.ACTIVE));"
95732,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,159,,"    String nsId = ""ns0,ns1"";"
95733,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,162,,"    String[] argv = new String[] {""-add"", src, nsId, dest};"
95734,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,187,,"    argv = new String[] {""-add"", src, nsId, dest, ""-readonly"","
95735,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,188,,"        ""-faulttolerant"", ""-order"", ""HASH_ALL""};"
95736,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,188,,"        ""-faulttolerant"", ""-order"", ""HASH_ALL""};"
95737,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,188,,"        ""-faulttolerant"", ""-order"", ""HASH_ALL""};"
95738,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,307,,"    argv = new String[] {""-ls"", src};"
95739,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,310,,"    assertTrue(""Wrong response: "" + response, response.contains(src));"
95740,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,319,,"    argv = new String[] {""-ls"", srcWithSlash, ""check"", ""check2""};"
95741,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,377,,"        {dir1, dir1 + ""/subdir1"", dir2, dir2 + ""/subdir1"", dir2 + ""/subdir2""};"
95742,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,421,,"    argv = new String[] {""-rm"", src};"
95743,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,533,,"          ""-owner"", superUserName, ""-group"", superUserName, ""-mode"", ""755""};"
95744,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,533,,"          ""-owner"", superUserName, ""-group"", superUserName, ""-mode"", ""755""};"
95745,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,533,,"          ""-owner"", superUserName, ""-group"", superUserName, ""-mode"", ""755""};"
95746,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,533,,"          ""-owner"", superUserName, ""-group"", superUserName, ""-mode"", ""755""};"
95747,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,542,,"      argv = new String[]{""-update"", ""/testpath3-1"", ""ns0"", ""/testdir3-2"","
95748,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,571,,"      String[] argv = new String[]{""-add"", ""/testpath4-1"", ""ns0"", ""/testdir4-1"","
95749,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,572,,"          ""-owner"", testUserA, ""-group"", testGroup, ""-mode"", ""775""};"
95750,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,783,,"            + ""[-order HASH|LOCAL|RANDOM|HASH_ALL|SPACE] """
95751,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,801,,"    argv = new String[] {""-setQuota"", src};"
95752,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,813,,"    argv = new String[] {""-safemode""};"
95753,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,818,,"    argv = new String[] {""-nameservice"", nsId};"
95754,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,824,,"    argv = new String[] {""-getDestination""};"
95755,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,869,,"    String src = ""/type-QuotaMounttable"";"
95756,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,984,,"    argv = new String[] {""-setQuota"", src, ""-nsQuota"", String.valueOf(nsQuota),"
95757,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,985,,"        ""-ssQuota"", String.valueOf(ssQuota)};"
95758,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1073,,"        new String[] {""-safemode"", ""enter""}));"
95759,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1082,,"        new String[] {""-safemode"", ""get""}));"
95760,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1086,,"        new String[] {""-safemode"", ""leave""}));"
95761,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1095,,"    assertTrue(out.toString().contains(""false""));"
95762,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1191,,"        ""-add"", ""test-createInvalidEntry"", ""ns0"", ""/createInvalidEntry""};"
95763,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1195,,"        ""-add"", ""/test-createInvalidEntry"", ""ns0"", ""createInvalidEntry""};"
95764,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminCLI.java,1478,,"    argv = new String[] {""-update"", src, ""ns1"", ""/tmp"", ""-faulttolerant""};"
95765,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,81,,"    RefreshRegistry.defaultRegistry().register(""firstHandler"", firstHandler);"
95766,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,86,,"        ""secondHandler"", new String[]{""one"", ""two""})).thenReturn("
95767,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,86,,"        ""secondHandler"", new String[]{""one"", ""two""})).thenReturn("
95768,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,86,,"        ""secondHandler"", new String[]{""one"", ""two""})).thenReturn("
95769,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,102,,"    String[] args = new String[]{""-refreshRouterArgs"", ""nn""};"
95770,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,109,,"    String[] argv = new String[]{""-refreshRouterArgs"", ""localhost:"" +"
95771,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,169,,"    RefreshRegistry.defaultRegistry().register(""sharedId"", firstHandler);"
95772,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,203,,"    RefreshRegistry.defaultRegistry().register(""shared"", handlerOne);"
95773,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterAdminGenericRefresh.java,235,,"    RefreshRegistry.defaultRegistry().register(""exceptional"","
95774,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterFederationRename.java,172,,"        ""Expect RemoteException."", () -> {"
95775,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterFederationRenamePermission.java,92,,"    foo = UserGroupInformation.createRemoteUser(""foo"");"
95776,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterFederationRenamePermission.java,128,,"    LambdaTestUtils.intercept(RemoteException.class, ""AccessControlException"","
95777,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterFederationRenamePermission.java,129,,"        ""Expect AccessControlException."", () -> {"
95778,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,102,,"    nnContext0 = cluster.getNamenode(""ns0"", null);"
95779,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,103,,"    nnContext1 = cluster.getNamenode(""ns1"", null);"
95780,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,142,,"        ""/readonly"", Collections.singletonMap(""ns0"", ""/testdir""));"
95781,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,320,,"      MountTable addEntry = MountTable.newInstance(""/testA"","
95782,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,445,,"    addEntry.setGroupName(""group1"");"
95783,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,446,,"    addEntry.setOwnerName(""owner1"");"
95784,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,474,,"          Collections.singletonMap(""ns0"", ""/tmp/testdir""));"
95785,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,477,,"      nnFs0.setOwner(new Path(""/tmp/testdir""), ""Aowner"", ""Agroup"");"
95786,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,477,,"      nnFs0.setOwner(new Path(""/tmp/testdir""), ""Aowner"", ""Agroup"");"
95787,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,485,,"      nnFs0.delete(new Path(""/tmp""), true);"
95788,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,499,,"      destMap.put(""ns1"", ""/tmp/testdir01"");"
95789,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,648,,"      addEntry = MountTable.newInstance(""/testlist/tmp0"","
95790,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,651,,"      addEntry = MountTable.newInstance(""/testlist/tmp1"","
95791,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,677,,"      MountTable addEntry = MountTable.newInstance(""/testdelete/subdir"","
95792,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,713,,"      addEntry = MountTable.newInstance(""/testrename2/sub"","
95793,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,716,,"      nnFs0.mkdirs(new Path(""/testrename1/sub/sub""));"
95794,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTable.java,717,,"      nnFs0.mkdirs(new Path(""/testrename2""));"
95795,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTableCacheRefresh.java,136,,"        Collections.singletonMap(""ns0"", ""/addPathDest""), Time.now(),"
95796,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMountTableCacheRefreshSecure.java,140,,"        Collections.singletonMap(""ns0"", ""/addPathDest""), Time.now(),"
95797,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterMultiRack.java,96,,"    result = routerFs.getECTopologyResultForPolicies(""RS-10-4-1024k"");"
95798,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeHeartbeat.java,125,,"    conf.set(DFS_NAMESERVICES, ""ns1"");"
95799,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeMonitoring.java,81,,"  private List<String> nsIds = asList(""ns0"", ""ns1"");"
95800,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeMonitoring.java,83,,"  private List<String> nnIds = asList(""nn0"", ""nn1"");"
95801,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeMonitoring.java,230,,"    testConfig(asList(""ns1.nn0""), ""ns1.nn0"");"
95802,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeMonitoring.java,231,,"    testConfig(asList(""ns1.nn0"", ""ns1.nn1""), ""ns1.nn0,ns1.nn1"");"
95803,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeMonitoring.java,368,,"            .setDatanodeUuid(""dn0"")"
95804,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNamenodeMonitoring.java,382,,"            .setDatanodeUuid(""dn1"")"
95805,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNetworkTopologyServlet.java,90,,"    URL url = new URL(""http:/"" + httpAddress + ""/topology"");"
95806,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterNetworkTopologyServlet.java,90,,"    URL url = new URL(""http:/"" + httpAddress + ""/topology"");"
95807,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,143,,"        Collections.singletonMap(""ns0"", ""/testdir1""));"
95808,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,149,,"        Collections.singletonMap(""ns1"", ""/testdir2""));"
95809,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,244,,"        ""The DiskSpace quota is exceeded"", ""Expect quota exceed exception."","
95810,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,245,,"        () -> appendData(""/type0/file"", routerClient, BLOCK_SIZE));"
95811,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,326,,"    MountTable mountTable = MountTable.newInstance(""/setquota"","
95812,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,414,,"    QuotaUsage usage = client.getQuotaUsage(""/type0"");"
95813,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,636,,"    nnFs.mkdirs(new Path(""/testsync""));"
95814,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,697,,"    nnFs1.mkdirs(new Path(""/testdir11""));"
95815,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,698,,"    nnFs2.mkdirs(new Path(""/testdir12""));"
95816,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,786,,"    nnFs.mkdirs(new Path(""/testdir14""));"
95817,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,788,,"    MountTable mountTable = MountTable.newInstance(""/setdir1"","
95818,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,795,,"    mountTable = MountTable.newInstance(""/setdir2"","
95819,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,892,,"    nnFs.mkdirs(new Path(""/testdir15""));"
95820,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,894,,"    MountTable mountTable = MountTable.newInstance(""/setdir"","
95821,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,1002,,"    QuotaUsage qu = qModule.getGlobalQuota(""/dir-1"");"
95822,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,1011,,"    qu = qModule.getGlobalQuota(""/dir-4"");"
95823,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterQuota.java,1061,,"    routerFs.mkdirs(new Path(""/dir-1/dir-normal""));"
95824,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,77,,"  private static final List<String> NS_IDS = Arrays.asList(""ns0"", ""ns1"");"
95825,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,77,,"  private static final List<String> NS_IDS = Arrays.asList(""ns0"", ""ns1"");"
95826,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,133,,"    destMap.put(""ns0"", ""/tmp"");"
95827,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,137,,"    MountTable addEntry = MountTable.newInstance(""/mount"", destMap);"
95828,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,140,,"    routerFs.mkdirs(new Path(""/mount/dir/dir""));"
95829,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,141,,"    DFSTestUtil.createFile(routerFs, new Path(""/mount/dir/file""), 100L, (short) 1,"
95830,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,162,,"    boolean isDirAll = rpcServer.isPathAll(""/mount/dir"");"
95831,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,229,,"    routerFs.setOwner(mountEntry, ""testuser"", ""testgroup"");"
95832,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,243,,"    routerFs.setStoragePolicy(mountEntry, ""COLD"");"
95833,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,248,,"    assertEquals(""HOT"", routerFs.getStoragePolicy(mountDest).getName());"
95834,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,253,,"    routerFs.setErasureCodingPolicy(mountEntry, ""RS-6-3-1024k"");"
95835,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,594,,"    Path path = new Path(""/testContentSummaryWithMultipleDest"");"
95836,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,626,,"    Path path = new Path(""/testContentSummaryMultipleDestWithMaxValue"");"
95837,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRPCMultipleDestinationMountTableResolver.java,653,,"    Path path = new Path(""/testWriteWithUnavailableSubCluster"");"
95838,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRpc.java,462,,"    String badPath = ""/unknownlocation/unknowndir"";"
95839,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRpc.java,480,,"      resolver.addLocation(""/parent"", ns, ""/parent"");"
95840,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRpc.java,759,,"    String dirPath = ""/testdir"";"
95841,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRpc.java,895,,"    FsPermission permission = new FsPermission(""777"");"
95842,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRpc.java,1775,,"    CachePoolInfo cpInfo = new CachePoolInfo(""Check"");"
95843,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterRpc.java,1801,,"    routerDFS.mkdirs(new Path(""/ns1/dir""));"
95844,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterSafemode.java,78,,"    conf.set(RBFConfigKeys.DFS_ROUTER_RPC_ADDRESS_KEY, ""127.0.0.1:0"");"
95845,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterTrash.java,73,,"  private static final String TRASH_ROOT = ""/user/"" + TEST_USER + ""/.Trash"";"
95846,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterTrash.java,180,,"        TEST_USER + ""/.Trash/Current"" + FILE)));"
95847,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterTrash.java,249,,"            ""/.Trash/"" + Time.now() + MOUNT_POINT));"
95848,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterTrash.java,253,,"    assertFalse(MountTableResolver.isTrashPath(""/home/user/"" +"
95849,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/router/TestRouterWebHdfsMethods.java,89,,"    verifyFile(""ns0"", path, true);"
95850,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java,106,,"        .createUserForTesting(""router"", getUserGroupForTesting()));"
95851,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java,110,,"        securityManager.getDelegationToken(new Text(""some_renewer""));"
95852,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/TestRouterSecurityManager.java,135,,"        .createUserForTesting(""abc"", new String[]{""router_group""});"
95853,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/token/TestZKDelegationTokenSecretManagerImpl.java,62,,"      tm1 = new DelegationTokenManager(conf, new Text(""bla""));"
95854,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/security/token/TestZKDelegationTokenSecretManagerImpl.java,70,,"              UserGroupInformation.getCurrentUser(), ""foo"");"
95855,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/store/FederationStateStoreTestUtils.java,263,,"        ""0.0.0.0:0"", ""0.0.0.0:0"", ""0.0.0.0:0"", ""http"", ""0.0.0.0:0"","
95856,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/store/TestStateStoreMembershipState.java,175,,"        nn, ""testcluster"", ""testblock-"" + ns, ""testrpc-""+ ns + nn,"
95857,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/store/TestStateStoreMembershipState.java,177,,"        ""http"", ""testweb-"" + ns + nn, state, false);"
95858,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/server/federation/store/records/TestMountTable.java,48,,"  private static final String DST_NS_0 = ""ns0"";"
95859,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java,183,,"  public static final String  DFS_NAMENODE_HTTP_ADDRESS_DEFAULT = ""0.0.0.0:"" + DFS_NAMENODE_HTTP_PORT_DEFAULT;"
95860,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java,550,,"          + DFS_NAMENODE_BACKUP_ADDRESS_KEY + "" is not configured."");"
95861,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java,748,,"          ""response"");"
95862,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java,232,,"      LOG.info(""Latest log is "" + latestLog + "" ; journal id: "" + journalId);"
95863,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java,369,,"        "" to "" + newEpoch + "" for client "" + Server.getRemoteIp() +"
95864,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java,186,,"      this.tracer = new Tracer.Builder(""JournalNode"")."
95865,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenSecretManager.java,347,,"      throw new InvalidToken(""Block token with "" + id"
95866,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java,254,,"    LOG.info(key + "" = "" + v + "" (default="" + defaultValue + "")"");"
95867,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java,758,,"      System.out.println(e + "".  Exiting ..."");"
95868,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfo.java,128,,"    assert this.triplets != null : ""BlockInfo is not initialized"";"
95869,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfo.java,129,,"    assert index >= 0 && index*3 < triplets.length : ""Index is out of bound"";"
95870,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java,509,,"      throw new IOException(""Unexpected configuration parameters: """
95871,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java,511,,"          + "" = "" + minR + "" <= 0"");"
95872,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java,262,,"        LOG.warn(""Problem connecting to server: "" + nnAddr);"
95873,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolManager.java,204,,"          ""toAdd: "" + Joiner.on("","").useForNull(""<default>"").join(toAdd) +"
95874,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java,422,,"        + "" CTime = "" + this.getCTime()"
95875,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockReceiver.java,248,,"              "" while receiving block "" + block + "" from "" + inAddr);"
95876,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockRecoveryWorker.java,171,,"              + block + "", datanode="" + id + "")"", e);"
95877,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java,405,,"    return new Tracer.Builder(""DataNode"")."
95878,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FinalizedProvidedReplica.java,101,,"    throw new UnsupportedOperationException(""Replica of type "" + getState() +"
95879,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FinalizedReplica.java,126,,"    throw new UnsupportedOperationException(""Replica of type "" + getState() +"
95880,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java,387,,"    throw new UnsupportedOperationException(""Replica of type "" + getState() +"
95881,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java,207,,"      throw new IllegalArgumentException(""Incompatible fromReplica """
95882,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java,208,,"          + ""state: "" + fromReplica.getState());"
95883,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaWaitingToBeRecovered.java,101,,"    throw new UnsupportedOperationException(""Replica of type "" + getState() +"
95884,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/DatasetVolumeChecker.java,125,,"      throw new HadoopIllegalArgumentException(""Invalid value configured for """
95885,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/DatasetVolumeChecker.java,126,,"          + DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY + "" - """
95886,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/DataNodeVolumeMetrics.java,200,,"          ""Meatadata Operation Latency in ms"", ""ops"", ""latency"", interval);"
95887,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/DataNodeVolumeMetrics.java,200,,"          ""Meatadata Operation Latency in ms"", ""ops"", ""latency"", interval);"
95888,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java,409,,"    FsDatasetImpl.LOG.info(""Moved "" + blockFile + "" to "" + targetBlockFile);"
95889,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java,419,,"          LOG.warn(""Failed to cache "" + key + "": could not reserve "" +"
95890,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java,970,,"          + "" from "" + replicaInfo.getMetadataURI() + "" to "" + dstmeta, e);"
95891,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java,970,,"          + "" from "" + replicaInfo.getMetadataURI() + "" to "" + dstmeta, e);"
95892,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java,2315,,"            LOG.info(""Failed to delete replica "" + invalidBlks[i]"
95893,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java,2435,,"          LOG.warn(""Failed to cache block with id "" + blockId + "", pool "" +"
95894,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java,2875,,"        + "", replica="" + replica);"
95895,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsVolumeImpl.java,1160,,"        throw new IOException(""Failed to delete "" + rbwDir);"
95896,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/ProvidedVolumeImpl.java,347,,"        ""ProvidedVolume does not yet support writes"");"
95897,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/DataNodeMetrics.java,233,,"          ""Packet Ack RTT in ns"", ""ops"", ""latency"", interval);"
95898,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/DataNodeMetrics.java,233,,"          ""Packet Ack RTT in ns"", ""ops"", ""latency"", interval);"
95899,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java,194,,"      System.out.println(e + "".  Exiting ..."");"
95900,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java,568,,"      LOG.warn(""addDirective of "" + info + "" failed: "", e);"
95901,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CachedBlock.java,170,,"        ""in the list."");"
95902,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java,318,,"        LOG.info(""The policy name "" + assignedNewName + "" already exists"");"
95903,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java,57,,"      throw new AclException(e.getMessage() + "" Path: "" + src, e);"
95904,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java,56,,"          "" to "" + dst);"
95905,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java,183,,"      NameNode.stateChangeLog.warn(""DIR* FSDirectory.unprotectedRenameTo: "" +"
95906,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java,184,,"          ""failed to rename "" + src + "" to "" + dst + "" because destination "" +"
95907,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java,326,,"        ""Bad state: %s"", state);"
95908,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,554,,"      throw new IOException(""Unsupported without logversion"");"
95909,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,703,,"          .append("", path="")"
95910,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,707,,"          .append("", mtime="")"
95911,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,732,,"          .append("", opCode="")"
95912,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,734,,"          .append("", txid="")"
95913,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,742,,"      XMLUtils.addSaxString(contentHandler, ""LENGTH"","
95914,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,744,,"      XMLUtils.addSaxString(contentHandler, ""INODEID"","
95915,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,746,,"      XMLUtils.addSaxString(contentHandler, ""PATH"", path);"
95916,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,747,,"      XMLUtils.addSaxString(contentHandler, ""REPLICATION"","
95917,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,749,,"      XMLUtils.addSaxString(contentHandler, ""MTIME"","
95918,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,751,,"      XMLUtils.addSaxString(contentHandler, ""ATIME"","
95919,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,755,,"      XMLUtils.addSaxString(contentHandler, ""CLIENT_NAME"", clientName);"
95920,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,756,,"      XMLUtils.addSaxString(contentHandler, ""CLIENT_MACHINE"", clientMachine);"
95921,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,786,,"      if (st.hasChildren(""BLOCK"")) {"
95922,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1314,,"          throw new IOException(""Incorrect data format. """
95923,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1346,,"          .append("", timestamp="")"
95924,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1362,,"      XMLUtils.addSaxString(contentHandler, ""TIMESTAMP"","
95925,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1487,,"      XMLUtils.addSaxString(contentHandler, ""SRC"", src);"
95926,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1488,,"      XMLUtils.addSaxString(contentHandler, ""DST"", dst);"
95927,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1830,,"      XMLUtils.addSaxString(contentHandler, ""GENSTAMP"","
95928,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,1954,,"      XMLUtils.addSaxString(contentHandler, ""BLOCK_ID"","
95929,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,2024,,"      XMLUtils.addSaxString(contentHandler, ""MODE"","
95930,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,2108,,"        XMLUtils.addSaxString(contentHandler, ""USERNAME"", username);"
95931,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,2111,,"        XMLUtils.addSaxString(contentHandler, ""GROUPNAME"", groupname);"
95932,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,2173,,"      XMLUtils.addSaxString(contentHandler, ""NSQUOTA"","
95933,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,2308,,"      XMLUtils.addSaxString(contentHandler, ""DSQUOTA"","
95934,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,2645,,"      XMLUtils.addSaxString(contentHandler, ""VALUE"", value);"
95935,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,3119,,"      XMLUtils.addSaxString(contentHandler, ""EXPIRY_TIME"","
95936,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,3125,,"          ""DELEGATION_TOKEN_IDENTIFIER"").get(0));"
95937,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,3509,,"      XMLUtils.addSaxString(contentHandler, ""SNAPSHOTROOT"", snapshotRoot);"
95938,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,3510,,"      XMLUtils.addSaxString(contentHandler, ""SNAPSHOTNAME"", snapshotName);"
95939,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,4558,,"        XMLUtils.addSaxString(contentHandler, ""KEY"", entry.getKey());"
95940,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,4647,,"      XMLUtils.addSaxString(contentHandler, ""POLICYNAME"", this.ecPolicyName);"
95941,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,5547,,"      contentHandler.startElement("""", """", ""ENTRY"", new AttributesImpl());"
95942,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,5551,,"        XMLUtils.addSaxString(contentHandler, ""NAME"", e.getName());"
95943,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java,5578,,"      contentHandler.startElement("""", """", ""XATTR"", new AttributesImpl());"
95944,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java,631,,"          LOG.info(""Renaming reserved path "" + oldPath + "" to "" + newPath);"
95945,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageSerialization.java,346,,"  @SuppressWarnings(""deprecation"")"
95946,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java,5532,,"          ""NameNode"", ""FSNamesystemState"", namesystemBean);"
95947,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java,6510,,"          .put(""xferaddr"", node.getXferAddr())"
95948,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java,6511,,"          .put(""location"", node.getNetworkLocation())"
95949,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java,6709,,"    innerInfo.put(""min"", StringUtils.format(""%.2f%%"", min));"
95950,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java,6735,,"          jasMap.put(""stream"", ""Failed"");"
95951,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java,334,,"      + StartupOption.BACKUP.getName() + ""] | \n\t["""
95952,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java,838,,"        ""NameNode"", (short) 128),"
95953,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java,1866,,"      throw new ServiceFailedException(""HA for namenode is not enabled"");"
95954,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java,791,,"          + MAX_PATH_LENGTH + "" characters, "" + MAX_PATH_DEPTH + "" levels."");"
95955,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java,791,,"          + MAX_PATH_LENGTH + "" characters, "" + MAX_PATH_DEPTH + "" levels."");"
95956,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java,904,,"              + "" blocks of total size "" + missize + "" B."");"
95957,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java,1280,,"            .append("" B)"");"
95958,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java,1297,,"        res.append(""\n  ********************************"");"
95959,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java,1303,,"                .append("" %)"");"
95960,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java,124,,"    LOG.info(""Downloaded file "" + dstFiles.get(0).getName() + "" size "" +"
95961,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java,124,,"    LOG.info(""Downloaded file "" + dstFiles.get(0).getName() + "" size "" +"
95962,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/TransferFsImage.java,125,,"        dstFiles.get(0).length() + "" bytes."");"
95963,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/metrics/NameNodeMetrics.java,188,,"          ""Journal syncs"", ""ops"", ""latency"", interval);"
95964,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/metrics/NameNodeMetrics.java,188,,"          ""Journal syncs"", ""ops"", ""latency"", interval);"
95965,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java,186,,"    final NameNode namenode = (NameNode)context.getAttribute(""name.node"");"
95966,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java,452,,"  @Consumes({""*/*""})"
95967,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java,549,,"  @Path(""{"" + UriFsPathParam.NAME + "":.*}"")"
95968,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java,700,,"        final String js = JsonUtil.toJsonString(""Location"", uri);"
95969,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java,711,,"      final String js = JsonUtil.toJsonString(""boolean"", b);"
95970,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java,871,,"      throw new UnsupportedOperationException(op + "" is not supported"");"
95971,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,137,,"      listing.addRow(""-force"","
95972,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,155,,"      String path = StringUtils.popOptionWithArgument(""-path"", args);"
95973,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,189,,"        System.err.println(""Can't understand argument: "" + args.get(0));"
95974,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,258,,"        System.err.println(""Usage is "" + getShortUsage());"
95975,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,459,,"      listing.addRow(""-stats"", ""List path-based cache directive statistics."");"
95976,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,644,,"        System.err.print(""Can't understand arguments: "" +"
95977,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java,775,,"        prefix = "" and "";"
95978,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java,128,,"      final String path = StringUtils.popOptionWithArgument(""-path"", args);"
95979,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CryptoAdmin.java,142,,"        System.err.println(""Can't understand argument: "" + args.get(0));"
95980,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,442,,"    ""\t["" + SetQuotaCommand.USAGE + ""]\n"" +"
95981,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,442,,"    ""\t["" + SetQuotaCommand.USAGE + ""]\n"" +"
95982,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,644,,"      printUsage(""-safemode"");"
95983,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,1075,,"      System.err.println(""Usage: hdfs dfsadmin"""
95984,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,1239,,"            ""default is DFS_DATANODE_IPC_DEFAULT_PORT.\n"";"
95985,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,1551,,"      printUsage(""-upgrade"");"
95986,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,2206,,"    } else if (""-deleteBlockPool"".equals(cmd)) {"
95987,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java,2218,,"    } else if (""-shutdownDatanode"".equals(cmd)) {"
95988,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSHAAdmin.java,60,,"          .put(""-transitionToObserver"", new UsageInfo(""<serviceId>"","
95989,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSHAAdmin.java,62,,"          .put(""-failover"", new UsageInfo("
95990,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java,199,,"          stream, ""UTF-8""));"
95991,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/ECAdmin.java,116,,"        System.err.println(getName() + "": Too many arguments"");"
95992,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/ECAdmin.java,274,,"      listing.addRow(""<policy>"", ""The name of the erasure coding policy"");"
95993,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/ECAdmin.java,274,,"      listing.addRow(""<policy>"", ""The name of the erasure coding policy"");"
95994,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/ECAdmin.java,283,,"          ""-policy"", args);"
95995,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java,140,,"      listing.addRow(""<path>"","
95996,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java,149,,"      final String path = StringUtils.popOptionWithArgument(""-path"", args);"
95997,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/XmlEditsVisitor.java,80,,"      throw new IOException(""SAX error: "" + e.getMessage());"
95998,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java,373,,"    map.put(""length"", data[2]);"
95999,./TargetProjects/hadoop/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java,603,,"          map.put(""replication"", INodeFile.DEFAULT_REPL_FOR_STRIPED_BLOCKS);"
